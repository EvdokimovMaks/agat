#include XLREPORT.vih

#component "AGAT"

interface ThreeMillionReport;

var
  pXL: XLSRepBuilder;
  sXLSFileName: string = '';
  sXLTFileName: string = '';
  dBeg, dEnd  : date;
  igkMarker   : longint;
  isCreateXLT : boolean = false;

//#region Queries

sql query qGetPlpors =
select 1           as Razdel,
       pl.nodok    as DocNumber,
       pl.datvip   as DocDate,
       pl.NAMEPL1+' '+pl.NAMEPL2+' '+pl.NAMEPL3 as Naznach,
       pl.sumplat  as Summa,
       spkIGK.nrec as IGKNrec,
       spkIGK.name as IGKName
from spcash spc
join cashbank cb on cb.nrec = spc.ccashbank
join usersdoc ud on ud.tipgal = 1 and ud.razdel = cb.razdel and ud.ccashbank = cb.nrec
join plpor pl on pl.tidk = ud.tipusers and pl.datvip between :dbeg and :dend
join attrval av on av.wtable = 9015 and av.crec = pl.nrec and av.cattrnam = #comp(000100000000077Ah) and av.vcomp = #comp(000100000000139Eh)
join spkau spkRS on spkRS.nrec = (case when spc.tblos[1] = 10545 then spc.kauos[1]
                                       when spc.tblos[2] = 10545 then spc.kauos[2]
                                       when spc.tblos[3] = 10545 then spc.kauos[3]
                                       when spc.tblos[4] = 10545 then spc.kauos[4]
                                       when spc.tblos[5] = 10545 then spc.kauos[5]
                                       when spc.tblos[6] = 10545 then spc.kauos[6] end)
join spkau spkIGK on spkIGK.nrec = (case when spc.tblos[1] = 10527 then spc.kauos[1]
                                         when spc.tblos[2] = 10527 then spc.kauos[2]
                                         when spc.tblos[3] = 10527 then spc.kauos[3]
                                         when spc.tblos[4] = 10527 then spc.kauos[4]
                                         when spc.tblos[5] = 10527 then spc.kauos[5]
                                         when spc.tblos[6] = 10527 then spc.kauos[6] end)
;

sql query qGetBasedocs =
select case when bd.ddoc > :dend then 4
            else case when vp.vcomp = #comp(0001000000001424h) then 3
                      else 2
                 end
            end    as Reestr,
       bd.nodoc    as DocNumber,
       bd.ddoc     as DocDate,
       coalesce(naz.vstring,'') as Naznach,
       sps.summa   as Summa,
       spkIGK.nrec as IGKNrec,
       spkIGK.name as IGKName
from basedoc bd
left join attrval vk on vk.wtable = 1102 and vk.crec = bd.nrec and vk.cattrnam = #comp(0001000000000087h)
left join attrval vb on vb.wtable = 1102 and vb.crec = bd.nrec and vb.cattrnam = #comp(0001000000000089h)
left join attrval vp on vp.wtable = 1102 and vp.crec = bd.nrec and vp.cattrnam = #comp(0001000000000088h)
left join attrval vd on vd.wtable = 1102 and vd.crec = bd.nrec and vd.cattrnam = #comp(000100000000008Ah)
left join attrval naz on naz.wtable = 1102 and naz.crec = bd.nrec and naz.cattrnam = #comp(000100000000010Dh)
join stepdoc sd on sd.cbasedoc = bd.nrec
join spstep sps on sps.cstepdoc = sd.nrec
join attrval avRejim on avRejim.wtable = 1104 and avRejim.crec = sps.nrec and
                        avRejim.cattrnam = #comp(000100000000079Eh) and avRejim.vComp = #comp(000100000000139Eh)
join attrval avRS on avRS.wtable = 1104 and avRS.crec = sps.nrec and avRS.cattrnam = #comp(0001000000000A86h)
join spkau spkRS on spkRS.nrec = avRS.vcomp
left join (select bf.cbasedoc, spkau.nrec as RSNrec, count(*) as cnt
           from (select distinct tipdoc, cbasedoc
                 from basefin
                 union
                 select distinct tipdoc, cpredopldo
                 from basefin
                ) bf
           join usersdoc ud on ud.tipusers = bf.tipdoc
           join cashbank cb on cb.nrec = ud.ccashbank
           join spcash spc on spc.ccashbank = cb.nrec and spc.cplanssch = #comp(000100000000000Eh)
           join spkau on spkau.nrec = (case when spc.tblos[1] = 10545 then spc.kauos[1]
                                            when spc.tblos[2] = 10545 then spc.kauos[2]
                                            when spc.tblos[3] = 10545 then spc.kauos[3]
                                            when spc.tblos[4] = 10545 then spc.kauos[4]
                                            when spc.tblos[5] = 10545 then spc.kauos[5]
                                            when spc.tblos[6] = 10545 then spc.kauos[6] end)
           where bf.cbasedoc <> #comp(0)
           group by bf.cbasedoc, spkau.nrec
          ) bf on bf.cbasedoc = bd.nrec and bf.RSNrec = spkRS.nrec
join spcash spc on spc.cplanssch = #comp(000100000000000Eh) and (case when spc.tblos[1] = 10545 then spc.kauos[1]
                                                                      when spc.tblos[2] = 10545 then spc.kauos[2]
                                                                      when spc.tblos[3] = 10545 then spc.kauos[3]
                                                                      when spc.tblos[4] = 10545 then spc.kauos[4]
                                                                      when spc.tblos[5] = 10545 then spc.kauos[5]
                                                                      when spc.tblos[6] = 10545 then spc.kauos[6] end) = spkRS.nrec
left join spkau spkIGK on spkIGK.nrec = (case when spc.tblos[1] = 10527 then spc.kauos[1]
                                              when spc.tblos[2] = 10527 then spc.kauos[2]
                                              when spc.tblos[3] = 10527 then spc.kauos[3]
                                              when spc.tblos[4] = 10527 then spc.kauos[4]
                                              when spc.tblos[5] = 10527 then spc.kauos[5]
                                              when spc.tblos[6] = 10527 then spc.kauos[6] end)
where bd.viddoc in (101,111) and coalesce(bf.cnt,0) = 0 and
      (
        (
         vk.vcomp in (#comp(00010000000001CEh), #comp(00010000000013CCh), #comp(0001000000001423h)) and
         vb.vcomp in (#comp(00010000000001CEh), #comp(00010000000013CCh), #comp(0001000000001423h)) and
         vp.vcomp in (#comp(00010000000001CEh), #comp(00010000000013CCh), #comp(0001000000001423h)) and
         vd.vcomp in (#comp(00010000000001CEh), #comp(00010000000013CCh), #comp(0001000000001423h))
        )
        or
        (
         vp.vcomp = #comp(0001000000001424h)
        )
      )
;

//#endregion

table struct tRS (
  IGKName : string,
  IGKNrec : comp
) with index (
  i01 = IGKNrec
);

table struct tDocs (
  Razdel    : byte,
  DocNumber : string,
  DocDate   : date,
  Naznach   : string,
  Summa     : double,
  IGKName   : string,
  IGKNrec   : comp
) with index (
  i01 = IGKNrec + razdel
);

create view
as select *
from tRS, tDocs;

parameters dBeg, dEnd, igkMarker, sXLTFileName, isCreateXLT

procedure MakeRSTable; //content tRS by 2 tables (tDocs and tDocs)
{
  delete all tRS;
  delete all tDocs;

  var q: IQuery;
  var rs: IResultSet;

  var isFilteredByIGK: boolean = false;

  if igkMarker != 0
    if getmarkercount(igkMarker) > 0
      isFilteredByIGK := true;

  if isFilteredByIGK
  {
    //создаем временную таблицу для маркера по ИГК
    sqlCreateTmpTable('table tigkfilter (crec: comp);', ctmNormal);
    //заполняем ее значениями из маркера
    sqlTruncateTmpTable('tigkfilter');
    q := querymanager.createquery('insert tigkfilter (crec) values (:crec)');

    var i: longint = 0;
    var c: comp = 0;
    for (i := 0; getmarker(igkMarker, i, c); i++)
      q.setparam('crec', c).execute;
  }

  //выполняем 1ый запрос

  var s1: longint = 0;
  sqladdstr(s1, qGetPlpors);
  if isFilteredByIGK
    sqladdstr(s1,'where spkigk.nrec in (select crec from tigkfilter)');

  sqlCopyInto(
    querymanager.createquery(s1)
                .setParam('dBeg', dBeg)
                .setParam('dEnd', dEnd)
                .getresultset,
    #tDocs,
    true
  );

  //потом 2й запрос

  var s2: longint = 0;
  sqlAddStr(s2, qGetBasedocs);
  if isFilteredByIGK
    sqlAddStr(s2, 'and coalesce(spkigk.nrec,#comp(0)) in (select crec from tigkfilter)');

  sqlCopyInto(
    querymanager.createquery(s2)
                .setParam('dEnd', dEnd)
                .getResultSet,
    #tDocs,
    true
  );

  //заполняем расчетные счета

  _loop tDocs
  {
    if getfirst tRS where ((tDocs.IGKNrec == tRS.IGKNrec)) != tsOk
    {
      ClearBuffer(#tRS);
      tRS.IGKNrec := tDocs.IGKNrec;
      tRS.IGKName := tDocs.IGKName;
      insert current tRS;
    }
  }

  if isFilteredByIGK
    sqlDropTmpTable('tigkfilter');
}

function PrintRazdel(aRazdel: byte; aRazdelName: string): double;
{
  var subtotal: double = 0;
  pXL.ClearTblBuffer;
  pXL.SetTblStringFldValue('IGKName', aRazdelName);
  pXL.SetTblNumberFldValue('Status',  2);
  pXL.InsTblRow;
  _loop tDocs where ((tRS.IGKNrec == tDocs.IGKNrec and aRazdel == tDocs.Razdel))
  {
    pXL.ClearTblBuffer;
    pXL.SetTblStringFldValue('IGKName',   ''''+tDocs.IGKName);
    pXL.SetTblStringFldValue('DocNumber', tDocs.DocNumber);
    pXL.SetTblDateFldValue  ('DocDate',   tDocs.DocDate);
    pXL.SetTblStringFldValue('Naznach',   tDocs.Naznach);
    pXL.SetTblNumberFldValue('Summa',     tDocs.Summa);
    pXL.SetTblNumberFldValue('Status',    0);
    pXL.InsTblRow;
    subtotal += tDocs.Summa;
  }
  pXL.ClearTblBuffer;
  pXL.SetTblStringFldValue('IGKName', 'Итого по разделу');
  pXL.SetTblNumberFldValue('Summa',   subtotal);
  pXL.SetTblNumberFldValue('Status',  3);
  pXL.InsTblRow;
  result := subtotal;
}

procedure PrintTotal(aName: string; aSumma: double; aStatus: byte);
{
  pXL.ClearTblBuffer;
  pXL.SetTblStringFldValue('IGKName', aName);
  pXL.SetTblNumberFldValue('Summa',   aSumma);
  pXL.SetTblNumberFldValue('Status',  aStatus);
  pXL.InsTblRow;
}

procedure PrintReport;
{
  if (not isCreateXLT) Set sXLSFileName := pXL.CreateReport(sXLTFileName, True)
                  else Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);

  pXL.CreateTbls(sXLSFileName);

  pXL.CreateTbl('Main');
  pXL.CreateTblFld('IGKName');
  pXL.CreateTblFld('DocNumber');
  pXL.CreateTblFld('DocDate');
  pXL.CreateTblFld('Summa');
  pXL.CreateTblFld('Naznach');
  pXL.CreateTblFld('Status');

  if (not isCreateXLT)
  {
    StartNewVisual(vtRotateVisual, vfThread + vfBreak + vfTimer, 'Формирование отчёта', 0);
    _loop tRS
    {
      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('IGKName', ''''+tRS.IGKName);
      pXL.SetTblNumberFldValue('Status',  1);
      pXL.InsTblRow;

      var d1, d2, d3, d4: double = 0;

      d1 := PrintRazdel(1, '1. Платежки в период с ' + dBeg + ' по ' + dEnd);
      d2 := PrintRazdel(2, '2. Запланированные платежи (согласованно всеми)');
      d3 := PrintRazdel(3, '3. Запланированные платежи (на рабочую группу виза ПЭУ)');
      d4 := PrintRazdel(4, '4. Будущие платежи');

      PrintTotal('ИТОГО по ИГК ' + tRS.IGKName, d1+d2+d3, 4);
      PrintTotal('ИТОГО остаток из 3 млн руб. без учета "на рабочую группу"', 3000000-d1-d2, 4);
      PrintTotal('ИТОГО остаток из 3 млн руб.', 3000000-d1-d2-d3, 4);

      if (not NextVisual) break;
    }
  }
  stopvisual('',0);
  pXL.PublishTbl('Main');
  pXL.CreateVar(sXLSFileName);
  pXL.SetDateVar('dBeg', dBeg);
  pXL.SetDateVar('dEnd', dEnd);
  pXL.PublishVar;
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}

handleevent
cminit:
{
  if dEnd = 0
    dEnd := cur_date;

  if dBeg = 0
    dBeg := sub_day(dEnd,30);

  if sXLTFileName = ''
    sXLTFileName := TranslatePath('%StartPath%xls\ReportForThreeMln.xltm'); //rename to .xltm when content report

  MakeRSTable;
  PrintReport; //first of all use true for create XLT, then false - to make report

}
end;
end.

interface ReportForThreeMlnUI 'Отчёт по ДО с режимом использования до 3 млн (ФЗ-275)', escclose, doaccept;
show (,,40,7);

var
  dBeg, dEnd: date;
  mnth: byte;
  yeah: word;
  sXLTFileName: string;
  igkMarker: longint;
  _getkau: getkau;

function GetIGKMarkerView: string;
{
  var cnt: longint;
  cnt := getmarkercount(igkMarker);
  case cnt of
    0: result := 'Все ИГК';
    1: {
      var c: comp = 0;
      if getmarker(igkMarker, 0, c)
        result := if(getanykau(1, 10527, c), givenanname(1), '');
      else
        result := 'Выбрано элементов: ' + cnt;
    }
    else
      result := 'Выбрано элементов: ' + cnt;
  end;
}

create view
(IGKMarkerField)
as select GetIGKMarkerView
;

screen scMain;
fields
  mnth: [list 1 'Январь', 2 'Февраль', 3 'Март', 4 'Апрель', 5 'Май', 6 'Июль',
              7 'Июнь', 8 'Август', 9 'Сентябрь', 10 'Октябрь', 11 'Ноябрь', 12 'Декабрь'];
  yeah: noprotect, SpinButton[1, 2000, 2100];
  IGKMarkerField: protect, pickbutton;
buttons
  cmMakeMagic, default;
<<

`Месяц`.@@@@@@@@@@@@@ `год`.@@@@@@@@@@

`ИГК`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

            <.     Сформировать     .>
>>
end;


handleevent
cmPick:
{
  case curfield of
    #IGKMarkerField:
    {
      if _getkau.GetCodeKau(2, 10527, 0) > 0
      {
        var l: longint;
        l := initmarker(_getkau.GetMarkerName(10527), 8, 10, 10, false);
        CopyMarker(igkMarker, l);
        donemarker(l,'');
        rereadrecord;
      }
    }
  end;
}
cmDelonprotect:
{
  case curfield of
    #IGKMarkerField:
    {
      clearmarker(igkMarker);
      rereadrecord;
    }
  end;
}
cmMakeMagic:
{
  if mnth = 0 or yeah = 0
  {
    message('Не заполнен период формирования отчета. Заполните пожалуйста период', error);
    exit;
  }
  dBeg := date(1, mnth, yeah);
  dEnd := date(Last_Day(dBeg), mnth, yeah);
  runinterface(AGAT::ThreeMillionReport, dBeg, dEnd, igkMarker, sXLTFileName, false);
}
cminit:
{
  if not readmydsk(mnth, 'Month_Rep3Mln', false) mnth := 1;
  if not readmydsk(yeah, 'Year_Rep3Mln', false) yeah := Year(Cur_Date);

  igkMarker := initmarker('igkMarker_Rep3Mln', 8, 10, 10, false);
  sXLTFileName := TranslatePath('%StartPath%xls\ReportForThreeMln.xltm'); //rename to .xltm when content report
  rereadrecord;
}
cmDone:
{
  savemydsk(mnth, 'Month_Rep3Mln');
  savemydsk(yeah, 'Year_Rep3Mln');
  donemarker(igkMarker, 'igkMarker_Rep3Mln');
}
end;
end.

VipInterface UserReport_ThreeMillionReport Implements IUserReport licensed(free);
Interface UserReport_ThreeMillionReport;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::ReportForThreeMlnUI);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Агат. Отчёт по ДО с режимом использования до 3 млн (ФЗ-275)';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := ''
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'BUY';
    end;
  end;
end.

#component "L_BASEDOC"
.LinkForm 'AGAT_BD_3MLNREP' Prototype is 'PRBDOC'
.Group 'Закупка'
.Group 'Предоплата закупок'
.var
  dBeg, dEnd: date;
  igkMarker: longint;
.endvar
.create view vSpec
as select *
from stepdoc sd, spstep sps, attrval rs, spcash spc
where ((
  comp(BaseDocNrec) == sd.cbasedoc   and
  sd.nrec           == sps.cstepdoc  and
  1104              /== rs.wtable     and
  sps.nrec          /== rs.crec       and
  0001000000000A86h /== rs.cattrnam   and
  000100000000000Eh == spc.cplanssch and
  (spc.tblos[2]     =  10545         and
   spc.kauos[2]     =  rs.vcomp      and
   spc.kauos[1]     <> 0)
));
.NameInList 'Агат. Отчёт по ДО с режимом использования до 3 млн (ФЗ-275)'
.f 'NUL'
.{
.{ CheckEnter ISBASEFIN
.}
.{ CheckEnter ISEXCLASS
.}
.{ CheckEnter ISGROUP
.}
.{
.}
.begin
  var d: date;
  d := StrToDate(ddoc, 'DD/MM/YYYY');
  dBeg := date(1, Month(d), Year(d));
  dEnd := date(Last_Day(dBeg), Month(dBeg), Year(dBeg));
  igkMarker := initmarker('', 8, 10, 20, false);
  vSpec._loop ViewTable
  {
    InsertMarker(igkMarker, vSpec.spc.kauos[1]);
  }
  runinterfacenomodal(AGAT::ThreeMillionReport, dBeg, dEnd, igkMarker, TranslatePath('%StartPath%xls\ReportForThreeMln.xltm'), false);
end.
.if DELIMITER
.else
.end
.}
.endform
