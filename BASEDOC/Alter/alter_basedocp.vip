#include SpstepHelper.vih
#include BasedocHelper.vih
#include AG_LinkMtrToSpec.vih
#include PD_ChangeStatusTxo.vih
#include AG_TriggerUtils.vih

#component "L_BASEDOC"

alter interface VSCHETP;

  var
    _spstepHelper: AGAT::SpstepHelper;

  create view
  as select
    if(IsValid(#avContractId), avContractId.vString, '') (fieldname = ContractID)
  from
    attrval avContractId
  where ((
        coSpecMtr                 == avContractId.wTable
    and SpecMtr.cObj              == avContractId.cRec
    and ATTRNAM_NREC_KATSTROY_IGK == avContractId.cAttrNam
  ));

end.

alter interface VSCHETPB;

  overload
    function CopyDO(nRecDO : Comp; naltype : Word; NRecDog : Comp; WithOutRes : Boolean; ChargeParam : Word; NeedNomMes : Word): comp;
    Function DoBaseDocDelete(DelSoprDoc : boolean; bPack: boolean = FALSE): word;
    Procedure PickFromKat;
    Procedure DoLinkMtr2Spec(awAction: word); //Добавлен функционал пакетной установки ЦУ по помеченным позициям
    Procedure MakeDOonDogDoc; //При формировании ДО по договору отключаем проверку на наличие накладных/платежей к ДО
    Procedure SwitchFields; // При формировании ДО по договору позволяем пользователю заполнить ДО по исходному количеству, а не только по остаткам
    Procedure SpecDO_DublPos; //Дублирование позиции ДО - отключаем триггеры
  end;

  extendformats brvschet;

  var
    _spstepHelper: AGAT::SpstepHelper;
    _basedocHelper: AGAT::BasedocHelper;
    _changeStatusTXO: PD_ChangeStatusTxo;
    _daysDeferredPay: longint;
    _cOldDogovor: comp;
    _cOldAppDog : comp;
    _cOldCalPlan: comp;

  #declare JoinBasedocAttrval(cattrnam, avAlias)
    1102            == #avAlias.wtable and
    basedoc.nrec    == #avAlias.crec and
    #cattrnam       == #avAlias.cattrnam
  #end

  create view
  as select
    _daysDeferredPay (fieldname=DaysDeferredPay)
   ,if(IsValid(#avContractId), avContractId.vString, '') (fieldname = ContractID)
  from attrval avNaznpl,
       attrval avIspoln,
       attrval avDDS,
       attrval avSogl,
       attrval avKazn,
       attrval avBuh,
       attrval avPeu,
       attrval avDir,
       attrval avSMP,
       attrval avISK
      ,attrval avContractId
  where ((
    #JoinBasedocAttrval(ATTRNAM_NAZNPL, avNaznpl) and
    #JoinBasedocAttrval(ATTRNAM_ISPOLN, avIspoln) and
    #JoinBasedocAttrval(ATTRNAM_DDS   , avDDS   ) and
    #JoinBasedocAttrval(ATTRNAM_SOGL  , avSogl  ) and
    #JoinBasedocAttrval(ATTRNAM_KAZN  , avKazn  ) and
    #JoinBasedocAttrval(ATTRNAM_BUH   , avBuh   ) and
    #JoinBasedocAttrval(ATTRNAM_PEU   , avPeu   ) and
    #JoinBasedocAttrval(ATTRNAM_DIR   , avDir   ) and
    #JoinBasedocAttrval(ATTRNAM_SMP   , avSmp   ) and
    #JoinBasedocAttrval(ATTRNAM_ISK   , avIsk   )

    and coKatStroy                == avContractId.wTable
    and SpecMtr.cObj              == avContractId.cRec
    and ATTRNAM_NREC_KATSTROY_IGK == avContractId.cAttrNam
  ))
  condition KatSoprNrec0 = KatSopr.Nrec = comp(0)
  condition BaseFinNrec0 = BaseFin.Nrec = comp(0)
  ;

  create view mw_v
  as select *
  from attrval av, basedoc bd;

  browse brvschet (,hcDOPREDWSPISOKDO, sci1478EnIns);
    table basedoc;
    fields
      basedoc.name     'Примечание'          : [10], protect;
      avIspoln.vString 'Исполнитель договора': [10], protect;
      avDDS.vString    'Статья ДДС'          : [10], protect;
      avSogl.vString   'НА СОГЛ'             : [10], protect;
      avKazn.vString   'Казн'                : [10], protect;
      avBuh.vString    'Бухг'                : [10], protect;
      avPeu.vString    'ПЭУ'                 : [10], protect;
      avDir.vString    'Комм.'               : [10], protect;
      avSmp.vString    'ИСК'                 : [10], protect;
      avIsk.vString    'СМП'                 : [10], protect;
  end;

  Procedure PickFromKat;
  {
    inherited::PickFromKat;
    _spstepHelper.SetSpstepStZatrByBasedoc(basedoc.nrec);
  }

  Function PermitDelete: boolean;
  {
    var _s: string;
    var _c: comp;
    _c := basedoc.nrec;
    _s := '';
    if (mw_v.getfirst av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_SOGL == av.cattrnam)) = tsOk)
      _s := trim(mw_v.av.vstring);
    result := not(_s <> '' and basedoc.desgr <> sgettune('USER.DESCR'));
  }

  Function DoBaseDocDelete(DelSoprDoc : boolean; bPack: boolean = FALSE): word;
  {
    result := 0;
    if not PermitDelete
    {
      message('Запрещено удалять счета, созданные другим пользователем, переданные на согласование');
      result := 0;
    }
    else
    {
      result := inherited::DoBaseDocDelete(DelSoprDoc,bPack);
    }
  }

  function CopyDO(nRecDO : Comp; naltype : Word; NRecDog : Comp; WithOutRes : Boolean; ChargeParam : Word; NeedNomMes : Word): comp; {
    AG_TriggersState::PushAllTriggersState;
    AG_TriggersState::SetAllTriggersState(false);
    var _c: comp = inherited::CopyDO(nRecDO,naltype,NRecDog,WithOutRes,ChargeParam,NeedNomMes);
    if _c <> 0 {
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_SOGL   == av.cattrnam));
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_BUH    == av.cattrnam));
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_DIR    == av.cattrnam));
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_KAZN   == av.cattrnam));
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_PEU    == av.cattrnam));
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_REZERV == av.cattrnam));

      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_PRBUH  == av.cattrnam));
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_PRKAZ  == av.cattrnam));
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_PRDIR  == av.cattrnam));
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_PRPEU  == av.cattrnam));

      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_BUHSCH == av.cattrnam));
      mw_v.delete all av where ((1102 == av.wtable and _c == av.crec and ATTRNAM_BDR    == av.cattrnam));

      mw_v.update bd where ((_c == bd.nrec)) set bd.dform := cur_date;
    }
    AG_TriggersState::PopAllTriggersState;
    result := _c;
  }

  //Дублирование позиции ДО - отключаем триггеры
  Procedure SpecDO_DublPos;
  {
    AG_TriggersState::PushAllTriggersState;
    AG_TriggersState::SetAllTriggersState(false);
    inherited::SpecDO_DublPos;
    AG_TriggersState::PopAllTriggersState;
  }

  //Добавлен функционал пакетной установки ЦУ по помеченным позициям
  Procedure DoLinkMtr2Spec(awAction: word);
  {
    if pSpMarker.Count > 0 and CurTable = #SpStep
    {
      var m: TPtr = InitMarker('', 8, 10, 10, true);
      pSpMarker.ExportTo(m);
      var linkMtrToSpec: AG_ILinkMtrToSpec = AG_ILinkMtrToSpec(new(
        AG_LinkMtrToSpec, _AG_LinkMtrToSpec(coSpStep, m, coGetTune('CELUCHFORMODUL.BUY'))));
      if linkMtrToSpec.showUI = cmDefault
        linkMtrToSpec.linkMtr;
      DoneMarker(m, '');
      rereadrecord(#SpStep);
    }
    else
      inherited::DoLinkMtr2Spec(awAction);
  }

  //При формировании ДО по договору отключаем проверку на наличие накладных/платежей к ДО
  Procedure MakeDOonDogDoc;
  {
    PushConditionForLeave(tcKatSoprNrec0, #KatSopr);
    PushConditionForLeave(tcBaseFinNrec0, #BaseFin);
    inherited::MakeDOonDogDoc;
    PopConditionForLeave(tcKatSoprNrec0, #KatSopr);
    PopConditionForLeave(tcBaseFinNrec0, #BaseFin);
  }

  // При формировании ДО по договору позволяем пользователю заполнить ДО по исходному количеству, а не только по остаткам
  Procedure SwitchFields;
  {
    inherited::SwitchFields;
    //если формирование не по финансовому ПКП
    if wMDP_SpecType != 404
      //если присутствует спецификация
      if bMDP_SpecExist[wMDP_SpecType]
        //разрешаем редактирование поля с типом заполнения ДО - по остаткам / по исходному количеству
        ToggleFieldSelectable(#wMDP_Ostatok, True);
  }

  procedure OnBeforeEditDogAppPKP;
  {
    _cOldDogovor := BaseDoc.cDogovor;
    _cOldAppDog  := BaseDoc.cAppDogovor;
    _cOldCalPlan := BaseDoc.cCalPlan;
  }

  procedure OnAfterEditDogAppPKP;
  {
    if BaseDoc.Status != 2 exit;
    if BaseDoc.cDogovor    = _cOldDogovor and
       BaseDoc.cAppDogovor = _cOldAppDog and
       BaseDoc.cCalPlan    = _cOldCalPlan
      exit;

    RereadRecord(#BaseDoc);

    var wOldStatus: word = BaseDoc.Status;
    var cOldNote: comp = BaseDoc.cNote;

    set BaseDoc.Status := 1;
    set BaseDoc.cNote  := KATNOTES_NREC_BASEDOC_OFORML;
    update current BaseDoc;

    oStatLog.StatLog_InsNewStat(40, BaseDoc.Nrec, wOldStatus, cOldNote,
                                BaseDoc.Status, BaseDoc.cNote, 'Изменен договор/ДС/ПКП');

    _changeStatusTXO.process(40, BaseDoc.Nrec, cOldNote, BaseDoc.cNote);

    message('Счет переведен в статус "Оформляемый"');
  }

  #declare InheritedHandleevent(Command)
  case inherited::handleevent(#Command) of
    heAbort: Abort;
    heStop: Stop;
  end;
  #end

  tableevent table BaseDoc;
    cmPick:
    {
      case curfield of
        #DogNoDoc
       ,#DogDDoc
       ,#Dogovor.dDoc
       ,#AppDogNoDoc
       ,#AppDogDDoc
       ,#AppDogovor.dDoc
       ,#CalPlan.NoDoc
       ,#CalPlan.dInput:
        {
          OnBeforeEditDogAppPKP;
          #InheritedHandleevent(cmPick)
          OnAfterEditDogAppPKP;
        }
        else
          #InheritedHandleevent(cmPick)
      end;
    }
    cmDelOnProtect:
    {
      case curfield of
        #DogNoDoc
       ,#DogDDoc
       ,#Dogovor.dDoc
       ,#AppDogNoDoc
       ,#AppDogDDoc
       ,#AppDogovor.dDoc
       ,#CalPlan.NoDoc
       ,#CalPlan.dInput:
        {
          OnBeforeEditDogAppPKP;
          #InheritedHandleevent(cmDelOnProtect)
          OnAfterEditDogAppPKP;
        }
        else
          #InheritedHandleevent(cmDelOnProtect)
      end;
    }
    cmPositionChanged:
    {
      #InheritedHandleevent(cmPositionChanged);
      _daysDeferredPay := _basedocHelper.GetDeferredDaysCount(basedoc.nrec);
    }
  end;  //tableevent table BaseDoc

  handleevent
    cmCheckField:
    {
      case curfield of
        #avNaznpl.vstring:
        {
          if isvalidall(#avNaznpl)
          {
            update current avNaznpl;
          }
          else
          {
            var s: string;
            s := avNaznpl.vstring;
            clearbuffer(#avNaznpl);
            avNaznpl.vstring := s;
            insert current avNaznpl;
          }
        }
      end;
    }
    cmpick: {
      case curfield of
        #avNaznpl.vstring:
        {
          UpdateTable;
          _basedocHelper.SetNaznPl(BaseDoc.Nrec);
          RescanPanel(#basedoc);
          RereadRecord(#avNaznpl);
        }
      end;
    }
  end;

end.
