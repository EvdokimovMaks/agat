function SetBaseDocPos(cBaseDocNrec: comp): boolean;
{
  result := SetPos(cBaseDocNrec);
}
function SetSpStepPos(cSpStepNrec: comp): boolean;
{
  result := getfirst SpStep where ((cSpStepNrec == SpStep.Nrec)) = tsOk;
}
function SetSpStepPrice(dNewPrice: double): boolean;
{
  set SpStep.Price := dNewPrice;
  ChangePos(SpStep.cGrNal);
  result := update current SpStep = tsOk;
  ModifDo;
}
function SetSpStepKol(dNewKol: double): boolean;
{
  set SpStep.Kol    := dNewKol;
  set SpStep.KolOpl := dNewKol;
  set SpStep.OstKol := dNewKol;
  ChangePos(SpStep.cGrNal);
  result := update current SpStep = tsOk;
  ModifDo;
}
function SetSpStepMcUsl(wNewPrMc: word; cNewMcUsl: comp): boolean;
{
  set SpStep.cMcUsl := cNewMcUsl;
  set SpStep.PrMc := wNewPrMc;
  ChangePos(SpStep.cGrNal);
  result := update current SpStep = tsOk;
  ModifDo;
}
function SetSpStepGrNal(cNewGrNal: comp): boolean;
{
  ChangePos(cNewGrNal);
  SpStep.cGrNal := cNewGrNal;
  result := update current SpStep = tsOk;
  ModifDo;
}
function SetSpStepSpDocs(cNewSpDocs: comp): boolean;
{
  set SpStep.cSpDocs := cNewSpDocs;
  result := update current SpStep = tsOk;
  ModifDo;
}
procedure RecalcBaseDoc(GroupCalc: boolean);
{
  GetTotal(GroupCalc);
}
function SetSpStepSpecMtr(buf: Type$SpecMtr): boolean;
{
  var i: byte;
  if isValid(tnSpecMtr)
  {
    SpecMtr.cObj := buf.cObj;
    for (i := 1; i <= 9; i++) SpecMtr.cKau[i] := buf.cKau[i];
    update current SpecMtr;
  }
  else
  {
    ClearBuffer(tnSpecMtr);
    SpecMtr.coTable   := coSpStep;
    SpecMtr.cSaldTune := buf.cSaldTune;
    SpecMtr.cSpec     := SpStep.Nrec;
    SpecMtr.cObj      := buf.cObj;
    for (i := 1; i <= 9; i++) SpecMtr.cKau[i] := buf.cKau[i];
    insert current SpecMtr;
  }
  ModifDo;
}
