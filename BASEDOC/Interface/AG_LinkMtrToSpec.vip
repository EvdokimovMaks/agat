#include GetKau.vih
#include MtrFuncs.vih
#include AG_LinkMtrToSpec.vih

#component "AGAT"

interface AG_LinkMtrToSpec;

var
  _wTable: word;
  _m: TPtr;
  _cSaldTune: comp;
  _cObj: comp;
  _cKau: array[1..9] of comp;
  _flags: word;
  _cCurSpec: comp;
#include GetKau.var
#include MtrFuncs.var

create view
as select
  if(IsValid(tnSaldTune), SaldTune.Name, '')(fieldname=SaldTuneFld)
 ,if(IsValid(tnKatRoleObj), KatRoleObj.Name, GetAnalitikName(SaldTune.wObj))(fieldname=ObjLabelFld)
 ,if(IsValid(tnKatRole1), KatRole1.Name, GetAnalitikName(SaldTune.wKau[1]))(fieldname=Kau1LabelFld)
 ,if(IsValid(tnKatRole2), KatRole2.Name, GetAnalitikName(SaldTune.wKau[2]))(fieldname=Kau2LabelFld)
 ,if(IsValid(tnKatRole3), KatRole3.Name, GetAnalitikName(SaldTune.wKau[3]))(fieldname=Kau3LabelFld)
 ,if(IsValid(tnKatRole4), KatRole4.Name, GetAnalitikName(SaldTune.wKau[4]))(fieldname=Kau4LabelFld)
 ,if(IsValid(tnKatRole5), KatRole5.Name, GetAnalitikName(SaldTune.wKau[5]))(fieldname=Kau5LabelFld)
 ,if(IsValid(tnKatRole6), KatRole6.Name, GetAnalitikName(SaldTune.wKau[6]))(fieldname=Kau6LabelFld)
 ,if(IsValid(tnKatRole7), KatRole7.Name, GetAnalitikName(SaldTune.wKau[7]))(fieldname=Kau7LabelFld)
 ,if(IsValid(tnKatRole8), KatRole8.Name, GetAnalitikName(SaldTune.wKau[8]))(fieldname=Kau8LabelFld)
 ,if(IsValid(tnKatRole9), KatRole9.Name, GetAnalitikName(SaldTune.wKau[9]))(fieldname=Kau9LabelFld)
 ,ShowKau(SaldTune.wObj, _cObj)(fieldname=ObjFld)
 ,ShowKau(SaldTune.wKau[1], _cKau[1])(fieldname=Kau1Fld)
 ,ShowKau(SaldTune.wKau[2], _cKau[2])(fieldname=Kau2Fld)
 ,ShowKau(SaldTune.wKau[3], _cKau[3])(fieldname=Kau3Fld)
 ,ShowKau(SaldTune.wKau[4], _cKau[4])(fieldname=Kau4Fld)
 ,ShowKau(SaldTune.wKau[5], _cKau[5])(fieldname=Kau5Fld)
 ,ShowKau(SaldTune.wKau[6], _cKau[6])(fieldname=Kau6Fld)
 ,ShowKau(SaldTune.wKau[7], _cKau[7])(fieldname=Kau7Fld)
 ,ShowKau(SaldTune.wKau[8], _cKau[8])(fieldname=Kau8Fld)
 ,ShowKau(SaldTune.wKau[9], _cKau[9])(fieldname=Kau9Fld)
from
  SaldTune
 ,KatRole KatRoleObj
 ,KatRole KatRole1
 ,KatRole KatRole2
 ,KatRole KatRole3
 ,KatRole KatRole4
 ,KatRole KatRole5
 ,KatRole KatRole6
 ,KatRole KatRole7
 ,KatRole KatRole8
 ,KatRole KatRole9
 ,SpecMtr
where ((
      _cSaldTune        == SaldTune.Nrec
  and SaldTune.cRoleObj == KatRoleObj.Nrec
  and SaldTune.cRole[1] == KatRole1.Nrec
  and SaldTune.cRole[2] == KatRole2.Nrec
  and SaldTune.cRole[3] == KatRole3.Nrec
  and SaldTune.cRole[4] == KatRole4.Nrec
  and SaldTune.cRole[5] == KatRole5.Nrec
  and SaldTune.cRole[6] == KatRole6.Nrec
  and SaldTune.cRole[7] == KatRole7.Nrec
  and SaldTune.cRole[8] == KatRole8.Nrec
  and SaldTune.cRole[9] == KatRole9.Nrec
  and _wTable           == SpecMtr.coTable
  and _cCurSpec         == SpecMtr.cSpec
  and _cSaldTune        == SpecMtr.cSaldTune
));

procedure toggleKauFld(fld: longint; isEnabled: boolean); forward;

procedure refreshFields;
{
  if getfirst SaldTune = tsOk {}
  toggleKauFld(#ObjFld , SaldTune.wObj    != 0);
  toggleKauFld(#Kau1Fld, SaldTune.wKau[1] != 0);
  toggleKauFld(#Kau2Fld, SaldTune.wKau[2] != 0);
  toggleKauFld(#Kau3Fld, SaldTune.wKau[3] != 0);
  toggleKauFld(#Kau4Fld, SaldTune.wKau[4] != 0);
  toggleKauFld(#Kau5Fld, SaldTune.wKau[5] != 0);
  toggleKauFld(#Kau6Fld, SaldTune.wKau[6] != 0);
  toggleKauFld(#Kau7Fld, SaldTune.wKau[7] != 0);
  toggleKauFld(#Kau8Fld, SaldTune.wKau[8] != 0);
  toggleKauFld(#Kau9Fld, SaldTune.wKau[9] != 0);

  var mask: longint = 0;
  mask += if(SaldTune.wObj = 0, 1, 0);
  mask += if(SaldTune.wKau[1] = 0, 2, 0);
  mask += if(SaldTune.wKau[2] = 0, 4, 0);
  mask += if(SaldTune.wKau[3] = 0, 8, 0);
  mask += if(SaldTune.wKau[4] = 0, 16, 0);
  mask += if(SaldTune.wKau[5] = 0, 32, 0);
  mask += if(SaldTune.wKau[6] = 0, 64, 0);
  mask += if(SaldTune.wKau[7] = 0, 128, 0);
  mask += if(SaldTune.wKau[8] = 0, 256, 0);
  mask += if(SaldTune.wKau[9] = 0, 512, 0);
  ClusterDisabledField(_flags, mask);

  RereadRecord(#SaldTune);
}

procedure pickKau(wKau: word; var cKau: comp; wFlag: word);
{
  if iGetKau.getCodeKau(cgiPick, wKau, cKau) > 0
  {
    _flags |= wFlag;
    RereadRecord;
  }
}

procedure pickSaldTune;
{
  if RunInterface(L_SaldoMtr::GetSaldTune, _cSaldTune, cgiPick) = cmDefault
  {
    set _cSaldTune := _cSaldTune;
    refreshFields;
  }
}

window wUI 'è†™•‚≠†Ô „·‚†≠Æ¢™† ñì' escClose doAccept;
  show (,,85, 15);

  screen scUI (,,sci13EnEsc);
    fields
      SaldTuneFld: Protect, PickButton;
      _flags: NoProtect, noFrame;
      ObjLabelFld : Protect; ObjFld : Protect, PickButton;
      Kau1LabelFld: Protect; Kau1Fld: Protect, PickButton;
      Kau2LabelFld: Protect; Kau2Fld: Protect, PickButton;
      Kau3LabelFld: Protect; Kau3Fld: Protect, PickButton;
      Kau4LabelFld: Protect; Kau4Fld: Protect, PickButton;
      Kau5LabelFld: Protect; Kau5Fld: Protect, PickButton;
      Kau6LabelFld: Protect; Kau6Fld: Protect, PickButton;
      Kau7LabelFld: Protect; Kau7Fld: Protect, PickButton;
      Kau8LabelFld: Protect; Kau8Fld: Protect, PickButton;
      Kau9LabelFld: Protect; Kau9Fld: Protect, PickButton;
    buttons
      cmOk, default;
      cmCancel;
<<
                                 é°Í•™‚ Ê•´•¢Æ£Æ „Á•‚†
   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   [.] é°Í•™‚`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] äÄì1  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] äÄì2  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] äÄì3  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] äÄì4  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] äÄì5  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] äÄì6  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] äÄì7  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] äÄì8  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   [.] äÄì9  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                           <. ì·‚†≠Æ¢®‚Ï .> <.   é‚¨•≠†   .>
>>
  end; //screen scUI

  handleevent //window wUI

    cmPick:
    {
      case CurField of
        #SaldTuneFld: pickSaldTune;
        #ObjFld: pickKau(SaldTune.wObj, _cObj, 1);
        #Kau1Fld: pickKau(SaldTune.wKau[1], _cKau[1], 2);
        #Kau2Fld: pickKau(SaldTune.wKau[2], _cKau[2], 4);
        #Kau3Fld: pickKau(SaldTune.wKau[3], _cKau[3], 8);
        #Kau4Fld: pickKau(SaldTune.wKau[4], _cKau[4], 16);
        #Kau5Fld: pickKau(SaldTune.wKau[5], _cKau[5], 32);
        #Kau6Fld: pickKau(SaldTune.wKau[6], _cKau[6], 64);
        #Kau7Fld: pickKau(SaldTune.wKau[7], _cKau[7], 128);
        #Kau8Fld: pickKau(SaldTune.wKau[8], _cKau[8], 256);
        #Kau9Fld: pickKau(SaldTune.wKau[9], _cKau[9], 512);
      end;
    }

    cmOk: PutCommand(cmDefault);

  end; //handleevent window wUI

end; //window wUI

handleevent //interface

  cmDelOnProtect:
  {
    case CurField of
      #ObjFld: set _cObj := 0;
      #Kau1Fld: set _cKau[1] := 0;
      #Kau2Fld: set _cKau[2] := 0;
      #Kau3Fld: set _cKau[3] := 0;
      #Kau4Fld: set _cKau[4] := 0;
      #Kau5Fld: set _cKau[5] := 0;
      #Kau6Fld: set _cKau[6] := 0;
      #Kau7Fld: set _cKau[7] := 0;
      #Kau8Fld: set _cKau[8] := 0;
      #Kau9Fld: set _cKau[9] := 0;
    end;
    RereadRecord;
  }

end; //handleevent interface

procedure toggleKauFld(fld: longint; isEnabled: boolean);
{
  if isEnabled
  {
    SetInputLineFlags(scUI, fld, inPickButton);
    SetHelpAndStatusContext(scUI, fld, sci13EnEsc, hcKeepCurrent);
  }
  else
  {
    SetInputLineFlags(scUI, fld, 0);
    SetHelpAndStatusContext(scUI, fld, sci1EnEsc, hcKeepCurrent);
  }
}

procedure initVars;
{
  var i: longint = 0;
  var j: byte = 0;
  for(i := 0; GetMarker(_m, i, _cCurSpec); i++)
    if getfirst SpecMtr = tsOk
    {
      if i = 0
      {
        _cObj := SpecMtr.cObj;
        for(j := 1; j <= 9; j++)
          _cKau[j] := SpecMtr.cKau[j];
      }
      else
      {
        if _cObj != SpecMtr.cObj _cObj := 0;
        for(j := 1; j <= 9; j++)
          if _cKau[j] != SpecMtr.cKau[j] _cKau[j] := 0;
      }
    }
}

constructor Init;
{
  result := false;
}

constructor _AG_LinkMtrToSpec(wTable: word; m: TPtr; ccSaldTune: comp);
{
  _wTable := wTable;
  _m := m;
  cSaldTune := ccSaldTune;
  initVars;
  result := true;
}

function showUI: word;
{
  result := RunWindowModal(wUI);
}

function linkMtr: boolean;
{
  StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak, 'ì·‚†≠Æ¢™† ñì', GetMarkerCount(_m));
  var i: longint = 0;
  for(i := 0; GetMarker(_m, i, _cCurSpec); i++)
  {
    if getfirst SpecMtr != tsOk
      oMTRFun.LinkMtrToSpec(_wTable, _cCurSpec, _cSaldTune, 0, 0);
    if getfirst SpecMtr != tsOk
      continue;
    var buf: type$SpecMtr = SpecMtr.Buffer;
    if (_flags and 1)   = 1   buf.cObj    := _cObj;
    if (_flags and 2)   = 2   buf.cKau[1] := _cKau[1];
    if (_flags and 4)   = 4   buf.cKau[2] := _cKau[2];
    if (_flags and 8)   = 8   buf.cKau[3] := _cKau[3];
    if (_flags and 16)  = 16  buf.cKau[4] := _cKau[4];
    if (_flags and 32)  = 32  buf.cKau[5] := _cKau[5];
    if (_flags and 64)  = 64  buf.cKau[6] := _cKau[6];
    if (_flags and 128) = 128 buf.cKau[7] := _cKau[7];
    if (_flags and 256) = 256 buf.cKau[8] := _cKau[8];
    if (_flags and 512) = 512 buf.cKau[9] := _cKau[9];
    oMTRFun.InsUpdRec(buf);
    if not NextVisual break;
  }
  StopVisual;
  result := true;
}

procedure setSaldTune(value: comp);
{
  _cSaldTune := value;
  _cObj := 0;
  var j: byte;
  for(j := 1; j <= 9; j++)
    _cKau[j] := 0;
  refreshFields;
}

procedure setKau(i: byte; value: comp);
{
  _cKau[i] := value;
}

property cSaldTune: comp read _cSaldTune write setSaldTune(result);
property cObj : comp absolute _cObj;
property cKau1: comp read _cKau[1] write setKau(1, result);
property cKau2: comp read _cKau[2] write setKau(2, result);
property cKau3: comp read _cKau[3] write setKau(3, result);
property cKau4: comp read _cKau[4] write setKau(4, result);
property cKau5: comp read _cKau[5] write setKau(5, result);
property cKau6: comp read _cKau[6] write setKau(6, result);
property cKau7: comp read _cKau[7] write setKau(7, result);
property cKau8: comp read _cKau[8] write setKau(8, result);
property cKau9: comp read _cKau[9] write setKau(9, result);
property flags: word absolute _flags;

end.
