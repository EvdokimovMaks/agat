#include InsFpOb.Vih

#component "AGAT"

Interface fill_demand_excel 'Импорт заявок подразделений из excel-файла в бухсправку', escclose, doaccept;

show (,,58,8);

type txlRange = record
  x1: longint;
  y1: longint;
  x2: longint;
  y2: longint;
end;

const
  //номера столбцов в excel-файле с количествами по месяцам:
  COL_QTY_JAN = 8;
  COL_QTY_FEB = 10;
  COL_QTY_MAR = 12;
  COL_QTY_APR = 16;
  COL_QTY_MAY = 18;
  COL_QTY_JUN = 20;
  COL_QTY_JUL = 24;
  COL_QTY_AUG = 26;
  COL_QTY_SEP = 28;
  COL_QTY_OCT = 32;
  COL_QTY_NOV = 34;
  COL_QTY_DEC = 36;
  //номера столбцов в excel-файле с суммами по месяцам:
  COL_SUM_JAN = 9;
  COL_SUM_FEB = 11;
  COL_SUM_MAR = 13;
  COL_SUM_APR = 17;
  COL_SUM_MAY = 19;
  COL_SUM_JUN = 21;
  COL_SUM_JUL = 25;
  COL_SUM_AUG = 27;
  COL_SUM_SEP = 29;
  COL_SUM_OCT = 33;
  COL_SUM_NOV = 35;
  COL_SUM_DEC = 37;

  COL_FLAG = 43; //номер столбца в excel-файле, соответствующий служебному полю FLAG.
                 //Если флаг=1, значит эту строку ввел пользователь и ее надо импортировать

  COL_NREC = 42; //номер столбца в excel-файле, соответствующий служебному полю NREC.
                 //это нрек статьи бюджета, к которой относится строка заявки

  COL_NAME = 2;  //номер столбца в excel-файле, соответствующий наименованию
                 //наименование сохраняется в содержании финоперации

  COL_UNIT = 3; //номер столбца в excel-файле, соответствующий единице измерения

  REG_UPR_UCH_NREC = 0001000000000004h;  //нрек регистра учета "Управленческий учет"
                                         //нужен для проверки, не выбрал ли пользователь бухгалтерский регистр учета
end;

var
  demandYear     : word;   //год заявки. вводится пользователем в настройках
  excelFileName  : string; //имя файла заявки для загрузки. вводится пользователем в настройках
  demandDepNrec  : comp;   //нрек подразделения заявки. определяется при чтении файла
  regCode        : word;   //код регистра учета. вводится пользователем в настройках
  insOb          : vInsertFpOborot; //интерфейс для вставки финопераций

create view
var
  depName        : string; //наименование подразделения. используется для определения нрека подразделения по наименованию
  periodDate     : date;   //дата начала периода. используется для определения ссылки на период
  cMainPeriod    : comp;   //nrec типа периода планирования для бюджета, определяется в ините по gettune
  regNrec        : comp;   //нрек регистра учета. вводится пользователем в настройках
  demandPlporNrec: comp;   //нрек бухсправки для заполнения. вводится пользователем в настройках
  costItemNrec   : comp;   //нрек статьи бюджета
  depNrec        : comp;   //нрек подразделения. используется для определения цо по подразделению
as select *
from katpodr, fpperiod, planssch demandPlanssch, plpor, soprhoz, fpstbud, hashan ciHashan,
     planssch, fpoborot, basefin, fpco, kated
where ((
  depName         == katpodr.name   and

  cMainPeriod     == fpperiod.cmain and
  periodDate      == fpperiod.dbeg  and (fpperiod.isleaf = 1) and

  regNrec         == demandPlanssch.nrec and

  demandPlporNrec == plpor.nrec and

  plpor.tidk      == soprhoz.tipdoc and
  plpor.nrec      == soprhoz.csoprdoc and

  costItemNrec    == fpstbud.nrec and
  fpstbud.chashan == ciHashan.nrec and

  2               == fpco.cotable and
  depNrec         == fpco.cmean
));

screen scmain;
fields
  [reg] if(getfirst demandPlanssch = tsOk, demandPlanssch.name, ''): protect, pickbutton;
  [demandPlpor] if(getanykau(0, 5019, demandPlporNrec),givenanname(1),''): protect, pickbutton;
  excelFileName: noprotect, pickbutton;
  demandYear   : noprotect, spinbutton[1,2000,2100];
buttons
  cmDoOk, default;
<<

  `Регистр учета`.@@@@@@@@@@@@@@@@@@@@
  `Бухсправка`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Путь к файлу` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Год`          .@@@@@@@@

                                        <. Продолжить .>
>>
end;

function GetUnitNrec(sUnit: string): string;
{
  if getfirst kated where ((sUnit == kated.name)) = tsOk result := kated.nrec
  else if getfirst kated where ((sUnit == kated.abbr)) = tsOk result := kated.nrec
  else if substr(sUnit,1,2) = 'шт' result := 400073121191079Dh
  else if substr(sUnit,1,2) = 'уп' result := 0001000000000001h
  else if substr(sUnit,1,3) = 'усл' result := 4001AAA1AC8F5E2Ah
  else if substr(sUnit,1,5) = 'компл' result := 4001E573A016A1F0h
  else if substr(sUnit,1,1) = 'п' result := 4001673EC2D3A868h
  else if substr(sUnit,1,3) = 'лис' result := 4001A9BC89A27F47h
  else if substr(sUnit,1,3) = 'лит' result := 40011B46B22D2FBEh
  else if substr(sUnit,1,3) = 'боб' result := 4001129C7CC91C50h
  else result := 400073121191079Dh;
}

procedure createFO(_cCostItem: comp; _cKatPodr: comp; _cFpPeriod: comp; _spName: string; _unitNrec: comp; _qty: double; _sum: double);
{
  var fpcoNrec: comp;
  depNrec := _cKatPodr;
  if getfirst fpco = tsOk
    fpcoNrec := fpco.nrec
  else
    fpcoNrec := 0001000000000003h; //собственная организация;
  var fpoborotNrec: comp;
  fpoborotNrec := insOb.InsBySoprHoz(soprhoz.nrec, regCode, fpcoNrec, _cCostItem, _cFpPeriod, _cKatPodr, 0, _sum);
  update fpoborot where ((fpoborotNrec==fpoborot.nrec)) set
    fpoborot.kol     := _qty,
    fpoborot.name    := _spName,
    fpoborot.ced     := _unitNrec,
    fpoborot.tidk    := soprhoz.tipdoc,
    fpoborot.tidkgal := soprhoz.tidkgal;
}

function readCells(y: longint; colQty: longint; colSum: longint; _month: word; _year: word): boolean;
{
  result := false;

  var sQty, sSum, sName, sNrec, sUnit: string = '';
  var dQty, dSum: double = 0;
  var _cFpPeriod: comp = 0;

  if not xlReadFromMatrix(y, colQty, sQty) exit;
  sQty := replace(trim(sQty), ',', '.');

  if not xlReadFromMatrix(y, colSum, sSum) exit;
  sSum := replace(trim(sSum), ',', '.');

  dQty := round(double(sQty),2);
  dSum := round(double(sSum),2);
  if (dQty=0 and dSum=0) exit;

  if not xlReadFromMatrix(y, COL_NREC, sNrec) exit;

  periodDate := date(1, _month, _year);
  if getfirst fpperiod = tsOk _cFpPeriod := fpperiod.nrec else _cFpPeriod := 0;

  if not xlReadFromMatrix(y, COL_NAME, sName) exit;
  sName := trim(replace(sName, '  ', ' '));

  if not xlReadFromMatrix(y, COL_UNIT, sUnit) exit;
  sUnit := replace(replace(trim(locase(sUnit)),' ',''),'.','');

  createFO(comp(trim(sNrec)), demandDepNrec, _cFpPeriod, sName+' | '+sUnit, GetUnitNrec(sUnit), dQty, dSum);
  result := true;
}

procedure doImport(fname: string);
{
  var usedRange : txlRange;
  var y         : longint = 0;
  var s         : string = '';
  if not xlOpenNewExcel(false) exit;
  if not xlOpenWorkBook(fname) exit;
  xlDisplayAlerts(false);
  if not xlSetActiveSheetByName('Итоги') exit;
  if not xlGetUsedRange(usedRange.y1, usedRange.x1, usedRange.y2, usedRange.x2) exit;
  if not xlReadMatrixFromExcel(usedRange.y1, usedRange.x1, usedRange.y2, usedRange.x2) exit;

  if xlReadFromMatrix(1,2, depName)
    if getfirst katpodr = tsOk
      demandDepNrec := katpodr.nrec;

  y := usedRange.y1;
  while y <= usedRange.y2
  {
    if not xlReadFromMatrix(y, COL_FLAG, s) exit;
    if s = '1'
    {
      readCells(y, COL_QTY_JAN, COL_SUM_JAN, 1 , demandYear);
      readCells(y, COL_QTY_FEB, COL_SUM_FEB, 2 , demandYear);
      readCells(y, COL_QTY_MAR, COL_SUM_MAR, 3 , demandYear);
      readCells(y, COL_QTY_APR, COL_SUM_APR, 4 , demandYear);
      readCells(y, COL_QTY_MAY, COL_SUM_MAY, 5 , demandYear);
      readCells(y, COL_QTY_JUN, COL_SUM_JUN, 6 , demandYear);
      readCells(y, COL_QTY_JUL, COL_SUM_JUL, 7 , demandYear);
      readCells(y, COL_QTY_AUG, COL_SUM_AUG, 8 , demandYear);
      readCells(y, COL_QTY_SEP, COL_SUM_SEP, 9 , demandYear);
      readCells(y, COL_QTY_OCT, COL_SUM_OCT, 10, demandYear);
      readCells(y, COL_QTY_NOV, COL_SUM_NOV, 11, demandYear);
      readCells(y, COL_QTY_DEC, COL_SUM_DEC, 12, demandYear);
      if not NextVisual break;
    }
    y++;
  }
  xlFreeMatrix;
  xlCloseWorkBook(0);
  xlKillExcel;
}

function initPlpor: boolean;
{
  result := false;
  if getfirst plpor <> tsOk exit;
  if getfirst soprhoz <> tsOk
  {
    clearbuffer(#soprhoz);
    soprhoz.datob    := plpor.datob;
    soprhoz.tidkgal  := plpor.tidkgal;
    soprhoz.nodoc    := '000001';
    soprhoz.descr    := plpor.descr;
    soprhoz.desgr    := plpor.desgr;
    soprhoz.direct   := 1;
    soprhoz.vhsumhoz := '+';
    soprhoz.modedoc  := 1024;
    insert current soprhoz;
    clearbuffer(#basefin);
    basefin.tipdoc   := soprhoz.tipdoc;
    basefin.tidkgal  := soprhoz.tidkgal;
    basefin.csoprdoc := plpor.nrec;
    basefin.cplpor   := plpor.nrec;
    basefin.nodoc    := soprhoz.nodoc;
    basefin.descr    := soprhoz.descr;
    basefin.desgr    := soprhoz.desgr;
    basefin.ddoc     := soprhoz.datob;
    basefin.direct   := soprhoz.direct;
    basefin.csoprhoz := soprhoz.nrec;
    insert current basefin;
  }
  result := true;
}

handleevent
cmDoOk:
{
  if not existfile(excelfilename)
  {
    message('Excel-файл не найден');
    exit;
  }
  if not (demandYear >= 2000 and demandYear <= 2100)
  {
    message('Год должен быть в пределах [2000..2100]');
    exit;
  }
  if demandPlporNrec = 0
  {
    message('Укажите бухсправку для заполнения');
    exit;
  }
  if getfirst demandPlanssch <> tsOk
  {
    message('Укажите регистр учета');
    exit
  }
  if initPlpor
  {
    startnewvisual(vtRotateVisual, vfBreak+vfTimer, 'Формирование финопераций',0);
    doImport(excelFileName);
    stopvisual('',0);
    message('Импорт завершен');
  }
  else
  {
    message('Ошибка формирования хозоперации к бухсправке');
  }
}
cmPick:
{
  case curfield of
    #reg:
    {
      var _c: comp; _c := regNrec;
      var _w: word; _w := regCode;
      runinterface(F_PLANSSCH::KatReg,1,0,_w,_c);
      if getfirst planssch where ((_c == planssch.nrec and (planssch.cnode=REG_UPR_UCH_NREC) )) = tsOk
      {
        regNrec := _c;
        regCode := _w;
        rereadrecord;
      }
      else
      {
        message('Не выбран регистр управленческого учета');
      }
    }
    #demandPlpor:
    {
      var _c: comp;
      _c := demandPlporNrec;
      if runinterface(F_PLPOR::G_PlPor, 0, 0, 10, 0, 0, 0, _c) = cmDefault
        demandPlporNrec := _c;
      rereadrecord;
    }
    #excelFileName:
    {
      var s: string;
      s := getFileName('*.xl*','Выберите файл для импорта');
      if s <> '' excelFileName := s;
      rereadrecord;
    }
  end;
}
cminit:
{
  if not readmydsk(regNrec, 'fill_demand_excel_regNrec', false)
  {
    if getfirst planssch where ((0 == planssch.sysnum and REG_UPR_UCH_NREC == planssch.cnode)) = tsOk
    {
      regNrec := planssch.nrec;
      regCode := demandPlanssch.kodreg;
    }
  }
  else if getfirst demandPlanssch = tsOk
    regCode := demandPlanssch.kodreg;
  if not readmydsk(demandYear, 'fill_demand_excel_demandYear', false) demandYear := year(cur_date)+1;
  readmydsk(demandPlporNrec, 'fill_demand_excel_demandPlporNrec', false);
  readmydsk(excelFileName, 'fill_demand_excel_excelFileName', false);
  cMainPeriod := coGetTune('UPRFIN.FP.BASETPP');
}
cmdone:
{
  savemydsk(regNrec, 'fill_demand_excel_regNrec');
  savemydsk(demandYear, 'fill_demand_excel_demandYear');
  savemydsk(demandPlporNrec, 'fill_demand_excel_demandPlporNrec');
  savemydsk(excelFileName, 'fill_demand_excel_excelFileName');
}
end;
end.

VipInterface UserReport_fill_demand_excel Implements IUserReport licensed(free);
Interface UserReport_fill_demand_excel;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::fill_demand_excel);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Агат. Импорт заявок подразделений';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    Level := 0;
    GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'SFP';
    end;
  end;
end.
