Table struct _tmpFpOborot
 (
   Name         : string,
   cNode        : comp,
   dBeg         : date,
   dEnd         : date,
   isTested     : boolean,
   DatOb        : date,
   Summa        : double,
   cPlansSch    : comp,
   cPeriod      : comp,
   cCO          : comp,
   cStBud       : comp,
   isKol        : boolean
 )
with index
 (
   _tmpFpOborot01 = cPlansSch+cPeriod+cCO+cStBud,
   _tmpFpOborot02 = cPlansSch+cCO+cStBud+dEnd,
   _tmpFpOborot03 = dEnd
 );
#component "AGAT"
Interface AGAT_TPbyEyarsNew 'Параметры отчета' (,,)   EscClose, cyan;
Show (,,70,8);
!===============================================================================================================
create view
var 
 _PeriodFakt
,_Line
,_Column
,_lvl
,_MonthCur
,_YearCur            : word;

 _fpPeriod_Name
,_FieldName
,_myPath             : string;

 _fpPeriodCurr_Nrec
,_cTF
,_cfpCO
,_cPlansSchF
,_cPlansSchP
,_cParent
                     : comp;

 _dBeg
,_dEnd               
,_dEnd2              : date;

 _FaktPrevPer
,_PlanCurrPer
,_FaktCurrPer
,_PlanNextPer
                     : double;

as select * from 
 fpPeriod
,fpTForm
,fpCO

,fpAxTF Axis1

,fpSpAxTF SpAxis1
,fpSpAxTF SpAxis2
,fpSpAxTF SpAxis3

,fpOborot fpOborotP
,fpOborot fpOborotF
,_tmpFpOborot

,_tmpFpOborot _tmpOborotPrevP
,_tmpFpOborot _tmpOborotPrevF

,_tmpFpOborot _tmpOborotCurrP
,_tmpFpOborot _tmpOborotCurrF

,_tmpFpOborot _tmpOborotNextP
,_tmpFpOborot _tmpOborotNextF

,_tmpFpOborot _myLog

where ((
    _cTF                          ==  fpTForm.nRec
and _cfpCO                        ==  fpCO.nRec
!===========================================================
and fpTForm.nRec                  ==  Axis1.cMain
and word(1)                       ==  Axis1.wAxisId
!===========================================================
and Axis1.nRec                    ==  SpAxis1.cMain
and _cParent                      ==  SpAxis1.cNode
and Axis1.nRec                    ==  SpAxis2.cMain
and SpAxis1.nRec                  ==  SpAxis2.cNode
!===========================================================
and _cPlansSchP                   ==  fpOborotP.cPlansSch
and _cfpCO                        ==  fpOborotP.cCO

and _cPlansSchF                   ==  fpOborotF.cPlansSch
and _cfpCO                        ==  fpOborotF.cCO

!===========================================================
!   Предыдущие периоды
!===========================================================
and _cPlansSchP                   ==  _tmpOborotPrevP.cPlansSch
and _cfpCO                        ==  _tmpOborotPrevP.cCO
and SpAxis1.cMean                 ==  _tmpOborotPrevP.cStBud
and date(1,1,1900)                <<= _tmpOborotPrevP.dEnd
and _dBeg                         >>  _tmpOborotPrevP.dEnd

and _cPlansSchF                   ==  _tmpOborotPrevF.cPlansSch
and _cfpCO                        ==  _tmpOborotPrevF.cCO
and SpAxis1.cMean                 ==  _tmpOborotPrevF.cStBud
and date(1,1,1900)                <<= _tmpOborotPrevF.dEnd
and _dBeg                         >>  _tmpOborotPrevF.dEnd

!===========================================================
!   Текущий период
!===========================================================
and _cPlansSchP                   ==  _tmpOborotCurrP.cPlansSch
and _cfpCO                        ==  _tmpOborotCurrP.cCO
and SpAxis1.cMean                 ==  _tmpOborotCurrP.cStBud
and _dBeg                         <<= _tmpOborotCurrP.dEnd
and _dEnd                         >>= _tmpOborotCurrP.dEnd

and _cPlansSchF                   ==  _tmpOborotCurrF.cPlansSch
and _cfpCO                        ==  _tmpOborotCurrF.cCO
and SpAxis1.cMean                 ==  _tmpOborotCurrF.cStBud
and _dBeg                         <<= _tmpOborotCurrF.dEnd
and _dEnd                         >>= _tmpOborotCurrF.dEnd

!===========================================================
!   Будущий период
!===========================================================
and _cPlansSchP                   ==  _tmpOborotNextP.cPlansSch
and _cfpCO                        ==  _tmpOborotNextP.cCO
and SpAxis1.cMean                 ==  _tmpOborotNextP.cStBud
and _dEnd                         <<  _tmpOborotNextP.dEnd
and _dEnd2                        >>= _tmpOborotNextP.dEnd

and _cPlansSchF                   ==  _tmpOborotNextF.cPlansSch
and _cfpCO                        ==  _tmpOborotNextF.cCO
and SpAxis1.cMean                 ==  _tmpOborotNextF.cStBud
and _dEnd                         <<  _tmpOborotNextF.dEnd
and _dEnd2                        >>= _tmpOborotNextF.dEnd

));

Procedure _GetFpPeriod;
{
  if GetFirst fpPeriod where ((_fpPeriodCurr_Nrec == fpPeriod.nRec)) = tsOk
     {
       _fpPeriod_Name := fpPeriod.Name;
       _dBeg  := fpPeriod.dBeg;
       _dEnd  := fpPeriod.dEnd;
     }
}

Window _myTmpWindow;
Tree treeSpTF (,,sci147EnEscTree);
  Table SpAxis1;
Fields
  SpAxis1.Name      ''#3'Наименование'  ('Наименование элемента оси',,)   : [30], Protect;
end; // Tree
TableEvent table SpAxis1;
cmTreeNodeType:{
  if (IsValid(#SpAxis2)) TreeSetNodeType(treeSpTF,if(TreeNodeIsOpen(treeSpTF),ntfOpen,ntfClose));
     else TreeSetNodeType(treeSpTF,ntfText);
}
cmTreeTop : _cParent := comp(0) // текущий корень - вершина
cmTreeDown: _cParent := SpAxis1.nRec; // текущий корень - текущая запись
cmTreeUp  : _cParent := SpAxis1.cNode; // текущий корень - ссылка вверх
cmTreeNeedOwner:{
   TreeJumpToRecord(treeSpTF,SpAxis1.cNode);
}
end; // TableEvent
end; // Window

Panel pnl_ParamRep;
  Screen scr1 ('...',,sci13Esc);
  Table fpPeriod;
  Fields
   _fpPeriod_Name     : Protect,PickButton;
   _PeriodFakt        : [List 'январь','февраль','март','апрель','май','июнь','июль','август','сентябрь','октябрь','ноябрь','декабрь'],protect;
   fpTForm.Name       : Protect,PickButton;
   fpCO.Name          : Protect,PickButton;
  Buttons
  cmValue1,,,'Сформировать';
  cmValue2,,,'Выход';
<< 
`Отчет за` .@@@@@@@@@@@@ `  фактические показатели`.@@@@@@@@@@@@@@@@@
`Типовая форма`
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Заказ (центр ответственности)`
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                       <. Сформировать .> <. Выход .>
>>
 end;
end; // Panel

HandleEvent
cmPick:{
  if CurField = #_fpPeriod_Name
     {
       if ( RunInterface('F_fpCatalog::GetPeriod', word(1), 0, comp(0), _fpPeriodCurr_Nrec, word(0) ) <> cmCancel )
          {
            _GetFpPeriod;
            RescanPanel(#FpPeriod);
          }
     }
  if CurField = #fpTForm.Name
     {
       if ( RunInterface('F_fpBUDGET::GETTFORM', word(1), comp(0), _cTF ) <> cmCancel )
          {
            if GetFirst fpTForm = tsOk RescanPanel(#fpPeriod);
          }
     }
  if CurField = #fpCO.Name
     {
       if ( RunInterface('F_FPCATALOG::GETCO', word(1), comp(0), comp(0), _cfpCO ) <> cmCancel )
          {
            if GetFirst fpCO = tsOk RescanPanel(#fpPeriod);
          }
     }
}

cmValue1:{
  _cPlansschP  := comp(281474976710666);  // Операции план
  _cPlansschF  := comp(281474976710667);  // Операции факт
  _dEnd2 := date(31,12,2100);
//  _cPlansschP  := comp(14);  // Операции план
//  _cPlansschF  := comp(15);  // Операции факт


  StartNewVisual(vtRotateVisual,vfTimer + vfBreak + vfConfirm,''#3'Формирование шаблона '#13#13#3,1);
  _myPath := TranslatePath('%startpath%'+'Xls\TPbyEyarsNew.xlt');
  if FileExist(_myPath)
     {
       var xlREs : boolean;
       xlRes := xlCreateExcelWithTemplate(_myPath,true) 
       if (not xlRes)  { Message('Не открылся Excel'); Exit; }
       xlRes := xlIsExcelValid;
       if (not xlRes)  { Message('Не инициализирован Excel'); Exit; }
       xlRes := xlGetActiveWorkBookName(_myPath);
       if (not xlRes)
          { Message('Не активна книга Excel '+_myPath); Exit; }
!==============================================================================
       xlSetCellStringValue('Тематический план ' + _fpPeriod_Name ,1,1,1,1);
       xlSetCellStringValue(fpCO.Name ,2,7,2,7);
!=============================================================================================
       Delete All _tmpFpOborot;
       if GetFirst fpOborotP = tsOk do
          {
            if GetFirst _tmpFpOborot where ((
                                                 fpOborotP.cPlansSch == _tmpFpOborot.cPlansSch
                                             and fpOborotP.cPeriod   == _tmpFpOborot.cPeriod
                                             and fpOborotP.cCO       == _tmpFpOborot.cCO
                                             and fpOborotP.cStBud    == _tmpFpOborot.cStBud
                                           )) <> tsOk
               {
                 if GetFirst fpPeriod where ((fpOborotP.cPeriod == fpPeriod.nRec)) = tsOk {}
//                      {
                 ClearBuffer(#_tmpFpOborot);
                 _tmpFpOborot.cPeriod   := fpPeriod.nRec;
                 _tmpFpOborot.Name      := fpPeriod.Name;
                 _tmpFpOborot.cNode     := fpPeriod.cNode;
                 _tmpFpOborot.dBeg      := fpPeriod.dBeg;
                 _tmpFpOborot.dEnd      := fpPeriod.dEnd;
                 _tmpFpOborot.DatOb     := fpOborotP.DatOb;
                 _tmpFpOborot.Summa     := if (fpOborotP.Summa <> 0,fpOborotP.Summa,fpOborotP.Kol);
                 _tmpFpOborot.cCO       := fpOborotP.cCO;
                 _tmpFpOborot.cStBud    := fpOborotP.cStBud;
                 _tmpFpOborot.cPlansSch := fpOborotP.cPlansSch;
                 _tmpFpOborot.isKol     := if (fpOborotP.Summa <> 0,false,true);
                 insert current _tmpFpOborot;
               } else
               {
                 _tmpFpOborot.Summa     := _tmpFpOborot.Summa + if (fpOborotP.Summa <> 0,fpOborotP.Summa,fpOborotP.Kol);
                 update current _tmpFpOborot;
               }
          } while GetNext fpOborotP = tsOk and NextVisual;

       if GetFirst fpOborotF = tsOk do
          {
            if GetFirst _tmpFpOborot where ((
                                                 fpOborotF.cPlansSch == _tmpFpOborot.cPlansSch
                                             and fpOborotF.cPeriod   == _tmpFpOborot.cPeriod
                                             and fpOborotF.cCO       == _tmpFpOborot.cCO
                                             and fpOborotF.cStBud    == _tmpFpOborot.cStBud
                                           )) <> tsOk
               {
                 if GetFirst fpPeriod where ((fpOborotF.cPeriod == fpPeriod.nRec)) = tsOk {}

                 ClearBuffer(#_tmpFpOborot);
                 _tmpFpOborot.cPeriod   := fpPeriod.nRec;
                 _tmpFpOborot.Name      := fpPeriod.Name;
                 _tmpFpOborot.cNode     := fpPeriod.cNode;
                 _tmpFpOborot.dBeg      := fpPeriod.dBeg;
                 _tmpFpOborot.dEnd      := fpPeriod.dEnd;
                 _tmpFpOborot.DatOb     := fpOborotF.DatOb;
                 _tmpFpOborot.Summa     := if (fpOborotF.Summa <> 0,fpOborotF.Summa,fpOborotF.Kol);
                 _tmpFpOborot.cCO       := fpOborotF.cCO;
                 _tmpFpOborot.cStBud    := fpOborotF.cStBud;
                 _tmpFpOborot.cPlansSch := fpOborotF.cPlansSch;
                 _tmpFpOborot.isKol     := if (fpOborotF.Summa <> 0,false,true);
                 insert current _tmpFpOborot;
               } else 
               {
                 _tmpFpOborot.Summa     := _tmpFpOborot.Summa + if (fpOborotF.Summa <> 0,fpOborotF.Summa,fpOborotF.Kol);
                 update current _tmpFpOborot;
               }
          } while GetNext fpOborotF = tsOk and NextVisual;

       if XLCREATEMATRIX(10000, 45) {};
       _Line := 1;
       if xlsetActiveSheetByName('Тематический план') {};
       if (TreeGetFirstEx(treeSpTF)) do
          {
            _lvl := TreeLevel(treeSpTF)+1;
            if SpAxis1.KodGrKau = 20
               {
                 xlStWriteToMatrix (_Line, _lvl, SpAxis1.Name);
                 if GetFirst SpAxis3 where ((SpAxis1.cMain ==  SpAxis3.cMain and SpAxis1.nRec ==  SpAxis3.cNode)) = tsOk
                    {
                       xlSetFontStyle(1, _Line, 1, _Line, 50);
                    }

                 xlStWriteToMatrix (_Line, 44, SpAxis1.nRec);
                 xlStWriteToMatrix (_Line, 45, SpAxis1.cNode);

!=====================================================================================================
!                Столбцы
!=====================================================================================================
                 _GetFpPeriod;
                 _FaktPrevPer := 0;
                 if GetFirst _tmpOborotPrevF = tsOk do
                    {
                      _FaktPrevPer := _FaktPrevPer + _tmpOborotPrevF.Summa;
                    } while GetNext  _tmpOborotPrevF = tsOk;

                 _PlanCurrPer := 0;
                 if GetFirst _tmpOborotCurrP = tsOk do
                    {
                      _PlanCurrPer := _PlanCurrPer + _tmpOborotCurrP.Summa;
                    } while GetNext _tmpOborotCurrP = tsOk;

                 _PlanNextPer := 0;
                 if GetFirst _tmpOborotNextP = tsOk do
                    {
                      _PlanNextPer := _PlanNextPer + _tmpOborotNextP.Summa;
                    } while GetNext _tmpOborotNextP = tsOk;

                 xlStWriteToMatrix (_Line, 21, (_FaktPrevPer+_PlanCurrPer+_PlanNextPer)); //Плн по заказу

                 _FieldName := 'НЗП  на '+ add_day(_dBeg,-1);
                 xlSetCellStringValue(_FieldName,5,22,5,22); //Заголовок столбца НЗП прошлых периодов
                 xlStWriteToMatrix (_Line, 22, _FaktPrevPer); //НЗП прошлых периодов

                 _FieldName := 'План на '+_fpPeriod_Name;
                 xlSetCellStringValue(_FieldName,5,23,5,23); //Заголовок столбца План на тек. период
                 xlStWriteToMatrix (_Line, 23, _PlanCurrPer); //План тек. период

                 case _PeriodFakt of 
                   0: {_dEnd := date(Last_Day(date(1,1,Year(_dEnd))),1,Year(_dEnd)); _FieldName := 'Факт январь '+_fpPeriod_Name; _MonthCur := 1;}
                   1: {_dEnd := date(Last_Day(date(1,2,Year(_dEnd))),2,Year(_dEnd)); _FieldName := 'Факт январь-февраль '+_fpPeriod_Name; _MonthCur := 1;}
                   2: {_dEnd := date(Last_Day(date(1,3,Year(_dEnd))),3,Year(_dEnd)); _FieldName := 'Факт январь-март '+_fpPeriod_Name; _MonthCur := 1;}
                   3: {_dEnd := date(Last_Day(date(1,4,Year(_dEnd))),4,Year(_dEnd)); _FieldName := 'Факт январь-апрель '+_fpPeriod_Name; _MonthCur := 1;}
                   4: {_dEnd := date(Last_Day(date(1,5,Year(_dEnd))),5,Year(_dEnd)); _FieldName := 'Факт январь-май '+_fpPeriod_Name; _MonthCur := 1;}
                   5: {_dEnd := date(Last_Day(date(1,6,Year(_dEnd))),6,Year(_dEnd)); _FieldName := 'Факт январь-июнь '+_fpPeriod_Name; _MonthCur := 1;}
                   6: {_dEnd := date(Last_Day(date(1,7,Year(_dEnd))),7,Year(_dEnd)); _FieldName := 'Факт январь-июль '+_fpPeriod_Name; _MonthCur := 1;}
                   7: {_dEnd := date(Last_Day(date(1,8,Year(_dEnd))),8,Year(_dEnd)); _FieldName := 'Факт январь-август '+_fpPeriod_Name; _MonthCur := 1;}
                   8: {_dEnd := date(Last_Day(date(1,9,Year(_dEnd))),9,Year(_dEnd)); _FieldName := 'Факт январь-сентябрь '+_fpPeriod_Name; _MonthCur := 1;}
                   9: {_dEnd := date(Last_Day(date(1,10,Year(_dEnd))),10,Year(_dEnd)); _FieldName := 'Факт январь-октябрь '+_fpPeriod_Name; _MonthCur := 1;}
                   10: {_dEnd := date(Last_Day(date(1,11,Year(_dEnd))),11,Year(_dEnd)); _FieldName := 'Факт январь-ноябрь '+_fpPeriod_Name; _MonthCur := 1;}
                   11: {_dEnd := date(Last_Day(date(1,12,Year(_dEnd))),12,Year(_dEnd)); _FieldName := 'Факт январь-декабрь '+_fpPeriod_Name; _MonthCur := 1;}
                 end

                 _FaktCurrPer := 0;
                 if GetFirst _tmpOborotCurrF = tsOk do
                    {
                      _FaktCurrPer := _FaktCurrPer + _tmpOborotCurrF.Summa;
                    } while GetNext  _tmpOborotCurrF = tsOk;

                 xlSetCellStringValue(_FieldName,5,24,5,24); //Заголовок столбца Факт тек. период
                 xlStWriteToMatrix (_Line, 24, _FaktCurrPer); //Факт тек. период

                 _Column := 25;
                 for(_MonthCur:=_MonthCur;_MonthCur<=12;inc(_MonthCur))
                    {

                      _dBeg := date(01,_MonthCur,Year(_dBeg));
                      _dEnd := date(Last_Day(_dBeg),_MonthCur,Year(_dBeg));
                      _PlanCurrPer := 0;

                      if GetFirst _tmpOborotCurrP = tsOk do
                         {
                           _PlanCurrPer := _PlanCurrPer + _tmpOborotCurrP.Summa;
                         } while GetNext  _tmpOborotCurrP = tsOk;

                      case _MonthCur of
                       1:  _FieldName := 'январь '+_fpPeriod_Name;
                       2:  _FieldName := 'февраль '+_fpPeriod_Name;
                       3:  _FieldName := 'март '+_fpPeriod_Name;
                       4:  _FieldName := 'апрель '+_fpPeriod_Name;
                       5:  _FieldName := 'май '+_fpPeriod_Name;
                       6:  _FieldName := 'июнь '+_fpPeriod_Name;
                       7:  _FieldName := 'июль '+_fpPeriod_Name;
                       8:  _FieldName := 'август '+_fpPeriod_Name;
                       9:  _FieldName := 'сентябрь '+_fpPeriod_Name;
                       10: _FieldName := 'октябрь '+_fpPeriod_Name;
                       11: _FieldName := 'ноябрь '+_fpPeriod_Name;
                       12: _FieldName := 'декабрь '+_fpPeriod_Name;
                      end
                      
                      xlSetCellStringValue(_FieldName,5,_Column,5,_Column); //Заголовок столбца Факт тек. период
                      xlStWriteToMatrix (_Line, _Column, doubletostr(_PlanCurrPer,'[|-]3666666666666.888888')); //Факт тек. период
                      inc(_Column);

                    }
                 _GetFpPeriod;
                 for(_YearCur := Year(_dBeg);_YearCur<Year(_dBeg)+10;inc(_YearCur))
                    {
                      _dEnd  := date(31,12,_YearCur);
                      _dEnd2 := date(31,12,_YearCur+1);
                      _PlanNextPer := 0;
                      if GetFirst _tmpOborotNextP = tsOk do
                         {
                           _PlanNextPer := _PlanNextPer + _tmpOborotNextP.Summa;
                         } while GetNext _tmpOborotNextP = tsOk;
                      if _PlanNextPer <> 0
                         {
                           _FieldName := Year(_dEnd2) + ' год.'
                           xlSetCellStringValue(_FieldName,5,_Column,5,_Column); //Заголовок столбца Факт тек. период
                           xlStWriteToMatrix (_Line, _Column, _PlanNextPer); //Факт тек. период
                           inc(_Column);
                         } else if GetFirst _myLog where ((    _dEnd  <<  _myLog.dEnd
                                                           and _dEnd2 >>= _myLog.dEnd)) = tsOk xlStWriteToMatrix (_Line, _Column, double(0));
                     }
                 inc(_Line);
!=====================================================================================================
               }
          } While (TreeGetNextEx(treeSpTF)) and NextVisual;

       xlWriteMatrixToExcel(8,1);
       if xlFreeMatrix{};

       xlSetCellStringValue(_Column,1,21,1,21);
       xlSetCellStringValue(_Line+6,1,22,1,22);
!=====================================================================================================
!=====================================================================================================
       if XLCREATEMATRIX(10000, 15) {};
       _Line := 1;
       if xlsetActiveSheetByName('Log') {};
       if GetFirst _myLog = tsOk do
          {
            xlStWriteToMatrix (_Line, 1, _myLog.Name);
            xlStWriteToMatrix (_Line, 2, _myLog.cNode);
            xlStWriteToMatrix (_Line, 3, _myLog.dBeg);
            xlStWriteToMatrix (_Line, 4, _myLog.dEnd);
            xlStWriteToMatrix (_Line, 5, _myLog.isTested);
            xlStWriteToMatrix (_Line, 6, _myLog.DatOb);
            xlStWriteToMatrix (_Line, 7, _myLog.Summa);
            xlStWriteToMatrix (_Line, 8, _myLog.cPlansSch);
            xlStWriteToMatrix (_Line, 9, _myLog.cPeriod);
            xlStWriteToMatrix (_Line, 10, _myLog.cCO);
            xlStWriteToMatrix (_Line, 11, _myLog.cStBud);
            inc(_Line);
          } while GetNext _myLog = tsOk;

       xlWriteMatrixToExcel(1,1);
       if xlFreeMatrix{};
!=====================================================================================================
!=====================================================================================================

       if xlsetActiveSheetByName('Тематический план') {};
       if xlRes:=xlRunMacro('FormatIt') {};
       xlKillExcel;
!==============================================================================
     } else Message ('Шаблон "TPbyEyarsNew.xlt" не найден!')//if FileExist(myPath)
  StopVisual('',0);
}

cmValue2:{
  CloseInterface(cmDefault);
}
end; //HandleEvent
end. //Interface  

VipInterface UserReport_AGAT_TPbyEyarsNew Implements IUserReport licensed(free);
Interface UserReport_AGAT_TPbyEyarsNew;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::AGAT_TPbyEyarsNew);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Анализ тематического плана (новый)';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    GetGroupName := 'Тематический план';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := '*';
    end;
  end;
end.


