#component "AGAT"
!020 - заказ
!021 - заказ/подразделение
!022 - заказ/организация
!281474976710845 Выручка стоимость
!===============================================================================================================
Interface AGAT_TemPlanZakaz 'Печать шаблона "Тематический план по заказу"' (,,)   EscClose, cyan;
  Show at (,,80,);
!===============================================================================================================
create view
var 
 hh                : longint;
 cParent
,cParent1
,cNodePodr 
,cNodeStroy
,varbudNrec        : comp;
 _Line
,_lvl              : word;
 _dBeg
,_dEnd             : date;
 _myPath           : string;
 i
,_TipRep           : word;

as select *
from
  fpTForm KatH
, fpTForm KatH2

, fpAxTF Axis1

, fpSpAxTF SpAxis1
, fpSpAxTF SpAxis2

, Sloj GrAn
, SpSloj SpGrAn
, KatKau KatKauAx1

, KatPodr
, KatPodr KatPodr2

, KatStroy
, KatStroy KatStroy2
, KatOrg (KATORG02)

, FpStBud
, KatExpr KatExprP
, KatExpr KatExprF
, KatExpr KatExprDef

, ExClassVal
, ExClassSeg

, fpVarian varbud     //вариант бюджета из настроек интерфейса
where ((
      comp(0)                 == KatH.cMain
  and cParent                 == KatH.cNode
  and comp(0)                 == KatH2.cMain
  and KatH.nRec               == KatH2.cNode

  // описание осей
  and KatH.NRec               == Axis1.cMain
  and word(1)                 == Axis1.wAxisId

  and Axis1.nRec              == SpAxis1.cMain
  and cParent1                == SpAxis1.cNode
  and Axis1.nRec              == SpAxis2.cMain
  and SpAxis1.nRec            == SpAxis2.cNode

  and SpAxis1.cSloj           == GrAn.nRec
  and GrAn.nRec               == SpGrAn.cMain

  and SpAxis1.KodGrKau        == KatKauAx1.KodGroup
                                         
  and cNodePodr               == KatPodr.cPodr
  and KatPodr.nRec            == KatPodr2.cPodr

  and cNodeStroy              == KatStroy.CSTROY
  and KatStroy.nRec           == KatStroy2.CSTROY


  and SpAxis1.cMean           == FpStBud.nRec

!===========================================================
!  Формулы для плана
!===========================================================
  and word(22217)             ==  KatExprP.CoTable
  and FpStBud.nRec            ==  KatExprP.cRecord
  and varbudNrec              ==  KatExprP.cVariant          //comp(281474976710660)
!===========================================================
!  Формулы для факта
!===========================================================
  and word(22217)             ==  KatExprF.CoTable
  and FpStBud.nRec            ==  KatExprF.cRecord
  and comp(281474976710667)   ==  KatExprF.cVariant
!===========================================================
!  Формулы по умолчанию
!===========================================================
  and word(22217)             ==  KatExprDef.CoTable
  and FpStBud.nRec            ==  KatExprDef.cRecord
  and comp(0)                 ==  KatExprDef.cVariant
!===========================================================

 and FpStBud.nRec             ==  ExClassVal.cRec
 and word(190)                ==  ExClassVal.ClassCode
 and ExClassVal.cClassSeg     ==  ExClassSeg.nRec

 and varbudNrec               ==  varbud.nrec
));

Panel pnl_TF;
Show at (,,,7);
Tree treeTF (,,sci147EnEscTree);
  Table KatH;
Fields
  KatH.Name      'Наименование'  ('Наименование типовой формы',,) : [50], Protect;
  KatH.LevelCode 'Код' ('Код для сортировки на соответствующем уровне иерархии',,) : [5], Protect;
end; // Tree
TableEvent table KatH;
cmTreeNodeType:{
  if (IsValid(#KatH2)) TreeSetNodeType(treeTF,if(TreeNodeIsOpen(treeTF),ntfOpen,ntfClose));
     else TreeSetNodeType(treeTF,ntfText);
}
cmTreeTop:  cParent := comp(0) // текущий корень - вершина
cmTreeDown: cParent := KatH.nRec; // текущий корень - текущая запись
cmTreeUp :  cParent := KatH.cNode; // текущий корень - ссылка вверх
cmTreeNeedOwner : {
   TreeJumpToRecord(treeTF,KatH.cNode);
 }
end; // TableEvent
end; // Panel

Panel pnl_SpTF;
Show at (,8,,17);
Tree treeSpTF (,,sci147EnEscTree);
  Table SpAxis1;
Fields
  SpAxis1.Name      'Наименование'  ('Наименование элемента оси',,)   : [30], Protect;
  SpAxis1.LevelCode 'Код'    ('Код для сортировки на соответствующем уровне иерархии',,) : [5], Protect;
  KatKauAx1.Name    'Аналитика'   ('Аналитика элемента оси',,)      : [20], Protect, NoDel;
  GrAn.Name         'Группа аналитик'    ('Группа аналитик статьи',,)      : [20], Protect, NoDel;
end; // Tree
TableEvent table SpAxis1;
cmTreeNodeType:{
  if (IsValid(#SpAxis2)) TreeSetNodeType(treeSpTF,if(TreeNodeIsOpen(treeSpTF),ntfOpen,ntfClose));
     else TreeSetNodeType(treeSpTF,ntfText);
}
cmTreeTop:  cParent1 := comp(0) // текущий корень - вершина
cmTreeDown: cParent1 := SpAxis1.nRec; // текущий корень - текущая запись
cmTreeUp :  cParent1 := SpAxis1.cNode; // текущий корень - ссылка вверх
cmTreeNeedOwner : {
   TreeJumpToRecord(treeSpTF,SpAxis1.cNode);
 }
end; // TableEvent
end; // Panel

Panel pnl_Buttons;
Screen scr1 ('...',,sci13Esc);
 Show at (,18,,);
  Fields
    [varbudName] if (getfirst varbud = tsOk, varbud.name, ''): protect, pickbutton;
    _TipRep : noprotect;
  Buttons
    cmPrintDoc,,,'Печать';
    cmValue2,,,'Выход';
<< 

   `Вариант бюджета (для формул)` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   (.) выгрузка в Excel`                   <. Сформировать .>    <. Выход .>
   (.) выгрузка в dbf`     
>>
end;
end; // Panel


Window wTmpView;
Tree treeTmpPodr (,,sci147EnEscTree);
  Table KatPodr;
Fields
  KatPodr.Name      : [30], Protect;
end; // Tree
TableEvent table KatPodr;
cmTreeNodeType:{
  if (IsValid(#KatPodr2)) TreeSetNodeType(treeTmpPodr,if(TreeNodeIsOpen(treeTmpPodr),ntfOpen,ntfClose));
     else TreeSetNodeType(treeTmpPodr,ntfText);
}
cmTreeTop:  cNodePodr := comp(0) // текущий корень - вершина
cmTreeDown: cNodePodr := KatPodr.nRec; // текущий корень - текущая запись
cmTreeUp :  cNodePodr := KatPodr.cPodr; // текущий корень - ссылка вверх
cmTreeNeedOwner : {
   TreeJumpToRecord(treeTmpPodr,KatPodr.cPodr);
 }
end; // TableEvent
end; // Window

Window wTmpView2;
Tree treeTmpStroy (,,sci147EnEscTree);
  Table KatStroy;
Fields
  KatStroy.Name      : [30], Protect;
end; // Tree
TableEvent table KatStroy;
cmTreeNodeType:{
  if (IsValid(#KatStroy2)) TreeSetNodeType(treeTmpStroy,if(TreeNodeIsOpen(treeTmpStroy),ntfOpen,ntfClose));
     else TreeSetNodeType(treeTmpStroy,ntfText);
}
cmTreeTop:  cNodeStroy := comp(0) // текущий корень - вершина
cmTreeDown: cNodeStroy := KatStroy.nRec; // текущий корень - текущая запись
cmTreeUp :  cNodeStroy := KatStroy.CSTROY; // текущий корень - ссылка вверх
cmTreeNeedOwner : {
   TreeJumpToRecord(treeTmpPodr,KatStroy.CSTROY);
 }
end; // TableEvent
end; // Window


HandleEvent
cmPrintDoc:{
if _TipREp = 0 
{
  StartNewVisual(vtRotateVisual,vfTimer + vfBreak + vfConfirm,''#3'Формирование шаблона '#13#13#3,1);

//  _myPath := TranslatePath('D:\vip\TemPlanZakaz\TemPlanZakaz.xlt');
  _myPath := TranslatePath('%startpath%'+'Xls\TemPlanZakaz.xlt');
  if FileExist(_myPath)
     {
       var xlREs : boolean;
       xlRes := xlCreateExcelWithTemplate(_myPath,true); 
       if (not xlRes)  { Message('Не открылся Excel'); Exit; }
       xlRes := xlIsExcelValid;
       if (not xlRes)  { Message('Не инициализирован Excel'); Exit; }
       xlRes := xlGetActiveWorkBookName(_myPath);
       if (not xlRes)
          { Message('Не активна книга Excel '+_myPath); Exit; }
!==============================================================================
//       xlSetCellStringValue(' по основным заказам подразделения',1,1,1,1);
!==============================================================================
       if xlsetActiveSheetByName('Тематический план') {};

       if XLCREATEMATRIX(10000, 22) {};
       _Line := 1;
       TreePushPos(treeSpTF);
       if (TreeGetFirstEx(treeSpTF)) do
          {
            _lvl := TreeLevel(treeSpTF)+1;
            if SpAxis1.KodGrKau = 20
               {
                 xlStWriteToMatrix (_Line, _lvl, SpAxis1.Name);
                 inc(_Line);
               }
          } While (TreeGetNextEx(treeSpTF)) AND NextVisual;
       TreePopPos(treeSpTF);

       xlWriteMatrixToExcel(8,1);
       if xlFreeMatrix{};

       if XLCREATEMATRIX(10000, 15) {};
       TreePushPos(treeSpTF);
       _Line := 1;
       if (TreeGetFirstEx(treeSpTF)) do
          {
            _lvl := TreeLevel(treeSpTF)+1;
            if SpAxis1.KodGrKau = 20 
               {

                 if GetFirst FpStBud = tsOk xlStWriteToMatrix (_Line, 1,'(%'+FpStBud.Abbr+'%=)');
                 if GetFirst KatExprP = tsOk 
                    {
                      xlStWriteToMatrix (_Line, 2, KatExprP.EXPRESS);
                    } else 
                    {                                                                                         
                      if GetFirst KatExprDef = tsOk xlStWriteToMatrix (_Line, 2, if(KatExprDef.EXPRESS<>'###',KatExprDef.EXPRESS,'')) else xlStWriteToMatrix (_Line, 2, ' ');
                    }

//                 if GetFirst KatExprF = tsOk xlStWriteToMatrix (_Line, 3, KatExprF.EXPRESS);
//                 if GetFirst KatExprDef = tsOk xlStWriteToMatrix (_Line, 4, if(KatExprDef.EXPRESS<>'###',KatExprDef.EXPRESS,''));

                 if GetFirst SpGrAn = tsOk do
                    {
                      xlAddStrToMatrix (_Line, 3, '#'+SpGrAn.KodGrKau);
                    } while GetNext SpGrAn = tsOk;
                 xlAddStrToMatrix (_Line, 3, '#');
                 xlStWriteToMatrix (_Line, 4, _lvl);
                 xlStWriteToMatrix (_Line, 5, SpAxis1.nRec);
                 xlStWriteToMatrix (_Line, 6, SpAxis1.cNode);
                 if GetFirst FpStBud = tsOk
                    {                                                                        
                      xlStWriteToMatrix (_Line, 7, if(FpStBud.cEd=comp(0),'s','k'));             //  s  - сумма; k - кол-во;            //46
                      xlStWriteToMatrix (_Line, 8, if((FpStBud.Attr and 8) = 8,'+','-'));        // "+" - сальдо                        //47
                      xlStWriteToMatrix (_Line, 9, if((FpStBud.CalcAttr and 2) <> 2,'+','-'));   // "+" - Является агрегатом            //48
                      xlStWriteToMatrix (_Line, 10, if((FpStBud.Attr and 4) <> 4,'+','-'));      // "+" - Входит в вышестоящий агрегат  //49

                      if (GetFirst ExClassVal = tsOk) and (GetFirst ExClassSeg = tsOk)
                         {
                           xlStWriteToMatrix (_Line, 13, ExClassSeg.Name);                       // тип расчета  //52
                         }
                    }
                 inc(_Line);
               }
          } While (TreeGetNextEx(treeSpTF)) AND NextVisual;
       TreePopPos(treeSpTF);

       xlWriteMatrixToExcel(8,40);
       if xlFreeMatrix{};

!==============================================================================
!==============================================================================
//       RunWindowModal(wTmpView);
       if XLCREATEMATRIX(10000, 2) {};
       if xlsetActiveSheetByName('Подразделения') {};
       _Line := 1;
       if (TreeGetFirstEx(treeTmpPodr)) do
          {
//            _lvl := TreeLevel(treeTmpPodr);
//            for(i:=0;i<_lvl;inc(i))
//               {
//                 xlAddStrToMatrix (_Line, 1, '    ');
//               }
            xlAddStrToMatrix (_Line, 1, KatPodr.Name);
            inc(_Line);
          } While (TreeGetNextEx(treeTmpPodr)) AND NextVisual;
       xlWriteMatrixToExcel(1,1);
       if xlFreeMatrix{};
!==============================================================================
!==============================================================================
       if XLCREATEMATRIX(30000, 2) {};
       if xlsetActiveSheetByName('Заказы') {};
       _Line := 1;
       if (TreeGetFirstEx(treeTmpStroy)) do
          {
            _lvl := TreeLevel(treeTmpStroy);
            for(i:=0;i<_lvl;inc(i))
               {
                 xlAddStrToMatrix (_Line, 1, '    ');
               }
            xlAddStrToMatrix (_Line, 1, KatStroy.Name);
            inc(_Line);
          } While (TreeGetNextEx(treeTmpStroy)) AND NextVisual;
       xlWriteMatrixToExcel(1,1);
       if xlFreeMatrix{};
!==============================================================================
!==============================================================================
       if XLCREATEMATRIX(30000, 3) {};
       if xlsetActiveSheetByName('Организации') {};
       _Line := 1;
       if GetFirst KatOrg = tsOk do
          {
            xlStWriteToMatrix (_Line, 1, KatOrg.Name);
            inc(_Line);
          } While (GetNext KatOrg = tsOk) AND NextVisual;
       xlWriteMatrixToExcel(1,1);
       if xlFreeMatrix{};
       if xlsetActiveSheetByName('Тематический план') {};
       if xlRes:=xlRunMacro('RecountSum') {};

       xlKillExcel;
!==============================================================================
     } else Message ('Шаблон "TemPlanZakaz.xlt" не найден!'); //if FileExist(myPath)
  StopVisual('',0);
}
else // if _TipREp = 0 
{
  hh := DBFOpen('c:\PlanZakaz.dbf',stCreate);
  DBFAddField(hh,'NREC',dbNum,20,0);
  DBFAddField(hh,'StatyaName',dbChar,250,0);
  DBFAddField(hh,'StatyaAbbr',dbChar,250,0);
!  DBFAddField(hh,'DATOB',dbDate,10,0);

  TreePushPos(treeSpTF);
  if (TreeGetFirstEx(treeSpTF)) do
     {
       _lvl := TreeLevel(treeSpTF)+1;
       if SpAxis1.KodGrKau = 20 
          {
            DBFClearBuffer(hh);
            DBFPutFieldValue(hh, 'NREC', SpAxis1.nRec);
            DBFPutFieldValue(hh, 'StatyaName', SpAxis1.Name);
            if GetFirst FpStBud = tsOk DBFPutFieldValue(hh, 'StatyaAbbr', FpStBud.Abbr);
            DBFInsertRecord(hh);
          }
     } While (TreeGetNextEx(treeSpTF)) AND NextVisual;
  TreePopPos(treeSpTF);

} //else if _TipREp = 0 
//  CloseInterface(cmDefault);
}
cmValue2:{
  CloseInterface(cmDefault);
}
cmPick:
{
  case curfield of
    #varbudName:
    {
      var _c: comp;
      _c := varbudNrec;
      if runinterface(F_FPCATALOG::GETVARIANT, 1, 0, _c) = cmDefault
        varbudNrec := _c;
      rereadrecord;
    }
  end;
}
cmInit:
{
  readmydsk(varbudNrec, 'AGAT_TEMPLANZAKAZ_VARBUDNREC', false);
}
cmDone:
{
  savemydsk(varbudNrec, 'AGAT_TEMPLANZAKAZ_VARBUDNREC');
}
end; // HandleEvent
end. // Interface


VipInterface UserReport_AGAT_TemPlanZakaz Implements IUserReport licensed(free);
Interface UserReport_AGAT_TemPlanZakaz;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::AGAT_TemPlanZakaz);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Печать шаблона "Тематический план по заказу"';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    #__UNUSED__(Level)
    GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'SFP';
    end;
  end;
end.
