#ifndef __AG_TriggerUtils_VIH__
#define __AG_TriggerUtils_VIH__

#component "AGAT"

const
  TRIGGER_BEFORE: byte = 1;
  TRIGGER_AFTER : byte = 2;
  TRIGGER_INSERT: byte = 1;
  TRIGGER_UPDATE: byte = 2;
  TRIGGER_DELETE: byte = 3;
end;

objinterface AG_ITriggerRecordBuffer;
  function coTable: word;
  property isModified: boolean;
end;

objinterface AG_ITriggerRecordBuffer_AttrVal(AG_ITriggerRecordBuffer);
  property value: Type$AttrVal;
end;
vipinterface AG_TriggerRecordBuffer_AttrVal implements AG_ITriggerRecordBuffer_AttrVal;

objinterface AG_ITriggerRecordBuffer_SpStep(AG_ITriggerRecordBuffer);
  property value: Type$SpStep;
end;
vipinterface AG_TriggerRecordBuffer_SpStep implements AG_ITriggerRecordBuffer_SpStep;


objinterface AG_ITriggerHandler;
  function doAction(buf: AG_ITriggerRecordBuffer; wBeforeAfter: word; wOper: word): boolean;
  procedure doRollBack(buf: AG_ITriggerRecordBuffer; wBeforeAfter: word; wOper: word);
end;

vipinterface AG_TriggerHandler_DoNothing implements AG_ITriggerHandler;
vipinterface AG_TriggerHandler_AttrVal implements AG_ITriggerHandler;
vipinterface AG_TriggerHandler_SpStep implements AG_ITriggerHandler;

vipinterface AG_TriggersState;
  static:
    procedure SetAllTriggersState(isEnabled: boolean);
    function  GetAllTriggersState: boolean;
    procedure PushAllTriggersState;
    function  PopAllTriggersState: boolean;
    constructor Init;
end;

vipinterface AG_TriggerUtils;
static:
  function getBuffer_AttrVal: AG_ITriggerRecordBuffer_AttrVal;
  function getBuffer_SpStep : AG_ITriggerRecordBuffer_SpStep;
  function getTriggerHandler(buf: AG_ITriggerRecordBuffer): AG_ITriggerHandler;
end;

#end
