#include AG_TriggerUtils.vih

#component "AGAT"

interface AG_TriggerUtils;
var
  _handlerDoNothing: AG_TriggerHandler_DoNothing;
  _handlerAttrVal: AG_TriggerHandler_AttrVal;
  _handlerSpStep: AG_TriggerHandler_SpStep;
  _bufferAttrVal: AG_TriggerRecordBuffer_AttrVal;
  _bufferSpStep : AG_TriggerRecordBuffer_SpStep;

function getBuffer_AttrVal: AG_ITriggerRecordBuffer_AttrVal;
{
  //result := AG_ITriggerRecordBuffer_AttrVal(_bufferAttrVal);
  result := AG_ITriggerRecordBuffer_AttrVal(new(AG_TriggerRecordBuffer_AttrVal));
  result.isModified := false;
}

function getBuffer_SpStep : AG_ITriggerRecordBuffer_SpStep;
{
  //result := AG_ITriggerRecordBuffer_SpStep(_bufferSpStep);
  result := AG_ITriggerRecordBuffer_SpStep(new(AG_TriggerRecordBuffer_SpStep));
  result.isModified := false;
}

function getTriggerHandler(buf: AG_ITriggerRecordBuffer): AG_ITriggerHandler;
{
  result := if(AG_TriggersState::GetAllTriggersState,
               case(buf.coTable;
                    coAttrVal: AG_ITriggerHandler(_handlerAttrVal),
                    coSpStep: AG_ITriggerHandler(_handlerSpStep);
                    AG_ITriggerHandler(_handlerDoNothing)),
               AG_ITriggerHandler(_handlerDoNothing));
//  result := if(AG_TriggersState::GetAllTriggersState,
//               case(buf.coTable;
//                    coAttrVal: AG_ITriggerHandler(new(AG_TriggerHandler_AttrVal)),
//                    coSpStep: AG_ITriggerHandler(new(AG_TriggerHandler_SpStep));
//                    AG_ITriggerHandler(_handlerDoNothing)),
//               AG_ITriggerHandler(_handlerDoNothing));
}

end.
