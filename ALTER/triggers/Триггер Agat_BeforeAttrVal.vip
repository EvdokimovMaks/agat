#include TriggerFunctions.vih
#include RSHelper.vih
#include ExtAttr.vih
#include DogovorHelper.vih
#include KatstroyHelper.vih
#include StatLog.vih
#include PD_ChangeStatusTxo.vih

#declare AgatTriggerAttrVal
action
{
  result := true;
  var buf : record as table AttrVal;
  getTableBuffer(buf);
  case buf.wtable of     //атрибут ДО

    coBaseDoc: {
      var tf: TriggerFunctions;

      var basedocStatusNrec: comp;
      basedocStatusNrec := coTxoGetField('basedoc', 'cnote', buf.crec);

      var BasedocStatusIsOk: boolean;
      BasedocStatusIsOk := basedocStatusNrec != KATNOTES_NREC_BASEDOC_REESTR and   //статус ДО не "в реестре", не "оплачен", не "закрыт"
                           basedocStatusNrec != KATNOTES_NREC_BASEDOC_OPLACH and
                           basedocStatusNrec != KATNOTES_NREC_BASEDOC_ZAKR;

      case buf.cAttrNam of
        0001000000000089h: result := (tf.UserInGroup(UserId, 00010000000000D4h) and BasedocStatusIsOk) or (pr_CurUserAdmin);            //виза ДО бухгалтерии, группа s_бухгалтерия
        0001000000000087h: result := (tf.UserInGroup(UserId, 000100000000008Dh) and BasedocStatusIsOk) or (pr_CurUserAdmin);            //виза казначейства, группа s_казначейство
        000100000000008Ah: result := (tf.UserInGroup(UserId, 00010000000000D5h) and BasedocStatusIsOk) or (pr_CurUserAdmin);            //виза коммерческой дирекции, группа s_комдир
        0001000000000088h: result := tf.UserInGroup(UserId, 0001000000000100h) or (pr_CurUserAdmin);            //виза ПЭУ, группа s_ПЭУ
        0001000000000097h: result := ((sGetTune('USER.DESGR') = 'БУХГ') and BasedocStatusIsOk) or (pr_CurUserAdmin);                    //примечание бухгалтерии
        0001000000000098h: result := ((sGetTune('USER.DESGR') = 'КАЗН')) or (pr_CurUserAdmin);                                          //примечание казначейства
        000100000000008Bh: result := ((sGetTune('USER.DESGR') = 'КАЗН') and BasedocStatusIsOk) or (pr_CurUserAdmin);                    //передано на согласование
        0001000000000099h: result := (tf.UserInGroup(UserId, 0001000000000100h)) or (pr_CurUserAdmin);          //примечание ПЭУ
        000100000000009Ah:                                                                                      //примечание ком.дир
        {
          var _Name: string;
          var tf: TriggerFunctions;
          _Name := tf.GetUserFullName;
          if not(substr(_Name,1,4)='РУК:' or sGetTune('USER.DESGR') = 'ОМТС' or sGetTune('USER.DESGR') = 'ОСЗ') result := false;
          if not BasedocStatusIsOk result := false;
        }
      end;
    }

  end;
}
rollback
{
  message('Вам запрещено изменять значение этого атрибута');
}
#end

handler with replace Agat_BeforeInsertAttrVal on trigger AttrVal before insert
#AgatTriggerAttrVal

handler with replace Agat_BeforeUpdateAttrVal on trigger AttrVal before update
#AgatTriggerAttrVal

handler with replace Agat_BeforeDeleteAttrVal on trigger AttrVal before delete
#AgatTriggerAttrVal

#declare AgatTriggerAttrValAfter(isDelete)
action
{
  result := true;
  var buf : record as table AttrVal;
  getTableBuffer(buf);
  case buf.wtable of

    coSpstep: {

      //Установка р/с списания по заказу выбытия
      if buf.cAttrNam = ATTRNAM_NREC_SPSTEP_ZAKAZ_VIBITIYA
      {
        var ea: IExtAttr;
        var rsHelper: RSHelper;
        var rsNrec: comp;
        rsNrec := rsHelper.GetRSNrecByKatstroyNrec(buf.vComp);
        if rsNrec != 0
          ea.coSetAttrID(1104, buf.crec, ATTRNAM_NREC_SPSTEP_ZAKAZ_VIBITIYA, rsNrec, if(getanykau(1, 10545, rsNrec), givenanname(1), ''));
      }

      //При изменении внешнего атрибута к позиции счета в статусе "В реестре"
      //переформировываем проводки в техническом плане счетов
      var cStepDoc: comp = coTxoGetField('SpStep', 'cStepDoc', buf.cRec);
      var cBaseDoc: comp = coTxoGetField('StepDoc', 'cBaseDoc', cStepDoc);
      var cNote: comp = coTxoGetField('BaseDoc', 'cNote', cBaseDoc);
      if cNote = KATNOTES_NREC_BASEDOC_REESTR
      {
        var wOldNote: word = 0;
        var cOldNote: comp = 0;
        var oStatLog: vipStatLog;
        oStatLog.StatLog_GetLast(40, cBaseDoc, wOldNote, cOldNote);
        var changeStatusTxo: PD_ChangeStatusTxo;
        changeStatusTxo.process(40, cBaseDoc, cOldNote, cNote);
      }

    } //coSpstep

    coDogovor: {

      var dh: DogovorHelper;

      case buf.cAttrNam of
        ATTRNAM_NREC_DOGOVOR_ZAKAZ: //Заказ к договору
        {
          var sIGKNew: string;
          sIGKNew := sTxoGetField('spkau', 'name', coGetAttrID(coKatstroy, buf.vcomp, ATTRNAM_NREC_KATSTROY_IGK));

          if #isDelete
            dh.setIGK(buf.crec, '');
          else
            dh.setIGK(buf.crec, sIGKNew);
        }
        ATTRNAM_NREC_DOGOVOR_STZ: //статья затрат к договору
        {
          dh.OnAfterChangeStZ(buf.cRec);
        }
      end;

    } //coDogovor

    coKatstroy: {

      //ИГК к заказу
      if buf.cAttrNam = ATTRNAM_NREC_KATSTROY_IGK
      {

        var ea: IExtAttr;
        var dh: DogovorHelper;
        var kh: KatstroyHelper;

        startnewvisual(vtRotatevisual, vfTimer, 'Установка ИГК у связанных с заказом договоров', 0);

        var sIGKNew: string;
        sIGKNew := sTxoGetField('spkau', 'name', buf.vcomp);

        var m: longint;
        m := initmarker('', sizeof(comp), 10, 100, false);
        kh.FillDogovorsMarker(buf.crec, m);

        var i: longint;
        var dogovorNrec: comp = 0;
        for(i := 0; getmarker(m, i, dogovorNrec); i++)
        {

          if #isDelete
            dh.setIGK(dogovorNrec, '');
          else
            dh.setIGK(dogovorNrec, sIGKNew);

        }

        donemarker(m, '');

        stopvisual('', 0);

      }

    } //coKatstroy

  end;
}
#end


handler with replace Agat_AfterInsertAttrVal on trigger AttrVal after insert
#AgatTriggerAttrValAfter(false)

handler with replace Agat_AfterUpdateAttrVal on trigger AttrVal after update
#AgatTriggerAttrValAfter(false)

#define Agat_AfterDeleteAttrVal
handler with replace Agat_AfterDeleteAttrVal on trigger AttrVal after delete
#AgatTriggerAttrValAfter(true)
