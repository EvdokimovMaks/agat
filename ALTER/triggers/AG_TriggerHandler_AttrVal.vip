#include ExtAttr.vih
#include StatLog.vih
#include TriggerFunctions.vih
#include RSHelper.vih
#include KatStroyHelper.vih
#include DogovorHelper.vih
#include AG_TriggerUtils.vih
#include PD_ChangeStatusTxo.vih
#include PD_TXOGlobalState.vih

#component "AGAT"

interface AG_TriggerHandler_AttrVal;
var
  _tf             : TriggerFunctions;
  _rsHelper       : RSHelper;
  _PDTXOState     : PD_ITXOGlobalState(PD_TXOGlobalState);
  _changeStatusTxo: PD_ChangeStatusTxo;
  _dogovorHelper  : DogovorHelper;
  _katstroyHelper : KatStroyHelper;
#include ExtAttr.var
#include StatLog.var

create view
var
  _cBaseDoc: comp;
  _cSpStep: comp;
as select
  BaseDoc.Nrec
from
  BaseDoc
 ,SpStep
 ,StepDoc
 ,BaseDoc BaseDoc1
where ((
      _cBaseDoc        == BaseDoc.Nrec
  and _cSpStep         == SpStep.Nrec
  and SpStep.cStepDoc  == StepDoc.Nrec
  and StepDoc.cBaseDoc == BaseDoc1.Nrec
));

function doActionBeforeBaseDoc(cBaseDoc: comp; cAttrNam: comp): boolean;
{
  result := true;

  var isBasedocStatusOk: boolean = True;

  //статус ДО не "в реестре", не "оплачен", не "закрыт"
  _cBaseDoc := cBaseDoc;
  if getfirst BaseDoc = tsOk
    isBasedocStatusOk := BaseDoc.cNote != KATNOTES_NREC_BASEDOC_REESTR and
                         BaseDoc.cNote != KATNOTES_NREC_BASEDOC_OPLACH and
                         BaseDoc.cNote != KATNOTES_NREC_BASEDOC_ZAKR;

  case cAttrNam of
    0001000000000089h: result := (_tf.UserInGroup(UserId, 00010000000000D4h) and isBasedocStatusOk) or (pr_CurUserAdmin);  //виза ДО бухгалтерии, группа s_бухгалтерия
    0001000000000087h: result := (_tf.UserInGroup(UserId, 000100000000008Dh) and isBasedocStatusOk) or (pr_CurUserAdmin);  //виза казначейства, группа s_казначейство
    000100000000008Ah: result := (_tf.UserInGroup(UserId, 00010000000000D5h) and isBasedocStatusOk) or (pr_CurUserAdmin);  //виза коммерческой дирекции, группа s_комдир
    0001000000000088h: result := _tf.UserInGroup(UserId, 0001000000000100h) or (pr_CurUserAdmin);                          //виза ПЭУ, группа s_ПЭУ
    0001000000000097h: result := ((sGetTune('USER.DESGR') = 'БУХГ') and isBasedocStatusOk) or (pr_CurUserAdmin);           //примечание бухгалтерии
    0001000000000098h: result := ((sGetTune('USER.DESGR') = 'КАЗН')) or (pr_CurUserAdmin);                                 //примечание казначейства
    000100000000008Bh: result := ((sGetTune('USER.DESGR') = 'КАЗН') and isBasedocStatusOk) or (pr_CurUserAdmin);           //передано на согласование
    0001000000000099h: result := (_tf.UserInGroup(UserId, 0001000000000100h)) or (pr_CurUserAdmin);                        //примечание ПЭУ
    000100000000009Ah:                                                                                                     //примечание ком.дир
    {
      var userFullName: string = _tf.GetUserFullName;
      var userDesGr: string = sGetTune('USER.DESGR');
      result := substr(userFullName,1,4) = 'РУК:' or userDesGr = 'ОМТС' or userDesGr = 'ОСЗ';
      result &= isBasedocStatusOk;
    }
  end;
}

procedure doRollBackBeforeBaseDoc(cAttrNam: comp);
{
  Message('Вам запрещено изменять значение атрибута "' + oExtAttr.AttrName(cAttrNam) + '"', warning);
}

function doActionAfterSpStep(cAttrNam: comp; cSpStep: comp; vComp: comp): boolean;
{
  result := true;

  _cSpStep := cSpStep;
  if getfirst SpStep = tsOk
    if getfirst StepDoc = tsOk
      if getfirst BaseDoc1 = tsOk {}

  //Установка р/с списания по заказу выбытия
  if cAttrNam = ATTRNAM_NREC_SPSTEP_ZAKAZ_VIBITIYA
  {
    var rsNrec: comp = _rsHelper.GetRSNrecByKatstroyNrec(vComp);
    if rsNrec != 0
    {
      AG_TriggersState::PushAllTriggersState;
      AG_TriggersState::SetAllTriggersState(false);
      oExtAttr.coSetAttrID(coSpStep, cSpStep, ATTRNAM_NREC_SPSTEP_RS_SPISANIYA,
                           rsNrec, ShowKau(KODGRKAU_RS, rsNrec));
      AG_TriggersState::PopAllTriggersState;
    }
  }

  //При изменении внешнего атрибута к позиции счета в статусе "В реестре"
  //переформировываем проводки в техническом плане счетов.
  //Только в том случае, если формирование проводок не отключено
  if _PDTXOState.value = PD_TXOGLOBALSTATE_MAKE_TXO
    if BaseDoc1.cNote = KATNOTES_NREC_BASEDOC_REESTR
    {
      AG_TriggersState::PushAllTriggersState;
      AG_TriggersState::SetAllTriggersState(false);
      var wOldNote: word = 0;
      var cOldNote: comp = 0;
      oStatLog.StatLog_GetLast(40, BaseDoc1.Nrec, wOldNote, cOldNote);
      _changeStatusTxo.process(40, BaseDoc1.Nrec, cOldNote, BaseDoc1.cNote);
      AG_TriggersState::PopAllTriggersState;
    }
}

function doActionAfterDogovor(cAttrNam: comp; cRec: comp; vComp: comp; wOper: word): boolean;
{
  result := true;
  case cAttrNam of
    ATTRNAM_NREC_DOGOVOR_ZAKAZ:
    {
      var sIGK: string = if(wOper = TRIGGER_DELETE, '',
                            if(GetAnyKau(cgAkSimple, KODGRKAU_IGK,
                               oExtAttr.coGetAttrID(coKatStroy, vComp, ATTRNAM_NREC_KATSTROY_IGK)),
                               GivenAnName(cgAnName), ''));
      _dogovorHelper.setIGK(cRec, sIGK);
    }
    ATTRNAM_NREC_DOGOVOR_STZ:
    {
      _dogovorHelper.OnAfterChangeStZ(cRec);
    }
  end;
}

function doActionAfterKatStroy(cAttrNam: comp; cRec: comp; vComp: comp; wOper: word): boolean;
{
  result := true;
  case cAttrNam of
    ATTRNAM_NREC_KATSTROY_IGK:
    {
      StartNewVisual(vtRotatevisual, vfTimer, 'Установка ИГК у связанных с заказом договоров', 0);

      var sIGKNew: string = if(wOper = TRIGGER_DELETE, '',
                               if(GetAnyKau(cgAkSimple, KODGRKAU_IGK, vComp), GivenAnName(cgAnName), ''));

      var m: longint = InitMarker('', 8, 100, 10, false);
      _katstroyHelper.FillDogovorsMarker(cRec, m);

      var i: longint;
      var dogovorNrec: comp = 0;
      for(i := 0; GetMarker(m, i, dogovorNrec); ++i)
        _dogovorHelper.setIGK(dogovorNrec, sIGKNew);

      DoneMarker(m, '');

      StopVisual('', 0);
    }
  end;
}

function doAction(buf: AG_ITriggerRecordBuffer; wBeforeAfter: word; wOper: word): boolean;
{
  #__UNUSED__(wOper)
  result := true;
  var b: AG_ITriggerRecordBuffer_AttrVal = AG_ITriggerRecordBuffer_AttrVal(buf);
  case wBeforeAfter of
    TRIGGER_BEFORE:
      case b.value.wTable of
        coBaseDoc: result := doActionBeforeBaseDoc(b.value.cRec, b.value.cAttrNam);
      end;
    TRIGGER_AFTER:
      case b.value.wTable of
        coSpStep: result := doActionAfterSpStep(b.value.cAttrNam, b.value.cRec, b.value.vComp);
        coDogovor: result := doActionAfterDogovor(b.value.cAttrNam, b.value.cRec, b.value.vComp, wOper);
        coKatStroy: result := doActionAfterKatStroy(b.value.cAttrNam, b.value.cRec, b.value.vComp, wOper);
      end;
  end;
}

procedure doRollBack(buf: AG_ITriggerRecordBuffer; wBeforeAfter: word; wOper: word);
{
  #__UNUSED__(wOper)
  var b: AG_ITriggerRecordBuffer_AttrVal = AG_ITriggerRecordBuffer_AttrVal(buf);
  case wBeforeAfter of
    TRIGGER_BEFORE:
      case b.value.wTable of
        coBaseDoc: doRollBackBeforeBaseDoc(b.value.cAttrNam);
      end;
  end;
}

end.
