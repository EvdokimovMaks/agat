#include PlporHelper.vih
#include TaxFields.vih
#include ContractId.vih

#declare AgatTriggerAfterPlporBody
  result := true;
  var buf : record as table plpor;
  getTableBuffer(buf);
  if buf.tidkgal=1
  {
    if RecursionLevel <= 1
    {
      var _excludes: TCompArray;
      var _ph: AGAT::PlporHelper;
      _ph.RecalcLinkedBasedocStatuses(buf.nrec, _excludes);
    }
  }
#end

handler with replace Agat_AfterUpdatePlpor on trigger Plpor after update
action
{
  #AgatTriggerAfterPlporBody;
}

handler with replace Agat_AfterInsertPlpor on trigger Plpor after insert
action
{
  #AgatTriggerAfterPlporBody;
}

#declare AgatTriggerBeforePlporBody
  result := true;
  var buf: type$plpor;
  GetTableBuffer(buf);

  var sContractId: string;
  sContractId := GetContractId(GetContractIDKey_ByPlporTidk, buf.TiDk);

  if ParseWord(buf.Tax, 9, ';') != sContractId and sContractId != ''
  {
    var _taxFields: TaxFields;
    _taxFields.SetTaxStr(0, buf.Tax);
    _taxFields.SetTaxFields(9, sContractId);
    buf.Tax := _taxFields.GetTaxStr;
    SetTableBuffer(buf);
  }
#end

handler with replace Agat_BeforeUpdatePlPor on Trigger PlPor before update
action
{
  #AgatTriggerBeforePlporBody
}

handler with replace Agat_BeforeInsertPlPor on Trigger PlPor before insert
action
{
  #AgatTriggerBeforePlporBody
}
