#include PlporHelper.vih
#include Query.vih
#include BFManager.vih

#component "F_BANKDOCF"

alter interface vypsee;

overload
  Function CreateNewPlPor(sum: double; sumVal: double; NewNRec: comp): boolean;
  Function GetNumber(_TiDkGal, _TiDk: word; _Descr: TDescr; _DatVip : date; _NoDok: string): string;
  Function PlPor_FindByDateVipSum: boolean;
  Function ObjVypSee.Init(_parCurDate: date; _parTipVip: word; _parMyBank: comp; _parNRecBDF: comp): boolean;
end;

extendformats scSeePlPor, brAllDocs;

table struct tmpPlPorExt (
  Nrec: comp,
  cBaseDoc: comp
) with index (
  i01 = Nrec
);

var
  _plporHelper: PlporHelper;
  _qFindPlpor: IQuery;
  _bfManager: BFManager;
  _markedSum: double;

create view
as select
  if(IsValid(tnTmpPlPorExt), ShowKau(cgKau_BaseDoc, TmpPlPorExt.cBaseDoc), '') (fieldName=BaseDocFld)
from tmpPlPorExt,
     BaseDoc plporBaseDoc,
     StepDoc plporStepDoc,
     soprhoz plporSoprhoz,
     schfact plporSchfact,
     basefin plporBasefin,
     tmpPlPor tmpPlPorMarked,
     (select Sum(tmpPlPorTotal.SumPlat) (fieldname=Sum)
      from tmpPlPor tmpPlPorTotal
      where (FoundMarker(markProcess, TmpPlPor.nRec))
     ) tmpTotal
where ((
  tmpPlPor.Nrec         == tmpPlPorExt.Nrec      and
  tmpPlPorExt.cBaseDoc  == plporBaseDoc.Nrec     and
  plporBaseDoc.Nrec     == plporStepDoc.cBaseDoc and
  plpor.tidk            == plporSoprhoz.tipdoc   and
  plpor.nrec            == plporSoprhoz.csoprdoc and
  plporSoprhoz.cschfact == plporSchfact.nrec     and
  plpor.nrec            == plporBasefin.cPlPor   and
  root                  == tmpPlPorMarked.Nrec   and (FoundMarker(markProcess, tmpPlPorMarked.Nrec))
));

create view vSetBD
var
  _cPlPor    : comp;
  _cBaseDoc  : comp;
  _bAsked    : boolean;
  _bOverwrite: boolean;
from
  TmpPlPor
 ,TmpPlPorExt
 ,BaseDoc
 ,StepDoc
where ((
      _cPlPor   == TmpPlPor.Nrec
  and _cPlPor   == TmpPlPorExt.Nrec
  and _cBaseDoc == BaseDoc.Nrec
  and _cBaseDoc == StepDoc.cBaseDoc
));

procedure RefreshMarkedSum;
{
  _markedSum := 0;
  _loop tmpPlPorMarked
    _markedSum += tmpPlPorMarked.SumPlat;
}

Panel panButtons;
Screen scSeePlPor '' ('', hcBankdSVypisWork, sci1EnEsc);
fields
  _markedSum: ['[|-]3666`666`666`666`666.88'], Skip;
buttons
  cmUpdateTotals, [singleline];
<<

                                                                                                                            Сумма по помеченным: .@@@@@@@@@@@@@@@ <.Обновить.>
>>

end;
end;

Panel panSeeDocs;
Browse brAllDocs 'Все документы'('Просмотр документов банковской выписки', hcBankdSVypisWork, sci14c4InsPMEsc);
  Table TmpPlPor;
  fields
    BaseDocFld 'ДО': [10], protect, pickbutton;
end;
end;

Function Init(_parCurDate: date; _parTipVip: word; _parMyBank: comp; _parNRecBDF: comp): boolean;
{
  result := Inherited::Init(_parCurDate, _parTipVip, _parMyBank, _parNRecBDF);
  mtClear(tnTmpPlPorExt, mfNormal);
}

Function CreateNewPlPor(sum: double; sumVal: double; NewNRec: comp): boolean;
{
  result := inherited::CreateNewPlPor(sum, sumVal, NewNRec);
  if result
  {
    var IsUpdateNeeded: boolean = false;

    if plpor.tidkgal = 1
    {
      update current plpor set plpor.nodok := '00000';
      plpor.nodok := _plporHelper.GetNewPlporNumber(plpor.tidkgal, year(plpor.datvip));
      IsUpdateNeeded := True;
    }

    if getfirst TmpPlPorExt = tsOk
      if getfirst plporBaseDoc = tsOk
      {
        if getfirst plporStepDoc = tsOk
        {
          plpor.cStepDoc := plporStepDoc.Nrec;
          IsUpdateNeeded := True;
        }

        var c: comp;
        var s: string;

        c := piExtAttr.coGetAttr(coBaseDoc, plporBaseDoc.Nrec, 'Исполнитель договора');
        s := piExtAttr.sGetAttr (coBaseDoc, plporBaseDoc.Nrec, 'Исполнитель договора');
        piExtAttr.coSetAttr(coPlPor, PlPor.Nrec, 'Исполнитель договора', c, s);

        c := piExtAttr.coGetAttr(coBaseDoc, plporBaseDoc.Nrec, 'Объект строительства');
        s := piExtAttr.sGetAttr (coBaseDoc, plporBaseDoc.Nrec, 'Объект строительства');
        piExtAttr.coSetAttr(coPlPor, PlPor.Nrec, 'Объект строительства', c, s);

        c := piExtAttr.coGetAttr(coBaseDoc, plporBaseDoc.Nrec, 'Статья ДДС');
        s := piExtAttr.sGetAttr (coBaseDoc, plporBaseDoc.Nrec, 'Статья ДДС');
        piExtAttr.coSetAttr(coPlPor, PlPor.Nrec, 'Статья ДДС', c, s);
      }

    oExtAttr.sSetAttrId(9015, plpor.nrec, ATTRNAM_NREC_PLPOR_NOMER_V_BANKE, TmpPlPor.nodok);

    //Получаем дополнительные настройки
    var s: string = piExtAttr.sGetAttr(coBankDocF, BankDocF.Nrec, 'Дополнительные флаги');
    var w: word = if(s='', 0, Word(s));
    //Если установлена настойка - записываем в примечание номер и дату документа из выписки
    if (w and 1) = 1
    {
      PlPor.Podotchet := 'б/о №' + TmpPlPor.NoDok + ' от ' + TmpPlPor.DatVip;
      IsUpdateNeeded := true;
    }
    //Исполнитель договора - если установлена настройка и не установлен ранее из ДО
    if ( (w and 2) = 2 ) and (piExtAttr.coGetAttr(coPlPor, PlPor.Nrec, 'Исполнитель договора') = 0)
    {
      var c: comp = piExtAttr.coGetAttr(coBankDocF, BankDocF.Nrec, 'Исполнитель договора');
      piExtAttr.coSetAttr(coPlPor, PlPor.Nrec, 'Исполнитель договора', c, ShowKau(cgKau_KatPodr, c));
    }

    if IsUpdateNeeded
      update current PlPor;

    _loop plporSoprhoz
    {
      if getfirst plporSchfact = tsOk
      {
        if delete current plporSchfact = tsOk
          update current plporSoprhoz set plporSoprhoz.cschfact := 0;
      }
    }

    if (getfirst plporBaseFin = tsOk) and IsValid(tnTmpPlPorExt) and TmpPlPorExt.cBaseDoc != 0
    {
      _bfManager.BaseDoc2BaseFin(plporBaseFin.Nrec, TmpPlPorExt.cBaseDoc, false, true);
    }

  }

}


Function GetNumber(_TiDkGal, _TiDk: word; _Descr: TDescr; _DatVip : date; _NoDok: string): string;
{

  case _TiDkGal of
    2: result := _NoDok;
  else
    result := inherited::GetNumber(_TiDkGal, _TiDk, _Descr, _DatVip, _NoDok);
  end;

}


sql query queryFindPlpor =
  select top 1 plpor.nrec
  from plpor
  join attrval avNumber on avNumber.wTable = 9015 and avNumber.cRec = plpor.nrec and
               avNumber.cAttrNam = :cattrnam and avNumber.vString = :nodok
  where plpor.tidk = :tidk and plpor.datvip = :datvip and plpor.sumplat = :sumplat and
        plpor.cplat = :cplat and plpor.cpol = :cpol
  order by plpor.datvip desc
;

Function PlPor_FindByDateVipSum: boolean;
{

  if not inherited::PlPor_FindByDateVipSum
  {

    if _qFindPlpor = nullref
      _qFindPlpor := queryManager.createQuery(queryFindPlpor);

    var rs: IResultSet;
    rs := _qFindPlpor.setParam('cattrnam', ATTRNAM_NREC_PLPOR_NOMER_V_BANKE)
                     .setParam('nodok'   , TmpPlPor.NoDok)
                     .setParam('tidk'    , TmpPlPor.tidk)
                     .setParam('datvip'  , TmpPlPor.datvip)
                     .setParam('sumplat' , TmpPlPor.sumplat)
                     .setParam('cplat'   , TmpPlPor.cplat)
                     .setParam('cpol'    , TmpPlPor.cpol)
                     .getResultSet;

    if rs.getFirst = tsOk
    {
      TmpPlPor.cPlPor := comp(rs.row.valAt(1));
      result := update current TmpPlPor = tsOk;
    }
    else
      result := false;

  }
  else
    result := true;

}


procedure SetBaseDoc(tmpPlPorNrec: comp; BaseDocNrec: comp);
{
  vSetBD._cPlPor := tmpPlPorNrec;
  if vSetBD.getfirst TmpPlPor = tsOk
  {
    var bRazlOrg: boolean = false;
    var bRazlSch: boolean = false;

    vSetBD._cBaseDoc := BaseDocNrec;
    if vSetBD.getfirst BaseDoc = tsOk
    {
      bRazlOrg := if(isKontragentPol(vSetBD.TmpPlPor.TiDkGal, vSetBD.TmpPlPor.Priznak),
                     vSetBD.BaseDoc.cOrg != vSetBD.TmpPlPor.cPol,
                     vSetBD.BaseDoc.cOrg != vSetBD.TmpPlPor.cPlat);

      bRazlSch := if(isKontragentPol(vSetBD.TmpPlPor.TiDkGal, vSetBD.TmpPlPor.Priznak),
                     vSetBD.BaseDoc.cBank != vSetBD.TmpPlPor.cBankPol,
                     vSetBD.BaseDoc.cBank != vSetBD.TmpPlPor.cBankPlat);
    }

    if (bRazlOrg or bRazlSch) and (not vSetBD._bAsked)
    {
      vSetBD._bAsked := true;
      vSetBD._bOverwrite := Message('Разные Контрагент/Cчет в ДО и платежных документах.'#13 +
                                    'Установить в платежные документы Контрагент/Счет из ДО?', YesNo) = cmYes;
    }

    if vSetBD.getfirst TmpPlPorExt != tsOk
    {
      vSetBD.ClearBuffer(vSetBD.tnTmpPlPorExt);
      vSetBD.TmpPlPorExt.Nrec := tmpPlPorNrec;
      vSetBD.TmpPlPorExt.cBaseDoc := BaseDocNrec;
      vSetBD.insert current TmpPlPorExt;
    }
    else
    {
      vSetBD.TmpPlPorExt.cBaseDoc := BaseDocNrec;
      vSetBD.update current TmpPlPorExt;
    }

    if (bRazlOrg or bRazlSch) and vSetBD._bOverwrite
    {
      if isKontragentPol(vSetBD.TmpPlPor.TiDkGal, vSetBD.TmpPlPor.Priznak)
      {
        vSetBD.TmpPlPor.cPol := vSetBD.BaseDoc.cOrg;
        vSetBD.TmpPlPor.cBankPol := vSetBD.BaseDoc.cBank;
      }
      else
      {
        vSetBD.TmpPlPor.cPlat := vSetBD.BaseDoc.cOrg;
        vSetBD.TmpPlPor.cBankPlat := vSetBD.BaseDoc.cBank;
      }
      vSetBD.Update current TmpPlPor;
    }

  }
}

tableevent table TmpPlPor;
  cmPick:
  {
    case curfield of
      #BaseDocFld:
      {
        var c: comp = 0;
        if _bfManager.Get_BaseDoc(false, tmpPlPor.Priznak, if(tmpPlPor.Priznak = 1, 101, 201), c, 0,
          if(isKontragentPol(TmpPlPor.TiDkGal, TmpPlPor.Priznak), TmpPlPor.cPol, TmpPlPor.cPlat), 0)
        {
          vSetBD._bAsked := false;
          if GetMarkerCount(markProcess) = 0
            SetBaseDoc(TmpPlPor.Nrec, c);
          else
          {
            var c1: comp = 0;
            var i: longint = 0;
            for(i := 0; GetMarker(markProcess, i, c1); i++)
              SetBaseDoc(c1, c);
          }
          RescanPanel(tnTmpPlPor);
        }
      }
    end;
  }
end;


handleevent

cmIdle:
{
  inherited::handleevent(cmIdle);
  RefreshMarkedSum;
  RereadRecord(#BankDocF);
}

cmSelectAll:
{
  inherited::handleevent(cmSelectAll);
  RefreshMarkedSum;
  RereadRecord(#BankDocF);
}

cmUnSelectAll:
{
  inherited::handleevent(cmUnSelectAll);
  RefreshMarkedSum;
  RereadRecord(#BankDocF);
}

cmUpdateTotals:
{
  RefreshMarkedSum;
  RereadRecord(#BankDocF);
}

cmDelOnProtect:
{
  case inherited::handleevent(cmDelOnProtect) of
    heAbort: Abort;
    heStop: Stop;
  end;
  case curfield of
    #BaseDocFld:
    {
      if isValid(tnTmpPlPorExt)
        delete current TmpPlPorExt;
      RescanPanel(tnTmpPlPor);
    }
  end;
}

end;

end.
