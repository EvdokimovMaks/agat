#component "Z_StaffSHR"

alter interface StafHist;

function GetLinkedSSFld: string; forward;

create view
as select
  GetLinkedSSFld() (fieldname=LinkedSSFld)
from
  DocRef DocRefSS
 ,StaffStruct LinkedSS
 ,HistoryStr LinkedHS
 ,CatStrPr LinkedCatStrPr
bounds LinkedSSFrom =
      DOCREF_STAFFSTRUCT       == DocRefSS.wTypeRef
  and HistoryStrOrder.Nrec     == DocRefSS.cDopFld1
  and DocRefSS.cField2         == LinkedSS.Nrec
  and DocRefSS.cDopFld2        == LinkedHS.Nrec
  and LinkedHS.wCodOper        == LinkedCatStrPr.wCodOper

bounds LinkedSSTo =
      DOCREF_STAFFSTRUCT       == DocRefSS.wTypeRef
  and HistoryStrOrder.Nrec     == DocRefSS.cDopFld2
  and DocRefSS.cField1         == LinkedSS.Nrec
  and DocRefSS.cDopFld1        == LinkedHS.Nrec
  and LinkedHS.wCodOper        == LinkedCatStrPr.wCodOper
;

function GetLinkedSSFld: string;
{
  result := '';
  if IsValid(tnDocRefSS)
  {
    if IsValid(tnLinkedSS)
      result += iCatFunc.GetCatalogsCode(LinkedSS.Department) + ' / ' + iCatFunc.GetCatalogsName(LinkedSS.Post);
    if IsValid(tnLinkedHS)
    {
      result += ' / ' + if(IsValid(tnLinkedCatStrPr), LinkedCatStrPr.NOper, LinkedHS.wCodOper);
      result += ' / ' + LinkedHS.DHist;
    }
  }
}

procedure CreateLinkHistoryStr(ccSS: comp; ccHS: comp);
{
  case HistoryStrOrder.wCodOper of
    20: //Создание ставки
    {
      if getfirst DocRefSS != tsOk
      {
        ClearBuffer(#DocRefSS);
        DocRefSS.wTypeRef := DOCREF_STAFFSTRUCT;
        DocRefSS.cDopFld2 := HistoryStrOrder.Nrec;
        DocRefSS.cField2  := StaffStruct.Nrec;
        insert current DocRefSS;
      }
      DocRefSS.cDopFld1 := ccHS;
      DocRefSS.cField1  := ccSS;
      update current DocRefSS;
    }
    21: //Ликвидация ставки
    {
      if getfirst DocRefSS != tsOk
      {
        ClearBuffer(#DocRefSS);
        DocRefSS.wTypeRef := DOCREF_STAFFSTRUCT;
        DocRefSS.cDopFld1 := HistoryStrOrder.Nrec;
        DocRefSS.cField1  := StaffStruct.Nrec;
        insert current DocRefSS;
      }
      DocRefSS.cDopFld2 := ccHS;
      DocRefSS.cField2  := ccSS;
      update current DocRefSS;
    }
  end;
}

extendformats scrAppHist;
screen scrAppHist;
  Show at (, 10);
  Table HistoryStrOrder;
  fields
    LinkedSSFld: protect, pickbutton;
<<


  `Связ. ставка`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; //screen scrAppHist

tableevent table HistoryStrOrder;
  cmPositionChanged:
  {
    inherited::handleevent(cmPositionChanged);
    ToggleFieldState(#LinkedSSFld, sfVisible, HistoryStrOrder.wCodOper = 20 or HistoryStrOrder.wCodOper = 21);
    if HistoryStrOrder.wCodOper = 20 //Создание ставки
    {
      if BoundActive(tbLinkedSSFrom) SubBounds(tbLinkedSSFrom);
      if not BoundActive(tbLinkedSSTo) AddBounds(tbLinkedSSTo);
    }
    if HistoryStrOrder.wCodOper = 21 //Ликвидация ставки
    {
      if BoundActive(tbLinkedSSTo) SubBounds(tbLinkedSSTo);
      if not BoundActive(tbLinkedSSFrom) AddBounds(tbLinkedSSFrom);
    }
  }
end; //tableevent table HistoryStrOrder

handleevent

  cmPick:
  {
    case CurField of
      #LinkedSSFld:
      {
        var ccDep, ccSS, ccHS: comp = 0;
        var mCodOper: tPtr = InitMarker('', 2, 3, 3, true); //Маркер с видами операций для выбора
        case HistoryStrOrder.wCodOper of
          20: InsertMarker(mCodOper, word(21)); //Если текущая операция - создание ставки, то выбираем удаление ставки
          21: InsertMarker(mCodOper, word(20)); //Если текущая операция - удаление ставки, то выбираем создание ставки
        end;
        if RunInterface(AGAT::PickHistoryStr, ccDep, ccSS, ccHS, mCodOper) = cmDefault
        {
          CreateLinkHistoryStr(ccSS, ccHS);
          RereadRecord(#DocRefSS);
        }
        DoneMarker(mCodOper, '');
      }
    else
      inherited::handleevent(cmPick);
    end;
  }

  cmDelOnProtect:
  {
    case CurField of
      #LinkedSSFld:
      {
        if IsValidAll(#DocRefSS)
        {
          delete current DocRefSS;
          RereadRecord(#HistoryStrOrder);
        }
      }
    else
      inherited::handleevent(cmDelOnProtect);
    end;
  }

end; //handleevent

end.
