#doc
Обработка иерархии подразделений
Быстродействие функции CreateDeptIerTabl
#end

#component "Z_StaffCat"
Alter Interface DepartIer;
OverLoad
  procedure ObjDepartIer.CreateDeptIerTabl(DateBuild: date; cIer: word);
end;

public procedure CreateDeptIerTabl(DateBuild: date; cIer: word);
{ // Создает временную таблицу подразделений на дату DateBuild
  // cIer - условия сортировки 0 - по именам
  //                           1 - по именам с учетом иерархии
  //                           2 - полные имена с учетом иерархии
  //                           3 - по кодам

  var CurNrec          : comp;
  var parentNRec       : comp = 0;
  var tmpStr           : string;
  var countIer         : longInt;
  var i                : longInt;

  countIer := 1;

  tmpStr := '';

  //StartNewVisual(vtNumericVisual, vfBreak + vfTimer, 'Подготовка информации', 1000);
  ReSetBounds(#CatPodrDeptIer);
  delete all CatPodrDeptIer; // Очищаем временную таблицу
  //SetBounds(#CatPodrDeptIer);

  set dateSts := DateBuild;

// создаем временную таблицу
  sql
  select
    case when BITAND(:(cIer),1)<1 then CatHist.Name else '' end as Name,
    :(cIer) as countIer,
    :(DateBuild) as dateBuild,
    CatHist.cCat as cPodr,
    CatHist.cParent as cParent,
    CatHist.Name as Name1,
    Catalogs.Code,
    CatHist.isLeaf,
    CatHist.Dat1 as DatN,
    CatHist.Dat2 as DatOk,
    CatHist.lPr as NRec:comp
  from
    Catalogs
    inner join (
      select CatHist.cCat, max(CatHist.Dat1) MaxDate:date
      from CatHist
      where :(dateSts)>=CatHist.Dat1 and (CatHist.wFld1 <> 2 or #Date(0,0,0) = CatHist.Dat2 or :(dateSts) <= CatHist.Dat2)
      group by CatHist.cCat
    ) CatH1 on (Catalogs.NRec = CatH1.cCat)
    inner join (
      select CatHist.cCat, CatHist.Dat1, max(cast(CatHist.lastuser as integer)) MaxNpp
      from CatHist
      where :(dateSts)>=CatHist.Dat1 and (CatHist.wFld1 <> 2 or #Date(0,0,0) = CatHist.Dat2 or :(dateSts) <= CatHist.Dat2)
      group by CatHist.cCat, CatHist.Dat1
    ) CatH2 on (Catalogs.NRec = CatH2.cCat and CatH1.MaxDate = CatH2.Dat1)
    inner join CatHist on (Catalogs.NRec = CatHist.cCat and CatH1.MaxDate = CatHist.Dat1 and CatH2.MaxNpp = cast(CatHist.lastuser as integer))
  where
    Catalogs.lPr = 0 and Catalogs.MainLink = (select NRec from Catalogs where :(SetEntry) = SysCode) and
    case :(SetEntry) when -11 then 1 else 0 end <> CatHist.bMulti
  into CatPodrDeptIer ByName;
/* Далее замещенный оригинальный код
  CurNrec := 0;
  _loop AllCatHist
  {
    case SetEntry  of

       -11: if (1 = AllCatHist.bMulti)
              continue;

      3011: if (0 = AllCatHist.bMulti)
              continue;
    end;

    if (CurNrec <> AllCatHist.cCat) and (AllCatHist.cCat <> RootNRec)
    {
      CurNrec := AllCatHist.cCat;

      if (GetFirst Catalogs where (( AllCatHist.cCat == Catalogs.NRec )) <> tsOk)
        continue; // битая ссылка AllCatHist.cCat

      if (GetLast CatHist = tsOk)
      {
        var tmpnrec: comp;
        tmpnrec := GetLastCathist(CatHist.cCat, CatHist.dat1);

        if (tmpnrec > 0)
          if getfirst CatHist where (( tmpnrec == CatHist.Nrec)) = tsOk {}

        if (CatHist.wFld1 = 2)
          if ((Date(0,0,0) <> CatHist.Dat2) and (dateSts > CatHist.Dat2))
            continue;

        if (CatHist.cCat = CatHist.cParent)
        {
          Message('Запись ' + CatHist.Name + ' имеет рекурсивную ссылку' , Information);
          CatHist.cParent := RootNRec;
          Update current CatHist;
        }

        ClearBuffer(#CatPodrDeptIer);
        if ((cIer and 1) < 1)
          CatPodrDeptIer.Name       := CatHist.Name;
        CatPodrDeptIer.countIer     := cIer;
        CatPodrDeptIer.dateBuild    := DateBuild;
        CatPodrDeptIer.cPodr        := CatHist.cCat;
        CatPodrDeptIer.cParent      := CatHist.cParent;
        CatPodrDeptIer.Name1        := CatHist.Name;
        CatPodrDeptIer.Code         := iCatFunc.GetCatalogsCode(CatHist.cCat);
        CatPodrDeptIer.isLeaf       := CatHist.isLeaf;
        CatPodrDeptIer.DatN         := CatHist.Dat1;
        CatPodrDeptIer.DatOk        := CatHist.Dat2;
        CatPodrDeptIer.NRec         := Comp(CatHist.lPr);
        insert current CatPodrDeptIer;
      }
    }
  }
*/
  // создаем иерархию подразделений если надо

  if ((cIer and 1) = 1)
  {
    countIer := wGetTune('UP.STAFF.LEVEL_IER');
    _loop CatPodrDeptIer
      {
      tmpStr := '';
      if ( GetFirst CatPodrDeptIer1 where ((CatPodrDeptIer.cPodr == CatPodrDeptIer1.cPodr)) = tsOk)
        parentNRec := CatPodrDeptIer1.cParent;
      if (word(CatPodrDeptIer1.NRec) = 0)
        tmpStr := CatPodrDeptIer1.Name1;
      i := 1;
      while (i < countIer and parentNRec <> RootNRec and parentNRec <> 0)
        {
        if (GetFirst CatPodrDeptIer1 where ((parentNRec == CatPodrDeptIer1.cPodr)) = tsOk)
          {
          if (word(CatPodrDeptIer1.NRec) = 0)
            {
            if (tmpStr = '')
              tmpStr := CatPodrDeptIer1.Name1;
            else
              tmpStr := CatPodrDeptIer1.Name1 + '\' + tmpStr;
            }

          parentNRec := CatPodrDeptIer1.cParent;
          }
        else
          parentNRec := 0;
       inc(i);
        }
      CatPodrDeptIer.Name  := tmpStr;
      update current CatPodrDeptIer;
      }
    }
}
end.
