#include Commission.fun  // Функции для вывода комиссии
#include Commission.vih  // Вывод комиссии в отчет
#include extattr.vih
#include getkau.vih

#component "F_NALOGREG"

alter interface NALOGREGDOC;

overload
  Procedure Unload_Veks(Npp : word; Summ1, Summ2, Summ3, Summ4 : double);
  Procedure UnloadTbl(isCreateXLT : boolean);
end;

extendformats SCRASHFUTUR;

var
  _extattr: IExtAttr;
  _getkau: GetKau;

create view
as select _extattr.doGetAttrID(coNalRegDc, nalregdc.nrec, ATTRNAM_NREC_NALREGDC_KOLLIC) (fieldname=KolLicFld),
          _extattr.sGetAttrID(coNalRegDc, nalregdc.nrec, ATTRNAM_NREC_NALREGDC_SRBESSR) (fieldname=SrBessrFld),
          if(isValidAll(tnSpkRash), spkRash.Name, '') (fieldname=RashNameFld),
          if(isValidAll(tnSpkRash), spkRash.Code, '') (fieldname=RashCodeFld)
from attrval avRash, SpKau spkRash
where ((
  coNalRegDc                 == avRash.wTable and
  nalregdc.nrec              == avRash.cRec and
  ATTRNAM_NREC_NALREGDC_RBP  == avRash.cAttrNam and
  avRash.vComp               == spkRash.Nrec
))
;

//******************************************************************************
//#region Перекрытые функции

Procedure Unload_Veks(Npp : word; Summ1, Summ2, Summ3, Summ4 : double);
{
  pXL.ClearTblBuffer;                                               // Очистить буфер записи таблицы
  pXL.SetTblNumberFldValue('Формат', 0);
  pXL.SetTblNumberFldValue('Номер_п_п', Npp);
  pXL.SetTblStringFldValue('Наименование_Расхода', if (isValid(#KatKlass), KatKlass.Name, '')); // Наименование вида расхода
  pXL.SetTblNumberFldValue('Код_Расхода', if (isValid(#KatKlass), KatKlass.wType, 0));          // Код вида расхода
  pXL.SetTblNumberFldValue('Первоначальная_Сумма', NalRegDc.SumPr); // Первоначальная сумма расходов (принято к учету)
  pXL.SetTblDateFldValue  ('Дата_Формирования', NalRegDc.DatDoc);   // Дата возникновения расходов (дата формирования)
  pXL.SetTblNumberFldValue('Срок_Погашения', Srok);                 // Срок погошения расходов по месяцам
  pXL.SetTblNumberFldValue('Расчетная_Сумма', Summ1);               // Расчетная сумма к списанию
  pXL.SetTblNumberFldValue('Списано_Сумма', Summ2);                 // Списано (погашено) расходов до начала инвентаризации
  pXL.SetTblStringFldValue('Номер_расхода', NalRegDc.NoDoc);        // Номер расхода
  pXL.SetTblStringFldValue('Месяцев_со_дня_расходов', Months_Between(NalRegDc.DopDat2,dDate)); // месяцев со дня начала расходов
  pXL.SetTblNumberFldValue('Сумма_списания_за_месяц', Summ3);               // Расчетная сумма к списанию за месяц
  pXL.SetTblNumberFldValue('Сумма_списания_за_год', Summ4);               // Расчетная сумма к списанию от даты задолженности или с начала года

  // KatOs
  if pTiDk = cgDoc_1050
  {
  pXL.SetTblStringFldValue('Наименование_ОС', if (isValid(#KatOs), KatOs.NameOs, '')); // наименование для "Убытки от реализации амортизируемого имущества"
  pXL.SetTblStringFldValue('Инв_Номер_ОС', if (isValid(#KatOs), KatOs.InNum, ''));     // инвентаризационный номер
  }

  //Аргумент
  pXL.SetTblNumberFldValue('КолвоЛицензий', KolLicFld);
  pXL.SetTblStringFldValue('СрочнаяБессрочная', SrBessrFld);
  pXL.SetTblStringFldValue('НаименованиеРБП', if(RashNameFld = '', if(isValid(#KatKlass), KatKlass.Name, ''), RashNameFld));
  pXL.SetTblStringFldValue('КодРБП', if(RashCodeFld = '', if(isValid(#KatKlass), KatKlass.wType, 0), RashCodeFld));
  pXL.SetTblDateFldValue  ('ДатаНачалаРасчета', nalregdc.dopdat2);
  pXL.SetTblNumberFldValue('КолвоДней', nalregdc.kol);

  // Вставка записи в таблицу
  pXL.InsTblRow;
}

Procedure UnloadTbl(isCreateXLT : boolean);
{
  // Определение таблицы отчета (DBTbl Constructor)
  #WriteXltCommissionTable(iCommission,pXL);
  pXL.CreateTbl('RepTbl');
  pXL.CreateTblFld('Формат');
  pXL.CreateTblFld('Номер_п_п');
  pXL.CreateTblFld('Наименование_Расхода');
  pXL.CreateTblFld('Код_Расхода');
  pXL.CreateTblFld('Первоначальная_Сумма');
  pXL.CreateTblFld('Дата_Формирования');
  pXL.CreateTblFld('Срок_Погашения');
  pXL.CreateTblFld('Расчетная_Сумма');
  pXL.CreateTblFld('Списано_Сумма');
  pXL.CreateTblFld('Номер_расхода');
  pXL.CreateTblFld('Месяцев_со_дня_расходов');
  pXL.CreateTblFld('Сумма_списания_за_месяц');
  pXL.CreateTblFld('Сумма_списания_за_год');
  pXL.CreateTblFld('Наименование_ОС');
  pXL.CreateTblFld('Инв_Номер_ОС');
  //Аргумент
  pXL.CreateTblFld('КолвоЛицензий');
  pXL.CreateTblFld('СрочнаяБессрочная');
  pXL.CreateTblFld('НаименованиеРБП');
  pXL.CreateTblFld('КодРБП');
  pXL.CreateTblFld('ДатаНачалаРасчета');
  pXL.CreateTblFld('КолвоДней');
  // Объявление полей
  // Выгрузка полей таблицы
  if (not isCreateXLT)
    Unload_Data;
  // Все необходимые пост-действия по "публикации" таблицы (DBTbl Destructor)
  pXL.PublishTbl('RepTbl');
}

//#endregion Перекрытые функции
//******************************************************************************

window NALREGWIN;

screen SCRASHFUTUR;

table nalregdc;

fields
  RashNameFld: protect, pickbutton;
  KolLicFld: noprotect;
  SrBessrFld: protect, pickbutton;

<<











`Наименование расхода`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Количество лицензий` .@@@@@ `Срочная/бессрочная`.@@@@@@@@@@@@@
>>
end; //screen

end; //window

Panel pnlNalRegDc;
  Table NalRegDc;

handleevent

cmPick:
{

  case curfield of

    #SrBessrFld:
    {

      if not isValidAll(#nalregdc)
        inherited::handleevent(cmInsertRecord);

      var c: comp;
      if _getkau.GetCodeKau(cgiPick, cgKau_SrBessr, c) > 0
        _extattr.coSetAttrId(coNalregdc, nalregdc.nrec, ATTRNAM_NREC_NALREGDC_SRBESSR, c, ShowKau(cgKau_SrBessr, c));
      rereadrecord;

    }

    #RashNameFld:
    {

      if not isValidAll(#nalregdc)
        inherited::handleevent(cmInsertRecord);

      var c: comp;
      if _getkau.GetCodeKau(cgiPick, cgKau_RBP, c) > 0
        _extattr.coSetAttrId(coNalregdc, nalregdc.nrec, ATTRNAM_NREC_NALREGDC_RBP, c, ShowKau(cgKau_RBP, c));
      rereadrecord;

    }

    else inherited::handleevent(cmPick);

  end;

}

cmExprFieldChanged:
{

  case curfield of

    #KolLicFld:
    {

      if not isValidAll(#nalregdc)
        inherited::handleevent(cmInsertRecord);

      _extattr.doSetAttrId(coNalregdc, nalregdc.nrec, ATTRNAM_NREC_NALREGDC_KOLLIC, double(ExprFieldValue));
      rereadrecord;

    }

    else inherited::handleevent(cmExprFieldChanged);

  end;

}

end;  //handleevent

end;  //Panel pnlNalRegDc

end.
