#component "F_SoprHoz"

alter interface SHManager;

overload
  function ObjSHmanager.HaveBuhOborot(acSoprHoz, acPlansSch: comp; awMessage: word): boolean;
end;

var
  _qHaveBuhOborot: longint;
  _cSoprHoz: comp;

function ObjSHmanager.HaveBuhOborot(acSoprHoz, acPlansSch: comp; awMessage: word): boolean;
{
  if acPlansSch = 0
  {
    result := false;

    sqlBindParamByName(_qHaveBuhOborot, 'cSoprHoz', acSoprHoz);

    var cOborot: comp = 0;
    sqlBindCol(_qHaveBuhOborot, 1, cOborot);

    if sqlExecute(_qHaveBuhOborot) = tsOk
      result := sqlFetch(_qHaveBuhOborot) = tsOk;

    if result
      MessOnHaveOborot(acSoprHoz, acPlansSch, awMessage, 'бухгалтерские');
  }
  else
    result := inherited::HaveBuhOborot(acSoprHoz, acPlansSch, awMessage);
}

sql query qHaveBuhOborot =
select top 1 nrec
from oborot
where
    oborot.cSoprHoz = :cSoprHoz
and oborot.cPlansSch <> :cTehnPS
;

handleevent

  cmOnVipLoad:
  {
    case inherited::handleevent(cmOnVipLoad) of
      heAbort: Abort;
      heStop: Stop;
    end;
    _qHaveBuhOborot := sqlAllocStmt;
    sqlBindParamByName(_qHaveBuhOborot, 'cTehnPS', PLANSSCH_NREC_TEHN);
    sqlPrepare(_qHaveBuhOborot, qHaveBuhOborot);
  }

  cmOnVipUnload:
  {
    inherited::handleevent(cmOnVipUnload);
    sqlFreeStmt(_qHaveBuhOborot);
  }

end;

end.
