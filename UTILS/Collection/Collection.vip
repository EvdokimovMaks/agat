#include Iterator.vih
#include Collection.vih

#component "UTILS"

interface iCollection;

var
  _items: array [0..0] of ObjRef;
  _count: longint;
  _iteratorIndex: longint;

constructor init;
{
  _count := 0;
  result := true;
}

//#region implement oCollection

procedure Add(item: ObjRef);
{
  _count++;
  _items[_count-1] := item;
}

function Get(itemIndex: longint): ObjRef;
{
  if (itemIndex >= 0 or itemIndex < _count)
    result := _items[itemIndex]
  else
    result := NullRef;
}

function Find(item: ObjRef; var itemIndex: longint): boolean;
{
  result := false;
  var i: longint;
  for(i := 0; i < _count; i++)
  {
    if item = _items[i]
    {
      itemIndex := i;
      result := true;
      exit;
    }
  }
}

function RemoveAt(itemIndex: longint): boolean;
{
  if (itemIndex < _count)
  {
    var j: longint;
    for(j := itemIndex; j < _count - 1; j++)
    {
      _items[j] := _items[j+1];
    }
    _count--;
    result := true;
  }
  else
    result := false;
}

function Remove(item: ObjRef): boolean;
{
  var i: longint;
  if (Find(item, i))
  {
    result := RemoveAt(i);
  }
  else
    result := false;
}

function GetCount: longint;
{
  result := _count;
}

function GetIterator: oIterator;
{
  var iterator: iCollectionIterator;
  loadvipinterface(iterator);
  iterator.SetCollection(oCollection(self));
  result := oIterator(iterator);
}

//#endregion

//#region implement oIterator

function First: ObjRef;
{
  _iteratorIndex := 0;
  if (_count > 0)
    result := _items[_iteratorIndex]
  else
    result := NullRef;
}

function Next: ObjRef;
{
  result := NullRef;
  if HasNext
  {
    _iteratorIndex++;
    result := _items[_iteratorIndex]
  }
}

function HasNext: boolean;
{
  result := (_iteratorIndex < _count - 1)
}

//#endregion

end.
