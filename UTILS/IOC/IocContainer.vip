#include System.vih
#include Ioc.vih

#component "System"

interface IocContainer;

table struct tRegistry (
  objIfcName: string,
  key: string,
  vipIfcName: string
) with index (
  i01 = objIfcName + key
);

var
  _instances: IDictionary;
  _diManager: IDIManager;


create view
as select *
from tRegistry;

constructor Init;
{
  result := false;
  if not loadvipref(_instances,'system::Dictionary') exit;
  if not getvipref(_diManager,'system::DIManager') exit;
  result := true;
}

procedure Register(objInterfaceName: string; vipInterfaceName: string);
{
  RegisterWithKey(objInterfaceName, '', vipInterfaceName);
}

procedure RegisterWithKey(objInterfaceName: string; key: string; vipInterfaceName: string);
{
  var s: string; s := key;
  if getfirst tRegistry where ((objInterfaceName == tRegistry.objIfcName and s == tRegistry.key)) != tsOk
  {
    insert tRegistry set tRegistry.objIfcName := objInterfaceName,
                         tRegistry.key := s,
                         tRegistry.vipIfcName := vipInterfaceName;
  }
  else
    update current tRegistry set tRegistry.vipIfcName := vipInterfaceName;
}

function  GetInstance(objInterfaceName: string): IObject;
{
  result := GetInstanceWithKey(objInterfaceName, '');
}

function GetInstanceWithKey(objInterfaceName: string; key: string): IObject;
{
  var instance: IObject;
  instance := nullref;
  var instanceKey: string;
  instanceKey := objInterfaceName+'#'+key;
  if _instances.ContainsKey(instanceKey)
  {
    instance := _instances.ValueGet(instanceKey);
  }
  else
  {
    var s: string; s := key;
    if getfirst tRegistry where ((objinterfaceName == tRegistry.objIfcName and s == tRegistry.key)) = tsOk
    {
      if loadvipref(instance, tRegistry.vipIfcName)
      {
        _instances.AddKeyValue(instanceKey, instance);
        _diManager.InjectDependencies(instance, IIoCContainer(self));
      }
    }
  }
  result := instance;
}

end.
