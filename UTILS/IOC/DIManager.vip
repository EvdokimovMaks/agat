#include System.vih
#include Ioc.vih

#component "System"

interface DIManager;

var
  _injectors: IList;
  _checkedIfc: IDictionary;

constructor Init;
{
  result := false;
  if not loadvipref(_checkedIfc, 'system::Dictionary') exit;
  if not loadvipref(_injectors, 'system::List') exit;
  if LoadImplementationList('system::IDependencyInjector', 'SYSTEM::DI_')
  {
    var di: IDependencyInjector;
    var i, cnt: integer;
    cnt := GetImplementationCount;
    for( i := 0; i < cnt; i := i + 1 )
    {
      if (getvipref(di, GetImplementationName(i)))
        _injectors.Add(IObject(di));
    }
    UnLoadImplementationList;
  }
  result := true;
}

procedure InjectDependencies(obj: IObject; container: IIoCContainer);
{
  var objVipIfcName: string;
  objVipIfcName := VipName(obj);
  var ifcInjectors: IList;
  var enum: IEnumerator;
  if ( _checkedIfc.ContainsKey(objVipIfcName) )
  {
    ifcInjectors := IList(_checkedIfc.ValueGet(objVipIfcName));
    enum := ifcInjectors.GetEnumerator;
    while enum.MoveNext
      IDependencyInjector(enum.Current).Inject(obj, container);
  }
  else
  {
    if not loadvipref(ifcInjectors, 'system::List') exit;
    _checkedIfc.AddKeyValue(objVipIfcName, ifcInjectors);
    enum := _injectors.GetEnumerator;
    while enum.MoveNext
    {
      if IDependencyInjector(enum.Current).Inject(obj, container)
      {
        ifcInjectors.Add(enum.Current);
      }
    }
  }
}
end.
