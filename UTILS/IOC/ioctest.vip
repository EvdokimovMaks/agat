#include Ioc.vih
#component "system"
objinterface idata(IObject);
  function get: string;
end;

vipinterface data1 implements idata;
interface data1;
function get: string; { result := 'data1'; }
end.

vipinterface data2 implements idata;
interface data2;
function get: string; { result := 'data2'; }
end.

objinterface iSetData;
  procedure SetData(data: idata);
end;

objinterface imessenger(IObject);
  procedure ShowData;
end;

vipinterface messenger implements imessenger, isetdata;
interface messenger;
var
  _data: idata;
procedure SetData(data: idata);
{
  _data := data;
}
procedure ShowData;
{
  message(_data.get);
}
end.

vipinterface di_SetData implements idependencyinjector;
interface di_setdata;
function Inject(obj: IObject; container: IIoCContainer): boolean;
{
  var setdata: ISetData;
  _try
  {
    setdata := ISetData(obj);
    var data: IData;
    data := IData(container.GetInstance('system::IData'));
    setdata.SetData(data);
    result := true;
  }

  _except
    on ExObjIfcNoImpl : { result := false; }
}
end.


interface ioctest;

var container: system::IIoCContainer;

screen sc1;
buttons
  cmdook1;
<<
 <. ok1 .>
>>
end;

handleevent
cmdook1:
{
  var m: IMessenger;
  m := IMessenger(container.GetInstance('system::IMessenger'));
  m.ShowData;
}
cminit:
{
  if not getvipref(container, 'system::ioccontainer') exit;
  container.Register('system::IData', 'system::data2');
  container.Register('system::IMessenger', 'system::messenger');
}
end;
end.
