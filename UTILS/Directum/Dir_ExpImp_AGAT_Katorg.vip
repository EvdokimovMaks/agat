#include Dir_ExpImp.vih
#include Query.vih

#component "F_USERREPORT"

alter interface Dir_ExpImp_KATORG;

overload
  Function IDIR_ExpIMP.Export_Init(wpsDate:string; wpsTime:string; wpsNrec :string) : boolean ;
end;

table struct tOrg (nrec: comp) with index (i01 = nrec (unique));

sql query qKatorg =
select distinct katorg.nrec
from oborot o
join katorg on katorg.nrec = case when o.tblos[1] = 1 then o.kauos[1]
                                  when o.tblos[2] = 1 then o.kauos[2]
                                  when o.tblos[3] = 1 then o.kauos[3]
                                  when o.tblos[4] = 1 then o.kauos[4]
                                  when o.tblos[5] = 1 then o.kauos[5]
                                  when o.tblos[6] = 1 then o.kauos[6]
                                  else #comp(0)
                             end
where o.cplanssch = #comp(000100000000000Eh) and o.datob between #date(1,1,2014) and #date(31,12,2017)

union

select distinct katorg.nrec
from oborot o
join katorg on katorg.nrec = case when o.tblks[1] = 1 then o.kauks[1]
                                  when o.tblks[2] = 1 then o.kauks[2]
                                  when o.tblks[3] = 1 then o.kauks[3]
                                  when o.tblks[4] = 1 then o.kauks[4]
                                  when o.tblks[5] = 1 then o.kauks[5]
                                  when o.tblks[6] = 1 then o.kauks[6]
                                  else #comp(0)
                             end
where o.cplanssch = #comp(000100000000000Eh) and o.datob between #date(1,1,2014) and #date(31,12,2017)

union

select distinct katorg.nrec
from katsopr
join katorg on katorg.nrec = katsopr.corg
where katsopr.dsopr between #date(1,1,2014) and #date(31,12,2017)

union

select distinct katorg.nrec
from dogovor
join katorg on katorg.nrec = dogovor.corg
where dogovor.ddoc between #date(1,1,2014) and #date(31,12,2017)

union

select distinct katorg.nrec
from basedoc
join katorg on katorg.nrec = basedoc.corg
where basedoc.ddoc between #date(1,1,2014) and #date(31,12,2017)
;

create view
as select *
from tOrg, tOrg tOrg1
where ((katorg.nrec /== tOrg1.nrec));

Function IDIR_ExpIMP.Export_Init(wpsDate:string; wpsTime:string; wpsNrec :string) : boolean ;
{

  delete all tOrg;

  if (wpsNrec <> '' and longint(wpsNrec) > 0)
  {
    insert tOrg set tOrg.nrec := comp(wpsNrec);
  }
  else
  {

    delete all tOrg;
    sqlCopyInto(queryManager.createQuery(qKatorg).getResultSet, #tOrg, false);

  }

  result := inherited::Export_Init(wpsDate, wpsTime, wpsNrec);

}

end.

/*

vipinterface  Dir_ExpImp_AGAT_Katorg implements IDir_ExpImp;

interface Dir_ExpImp_AGAT_Katorg;

sql query qKatorg =
select distinct katorg.nrec
from buhschet s
join oborot o on o.scheto = s.schet and o.subossch = s.subsch
join katorg on case when o.tblos[1] = 1 then o.kauos[1]
                    when o.tblos[2] = 1 then o.kauos[2]
                    when o.tblos[3] = 1 then o.kauos[3]
                    when o.tblos[4] = 1 then o.kauos[4]
                    when o.tblos[5] = 1 then o.kauos[5]
                    when o.tblos[6] = 1 then o.kauos[6]
               end = katorg.nrec
where s.cplanssch = #comp(000100000000000Eh) and
      ( s.kodtable[1] = 1 or s.kodtable[2] = 1 or s.kodtable[3] = 1 or
        s.kodtable[4] = 1 or s.kodtable[5] = 1 or s.kodtable[6] = 1 )

union

select distinct katorg.nrec
from buhschet s
join oborot o on o.schetk = s.schet and o.subschk = s.subsch
join katorg on case when o.tblks[1] = 1 then o.kauks[1]
                    when o.tblks[2] = 1 then o.kauks[2]
                    when o.tblks[3] = 1 then o.kauks[3]
                    when o.tblks[4] = 1 then o.kauks[4]
                    when o.tblks[5] = 1 then o.kauks[5]
                    when o.tblks[6] = 1 then o.kauks[6]
               end = katorg.nrec
where s.cplanssch = #comp(000100000000000Eh) and
      ( s.kodtable[1] = 1 or s.kodtable[2] = 1 or s.kodtable[3] = 1 or
        s.kodtable[4] = 1 or s.kodtable[5] = 1 or s.kodtable[6] = 1 )
;


create view
var
  _m: longint;
as select *
from katorg
where foundmarker(_m, katorg.nrec);


//#region objinterface IDIR_ExpIMP


#doc
Установить запись в протокол, пустой параметр отключает запись
#end
Procedure SetLogFileNM(w :string);
{
  logstrtofile('d:\gal\vip\direxporg.log', w);
}


#doc
Вычислить произвольное выражение
#end
Function Expression_ ( w_express :string ) :string ;
{
  result := expression(w_express);
}


#doc
  Возвращает заголовок таблицы.
#end
function GetTableTitle: string;
{
  result := 'Организации, с которыми были взаиморасчеты за последние 3 года';
}


#doc
  Возвращает имя главной таблицы
#end
function GetTableName: string;
{
  result := 'KATORG';
}


#doc
  Возвращает имя следующей дочерней таблицы
#end
Function GetSlaveName(wnmslave :string) :string;
{
  wnmslave := wnmslave;
  result := '';
}


#doc
  Запускает инициализацию.
#end
Function Export_Init(wpsDate:string; wpsTime:string; wpsNrec :string) : boolean ;
{
  wpsDate := wpsDate;
  wpsTime := wpsTime;

  if _m = 0
    _m := initmarker('', sizeof(comp), 10, 100, false);
  clearmarker(_m);

  if (wpsNrec <> '' and longint(wpsNrec) > 0)
  {
    insertmarker(_m, comp(wpsNrec));
  }
  else
  {

    var rs: IResultSet;
    rs := queryManager.createQuery(qKatorg).getResultSet;

    if rs.getFirst = tsOk do {

      insertMarker(_m, comp(rs.row.valAt(1)));

    } while rs.getNext = tsOk;

  }

  result := true;
}


#doc
  Получить первую запись.
#end
Function Export_First :boolean ;
{
  result := getfirst katorg = tsOk;
}


#doc
  Получить следующую запись.
#end
Function Export_Next :boolean ;
{
  result := getnext katorg = tsOk;
}


#doc
  Получить первую запись дочерней таблицы.
#end
Function Export_SlaveFirst(w_slave :string) :boolean;
{
  w_slave := w_slave;
  result := false;
}


#doc
  Получить следующую запись дочерней таблицы.
#end
Function Export_SlaveNext :boolean;
{
  result := false;
}


#doc
  Инициализация импорта
#end
Function IMPORT_INIT(wnmfile:string) :boolean;
{
  wnmfile := wnmfile;
  result := true;
}

#doc
 сохранить запись
#end
Function UpdateCurrent(wnmtable:string) :boolean;
{
  wnmtable := wnmtable;
  result := true;
}


#doc
 Добавить чистую запись
#end
Function InsertCurrent(wnmtable:string) :boolean;
{
  wnmtable := wnmtable;
  result := true;
}


#doc
  Возвращает валидатор.
#end
function GetValidator: IDir_ExpImp;
{
  var Validator: IDir_ExpImp;
  LoadVipRef(Validator, 'Dir_ExpImp_AGAT_Katorg');
  result := Validator;
}

//#endregion

end. */
