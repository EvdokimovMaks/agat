#ifndef __system__
#define __system__

#component "System"

objinterface IObject;
end;

//#region Variant

objinterface IVariantEnumerator(IObject);
  function MoveNext: boolean;
  procedure Reset;
  function Current: variant;
end;

objinterface IVariantEnumerable(IObject);
  function GetEnumerator: IVariantEnumerator;
end;

objinterface IVariantCollection(IVariantEnumerable);
  function Add(value: variant): longint;
  procedure Remove(value: variant);
  procedure Clear;
  function Contains(value: variant): boolean;
  property Count: longint read;
end;

objinterface IVariantList(IVariantCollection);
  function ItemGet(index: longint): variant;
  procedure ItemSet(index: longint; value: variant);
  function IndexOf(value: variant): longint;
  procedure Insert(index: longint; value: variant);
  procedure RemoveAt(index: longint);
end;

//#endregion

//#region Object

objinterface IEnumerator(IObject);
  function MoveNext: boolean;
  procedure Reset;
  function Current: IObject;
end;

objinterface IEnumerable(IObject);
  function GetEnumerator: IEnumerator;
end;

objinterface ICollection(IEnumerable);
  function Add(value: IObject): longint;
  procedure Remove(value: IObject);
  procedure Clear;
  function Contains(value: IObject): boolean;
  property Count: longint read;
end;

objinterface IList(ICollection);
  function ItemGet(index: longint): IObject;
  procedure ItemSet(index: longint; value: IObject);
  function IndexOf(value: IObject): longint;
  procedure Insert(index: longint; value: IObject);
  procedure RemoveAt(index: longint);
end;

objinterface IKeyValuePair(IObject);
  property Key: variant;
  property Value: IObject;
end;

objinterface IDictionary(ICollection);
  procedure AddKeyValue(key: variant; value: IObject);
  function ContainsValue(value: IObject): boolean;
  function ContainsKey(key: variant): boolean;
  function RemoveItemWithKey(key: variant): boolean;
  function ValueGet(key: variant): IObject;
  function ValueSet(key: variant; value: IObject): boolean;
  property Keys: IVariantCollection read;
  property Values: ICollection read;
end;

objinterface IFactory;
  function CreateNew: IObject;
  function GetSingle: IObject;
end;

objinterface INotifyPropertyChanged;
  event procedure PropertyChanged(object: IObject; propertyName: string);
end;

const
  ACTION_ADD = 1;
  ACTION_REMOVE = 2;
  ACTION_REPLACE = 3;
  ACTION_RESET = 4;
end;

objinterface INotifyCollectionChangedEventArgs;
  property Action: byte read;
  property Items: IList read;
end;

objinterface INotifyCollectionChanged;
  event procedure CollectionChanged(collection: ICollection; args: INotifyCollectionChangedEventArgs);
end;

//#endregion

vipinterface VariantListEnumerator implements IVariantEnumerator;
public:
  constructor VariantListEnumerator(list: IVariantList);
end;

vipinterface VariantList implements IVariantList;
public:
  constructor Init;
end;

vipinterface VariantCollection implements IVariantList;
public:
  constructor Init;
  function  GetItem(index: longint): variant;
  procedure SetItem(index: longint; value: variant);
  procedure InsertItem(index: longint; value: variant);
  procedure RemoveItem(index: longint);
  procedure ClearItems;
end;

vipinterface ListEnumerator implements IEnumerator;
public:
  constructor ListEnumerator(list: IList);
end;

vipinterface List implements IList;
public:
  constructor Init;
end;

vipinterface Collection implements IList;
public:
  constructor Init;
  function  GetItem(index: longint): IObject;
  procedure SetItem(index: longint; value: IObject);
  procedure InsertItem(index: longint; value: IObject);
  procedure RemoveItem(index: longint);
  procedure ClearItems;
end;

vipinterface KeyValuePair implements IKeyValuePair;
public:
  constructor KeyValuePair(aKey: variant; aValue: IObject);
end;

vipinterface Dictionary implements IDictionary;
public:
  constructor Init;
end;

vipinterface NotifyCollectionChangedEventArgs implements INotifyCollectionChangedEventArgs;
public:
  constructor Init;
end;

vipinterface ObservableCollection (Collection) implements INotifyCollectionChanged, INotifyPropertyChanged;
public:
  constructor Init;
  procedure SetItem(index: longint; value: IObject);
  procedure InsertItem(index: longint; value: IObject);
  procedure RemoveItem(index: longint);
  procedure ClearItems;
end;

#end
