#include system.vih
#component "system"

objinterface IModelTest(IObject);
  property Name: string;
  property Qty: double;
end;
vipinterface ModelTest implements IModelTest, INotifyPropertyChanged;
interface ModelTest;
  var
    _name: string;
    _qty: double;

  procedure setname(value: string);
  {
    _name := value;
    PropertyChanged(IObject(self), 'Name');
  }

  procedure setqty(value: double);
  {
    _qty := value;
    PropertyChanged(IObject(self), 'Qty');
  }

  property Name: string read _name write setname(result);
  property Qty: double read _qty write setqty(result);
end.

interface observablecollectiontest;
table struct tview (
  name: string,
  qty: double,
  id: comp
) with index (
  i01 = name
);

var
  col: ObservableCollection new;

create view as select * from tview;

browse br1;
table tview;
fields
  tview.name 'name': protect;
  tview.qty 'qty': protect;
  tview.id 'id': protect;
end;

procedure AddModelTest(aName: string; aQty: double);
{
  var m: IModelTest;
  if not loadvipref(m, 'ModelTest') exit;
  m.Name := aName;
  m.qty := aqty;
  col.Add(m);
}

procedure OnCollectionChanged(collection: ICollection; args: INotifyCollectionChangedEventArgs);
{
  if collection != iCollection(col) exit;
  case args.Action of
    ACTION_ADD:
    {
      var enum: IEnumerator;
      enum := args.NewItems.GetEnumerator;
      var item: IModelTest;
      while enum.MoveNext
      {
        item := IModelTest(enum.Current);
        insert tview set tview.name := item.name, tview.qty := item.qty, tview.id := comp(item);
        var test: objref;
        test := tview.id;
      }
    }
    ACTION_REMOVE:
    {
    }
  end;
}

handleevent
  cminit:
  {
    bindevent(OnCollectionChanged, col.CollectionChanged);
    AddModelTest('name', 123);
  }
end;
end.
