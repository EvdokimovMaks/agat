#include System.vih

#component "System"

interface ObservableCollection;

procedure OnPropertyChanged(object: ObjRef; propertyName: string);
{
  PropertyChanged(object, propertyName);
}

function BindNotifyPropertyChanged(obj: ObjRef): boolean;
{
  var notifier: INotifyPropertyChanged;

  result := false;

  _try
  {
    notifier := INotifyPropertyChanged(obj);
  }

  _except
    on ExObjIfcNoImpl : exit;

  _finally
  {
    bindevent(OnPropertyChanged, notifier.PropertyChanged);
    result := true;
  }

}


function UnbindNotifyPropertyChanged(obj: ObjRef): boolean;
{
  var notifier: INotifyPropertyChanged;

  result := false;

  _try
  {
    notifier := INotifyPropertyChanged(obj);
  }

  _except
    on ExObjIfcNoImpl : exit;

  _finally
  {
    unbindevent(OnPropertyChanged, notifier.PropertyChanged);
    result := true;
  }
}

procedure SetItem(index: longint; value: ObjRef);
{

  if value != nullref
    BindNotifyPropertyChanged(value);

  var eventArgs: INotifyCollectionChangedEventArgs;
  if loadvipref(eventArgs, 'system::NotifyCollectionChangedEventArgs')
  {
    var item: ObjRef;
    item := _list.ItemGet(index);

    if (item != nullref)
    {
      UnbindNotifyPropertyChanged(item);
      eventArgs.Action := ACTION_REPLACE;
      eventArgs.olditems.Add(item);
    }
    else
    {
      eventArgs.Action := ACTION_ADD;
    }
    eventArgs.newitems.Add(value);
    CollectionChanged(ICollection(self), eventArgs);
  }

  inherited::SetItem(index, value);

}

procedure InsertItem(index: longint; value: ObjRef);
{
  if value != nullref
  {
    BindNotifyPropertyChanged(value);
    var eventArgs: INotifyCollectionChangedEventArgs;
    if loadvipref(eventArgs, 'system::NotifyCollectionChangedEventArgs')
    {
      eventArgs.Action := ACTION_ADD;
      eventArgs.newitems.Add(value);
      CollectionChanged(ICollection(self), eventArgs);
    }
  }
  inherited::insertItem(index, value);
}

procedure RemoveItem(index: longint);
{
  var item: ObjRef;
  item := _list.ItemGet(index);
  if item != nullref
  {
    var eventArgs: INotifyCollectionChangedEventArgs;
    if loadvipref(eventArgs, 'system::NotifyCollectionChangedEventArgs')
    {
      eventArgs.Action := ACTION_REMOVE;
      eventArgs.olditems.Add(item);
      CollectionChanged(ICollection(self), eventArgs);
    }
  }
  UnbindNotifyPropertyChanged(item);
  inherited::RemoveItem(index);
}

procedure ClearItems;
{
  var eventArgs: INotifyCollectionChangedEventArgs;
  if loadvipref(eventArgs, 'system::NotifyCollectionChangedEventArgs')
  {
    eventArgs.Action := ACTION_RESET;
    CollectionChanged(ICollection(self), eventArgs);
  }
  var enum: IEnumerator;
  enum := GetEnumerator;
  while (enum.MoveNext)
    UnbindNotifyPropertyChanged(enum.Current);
  inherited::ClearItems;
}

//event procedure CollectionChanged(collection: ICollection; args: INotifyCollectionChangedEventArgs);

end.
