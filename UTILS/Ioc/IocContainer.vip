#include Ioc.vih
#include Factory.vih

#component "UTILS"

interface iIocContainer;

table struct tDict (
  key: string,
  value: string
) with index (
  i01 = key (unique)
);

table struct tFactories (
  objIfcName: string,
  factoryIfcName: string
) with index (
  i01 = objIfcName
);

var
  _dependencyResolverManager: iDependencyResolverManager;

create view
as select *
from tDict, tFactories;

procedure LoadObjectFactoryList;
{
  if LoadImplementationList('UTILS::oFactory', 'UTILS::FACTORY_')
  {
    var f: oFactory;
    var i, cnt: integer;
    cnt := GetImplementationCount;
    for( i := 0; i < cnt; i := i + 1 )
    {
      clearbuffer(#tFactories);
      tFactories.factoryIfcName := GetImplementationName(i);
      if (getvipref(f, tFactories.factoryIfcName))
      {
        tFactories.objIfcName := f.ObjInterfaceName;
        insert current tFactories;
      }
    }
    UnLoadImplementationList;
  }
}

procedure oIocContainer.Register(objInterfaceName: string; vipInterfaceName: string);
{
  var isNewIfc: boolean;
  isNewIfc := false;
  if getfirst fastfirstrow tDict where (( objInterfaceName == tDict.key )) != tsOk
  {
    isNewIfc := true;
    clearbuffer(#tDict);
    tDict.key := objInterfaceName;
  }
  tDict.value := vipInterfaceName;
  if isNewIfc
    insert current tDict
  else
    update current tDict;
}

function  Resolve(objInterfaceName: string; mode: byte = CreateObjectMode_Single): objRef;
{
  result := nullref;
  if ( recordsintable(#tfactories) = 0 ) LoadObjectFactoryList;
  if getfirst fastfirstrow tDict where (( objInterfaceName == tDict.key )) = tsOk
  {
    if getfirst fastfirstrow tFactories where ((objInterfaceName == tFactories.objIfcName)) = tsOk
    {
      var f: oFactory;
      if loadvipref(f, tFactories.factoryIfcName)
      {
        var obj: objRef;
        obj := f.CreateObject(tDict.value, mode);
        _dependencyResolverManager.ResolveDependencies(obj, oIocContainer(self));
        result := obj;
      }
    }
  }
}

end.
