#include utest.vih
#include LogService.vih
#include QueryStr.vih
#include Query.vih

#component "TEST"

vipinterface TEST_QueryStrBase implements oUTest, oLogServiceSet;
interface TEST_QueryStrBase;

  var
    _logService: oLogService;

  procedure SetLogService(logService: oLogService); { _logService := logService; }

  function GetDescription: string; { result := 'utils/tests/test_QueryStrBase.vip TEST_QueryStrBase'; }

  function Test: boolean;
  {
    sqlCreateTmpTable('table tt (f1: string, f2: string);', ctmNormal);

    var sb: iQueryStrBase new;
    sb.qInsert := oQueryStr(new(iQueryStrCommon, QueryStrCommon('tt (f1, f2)')));
    sb.qSelect := oQueryStr(new(iQueryStrCommon, QueryStrCommon('katmc.name, coalesce(groupmc.name,'''')')));
    sb.qFrom   := oQueryStr(new(iQueryStrCommon, QueryStrCommon('katmc')));
    sb.qJoin   := oQueryStr(new(iQueryStrCommon, QueryStrCommon('left join groupmc on katmc.cgroupmc = groupmc.nrec')));
    sb.qWhere  := oQueryStr(new(iQueryStrCommon, QueryStrCommon('katmc.name like ''Ÿ%''')));

    var l: longint;
    sqlfreestr(l);
    sb.Create(l);

    var q: iQuery;
    q := queryManager.createQuery(l);

    if q.execute.errorCode != tsOk
    {
      _logService.Log('q.errorcode = '+q.errorCode);
      result := false;
    }
    else
    {
      _logService.Log('q.RowCount = '+q.RowCount);
      result := true;
    }

    sqlDropTmpTable('test');
  }
end.
