#include utest.vih
#include LogService.vih
#include QueryStr.vih
#include Query.vih

#component "TEST"

vipinterface test_QueryStrDecoratorCommon implements oUTest, oLogServiceSet;
interface test_QueryStrDecoratorCommon;

  var
    _logService: oLogService;

  procedure oLogServiceSet.SetLogService(logService: oLogService); { _logService := logService; }

  function GetDescription: string; { result := 'utils/tests/test_QueryStrDecoratorCommon.vip test_QueryStrDecoratorCommon'; }

  function Test: boolean;
  {
    var s, s1, s2: oQueryStr;

    s := oQueryStr(new(iQueryStrCommon, QueryStrCommon('select top 1 name from katmc')));

    var ls1: longint;
    sqlfreestr(ls1);
    sqladdstr(ls1,'union all select top 1 name from katusl');
    s1 := oQueryStr(new(iQueryStrDecoratorCommon, QueryStrDecoratorCommon(s, ls1)));

    var ls2: longint;
    sqlfreestr(ls2);
    sqladdstr(ls2,'union all select top 1 name from katorg');
    s2 := oQueryStr(new(iQueryStrDecoratorCommon, QueryStrDecoratorCommon(s1, ls2)));

    var stmt, l: longint;
    stmt := sqlAllocStmt;

    sqlFreeStr(l);
    s2.Create(l);
    sqlPrepare(stmt, l);

    var f1: string;
    sqlBindCol(stmt, 1, f1);

    var err: integer;
    err := sqlExecute(stmt);

    if err != tsOk
    {
      result := false;
      _logService.Log('error code = '+err);
    }
    else
    {
      var cnt: integer; cnt := 0;
      while sqlFetch(stmt) = tsOk
      {
        cnt++;
        _logService.Log(f1);
      }
      result := cnt = 3;
    }

    sqlfreestmt(stmt);

    sqlDropTmpTable('test');
  }
end.
