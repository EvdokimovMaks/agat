/*************************************************************************************************\
* Наименование:  Универсальные коллекции                                                          *
* Контур/Модуль:                                                                                  *
* Примечание:    Объявление классов для создания универсальных коллекций, таких как списки,       *
*                словари.                                                                         *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#001          |18/11/19|Сопов Д.Е.               |Галактика Сибирь                 *
\*************************************************************************************************/

#ifndef __DSQL_Collections_VIH__
#define __DSQL_Collections_VIH__

#doc
Интерфейс DSQL_IObject.
Представляет абстрактный объект.
#end
objinterface DSQL_IObject;
end;

//#region Variant

#doc
Интерфейс DSQL_IVariantEnumerator.
Поддерживает простой перебор по коллекции значений variant.
#end
objinterface DSQL_IVariantEnumerator(DSQL_IObject);
  #doc
  Перемещает перечислитель к следующему элементу коллекции.
  #end
  function MoveNext: boolean;

  #doc
  Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
  #end
  procedure Reset;

  #doc
  Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.
  #end
  function Current: variant;
end;

#doc
Интерфейс DSQL_IVariantEnumerable.
Предоставляет перечислитель, который поддерживает простой перебор элементов коллекции значений variant.
#end
objinterface DSQL_IVariantEnumerable(DSQL_IObject);
  #doc
  Возвращает перечислитель, который осуществляет итерацию по коллекции.
  #end
  function GetEnumerator: DSQL_IVariantEnumerator;

  #doc
  Возвращает значение первого элемента коллекции
  #end
  function First: variant;

  #doc
  Возвращает значение последнего элемента коллекции
  #end
  function Last: variant;
end;

#doc
Интерфейс DSQL_IVariantCollection.
Определяет методы для управления коллекциями значений variant.
#end
objinterface DSQL_IVariantCollection(DSQL_IVariantEnumerable);
  #doc
  Добавляет элемент в коллекцию.
  Возвращает количество элементов коллекции после добавления.
  #end
  function Add(value: variant): longint;

  #doc
  Удаляет элемент из коллекции, если он есть в коллекции.
  #end
  procedure Remove(value: variant);

  #doc
  Очищает коллекцию.
  #end
  procedure Clear;

  #doc
  Определяет, входит ли элемент в коллекцию
  #end
  function Contains(value: variant): boolean;

  #doc
  Количество элементов коллекции.
  #end
  property lCount: longint read;
end;

#doc
Интерфейс DSQL_IVariantList.
Представляет список значений variant, доступных по индексу.
#end
objinterface DSQL_IVariantList(DSQL_IVariantCollection);
  #doc
  Возвращает элемент по указанному индексу.
  #end
  function ItemGet(index: longint): variant;

  #doc
  Задает элемент по указанному индексу.
  #end
  procedure ItemSet(index: longint; value: variant);

  #doc
  Осуществляет поиск указанного значения и возвращает
  отсчитываемый от нуля индекс первого вхождения, найденного в пределах всего списка.
  #end
  function IndexOf(value: variant): longint;

  #doc
  Вставляет значение в список по указанному индексу.
  #end
  procedure Insert(index: longint; value: variant);

  #doc
  Удаляет элемент списка по указанному индексу.
  #end
  procedure RemoveAt(index: longint);
end;

//#endregion

//#region Object
#doc
Интерфейс DSQL_IEnumerator.
Поддерживает простой перебор по коллекции объектов.
#end
objinterface DSQL_IEnumerator(DSQL_IObject);
  #doc
  Перемещает перечислитель к следующему элементу коллекции.
  #end
  function MoveNext: boolean;

  #doc
  Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
  #end
  procedure Reset;

  #doc
  Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.
  #end
  function Current: ObjRef;
end;

#doc
Интерфейс DSQL_IEnumerable.
Предоставляет перечислитель, который поддерживает простой перебор элементов коллекции объектов.
#end
objinterface DSQL_IEnumerable(DSQL_IObject);
  #doc
  Возвращает перечислитель, который осуществляет итерацию по коллекции.
  #end
  function GetEnumerator: DSQL_IEnumerator;

  #doc
  Возвращает ссылку на первый элемент коллекции.
  #end
  function First: ObjRef;

  #doc
  Возвращает ссылку на последний элемент коллекции.
  #end
  function Last: ObjRef;
end;

#doc
Интерфейс DSQL_ICollection.
Определяет методы для управления коллекциями объектов.
#end
objinterface DSQL_ICollection(DSQL_IEnumerable);
  #doc
  Добавляет элемент в коллекцию.
  Возвращает количество элементов коллекции после добавления.
  #end
  function Add(value: ObjRef): longint;

  #doc
  Удаляет элемент из коллекции, если он есть в коллекции.
  #end
  procedure Remove(value: ObjRef);

  #doc
  Очищает коллекцию.
  #end
  procedure Clear;

  #doc
  Определяет, входит ли элемент в коллекцию.
  #end
  function Contains(value: ObjRef): boolean;

  #doc
  Количество элементов коллекции.
  #end
  property lCount: longint read;
end;

#doc
Интерфейс DSQL_IList.
Представляет список объектов, доступных по индексу.
#end
objinterface DSQL_IList(DSQL_ICollection);
  #doc
  Возвращает элемент по указанному индексу.
  #end
  function ItemGet(index: longint): ObjRef;

  #doc
  Задает элемент по указанному индексу.
  #end
  procedure ItemSet(index: longint; value: ObjRef);

  #doc
  Осуществляет поиск указанного объекта и возвращает
  отсчитываемый от нуля индекс первого вхождения, найденного в пределах всего списка.
  #end
  function IndexOf(value: ObjRef): longint;

  #doc
  Вставляет значение в список по указанному индексу.
  #end
  procedure Insert(index: longint; value: ObjRef);

  #doc
  Удаляет элемент списка по указанному индексу.
  #end
  procedure RemoveAt(index: longint);
end;

#doc
Интерфейс DSQL_IKeyValuePair.
Предоставляет пару Ключ - Значение.
#end
objinterface DSQL_IKeyValuePair(DSQL_IObject);
  #doc
  Ключ типа variant.
  #end
  property Key: variant;

  #doc
  Значение - ссылка на объект.
  #end
  property Value: ObjRef;
end;

#doc
<brief>Интерфейс DSQL_IDictionary.
Представляет "словарь" - коллекцию ключей и значений.
Ключ - значение типа variant.
Значение - ссылка на объект.</brief>
Типом элементов словаря как коллекции является DSQL_IKeyValuePair,
поэтому методы словаря, наследуемые из DSQL_ICollection работают с DSQL_IKeyValuePair.
Перечислитель словаря возвращает элементы типа DSQL_IKeyValuePair.
#end
objinterface DSQL_IDictionary(DSQL_ICollection);
  #doc
  Добавляет в словарь пару ключ - значение.
  Проверок на уникальность ключа не выполняется.
  Возвращает ссылку на себя, чтобы при использовании можно было реализовать method chaining.
  #end
  function AddKeyValue(key: variant; value: ObjRef): DSQL_IDictionary;

  #doc
  Определяет, содержит ли коллекция словаря "ключ - значение" указанное значение.
  #end
  function ContainsValue(value: ObjRef): boolean;

  #doc
  Определяет, содержится ли указанный ключ в словаре.
  #end
  function ContainsKey(key: variant): boolean;

  #doc
  Удаляет значение с указанным ключом из словаря.
  #end
  function RemoveItemWithKey(key: variant): boolean;

  #doc
  Возвращает значение по указанному ключу.
  #end
  function ValueGet(key: variant): ObjRef;

  #doc
  Устанавливает значение для указанного существующего ключа.
  Если пары с указанным ключом в словаре нет - метод возвращает False.
  #end
  function ValueSet(key: variant; value: ObjRef): boolean;

  #doc
  Коллекция ключей словаря.
  #end
  property Keys: DSQL_IVariantCollection read;

  #doc
  Коллекция значений словаря.
  #end
  property Values: DSQL_ICollection read;
end;

//#endregion

#doc
Класс реализующий перечислитель для списка значений variant.
#end
vipinterface DSQL_VariantListEnumerator implements DSQL_IVariantEnumerator Licensed(Free);
public:
  constructor VariantListEnumerator(list: DSQL_IVariantList);
end;

#doc
Класс реализующий список значений variant.
#end
vipinterface DSQL_VariantList implements DSQL_IVariantList Licensed(Free);
public:
  constructor Init;
end;

#doc
Класс реализующий перечислитель для списка объектов.
#end
vipinterface DSQL_ListEnumerator implements DSQL_IEnumerator Licensed(Free);
public:
  constructor ListEnumerator(list: DSQL_IList);
end;

#doc
Класс реализующий список объектов.
#end
vipinterface DSQL_List implements DSQL_IList Licensed(Free);
public:
  constructor Init;
end;

#doc
Класс реализующий пару ключ - значение.
#end
vipinterface DSQL_KeyValuePair implements DSQL_IKeyValuePair Licensed(Free);
public:
  constructor KeyValuePair(aKey: variant; aValue: ObjRef);
end;

#doc
Класс реализующий словарь.
#end
vipinterface DSQL_Dictionary implements DSQL_IDictionary Licensed(Free);
public:
  constructor Init;
end;

#end
