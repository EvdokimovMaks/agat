/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 2000 корпорация ГАЛАКТИКА                         ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Бухгалтерский контур                                      ║
 ║ Версия        : 6.00                                                      ║
 ║ Назначение    : Каталог вексельных соглашений (фильтры и сортировки)      ║
 ║ Ответственный : Какареко Сергей Александрович                             ║
 ║ Параметры     :                                                           ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/
// -- DateBound_Active -----------------------------------------------
// Функция определения активности ограничений по дате на документы
// -------------------------------------------------------------------
Function DateBound_Active : boolean;
  {
  DateBound_Active := true;

  if ( BoundActive( tbByDatSost ) ) { Exit; }

  DateBound_Active := false;
  }

// -- KlassBound_Active -----------------------------------------------
// Функция определения активности ограничений по внешней классификации
// -------------------------------------------------------------------
Function KlassBound_Active : boolean;
  {
  KlassBound_Active := true;

  if ( BoundActive( tbbyKlass  ) ) { Exit; }
  if ( BoundActive( tbbyKlass1 ) ) { Exit; }
  if ( BoundActive( tbbyKlass2 ) ) { Exit; }
  if ( BoundActive( tbbyKlass3 ) ) { Exit; }
  if ( BoundActive( tbbyKlass4 ) ) { Exit; }
  if ( BoundActive( tbbyKlass5 ) ) { Exit; }
  if ( BoundActive( tbbyKlass6 ) ) { Exit; }

  KlassBound_Active := false;
  }

// -- Bound_Active ---------------------------------------------------
// Функция определения активности ограничений (фильтров) на документы
// -------------------------------------------------------------------
Function Bound_Active : boolean;
  {
  Bound_Active := true;

  if ( DateBound_Active()  ) { Exit; }
  if ( KlassBound_Active() ) { Exit; }

  if ( BoundActive( tbByCVal      ) ) { Exit; }
  if ( BoundActive( tbByCOtv      ) ) { Exit; }
  if ( BoundActive( tbByCSoglStat ) ) { Exit; }

  Bound_Active := false;
  }

// -- SetFlt -----------------------------------------------------
// Установка фильтров
// ---------------------------------------------------------------
procedure SetFlt;
  {
  // по дате
  if ( fltDatSostEnd <> date(0,0,0) )
    { if ( not BoundActive( tbByDatSost ) )  AddBounds( tbByDatSost ); }
  else
    { if (     BoundActive( tbByDatSost ) )  SubBounds( tbByDatSost );  }

  // по валюте
  if ( fltValFlag = 1 )
    { if ( not BoundActive( tbByCVal ) )  AddBounds( tbByCVal ); }
  else
    { if (     BoundActive( tbByCVal ) )  SubBounds( tbByCVal );  }

  // по ответственному (куратору)
  if ( fltCOtv != 0 )
    { if ( not BoundActive( tbByCOtv ) )  AddBounds( tbByCOtv ); }
  else
    { if (     BoundActive( tbByCOtv ) )  SubBounds( tbByCOtv );  }

  // по статусу
  if ( fltCSoglStat != 0 )
    { if ( not BoundActive( tbByCSoglStat ) )  AddBounds( tbByCSoglStat ); }
  else
    { if (     BoundActive( tbByCSoglStat ) )  SubBounds( tbByCSoglStat );  }

  // по внешней классификации
  if ( wFilKlass != 0 )
    { if ( not BoundActive( tbByKlass ) )   AddBounds( tbByKlass ); }
  else
    { if (     BoundActive( tbByKlass ) )   SubBounds( tbByKlass ); }

  if ( cFilKlass1 != 0 )
    { if ( not BoundActive( tbByKlass1 ) )   AddBounds( tbByKlass1 ); }
  else
    { if (     BoundActive( tbByKlass1 ) )   SubBounds( tbByKlass1 ); }
  if ( cFilKlass2 != 0 )
    { if ( not BoundActive( tbByKlass2 ) )   AddBounds( tbByKlass2 ); }
  else
    { if (     BoundActive( tbByKlass2 ) )   SubBounds( tbByKlass2 ); }
  if ( cFilKlass3 != 0 )
    { if ( not BoundActive( tbByKlass3 ) )   AddBounds( tbByKlass3 ); }
  else
    { if (     BoundActive( tbByKlass3 ) )   SubBounds( tbByKlass3 ); }
  if ( cFilKlass4 != 0 )
    { if ( not BoundActive( tbByKlass4 ) )   AddBounds( tbByKlass4 ); }
  else
    { if (     BoundActive( tbByKlass4 ) )   SubBounds( tbByKlass4 ); }
  if ( cFilKlass5 != 0 )
    { if ( not BoundActive( tbByKlass5 ) )   AddBounds( tbByKlass5 ); }
  else
    { if (     BoundActive( tbByKlass5 ) )   SubBounds( tbByKlass5 ); }
  if ( cFilKlass6 != 0 )
    { if ( not BoundActive( tbByKlass6 ) )   AddBounds( tbByKlass6 ); }
  else
    { if (     BoundActive( tbByKlass6 ) )   SubBounds( tbByKlass6 ); }

  }

procedure UnsetFlt;
  {
  if ( BoundActive( tbByDatSost   ) )    SubBounds( tbByDatSost   );
  if ( BoundActive( tbByCVal      ) )    SubBounds( tbByCVal      );
  if ( BoundActive( tbByCOtv      ) )    SubBounds( tbByCOtv      );
  if ( BoundActive( tbByCSoglStat ) )    SubBounds( tbByCSoglStat );

  if ( BoundActive( tbByKlass     ) )    SubBounds( tbByKlass     );
  if ( BoundActive( tbByKlass1    ) )    SubBounds( tbByKlass1    );
  if ( BoundActive( tbByKlass2    ) )    SubBounds( tbByKlass2    );
  if ( BoundActive( tbByKlass3    ) )    SubBounds( tbByKlass3    );
  if ( BoundActive( tbByKlass4    ) )    SubBounds( tbByKlass4    );
  if ( BoundActive( tbByKlass5    ) )    SubBounds( tbByKlass5    );
  if ( BoundActive( tbByKlass6    ) )    SubBounds( tbByKlass6    );
  }

procedure ClearDateFlt;
  {
  fltDatSostSt  := date(0,0,0);
  fltDatSostEnd := date(0,0,0);

  SetFlt();
  }

procedure ClearKlassFlt;
  {
  wFilKlass  := 0;
  cFilKlass1 := 0;
  cFilKlass2 := 0;
  cFilKlass3 := 0;
  cFilKlass4 := 0;
  cFilKlass5 := 0;
  cFilKlass6 := 0;

  wFilKlass1 := 0;
  wFilKlass2 := 0;
  wFilKlass3 := 0;
  wFilKlass4 := 0;
  wFilKlass5 := 0;
  wFilKlass6 := 0;

  FilKlass   := '';
  FilKlass1  := '';
  FilKlass2  := '';
  FilKlass3  := '';
  FilKlass4  := '';
  FilKlass5  := '';
  FilKlass6  := '';

  SetFlt();
  }

procedure ClearFlt;
  {
  fltDatSostSt  := date(0,0,0);
  fltDatSostEnd := date(0,0,0);

  fltValFlag   := 0;
  fltCVal      := 0;
  fltCOtv      := 0;
  fltCSoglStat := 0;

  wFilKlass    := 0;
  cFilKlass1   := 0;
  cFilKlass2   := 0;
  cFilKlass3   := 0;
  cFilKlass4   := 0;
  cFilKlass5   := 0;
  cFilKlass6   := 0;

  wFilKlass1   := 0;
  wFilKlass2   := 0;
  wFilKlass3   := 0;
  wFilKlass4   := 0;
  wFilKlass5   := 0;
  wFilKlass6   := 0;

  fltCValName      := '';
  fltCOtvName      := '';
  fltCSoglStatName := '';

  FilKlass       := '';
  FilKlass1      := '';
  FilKlass2      := '';
  FilKlass3      := '';
  FilKlass4      := '';
  FilKlass5      := '';
  FilKlass6      := '';

  SetFlt();
  }

// -------------------------------------------------------------------
//                             ФИЛЬТРЫ
// -------------------------------------------------------------------
Window wiFiltrVnKlass 'Установка ограничений по внешней классификации' (,hcVekslFiltrExClass,) EscClose, Gray;
Show at (4,10,74,17);
Panel pFiltrVnKlass table veksl;
Screen scrFiltrVnKlass;
fields
  FilKlass  ('Внешняя классификация',,sci13Esc) : protect,PickButton;
  FilKlass1 ('Внешняя классификация',,sci13Esc) : protect,PickButton;
  FilKlass2 ('Внешняя классификация',,sci13Esc) : protect,PickButton;
  FilKlass3 ('Внешняя классификация',,sci13Esc) : protect,PickButton;
  FilKlass4 ('Внешняя классификация',,sci13Esc) : protect,PickButton;
  FilKlass5 ('Внешняя классификация',,sci13Esc) : protect,PickButton;
  FilKlass6 ('Внешняя классификация',,sci13Esc) : protect,PickButton;
<<
 Наименование классификатора .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Значение классификатора-(1) .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Значение классификатора-(2) .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Значение классификатора-(3) .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Значение классификатора-(4) .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Значение классификатора-(5) .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Значение классификатора-(6) .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // screen scrFiltrVnKlass

HandleEvent
cmPick :
  {
  var wTemp : word;
  case CurField of
    #FilKlass :
      if RunInterface(GetExClassifier,word(coSoglVeks),wFilKlass) = cmDefault
        {
        if ( GetFirst ExClassName where
                      (( word(coSoglVeks) == ExClassName.wtable and
                         word(wFilKlass)  == ExClassName.ClassCode
                      )) = tsOk)
          set FilKlass := ExClassName.Name;
        }
    #FilKlass1 :
      if RunInterface(PickExClassifier,word(coSoglVeks),cFilKlass1,wTemp) = cmDefault
        {
        if (GetFirst ExClassSeg where (( cFilKlass1 == ExClassSeg.Nrec)) = tsOk)
          {
          set FilKlass1  := ExClassSeg.Name;
          set wFilKlass1 := ExClassSeg.ClassCode;
          }
        }
    #FilKlass2 :
      if RunInterface(PickExClassifier,word(coSoglVeks),cFilKlass2,wTemp) = cmDefault
        {
        if (GetFirst ExClassSeg where (( cFilKlass2 == ExClassSeg.Nrec)) = tsOk)
          {
          set FilKlass2  := ExClassSeg.Name;
          set wFilKlass2 := ExClassSeg.ClassCode;
          }
        }
    #FilKlass3 :
      if RunInterface(PickExClassifier,word(coSoglVeks),cFilKlass3,wTemp) = cmDefault
        {
        if (GetFirst ExClassSeg where (( cFilKlass3 == ExClassSeg.Nrec)) = tsOk)
          {
          set FilKlass3  := ExClassSeg.Name;
          set wFilKlass3 := ExClassSeg.ClassCode;
          }
        }
    #FilKlass4 :
      if RunInterface(PickExClassifier,word(coSoglVeks),cFilKlass4,wTemp) = cmDefault
        {
        if (GetFirst ExClassSeg where (( cFilKlass4 == ExClassSeg.Nrec)) = tsOk)
          {
          set FilKlass4  := ExClassSeg.Name;
          set wFilKlass4 := ExClassSeg.ClassCode;
          }
        }
    #FilKlass5 :
      if RunInterface(PickExClassifier,word(coSoglVeks),cFilKlass5,wTemp) = cmDefault
        {
        if (GetFirst ExClassSeg where (( cFilKlass5 == ExClassSeg.Nrec)) = tsOk)
          {
          set FilKlass5  := ExClassSeg.Name;
          set wFilKlass5 := ExClassSeg.ClassCode;
          }
        }
    #FilKlass6 :
      if RunInterface(PickExClassifier,word(coSoglVeks),cFilKlass6,wTemp) = cmDefault
        {
        if (GetFirst ExClassSeg where (( cFilKlass6 == ExClassSeg.Nrec)) = tsOk)
          {
          set FilKlass6  := ExClassSeg.Name;
          set wFilKlass6 := ExClassSeg.ClassCode;
          }
        }
  end; // case
  }

cmDelOnProtect :
  case CurField of
    #FilKlass  : { set wFilKlass := 0;
                   set  FilKlass := '';
                 }
    #FilKlass1 : { set cFilKlass1 := 0;
                   set wFilKlass1 := 0;
                   set  FilKlass1 := '';
                 }
    #FilKlass2 : { set cFilKlass2 := 0;
                   set wFilKlass2 := 0;
                   set  FilKlass2 := '';
                 }
    #FilKlass3 : { set cFilKlass3 := 0;
                   set wFilKlass3 := 0;
                   set  FilKlass3 := '';
                 }
    #FilKlass4 : { set cFilKlass4 := 0;
                   set wFilKlass4 := 0;
                   set  FilKlass4 := '';
                 }
    #FilKlass5 : { set cFilKlass5 := 0;
                   set wFilKlass5 := 0;
                   set  FilKlass5 := '';
                 }
    #FilKlass6 : { set cFilKlass6 := 0;
                   set wFilKlass6 := 0;
                   set  FilKlass6 := '';
                 }
  end; // case
end; // handleevent panel pFiltrVnKlass

end; // panel pFiltrVnKlass
end; // window wiFiltrVnKlass


// ============================================================================

Window wiFiltrSogl 'Установка ограничений' (,hcVekslSoglVeksFiltr,) escclose, Gray;
 Show at (8,7,72,18);

Panel pFiltrSogl table veksl;

screen scFiltrSogl ('',,sci13Esc); // NoTableNavigation;
 Fields
  fltDatSostSt     ('Период составления документа')                           : noProtect;
  fltDatSostEnd    ('Период составления документа')                           : noProtect;
//--------------------------------------------------------
  fltCOtvName      ('Ответственный по вексельному соглашению')                : Protect, PickButton;
  fltCSoglStatName ('Статус вексельного соглашения')                          : Protect, PickButton;
//--------------------------------------------------------
  fltValFlag       ('Установка ограничений по валюте вексельного соглашения',,sci1Esc) : NoProtect;
  fltCValName      ('Валюта вексельного соглашения')                          : Protect, PickButton;
 buttons
  cmOk,default,,'Ввод ограничений',,sci1Esc;
  cmCancel,,,'Выход',,sci1Esc;
  cmVnKlass,,,'Ограничения по внешней классификации',hcVekslFiltrExClass,sci1Esc;

<<

 Дата составления   с .@@@@@@@@@@@@    по .@@@@@@@@@@@@

 Ответственный .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Статус        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  [.] Валюта`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


 <.~П~родолжить.>   <. ~О~тмена .>   <.Внешняя классификация.>

>>
end; // screen

HandleEvent  // panel
cmPick:
  {
  case ( CurField ) of
   #fltCOtvName      :
     {
     if ( RunInterface('GetPers',fltCOtv) = cmDefault )
       {
       if ( GetFirst PersonsS where (( fltCOtv == PersonsS.NRec )) = tsOk )
         {
         set fltCOtvName := PersonsS.FIO;
         }
       }
     }

   #fltCSoglStatName :
     {
     if ( RunInterface('KatKlass',word(200+KatTipDk),word(0),fltCSoglStat,word(0), true, comp(0)) = cmDefault )
       {
       if ( GetFirst KatKlassS where (( fltCSoglStat == KatKlassS.NRec )) = tsOk )
         {
         set fltCSoglStatName := KatKlassS.Name;
         }
       }
     }

   #fltCValName      :
   {
   if RunInterface('GetValKod',fltCVal) = cmDefault
     if ( GetFirst KlValS where (( fltCVal == KlValS.NRec )) = tsOk )
       {
       set fltCValName := KlValS.Dollar;
       }
  }
  end; // case
  }

cmCheckField:
  {
  case CurField of
   #fltValFlag:
     {
     if ( fltCVal = 0 )
       {
       if ( fltValFlag = 0 )
         set fltCValName := '';
       else
         set fltCValName := sGetTune('NDE.NAMERUBL');
       }
     }
  end; // case
  }

cmDelOnProtect :
  {
  case CurField of
    #fltCOtvName      : { fltCOtv      := 0; set fltCOtvName      := '' };
    #fltCSoglStatName : { fltCSoglStat := 0; set fltCSoglStatName := '' };
    #fltCValName      :
      {
      fltCVal := 0;
      if ( fltValFlag = 1 )
        set fltCValName := sGetTune('NDE.NAMERUBL');
      else
        set fltCValName := '';
      };
  end;
  }

End; // HandleEvent
End; // Panel

HandleEvent

cmInit:
  {
  UnsetFlt();

  if ( fltCVal = 0 )
    {
    if ( fltValFlag = 1 )
      set fltCValName := sGetTune('NDE.NAMERUBL');
    else
      set fltCValName := '';
    }
  }


cmOk :
  {
  PushPos(#SoglVeks);
  SetFlt();
  if ( GetFirst SoglVeks != tsOk )
    {
    Message(''#3'Нет документов,'#13''+
            ''#3'удовлетворяющих заданному условию.',Information + OkButton);
    UnsetFlt();
    PopPos(#SoglVeks);
    Exit;
    }
  else
    {
    PopPos(#SoglVeks);
    if ( GetPrev SoglVeks = tsOk )
      { if ( GetNext SoglVeks ) = tsOk {} }
    else
      { if ( GetFirst SoglVeks ) = tsOk {} }
    }
  CloseWindow(wiFiltrSogl);
  }

cmCancel :
  {
  ClearFlt();
  }

cmVnKlass :
  {
  RunWindow(wiFiltrVnKlass);
  }

End;

End; // Window


// -------------------------------------------------------------------
//                           СОРТИРОВКИ
// -------------------------------------------------------------------

const
  coSrtDatNoSogl  : word = 0; // Дата выписки + номер внешний
  coSrtDatNoSoglV : word = 1; // Дата выписки + номер внутренний
  coSrtCSoglStat  : word = 2; // Статус + дата
  coSrtCOtv       : word = 3; // Ответственный + дата
  coSrtCVal       : word = 4; // Валюта + дата
end;

// -- SetSrt -------------------------------------------------
// Установка сортировки
// -----------------------------------------------------------
Procedure SetSrt;
  {
  case srtChoice of
   coSrtDatNoSogl  : SetOrder( tiByDatNoSogl  );
   coSrtDatNoSoglV : SetOrder( tiByDatNoSoglV );
   coSrtCSoglStat  : SetOrder( tiByCSoglStat  );
   coSrtCOtv       : SetOrder( tiByCOtv       );
   coSrtCVal       : SetOrder( tiByCVal       );
  end; // case
  }

Window wiSortSogl 'Настройка сортировки' (,hcVekslSoglVeksSort,) escclose, gray;
 Show at (12,5,68,19);

var
  tmpSrtChoice  : word;  // старое значение RadioButton выбора сортировки
  tmpSrtRestore : word;  // старое значение флага установки выбранной сортировки при входе
  tmpSrtChange  : word;  // старое значение флага переключения сортировки при движении по полям

Panel pSortSogl;

Screen scSortSogl NoTableNavigation;
 Fields
  srtChoice  ('Режим сортировки при просмотре',,)                           : noprotect;
  srtRestore ('Признак установки режима сортировки при входе',,)            : noprotect;
  srtChange  ('Признак смены режима сортировки при перемещении по полям',,) : noprotect;
 buttons
  cmOk,default,,'Установка параметров сортировки',,sci1Esc;
  cmCancel,,,'Выход',,sci1Esc;

<<

 Сортировать по
       (.) Дата выписки                    `
       (.) Внутренний номер                `
       (.) Статус соглашения               `
       (.) Ответственный                   `
       (.) Валюта                          `

  [.] устанавливать сортировку при входе`

  [.] смена режима сортировки при перемещении по полям`

         <.~П~родолжить.>       <. ~О~тмена .>

>>
End; // screen
End; // panel

HandleEvent // Window

cmInit:
  {
  tmpSrtChoice  := srtChoice;
  tmpSrtRestore := srtRestore;
  tmpSrtChange  := srtChange;
  }

cmOk:
  {
  SetSrt();
  CloseWindow(wiSortSogl);
  }

cmCancel:
  {
  srtChoice  := tmpSrtChoice;
  srtRestore := tmpSrtRestore;
  srtChange  := tmpSrtChange;
  }

End; // HandleEvent Window

End; // Window
