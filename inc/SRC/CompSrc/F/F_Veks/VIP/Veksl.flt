//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 5.50 - Бухгалтерский контур
// Каталог векселей, финансовых вложений и кредитов (фильтрация, сортировка)
//------------------------------------------------------------------------------

// -------------------------------------------------------------------
// Функция определения активности ограничений (фильтров) на документы
// которые невозможно или нежелательно присваивать вновь создаваемому
// документу для его вхождения в условия фильтра.
// -------------------------------------------------------------------
Function OtherBound_Active : boolean;
{
  OtherBound_Active := true;

  if BoundActive(tbByDatVip) 
    Exit;
  if BoundActive(tbByDatOpl) 
    Exit;
  if BoundActive(tbByDatOb)  
    Exit;

  if BoundActive(tbbyKlass)  
    Exit;
  if BoundActive(tbbyKlass1) 
    Exit;
  if BoundActive(tbbyKlass2) 
    Exit;
  if BoundActive(tbbyKlass3) 
    Exit;
  if BoundActive(tbbyKlass4) 
    Exit;
  if BoundActive(tbbyKlass5) 
    Exit;
  if BoundActive(tbbyKlass6) 
    Exit;

  if ConditionActive(tcByNoAccept) 
    Exit;
  if BoundActive(tbByAccept) 
    Exit;

  if BoundActive(tbByPol)  
    Exit;
  if BoundActive(tbByPlh)  
    Exit;
  if BoundActive(tbByDerg) 
    Exit;

  OtherBound_Active := false;
}
// -- Bound_Active ---------------------------------------------------
// Функция определения активности ограничений (фильтров) на документы
// -------------------------------------------------------------------
Function Bound_Active : boolean;
{
  Bound_Active := true;

  if ConditionActive(tcByVeksStat) 
    Exit;

  if BoundActive(tbBySrDoc)
    Exit;
  if BoundActive(tbByNoBlnk)
    Exit;

  if BoundActive(tbByVidVeks) 
    Exit;
  if BoundActive(tbByVeksStat)
    Exit;
  if BoundActive(tbByUslPog)  
    Exit;

  if BoundActive(tbByVekslVal)
    Exit;

  if BoundActive(tbByPlat)
    Exit;
  if BoundActive(tbByPl)  
    Exit;
  if BoundActive(tbByPolh)
    Exit;

  if OtherBound_Active()
    Exit;

  Bound_Active := false;
}

// -- SetFlt -----------------------------------------------------
// Установка фильтров
// ---------------------------------------------------------------
procedure SetFlt;
{
  if GetMarkerCount(fltStatMarkers) > 0
    {
    if GetMarkerCount(fltStatMarkers) > 1 // если указано несколько статусов, то фильтруем by condition
      {                                     // если указан только 1 статус, то фильтруем by bounds
        if not ConditionActive(tcByVeksStat)
          PushCondition(tcByVeksStat);
      }
    else
      {
        if GetMarker(fltStatMarkers,0,fltVeksStat)
          if not BoundActive(tbByVeksStat)
            AddBounds(tbByVeksStat);
      }
    }
  else
    {
      if ConditionActive(tcByVeksStat)
        PopCondition(tcByVeksStat);
      if BoundActive(tbByVeksStat)
        SubBounds(tbByVeksStat);
      fltVeksStat := 0;
    }

  if fltSrDoc <> ''
    { 
      if not BoundActive(tbBySrDoc)   
        AddBounds(tbBySrDoc); 
    }
  else
    { 
      if BoundActive(tbBySrDoc)   
        SubBounds(tbBySrDoc);
    }

  if fltNoBlnk <> ''
    { 
      if not BoundActive(tbByNoBlnk)  
        AddBounds(tbByNoBlnk); 
    }
  else
    { 
      if BoundActive(tbByNoBlnk)  
        SubBounds(tbByNoBlnk);
    }

  if fltDatVipEnd <> date(0,0,0)
    { 
      if not BoundActive(tbByDatVip)  
        AddBounds(tbByDatVip); 
    }
  else
    { 
      if BoundActive(tbByDatVip)  
        SubBounds(tbByDatVip);  
    }

  if fltDatOplEnd <> date(0,0,0)
    { 
      if not BoundActive(tbByDatOpl)  
        AddBounds(tbByDatOpl); 
    }
  else
    { 
      if BoundActive(tbByDatOpl)  
        SubBounds(tbByDatOpl);  
    }

  if fltDatObEnd <> date(0,0,0)
    { 
      if not BoundActive(tbByDatOb)   
        AddBounds(tbByDatOb); 
    }
  else
    { 
      if BoundActive(tbByDatOb)   
        SubBounds(tbByDatOb);  
    }

  if fltVidVeks <> 0
    { 
      if not BoundActive(tbByVidVeks) 
        AddBounds(tbByVidVeks); 
    }
  else
    { 
      if BoundActive(tbByVidVeks) 
        SubBounds(tbByVidVeks); 
    }

  if fltUslPog <> 0
    { 
      if not BoundActive(tbByUslPog)  
        AddBounds(tbByUslPog); 
    }
  else
    { 
      if BoundActive(tbByUslPog)  
        SubBounds(tbByUslPog); 
    }

  if fltValPr = 1
    { 
      if not BoundActive(tbByVekslVal)  
        AddBounds(tbByVekslVal); 
    }
  else
    { 
      if BoundActive(tbByVekslVal)  
        SubBounds(tbByVekslVal); 
    }

  if fltPlat <> 0
    { 
      if not BoundActive(tbByPlat)    
        AddBounds(tbByPlat); 
    }
  else
    { 
      if BoundActive(tbByPlat)    
        SubBounds(tbByPlat); 
    }

  if fltPl <> 0
    { 
      if not BoundActive(tbByPl)      
        AddBounds(tbByPl); 
    }
  else
    { 
      if BoundActive(tbByPl)      
        SubBounds(tbByPl); 
    }

  if fltPol <> 0
    { 
      if not BoundActive(tbByPol)     
        AddBounds(tbByPol); 
    }
  else
    { 
      if BoundActive(tbByPol)     
        SubBounds(tbByPol); 
    }

  if fltPolh <> 0
    { 
      if not BoundActive(tbByPolh)     
        AddBounds(tbByPolh); 
    }
  else
    { 
      if BoundActive(tbByPolh)     
        SubBounds(tbByPolh); 
    }

  if fltDerg <> 0
    { 
      if not BoundActive(tbByDerg)     
        AddBounds(tbByDerg); 
    }
  else
    { 
      if BoundActive(tbByDerg)     
        SubBounds(tbByDerg); 
    }

  if fltPlh <> 0
    { 
      if not BoundActive(tbByPlh)     
        AddBounds(tbByPlh); 
    }
  else
    { 
      if BoundActive(tbByPlh)     
        SubBounds(tbByPlh); 
    }

  if wFilKlass <> 0
    { 
      if not BoundActive(tbByKlass)   
        AddBounds(tbByKlass); 
    }
  else
    {  
      if BoundActive(tbByKlass)   
        SubBounds(tbByKlass); 
    }

  if cFilKlass1 <> 0
    { 
      if not BoundActive(tbByKlass1)   
        AddBounds(tbByKlass1); 
    }
  else
    { 
      if BoundActive(tbByKlass1)   
        SubBounds(tbByKlass1); 
    }

  if cFilKlass2 <> 0
    { 
      if not BoundActive(tbByKlass2)   
        AddBounds(tbByKlass2); 
    }
  else
    { 
      if BoundActive(tbByKlass2)   
        SubBounds(tbByKlass2); 
    }

  if cFilKlass3 <> 0
    { 
      if not BoundActive(tbByKlass3)   
        AddBounds(tbByKlass3); 
    }
  else
    { 
      if BoundActive(tbByKlass3)   
        SubBounds(tbByKlass3); 
    }

  if cFilKlass4 <> 0
    { 
      if not BoundActive(tbByKlass4)   
        AddBounds(tbByKlass4); 
    }
  else
    { 
      if BoundActive(tbByKlass4)   
        SubBounds(tbByKlass4); 
    }

  if cFilKlass5 <> 0
    { 
      if not BoundActive(tbByKlass5)   
        AddBounds(tbByKlass5); 
    }
  else
    { 
      if BoundActive(tbByKlass5)   
        SubBounds(tbByKlass5); 
    }

  if cFilKlass6 <> 0
    { 
      if not BoundActive(tbByKlass6)   
        AddBounds(tbByKlass6); 
    }
  else
    { 
      if BoundActive(tbByKlass6)   
        SubBounds(tbByKlass6); 
    }

  case fltAkcept of
   0:
    {
      if BoundActive(tbByAccept)       
        SubBounds(tbByAccept);

      if ConditionActive(tcByNoAccept)  
        PopCondition(tcByNoAccept);
    }
   1: // акцептованные
    {
      if not BoundActive(tbByAccept)       
        AddBounds(tbByAccept);
    }
   2: // неакцептованные
    {
      if not ConditionActive(tcByNoAccept) 
        PushCondition(tcByNoAccept);
    }
  end;
}

procedure UnsetFlt;
{
  if ConditionActive(tcByVeksStat) 
    PopCondition(tcByVeksStat);

  if ConditionActive(tcByNoAccept) 
    PopCondition(tcByNoAccept);

  if BoundActive(tbBySrDoc)      
    SubBounds(tbBySrDoc);

  if BoundActive(tbByNoBlnk)      
    SubBounds(tbByNoBlnk);

  if BoundActive(tbByDatVip)      
    SubBounds(tbByDatVip);

  if BoundActive(tbByDatOpl)      
    SubBounds(tbByDatOpl);

  if BoundActive(tbByDatOb)      
    SubBounds(tbByDatOb);

  if BoundActive(tbByVidVeks)      
    SubBounds(tbByVidVeks);

  if BoundActive(tbByVeksStat)      
    SubBounds(tbByVeksStat);

  if BoundActive(tbByUslPog)      
    SubBounds(tbByUslPog);

  if BoundActive(tbByPlat)      
    SubBounds(tbByPlat);

  if BoundActive(tbByPl)      
    SubBounds(tbByPl);

  if BoundActive(tbByPol)      
    SubBounds(tbByPol);

  if BoundActive(tbByPolh)      
    SubBounds(tbByPolh);

  if BoundActive(tbByDerg)      
    SubBounds(tbByDerg);

  if BoundActive(tbByKlass)      
    SubBounds(tbByKlass);

  if BoundActive(tbByKlass1)      
    SubBounds(tbByKlass1);

  if BoundActive(tbByKlass2)      
    SubBounds(tbByKlass2);

  if BoundActive(tbByKlass3)      
    SubBounds(tbByKlass3);

  if BoundActive(tbByKlass4)      
    SubBounds(tbByKlass4);

  if BoundActive(tbByKlass5)      
    SubBounds(tbByKlass5);

  if BoundActive(tbByKlass6)      
    SubBounds(tbByKlass6);

  if BoundActive(tbByAccept)      
    SubBounds(tbByAccept);
}

procedure ClearOtherFlt;
{
  fltDatVipSt  := date(0,0,0);
  fltDatVipEnd := date(0,0,0);
  fltDatOplSt  := date(0,0,0);
  fltDatOplEnd := date(0,0,0);
  fltDatOBSt   := date(0,0,0);
  fltDatOBEnd  := date(0,0,0);

  wFilKlass    := 0;
  cFilKlass1   := 0;
  cFilKlass2   := 0;
  cFilKlass3   := 0;
  cFilKlass4   := 0;
  cFilKlass5   := 0;
  cFilKlass6   := 0;

  wFilKlass1   := 0;
  wFilKlass2   := 0;
  wFilKlass3   := 0;
  wFilKlass4   := 0;
  wFilKlass5   := 0;
  wFilKlass6   := 0;

  FilKlass     := '';
  FilKlass1    := '';
  FilKlass2    := '';
  FilKlass3    := '';
  FilKlass4    := '';
  FilKlass5    := '';
  FilKlass6    := '';

  fltAkcept    := 0;

  fltPol       := 0;
  fltPlh       := 0;
  fltDerg      := 0;

  SetFlt;
}

procedure ClearFlt;
{
  ClearMarker(fltStatMarkers);
  fltVeksStat := 0;

  fltAkcept := 0;

  fltSrDoc  := '';
  fltNoBlnk := '';

  fltDatVipSt  := date(0,0,0);
  fltDatVipEnd := date(0,0,0);
  fltDatOplSt  := date(0,0,0);
  fltDatOplEnd := date(0,0,0);
  fltDatOBSt   := date(0,0,0);
  fltDatOBEnd  := date(0,0,0);

  fltVidVeks   := 0;
  fltUslPog    := 0;
  fltVal       := 0;
  fltValPr     := 0;
  fltPlat      := 0;
  fltPl        := 0;
  fltPol       := 0;
  fltPolh      := 0;
  fltDerg      := 0;
  fltPlh       := 0;

  wFilKlass    := 0;
  cFilKlass1   := 0;
  cFilKlass2   := 0;
  cFilKlass3   := 0;
  cFilKlass4   := 0;
  cFilKlass5   := 0;
  cFilKlass6   := 0;

  wFilKlass1   := 0;
  wFilKlass2   := 0;
  wFilKlass3   := 0;
  wFilKlass4   := 0;
  wFilKlass5   := 0;
  wFilKlass6   := 0;

  fltVidVeksName := '';
  fltUslPogName  := '';

  FilKlass       := '';
  FilKlass1      := '';
  FilKlass2      := '';
  FilKlass3      := '';
  FilKlass4      := '';
  FilKlass5      := '';
  FilKlass6      := '';

  SetFlt;
}

procedure SetNalFlt;
{
  if (KatTipDk = 93)
    Exit;

  PushPos(#Veksl);

  if (fltDerg = coGetTune('MYORG'))
    fltDerg := Comp(0);
  else
    fltDerg := coGetTune('MYORG');

  SetFlt;

  if (GetFirst Veksl <> tsOk)
  {
    Message('Нет документов,'#13''+
            'удовлетворяющих заданному условию.'#13#13''+
            'Фильтр будет снят.', Information + OkButton);
    set fltDerg := Comp(0);
    SetFlt;
  }

  PopPos(#Veksl);
  ReReadRecord;
}

procedure SetAppFlt;
{
  ClearMarker(fltStatMarkers);

  if (FilVeksl.cVeksStat <> Comp(0))
    InsertMarker(fltStatMarkers, FilVeksl.cVeksStat);

  fltVidVeks  := FilVeksl.cVidVeks;
  fltPlat     := FilVeksl.cPlat; // Векселедатель/эмитент
  fltPl       := FilVeksl.cPl;   // Плательщик по векселю
  fltDerg     := FilVeksl.cDerg; // Текущий держатель
  fltPolh     := FilVeksl.cPolh; // Первый держатель
  fltPlh      := FilVeksl.cPlh;  // Кому передан

  if (GetFirst KatKlassS where (( fltVidVeks == KatKlassS.nRec )) = tsOk)
    set fltVidVeksName := KatKlassS.Name;

  if (GetFirst KatUslPogS where (( fltUslPog == KatUslPogS.nRec )) = tsOk)
    set fltUslPogName := KatUslPogS.Name;

  SetFlt;

  if (GetFirst Veksl <> tsOk)
  {
    Message('Нет документов,'#13''+
            'удовлетворяющих заданному условию.'#13#13''+
            'Фильтр будет снят.', Information + OkButton);
    ClearFlt;
    SetFlt;
  }
}

// -------------------------------------------------------------------
//                             ФИЛЬТРЫ
// -------------------------------------------------------------------
Window wiFiltrVnKlass 'Ограничения по внешней классификации' (, hcVekslFiltrExClass,) EscClose, Gray;
  Show At (4, 10, 74, 17);

Panel pFiltrVnKlass;
Screen scrFiltrVnKlass (,, sci13Esc);
Fields
  FilKlass  ('Внешняя классификация') : protect, PickButton;
  FilKlass1 ('Внешняя классификация') : protect, PickButton;
  FilKlass2 ('Внешняя классификация') : protect, PickButton;
  FilKlass3 ('Внешняя классификация') : protect, PickButton;
  FilKlass4 ('Внешняя классификация') : protect, PickButton;
  FilKlass5 ('Внешняя классификация') : protect, PickButton;
  FilKlass6 ('Внешняя классификация') : protect, PickButton;
<<
`Наименование классификатора`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Значение классификатора-(1)`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Значение классификатора-(2)`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Значение классификатора-(3)`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Значение классификатора-(4)`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Значение классификатора-(5)`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Значение классификатора-(6)`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
End; // Screen scrFiltrVnKlass

HandleEvent // Panel pFiltrVnKlass
//------------------
  cmPick:
  {
    var wTemp : word;

    case (CurField) of
    //----------------
      #FilKlass:
        if (RunInterface(GetExClassifier, Word(coVeksl), wFilKlass) = cmDefault)
          if (GetFirst ExClassName where (( coVeksl   == ExClassName.wTable and
                                            wFilKlass == ExClassName.ClassCode )) = tsOk)
            set FilKlass := ExClassName.Name;
    //----------------
      #FilKlass1:
        if (RunInterface(PickExClassifier, Word(coVeksl), cFilKlass1, wTemp) = cmDefault)
          if (GetFirst ExClassSeg where (( cFilKlass1 == ExClassSeg.nRec )) = tsOk)
          {
            set FilKlass1  := ExClassSeg.Name;
            set wFilKlass1 := ExClassSeg.ClassCode;
          }
    //----------------
      #FilKlass2:
        if (RunInterface(PickExClassifier, Word(coVeksl), cFilKlass2, wTemp) = cmDefault)
          if (GetFirst ExClassSeg where (( cFilKlass2 == ExClassSeg.nRec )) = tsOk)
          {
            set FilKlass2  := ExClassSeg.Name;
            set wFilKlass2 := ExClassSeg.ClassCode;
          }
    //----------------
      #FilKlass3:
        if (RunInterface(PickExClassifier, Word(coVeksl), cFilKlass3, wTemp) = cmDefault)
          if (GetFirst ExClassSeg where (( cFilKlass3 == ExClassSeg.nRec )) = tsOk)
          {
            set FilKlass3  := ExClassSeg.Name;
            set wFilKlass3 := ExClassSeg.ClassCode;
          }
    //----------------
      #FilKlass4:
        if (RunInterface(PickExClassifier, Word(coVeksl), cFilKlass4, wTemp) = cmDefault)
          if (GetFirst ExClassSeg where (( cFilKlass4 == ExClassSeg.nRec )) = tsOk)
          {
            set FilKlass4  := ExClassSeg.Name;
            set wFilKlass4 := ExClassSeg.ClassCode;
          }
    //----------------
      #FilKlass5:
        if (RunInterface(PickExClassifier, Word(coVeksl), cFilKlass5, wTemp) = cmDefault)
          if (GetFirst ExClassSeg where (( cFilKlass5 == ExClassSeg.nRec )) = tsOk)
          {
            set FilKlass5  := ExClassSeg.Name;
            set wFilKlass5 := ExClassSeg.ClassCode;
          }
    //----------------
      #FilKlass6:
        if (RunInterface(PickExClassifier, Word(coVeksl), cFilKlass6, wTemp) = cmDefault)
          if (GetFirst ExClassSeg where (( cFilKlass6 == ExClassSeg.nRec )) = tsOk)
          {
            set FilKlass6  := ExClassSeg.Name;
            set wFilKlass6 := ExClassSeg.ClassCode;
          }
    //----------------
    end;
  }
//------------------
  cmDelOnProtect:
  {
    case (CurField) of
    //----------------
      #FilKlass:
      {
        set wFilKlass := 0;
        set FilKlass  := '';
      }
    //----------------
      #FilKlass1:
      {
        set cFilKlass1 := 0;
        set wFilKlass1 := 0;
        set FilKlass1  := '';
      }
    //----------------
      #FilKlass2:
      {
        set cFilKlass2 := 0;
        set wFilKlass2 := 0;
        set FilKlass2  := '';
      }
    //----------------
      #FilKlass3:
      {
        set cFilKlass3 := 0;
        set wFilKlass3 := 0;
        set FilKlass3  := '';
      }
    //----------------
      #FilKlass4:
      {
        set cFilKlass4 := 0;
        set wFilKlass4 := 0;
        set FilKlass4  := '';
      }
    //----------------
      #FilKlass5:
      {
        set cFilKlass5 := 0;
        set wFilKlass5 := 0;
        set FilKlass5  := '';
      }
    //----------------
      #FilKlass6:
      {
        set cFilKlass6 := 0;
        set wFilKlass6 := 0;
        set FilKlass6  := '';
      }
    //----------------
    end;
  }
//------------------
End; // HandleEvent Panel pFiltrVnKlass
End; // Panel pFiltrVnKlass
End; // Window wiFiltrVnKlass

// -- Mark -----------------------------------------------
// Работа с пометками в дереве статусов
// -------------------------------------------------------
Procedure Mark(bMark : boolean);
{
  var tmpNode : comp;
  tmpNode := fltKatNode;

  PushPos(#KatNotesFlt);

  if (bMark)
    InsertMarker(fltStatMarkers, KatNotesFlt.nRec);
  else
    DeleteMarker(fltStatMarkers, KatNotesFlt.nRec);

  fltKatNode := KatNotesFlt.nRec;

  if (GetFirst KatNotesFlt = tsOk)
    do
    {
      Mark(bMark);
    }
    while (GetNext KatNotesFlt = tsOk);

  PopPos(#KatNotesFlt);
  fltKatNode := tmpNode;
}

function GetKrSourceName(cVeksl : comp) : string;
{
  GetKrSourceName := '';

  if (GetFirst VekslS where (( cVeksl == VekslS.nRec )) = tsOk)
    GetKrSourceName := '№ ' + VekslS.NoDoc + ', открыт ' + DateToStr(VekslS.DatVip, 'DD/MM/YYYY');
}

Window wiFiltrVeksl 'Установка ограничений' (, hcVekslFiltr,) Escclose, Gray;
  Show At (, 3, 80,);

Panel pFiltrVeksl;
  Table KatNotesFlt;

//--------------------------------------------------------
Tree trVeksStat (, hcVekslFiltr, scViewMarkTree);
  Show At (,, 25, 11);
  Table KatNotesFlt;
Fields
  {Font = {Color = if (FoundMarker(fltStatMarkers, KatNotesFlt.nRec), ColorMark, 0)}};
  KatNotesFlt.Name    'Доступные статусы'                         : [19] ,protect;
  KatNotesFlt.sName                                               : [3]  ,protect;
  if (FoundMarker(fltStatMarkers, KatNotesFlt.nRec), 'V', ' ') '' : [1]  ,protect;
End; // Tree trVeksStat

//--------------------------------------------------------
Screen scFiltrVekslDD ('', hcVekslFiltr, sci13Esc);
  Show At (26,,, 11);
Fields
  fltSrDoc       ('Серия документа',, sci1Esc)             : noProtect;
  fltNoBlnk      ('Номер бланка',, sci1Esc)                : noProtect;
  fltDatVipSt    ('Период составления документа')          : noProtect;
  fltDatVipEnd   ('Период составления документа')          : noProtect;
  fltDatOplSt    ('Период гашения документа')              : noProtect;
  fltDatOplEnd   ('Период гашения документа')              : noProtect;
  fltDatOBSt     ('Период фактического гашения документа') : noProtect;
  fltDatOBEnd    ('Период фактического гашения документа') : noProtect;
  fltVidVeksName ('Вид документа')                         : protect, pickButton;
  fltUslPogName  ('Условия погашения')                     : protect, pickButton;
  fltAkcept      ('Признак акцепта') :
                   [LIST 0
                     '  ',
                     'Акцептован',
                     'Нет'
                   ], protect;
  fltValPr       ('Валюта документа',,sci1Esc)  : noprotect;
  [sByVal]  #ShowKau(cgKau_KlVal,  fltVal)  ('Валюта документа') : Protect, PickButton;
<<

`Серия документа`    .@@@@@@@@@@@@`Бланк`.@@@@@@@@@@@@

 Дата составления `с`.@@@@@@@@@@@@  `по` .@@@@@@@@@@@@
 Срок гашения     `с`.@@@@@@@@@@@@  `по` .@@@@@@@@@@@@
 Факт.погашен     `с`.@@@@@@@@@@@@  `по` .@@@@@@@@@@@@

`Вид документа`      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Условия погашения`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Признак акцепта`    .@@@@@@@@@@@@@@@
  [.]   Валюта`      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
End; // Screen scFiltrVekslDD
//--------------------------------------------------------
Screen scFiltrDolgDD ('', hcVekslFiltr, sci13Esc);
  Show At (26,,, 11);
Fields
  fltDatVipSt    ('Период составления документа')          : noProtect;
  fltDatVipEnd   ('Период составления документа')          : noProtect;
  fltDatOplSt    ('Период гашения документа')              : noProtect;
  fltDatOplEnd   ('Период гашения документа')              : noProtect;
  fltDatOBSt     ('Период фактического гашения документа') : noProtect;
  fltDatOBEnd    ('Период фактического гашения документа') : noProtect;
  fltVidVeksName ('Вид документа')                         : protect, pickButton;
  fltAkcept      ('Признак акцепта') :
                   [LIST 0
                     '  ',
                     'Акцептован',
                     'Нет'
                   ], protect;
  fltValPr       ('Валюта документа',, sci1Esc)  : noProtect;
  [sByVal_DolgDD] #ShowKau(cgKau_KlVal,  fltVal)  ('Валюта документа') : Protect, PickButton;
<<

 Дата составления       `с`.@@@@@@@@@@`по`.@@@@@@@@@@
 Начало периода гашения `с`.@@@@@@@@@@`по`.@@@@@@@@@@
 Конец периода гашения  `с`.@@@@@@@@@@`по`.@@@@@@@@@@

`Вид документа`      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Признак акцепта`    .@@@@@@@@@@@@@@@
  [.]   Валюта`      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
End; // Screen scFiltrDolgDD

//--------------------------------------------------------
Screen scFiltrKrSrcDD ('', hcVekslFiltr, sci13Esc);
  Show At (26,,, 11);
Fields
  fltDatVipSt    ('Период открытия источника кредитования') : noProtect;
  fltDatVipEnd   ('Период открытия источника кредитования') : noProtect;
  fltDatOplSt    ('Период закрытия источника')              : noProtect;
  fltDatOplEnd   ('Период закрытия источника')              : noProtect;
  fltDatOBSt     ('Период фактического закрытия источника') : noProtect;
  fltDatOBEnd    ('Период фактического закрытия источника') : noProtect;
  fltVidVeksName ('Вид документа')                          : Protect, PickButton;
  fltValPr       ('Валюта документа',, sci1Esc)  : noProtect;
  [sByVal_KrSrc] #ShowKau(cgKau_KlVal,  fltVal)  ('Валюта документа') : Protect, PickButton;
<<

 Дата открытия           `с`.@@@@@@@@@@`по`.@@@@@@@@@@
 Начало периода закрытия `с`.@@@@@@@@@@`по`.@@@@@@@@@@
 Конец периода закрытия  `с`.@@@@@@@@@@`по`.@@@@@@@@@@

`Вид документа`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.]   Валюта`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
End; // Screen scFiltrKrSrcDD

//--------------------------------------------------------
Screen scFiltrVeksl ('', hcVekslFiltr, sci13Esc);
  Show At (, 12,,);
Fields
  [sByPlat] #ShowKau(cgKau_KatOrg, fltPlat) ('Векселедатель')           : Protect, PickButton;
  [sByPl]   #ShowKau(cgKau_KatOrg, fltPl)   ('Плательщик по векселю')   : Protect, PickButton;
  [sByPolh] #ShowKau(cgKau_KatOrg, fltPolh) ('Первый векселедержатель') : Protect, PickButton;
  [sByDerg] #ShowKau(cgKau_KatOrg, fltDerg) ('Текущий держатель')       : Protect, PickButton;
  [sByPol]  #ShowKau(cgKau_KatOrg, fltPol)  ('От кого получен вексель') : Protect, PickButton;
  [sByPlh]  #ShowKau(cgKau_KatOrg, fltPlh)  ('Кому передан вексель')    : Protect, PickButton;
Buttons
  cmOk, Default,, 'Ввод ограничений',, sci1Esc;
  cmCancel,,, 'Выход',, sci1Esc;
  cmVnKlass,,, 'Ограничения по внешней классификации', hcVekslFiltrExClass, sci1Esc;
<<
 `Векселедатель`    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Плательщик`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Первый держатель` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Текущий держатель`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `От кого получен`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Кому передан`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  <.Продолжить.>     <.  Отмена  .>                 <.Внешняя классификация.>
>>
End; // Screen scFiltrVeksl

//--------------------------------------------------------
Screen scFiltrFin ('', hcVekslFiltr, sci13Esc);
  Show At (, 12,,);
Fields
  [sByPlat_Fin] #ShowKau(cgKau_KatOrg, fltPlat) ('Эмитент по документу (кто гасит документ)') : Protect, PickButton;
  [sByDerg_Fin] #ShowKau(cgKau_KatOrg, fltDerg) ('Текущий держатель')                         : Protect, PickButton;
  [sByPol_Fin]  #ShowKau(cgKau_KatOrg, fltPol)  ('От кого получен документ')                  : Protect, PickButton;
  [sByPlh_Fin]  #ShowKau(cgKau_KatOrg, fltPlh)  ('Кому передан документ')                     : Protect, PickButton;
Buttons
  cmOk, Default,, 'Ввод ограничений',, sci1Esc;
  cmCancel,,, 'Выход',, sci1Esc;
  cmVnKlass,,, 'Ограничения по внешней классификации', hcVekslFiltrExClass, sci1Esc;
<<
 `Эмитент`          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Текущий держатель`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `От кого получен`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Кому передан`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <.Продолжить.>     <.  Отмена  .>                 <.Внешняя классификация.>
>>
End; // Screen scFiltrFin

//--------------------------------------------------------
Screen scFiltrKredVd ('', hcVekslFiltr, sci13Esc);
  Show At (, 12,,);
Fields
  [sByPolh_KredVd] GetKrSourceName(fltPolh) ('Источник кредитования') : Protect, PickButton;
  [sByPol_KredVd]  #ShowKau(cgKau_Dogovor, fltPol) ('Договор') : Protect, PickButton;
  [sByPl_KredVd]   #ShowKau(cgKau_KatOrg, fltPl)   ('Заемщик') : Protect, PickButton;
Buttons
  cmOk, Default,, 'Ввод ограничений',, sci1Esc;
  cmCancel,,, 'Выход',, sci1Esc;
  cmVnKlass,,, 'Ограничения по внешней классификации', hcVekslFiltrExClass, sci1Esc;
<<

 `Источник` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Договор`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Заемщик`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <.Продолжить.>     <.  Отмена  .>                 <.Внешняя классификация.>
>>
End; // Screen scFiltrKredVd

//--------------------------------------------------------
Screen scFiltrKredPl ('', hcVekslFiltr, sci13Esc);
  Show At (, 12,,);
Fields
  [sByPol_KredPl]  #ShowKau(cgKau_Dogovor, fltPol) ('Договор')  : Protect, PickButton;
  [sByPlat_KredPl] #ShowKau(cgKau_KatOrg, fltPlat) ('Кредитор') : Protect, PickButton;
Buttons
  cmOk, Default,, 'Ввод ограничений',, sci1Esc;
  cmCancel,,, 'Выход',, sci1Esc;
  cmVnKlass,,, 'Ограничения по внешней классификации', hcVekslFiltrExClass, sci1Esc;
<<

 `Договор`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Кредитор` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <.Продолжить.>     <.  Отмена  .>                 <.Внешняя классификация.>
>>
End; // Screen scFiltrKredPl

//--------------------------------------------------------
Screen scFiltrDolgVd ('', hcVekslFiltr, sci13Esc);
  Show At (, 12,,);
Fields
  [sByPol_DolgVd]  #ShowKau(cgKau_Dogovor, fltPol) ('Договор')   : Protect, PickButton;
  [sByPl_DolgVd]   #ShowKau(cgKau_KatOrg, fltPl)  ('Контрагент') : Protect, PickButton;
Buttons
  cmOk, Default,, 'Ввод ограничений',, sci1Esc;
  cmCancel,,, 'Выход',, sci1Esc;
  cmVnKlass,,, 'Ограничения по внешней классификации', hcVekslFiltrExClass, sci1Esc;
<<

 `Договор`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Контрагент`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <.Продолжить.>     <.  Отмена  .>                 <.Внешняя классификация.>

>>
End; // Screen scFiltrDolgVd

//--------------------------------------------------------
Screen scFiltrDolgPl ('', hcVekslFiltr, sci13Esc);
  Show At (, 12,,);
Fields
  [sByPlat_DolgPl] #ShowKau(cgKau_KatOrg, fltPlat) ('Кредитор') : Protect, PickButton;
Buttons
  cmOk, Default,, 'Ввод ограничений',, sci1Esc;
  cmCancel,,, 'Выход',, sci1Esc;
  cmVnKlass,,, 'Ограничения по внешней классификации', hcVekslFiltrExClass, sci1Esc;
<<

 `Контрагент`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <.Продолжить.>     <.  Отмена  .>                 <.Внешняя классификация.>
>>
End; // Screen scFiltrDolgPl

//--------------------------------------------------------
Screen scFiltrKredSrc ('', hcVekslFiltr, sci13Esc);
  Show At (, 12,,);
Buttons
  cmOk, Default,, 'Ввод ограничений',, sci1Esc;
  cmCancel,,, 'Выход',, sci1Esc;
  cmVnKlass,,, 'Ограничения по внешней классификации', hcVekslFiltrExClass, sci1Esc;
<<



  <.Продолжить.>     <.  Отмена  .>                 <.Внешняя классификация.>
>>
End; // Screen scFiltrKredSrc

HandleEvent // Panel pFiltrVeksl
//------------------
  cmTreeTop:
    fltKatNode := 0;
//------------------
  cmTreeUp:
    fltKatNode := KatNotesFlt.cOwner;
//------------------
  cmTreeDown:
    fltKatNode := KatNotesFlt.nRec;
//------------------
  cmTreeNodeType:
    if (KatNotesFlt.isLeaf = 1)
      TreeSetNodeType(trVeksStat, 2);
//------------------
  cmTreeNeedOwner:
    TreeJumpToRecord(trVeksStat, KatNotesFlt.cOwner);
//------------------
  cmDelOnProtect:
  {
    case (CurField) of
    //----------------
      #fltVidVeksName:
      {
        fltVidVeks := 0;
        set fltVidVeksName := '';
      }
    //----------------
      #fltUslPogName:
      {
        fltUslPog := 0;
        set fltUslPogName := '';
      }
    //----------------
      #sByVal,
      #sByVal_DolgDD,
      #sByVal_KrSrc:
      {
        set fltVal := 0;
        set fltValPr := 0;
      }
    //----------------
      #sByPlat,
      #sByPlat_Fin,
      #sByPlat_KredPl,
      #sByPlat_DolgPl:
        set fltPlat := 0;
    //----------------
      #sByPl,
      #sByPl_KredVd,
      #sByPl_DolgVd:
        set fltPl := 0;
    //----------------
      #sByPol,
      #sByPol_Fin,
      #sByPol_KredVd,
      #sByPol_KredPl,
      #sByPol_DolgVd:
        set fltPol := 0;
    //----------------
      #sByPolh,
      #sByPolh_KredVd:
        set fltPolh := 0;
    //----------------
      #sByDerg,
      #sByDerg_Fin:
        set fltDerg := 0;
    //----------------
      #sByPlh,
      #sByPlh_Fin:
        set fltPlh := 0;
    //----------------
    end;
  }
//------------------
End; // HandleEvent Panel pFiltrVeksl
End; // Panel pFiltrVeksl

HandleEvent // Window wiFiltrVeksl
//-------------------
  cmInit:
  {
    case (TipDk) of
    //-------------
      81, 181:
      {
        SetFormat(scFiltrVeksl);
        SetFormat(scFiltrVekslDD);
        SetFieldState(#sByPlh,sfVisible);

        SetFieldState(#fltAkcept,sfVisible);
        ShowLabel4Field(#fltAkcept);
      }
    //-------------
      83, 183:
      {
        SetFormat(scFiltrFin);
        SetFormat(scFiltrVekslDD);

        HideLabel4Field(#fltAkcept);
        ClearFieldState(#fltAkcept,sfVisible);
      }
    //-------------
      85, 185:
      {
        SetFormat(scFiltrKredVd);
        SetFormat(scFiltrVekslDD);

        HideLabel4Field(#fltSrDoc);
        ClearFieldState(#fltSrDoc,sfVisible);

        HideLabel4Field(#fltNoBlnk);
        ClearFieldState(#fltNoBlnk,sfVisible);

        HideLabel4Field(#fltAkcept);
        ClearFieldState(#fltAkcept,sfVisible);
      }
    //-------------
      86, 186:
      {
        SetFormat(scFiltrKredPl);
        SetFormat(scFiltrVekslDD);

        HideLabel4Field(#fltSrDoc);
        ClearFieldState(#fltSrDoc,sfVisible);

        HideLabel4Field(#fltAkcept);
        ClearFieldState(#fltAkcept,sfVisible);

        HideLabel4Field(#fltNoBlnk);
        ClearFieldState(#fltNoBlnk,sfVisible);
      }
    //-------------
      89, 189:
      {
        SetFormat(scFiltrDolgVd);
        SetFormat(scFiltrDolgDD);

        HideLabel4Field(#fltAkcept);
        ClearFieldState(#fltAkcept,sfVisible);
      }
    //-------------
      90, 190:
      {
        SetFormat(scFiltrDolgPl);
        SetFormat(scFiltrDolgDD);

        HideLabel4Field(#fltAkcept);
        ClearFieldState(#fltAkcept,sfVisible);
      }
    //-------------
      93, 193:
      {
        SetFormat(scFiltrKredSrc);
        SetFormat(scFiltrKrSrcDD);
      }
    //-------------
    end;

    UnsetFlt;
  }
//-------------------
  cmPick:
  {
    case (CurField) of
    //----------------
      #fltVidVeksName:  // Вид документа
      {
        if (RunInterface('KatKlass', Word(100 + KatTipDk), Word(0), fltVidVeks, Word(0), true, Comp(0)) = cmDefault)
          if (GetFirst KatKlassS where (( fltVidVeks == KatKlassS.nRec )) = tsOk)
            set fltVidVeksName := KatKlassS.Name;
      }
    //----------------
      #fltUslPogName:   // условие погашения
      {
        if (RunInterface('KatKlass', Word(1001), Word(0), fltUslPog, Word(0), true, Comp(0)) = cmDefault)
          if (GetFirst KatUslPogS where (( fltUslPog == KatUslPogS.nRec )) = tsOk)
            set fltUslPogName := KatUslPogS.Name;
      }
    //----------------
      #sByVal,
      #sByVal_DolgDD,
      #sByVal_KrSrc:   // Валюта
      {
        iGetKau.GetCodeKau(cgiPick, cgKau_KlVal, fltVal);
        set fltVal := fltVal;

        if (fltVal <> 0)
          set fltValPr := 1;
      }
    //----------------
      #sByPlat,
      #sByPlat_Fin,
      #sByPlat_KredPl,
      #sByPlat_DolgPl: // Плательщик
      {
        iGetKau.GetCodeKau(cgiPick, cgKau_KatOrg, fltPlat);
        set fltPlat := fltPlat;
      }
    //----------------
      #sByPl,
      #sByPl_KredVd,
      #sByPl_DolgVd: // Заемщик, Эмитент
      {
        iGetKau.GetCodeKau(cgiPick, cgKau_KatOrg, fltPl);
        set fltPl := fltPl;
      }
    //----------------
      #sByPolh:  // первый держатель
      {
        iGetKau.GetCodeKau(cgiPick, cgKau_KatOrg, fltPolh);
        set fltPolh := fltPolh;
      }
    //----------------
      #sByPolh_KredVd: // источник кредитования
      {
        if (RunInterface('Veksl', Word(93), fltPolh, Integer(0), Word(0), Comp(0)) = cmDefault)
          set fltPolh := fltPolh;
      }
    //----------------
      #sByPol,
      #sByPol_Fin,
      #sByPol_KredVd,
      #sByPol_KredPl,
      #sByPol_DolgVd: // Кредитор, векселедержатель, договор
      {
        case (KatTipDk) of
        //----------------
          81, 83:
          {
            iGetKau.GetCodeKau(cgiPick, cgKau_KatOrg, fltPol);
            set fltPol := fltPol;
          }
        //----------------
          85..86, 89..90:
          {
            if (RunInterface('GetSomeDogovor',
                          Word(0),                 // pVidDog,    // вид документа - если задан будет установлен фильтр
                          Word(0FFFFh),            // pStatus,    // 0FFFFh - все документы, иначе битовая маска РАЗРЕШЕННЫХ статусов документов
                                                   //             // если разрешен только один статус,
                                                   //             // то по нему накладывается bounds
                          Word(0),                 // pDirect,    // 0 - выбирать все документы, 1 - только на продажу, 2 - только на закупку
                          Word(0),                 // pAttach,    // 0 - выбирать соглашения нельзя, 1 - можно, 2 - только соглашения
                          false,                   // OkOne,      // TRUE - груповой выбор FALSE - только один
                          fltPol,                  // prmDogovor, // возвращаемый указатель на договор
                          true,                    // OneLevel,   // показывать записи одного уровня (true), false - нет
                          Comp(0)                  // pOwn        // ссылка на владельца уровня (действует если OneLevel = true) - ВОЗВРАЩАЕМЫЙ!
                        ) = cmDefault)
              set fltPol := fltPol;
          }
        //----------------
        end;
      }
    //----------------
      #sByDerg,
      #sByDerg_Fin: // первый держатель
      {
        iGetKau.GetCodeKau(cgiPick, cgKau_KatOrg, fltDerg);
        set fltDerg := fltDerg;
      }
    //----------------
      #sByPlh,
      #sByPlh_Fin: // кому передан
      {
        iGetKau.GetCodeKau(cgiPick, cgKau_KatOrg, fltPlh);
        set fltPlh := fltPlh;
      }
    //----------------
    end;
  }
//-------------------
  cmMarkUnMark:
  {
    var tmpIndexNo : longint;

    Mark(not SearchMarker(fltStatMarkers, KatNotesFlt.nRec, tmpIndexNo));

    if (GetNext KatNotesFlt <> tsOk)
      if (TreeIsTerminal(trVeksStat))
        TreeGetNext(trVeksStat);

    ReReadRecord;
  }
//-------------------
  cmUnSelectAll:  // - or Gray-
  {
    ClearMarker(fltStatMarkers);
    ReScanPanel(#KatNotesFlt);
  }
//-------------------
  cmSelectAll:  // + or Gray+
  {
    if (GetFirst KatNotesS where (( Word(100 + KatTipDk) == KatNotesS.VidDoc )) = tsOk)
    {
      StartNewVisual(vtRotateVisual, vfTimer+vfBreak+vfConfirm, 'Помечаю все записи...'#13, 1);

      do
      {
        InsertMarker(fltStatMarkers, KatNotesS.nRec);
      }
      while (NextVisual and (GetNext KatNotesS where (( Word(100 + KatTipDk) == KatNotesS.VidDoc )) = tsOk));

      StopVisual('',0);
    }

    ReScanPanel(#KatNotesFlt);
  }
//-------------------
  cmOk:
  {
    PushPos(#Veksl);
    SetFlt;

    if (GetFirst Veksl <> tsOk)
    {
      Message('Нет документов,'#13''+
              'удовлетворяющих заданному условию.', Information + OkButton);
      UnsetFlt;
      PopPos(#Veksl);
      Exit;
    }
    else
    {
      PopPos(#Veksl);

      if (GetPrev Veksl = tsOk)
      { if (GetNext Veksl = tsOk) {}; }
      else
      { if (GetFirst Veksl = tsOk) {}; }
    }

    CloseWindow(wiFiltrVeksl);
  }
//-------------------
  cmCancel:
    ClearFlt;
//-------------------
  cmVnKlass:
    RunWindow(wiFiltrVnKlass);
//-------------------
End; // HandleEvent Window wiFiltrVeksl
End; // Window wiFiltrVeksl

// -------------------------------------------------------------------
//                           СОРТИРОВКИ
// -------------------------------------------------------------------

var
  flSrtDatVip    : word;  // Сортировка по дате выписки документа
  flSrtDatOpl    : word;  // Сортировка по дате гашения документа
  flSrtDatOb     : word;  // Сортировка по дате фактического гашения документа
  flSrtCVidVeks  : word;  // Сортировка по виду документа
  flSrtCVeksStat : word;  // Сортировка по статусу документа
  flSrtCPl       : word;  // Сортировка по плательщику
  flSrtCPlat     : word;  // Сортировка по векселедателю
  flSrtCPolh     : word;  // Сортировка по первому векселеполучателю
  flSrtCDerg     : word;  // Сортировка по текущему держателю
  flSrtCPol      : word;  // Сортировка по векселедержателю/от кого получен/по договору
  flSrtCPlh      : word;  // Сортировка по кому передан

// -- InitSrtFlags -------------------------------------------
// Инициализация "констант" проверки установленной сортировки
// -----------------------------------------------------------
Procedure InitSrtFlags(pwKatTipDk : word);
{
  case (pwKatTipDk) of
  //------------------
    81:
    {
      flSrtDatVip    := 0;
      flSrtDatOpl    := 1;
      flSrtDatOb     := 2;
      flSrtCVidVeks  := 3;
      flSrtCVeksStat := 4;
      flSrtCPl       := 5;
      flSrtCPlat     := 6;
      flSrtCPolh     := 7;
      flSrtCDerg     := 8;
      flSrtCPol      := 9;
      flSrtCPlh      := 10;
    }
  //------------------
    83:
    {
      flSrtDatVip    := 0;
      flSrtDatOpl    := 1;
      flSrtDatOb     := 2;
      flSrtCVidVeks  := 3;
      flSrtCVeksStat := 4;
      flSrtCPlat     := 5;
      flSrtCDerg     := 6;
      flSrtCPol      := 7;
      flSrtCPlh      := 8;
      flSrtCPl       := 99;
      flSrtCPolh     := 99;
    }
  //------------------
    85:
    {
      flSrtDatVip    := 0;
      flSrtDatOpl    := 1;
      flSrtDatOb     := 2;
      flSrtCVidVeks  := 3;
      flSrtCVeksStat := 4;
      flSrtCPl       := 5;
      flSrtCPlat     := 99;
      flSrtCDerg     := 99;
      flSrtCPol      := 6;
      flSrtCPlh      := 99;
      flSrtCPolh     := 7;
    }
  //------------------
    86:
    {
      flSrtDatVip    := 0;
      flSrtDatOpl    := 1;
      flSrtDatOb     := 2;
      flSrtCVidVeks  := 3;
      flSrtCVeksStat := 4;
      flSrtCPlat     := 5;
      flSrtCPl       := 99;
      flSrtCDerg     := 99;
      flSrtCPol      := 6;
      flSrtCPlh      := 99;
      flSrtCPolh     := 99;
    }
  //------------------
    89:
    {
      flSrtDatVip    := 0;
      flSrtDatOpl    := 1;
      flSrtDatOb     := 2;
      flSrtCVidVeks  := 3;
      flSrtCVeksStat := 4;
      flSrtCPl       := 5;
      flSrtCPlat     := 99;
      flSrtCDerg     := 99;
      flSrtCPol      := 6;
      flSrtCPlh      := 99;
      flSrtCPolh     := 99;
    }
  //------------------
    90:
    {
      flSrtDatVip    := 0;
      flSrtDatOpl    := 1;
      flSrtDatOb     := 2;
      flSrtCVidVeks  := 3;
      flSrtCVeksStat := 4;
      flSrtCPlat     := 5;
      flSrtCPl       := 99;
      flSrtCDerg     := 99;
      flSrtCPol      := 6;
      flSrtCPlh      := 99;
      flSrtCPolh     := 99;
    }
  //------------------
    93:
    {
      flSrtDatVip    := 0;
      flSrtDatOpl    := 1;
      flSrtDatOb     := 2;
      flSrtCVidVeks  := 3;
      flSrtCVeksStat := 4;
      flSrtCPlat     := 99;
      flSrtCPl       := 99;
      flSrtCDerg     := 99;
      flSrtCPol      := 99;
      flSrtCPlh      := 99;
      flSrtCPolh     := 99;
    }
  //------------------
  end;
}

// -- SetSrt -------------------------------------------------
// Установка сортировки
// -----------------------------------------------------------
Procedure SetSrt;
{
  if      (srtChoice = flSrtDatVip)    SetOrder(tiByDatVip);
  else if (srtChoice = flSrtDatOpl)    SetOrder(tiByDatOpl);
  else if (srtChoice = flSrtDatOb)     SetOrder(tiByDatOb);
  else if (srtChoice = flSrtCVidVeks)  SetOrder(tiByCVidVeks);
  else if (srtChoice = flSrtCVeksStat) SetOrder(tiByCVeksStat);
  else if (srtChoice = flSrtCPl)       SetOrder(tiByCPl);
  else if (srtChoice = flSrtCPlat)     SetOrder(tiByCPlat);
  else if (srtChoice = flSrtCPol)      SetOrder(tiByCPol);
  else if (srtChoice = flSrtCPlh)      SetOrder(tiByCPlh);
  else if (srtChoice = flSrtCPolh)     SetOrder(tiByCPolh);
  else if (srtChoice = flSrtCDerg)     SetOrder(tiByCDerg);
  else SetOrder(tiByDatVip);
}

Window wiSortVeksl 'Настройка сортировки' (,hcVekslSort,) Escclose, Gray;
  Show At (12, 3, 68, 22);

var
  tmpSrtChoice  : word;  // старое значение RadioButton выбора сортировки
  tmpSrtRestore : word;  // старое значение флага установки выбранной сортировки при входе
  tmpSrtChange  : word;  // старое значение флага переключения сортировки при движении по полям

Panel pSortVeksl
  Table Veksl;

// -------------------- Векселя ----------------------------
Screen scSortVeksl (,, sci1Esc);
 Fields
  srtChoice  ('Режим сортировки при просмотре')                           : noprotect;
  srtRestore ('Признак установки режима сортировки при входе')            : noprotect;
  srtChange  ('Признак смены режима сортировки при перемещении по полям') : noprotect;
 buttons
  cmOk,default,,'Установка параметров сортировки';
  cmCancel,,,'Выход';

<<
 Сортировать по
       (.) Дата составления документа`
       (.) Дата гашения документа`
       (.) Дата фактического гашения документа`
       (.) Вид документа`
       (.) Статус документа`
       (.) Плательщик`
       (.) Векселедатель`
       (.) Первый держатель`
       (.) Текущий держатель`
       (.) От кого получен`
       (.) Кому передан`

  [.] устанавливать сортировку при входе`

  [.] смена режима сортировки при перемещении по полям`

         <.Продолжить.>       <.  Отмена  .>

>>
End; // Screen scSortVeksl

// -------------------- Ценные бумаги ----------------------------
Screen scSortFin (,, sci1Esc);
 Fields
  srtChoice  ('Режим сортировки при просмотре')                           : noprotect;
  srtRestore ('Признак установки режима сортировки при входе')            : noprotect;
  srtChange  ('Признак смены режима сортировки при перемещении по полям') : noprotect;
 buttons
  cmOk,,,'Установка параметров сортировки';
  cmCancel,,,'Выход';

<<

 Сортировать по
       (.) Дата составления документа`
       (.) Дата гашения документа`
       (.) Дата фактического гашения документа`
       (.) Вид документа`
       (.) Статус документа`
       (.) Эмитент`
       (.) Текущий держатель`
       (.) От кого получен`
       (.) Кому передан`

  [.] устанавливать сортировку при входе`

  [.] смена режима сортировки при перемещении по полям`

         <.Продолжить.>       <.  Отмена  .>

>>
End; // Screen scSortFin

// -------------------- Кредиты выданные ----------------------------
Screen scSortKredVd (,, sci1Esc);
 Fields
  srtChoice  ('Режим сортировки при просмотре')                           : noprotect;
  srtRestore ('Признак установки режима сортировки при входе')            : noprotect;
  srtChange  ('Признак смены режима сортировки при перемещении по полям') : noprotect;
 buttons
  cmOk,,,'Установка параметров сортировки';
  cmCancel,,,'Выход';

<<

 Сортировать по
       (.) Дата составления документа`
       (.) Дата гашения документа`
       (.) Дата фактического гашения документа`
       (.) Вид документа`
       (.) Статус документа`
       (.) Заемщик`
       (.) Договор`
       (.) Источник кредитования`

  [.] устанавливать сортировку при входе`

  [.] смена режима сортировки при перемещении по полям`

         <.Продолжить.>       <.  Отмена  .>

>>
End; // Screen scSortKredVd

// -------------------- Кредиты полученные ----------------------------
Screen scSortKredPl (,, sci1Esc);
 Fields
  srtChoice  ('Режим сортировки при просмотре')                           : noprotect;
  srtRestore ('Признак установки режима сортировки при входе')            : noprotect;
  srtChange  ('Признак смены режима сортировки при перемещении по полям') : noprotect;
 buttons
  cmOk,,,'Установка параметров сортировки';
  cmCancel,,,'Выход';

<<

 Сортировать по
       (.) Дата составления документа`
       (.) Дата гашения документа`
       (.) Дата фактического гашения документа`
       (.) Вид документа`
       (.) Статус документа`
       (.) Кредитор`
       (.) Договор`

  [.] устанавливать сортировку при входе`

  [.] смена режима сортировки при перемещении по полям`

         <.Продолжить.>       <.  Отмена  .>

>>
End; // Screen scSortKredPl

// -------------------- Задолженность по кредитам  ----------------------------
Screen scSortDolg (,, sci1Esc);
 Fields
  srtChoice  ('Режим сортировки при просмотре')                           : noprotect;
  srtRestore ('Признак установки режима сортировки при входе')            : noprotect;
  srtChange  ('Признак смены режима сортировки при перемещении по полям') : noprotect;
 buttons
  cmOk,,,'Установка параметров сортировки';
  cmCancel,,,'Выход';

<<

 Сортировать по
       (.) Дата составления документа`
       (.) Начало периода погашения документа`
       (.) Конец периода гашения документа`
       (.) Вид документа`
       (.) Статус документа`
       (.) Контрагент`
       (.) Договорам`

  [.] устанавливать сортировку при входе`

  [.] смена режима сортировки при перемещении по полям`

         <.Продолжить.>       <.  Отмена  .>

>>
End; // Screen scSortDolg

// -------------------- Источники кредитования ----------------------------
Screen scSortKredSrc (,, sci1Esc);
 Fields
  srtChoice  ('Режим сортировки при просмотре')                           : noprotect;
  srtRestore ('Признак установки режима сортировки при входе')            : noprotect;
  srtChange  ('Признак смены режима сортировки при перемещении по полям') : noprotect;
 buttons
  cmOk,,,'Установка параметров сортировки';
  cmCancel,,,'Выход';

<<

 Сортировать по
       (.) Дата открытия источника`
       (.) Дата закрытия источника`
       (.) Дата фактического закрытия источника`
       (.) Вид документа`
       (.) Статус документа`




  [.] устанавливать сортировку при входе`

  [.] смена режима сортировки при перемещении по полям`

         <.Продолжить.>       <.  Отмена  .>

>>
End; // Screen scSortKredSrc
End; // Panel pSortVeksl

HandleEvent // Window wiSortVeksl
//-------------------
  cmInit:
  {
    case (TipDk) of
      81, 181: SetFormat(scSortVeksl);
      83, 183: SetFormat(scSortFin);
      85, 185: SetFormat(scSortKredVd);
      86, 186: SetFormat(scSortKredPl);
      89, 189,
      90, 190: SetFormat(scSortDolg);
      93, 193: SetFormat(scSortKredSrc);
    end;

    tmpSrtChoice  := srtChoice;
    tmpSrtRestore := srtRestore;
    tmpSrtChange  := srtChange;
  }
//-------------------
  cmOk:
  {
    SetSrt;
    CloseWindow(wiSortVeksl);
  }
//-------------------
  cmCancel:
  {
    srtChoice  := tmpSrtChoice;
    srtRestore := tmpSrtRestore;
    srtChange  := tmpSrtChange;
  }
//-------------------
End; // HandleEvent Window wiSortVeksl
End; // Window wiSortVeksl
