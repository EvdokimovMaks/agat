//------------------------------------------------------------------------------------------------------------
//                                                                                    (c) корпорация Галактика
// Галактика 9.1 - модуль "Электронная отчетность"
// Интерфейс редактирования : "Сведения о производстве и отгрузке товаров и услуг (П-1) (2019)"
//------------------------------------------------------------------------------------------------------------


//============================================================================================================
// #region СЕРВИСНЫЕ МЕТОДЫ
//------------------------------------------------------------------------------------------------------------
@Script GetStrVal(fld:string):string;
@begin
  Result := Trim(XMLMAP.GetAttrValueByName(fld));
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetDblVal(fld:string):double;
@begin
  Result := Double(XMLMAP.GetAttrValueByName(fld));
@end.

//------------------------------------------------------------------------------------------------------------
@Script SetFldVal(fld:string; val:variant);
@begin
  XMLMAP.SetVariantAttrValueByName_Formula(fld, val, 2);
@end.

//------------------------------------------------------------------------------------------------------------
@Script MessageErrorStop_ALG(mesMesAdrXML, mesPole, mesMes: string): boolean;
@begin
  MesError.InsertMesError(mesMesAdrXML, Comp(0), '', mesPole, mesMes);
  Result := True;
@end.

//------------------------------------------------------------------------------------------------------------
@Script NullStr(fld:string):Boolean;
@begin
  Result := (GetStrVal(fld) = '');
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetIter(iter:longint):string;
@begin
  Result := '';

  if (iter > 0)
    Result := '[' + String(iter) + ']';
@end.

// #endregion СЕРВИСНЫЕ МЕТОДЫ
//************************************************************************************************************


//============================================================================================================
// #region On_Check ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ ПОЛЕЙ
//------------------------------------------------------------------------------------------------------------
@Script On_Check : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_Check
  //----------------------------------------------------------------------------------------------------------
  #include AllTaxObj.Vih

  //----------------------------------------------------------------------------------------------------------
  #undef _IsValid
  #declare _IsValid(_Valid, _AdrXML, _Pole)
    if not #_Valid(#_AdrXML, getMes)
      MessageErrorStop_ALG
      (
        #_AdrXML
      , #_Pole
      , 'Поле не соответствует формату. ' + getMes
      );
  #end

  //----------------------------------------------------------------------------------------------------------
  #undef _IsValidOKVED
  #declare _IsValidOKVED(_Valid, _AdrXML, _Pole)
    if not NullStr(#_AdrXML)
      if not #_Valid(GetStrVal(#_AdrXML), getMes)
        MessageErrorStop_ALG
        (
          #_AdrXML
        , #_Pole
        , 'Поле не соответствует формату. ' + getMes
        );
  #end

  //----------------------------------------------------------------------------------------------------------
  #undef _IsValidNull
  #declare _IsValidNull(_Valid, _AdrXML, _Pole)
    if not #_Valid(#_AdrXML, getMes)
      MessageErrorStop_ALG
      (
        #_AdrXML
      , #_Pole
      , 'Поле не соответствует формату. Поле обязательно к заполнению'
      );
  #end

  //----------------------------------------------------------------------------------------------------------
  #declare _IfNot(_If, _Name, _XMLAdr, _Mes)
    if not (#_If)
      MessageErrorStop_ALG (#_XMLAdr, #_Name, #_Mes);
  #end

  //----------------------------------------------------------------------------------------------------------
  #declare _IfnotNeed(_adrXML, _Pole)
    if not NullStr(#_adrXML)
      MessageErrorStop_ALG
      (
        #_adrXML
      , #_Pole
      , getMes + ' поле НЕ должно быть заполнено'
      );
  #end

  //----------------------------------------------------------------------------------------------------------
  #declare _IfNeed(_adrXML, _Pole)
    if NullStr(#_adrXML)
      MessageErrorStop_ALG
      (
        #_adrXML
      , #_Pole
      , getMes + ' поле должно быть заполнено'
      );
  #end

 //----------------------------------------------------------------------------------------------------------
  #declare _IfNotBuf(_Pole, _Name)
    if not (bufRes = #_Pole)
      MessageErrorStop_ALG (a#_Pole, #_Name, getMes + ' (РАССЧ. '+String(bufRes, 0, 0)+')');
  #end
  //----------------------------------------------------------------------------------------------------------
  function IsValidNull(_adr: string; var _mes: string) : boolean;
  begin // Обязательные поля
    _mes := 'Поле обязательно к заполнению';

    Result := False;
    Result := not NullStr(_adr);
  end;

  //----------------------------------------------------------------------------------------------------------
  function localIsValidDate(_adr: string; var _mes: string) : boolean;
  begin //Дата
    _mes := 'Поле обязательно к заполнению';

    Result := False;
    Result := ((not NullStr(_adr)) and (GetStrVal(_adr) <> 'ДД мес ГГГГ'));
  end;

  //----------------------------------------------------------------------------------------------------------
  function OKVED2(_adr: string) : boolean;
  begin
    Result := true;
    case GetStrVal(_adr) of
      '35.14' : Result := false;
      '35.23.11' : Result := false;
      '35.23.12' : Result := false;
      '35.23.13' : Result := false;
      '35.23.14' : Result := false;
      '35.23.15' : Result := false;
      '35.23.16' : Result := false;
      '35.23.17' : Result := false;
      '35.23.18' : Result := false;
      '35.23.19' : Result := false;
      '35.23.20' : Result := false;
      '35.23.21' : Result := false;
      '35.23.22' : Result := false;
      '35.30.6'  : Result := false;
      '68.10.21' : Result := false;
      '68.10.22' : Result := false;
      '68.10.23' : Result := false;
    end;
  end;

  // #endregion СЕРВИС On_Check
  //**********************************************************************************************************
@begin

  //----------------------------------------------------------------------------------------------------------
  // #region ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  var getMes: string;
  var aR01_1, aR01_2, aR02_1, aR02_2, aR11_1, aR11_2, aR12_1, aR12_2, aR13_1, aR14_1
    , aR21_1, aR21_2, aR21_01_1, aR21_01_2, aR21_02_1, aR21_02_2, aR21_03_1, aR21_03_2
    , aR21_04_1, aR21_04_2, aR21_05_1, aR21_05_2, aR21_06_1, aR21_06_2, aR21_07_1, aR21_07_2
    , aR21_08_1, aR21_08_2, aR21_09_1, aR21_09_2, aR21_10_1, aR21_10_2, aR21_11_1, aR21_11_2
    , aR22_1, aR22_2, aR23_1, aR23_2, aR24_1, aR24_2, aR25_1, aR25_2
    , aR26_1, aR26_2, aR27_1, aR27_2, aR29_1, aR29_2, aR30_1, aR30_2, aR31_1, aR31_2, aR32_1, aR32_2
    , aR5_Str_3, aR5_Str_4, aR5_Str_B

    , aR21_b, aR21_01b, aR21_02b, aR21_03b, aR21_04b, aR21_05b, aR21_06b, aR21_07b, aR21_08b, aR21_09b
    , aR21_10b, aR21_11b

    , dR5_Str_B

    , mes01, mes02, mes03, mes04, mes05, mes06, mes07, mes08, mes09, mes10, mes11, mes12, mes13, mes14
    , mes15, mes16: string;

  var R01_1, R01_2, R02_1, R02_2, R11_1, R11_2, R12_1, R12_2, R13_1, R14_1
    , R22_1, R22_2, R23_1, R23_2, R24_1, R24_2, R25_1, R25_2, R26_1, R26_2
    , R27_1, R27_2, R29_1, R29_2, R30_1, R30_2, R31_1, R31_2, R32_1, R32_2
    , R21_1, R21_2, R21_01_1, R21_01_2, R21_02_1, R21_02_2, R21_03_1, R21_03_2
    , R21_04_1, R21_04_2, R21_05_1, R21_05_2, R21_06_1, R21_06_2, R21_07_1
    , R21_07_2, R21_08_1, R21_08_2 ,R21_09_1, R21_09_2, R21_10_1, R21_10_2
    , R21_11_1, R21_11_2, R21_12_1, R21_12_2
    , dR5_Str_3, dR5_Str_4, bufRes: double;
  var bufResult: boolean;

  // #endregion ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ


  #_IsValid(localIsValidDate, 'Файл/Документ/ДатаДок', 'Дата документа')

  #_IsValidNull(IsValidNull, 'Файл/Документ/Орг/НаимОрг'     , 'Наименование организации')
  #_IsValidNull(IsValidNull, 'Файл/Документ/Орг/Адр'         , 'Адрес'                   )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Орг/ОКПО'        , 'ОКПО'                    )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Подписант/Должн' , 'Должность'               )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Подписант/ФИО'   , 'ФИО'                     )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Подписант/Тел'   , 'Телефон'                 )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Подписант/E_mail', 'E-mail'                  )

  getMes := 'При текущем периоде отчета';

  var MonthNpp : byte;  MonthNpp := Month(TaxDat.dEnd);
  if  (MonthNpp <> 03)
  and (MonthNpp <> 06)
  and (MonthNpp <> 09)
  and (MonthNpp <> 12)
  {
    #_IfnotNeed('Файл/Документ/Раздел5/Стр90'         , 'Стр. 90'       )
    #_IfnotNeed('Файл/Документ/Раздел1/Стр03/Стр03Гр1', 'Стр. 03, гр. 1')
    #_IfnotNeed('Файл/Документ/Раздел1/Стр03/Стр03Гр2', 'Стр. 03, гр. 2')
    #_IfnotNeed('Файл/Документ/Раздел1/Стр04/Стр04Гр1', 'Стр. 04, гр. 1')
    #_IfnotNeed('Файл/Документ/Раздел1/Стр04/Стр04Гр2', 'Стр. 04, гр. 2')
    #_IfnotNeed('Файл/Документ/Раздел1/Стр05/Стр05Гр1', 'Стр. 05, гр. 1')
    #_IfnotNeed('Файл/Документ/Раздел1/Стр05/Стр05Гр2', 'Стр. 05, гр. 2')
  }


  //----------------------------------------------------------------------------------------------------------
  // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  mes01 := '01: Строка 11 <= строки 01 по соответствующим графам'                  ;
  mes02 := '02: Строка 12 <= строки 01 по соответствующим графам'                  ;
  mes03 := '03: Строка 14 <= строки 13 по соответствующим графам'                  ;
  mes04 := '04: Если строка 02 <> 0, то стр. 22 и/или стр. 26 и/или стр. 27 <> 0, кроме орган. с кодами ОКВЭД2 35.14, 35.23.11 - 35.23.22, 35.30.6, 68.10.21 - 68.10.23';
  mes05 := '05: Cумма данных, приведенных по свободным строкам (строка 21) = стр. 01 по соответствующим графам';
  mes06 := '06: Строка 23 <= строки 22 по соответствующим графам'                  ;
  mes07 := '07: Строка 24 <= строки 22 по соответствующим графам'                  ;
  mes08 := '08: Строка 25 <= строки 24 по соответствующим графам'                  ;
  mes09 := '09: Строка 30 <= строки 29 по соответствующим графам'                  ;
  mes10 := '10: Строка 32 <= строки 31 по соответствующим графам'                  ;
  mes11 := '11: Если строка 29 <> 0, то строка 31 <> 0 по соответствующим графам'  ;
  mes12 := '12: Если строка 30 <> 0, то строка 32 <> 0 по соответствующим графам'  ;
  mes13 := '13: Если строка с кодом 70 (графа 3) <> 0, то строка 22 (графа 1) <> 0';
  mes14 := '14: Если строка с кодом 80 (графа 3) <> 0, то строка 26 (графа 1) <> 0';
  mes15 := '15: Если строка с кодом 50 (графа 3) <> 0, то строка 01 (графа 1) <> 0';
  mes16 := '16: По строке с кодом 50 графа 3 >= графы 4'                           ;

  // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  //----------------------------------------------------------------------------------------------------------
  // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  aR01_1 := 'Файл/Документ/Раздел1/Стр01/Стр01Гр1';  R01_1 := GetDblVal(aR01_1);
  aR01_2 := 'Файл/Документ/Раздел1/Стр01/Стр01Гр2';  R01_2 := GetDblVal(aR01_2);
  aR02_1 := 'Файл/Документ/Раздел1/Стр02/Стр02Гр1';  R02_1 := GetDblVal(aR02_1);
  aR02_2 := 'Файл/Документ/Раздел1/Стр02/Стр02Гр2';  R02_2 := GetDblVal(aR02_2);
  aR11_1 := 'Файл/Документ/Раздел1/Стр11/Стр11Гр1';  R11_1 := GetDblVal(aR11_1);
  aR11_2 := 'Файл/Документ/Раздел1/Стр11/Стр11Гр2';  R11_2 := GetDblVal(aR11_2);
  aR12_1 := 'Файл/Документ/Раздел1/Стр12/Стр12Гр1';  R12_1 := GetDblVal(aR12_1);
  aR12_2 := 'Файл/Документ/Раздел1/Стр12/Стр12Гр2';  R12_2 := GetDblVal(aR12_2);
  aR13_1 := 'Файл/Документ/Раздел1/Стр13/Стр13Гр1';  R13_1 := GetDblVal(aR13_1);
  aR14_1 := 'Файл/Документ/Раздел1/Стр14/Стр14Гр1';  R14_1 := GetDblVal(aR14_1);

  aR21_1    := 'Файл/Документ/Раздел2/Стр21/Стр21Гр1';        R21_1 := GetDblVal(aR21_1);
  aR21_2    := 'Файл/Документ/Раздел2/Стр21/Стр21Гр2';        R21_2 := GetDblVal(aR21_2);
  aR21_01_1 := 'Файл/Документ/Раздел2/Стр21_01/Стр21Гр1_01';  R21_01_1 := GetDblVal(aR21_01_1);
  aR21_01_2 := 'Файл/Документ/Раздел2/Стр21_01/Стр21Гр2_01';  R21_01_2 := GetDblVal(aR21_01_2);
  aR21_02_1 := 'Файл/Документ/Раздел2/Стр21_02/Стр21Гр1_02';  R21_02_1 := GetDblVal(aR21_02_1);
  aR21_02_2 := 'Файл/Документ/Раздел2/Стр21_02/Стр21Гр2_02';  R21_02_2 := GetDblVal(aR21_02_2);
  aR21_03_1 := 'Файл/Документ/Раздел2/Стр21_03/Стр21Гр1_03';  R21_03_1 := GetDblVal(aR21_03_1);
  aR21_03_2 := 'Файл/Документ/Раздел2/Стр21_03/Стр21Гр2_03';  R21_03_2 := GetDblVal(aR21_03_2);
  aR21_04_1 := 'Файл/Документ/Раздел2/Стр21_04/Стр21Гр1_04';  R21_04_1 := GetDblVal(aR21_04_1);
  aR21_04_2 := 'Файл/Документ/Раздел2/Стр21_04/Стр21Гр2_04';  R21_04_2 := GetDblVal(aR21_04_2);
  aR21_05_1 := 'Файл/Документ/Раздел2/Стр21_05/Стр21Гр1_05';  R21_05_1 := GetDblVal(aR21_05_1);
  aR21_05_2 := 'Файл/Документ/Раздел2/Стр21_05/Стр21Гр2_05';  R21_05_2 := GetDblVal(aR21_05_2);
  aR21_06_1 := 'Файл/Документ/Раздел2/Стр21_06/Стр21Гр1_06';  R21_06_1 := GetDblVal(aR21_06_1);
  aR21_06_2 := 'Файл/Документ/Раздел2/Стр21_06/Стр21Гр2_06';  R21_06_2 := GetDblVal(aR21_06_2);
  aR21_07_1 := 'Файл/Документ/Раздел2/Стр21_07/Стр21Гр1_07';  R21_07_1 := GetDblVal(aR21_07_1);
  aR21_07_2 := 'Файл/Документ/Раздел2/Стр21_07/Стр21Гр2_07';  R21_07_2 := GetDblVal(aR21_07_2);
  aR21_08_1 := 'Файл/Документ/Раздел2/Стр21_08/Стр21Гр1_08';  R21_08_1 := GetDblVal(aR21_08_1);
  aR21_08_2 := 'Файл/Документ/Раздел2/Стр21_08/Стр21Гр2_08';  R21_08_2 := GetDblVal(aR21_08_2);
  aR21_09_1 := 'Файл/Документ/Раздел2/Стр21_09/Стр21Гр1_09';  R21_09_1 := GetDblVal(aR21_09_1);
  aR21_09_2 := 'Файл/Документ/Раздел2/Стр21_09/Стр21Гр2_09';  R21_09_2 := GetDblVal(aR21_09_2);
  aR21_10_1 := 'Файл/Документ/Раздел2/Стр21_10/Стр21Гр1_10';  R21_10_1 := GetDblVal(aR21_10_1);
  aR21_10_2 := 'Файл/Документ/Раздел2/Стр21_10/Стр21Гр2_10';  R21_10_2 := GetDblVal(aR21_10_2);
  aR21_11_1 := 'Файл/Документ/Раздел2/Стр21_11/Стр21Гр1_11';  R21_11_1 := GetDblVal(aR21_11_1);
  aR21_11_2 := 'Файл/Документ/Раздел2/Стр21_11/Стр21Гр2_11';  R21_11_2 := GetDblVal(aR21_11_2);

  aR21_b    := 'Файл/Документ/Раздел2/Стр21/Стр21ГрВ'      ;
  aR21_01b  := 'Файл/Документ/Раздел2/Стр21_01/Стр21ГрВ_01';
  aR21_02b  := 'Файл/Документ/Раздел2/Стр21_02/Стр21ГрВ_02';
  aR21_03b  := 'Файл/Документ/Раздел2/Стр21_03/Стр21ГрВ_03';
  aR21_04b  := 'Файл/Документ/Раздел2/Стр21_04/Стр21ГрВ_04';
  aR21_05b  := 'Файл/Документ/Раздел2/Стр21_05/Стр21ГрВ_05';
  aR21_06b  := 'Файл/Документ/Раздел2/Стр21_06/Стр21ГрВ_06';
  aR21_07b  := 'Файл/Документ/Раздел2/Стр21_07/Стр21ГрВ_07';
  aR21_08b  := 'Файл/Документ/Раздел2/Стр21_08/Стр21ГрВ_08';
  aR21_09b  := 'Файл/Документ/Раздел2/Стр21_09/Стр21ГрВ_09';
  aR21_10b  := 'Файл/Документ/Раздел2/Стр21_10/Стр21ГрВ_10';
  aR21_11b  := 'Файл/Документ/Раздел2/Стр21_11/Стр21ГрВ_11';

  aR22_1 := 'Файл/Документ/Раздел3/Стр22/Стр22Гр1';  R22_1 := GetDblVal(aR22_1);
  aR22_2 := 'Файл/Документ/Раздел3/Стр22/Стр22Гр2';  R22_2 := GetDblVal(aR22_2);
  aR23_1 := 'Файл/Документ/Раздел3/Стр23/Стр23Гр1';  R23_1 := GetDblVal(aR23_1);
  aR23_2 := 'Файл/Документ/Раздел3/Стр23/Стр23Гр2';  R23_2 := GetDblVal(aR23_2);
  aR24_1 := 'Файл/Документ/Раздел3/Стр24/Стр24Гр1';  R24_1 := GetDblVal(aR24_1);
  aR24_2 := 'Файл/Документ/Раздел3/Стр24/Стр24Гр2';  R24_2 := GetDblVal(aR24_2);
  aR25_1 := 'Файл/Документ/Раздел3/Стр25/Стр25Гр1';  R25_1 := GetDblVal(aR25_1);
  aR25_2 := 'Файл/Документ/Раздел3/Стр25/Стр25Гр2';  R25_2 := GetDblVal(aR25_2);
  aR26_1 := 'Файл/Документ/Раздел3/Стр26/Стр26Гр1';  R26_1 := GetDblVal(aR26_1);
  aR26_2 := 'Файл/Документ/Раздел3/Стр26/Стр26Гр2';  R26_2 := GetDblVal(aR26_2);
  aR27_1 := 'Файл/Документ/Раздел3/Стр27/Стр27Гр1';  R27_1 := GetDblVal(aR27_1);
  aR27_2 := 'Файл/Документ/Раздел3/Стр27/Стр27Гр2';  R27_2 := GetDblVal(aR27_2);

  aR29_1 := 'Файл/Документ/Раздел4/Стр29/Стр29Гр1';  R29_1 := GetDblVal(aR29_1);
  aR29_2 := 'Файл/Документ/Раздел4/Стр29/Стр29Гр2';  R29_2 := GetDblVal(aR29_2);

  aR30_1 := 'Файл/Документ/Раздел4/Стр30/Стр30Гр1';  R30_1 := GetDblVal(aR30_1);
  aR30_2 := 'Файл/Документ/Раздел4/Стр30/Стр30Гр2';  R30_2 := GetDblVal(aR30_2);

  aR31_1 := 'Файл/Документ/Раздел4/Стр31/Стр31Гр1';  R31_1 := GetDblVal(aR31_1);
  aR31_2 := 'Файл/Документ/Раздел4/Стр31/Стр31Гр2';  R31_2 := GetDblVal(aR31_2);

  aR32_1 := 'Файл/Документ/Раздел4/Стр32/Стр32Гр1';  R32_1 := GetDblVal(aR32_1);
  aR32_2 := 'Файл/Документ/Раздел4/Стр32/Стр32Гр2';  R32_2 := GetDblVal(aR32_2);

  // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  #_IsValidOKVED(IsValidOKVED, aR21_b   , 'Стр. 21, гр. В')
  #_IsValidOKVED(IsValidOKVED, aR21_01b , 'Гр. В (01)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_02b , 'Гр. В (02)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_03b , 'Гр. В (03)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_04b , 'Гр. В (04)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_05b , 'Гр. В (05)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_06b , 'Гр. В (06)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_07b , 'Гр. В (07)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_08b , 'Гр. В (08)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_09b , 'Гр. В (09)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_10b , 'Гр. В (10)'    )
  #_IsValidOKVED(IsValidOKVED, aR21_11b , 'Гр. В (11)'    )


  //----------------------------------------------------------------------------------------------------------
  // #region 01: Строка 11 <= строки 01 по соответствующим графам

  #_IfNot(R11_1 <= R01_1, 'Стр. 11, гр. 1', aR11_1, mes01)
  #_IfNot(R11_2 <= R01_2, 'Стр. 11, гр. 2', aR11_2, mes01)

  // #endregion 01: Строка 11 <= строки 01 по соответствующим графам

  //----------------------------------------------------------------------------------------------------------
  // #region 02: Строка 12 <= строки 01 по соответствующим графам

  #_IfNot(R12_1 <= R01_1, 'Стр. 12, гр. 1', aR12_1, mes02)
  #_IfNot(R12_2 <= R01_2, 'Стр. 12, гр. 2', aR12_2, mes02)

  // #endregion 02: Строка 12 <= строки 01 по соответствующим графам

  //----------------------------------------------------------------------------------------------------------
  // #region 03: Строка 14 <= строки 13 по соответствующим графам

  #_IfNot(R14_1 <= R13_1, 'Стр. 14, гр. 1', aR14_1, mes03)

  // #endregion 03: Строка 14 <= строки 13 по соответствующим графам
  //----------------------------------------------------------------------------------------------------------

  // #region 04: Если строка с кодом 02 <> 0, то строки 22 и/или 26 и/или 27 <> 0,  кроме орган. с кодами ОКВЭД2 35.14, 35.23.11 - 35.23.22, 35.30.6, 68.10.21 - 68.10.23

  if OKVED2(aR21_b)
   {if OKVED2(aR21_01b)
    {if OKVED2(aR21_02b)
     {if OKVED2(aR21_03b)
      {if OKVED2(aR21_04b)
       {if OKVED2(aR21_05b)
        {if OKVED2(aR21_06b)
         {if OKVED2(aR21_07b)
          {if OKVED2(aR21_08b)
           {if OKVED2(aR21_09b)
            {if OKVED2(aR21_10b)
             {if OKVED2(aR21_11b) { bufResult := true;} } } } } } } } } } } }
  if bufResult
    {
      if R02_1 <> 0
      { if R22_1 = 0
        { if R26_1 = 0 { #_IfNot(R27_1 <> 0, 'Стр. 02 , гр. 1', aR02_1, mes04);}}}
      if R02_2 <> 0
      { if R22_2 = 0
        { if R26_2 = 0 { #_IfNot(R27_2 <> 0, 'Стр. 02 , гр. 2', aR02_2, mes04);}}}
    }

  // #endregion 04: 04: Если строка с кодом 02 <> 0, то строки 22 и/или 26 и/или 27 <> 0,  кроме орган. с кодами ОКВЭД2 35.14, 35.23.11 - 35.23.22, 35.30.6, 68.10.21 - 68.10.23
  //----------------------------------------------------------------------------------------------------------
  // #region 05: Cумма данных, приведенных по свободным строкам (строка 21) = стр. 01 по соответствующим графам

  getMes := mes05;

  bufRes:= R21_1 + R21_01_1 + R21_02_1 + R21_03_1 + R21_04_1 + R21_05_1 + R21_06_1 + R21_07_1
                 + R21_08_1 + R21_09_1 + R21_10_1 + R21_11_1;
  #_IfNotBuf(R01_1, 'Стр. 01, гр. 1');
  bufRes:= R21_2 + R21_01_2 + R21_02_2 + R21_03_2 + R21_04_2 + R21_05_2 + R21_06_2 + R21_07_2
                 + R21_08_2 + R21_09_2 + R21_10_2 + R21_11_2;
  #_IfNotBuf(R01_2, 'Стр. 01, гр. 2');

  // #endregion 05: Cумма данных, приведенных по свободным строкам (строка 21) = стр. 01 по соответствующим графам
  //----------------------------------------------------------------------------------------------------------

  // #region 06: Строка 23 <= строки 22 по соответствующим графам

  #_IfNot(R23_1 <= R22_1, 'Стр. 23, гр. 1', aR23_1, mes06)
  #_IfNot(R23_2 <= R22_2, 'Стр. 23, гр. 2', aR23_2, mes06)

  // #endregion 06: Строка 23 <= строки 22 по соответствующим графам

  //----------------------------------------------------------------------------------------------------------
  // #region 07: Строка 24 <= строки 22 по соответствующим графам

  #_IfNot(R24_1 <= R22_1, 'Стр. 24, гр. 1', aR24_1, mes07)
  #_IfNot(R24_2 <= R22_2, 'Стр. 24, гр. 2', aR24_2, mes07)

  // #endregion 07: Строка 24 <= строки 22 по соответствующим графам

  //----------------------------------------------------------------------------------------------------------
  // #region 08: Строка 25 <= строки 24 по соответствующим графам

  #_IfNot(R25_1 <= R24_1, 'Стр. 25, гр. 1', aR25_1, mes08)
  #_IfNot(R25_2 <= R24_2, 'Стр. 25, гр. 2', aR25_2, mes08)

  // #endregion 08: Строка 25 <= строки 24 по соответствующим графам

  //----------------------------------------------------------------------------------------------------------
  // #region 09: Строка 30 <= строки 29 по соответствующим графам

  #_IfNot(R30_1 <= R29_1, 'Стр. 30, гр. 1', aR30_1, mes09)
  #_IfNot(R30_2 <= R29_2, 'Стр. 30, гр. 2', aR30_2, mes09)

  // #endregion 09: Строка 30 <= строки 29 по соответствующим графам

  //----------------------------------------------------------------------------------------------------------
  // #region 10: Строка 32 <= строки 31 по соответствующим графам

  #_IfNot(R32_1 <= R31_1, 'Стр. 32, гр. 1', aR32_1, mes10)
  #_IfNot(R32_2 <= R31_2, 'Стр. 32, гр. 2', aR32_2, mes10)

  // #endregion 10: Строка 32 <= строки 31 по соответствующим графам

  //----------------------------------------------------------------------------------------------------------
  // #region 11: Если строка 29 <> 0, то строка 31 <> 0 по соответствующим графам

  if (R29_1 <> 0) { #_IfNot(R31_1 <> 0, 'Стр. 31, гр. 1', aR31_1, mes11) }
  if (R29_2 <> 0) { #_IfNot(R31_2 <> 0, 'Стр. 31, гр. 2', aR31_2, mes11) }

  // #endregion 11: Если строка 29 <> 0, то строка 31 <> 0 по соответствующим графам

  //----------------------------------------------------------------------------------------------------------
  // #region 12: Если строка 30 <> 0, то строка 32 <> 0 по соответствующим графам

  if (R30_1 <> 0) { #_IfNot(R32_1 <> 0, 'Стр. 32, гр. 1', aR32_1, mes12) }
  if (R30_2 <> 0) { #_IfNot(R32_2 <> 0, 'Стр. 32, гр. 2', aR32_2, mes12) }

  // #endregion 12: Если строка 30 <> 0, то строка 32 <> 0 по соответствующим графам

  var i, CountI : longint = 0;
  var XMLAdrI : string = '';
  var fl13, fl14, fl15: boolean;

  fl13 := fl14 := fl15 := False;
  getMes := 'При текущем значении графы Б';

  CountI := XMLMap.GetNodeCountByName('Файл/Документ/Раздел5/Стр');
  for (i := 0; i < CountI; i++)
  {
    //--------------------------------------------------------------------------------------------------------
    // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ СТРАНИЦЫ

    XMLAdrI := 'Файл/Документ/Раздел5/Стр' + getIter(i);

    aR5_Str_B := XMLAdrI + '/ГрБ';  dR5_Str_B := GetStrVal(aR5_Str_B);
    aR5_Str_3 := XMLAdrI + '/Гр3';  dR5_Str_3 := GetDblVal(aR5_Str_3);
    aR5_Str_4 := XMLAdrI + '/Гр4';  dR5_Str_4 := GetDblVal(aR5_Str_4);

    // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ СТРАНИЦЫ

    case dR5_Str_B of
      '50': { //----------------------------------------------------------------------------------------------------------
              // #region 15: Если строка с кодом 50 (графа 3) <> 0, то строка 01 (графа 1) <> 0

              if (dR5_Str_3 <> 0)
              {
                if not fl15
                {
                  fl15 := not (R01_1 <> 0);
                  #_IfNot(R01_1 <> 0, 'Стр. 01, гр. 1', aR01_1, mes15)
                }
              }

              // #endregion 15: Если строка с кодом 50 (графа 3) <> 0, то строка 01 (графа 1) <> 0

              #_IfNeed(XMLAdrI + '/ГрА', 'Гр. А')
              #_IfNeed(XMLAdrI + '/ГрВ', 'Гр. В')
              #_IfNeed(XMLAdrI + '/ГрГ', 'Гр. Г')
              #_IfNeed(XMLAdrI + '/ГрД', 'Гр. Д')
              #_IfNeed(XMLAdrI + '/Гр1', 'Гр. 1')
              #_IfNeed(XMLAdrI + '/Гр2', 'Гр. 2')
              #_IfNeed(XMLAdrI + '/Гр3', 'Гр. 3')
              #_IfNeed(XMLAdrI + '/Гр4', 'Гр. 4')
              #_IfNeed(XMLAdrI + '/Гр5', 'Гр. 5')
              #_IfNeed(XMLAdrI + '/Гр6', 'Гр. 6')
            }
      '70': { //----------------------------------------------------------------------------------------------------------
              // #region 13: Если строка с кодом 70 (графа 3) <> 0, то строка 22 (графа 1) <> 0

              if (dR5_Str_3 <> 0)
              {
                if not fl13
                {
                  fl13 := not (R22_1 <> 0);
                  #_IfNot(R22_1 <> 0, 'Стр. 22, гр. 1', aR22_1, mes13)
                }
              }

              // #endregion 13: Если строка с кодом 70 (графа 3) <> 0, то строка 22 (графа 1) <> 0

              #_IfNeed   (XMLAdrI + '/ГрА', 'Гр. А')
              #_IfNeed   (XMLAdrI + '/ГрВ', 'Гр. В')
              #_IfNeed   (XMLAdrI + '/ГрГ', 'Гр. Г')
              #_IfnotNeed(XMLAdrI + '/ГрД', 'Гр. Д')
              #_IfnotNeed(XMLAdrI + '/Гр1', 'Гр. 1')
              #_IfnotNeed(XMLAdrI + '/Гр2', 'Гр. 2')
              #_IfNeed   (XMLAdrI + '/Гр3', 'Гр. 3')
              #_IfnotNeed(XMLAdrI + '/Гр4', 'Гр. 4')
              #_IfnotNeed(XMLAdrI + '/Гр5', 'Гр. 5')
              #_IfNeed   (XMLAdrI + '/Гр6', 'Гр. 6')
            }
      '80': { //----------------------------------------------------------------------------------------------------------
              // #region 14: Если строка с кодом 80 (графа 3) <> 0, то строка 26 (графа 1) <> 0

              if (dR5_Str_3 <> 0)
              {
                if not fl14
                {
                  fl14 := not (R26_1 <> 0);
                  #_IfNot(R26_1 <> 0, 'Стр. 26, гр. 1', aR26_1, mes14)
                }
              }

              // #endregion 14: Если строка с кодом 80 (графа 3) <> 0, то строка 26 (графа 1) <> 0

              #_IfNeed   (XMLAdrI + '/ГрА', 'Гр. А')
              #_IfNeed   (XMLAdrI + '/ГрВ', 'Гр. В')
              #_IfNeed   (XMLAdrI + '/ГрГ', 'Гр. Г')
              #_IfnotNeed(XMLAdrI + '/ГрД', 'Гр. Д')
              #_IfnotNeed(XMLAdrI + '/Гр1', 'Гр. 1')
              #_IfnotNeed(XMLAdrI + '/Гр2', 'Гр. 2')
              #_IfNeed   (XMLAdrI + '/Гр3', 'Гр. 3')
              #_IfnotNeed(XMLAdrI + '/Гр4', 'Гр. 4')
              #_IfnotNeed(XMLAdrI + '/Гр5', 'Гр. 5')
              #_IfNeed   (XMLAdrI + '/Гр6', 'Гр. 6')
            }
    end;

    //----------------------------------------------------------------------------------------------------------
    // #region 16: По строке с кодом 50 графа 3 >= графы 4

    #_IfNot(dR5_Str_3 >= dR5_Str_4, 'Гр. 4', aR5_Str_3, mes16)

    // #endregion 16: По строке с кодом 50 графа 3 >= графы 54
  }
@end.
// #endregion On_Check ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ ПОЛЕЙ
//************************************************************************************************************


//============================================================================================================
// #region On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//------------------------------------------------------------------------------------------------------------
@Script On_Recalc : boolean;
//==========================================================================================================
  // #region СЕРВИС On_Recalc
  //----------------------------------------------------------------------------------------------------------
  procedure LogInfo(_strAdr, _strMes, _strVal : string);
  {
    MesError.InsertRasch('', _strAdr, _strMes, _strVal, 0);
  }
  //----------------------------------------------------------------------------------------------------------
  procedure SetFldGV(_fld : string; var _val : double);
  {
    SetFldVal(_fld, _val);
    _val := GetDblVal(_fld);
  }
  //----------------------------------------------------------------------------------------------------------
  function GD(_val : double) : string;
  {
    Result := IF(_val < 0
                , '('+DoubleToStr(Round(_val), '[|-]36666666666666666666666666')+')'
                ,     DoubleToStr(Round(_val), '[|-]36666666666666666666666666')    );
  }
  // #endregion СЕРВИС On_Recalc
  //**********************************************************************************************************

@begin
  #define _LogInfo(_Name, _Mes) LogInfo(a#_Name, #_Mes, v#_Name);
  #define _SetFldGV(_Name) SetFldGV(a#_Name, #_Name);
  //----------------------------------------------------------------------------------------------------------
  // #region ТИТУЛЬНЫЙ ЛИСТ

  if ((GetStrVal('Файл/Документ/ДатаДок') = '') or (GetStrVal('Файл/Документ/ДатаДок') = 'ДД.ММ.ГГГГ'))
    SetFldVal('Файл/Документ/ДатаДок', DateToStr(Cur_Date, XMLMap.GetAttrVFormatByName('Файл/Документ/ДатаДок')));

  // #endregion ТИТУЛЬНЫЙ ЛИСТ

  //----------------------------------------------------------------------------------------------------------
  // #region ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  var getMes: string;
  var aR01_1,   aR01_2,   aR21_1,    aR21_2,    aR21_01_1,  aR21_01_2,  aR21_02_1,  aR21_02_2, aR21_03_1
    , aR21_03_2, aR21_04_1, aR21_04_2, aR21_05_1,  aR21_05_2,  aR21_06_1,  aR21_06_2,  aR21_07_1,  aR21_07_2
    , aR21_08_1, aR21_08_2, aR21_09_1, aR21_09_2, aR21_10_1, aR21_10_2, aR21_11_1, aR21_11_2
    , mR1_01, vR01_1, vR01_2 : string;

  var R01_1,    R01_2,    R21_1,     R21_2,     R21_01_1,  R21_01_2,  R21_02_1,  R21_02_2, R21_03_1, R21_03_2
    , R21_04_1, R21_04_2, R21_05_1,  R21_05_2,  R21_06_1,  R21_06_2,  R21_07_1,  R21_07_2, R21_08_1, R21_08_2
    , R21_09_1, R21_09_2, R21_10_1, R21_10_2, R21_11_1, R21_11_2: double;

  // #endregion ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  //----------------------------------------------------------------------------------------------------------
  // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  mR1_01   := '1: Строка 01 (по гр. 1, 2) = сумме строк 21 (по гр. 1, 2)';

  // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  //----------------------------------------------------------------------------------------------------------
  // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  aR01_1    := 'Файл/Документ/Раздел1/Стр01/Стр01Гр1';  R01_1    := GetDblVal(aR01_1);
  ar01_2    := 'Файл/Документ/Раздел1/Стр01/Стр01Гр2';  R01_2    := GetDblVal(aR01_2);

  aR21_1    := 'Файл/Документ/Раздел2/Стр21/Стр21Гр1';        R21_1    := GetDblVal(aR21_1);
  aR21_2    := 'Файл/Документ/Раздел2/Стр21/Стр21Гр2';        R21_2    := GetDblVal(aR21_2);
  aR21_01_1 := 'Файл/Документ/Раздел2/Стр21_01/Стр21Гр1_01';  R21_01_1 := GetDblVal(aR21_01_1);
  aR21_01_2 := 'Файл/Документ/Раздел2/Стр21_01/Стр21Гр2_01';  R21_01_2 := GetDblVal(aR21_01_2);
  aR21_02_1 := 'Файл/Документ/Раздел2/Стр21_02/Стр21Гр1_02';  R21_02_1 := GetDblVal(aR21_02_1);
  aR21_02_2 := 'Файл/Документ/Раздел2/Стр21_02/Стр21Гр2_02';  R21_02_2 := GetDblVal(aR21_02_2);
  aR21_03_1 := 'Файл/Документ/Раздел2/Стр21_03/Стр21Гр1_03';  R21_03_1 := GetDblVal(aR21_03_1);
  aR21_03_2 := 'Файл/Документ/Раздел2/Стр21_03/Стр21Гр2_03';  R21_03_2 := GetDblVal(aR21_03_2);
  aR21_04_1 := 'Файл/Документ/Раздел2/Стр21_04/Стр21Гр1_04';  R21_04_1 := GetDblVal(aR21_04_1);
  aR21_04_2 := 'Файл/Документ/Раздел2/Стр21_04/Стр21Гр2_04';  R21_04_2 := GetDblVal(aR21_04_2);
  aR21_05_1 := 'Файл/Документ/Раздел2/Стр21_05/Стр21Гр1_05';  R21_05_1 := GetDblVal(aR21_05_1);
  aR21_05_2 := 'Файл/Документ/Раздел2/Стр21_05/Стр21Гр2_05';  R21_05_2 := GetDblVal(aR21_05_2);
  aR21_06_1 := 'Файл/Документ/Раздел2/Стр21_06/Стр21Гр1_06';  R21_06_1 := GetDblVal(aR21_06_1);
  aR21_06_2 := 'Файл/Документ/Раздел2/Стр21_06/Стр21Гр2_06';  R21_06_2 := GetDblVal(aR21_06_2);
  aR21_07_1 := 'Файл/Документ/Раздел2/Стр21_07/Стр21Гр1_07';  R21_07_1 := GetDblVal(aR21_07_1);
  aR21_07_2 := 'Файл/Документ/Раздел2/Стр21_07/Стр21Гр2_07';  R21_07_2 := GetDblVal(aR21_07_2);
  aR21_08_1 := 'Файл/Документ/Раздел2/Стр21_08/Стр21Гр1_08';  R21_08_1 := GetDblVal(aR21_08_1);
  aR21_08_2 := 'Файл/Документ/Раздел2/Стр21_08/Стр21Гр2_08';  R21_08_2 := GetDblVal(aR21_08_2);
  aR21_09_1 := 'Файл/Документ/Раздел2/Стр21_09/Стр21Гр1_09';  R21_09_1 := GetDblVal(aR21_09_1);
  aR21_09_2 := 'Файл/Документ/Раздел2/Стр21_09/Стр21Гр2_09';  R21_09_2 := GetDblVal(aR21_09_2);
  aR21_10_1 := 'Файл/Документ/Раздел2/Стр21_10/Стр21Гр1_10';  R21_10_1 := GetDblVal(aR21_10_1);
  aR21_10_2 := 'Файл/Документ/Раздел2/Стр21_10/Стр21Гр2_10';  R21_10_2 := GetDblVal(aR21_10_2);
  aR21_11_1 := 'Файл/Документ/Раздел2/Стр21_11/Стр21Гр1_11';  R21_11_1 := GetDblVal(aR21_11_1);
  aR21_11_2 := 'Файл/Документ/Раздел2/Стр21_11/Стр21Гр2_11';  R21_11_2 := GetDblVal(aR21_11_2);
  // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  // #region РАЗДЕЛ 1

  //---------------------------------------------------------------------------
  // #region 01 : Строка 01 (по гр. 1, 2) = сумме строк 21 (по гр. 1, 2)

  getMes := mR1_01;
  R01_1 := R21_1 + R21_01_1 + R21_02_1 + R21_03_1 + R21_04_1 + R21_05_1 + R21_06_1 + R21_07_1 + R21_08_1;
  R01_1 := R01_1 + R21_09_1 + R21_10_1 + R21_11_1; #_SetFldGV(R01_1)
  vR01_1 := GD(R01_1)+' = '+GD(R21_1)+' + '+GD(R21_01_1) +' + '+ GD(R21_02_1) +' + '+ GD(R21_03_1)
    +' + '+ GD(R21_04_1) +' + '+ GD(R21_05_1) +' + '+ GD(R21_06_1) +' + '+ GD(R21_07_1) +' + '+ GD(R21_08_1)
    +' + '+ GD(R21_09_1) +' + '+ GD(R21_10_1) +' + '+ GD(R21_11_1);
  #_LogInfo(R01_1,mR1_01);


  R01_2 := R21_2 + R21_01_2 + R21_02_2 + R21_03_2 + R21_04_2 + R21_05_2 + R21_06_2 + R21_07_2 + R21_08_2 ;
  R01_2 := R01_2 + R21_09_2 + R21_10_2 + R21_11_2 ;  #_SetFldGV(R01_2)
  vR01_2 := GD(R01_2)+' = '+GD(R21_2)+' + '+GD(R21_01_2) +' + '+ GD(R21_02_2) +' + '+ GD(R21_03_2)
    +' + '+ GD(R21_04_2) +' + '+ GD(R21_05_2) +' + '+ GD(R21_06_2) +' + '+ GD(R21_07_2) +' + '+ GD(R21_08_2)
    +' + '+ GD(R21_09_2) +' + '+ GD(R21_10_2) +' + '+ GD(R21_11_2);
   #_LogInfo(R01_2,mR1_01);

  // #endregion 01: Строка 01 (по гр. 1, 2) = сумме строк 21 (по гр. 1, 2)

@end.
// #endregion On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//************************************************************************************************************
