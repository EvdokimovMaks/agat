//------------------------------------------------------------------------------------------------------------
//                                                                                    (c) корпорация Галактика
// Галактика 9.1 - модуль "Электронная отчетность"
// Алгоритмы расчета : "Сведения о производстве и отгрузке товаров и услуг (П-1)"
//------------------------------------------------------------------------------------------------------------


//============================================================================================================
// #region СЕРВИСНЫЕ МЕТОДЫ
//------------------------------------------------------------------------------------------------------------
@Script SetFldVal(val:string; fld:string);
@begin
  XMLMAP.SetAttrValueByName(fld, val);
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetStrVal(fld:string):string;
@begin
  Result := XMLMAP.GetAttrValueByName(fld);
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetDblVal(fld:string):double;
@begin
  Result := Double(XMLMAP.GetAttrValueByName(fld));
@end.

//------------------------------------------------------------------------------------------------------------
@Script SetDblVal(val: double; fld:string);
@begin
  XMLMAP.SetAttrValueByName(fld,String(Round(val)));
@end.

//------------------------------------------------------------------------------------------------------------
@Script getIter(iter:longint):string;
@begin
  Result := '';
  if (iter > 0)
    Result := '[' + String(iter) + ']';
@end.

//------------------------------------------------------------------------------------------------------------
@Script MessageErrorStop_ALG(mesMesAdrXML, mesPole, mesMes: string): boolean;
@begin
  MesError.InsertMesError(mesMesAdrXML, Comp(0), '', mesPole, mesMes);
  Result := True;
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetStrNull(fld:string):boolean;
@begin
  Result := XMLMAP.GetIsNullAttrValueByName(fld);
@end.
// #endregion СЕРВИСНЫЕ МЕТОДЫ
//************************************************************************************************************


//============================================================================================================
// #region On_Check ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ ПОЛЕЙ
//------------------------------------------------------------------------------------------------------------
@Script On_Check : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_Check
  //----------------------------------------------------------------------------------------------------------
  #declare _InsMes(_adrXML, _Pole, _Mess)
    MessageErrorStop_ALG
    (
      #_adrXML,
      #_Pole,
      #_Mess
    );
  #end

  #declare _IfNot(_If, _adrXML, _Pole)
    if not #_If
      MessageErrorStop_ALG
      (
        #_adrXML
      , #_Pole
      , getMes
      );
  #end

  #declare _IfNull(_adrXML, _Pole)
    if not GetStrNull(#_adrXML)
      MessageErrorStop_ALG
      (
        #_adrXML
      , #_Pole
      , 'Поле не должно быть заполнено'
      );
  #end

  #declare _IfNotNull(_adrXML, _Pole)
    if GetStrNull(#_adrXML)
      MessageErrorStop_ALG
      (
        #_adrXML
      , #_Pole
      , 'Поле должно быть заполнено'
      );
  #end

  #declare _IfNotValid(_Valid, _adrXML, _Pole)
    if not #_Valid(GetStrVal(#_adrXML), getMes)
      MessageErrorStop_ALG
      (
        #_adrXML
      , #_Pole
      , 'Поле не соответствует формату. ' + getMes
      );
  #end

  #declare _IfNotValidOKVED(_adrXML, _Pole)
    if not GetStrNull(#_adrXML)
      if not CheckError.CorrectOKVED(GetStrVal(#_adrXML))
        MessageErrorStop_ALG
        (
          #_adrXML
        , #_Pole
        , 'Поле не соответствует формату кода ОКВЭД (XX.XX.XX)'
        );
  #end

  //----------------------------------------------------------------------------------------------------------
  // #region Проверка значений Да|Нет
  function IsValidYesNo(_Val: string; var _Mes: string) : boolean;
  { // Период
    Result := False;

    _Mes := 'Возможные значения: "Да" или "Нет"';
    Result := CheckError.isRegExpr('^(Да|Нет)$', _Val);
  }
  // #endregion Проверка значений Да|Нет

  // #endregion СЕРВИС On_Check
  //**********************************************************************************************************
@begin
  // #region ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  var getMes, XMLAdrI : String = '';
  var flKonKv : Boolean = False;
  var CountI, i : LongInt;

  var aR1_Eksp, aR1_Imp, aR1_Vyv
    , aR1_03_1, aR1_03_2, aR1_03_3, aR1_04_1, aR1_04_2, aR1_04_3, aR1_05_1, aR1_05_2, aR1_05_3
    , aR1_01_1, aR1_11_1, aR1_12_1, aR1_13_1, aR1_14_1, aR1_01_2, aR1_11_2, aR1_12_2, aR1_01_3, aR1_11_3, aR1_12_3
    , aR2_01_B, aR2_02_B, aR2_03_B, aR2_04_B, aR2_05_B, aR2_06_B, aR2_07_B, aR2_08_B, aR2_09_B, aR2_10_B, aR2_11_B, aR2_12_B
    , aR2_01_V, aR2_02_V, aR2_03_V, aR2_04_V, aR2_05_V, aR2_06_V, aR2_07_V, aR2_08_V, aR2_09_V, aR2_10_V, aR2_11_V, aR2_12_V
    , aR3_22_1, aR3_23_1, aR3_24_1, aR3_25_1, aR3_26_1, aR3_22_2, aR3_23_2, aR3_24_2, aR3_25_2, aR3_22_3, aR3_23_3, aR3_24_3, aR3_25_3
    , aR4_29_1, aR4_30_1, aR4_31_1, aR4_32_1, aR4_29_2, aR4_30_2, aR4_31_2, aR4_32_2, aR4_29_3, aR4_30_3, aR4_31_3, aR4_32_3
    , aR5_A, aR5_B, aR5_V, aR5_G, aR5_D, aR5_1, aR5_2, aR5_3, aR5_4, aR5_5, aR5_6, aR5_7, aR5_Sprav

    , R2_01_B, R2_02_B, R2_03_B, R2_04_B, R2_05_B, R2_06_B, R2_07_B, R2_08_B, R2_09_B, R2_10_B, R2_11_B, R2_12_B
    , R5_A, R5_B, R5_V, R5_G, R5_D : String = '';

  var R1_01_1, R1_11_1, R1_12_1, R1_13_1, R1_14_1, R1_01_2, R1_11_2, R1_12_2, R1_01_3, R1_11_3, R1_12_3
    , R3_22_1, R3_23_1, R3_24_1, R3_25_1, R3_26_1, R3_22_2, R3_23_2, R3_24_2, R3_25_2, R3_22_3, R3_23_3, R3_24_3, R3_25_3
    , R4_29_1, R4_30_1, R4_31_1, R4_32_1, R4_29_2, R4_30_2, R4_31_2, R4_32_2, R4_29_3, R4_30_3, R4_31_3, R4_32_3
    , R5_1, R5_2, R5_3, R5_4, R5_5, R5_6, R5_7 : Double = 0.0;

  // #endregion ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  flKonKv :=    (Pos('март'    , LoCase(MesCurPeriod)) <> 0)
             or (Pos('июнь'    , LoCase(MesCurPeriod)) <> 0)
             or (Pos('сентябрь', LoCase(MesCurPeriod)) <> 0)
             or (Pos('декабрь' , LoCase(MesCurPeriod)) <> 0);

  // #region РАЗДЕЛ 1

  // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  aR1_Eksp := 'Файл/Документ/Раздел1/Справочно/Экспорт' ;
  aR1_Imp  := 'Файл/Документ/Раздел1/Справочно/Импорт'  ;
  aR1_Vyv  := 'Файл/Документ/Раздел1/Справочно/ВывозВРБ';

  aR1_03_1 := 'Файл/Документ/Раздел1/Стр03/Гр1';
  aR1_03_2 := 'Файл/Документ/Раздел1/Стр03/Гр2';
  aR1_03_3 := 'Файл/Документ/Раздел1/Стр03/Гр3';
  aR1_04_1 := 'Файл/Документ/Раздел1/Стр04/Гр1';
  aR1_04_2 := 'Файл/Документ/Раздел1/Стр04/Гр2';
  aR1_04_3 := 'Файл/Документ/Раздел1/Стр04/Гр3';
  aR1_05_1 := 'Файл/Документ/Раздел1/Стр05/Гр1';
  aR1_05_2 := 'Файл/Документ/Раздел1/Стр05/Гр2';
  aR1_05_3 := 'Файл/Документ/Раздел1/Стр05/Гр3';

  aR1_01_1 := 'Файл/Документ/Раздел1/Стр01/Гр1';   R1_01_1 := GetDblVal(aR1_01_1);
  aR1_11_1 := 'Файл/Документ/Раздел1/Стр11/Гр1';   R1_11_1 := GetDblVal(aR1_11_1);
  aR1_12_1 := 'Файл/Документ/Раздел1/Стр12/Гр1';   R1_12_1 := GetDblVal(aR1_12_1);
  aR1_13_1 := 'Файл/Документ/Раздел1/Стр13/Гр1';   R1_13_1 := GetDblVal(aR1_13_1);
  aR1_14_1 := 'Файл/Документ/Раздел1/Стр14/Гр1';   R1_14_1 := GetDblVal(aR1_14_1);
  aR1_01_2 := 'Файл/Документ/Раздел1/Стр01/Гр2';   R1_01_2 := GetDblVal(aR1_01_2);
  aR1_11_2 := 'Файл/Документ/Раздел1/Стр11/Гр2';   R1_11_2 := GetDblVal(aR1_11_2);
  aR1_12_2 := 'Файл/Документ/Раздел1/Стр12/Гр2';   R1_12_2 := GetDblVal(aR1_12_2);
  aR1_01_3 := 'Файл/Документ/Раздел1/Стр01/Гр3';   R1_01_3 := GetDblVal(aR1_01_3);
  aR1_11_3 := 'Файл/Документ/Раздел1/Стр11/Гр3';   R1_11_3 := GetDblVal(aR1_11_3);
  aR1_12_3 := 'Файл/Документ/Раздел1/Стр12/Гр3';   R1_12_3 := GetDblVal(aR1_12_3);

  // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  // Проверка на значения Да|Нет
  #_IfNotValid(IsValidYesNo, aR1_Eksp, 'Экспорт услуг'     )
  #_IfNotValid(IsValidYesNo, aR1_Imp , 'Импорт услуг'      )
  #_IfNotValid(IsValidYesNo, aR1_Vyv , 'Вывоз товаров в РБ')

  getMes := 'Сумма значений строк 11 и 12 должно быть меньше либо равно значения строки 01';
  #_IfNot(( R1_11_1 + R1_12_1 <= R1_01_1 ), aR1_11_1, 'Стр. 11, 12, гр. 1')
  #_IfNot(( R1_11_2 + R1_12_2 <= R1_01_2 ), aR1_11_2, 'Стр. 11, 12, гр. 2')
  #_IfNot(( R1_11_3 + R1_12_3 <= R1_01_3 ), aR1_11_3, 'Стр. 11, 12, гр. 3')

  getMes := 'Значение строки 14 должно быть меньше либо равно значения строки 13';
  #_IfNot(( R1_14_1 <= R1_13_1 ), aR1_14_1, 'Стр. 14, гр. 1')

  // Заполняется в отчете за март, июнь, сентябрь, декабрь
  if (flKonKv)
  { // заполняется
    #_IfNotNull(aR1_03_1, 'Стр. 03, гр. 1')
    #_IfNotNull(aR1_03_2, 'Стр. 03, гр. 2')
    #_IfNotNull(aR1_03_3, 'Стр. 03, гр. 3')
    #_IfNotNull(aR1_04_1, 'Стр. 04, гр. 1')
    #_IfNotNull(aR1_04_2, 'Стр. 04, гр. 2')
    #_IfNotNull(aR1_04_3, 'Стр. 04, гр. 3')
    #_IfNotNull(aR1_05_1, 'Стр. 05, гр. 1')
    #_IfNotNull(aR1_05_2, 'Стр. 05, гр. 2')
    #_IfNotNull(aR1_05_3, 'Стр. 05, гр. 3')
  }
  else
  { // не заполняется
    #_IfNull(aR1_03_1, 'Стр. 03, гр. 1')
    #_IfNull(aR1_03_2, 'Стр. 03, гр. 2')
    #_IfNull(aR1_03_3, 'Стр. 03, гр. 3')
    #_IfNull(aR1_04_1, 'Стр. 04, гр. 1')
    #_IfNull(aR1_04_2, 'Стр. 04, гр. 2')
    #_IfNull(aR1_04_3, 'Стр. 04, гр. 3')
    #_IfNull(aR1_05_1, 'Стр. 05, гр. 1')
    #_IfNull(aR1_05_2, 'Стр. 05, гр. 2')
    #_IfNull(aR1_05_3, 'Стр. 05, гр. 3')
  }

  // #endregion РАЗДЕЛ 1

  // #region РАЗДЕЛ 2

  // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  aR2_01_B := 'Файл/Документ/Раздел2/Стр01/ГрБ';   R2_01_B := GetStrVal(aR2_01_B);
  aR2_02_B := 'Файл/Документ/Раздел2/Стр02/ГрБ';   R2_02_B := GetStrVal(aR2_02_B);
  aR2_03_B := 'Файл/Документ/Раздел2/Стр03/ГрБ';   R2_03_B := GetStrVal(aR2_03_B);
  aR2_04_B := 'Файл/Документ/Раздел2/Стр04/ГрБ';   R2_04_B := GetStrVal(aR2_04_B);
  aR2_05_B := 'Файл/Документ/Раздел2/Стр05/ГрБ';   R2_05_B := GetStrVal(aR2_05_B);
  aR2_06_B := 'Файл/Документ/Раздел2/Стр06/ГрБ';   R2_06_B := GetStrVal(aR2_06_B);
  aR2_07_B := 'Файл/Документ/Раздел2/Стр07/ГрБ';   R2_07_B := GetStrVal(aR2_07_B);
  aR2_08_B := 'Файл/Документ/Раздел2/Стр08/ГрБ';   R2_08_B := GetStrVal(aR2_08_B);
  aR2_09_B := 'Файл/Документ/Раздел2/Стр09/ГрБ';   R2_09_B := GetStrVal(aR2_09_B);
  aR2_10_B := 'Файл/Документ/Раздел2/Стр10/ГрБ';   R2_10_B := GetStrVal(aR2_10_B);
  aR2_11_B := 'Файл/Документ/Раздел2/Стр11/ГрБ';   R2_11_B := GetStrVal(aR2_11_B);
  aR2_12_B := 'Файл/Документ/Раздел2/Стр12/ГрБ';   R2_12_B := GetStrVal(aR2_12_B);

  aR2_01_V := 'Файл/Документ/Раздел2/Стр01/ГрВ';
  aR2_02_V := 'Файл/Документ/Раздел2/Стр02/ГрВ';
  aR2_03_V := 'Файл/Документ/Раздел2/Стр03/ГрВ';
  aR2_04_V := 'Файл/Документ/Раздел2/Стр04/ГрВ';
  aR2_05_V := 'Файл/Документ/Раздел2/Стр05/ГрВ';
  aR2_06_V := 'Файл/Документ/Раздел2/Стр06/ГрВ';
  aR2_07_V := 'Файл/Документ/Раздел2/Стр07/ГрВ';
  aR2_08_V := 'Файл/Документ/Раздел2/Стр08/ГрВ';
  aR2_09_V := 'Файл/Документ/Раздел2/Стр09/ГрВ';
  aR2_10_V := 'Файл/Документ/Раздел2/Стр10/ГрВ';
  aR2_11_V := 'Файл/Документ/Раздел2/Стр11/ГрВ';
  aR2_12_V := 'Файл/Документ/Раздел2/Стр12/ГрВ';

  // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  // Проверка кодов ОКВЭД
  #_IfNotValidOKVED(aR2_01_V, 'Стр. ' + R2_01_B + ', гр. В')
  #_IfNotValidOKVED(aR2_02_V, 'Стр. ' + R2_02_B + ', гр. В')
  #_IfNotValidOKVED(aR2_03_V, 'Стр. ' + R2_03_B + ', гр. В')
  #_IfNotValidOKVED(aR2_04_V, 'Стр. ' + R2_04_B + ', гр. В')
  #_IfNotValidOKVED(aR2_05_V, 'Стр. ' + R2_05_B + ', гр. В')
  #_IfNotValidOKVED(aR2_06_V, 'Стр. ' + R2_06_B + ', гр. В')
  #_IfNotValidOKVED(aR2_07_V, 'Стр. ' + R2_07_B + ', гр. В')
  #_IfNotValidOKVED(aR2_08_V, 'Стр. ' + R2_08_B + ', гр. В')
  #_IfNotValidOKVED(aR2_09_V, 'Стр. ' + R2_09_B + ', гр. В')
  #_IfNotValidOKVED(aR2_10_V, 'Стр. ' + R2_10_B + ', гр. В')
  #_IfNotValidOKVED(aR2_11_V, 'Стр. ' + R2_11_B + ', гр. В')
  #_IfNotValidOKVED(aR2_12_V, 'Стр. ' + R2_12_B + ', гр. В')


  // #endregion РАЗДЕЛ 2

  // #region РАЗДЕЛ 3

  // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  aR3_22_1 := 'Файл/Документ/Раздел3/Стр22/Гр1';   R3_22_1 := GetDblVal(aR3_22_1);
  aR3_23_1 := 'Файл/Документ/Раздел3/Стр23/Гр1';   R3_23_1 := GetDblVal(aR3_23_1);
  aR3_24_1 := 'Файл/Документ/Раздел3/Стр24/Гр1';   R3_24_1 := GetDblVal(aR3_24_1);
  aR3_25_1 := 'Файл/Документ/Раздел3/Стр25/Гр1';   R3_25_1 := GetDblVal(aR3_25_1);
  aR3_26_1 := 'Файл/Документ/Раздел3/Стр26/Гр1';   R3_26_1 := GetDblVal(aR3_26_1);
  aR3_22_2 := 'Файл/Документ/Раздел3/Стр22/Гр2';   R3_22_2 := GetDblVal(aR3_22_2);
  aR3_23_2 := 'Файл/Документ/Раздел3/Стр23/Гр2';   R3_23_2 := GetDblVal(aR3_23_2);
  aR3_24_2 := 'Файл/Документ/Раздел3/Стр24/Гр2';   R3_24_2 := GetDblVal(aR3_24_2);
  aR3_25_2 := 'Файл/Документ/Раздел3/Стр25/Гр2';   R3_25_2 := GetDblVal(aR3_25_2);
  aR3_22_3 := 'Файл/Документ/Раздел3/Стр22/Гр3';   R3_22_3 := GetDblVal(aR3_22_3);
  aR3_23_3 := 'Файл/Документ/Раздел3/Стр23/Гр3';   R3_23_3 := GetDblVal(aR3_23_3);
  aR3_24_3 := 'Файл/Документ/Раздел3/Стр24/Гр3';   R3_24_3 := GetDblVal(aR3_24_3);
  aR3_25_3 := 'Файл/Документ/Раздел3/Стр25/Гр3';   R3_25_3 := GetDblVal(aR3_25_3);

  // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  getMes := 'Значение строки 23 должно быть меньше либо равно значения строки 22';
  #_IfNot(( R3_23_1 <= R3_22_1 ), aR3_23_1, 'Стр. 23, гр. 1')
  #_IfNot(( R3_23_2 <= R3_22_2 ), aR3_23_2, 'Стр. 23, гр. 2')
  #_IfNot(( R3_23_3 <= R3_22_3 ), aR3_23_3, 'Стр. 23, гр. 3')

  getMes := 'Значение строки 24 должно быть меньше либо равно значения строки 22';
  #_IfNot(( R3_24_1 <= R3_22_1 ), aR3_24_1, 'Стр. 24, гр. 1')
  #_IfNot(( R3_24_2 <= R3_22_2 ), aR3_24_2, 'Стр. 24, гр. 2')
  #_IfNot(( R3_24_3 <= R3_22_3 ), aR3_24_3, 'Стр. 24, гр. 3')

  getMes := 'Значение строки 25 должно быть меньше либо равно значения строки 24';
  #_IfNot(( R3_25_1 <= R3_24_1 ), aR3_25_1, 'Стр. 25, гр. 1')
  #_IfNot(( R3_25_2 <= R3_24_2 ), aR3_25_2, 'Стр. 25, гр. 2')
  #_IfNot(( R3_25_3 <= R3_24_3 ), aR3_25_3, 'Стр. 25, гр. 3')

  // #endregion РАЗДЕЛ 3

/*
Контроль показателей по форме N П-1

раздел 1
1. строка 11 <= 5 строки 01 по соответствующим графам.
2. строка 12 <= строки 01 по соответствующим графам.
3. строка 14 <= строки 13 по соответствующим графам.
4. если строка 02 <> 0, то строки 22 и/или 26 и/или 27 <> 0, кроме организаций с кодами ОКВЭД2 35.14, 35.23.11 - 35.23.22, 35.30.6, 68.10.21 - 68.10.23.

раздел 2
5. сумма данных, приведенных по свободным строкам (строка 21) = строке 01 по соответствующим графам.

раздел 3
6. строка 23 <= строки 22 по соответствующим графам.
7. строка 24 <= строки 22 по соответствующим графам.
8. строка 25 <= строки 24 по соответствующим графам.

раздел 4
9. строка 30 <= строки 29 по соответствующим графам
10. строка 32 <= строки 31 по соответствующим графам
11. если строка 29 <> 0, то строка 31 <> 0 по соответствующим графам
12. если строка 30 <> 0, то строка 32 <> 0 по соответствующим графам

раздел 5
13. если строка с кодом 70 (графа 4) <> 0, то строка 22 (графа 1) <> 0
14. если строка с кодом 80 (графа 4) <> 0, то строка 26 (графа 1) <> 0
15. если строка с кодом 50 (графа 4) <> 0, то строка 01 (графа 1) <> 0
16. по строке с кодом 50 графа 4 >= графы 5
*/

  // #region РАЗДЕЛ 4

  // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  aR4_29_1 := 'Файл/Документ/Раздел4/Стр29/Гр1';   R4_29_1 := GetDblVal(aR4_29_1);
  aR4_30_1 := 'Файл/Документ/Раздел4/Стр30/Гр1';   R4_30_1 := GetDblVal(aR4_30_1);
  aR4_31_1 := 'Файл/Документ/Раздел4/Стр31/Гр1';   R4_31_1 := GetDblVal(aR4_31_1);
  aR4_32_1 := 'Файл/Документ/Раздел4/Стр32/Гр1';   R4_32_1 := GetDblVal(aR4_32_1);
  aR4_29_2 := 'Файл/Документ/Раздел4/Стр29/Гр2';   R4_29_2 := GetDblVal(aR4_29_2);
  aR4_30_2 := 'Файл/Документ/Раздел4/Стр30/Гр2';   R4_30_2 := GetDblVal(aR4_30_2);
  aR4_31_2 := 'Файл/Документ/Раздел4/Стр31/Гр2';   R4_31_2 := GetDblVal(aR4_31_2);
  aR4_32_2 := 'Файл/Документ/Раздел4/Стр32/Гр2';   R4_32_2 := GetDblVal(aR4_32_2);
  aR4_29_3 := 'Файл/Документ/Раздел4/Стр29/Гр3';   R4_29_3 := GetDblVal(aR4_29_3);
  aR4_30_3 := 'Файл/Документ/Раздел4/Стр30/Гр3';   R4_30_3 := GetDblVal(aR4_30_3);
  aR4_31_3 := 'Файл/Документ/Раздел4/Стр31/Гр3';   R4_31_3 := GetDblVal(aR4_31_3);
  aR4_32_3 := 'Файл/Документ/Раздел4/Стр32/Гр3';   R4_32_3 := GetDblVal(aR4_32_3);

  // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

  getMes := 'Значение строки 30 должно быть меньше либо равно значения строки 29';
  #_IfNot(( R4_30_1 <= R4_29_1 ), aR4_30_1, 'Стр. 30, гр. 1')
  #_IfNot(( R4_30_2 <= R4_29_2 ), aR4_30_2, 'Стр. 30, гр. 2')
  #_IfNot(( R4_30_3 <= R4_29_3 ), aR4_30_3, 'Стр. 30, гр. 3')

  getMes := 'Значение строки 32 должно быть меньше либо равно значения строки 31';
  #_IfNot(( R4_32_1 <= R4_31_1 ), aR4_32_1, 'Стр. 32, гр. 1')
  #_IfNot(( R4_32_2 <= R4_31_2 ), aR4_32_2, 'Стр. 32, гр. 2')
  #_IfNot(( R4_32_3 <= R4_31_3 ), aR4_32_3, 'Стр. 32, гр. 3')

  getMes := 'Если строка 29 <> 0, то строка 31 <> 0 по соответствующим графам';
  #_IfNot((((R4_29_1 = 0) and (R4_31_1 = 0)) or ((R4_29_1 <> 0) and (R4_31_1 <> 0))), aR4_31_1, 'Стр. 31, гр. 1')
  #_IfNot((((R4_29_2 = 0) and (R4_31_2 = 0)) or ((R4_29_2 <> 0) and (R4_31_2 <> 0))), aR4_31_2, 'Стр. 31, гр. 2')
  #_IfNot((((R4_29_3 = 0) and (R4_31_3 = 0)) or ((R4_29_3 <> 0) and (R4_31_3 <> 0))), aR4_31_3, 'Стр. 31, гр. 3')

  getMes := 'Если строка 30 <> 0, то строка 32 <> 0 по соответствующим графам';
  #_IfNot((((R4_30_1 = 0) and (R4_32_1 = 0)) or ((R4_30_1 <> 0) and (R4_32_1 <> 0))), aR4_32_1, 'Стр. 32, гр. 1')
  #_IfNot((((R4_30_2 = 0) and (R4_32_2 = 0)) or ((R4_30_2 <> 0) and (R4_32_2 <> 0))), aR4_32_2, 'Стр. 32, гр. 2')
  #_IfNot((((R4_30_3 = 0) and (R4_32_3 = 0)) or ((R4_30_3 <> 0) and (R4_32_3 <> 0))), aR4_32_3, 'Стр. 32, гр. 3')

  // #endregion РАЗДЕЛ 4

  // #region РАЗДЕЛ 5

  CountI := XMLMap.GetNodeCountByName('Файл/Документ/Раздел5/Стр');
  for (i := 0; i < CountI; i++)
  {
    // #region ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

    XMLAdrI := 'Файл/Документ/Раздел5/Стр' + getIter(i);

    aR5_A := XMLAdrI + '/ГрА';   R5_A := GetStrVal(aR5_A);
    aR5_B := XMLAdrI + '/ГрБ';   R5_B := GetStrVal(aR5_B);
    aR5_V := XMLAdrI + '/ГрВ';   R5_V := GetStrVal(aR5_V);
    aR5_G := XMLAdrI + '/ГрГ';   R5_G := GetStrVal(aR5_G);
    aR5_D := XMLAdrI + '/ГрД';   R5_D := GetStrVal(aR5_D);
    aR5_1 := XMLAdrI + '/Гр1';   R5_1 := GetDblVal(aR5_1);
    aR5_2 := XMLAdrI + '/Гр2';   R5_2 := GetDblVal(aR5_2);
    aR5_3 := XMLAdrI + '/Гр3';   R5_3 := GetDblVal(aR5_3);
    aR5_4 := XMLAdrI + '/Гр4';   R5_4 := GetDblVal(aR5_4);
    aR5_5 := XMLAdrI + '/Гр5';   R5_5 := GetDblVal(aR5_5);
    aR5_6 := XMLAdrI + '/Гр6';   R5_6 := GetDblVal(aR5_6);
    aR5_7 := XMLAdrI + '/Гр7';   R5_7 := GetDblVal(aR5_7);

    // #endregion ИНИЦИЛИЗАЦИЯ ПЕРЕМЕННЫХ

    case R5_B of
      '50': { // Б = 50: заполняются графы В, Г, 1 - 7
              getMes := 'Если строка с кодом 50 (графа 4) <> 0, то строка 01 (графа 1) <> 0';
              #_IfNot((((R5_4 = 0) and (R1_01_1 = 0)) or ((R5_4 <> 0) and (R1_01_1 <> 0))), aR5_4, 'Гр. 4')

              getMes := 'По строке с кодом 50 графа 4 >= графы 5';
              #_IfNot((R5_4 >= R5_5), aR5_4, 'Гр. 4')

              #_IfNotNull(aR5_A, 'Гр. А')
              #_IfNotNull(aR5_B, 'Гр. Б')
              #_IfNotNull(aR5_V, 'Гр. В')
              #_IfNotNull(aR5_G, 'Гр. Г')
            /*#_IfNotNull(aR5_D, 'Гр. Д')*/
              #_IfNotNull(aR5_1, 'Гр. 1')
              #_IfNotNull(aR5_2, 'Гр. 2')
              #_IfNotNull(aR5_3, 'Гр. 3')
              #_IfNotNull(aR5_4, 'Гр. 4')
              #_IfNotNull(aR5_5, 'Гр. 5')
              #_IfNotNull(aR5_6, 'Гр. 6')
              #_IfNotNull(aR5_7, 'Гр. 7')
            }
      '70': { // Б = 70: заполняются графы В, Г, 4, 7
              getMes := 'Если строка с кодом 70 (графа 4) <> 0, то строка 22 (графа 1) <> 0';
              #_IfNot((((R5_4 = 0) and (R3_22_1 = 0)) or ((R5_4 <> 0) and (R3_22_1 <> 0))), aR5_4, 'Гр. 4')

              #_IfNotNull(aR5_A, 'Гр. А')
              #_IfNotNull(aR5_B, 'Гр. Б')
              #_IfNotNull(aR5_V, 'Гр. В')
              #_IfNotNull(aR5_G, 'Гр. Г')
            /*#_IfNotNull(aR5_D, 'Гр. Д')*/
              #_IfNull   (aR5_1, 'Гр. 1')
              #_IfNull   (aR5_2, 'Гр. 2')
              #_IfNull   (aR5_3, 'Гр. 3')
              #_IfNotNull(aR5_4, 'Гр. 4')
              #_IfNull   (aR5_5, 'Гр. 5')
              #_IfNull   (aR5_6, 'Гр. 6')
              #_IfNotNull(aR5_7, 'Гр. 7')
            }
      '80': { // Б = 80: заполняются графы В, Г, 4, 7
              getMes := 'Если строка с кодом 80 (графа 4) <> 0, то строка 26 (графа 1) <> 0';
              #_IfNot((((R5_4 = 0) and (R3_26_1 = 0)) or ((R5_4 <> 0) and (R3_26_1 <> 0))), aR5_4, 'Гр. 4')

              #_IfNotNull(aR5_A, 'Гр. А')
              #_IfNotNull(aR5_B, 'Гр. Б')
              #_IfNotNull(aR5_V, 'Гр. В')
              #_IfNotNull(aR5_G, 'Гр. Г')
            /*#_IfNotNull(aR5_D, 'Гр. Д')*/
              #_IfNull   (aR5_1, 'Гр. 1')
              #_IfNull   (aR5_2, 'Гр. 2')
              #_IfNull   (aR5_3, 'Гр. 3')
              #_IfNotNull(aR5_4, 'Гр. 4')
              #_IfNull   (aR5_5, 'Гр. 5')
              #_IfNull   (aR5_6, 'Гр. 6')
              #_IfNotNull(aR5_7, 'Гр. 7')
            }
      else  {
              if (R5_B <> '')
                #_InsMes(aR5_B, 'Гр. Б', 'Значение гр. Б должно принимать значения 50, 70 или 80')
            }
    end;
  }

  aR5_Sprav := 'Файл/Документ/Раздел5/Справочно/Электроэн';

  // Заполняется в отчете за март, июнь, сентябрь, декабрь
  if (flKonKv)
  then { #_IfNotNull(aR5_Sprav, 'Потребление электроэнергии') }
  else { #_IfNull   (aR5_Sprav, 'Потребление электроэнергии') }

  // #endregion РАЗДЕЛ 5


  #_IfNotNull('Файл/Документ/Наим'               , 'Наименование организации')
  #_IfNotNull('Файл/Документ/Адрес'              , 'Адрес'                   )
  #_IfNotNull('Файл/Документ/ОКПО'               , 'ОКПО'                    )
  #_IfNotNull('Файл/Документ/Тел'                , 'Телефон'                 )
  #_IfNotNull('Файл/Документ/Подписант/Должность', 'Должность'               )
  #_IfNotNull('Файл/Документ/Подписант/ФИО'      , 'ФИО'                     )


  if ((GetStrVal('Файл/Документ/Дата') = '') or (GetStrVal('Файл/Документ/Дата') = 'ДД мес ГГГГ'))
    MessageErrorStop_ALG('Файл/Документ/Дата', 'Дата документа', getMes);


  Result := True;
@end. // On_CheckKS
// #endregion ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ КОНТРОЛЬНЫХ СООТНОШЕНИЙ
//************************************************************************************************************


//============================================================================================================
// #region On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//------------------------------------------------------------------------------------------------------------
@Script On_Recalc : boolean;
@begin
  //Документ
  if ((GetStrVal('Файл/Документ/Дата') = '') or (GetStrVal('Файл/Документ/Дата') = 'ДД мес ГГГГ'))
    SetFldVal(DateToStr(Cur_Date, 'DD mon YYYY'), 'Файл/Документ/Дата');
@end.
// #endregion On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//************************************************************************************************************
