//------------------------------------------------------------------------------------------------------------
//                                                                                    (c) корпорация Галактика
// Галактика 9.1 - модуль "Электронная отчетность"
// Алгоритмы расчета : "Сведения о просроченной задолженности по заработной плате (3-Ф) (2020)"
//------------------------------------------------------------------------------------------------------------


//============================================================================================================
// #region СЕРВИСНЫЕ МЕТОДЫ
//------------------------------------------------------------------------------------------------------------
@Script GetStrVal(fld:string):string;
@begin
  Result := Trim(XMLMAP.GetAttrValueByName(fld));
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetDblVal(fld:string):double;
@begin
  Result := Double(XMLMAP.GetAttrValueByName(fld));
@end.

//------------------------------------------------------------------------------------------------------------
@Script SetFldVal(fld:string; val:variant);
@begin
  XMLMAP.SetVariantAttrValueByName_Formula(fld, val, 2);
@end.

//------------------------------------------------------------------------------------------------------------
@Script MessageErrorStop_ALG(mesMesAdrXML, mesPole, mesMes: string): boolean;
@begin
  MesError.InsertMesError(mesMesAdrXML, Comp(0), '', mesPole, mesMes);
  Result := True;
@end.

//------------------------------------------------------------------------------------------------------------
@Script NullStr(fld:string):Boolean;
@begin
  Result := (GetStrVal(fld) = '');
@end.

// #endregion СЕРВИСНЫЕ МЕТОДЫ
//************************************************************************************************************


//============================================================================================================
// #region On_Check ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ ПОЛЕЙ
//------------------------------------------------------------------------------------------------------------
@Script On_Check : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_Check
  //----------------------------------------------------------------------------------------------------------
  #undef _IsValid
  #declare _IsValid(_Valid, _AdrXML, _Pole)
    if not #_Valid(#_AdrXML, getMes)
      MessageErrorStop_ALG
      (
        #_AdrXML
      , #_Pole
      , 'Поле не соответствует формату. ' + getMes
      );
  #end

  //----------------------------------------------------------------------------------------------------------
  #undef _IsValidNull
  #declare _IsValidNull(_Valid, _AdrXML, _Pole)
    if not #_Valid(#_AdrXML, getMes)
      MessageErrorStop_ALG
      (
        #_AdrXML
      , #_Pole
      , 'Поле не соответствует формату. Поле обязательно к заполнению'
      );
  #end

  //----------------------------------------------------------------------------------------------------------
  #declare _IfNot(_If, _Name, _XMLAdr, _Mes)
    if not (#_If)
      MessageErrorStop_ALG (#_XMLAdr, #_Name, #_Mes);
  #end

  //----------------------------------------------------------------------------------------------------------
  #declare _IfNotBuf(_If, _Name, _XMLAdr, _Mes)
    if not (#_If)
      MessageErrorStop_ALG (#_XMLAdr, #_Name, #_Mes + ' (РАССЧ. '+String(bufRes)+')');
  #end

  //----------------------------------------------------------------------------------------------------------
  #declare _IfNotEqualBuf(_Pole, _Name)
    if not (bufRes = d#_Pole)
      MessageErrorStop_ALG (a#_Pole, #_Name, getMes + ' (РАССЧ. '+String(bufRes)+')');
  #end

  //----------------------------------------------------------------------------------------------------------
  function IsValidDate(_adr: string; var _mes: string) : boolean;
  begin //Дата
    _mes := 'Поле обязательно к заполнению';

    Result := False;
    Result := ((not NullStr(_adr)) and (GetStrVal(_adr) <> 'ДД мес ГГГГ'));
  end;

  //----------------------------------------------------------------------------------------------------------
  function IsValidNull(_adr: string; var _mes: string) : boolean;
  begin // Обязательные поля
    _mes := 'Поле обязательно к заполнению';

    Result := False;
    Result := not NullStr(_adr);
  end;

  // #endregion СЕРВИС On_Check
  //**********************************************************************************************************
@begin

  //----------------------------------------------------------------------------------------------------------
  // #region ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  var getMes: string;
  var bufRes: double;

  var a01_3, a02_3, a03_3, a03_4, a04_3, a04_4, a05_3, a05_4, a06_3, a06_4, a07_3, a08_3, a09_3, a10_3, a11_3
    , mes01, mes02, mes03, mes04, mes05, mes06, mes07, mes08, mes09, mes10, mes11, mes12: string;

  var d01_3, d02_3, d03_3, d03_4, d04_3, d04_4, d05_3, d05_4, d06_3, d06_4, d07_3, d08_3, d09_3, d10_3, d11_3: double;

  // #endregion ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ


  #_IsValid(IsValidDate, 'Файл/Документ/ДатаДок', 'Дата документа')

  #_IsValidNull(IsValidNull, 'Файл/Документ/Орг/НаимОрг'     , 'Наименование организации')
  #_IsValidNull(IsValidNull, 'Файл/Документ/Орг/Адр'         , 'Адрес'                   )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Орг/ОКПО'        , 'ОКПО'                    )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Руков/Должн'     , 'Руководитель: Должность' )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Руков/ФИО'       , 'Руководитель: ФИО'       )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Подписант/Должн' , 'Подписант: Должность'    )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Подписант/ФИО'   , 'Подписант: ФИО'          )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Подписант/Тел'   , 'Подписант: Телефон'      )
  #_IsValidNull(IsValidNull, 'Файл/Документ/Подписант/E_mail', 'Подписант: E-mail'       )


  //----------------------------------------------------------------------------------------------------------
  // #region ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  mes01 := '01 :: Стр. 02 гр. 3 <= стр. 01 гр. 3'                                      ;
  mes02 := '02 :: Стр. 03 гр. 3 <= стр. 01 гр. 3'                                      ;
  mes03 := '03 :: Стр. 03 гр. 3 = сумма строк 04, 05, 06, гр. 3'                       ;
  mes04 := '04 :: Стр. 03 гр. 4 = сумма строк 04, 05, 06, гр. 4'                       ;
  mes05 := '05 :: Каждая из строк с 03 по 06 гр. 4 <= каждой из строк с 03 по 06 гр. 3';
  mes06 := '06 :: Стр. 07 гр. 3 > 0'                                                   ;
  mes07 := '07 :: Стр. 07 гр. 3 >= стр. 02 гр. 3'                                      ;
  mes08 := '08 :: Если стр. 01 гр. 3 > 0, то стр. 07 и 08 гр. 3 > 0'                   ;
  mes09 := '09 :: Каждая из строк 09, 10, 11 гр. 3 <= стр. 01 гр. 3'                   ;
  mes10 := '10 :: Стр. 11 гр. 3 <= суммы стр. 09 и 10 гр. 3'                           ;
  mes11 := '11 :: Сумма строк 09 и 10 гр. 3 <= стр. 01 гр. 3'                          ;
  mes12 := '12 :: Строки 01, 02, 07, 08, 09, 10, 11 гр. 4 = 0'                         ;

  // #endregion ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  //----------------------------------------------------------------------------------------------------------
  // #region ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

  a01_3 := 'Файл/Документ/Разд1/Стр01/Стр01Гр3';  d01_3 := GetDblVal(a01_3);
  a02_3 := 'Файл/Документ/Разд1/Стр02/Стр02Гр3';  d02_3 := GetDblVal(a02_3);
  a03_3 := 'Файл/Документ/Разд1/Стр03/Стр03Гр3';  d03_3 := GetDblVal(a03_3);
  a03_4 := 'Файл/Документ/Разд1/Стр03/Стр03Гр4';  d03_4 := GetDblVal(a03_4);
  a04_3 := 'Файл/Документ/Разд1/Стр04/Стр04Гр3';  d04_3 := GetDblVal(a04_3);
  a04_4 := 'Файл/Документ/Разд1/Стр04/Стр04Гр4';  d04_4 := GetDblVal(a04_4);
  a05_3 := 'Файл/Документ/Разд1/Стр05/Стр05Гр3';  d05_3 := GetDblVal(a05_3);
  a05_4 := 'Файл/Документ/Разд1/Стр05/Стр05Гр4';  d05_4 := GetDblVal(a05_4);
  a06_3 := 'Файл/Документ/Разд1/Стр06/Стр06Гр3';  d06_3 := GetDblVal(a06_3);
  a06_4 := 'Файл/Документ/Разд1/Стр06/Стр06Гр4';  d06_4 := GetDblVal(a06_4);
  a07_3 := 'Файл/Документ/Разд1/Стр07/Стр07Гр3';  d07_3 := GetDblVal(a07_3);
  a08_3 := 'Файл/Документ/Разд1/Стр08/Стр08Гр3';  d08_3 := GetDblVal(a08_3);
  a09_3 := 'Файл/Документ/Разд1/Стр09/Стр09Гр3';  d09_3 := GetDblVal(a09_3);
  a10_3 := 'Файл/Документ/Разд1/Стр10/Стр10Гр3';  d10_3 := GetDblVal(a10_3);
  a11_3 := 'Файл/Документ/Разд1/Стр11/Стр11Гр3';  d11_3 := GetDblVal(a11_3);

  // #endregion ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

  //----------------------------------------------------------------------------------------------------------
  // #region 01 :: Стр. 02 гр. 3 <= стр. 01 гр. 3

  #_IfNot(d02_3 <= d01_3, 'Стр. 02, гр. 3', a02_3, mes01)

  // #endregion 01 :: Стр. 02 гр. 3 <= стр. 01 гр. 3

  //----------------------------------------------------------------------------------------------------------
  // #region 02 :: Стр. 03 гр. 3 <= стр. 01 гр. 3

  #_IfNot(d03_3 <= d01_3, 'Стр. 03, гр. 3', a03_3, mes02)

  // #endregion 02 :: Стр. 03 гр. 3 <= стр. 01 гр. 3

  //----------------------------------------------------------------------------------------------------------
  // #region 03 :: Стр. 03 гр. 3 = сумма строк 04, 05, 06, гр. 3

  getMes := mes03;

  bufRes := d04_3 + d05_3 + d06_3;

  #_IfNotEqualBuf(03_3, 'Стр. 03, гр. 3')

  // #endregion 03 :: Стр. 03 гр. 3 = сумма строк 04, 05, 06, гр. 3

  //----------------------------------------------------------------------------------------------------------
  // #region 04 :: Стр. 03 гр. 4 = сумма строк 04, 05, 06, гр. 4

  getMes := mes04;

  bufRes := d04_4 + d05_4 + d06_4;

  #_IfNotEqualBuf(03_4, 'Стр. 03, гр. 4')

  // #endregion 04 :: Стр. 03 гр. 4 = сумма строк 04, 05, 06, гр. 4

  //----------------------------------------------------------------------------------------------------------
  // #region 05 :: Каждая из строк с 03 по 06 гр. 4 <= каждой из строк с 03 по 06 гр. 3

  #_IfNot(d03_4 <= d03_3, 'Стр. 03, гр. 4', a03_4, mes05)
  #_IfNot(d04_4 <= d04_3, 'Стр. 04, гр. 4', a04_4, mes05)
  #_IfNot(d05_4 <= d05_3, 'Стр. 05, гр. 4', a05_4, mes05)
  #_IfNot(d06_4 <= d06_3, 'Стр. 06, гр. 4', a06_4, mes05)

  // #endregion 05 :: Каждая из строк с 03 по 06 гр. 4 <= каждой из строк с 03 по 06 гр. 3

  //----------------------------------------------------------------------------------------------------------
  // #region 06 :: Стр. 07 гр. 3 > 0

  #_IfNot(d07_3 > 0, 'Стр. 07, гр. 3', a07_3, mes06)

  // #endregion 06 :: Стр. 07 гр. 3 > 0

  //----------------------------------------------------------------------------------------------------------
  // #region 07 :: Стр. 07 гр. 3 >= стр. 02 гр. 3

  #_IfNot(d07_3 >= d02_3, 'Стр. 07, гр. 3', a07_3, mes07)

  // #endregion 07 :: Стр. 07 гр. 3 >= стр. 02 гр. 3

  //----------------------------------------------------------------------------------------------------------
  // #region 08 :: Если стр. 01 гр. 3 > 0, то стр. 07 и 08 гр. 3 > 0

  if (d01_3 > 0)
  {
    #_IfNot(d07_3 > 0, 'Стр. 07, гр. 3', a07_3, mes08)
    #_IfNot(d08_3 > 0, 'Стр. 08, гр. 3', a08_3, mes08)
  }

  // #endregion 08 :: Если стр. 01 гр. 3 > 0, то стр. 07 и 08 гр. 3 > 0

  //----------------------------------------------------------------------------------------------------------
  // #region 09 :: Каждая из строк 09, 10, 11 гр. 3 <= стр. 01 гр. 3

  #_IfNot(d09_3 <= d01_3, 'Стр. 09, гр. 3', a09_3, mes09)
  #_IfNot(d10_3 <= d01_3, 'Стр. 10, гр. 3', a10_3, mes09)
  #_IfNot(d11_3 <= d01_3, 'Стр. 11, гр. 3', a11_3, mes09)

  // #endregion 09 :: Каждая из строк 09, 10, 11 гр. 3 <= стр. 01 гр. 3

  //----------------------------------------------------------------------------------------------------------
  // #region 10 :: Стр. 11 гр. 3 <= суммы стр. 09 и 10 гр. 3

  bufRes := d09_3 + d10_3;

  #_IfNotBuf(d11_3 <= bufRes, 'Стр. 11, гр. 3', a11_3, mes10)

  // #endregion 10 :: Стр. 11 гр. 3 <= суммы стр. 09 и 10 гр. 3

  //----------------------------------------------------------------------------------------------------------
  // #region 11 :: Сумма строк 09 и 10 гр. 3 <= стр. 01 гр. 3

  bufRes := d09_3 + d10_3;

  #_IfNotBuf(bufRes <= d01_3, 'Стр. 01, гр. 3', a01_3, mes11)

  // #endregion 11 :: Сумма строк 09 и 10 гр. 3 <= стр. 01 гр. 3

@end.
// #endregion On_Check ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ ПОЛЕЙ
//************************************************************************************************************


//============================================================================================================
// #region On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//------------------------------------------------------------------------------------------------------------
@Script On_Recalc : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_Recalc
  //----------------------------------------------------------------------------------------------------------
  procedure LogInfo(_strAdr, _strMes, _strVal : string);
  {
    MesError.InsertRasch('', _strAdr, _strMes, _strVal, 0);
  }

  //----------------------------------------------------------------------------------------------------------
  procedure SetFldGV(_fld : string; var _val : double);
  {
    SetFldVal(_fld, _val);
    _val := GetDblVal(_fld);
  }

  //----------------------------------------------------------------------------------------------------------
  function GD(_val : double) : string;
  {
    Result := IF(_val < 0
                , '('+DoubleToStr(Round(_val, 1), '[|-]36666666666666666666666666~9')+')'
                ,     DoubleToStr(Round(_val, 1), '[|-]36666666666666666666666666~9')    );
  }

  // #endregion СЕРВИС On_Recalc
  //**********************************************************************************************************
@begin
  #define _LogInfo(_Name) LogInfo(a#_Name, getMes, v#_Name);
  #define _SetFldGV(_Name) SetFldGV(a#_Name, d#_Name);

  //----------------------------------------------------------------------------------------------------------
  // #region ТИТУЛЬНЫЙ ЛИСТ

  if ((GetStrVal('Файл/Документ/ДатаДок') = '') or (GetStrVal('Файл/Документ/ДатаДок') = 'ДД.ММ.ГГГГ'))
    SetFldVal('Файл/Документ/ДатаДок', DateToStr(Cur_Date, XMLMap.GetAttrVFormatByName('Файл/Документ/ДатаДок')));

  // #endregion ТИТУЛЬНЫЙ ЛИСТ

  //----------------------------------------------------------------------------------------------------------
  // #region ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  var a03_3, a03_4, a04_3, a04_4, a05_3, a05_4, a06_3, a06_4
    , v03_3, v03_4
    , mes03, mes04
    , getMes: string;

      // Расчитываются
  var d03_3, d03_4
      // Участвуют в расчет
    , d04_3, d04_4, d05_3, d05_4, d06_3, d06_4: double;

  // #endregion ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  //----------------------------------------------------------------------------------------------------------
  // #region ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  mes03 := 'Стр. 03 гр. 3 = сумма строк 04, 05, 06, гр. 3';
  mes04 := 'Стр. 03 гр. 4 = сумма строк 04, 05, 06, гр. 4';

  // #endregion ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  //----------------------------------------------------------------------------------------------------------
  // #region ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

  v03_3 := v03_4 := '';
  d03_3 := d03_4 := d04_3 := d04_4 := d05_3 := d05_4 := d06_3 := d06_4 := 0;

  a03_3 := 'Файл/Документ/Разд1/Стр03/Стр03Гр3';
  a03_4 := 'Файл/Документ/Разд1/Стр03/Стр03Гр4';
  a04_3 := 'Файл/Документ/Разд1/Стр04/Стр04Гр3';  d04_3 := GetDblVal(a04_3);
  a04_4 := 'Файл/Документ/Разд1/Стр04/Стр04Гр4';  d04_4 := GetDblVal(a04_4);
  a05_3 := 'Файл/Документ/Разд1/Стр05/Стр05Гр3';  d05_3 := GetDblVal(a05_3);
  a05_4 := 'Файл/Документ/Разд1/Стр05/Стр05Гр4';  d05_4 := GetDblVal(a05_4);
  a06_3 := 'Файл/Документ/Разд1/Стр06/Стр06Гр3';  d06_3 := GetDblVal(a06_3);
  a06_4 := 'Файл/Документ/Разд1/Стр06/Стр06Гр4';  d06_4 := GetDblVal(a06_4);

  // #endregion ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

  //----------------------------------------------------------------------------------------------------------
  // #region Стр. 03 гр. 3 = сумма строк 04, 05, 06, гр. 3

  getMes := mes03;

  d03_3 := d04_3 + d05_3 + d06_3;  #_SetFldGV(03_3)
  v03_3 := GD(d03_3)+' = '+GD(d04_3)+' + '+GD(d05_3)+' + '+GD(d06_3);  #_LogInfo(03_3)

  // #endregion Стр. 03 гр. 3 = сумма строк 04, 05, 06, гр. 3

  //----------------------------------------------------------------------------------------------------------
  // #region Стр. 03 гр. 4 = сумма строк 04, 05, 06, гр. 4

  getMes := mes04;

  d03_4 := d04_4 + d05_4 + d06_4;  #_SetFldGV(03_4)
  v03_4 := GD(d03_4)+' = '+GD(d04_4)+' + '+GD(d05_4)+' + '+GD(d06_4);  #_LogInfo(03_4)

  // #endregion Стр. 03 гр. 4 = сумма строк 04, 05, 06, гр. 4

@end.
// #endregion On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//************************************************************************************************************
