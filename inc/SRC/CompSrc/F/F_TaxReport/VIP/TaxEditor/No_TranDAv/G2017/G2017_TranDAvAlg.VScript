//------------------------------------------------------------------------------------------------------------
//                                                                                    (c) корпорация Галактика
// Галактика 9.1 - модуль "Электронная отчетность"
// Алгоритмы расчета : "Декларация по налогу на транспорт (авансы) (2017)"
//------------------------------------------------------------------------------------------------------------


//============================================================================================================
// #region СЕРВИСНЫЕ МЕТОДЫ
//------------------------------------------------------------------------------------------------------------
@Script SetFldVal(fld:string; val:variant);
@begin
  XMLMAP.SetVariantAttrValueByName_Formula(fld,val,2);
@end.

//------------------------------------------------------------------------------------------------------------
@Script SetFldVis(fld:string;vis:boolean);
@begin
  XMLMAP.SetAttrVisByName(fld,vis);
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetStrVal(fld:string):string;
@begin
  Result := Trim(String(XMLMAP.GetAttrValueByName(fld)));
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetDblVal(fld:string):double;
@begin
  Result := Double(XMLMAP.GetAttrValueByName(fld));
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetDateVal(fld:string):date;
@begin
  Result := StrToDate(GetStrVal(fld), XMLMAP.GetAttrVFormatByName(fld));
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetDolVal(_fld : string) : double;
@begin
  var posSlash : byte;
  var ChDoli, ZnDoli : double = 0;
  var Doly : string = '';

  Doly := XMLMAP.GetAttrValueByName(_fld);
  posSlash := Pos('/', Doly);

  ChDoli := SubStr(Doly, 0           , posSlash - 1);
  ZnDoli := SubStr(Doly, posSlash + 1, Length(Doly));

  Result := ChDoli / ZnDoli;
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetWordVal(fld:string):word;
@begin
  Result := Word(XMLMAP.GetAttrValueByName(fld));
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetFldVis(fld:string):boolean;
@begin
  Result := XMLMAP.GetAttrVisByName(fld);
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetIter(iter:longint):string;
@begin
  Result := '';

  if (iter > 0)
    Result := '[' + String(iter) + ']';
@end.

//------------------------------------------------------------------------------------------------------------
@Script MessageErrorStop(_XMLAdr, _Field, _Message : string) : boolean;
@begin
  MesError.InsertMesError(_XMLAdr, Comp(0), '', _Field, _Message, 0);
  Result := True;
@end.

//------------------------------------------------------------------------------------------------------------
@Script MessageWarningStop(_XMLAdr, _Field, _Message : string) : boolean;
@begin
  MesError.InsertMesWarning(_XMLAdr, Comp(0), '', _Field, _Message, 0);
  Result := True;
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetStrNull(fld:string):boolean;
@begin
  Result := XMLMAP.GetIsNullAttrValueByName(fld);
@end.
// #endregion СЕРВИСНЫЕ МЕТОДЫ
//************************************************************************************************************


//============================================================================================================
// #region On_Visable ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ УСТАНОВКЕ ВИДИМОСТИ ПОЛЕЙ
//------------------------------------------------------------------------------------------------------------
@Script On_Visable : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_Visable
  //----------------------------------------------------------------------------------------------------------
  #undef IfVis
  #undef SetVisF
  #undef SetVisT

  #define IfVis(adrIfVis)   SetFldVis(#adrIfVis, not GetStrNull(#adrIfVis));
  #define SetVisF(adrIfVis) SetFldVis(#adrIfVis, False);
  #define SetVisT(adrIfVis) SetFldVis(#adrIfVis, True );

  //----------------------------------------------------------------------------------------------------------
  function IsFormReorg_1_6 : boolean;
  { // Элемент обязателен при <ФормРеорг> = 1 | 2 | 3 | 5 | 6
    var val : string; val := GetStrVal('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/ФормРеорг');
    Result := (    (val = '1')
                or (val = '2')
                or (val = '3')
                or (val = '5')
                or (val = '6') );
  }

  //----------------------------------------------------------------------------------------------------------
  function IsPrPodp_2 : boolean;
  { // Элемент обязателен при <ПрПодп>=2
    Result := ( GetStrVal('Файл/Документ/Подписант/ПрПодп') = '2' );
  }
  // #endregion СЕРВИС On_Visable
  //**********************************************************************************************************
@begin
  var i, j, CountI, CountJ : longint = 0;
  var XMLAdrI, XMLAdrJ : string = '';
  var flJ : boolean;


  // #region ТИТУЛЬНЫЙ ЛИСТ

  #IfVis('Файл/Документ/СвНП/Тлф')

  if ( not GetStrNull('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/ФормРеорг') )
  {
    #SetVisT('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ')

    if ( IsFormReorg_1_6 )
    {
      #SetVisT('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/ИННЮЛ')
      #SetVisT('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/КПП'  )
    }
    else
    {
      #IfVis('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/ИННЮЛ')
      #IfVis('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/КПП'  )
    }
  }
  else #SetVisF('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ')

  #IfVis('Файл/Документ/Подписант/ФИО/Отчество')

  if    ( IsPrPodp_2                                               )
     or ( not GetStrNull('Файл/Документ/Подписант/СвПред/НаимДок') )
  {
    #SetVisT('Файл/Документ/Подписант/СвПред'        )
    #IfVis  ('Файл/Документ/Подписант/СвПред/НаимОрг')
  }
  else #SetVisF('Файл/Документ/Подписант/СвПред')

  // #endregion ТИТУЛЬНЫЙ ЛИСТ


  // #region РАЗДЕЛ 1

  CountI := XMLMap.GetNodeCountByName('Файл/Документ/ТрНалНД/СумНалПУ/СумПУ');
  for (i := 0; i < CountI; i++)
  {
    XMLAdrI := 'Файл/Документ/ТрНалНД/СумНалПУ/СумПУ' + getIter(i);

    if    GetStrNull(XMLAdrI + '/ОКТМО'     )
       or GetStrNull(XMLAdrI + '/СумАвПлИсч')
    then { #SetVisF(XMLAdrI) Continue; }

    #IfVis(XMLAdrI + '/СумАвПлУпл')

    // #region РАЗДЕЛ 2

    flJ := False;

    CountJ := XMLMap.GetNodeCountByName(XMLAdrI + '/РасчНалТС');
    for (j := 0; j < CountJ; j++)
    {
      XMLAdrJ := XMLAdrI + '/РасчНалТС' + getIter(j);

      if    GetStrNull(XMLAdrJ + '/КодВидТС'    )
         or GetStrNull(XMLAdrJ + '/РегЗнакТС'   )
         or GetStrNull(XMLAdrJ + '/ДатаРегТС'   )
         or GetStrNull(XMLAdrJ + '/НалБаза'     )
         or GetStrNull(XMLAdrJ + '/ОКЕИНалБаза' )
         or GetStrNull(XMLAdrJ + '/ВладенТС'    )
         or GetStrNull(XMLAdrJ + '/ДоляТС'      )
         or GetStrNull(XMLAdrJ + '/КоэфКв'      )
         or GetStrNull(XMLAdrJ + '/НалСтавка'   )
         or GetStrNull(XMLAdrJ + '/СумИсчисл'   )
         or GetStrNull(XMLAdrJ + '/СумИсчислУпл')
      then { #SetVisF(XMLAdrJ) Continue; }
      else   #SetVisT(XMLAdrJ)

      flJ := True;

      #IfVis(XMLAdrJ + '/ИдНомТС'    )
      #IfVis(XMLAdrJ + '/МаркаТС'    )
      #IfVis(XMLAdrJ + '/ДатаСнРегТС')
      #IfVis(XMLAdrJ + '/ЭкологКл'   )
      #IfVis(XMLAdrJ + '/ВыпускТС'   )
      #IfVis(XMLAdrJ + '/ГодВыпТС'   )
      #IfVis(XMLAdrJ + '/КоэфКп'     )
      #IfVis(XMLAdrJ + '/ЛьготМесТС' )
      #IfVis(XMLAdrJ + '/КоэфКл'     )

      if    GetStrNull(XMLAdrJ + '/ЛьготОсвНал/КодОсвНал')
         or GetStrNull(XMLAdrJ + '/ЛьготОсвНал/СумОсвНал')
      then #SetVisF(XMLAdrJ + '/ЛьготОсвНал')
      else #SetVisT(XMLAdrJ + '/ЛьготОсвНал')

      if    GetStrNull(XMLAdrJ + '/ЛьготУменСум/КодУменСум')
         or GetStrNull(XMLAdrJ + '/ЛьготУменСум/СумУменСум')
      then #SetVisF(XMLAdrJ + '/ЛьготУменСум')
      else #SetVisT(XMLAdrJ + '/ЛьготУменСум')

      if    GetStrNull(XMLAdrJ + '/ЛьготСнижСтав/КодСнижСтав')
         or GetStrNull(XMLAdrJ + '/ЛьготСнижСтав/СумСнижСтав')
      then #SetVisF(XMLAdrJ + '/ЛьготСнижСтав')
      else #SetVisT(XMLAdrJ + '/ЛьготСнижСтав')
    }

    // #endregion РАЗДЕЛ 2

    if flJ then #SetVisT(XMLAdrI)
  }

  // #endregion РАЗДЕЛ 1
@end.
// #endregion On_Visable ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ УСТАНОВКЕ ВИДИМОСТИ ПОЛЕЙ
//************************************************************************************************************


//============================================================================================================
// #region On_Check ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ ПОЛЕЙ
//------------------------------------------------------------------------------------------------------------
@Script On_Check : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_Check
  //----------------------------------------------------------------------------------------------------------
  #include AllTaxObj.Vih

  // #region ПРОВЕРКИ

  // #region Налоговый период
  function IsValidPeriod(strIn: string; var strGetMes: string) : boolean;
  { // Период
    strGetMes := 'Возможные значения: 21, 17 или 18';

    Result := False;
    Result := CheckError.isRegExpr('^(21|17|18)$', strIn);
  };
  // #endregion Налоговый период
  //----------------------------------------------------------------------------------------------------------
  // #region По месту нахождения (учета)
  function IsValidPoMestu(strIn: string; var strGetMes: string) : boolean;
  { // ПоМесту
    strGetMes := 'Возможные значения: 213, 216 или 260';

    Result := False;
    Result := CheckError.isRegExpr('^(213|216|260)$', strIn);
  };
  // #endregion По месту нахождения (учета)
  //----------------------------------------------------------------------------------------------------------
  // #region Код вида ТС
  function IsValidKodVidTS(strIn: string; var strGetMes: string) : boolean;
  { // КодВидТС

    Result := False;

    if Year(TaxDat.dBeg) < 2019 {
      strGetMes := 'Возможные значения перечислены в Приложении N 5 к Порядку заполнения декларации';

      Result :=    CheckError.isRegExpr('^(41112|41113|41120|41121|41122|41124|41212|41213|41220|41221|41222|41224|41300|41401|41901|42010|42012)$', strIn)
                or CheckError.isRegExpr('^(42013|42030|42032|42033|42100|42200|42300|42400|42500|42600|42700|42701|42800|42910|42911|42912|42913)$', strIn)
                or CheckError.isRegExpr('^(42914|42921|42922|51000|51003|51004|52001|53001|53002|53003|53004|53005|54001|54002|54003|56100|56200)$', strIn)
                or CheckError.isRegExpr('^(56600|56700|57001|59010|59011|59012|59013|59014|59015|59016)$'                                          , strIn);
    }
    else {
      strGetMes := 'Возможные значения перечислены в Приложении N 5 к Порядку заполнения декларации (ред. от 26.11.2018)';

      Result :=    CheckError.isRegExpr('^(41112|41113|41121|41122|41124|41212|41213|41221|41222|41224|41300|41401|41901|42012|42013|42200|42300)$', strIn)
                or CheckError.isRegExpr('^(42400|42500|42600|42700|42800|42910|42921|42922|51000|51001|51004|52001|53001|53003|56600|56700|57000)$', strIn)
                or CheckError.isRegExpr('^(54000|56100|56200|59015)$'                                                                              , strIn);
    }
  };
  // #endregion Код вида ТС
  //----------------------------------------------------------------------------------------------------------
  // #region Единица измерения налоговой базы по ОКЕИ
  function IsValidOKEI_(strIn: string; var strGetMes: string) : boolean;
  { // ОКЕИНалБаза
    strGetMes := 'Возможные значения перечислены в Приложении N 6 к Порядку заполнения декларации';

    Result := False;
    Result := CheckError.isRegExpr('^(181|251|796|999)$', strIn);
  };
  // #endregion Единица измерения налоговой базы по ОКЕИ
  //----------------------------------------------------------------------------------------------------------
  // #region Экологический класс
  function IsValidEkologClass(strIn: string; var strGetMes: string) : boolean;
  { // ЭкологКл
    strGetMes := 'Возможные значения: 0, 1, 2, 3, 4, 5 или 6';

    Result := False;
    Result := CheckError.isRegExpr('^(0|1|2|3|4|5|6)$', strIn);
  };
  // #endregion Экологический класс
  //----------------------------------------------------------------------------------------------------------
  // #region Простая дробь в формате: (от 1 до 10 знаков)/(от 1 до 10 знаков), где ведущие нули в числителе и знаменателе недопустимыимы
  function IsValidProstDrob21(strIn: string; var strGetMes: string) : boolean;
  { // ПростДроб21
    strGetMes := 'Формат поля: XXXXXXXXXX/XXXXXXXXXX. Формат: 21 символов';

    Result := False;
    if (strIn = '') or (Pos('/', strIn) = 0) Exit;

    var buf_1 : string; buf_1 := SubStr(strIn,                   1,                 Pos('/', strIn) - 1);
    var buf_2 : string; buf_2 := SubStr(strIn, Pos('/', strIn) + 1, Length(strIn) - Pos('/', strIn)    );

    Result := CheckError.isRegExpr('^([1-9]{1}|[1-9]{1}[0-9]{1}|[1-9]{1}[0-9]{0,2}|[1-9]{1}[0-9]{0,3}|[1-9]{1}[0-9]{0,4}|[1-9]{1}[0-9]{0,5}|[1-9]{1}[0-9]{0,6}|[1-9]{1}[0-9]{0,7}|[1-9]{1}[0-9]{0,8}|[1-9]{1}[0-9]{0,9})$', buf_1)
          and CheckError.isRegExpr('^([1-9]{1}|[1-9]{1}[0-9]{1}|[1-9]{1}[0-9]{0,2}|[1-9]{1}[0-9]{0,3}|[1-9]{1}[0-9]{0,4}|[1-9]{1}[0-9]{0,5}|[1-9]{1}[0-9]{0,6}|[1-9]{1}[0-9]{0,7}|[1-9]{1}[0-9]{0,8}|[1-9]{1}[0-9]{0,9})$', buf_2);
  };
  // #endregion Простая дробь в формате: (от 1 до 10 знаков)/(от 1 до 10 знаков), где ведущие нули в числителе и знаменателе недопуст
  //----------------------------------------------------------------------------------------------------------
  // #region Количество месяцев в квартале
  function IsValidKolMesKv(strIn: string; var strGetMes: string) : boolean;
  { // КодОсвНал
    strGetMes := 'Возможные значения: от 0 до 3 включительно';

    Result := False;
    Result := (Double(strIn) >= 0)
          and (Double(strIn) <= 3);
  };
  // #endregion Количество месяцев использования налоговой льготы
  //----------------------------------------------------------------------------------------------------------
  // #region Код налоговой льготы в виде освобождения от налогообложения
  function IsValidKodOsvNal(strIn: string; var strGetMes: string) : boolean;
  { // КодОсвНал
    strGetMes := 'Возможные значения: 30200 или [20200(или 20210)/XXXXXXXXXXXX]. Формат: 5 или 18 символов';

    Result := False;
    Result := CheckError.isRegExpr('^(30200|(20200|20210)/(............))$', strIn);
  };
  // #endregion Код налоговой льготы в виде освобождения от налогообложения
  //----------------------------------------------------------------------------------------------------------
  // #region Код налоговой льготы в виде уменьшения суммы налога
  function IsValidKodUmenSum(strIn: string; var strGetMes: string) : boolean;
  { // КодУменСум
    strGetMes := 'Возможные значения: 20220/XXXXXXXXXXXX. Формат: 18 символов';

    Result := False;
    Result := CheckError.isRegExpr('^(20220/(............))$', strIn);
  };
  // #endregion Код налоговой льготы в виде уменьшения суммы налога
  //----------------------------------------------------------------------------------------------------------
  // #region Код налоговой льготы в виде снижения налоговой ставки
  function IsValidKodSnigStav(strIn: string; var strGetMes: string) : boolean;
  { // КодСнижСтав
    strGetMes := 'Возможные значения: 20230/XXXXXXXXXXXX. Формат: 18 символов';

    Result := False;
    Result := CheckError.isRegExpr('^(20230/(............))$', strIn);
  };
  // #endregion Код налоговой льготы в виде снижения налоговой ставки

  // #endregion ПРОВЕРКИ

  // #region FUNCTION

  function IsStr_1_5   (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,   5, _Mes); }
  function IsStr_1_25  (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,  25, _Mes); }
  function IsStr_1_30  (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,  30, _Mes); }
  function IsStr_1_40  (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,  40, _Mes); }
  function IsStr_1_120 (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1, 120, _Mes); }

  function IsInt_1_2      (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenNumber(_Val, 1,  2, _Mes, FALSE); }
  function IsInt_1_3      (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenNumber(_Val, 1,  3, _Mes, FALSE); }
  function IsInt_1_15     (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenNumber(_Val, 1, 15, _Mes, FALSE); }
  function IsInt_1_15_Min (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenNumber(_Val, 1, 15, _Mes, TRUE ); }

  function IsDbl_12_2 (_Val: string; var _Mes: string) : boolean;  { Result := IsValidDecimal(_Val, 12, 2, _Mes, FALSE); }
  function IsDbl_1_4  (_Val: string; var _Mes: string) : boolean;  { Result := IsValidDecimal(_Val,  1, 4, _Mes, FALSE); }
  function IsDbl_6_2  (_Val: string; var _Mes: string) : boolean;  { Result := IsValidDecimal(_Val,  6, 2, _Mes, FALSE); }
  function IsDbl_2_1  (_Val: string; var _Mes: string) : boolean;  { Result := IsValidDecimal(_Val,  2, 1, _Mes, FALSE); }

  // #endregion FUNCTION

  // #region DECLARE

  #declare _NoKor(_adrXML, _Pole)
    MessageErrorStop
    (
      #_adrXML
    , #_Pole
    , 'Поле не соответствует формату. ' + getMes
    );
  #end

  #declare _IfNotValid(_adrXML, _Valid, _Pole)
    if not #_Valid(GetStrVal(#_adrXML), getMes)
      MessageErrorStop
      (
        #_adrXML
      , #_Pole
      , 'Поле не соответствует формату. ' + getMes
      );
  #end

  #declare _IfNotValidVis(_adrXML, _Valid, _Pole)
    if GetFldVis(#_adrXML)
      if not #_Valid(GetStrVal(#_adrXML), getMes)
        MessageErrorStop
        (
          #_adrXML
        , #_Pole
        , 'Поле не соответствует формату. ' + getMes
        );
  #end

  // #endregion DECLARE

  // #endregion СЕРВИС On_Check
  //**********************************************************************************************************
@begin
  var i, j, CountI, CountJ : longint = 0;
  var XMLAdrI, XMLAdrJ, getMes : string = '';
  var flI, flJ : boolean;

  // #region ТИТУЛЬНЫЙ ЛИСТ

  #_IfNotValid('Файл/ВерсПрог', IsStr_1_40, 'Версия программы')
  #_IfNotValid('Файл/ВерсФорм', IsStr_1_5 , 'Версия формы'    )

  if not IsValidKND(GetStrVal('Файл/Документ/КНД'), '1152004', getMes)
    #_NoKor('Файл/Документ/КНД', 'Код налоговой декларации')

  #_IfNotValid('Файл/Документ/ДатаДок' , IsValidDate   , 'Дата документа'                   )
  #_IfNotValid('Файл/Документ/ОтчетГод', IsValidOtchGod, 'Отчетный год'                     )
  #_IfNotValid('Файл/Документ/КодНО'   , IsValidSONO   , 'Код налогового органа'            )
  #_IfNotValid('Файл/Документ/НомКорр' , IsValidNomKorr, 'Номер корректировки'              )
  #_IfNotValid('Файл/Документ/Период'  , IsValidPeriod , 'Налоговый (отчетный) период (код)')
  #_IfNotValid('Файл/Документ/ПоМесту' , IsValidPoMestu, 'По месту нахождения (учета)'      )

  {
    #_IfNotValid   ('Файл/Документ/СвНП/ОКВЭД', IsValidOKVED, 'ОКВЭД'             )
    #_IfNotValidVis('Файл/Документ/СвНП/Тлф'  , IsValidTlf  , 'Контактный телефон')

    {
      #_IfNotValid('Файл/Документ/СвНП/НПЮЛ/НаимОрг', IsValidNaimOrg     , 'Наименование организации')
      #_IfNotValid('Файл/Документ/СвНП/НПЮЛ/ИННЮЛ'  , IsValidINNUL       , 'ИНН'                     )
      #_IfNotValid('Файл/Документ/СвНП/НПЮЛ/ИННЮЛ'  , CheckError.Prov_INN, 'ИНН'                     )
      #_IfNotValid('Файл/Документ/СвНП/НПЮЛ/КПП'    , IsValidKPP         , 'КПП'                     )

      if GetFldVis('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ') {
        #_IfNotValid   ('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/ФормРеорг', IsValidFormReorg   , 'Форма реоргазации')
        #_IfNotValidVis('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/ИННЮЛ'    , IsValidINNUL       , 'ИНН'              )
        #_IfNotValidVis('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/ИННЮЛ'    , CheckError.Prov_INN, 'ИНН'              )
        #_IfNotValidVis('Файл/Документ/СвНП/НПЮЛ/СвРеоргЮЛ/КПП'      , IsValidKPP         , 'КПП'              )
      }
    }
  }

  #_IfNotValid   ('Файл/Документ/Подписант/ПрПодп'      , IsValidPrPodp, 'Признак подписанта')
  #_IfNotValid   ('Файл/Документ/Подписант/ФИО/Фамилия' , IsValidFIO   , 'Фамилия'           )
  #_IfNotValid   ('Файл/Документ/Подписант/ФИО/Имя'     , IsValidFIO   , 'Имя'               )
  #_IfNotValidVis('Файл/Документ/Подписант/ФИО/Отчество', IsValidFIO   , 'Отчество'          )

  if GetFldVis('Файл/Документ/Подписант/СвПред') {
    #_IfNotValid   ('Файл/Документ/Подписант/СвПред/НаимДок', IsValidNaimDok, 'Наименование документа'  )
    #_IfNotValidVis('Файл/Документ/Подписант/СвПред/НаимОрг', IsValidNaimOrg, 'Наименование организации')
  }

  // #endregion ТИТУЛЬНЫЙ ЛИСТ

  // #region РАЗДЕЛ 1

  flI := False;

  #_IfNotValid('Файл/Документ/ТрНалНД/СумНалПУ/КБК', IsValidKBK, 'Стр. 010')

  CountI := XMLMap.GetNodeCountByName('Файл/Документ/ТрНалНД/СумНалПУ/СумПУ');
  for (i := 0; i < CountI; i++)
  {
    XMLAdrI := 'Файл/Документ/ТрНалНД/СумНалПУ/СумПУ' + getIter(i);

    if ( not GetFldVis(XMLAdrI) ) Continue;
    flI := True;

    #_IfNotValid   (XMLAdrI + '/ОКТМО'     , IsValidOKTMO, 'Стр. 020'               )
    #_IfNotValid   (XMLAdrI + '/СумАвПлИсч', IsInt_1_15  , 'Сумма авансов (исчисл.)')
    #_IfNotValidVis(XMLAdrI + '/СумАвПлУпл', IsInt_1_15  , 'Сумма авансов (уплач.)' )

    // #region РАЗДЕЛ 2

    flJ := False;

    CountJ := XMLMap.GetNodeCountByName(XMLAdrI + '/РасчНалТС');
    for (j := 0; j < CountJ; j++)
    {
      XMLAdrJ := XMLAdrI + '/РасчНалТС' + getIter(j);

      if ( not GetFldVis(XMLAdrJ) ) Continue;
      flJ := True;

      #_IfNotValid   (XMLAdrJ + '/КодВидТС'    , IsValidKodVidTS   , 'Стр. 030'       )
      #_IfNotValidVis(XMLAdrJ + '/ИдНомТС'     , IsStr_1_25        , 'Стр. 040'       )
      #_IfNotValidVis(XMLAdrJ + '/МаркаТС'     , IsStr_1_120       , 'Стр. 050'       )
      #_IfNotValid   (XMLAdrJ + '/РегЗнакТС'   , IsStr_1_30        , 'Стр. 060'       )
      #_IfNotValid   (XMLAdrJ + '/ДатаРегТС'   , IsValidDate       , 'Стр. 070'       )
      #_IfNotValidVis(XMLAdrJ + '/ДатаСнРегТС' , IsValidDate       , 'Стр. 080'       )
      #_IfNotValid   (XMLAdrJ + '/НалБаза'     , IsDbl_12_2        , 'Стр. 090'       )
      #_IfNotValid   (XMLAdrJ + '/ОКЕИНалБаза' , IsValidOKEI_      , 'Стр. 100'       )
      #_IfNotValidVis(XMLAdrJ + '/ЭкологКл'    , IsValidEkologClass, 'Стр. 110'       )
      #_IfNotValidVis(XMLAdrJ + '/ВыпускТС'    , IsInt_1_3         , 'Стр. 120'       )
      #_IfNotValidVis(XMLAdrJ + '/ГодВыпТС'    , IsValidOtchGod    , 'Стр. 130'       )
      #_IfNotValid   (XMLAdrJ + '/ВладенТС'    , IsInt_1_2         , 'Стр. 140'       )
      #_IfNotValid   (XMLAdrJ + '/ВладенТС'    , IsValidKolMesKv   , 'Стр. 140'       )
      #_IfNotValid   (XMLAdrJ + '/ДоляТС'      , IsValidProstDrob21, 'Стр. 150'       )
      #_IfNotValid   (XMLAdrJ + '/КоэфКв'      , IsDbl_1_4         , 'Стр. 160'       )
      #_IfNotValid   (XMLAdrJ + '/НалСтавка'   , IsDbl_6_2         , 'Стр. 170'       )
      #_IfNotValidVis(XMLAdrJ + '/КоэфКп'      , IsDbl_2_1         , 'Стр. 180'       )
      #_IfNotValid   (XMLAdrJ + '/СумИсчисл'   , IsInt_1_15        , 'Стр. 190'       )
      #_IfNotValidVis(XMLAdrJ + '/ЛьготМесТС'  , IsInt_1_2         , 'Стр. 200'       )
      #_IfNotValidVis(XMLAdrJ + '/ЛьготМесТС'  , IsValidKolMesKv   , 'Стр. 200'       )
      #_IfNotValidVis(XMLAdrJ + '/КоэфКл'      , IsDbl_1_4         , 'Стр. 210'       )
      #_IfNotValid   (XMLAdrJ + '/СумИсчислУпл', IsInt_1_15        , 'Стр. 300'       )

      if ( GetFldVis(XMLAdrJ + '/ЛьготОсвНал') )
      {
        #_IfNotValid(XMLAdrJ + '/ЛьготОсвНал/КодОсвНал', IsValidKodOsvNal, 'Стр. 220'       )
        #_IfNotValid(XMLAdrJ + '/ЛьготОсвНал/СумОсвНал', IsInt_1_15      , 'Стр. 230'       )
      }

      if ( GetFldVis(XMLAdrJ + '/ЛьготУменСум') )
      {
        #_IfNotValid(XMLAdrJ + '/ЛьготУменСум/КодУменСум', IsValidKodUmenSum, 'Стр. 240'          )
        #_IfNotValid(XMLAdrJ + '/ЛьготУменСум/ПроцУм'    , IsDbl_6_2        , 'Процент уменьшения')
        #_IfNotValid(XMLAdrJ + '/ЛьготУменСум/СумУменСум', IsInt_1_15       , 'Стр. 250'          )
      }

      if ( GetFldVis(XMLAdrJ + '/ЛьготСнижСтав') )
      {
        #_IfNotValid(XMLAdrJ + '/ЛьготСнижСтав/КодСнижСтав', IsValidKodSnigStav, 'Стр. 260'                   )
        #_IfNotValid(XMLAdrJ + '/ЛьготСнижСтав/ПонижСтав'  , IsDbl_6_2         , 'Пониженная налоговая ставка')
        #_IfNotValid(XMLAdrJ + '/ЛьготСнижСтав/СумСнижСтав', IsInt_1_15        , 'Стр. 270'                   )
      }

      if ( GetFldVis(XMLAdrJ + '/ЛьготУменСум' )
      and  GetFldVis(XMLAdrJ + '/ЛьготСнижСтав') ) {
        MessageWarningStop
        (
          XMLAdrJ + '/ЛьготУменСум/КодУменСум'
        , 'Стр. 240'
        , 'Одновременно заданы льготы по стр. 240 и 260.'
        );
      }
    }

    // #endregion РАЗДЕЛ 2

    if (not flJ)
      MessageErrorStop (
        XMLAdrI + '/РасчНалТС/КодВидТС'
      , 'Раздел 2'
      , 'Раздел 2 обязателен для заполняются. Необходимо заполнить хотя бы один лист'
      );
  }

  if (not flI)
    MessageErrorStop (
      'Файл/Документ/ТрНалНД/СумНалПУ/СумПУ/ОКТМО'
    , 'Раздел 1'
    , 'Раздел 1 обязателен для заполняются. Необходимо заполнить хотя бы один лист'
    );
  // #endregion РАЗДЕЛ 1
@end.
// #endregion On_Check ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ ПОЛЕЙ
//************************************************************************************************************


//============================================================================================================
//#region On_CheckKS ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ КОНТРОЛЬНЫХ СООТНОШЕНИЙ
//------------------------------------------------------------------------------------------------------------
@Script On_CheckKS : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_CheckKS
  //----------------------------------------------------------------------------------------------------------

  // #region МАКРОСЫ

  // Для работы с текущим отчетом
  #undef GD // Вернуть значение поля типа Double
  #declare GD(_XMLAdr)
    if (XMLMap.GetAttrVisByName(#_XMLAdr), Double(XMLMap.GetAttrValueByName(#_XMLAdr)), 0.0);
  #end
  //----------------------------------------------------------------------------------------------------------
  #undef GS // Вернуть значение поля типа String
  #declare GS(_XMLAdr)
    String(XMLMap.GetAttrValueByName(#_XMLAdr));
  #end
  //----------------------------------------------------------------------------------------------------------
  // Сравнить
  #undef KS
  #declare KS(_If, _adrXML, _Pole, _Mes)
    if (not #_If)
    {
      MesError.InsertMesError(#_adrXML, Comp(0), '', #_Pole, #_Mes);
    }
  #end
  //----------------------------------------------------------------------------------------------------------
  // Сравнить (описывается ошибка, а не условие КС)
  #undef KSe
  #declare KSe(_If, _adrXML, _Pole, _Mes)
    if (#_If)
    {
      MesError.InsertMesError(#_adrXML, Comp(0), '', #_Pole, #_Mes);
    }
  #end
  //----------------------------------------------------------------------------------------------------------
  // Сравнить
  #undef RezSum
  #define RezSum(_Mes, _Val) #_Mes + ' (РАССЧИТАНО '+String(#_Val, 0, 0)

  // #endregion МАКРОСЫ

  // #endregion СЕРВИС On_CheckKS
  //**********************************************************************************************************
@begin
  var i, j, k, CountI, CountJ, CountK : integer;
  var XMLAdrI, XMLAdrJ, XMLAdrK : string;
  var remIter : integer;
  var nStr : string;

  // #region Сообщения с информацией о КС

  var mKS1_01, mKS1_02, mKS1_03
    , mKS2_01, mKS2_02, mKS2_03, mKS2_04, mKS2_05, mKS2_06, mKS2_07, mKS2_08, mKS2_09, mKS2_10, mKS2_11, mKS2_12, mKS2_13, mKS2_14, mKS2_15, mKS2_16, mKS2_17
    , mKS2_18, mKS2_19, mKS2_20 : string;

  // РАЗДЕЛ 1
  mKS1_01 := 'КС 1.1 :: Р1 Сумма авансов (исчисл.) (с соответствующими кодами ОКТМО и КБК) = сумме всех Р2 ст. 300 (с соответствующими кодами ОКТМО и КБК)'                                                  ;

  // РАЗДЕЛ 2
  mKS2_01 := 'КС 2.01 :: Р2 ст. 220 = 0 и Р2 ст. 230 > 0'                                                                                                                                                                                   ;
  mKS2_02 := 'КС 2.02 :: Р2 ст. 220 не равно 0 и Р2 ст. 230 = 0'                                                                                                                                                                            ;
  mKS2_03 := 'КС 2.03 :: Р2 ст. 240 = 0 и Р2 ст. 250 > 0'                                                                                                                                                                                   ;
  mKS2_04 := 'КС 2.04 :: Р2 ст. 240 не равно 0 и Р2 ст. 250 = 0'                                                                                                                                                                            ;
  mKS2_05 := 'КС 2.05 :: Р2 ст. 260 = 0 и Р2 ст. 270 > 0'                                                                                                                                                                                   ;
  mKS2_06 := 'КС 2.06 :: Р2 ст. 260 не равно 0 и Р2 ст. 270 = 0'                                                                                                                                                                            ;
  mKS2_07 := 'КС 2.07 :: Р2 ст. 200 > 0 при условии заполнения Р2 ст. 220 и Р2 ст. 230'                                                                                                                                                     ;
  mKS2_08 := 'КС 2.08 :: Р2 ст. 200 > 0 при условии заполнения Р2 ст. 240 и Р2 ст. 250'                                                                                                                                                     ;
  mKS2_09 := 'КС 2.09 :: Р2 ст. 200 > 0 при условии заполнения Р2 ст. 260 и Р2 ст. 270'                                                                                                                                                     ;
  mKS2_10 := 'КС 2.10 :: Р2 ст 230 не равно 0 и Р2 ст. 250 не равно 0'                                                                                                                                                                      ;
  mKS2_11 := 'КС 2.11 :: Р2 ст. 230 не равно 0 и Р2 ст. 270 не равно 0'                                                                                                                                                                     ;
  mKS2_12 := 'КС 2.12 :: Р2 ст. 250 не равно 0 и Р2 ст. 270 не равно 0'                                                                                                                                                                     ;
  mKS2_13 := 'КС 2.13 :: Для налогоплат., имеющих право на льг. в виде освобождения от налогообложения Р2 ст. 230 = Р2 ст. 090 x Р2 ст. 150 x Р2 ст. 160 x Р2 ст. 170 x Р2 ст. 180 x Р2 ст. 210'                                            ;
  mKS2_14 := 'КС 2.14 :: Если Р2 ст. 140 = 12 (транспортное средство использовалось в течение всего налогового периода), то Р2 ст. 160 = 1'                                                                                                 ;
  mKS2_15 := 'КС 2.15 :: Р2 ст. 190 = Р2 ст. 090 x Р2 ст. 150 x Р2 ст. 160 x Р2 ст. 170 x Р2 ст. 180'                                                                                                                                       ;
  mKS2_16 := 'КС 2.16 :: При устан. нал. льг., умен. исчисл. сумму трансп. нал. в процентах, Р2 ст. 250 = (Р2 ст. 090 x Р2 ст. 150 x Р2 ст. 160 x Р2 ст. 170 x Р2 ст. 180 x Р2 ст. 210 x (проц., на который умен. исчисл. сумма нал.) : 100';
  mKS2_17 := 'КС 2.17 :: При устан. нал. льг. в виде сниж. ст. нал. Р2 ст. 270 = Р2 ст. 090 x (нал. ст. - пониженная ст.) : 100 x Р2 ст. 150 x Р2 ст. 180 x Р2 ст. 210'                                                                     ;

  // #endregion Сообщения с информацией о КС

  // #region Раздел 1

  // #region Объявление переменных

  var aR1_020, aR1_Isch, aR1_023, aR1_025, aR1_027
    , aR2_050, aR2_060, aR2_070, aR2_080, aR2_090, aR2_100, aR2_110, aR2_120, aR2_130, aR2_140, aR2_150, aR2_160, aR2_170, aR2_180, aR2_190
    , aR2_200, aR2_210, aR2_300, aR2_220_230, aR2_220, aR2_230, aR2_240_250, aR2_240, aR2_ProcUm, aR2_250, aR2_260_270, aR2_260
    , aR2_PonSt, aR2_270
    , sR1_020
    , sR2_220, sR2_240, sR2_260 : string;
  var dR1_Isch, dR1_023, dR1_025, dR1_027
    , dR2_080, dR2_090, dR2_150, dR2_160, dR2_170, dR2_180, dR2_190, dR2_210, dR2_230, dR2_ProcUm, dR2_250, dR2_PonSt, dR2_270, dR2_300
    , dR2_buf300 : double;
  var wR2_140, wR2_200 : word;

  // #endregion Объявление переменных

  CountI := XMLMap.GetNodeCountByName('Файл/Документ/ТрНалНД/СумНалПУ/СумПУ');
  for (i := 0; i < CountI; i++)
  {
    XMLAdrI := 'Файл/Документ/ТрНалНД/СумНалПУ/СумПУ' + getIter(i);
    if (not GetFldVis(XMLAdrI)) Continue;

    // #region Инициализация переменных

    aR1_020 := XMLAdrI + '/ОКТМО'     ;   sR1_020 := GetStrVal(aR1_020)  // +
    aR1_Isch := XMLAdrI + '/СумАвПлИсч';   dR1_Isch := GetDblVal(aR1_Isch)  // +

    // #endregion Инициализация переменных

    // #region Раздел 2

    dR2_buf300 := 0;

    CountJ := XMLMap.GetNodeCountByName(XMLAdrI + '/РасчНалТС');
    for (j := 0; j < CountJ; j++)
    {
      XMLAdrJ := XMLAdrI + '/РасчНалТС' + getIter(j);
      if (not GetFldVis(XMLAdrJ)) Continue;

      // #region Инициализация переменных

      aR2_090     := XMLAdrJ + '/НалБаза'                  ;   dR2_090    :=                             GetDblVal (aR2_090   ) ; // +
      aR2_140     := XMLAdrJ + '/ВладенТС'                 ;   wR2_140    :=                             GetWordVal(aR2_140   ) ; // +
      aR2_150     := XMLAdrJ + '/ДоляТС'                   ;   dR2_150    :=                             GetDolVal (aR2_150   ) ; // +
      aR2_160     := XMLAdrJ + '/КоэфКв'                   ;   dR2_160    :=                             GetDblVal (aR2_160   ) ; // +
      aR2_170     := XMLAdrJ + '/НалСтавка'                ;   dR2_170    :=                             GetDblVal (aR2_170   ) ; // +
      aR2_180     := XMLAdrJ + '/КоэфКп'                   ;   dR2_180    := if (GetStrNull(aR2_180), 1, GetDblVal (aR2_180   )); // -
      aR2_190     := XMLAdrJ + '/СумИсчисл'                ;   dR2_190    :=                             GetDblVal (aR2_190   ) ; // +
      aR2_200     := XMLAdrJ + '/ЛьготМесТС'               ;   wR2_200    :=                             GetWordVal(aR2_200   ) ; // -
      aR2_210     := XMLAdrJ + '/КоэфКл'                   ;   dR2_210    :=                             GetDblVal (aR2_210   ) ; // -
      aR2_300     := XMLAdrJ + '/СумИсчислУпл'             ;   dR2_300    :=                             GetDblVal (aR2_300   ) ; // +
      aR2_220_230 := XMLAdrJ + '/ЛьготОсвНал'              ;                                                                      // -
      aR2_220     := XMLAdrJ + '/ЛьготОсвНал/КодОсвНал'    ;   sR2_220    :=                             GetStrVal (aR2_220   ) ; // +
      aR2_230     := XMLAdrJ + '/ЛьготОсвНал/СумОсвНал'    ;   dR2_230    :=                             GetDblVal (aR2_230   ) ; // +
      aR2_240_250 := XMLAdrJ + '/ЛьготУменСум'             ;                                                                      // -
      aR2_240     := XMLAdrJ + '/ЛьготУменСум/КодУменСум'  ;   sR2_240    :=                             GetStrVal (aR2_240   ) ; // +
      aR2_ProcUm  := XMLAdrJ + '/ЛьготУменСум/ПроцУм'      ;   dR2_ProcUm :=                             GetDblVal (aR2_ProcUm) ; // -
      aR2_250     := XMLAdrJ + '/ЛьготУменСум/СумУменСум'  ;   dR2_250    :=                             GetDblVal (aR2_250   ) ; // +
      aR2_260_270 := XMLAdrJ + '/ЛьготСнижСтав'            ;                                                                      // -
      aR2_260     := XMLAdrJ + '/ЛьготСнижСтав/КодСнижСтав';   sR2_260    :=                             GetStrVal (aR2_260   ) ; // +
      aR2_PonSt   := XMLAdrJ + '/ЛьготСнижСтав/ПонижСтав'  ;   dR2_PonSt  :=                             GetDblVal (aR2_PonSt ) ; // -
      aR2_270     := XMLAdrJ + '/ЛьготСнижСтав/СумСнижСтав';   dR2_270    :=                             GetDblVal (aR2_270   ) ; // +

      dR2_buf300 += dR2_300;

      // #endregion Инициализация переменных

      if (wR2_140 = 12)
      {
        #KS((dR2_160 = 1), aR2_160, 'Стр. 160', mKS2_14)
      }

      #KS((dR2_190 = Round(dR2_090 * dR2_150 * dR2_160 * dR2_170 * dR2_180)), aR2_190, 'Стр. 190', mKS2_15)

      if GetFldVis(aR2_220_230)
      {
        #KSe(((sR2_220 =  '') and (dR2_230 > 0)), aR2_220, 'Стр. 220, 230', mKS2_01)
        #KSe(((sR2_220 <> '') and (dR2_230 = 0)), aR2_220, 'Стр. 220, 230', mKS2_02)

        #KS((wR2_200 > 0), aR2_200, 'Стр. 200', mKS2_07)

        #KS((dR2_230 = Round(dR2_090 * dR2_150 * dR2_160 * dR2_170 * dR2_180 * dR2_210)), aR2_230, 'Стр. 230', mKS2_13)
      }

      if GetFldVis(aR2_240_250)
      {
        #KSe(((sR2_240 =  '') and (dR2_250 > 0)), aR2_240, 'Стр. 240, 250', mKS2_03)
        #KSe(((sR2_240 <> '') and (dR2_250 = 0)), aR2_240, 'Стр. 240, 250', mKS2_04)

        #KS((wR2_200 > 0), aR2_200, 'Стр. 200', mKS2_08)

        #KS((dR2_250 = Round(dR2_090 * dR2_150 * dR2_160 * dR2_170 * dR2_180 * dR2_210 * dR2_ProcUm / 100)), aR2_250, 'Стр. 250', mKS2_16)
      }

      if GetFldVis(aR2_260_270)
      {
        #KSe(((sR2_260 =  '') and (dR2_270 > 0)), aR2_260, 'Стр. 260, 270', mKS2_05)
        #KSe(((sR2_260 <> '') and (dR2_270 = 0)), aR2_260, 'Стр. 260, 270', mKS2_06)

        #KS((wR2_200 > 0), aR2_200, 'Стр. 200', mKS2_09)

        #KS((dR2_270 = Round(dR2_090 * (dR2_170 - dR2_PonSt) / 100 * dR2_150 * dR2_180 * dR2_210)), aR2_270, 'Стр. 270', mKS2_17)
      }

      #KSe(((dR2_230 <> 0) and (dR2_250 <> 0)), aR2_230, 'Стр. 230', mKS2_10)
      #KSe(((dR2_230 <> 0) and (dR2_270 <> 0)), aR2_230, 'Стр. 230', mKS2_11)
      #KSe(((dR2_250 <> 0) and (dR2_270 <> 0)), aR2_250, 'Стр. 250', mKS2_12)
    }

    #KS((dR1_Isch = dR2_buf300), aR1_Isch, 'Сумма авансов (исчисл.)', #RezSum(mKS1_01, dR2_buf300))

    // #endregion Раздел 2
  }

  // #endregion Раздел 1
@end.
//#endregion On_CheckKS ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ КОНТРОЛЬНЫХ СООТНОШЕНИЙ
//************************************************************************************************************


//============================================================================================================
// #region On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//------------------------------------------------------------------------------------------------------------
@Script On_Recalc : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_Recalc
  //----------------------------------------------------------------------------------------------------------
  procedure LogInfo(_strAdr, _strMes, _strVal : string);
  {
    MesError.InsertRasch('', _strAdr, _strMes, _strVal, 0);
  }

  //----------------------------------------------------------------------------------------------------------
  procedure SetFldGV(_fld : string; var _val : double);
  {
    SetFldVal(_fld, _val);
    _val := GetDblVal(_fld);
  }

  //----------------------------------------------------------------------------------------------------------
  procedure SetSNullGV(_fld : string; var _val : double);
  {
    XMLMAP.SetIsNullAttrValueByName(_fld, 2);
    _val := GetDblVal(_fld);
  }

  //----------------------------------------------------------------------------------------------------------
  function TrimVal(_val : string) : string;
  {
    Result := RTrim(_val, '+');
    if (Result = '') Result := '0 (нет данных)';
  }

  //----------------------------------------------------------------------------------------------------------
  // #region GD

  function GD0(_val : double) : string;
  {
    Result := IF(_val < 0
                , '('+DoubleToStr(Round(_val), '[|-]36666666666666666666666666')+')'
                ,     DoubleToStr(Round(_val), '[|-]36666666666666666666666666')    );
  }

  //----------------------------------------------------------------------------------------------------------
  function GD1(_val : double) : string;
  {
    Result := IF(_val < 0
                , '('+DoubleToStr(Round(_val, 1), '[|-]36666666666666666666666666~9')+')'
                ,     DoubleToStr(Round(_val, 1), '[|-]36666666666666666666666666~9')    );
  }

  //----------------------------------------------------------------------------------------------------------
  function GD2(_val : double) : string;
  {
    Result := IF(_val < 0
                , '('+DoubleToStr(Round(_val, 2), '[|-]36666666666666666666666666~99')+')'
                ,     DoubleToStr(Round(_val, 2), '[|-]36666666666666666666666666~99')    );
  }

  //----------------------------------------------------------------------------------------------------------
  function GD4(_val : double) : string;
  {
    Result := IF(_val < 0
                , '('+DoubleToStr(Round(_val, 4), '[|-]36666666666666666666666666~9999')+')'
                ,     DoubleToStr(Round(_val, 4), '[|-]36666666666666666666666666~9999')    );
  }

  // #endregion GD
  //----------------------------------------------------------------------------------------------------------

  // #endregion СЕРВИС On_Recalc
  //**********************************************************************************************************
@begin
  var i, j, CountI, CountJ : longint = 0;
  var XMLAdrI, XMLAdrJ : string = '';
  var flJ : boolean;
  var FormTune : longint;

  FormTune := wGetTune('eStatements.FormRaschAv_TS');

  #define _LogInfo(_Name) LogInfo(a#_Name, m#_Name, v#_Name);
  #define _SetFldGV(_Name) SetFldGV(a#_Name, #_Name);
  #define _SetFldNullGV(_Name) SetSNullGV(a#_Name, #_Name);
  #define _SetFldGV_300(_Name) if (R2_300 < 0) {R2_300 := 0;} SetFldGV(a#_Name, #_Name);

  // Для расчета строки 140 Раздела 2
  pFH.Func('SetTekGod');

  // #region ТИТУЛЬНЫЙ ЛИСТ

  if ((GetStrVal('Файл/Документ/ДатаДок') = '') or (GetStrVal('Файл/Документ/ДатаДок') = 'ДД.ММ.ГГГГ'))
    SetFldVal('Файл/Документ/ДатаДок', DateToStr(Cur_Date, XMLMap.GetAttrVFormatByName('Файл/Документ/ДатаДок')));

  // #endregion ТИТУЛЬНЫЙ ЛИСТ

  // #region РАЗДЕЛ 1

  // #region ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  var R1_Isch, R1_Upl, R1_023, R1_025, R1_027
    , R2_090, R2_120, R2_130, R2_140, R2_150, R2_160, R2_170, R2_180, R2_190, R2_200, R2_210, R2_230, R2_250, R2_270, R2_300
    , R2_ProcUm, R2_PonigSt, R2_SrSt : Double;
  var aR1_Isch, aR1_Upl, aR1_023, aR1_025, aR1_027
    , aR2_070, aR2_080, aR2_090, aR2_120, aR2_130, aR2_140, aR2_150, aR2_160, aR2_170, aR2_180, aR2_190, aR2_200_Nach, aR2_200_Kon, aR2_200
    , aR2_210, aR2_220, aR2_230, aR2_240, aR2_250, aR2_260, aR2_270, aR2_300, aR2_ProcUm, aR2_PonigSt, aR2_SrSt
    , mR1_Isch, mR1_Upl, mR1_Upl_NotEmpt, mR2_120, mR2_140, mR2_160, mR2_190, mR2_200, mR2_210, mR2_230, mR2_250, mR2_270, mR2_300, mR2_180
    , vR1_Isch, vR1_Upl, vR2_120, vR2_140, vR2_160, vR2_180, vR2_190, vR2_200, vR2_210, vR2_230, vR2_250, vR2_270, vR2_300 : String;
  var R2_070, R2_080, R2_200_Nach, R2_200_Kon : Date;

  var flSum, fl230, fl250, fl270 : Boolean;

  // #endregion ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

  // #region ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  mR1_Isch        := 'Сумма авансов (исчисл.) = сумма стр. 300 Раздела 2'                                                                         ;
  mR1_Upl         := 'Сумма авансов (упл.) = сумма авансов (исчисл.)'                                                                             ;
  mR1_Upl_NotEmpt := 'Сумма авансов (упл.) не рассчитано, т.к. значение уже указано'                                                              ;
  mR2_120         := 'Стр. 120 = год налогового периода - стр. 130'                                                                               ;
  mR2_140         := 'Стр. 140 = количество месяцев владения в период с значения стр. 070 по значение стр. 080'                                   ;
  mR2_160         := 'Стр. 160 = стр. 140 / 3'                                                                                                    ;
  mR2_200         := 'Стр. 200 = количество месяцев в период с значения [Дата нач. действия нал. льг.] по значение [Дата зав. действия нал. льг.]';
  mR2_210         := 'Стр. 210 = стр. 200 / 3'                                                                                                    ;

  // #endregion ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ СОДЕРЖАЩИХ СООБЩЕНИЯ

  var isLess2019 : boolean;
  isLess2019 := (GetWordVal('Файл/Документ/ОтчетГод') <= 2018);

  CountI := XMLMap.GetNodeCountByName('Файл/Документ/ТрНалНД/СумНалПУ/СумПУ');
  for (i := 0; i < CountI; i++)
  {
    XMLAdrI := 'Файл/Документ/ТрНалНД/СумНалПУ/СумПУ' + getIter(i);

    if GetStrNull(XMLAdrI + '/ОКТМО') Continue;

    R1_Isch := R1_Upl := 0;
    vR1_Isch := vR1_Upl := '';

    // #region РАЗДЕЛ 2

    flJ := False;

    CountJ := XMLMap.GetNodeCountByName(XMLAdrI + '/РасчНалТС');
    for (j := 0; j < CountJ; j++)
    {
      XMLAdrJ := XMLAdrI + '/РасчНалТС' + getIter(j);

      if    GetStrNull(XMLAdrJ + '/КодВидТС'    )
         or GetStrNull(XMLAdrJ + '/РегЗнакТС'   )
         or GetStrNull(XMLAdrJ + '/ДатаРегТС'   )
         or GetStrNull(XMLAdrJ + '/НалБаза'     )
         or GetStrNull(XMLAdrJ + '/ОКЕИНалБаза' )
         or GetStrNull(XMLAdrJ + '/ДоляТС'      )
         or GetStrNull(XMLAdrJ + '/НалСтавка'   )
      then Continue;

      flJ := True;

      // #region ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

      aR2_070      := XMLAdrJ + '/ДатаРегТС'                ;  R2_070      := GetDateVal(aR2_070     );
      aR2_080      := XMLAdrJ + '/ДатаСнРегТС'              ;  R2_080      := GetDateVal(aR2_080     );
      aR2_090      := XMLAdrJ + '/НалБаза'                  ;  R2_090      := GetDblVal (aR2_090     );
      aR2_120      := XMLAdrJ + '/ВыпускТС'                 ;
      aR2_130      := XMLAdrJ + '/ГодВыпТС'                 ;  R2_130      := GetWordVal(aR2_130     );
      aR2_140      := XMLAdrJ + '/ВладенТС'                 ;
      aR2_150      := XMLAdrJ + '/ДоляТС'                   ;  R2_150      := GetDolVal (aR2_150     );
      aR2_160      := XMLAdrJ + '/КоэфКв'                   ;
      aR2_170      := XMLAdrJ + '/НалСтавка'                ;  R2_170      := GetDblVal (aR2_170     );
      aR2_SrSt     := XMLAdrJ + '/СрСтоим'                  ;  R2_SrSt     := GetDblVal (aR2_SrSt    );
      aR2_180      := XMLAdrJ + '/КоэфКп'                   ;
      aR2_190      := XMLAdrJ + '/СумИсчисл'                ;
      aR2_200_Nach := XMLAdrJ + '/ЛьготМесТС_Нач'           ;  R2_200_Nach := GetDateVal(aR2_200_Nach);
      aR2_200_Kon  := XMLAdrJ + '/ЛьготМесТС_Кон'           ;  R2_200_Kon  := GetDateVal(aR2_200_Kon );
      aR2_200      := XMLAdrJ + '/ЛьготМесТС'               ;  R2_200      := GetDblVal (aR2_200     );
      aR2_210      := XMLAdrJ + '/КоэфКл'                   ;
      aR2_220      := XMLAdrJ + '/ЛьготОсвНал/КодОсвНал'    ;
      aR2_230      := XMLAdrJ + '/ЛьготОсвНал/СумОсвНал'    ;
      aR2_240      := XMLAdrJ + '/ЛьготУменСум/КодУменСум'  ;
      aR2_250      := XMLAdrJ + '/ЛьготУменСум/СумУменСум'  ;
      aR2_260      := XMLAdrJ + '/ЛьготСнижСтав/КодСнижСтав';
      aR2_270      := XMLAdrJ + '/ЛьготСнижСтав/СумСнижСтав';
      aR2_300      := XMLAdrJ + '/СумИсчислУпл'             ;
      aR2_ProcUm   := XMLAdrJ + '/ЛьготУменСум/ПроцУм'      ;  R2_ProcUm   := GetDblVal (aR2_ProcUm  );
      aR2_PonigSt  := XMLAdrJ + '/ЛьготСнижСтав/ПонижСтав'  ;  R2_PonigSt  := GetDblVal (aR2_PonigSt );

      // #endregion ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

      // #region Расчёт значения строки 120

      var wAvtomNalSt : word; wAvtomNalSt := GetWordVal(XMLAdrJ + '/Служ/АвтомНалСт');
      var wDifStVozr  : word; wDifStVozr  := GetWordVal(XMLAdrJ + '/Служ/ДифСтВозр' );

      if ((R2_SrSt = 2) or (R2_SrSt = 3) or (R2_SrSt = 4) or (R2_SrSt = 5))
      or (wDifStVozr <> 0)
      {
        R2_120 := if (R2_130 >= Year(TaxDat.dBeg), 0, Year(TaxDat.dBeg) - R2_130);  #_SetFldGV(R2_120)
        vR2_120 := GD0(R2_120)+' = '+String(Year(TaxDat.dBeg))+' - ' +String(R2_130);  #_LogInfo(R2_120)
      }
      else {
        #_SetFldNullGV(R2_120)
        vR2_120 := 'Не рассчитано, т.к. не установлен признак "Дифференцирована от возраста автомобиля" и не рассчитывается Кп';  #_LogInfo(R2_120)
      }

      // #endregion Расчёт значения строки 120

      // #region Расчёт значения строки 140

      R2_140 := pFH.Func('CalckKolMesVl', R2_070, R2_080);  #_SetFldGV(R2_140)
      vR2_140 := GD0(R2_140)+' = кол. мес. влад. в период с '+String(R2_070)+' по ' +String(R2_080);  #_LogInfo(R2_140)

      // #endregion Расчёт значения строки 140

      // #region Расчёт значения строки 160

      R2_160 := R2_140 / 3;  #_SetFldGV(R2_160)
      vR2_160 := GD4(R2_160)+' = '+GD0(R2_140)+' / 3';  #_LogInfo(R2_160)

      // #endregion Расчёт значения строки 160

      // #region Расчёт значения строки 180

      R2_180  := 1;
      mR2_180 := '';

      case R2_SrSt of
        2 : { if (R2_120 <=  3) { R2_180 := 1.1; mR2_180 := 'Стр. 180 = 1.1, т.к. средняя стоимость от 3 до 5 млн. руб. (п.2 ст.362 НК РФ)'                                               ; }
              else              {                mR2_180 := 'Стр. 180 = 1, т.к. средняя стоимость от 3 до 5 млн. руб. (п.2 ст.362 НК РФ), но значение стр. 120 НЕ меньше либо равено 3'   ; } }
        3 : { if (R2_120 <=  5) { R2_180 := 2  ; mR2_180 := 'Стр. 180 = 2, т.к. средняя стоимость от 5 до 10 млн. руб. (п.2 ст.362 НК РФ)'                                                ; }
              else              {                mR2_180 := 'Стр. 180 = 1, т.к. средняя стоимость от 5 до 10 млн. руб. (п.2 ст.362 НК РФ), но значение стр. 120 НЕ меньше либо равено 5'  ; } }
        4 : { if (R2_120 <= 10) { R2_180 := 3  ; mR2_180 := 'Стр. 180 = 3, т.к. средняя стоимость от 10 до 15 млн. руб. (п.2 ст.362 НК РФ)'                                               ; }
              else              {                mR2_180 := 'Стр. 180 = 1, т.к. средняя стоимость от 10 до 15 млн. руб. (п.2 ст.362 НК РФ), но значение стр. 120 НЕ меньше либо равено 10'; } }
        5 : { if (R2_120 <= 20) { R2_180 := 3  ; mR2_180 := 'Стр. 180 = 3, т.к. средняя стоимость от 15 млн. руб. (п.2 ст.362 НК РФ)'                                                     ; }
              else              {                mR2_180 := 'Стр. 180 = 1, т.к. средняя стоимость от 15 млн. руб. (п.2 ст.362 НК РФ), но значение стр. 120 НЕ меньше либо равено 20'      ; } }
      end;

      var bufVal : double;
      bufVal := R2_180;

      if (R2_180 = 1)
      {
        #_SetFldNullGV(R2_180)
        if (mR2_180 = '') mR2_180 := 'Стр. 180 = повышающий коэффициент (в зависимости от ср. стоимости; п.2 ст.362 НК РФ)';
        vR2_180 := 'Не заполняется 1 (единицей), т.к. 1 (единица) по умолчанию и не указывается в декларации';  #_LogInfo(R2_180)
      }
      else
      {
        #_SetFldGV(R2_180)
        vR2_180 := GD1(R2_180)+' = '+GD1(bufVal);  #_LogInfo(R2_180)
      }

      R2_180 := if (R2_180 = 0, 1, GetDblVal(aR2_180));

      // #endregion Расчёт значения строки 180

      case FormTune of
        0 : { // Налоговая база * ОкруглитьДо4(Налоговая ставка / 4)

              // #region Расчёт значения строки 190

              R2_190 := R2_090 * Round(R2_170 / 4, 4);  #_SetFldGV(R2_190)

              mR2_190 := 'Стр. 190 = стр. 090 * ОкруглитьДо4(стр. 170 / 4)';
              vR2_190 := GD0(R2_190)+' = '+GD2(R2_090)+' * ОкруглитьДо4('+GD2(R2_170)+' / 4)';  #_LogInfo(R2_190)

              // #endregion Расчёт значения строки 190

              // #region Расчёт значения строки 300

              // стр. 300 = стр. 190
              R2_300 := R2_190;  #_SetFldGV_300(R2_300)

              mR2_300 := 'Стр. 300 = стр. 190 (если результат меньше нуля, то 0 (ноль))';
              vR2_300 := GD0(R2_300)+' = '+GD0(R2_190);
              #_LogInfo(R2_300)

              // #endregion Расчёт значения строки 300
            }
        1 : { // Налоговая база * Налоговая ставка * Кв * Кп / 4

              // #region Расчёт значения строки 190

              R2_190 := R2_090 * R2_170 * R2_160 * R2_180 / 4;  #_SetFldGV(R2_190)

              mR2_190 := 'Стр. 190 = стр. 090 * стр. 170 * стр. 160 * стр. 180 / 4';
              vR2_190 := GD0(R2_190)+' = '+GD2(R2_090)+' * '+GD2(R2_170)+' * '+GD4(R2_160)+' * '+GD1(R2_180)+' / 4';  #_LogInfo(R2_190)

              // #endregion Расчёт значения строки 190

              // #region Расчёт значения строки 300

              // стр. 300 = стр. 190
              R2_300 := R2_190;  #_SetFldGV_300(R2_300)

              mR2_300 := 'Стр. 300 = стр. 190 (если результат меньше нуля, то 0 (ноль))';
              vR2_300 := GD0(R2_300)+' = '+GD0(R2_190);
              #_LogInfo(R2_300)

              // #endregion Расчёт значения строки 300
            }
        2 : { // По формуле декларации, с налоговой ставкой равной ОкруглитьДо4(налоговая ставка / 4)

              // #region Расчёт значения строки 190

              R2_190 := R2_090 * Round(R2_170 / 4, 4) * R2_150 * R2_160 * R2_180;  #_SetFldGV(R2_190)

              mR2_190 := 'Стр. 190 = стр. 090 * ОкруглитьДо4(стр. 170 / 4) * стр. 150 * стр. 160 * стр. 180';
              vR2_190 := GD0(R2_190)+' = '+GD2(R2_090)+' * ОкруглитьДо4('+GD2(R2_170)+' / 4) * '+GD4(R2_150)+' * '+GD4(R2_160)+' * '+GD1(R2_180);  #_LogInfo(R2_190)

              // #endregion Расчёт значения строки 190

              // #region Расчёт значения строки 200

              if not GetStrNull(aR2_200_Nach) {
                R2_200 := pFH.Func('CalckKolMesVl', R2_200_Nach, R2_200_Kon);  #_SetFldGV(R2_200)
                vR2_200 := GD0(R2_200)+' = кол. мес. в период с '+String(R2_200_Nach)+' по ' +String(R2_200_Kon);  #_LogInfo(R2_200)
              }
              else {
                #_SetFldNullGV(R2_200)
                vR2_200 := 'Не заполняется, т.к. не указано значение [Дата нач. действия нал. льг.]';  #_LogInfo(R2_200)
              }

              // #endregion Расчёт значения строки 200

              // #region Расчёт значения строки 210

              if GetStrNull(aR2_200) {
                R2_210 := 0;  #_SetFldNullGV(R2_210)
              }
              else {
                R2_210  := R2_200 / 3                          ;  #_SetFldGV(R2_210)
                vR2_210 := GD4(R2_210)+' = '+GD0(R2_200)+' / 3';  #_LogInfo (R2_210)
              }

              // #endregion Расчёт значения строки 210

              // #region Расчёт значения строки 230

              fl230 := False;
              if GetStrNull(aR2_220)
              then R2_230 := 0
              else {
                fl230 := True;

                R2_230 := R2_090 * R2_150 * R2_160 * Round(R2_170 / 4, 4) * R2_180 * R2_210;  #_SetFldGV(R2_230)

                mR2_230 := 'Стр. 230 = стр. 090 * стр. 150 * стр. 160 * ОкруглитьДо4(стр. 170 / 4) * стр. 180 * стр. 210';
                vR2_230 := GD0(R2_230)+' = '+GD2(R2_090)+' * '+GD4(R2_150)+' * '+GD4(R2_160)+' * ОкруглитьДо4('+GD2(R2_170)+' / 4) * '+GD1(R2_180)+' * '+GD4(R2_210);
                #_LogInfo(R2_230)
              }

              // #endregion Расчёт значения строки 230

              // #region Расчёт значения строки 250

              fl250 := False;
              if  ( GetStrNull(aR2_240   )
                 or GetStrNull(aR2_ProcUm) )
              then R2_250 := 0
              else {
                fl250 := True;

                R2_250 := R2_090 * R2_150 * R2_160 * Round(R2_170 / 4, 4) * R2_180 * R2_210 * R2_ProcUm / 100;  #_SetFldGV(R2_250)

                mR2_250 := 'Стр. 250 = стр. 090 * стр. 150 * стр. 160 * ОкруглитьДо4(стр. 170 / 4) * стр. 180 * стр. 210 * (Процент, уменьшающий исчисленную сумму налога) / 100';
                vR2_250 := GD0(R2_250)+' = '+GD2(R2_090)+' * '+GD4(R2_150)+' * '+GD4(R2_160)+' * ОкруглитьДо4('+GD2(R2_170)+' / 4) * '+GD1(R2_180)+' * '+GD4(R2_210)+' * '+GD0(R2_ProcUm)+' / 100';
                #_LogInfo(R2_250)
              }

              // #endregion Расчёт значения строки 250

              // #region Расчёт значения строки 270

              fl270 := False;
              if  ( GetStrNull(aR2_260    )
                 or GetStrNull(aR2_PonigSt) )
              then R2_270 := 0
              else {
                fl270 := True;

                R2_270 := R2_090 * (Round(R2_170 / 4, 4) - R2_PonigSt) / 100 * R2_150 * R2_180 * R2_210;  #_SetFldGV(R2_270)

                mR2_270 := 'Стр. 270 = стр. 090 * (ОкруглитьДо4(стр. 170 / 4) - Пониженная ставка) / 100 * стр. 150 * стр. 180 * стр. 210';
                vR2_270 := GD0(R2_270)+' = '+GD2(R2_090)+' * (ОкруглитьДо4('+GD2(R2_170)+' / 4) - '+GD0(R2_PonigSt)+') / 100 * '+GD4(R2_150)+' * '+GD1(R2_180)+' * '+GD4(R2_210);
                #_LogInfo(R2_270)
              }

              // #endregion Расчёт значения строки 270

              // #region Расчёт значения строки 300

              if fl230
              { // стр. 300 = стр. 190 - стр. 230
                R2_300 := R2_190 - R2_230;  #_SetFldGV_300(R2_300)

                mR2_300 := 'Стр. 300 = стр. 190 - стр. 230 (если результат меньше нуля, то 0 (ноль))';
                vR2_300 := GD0(R2_300)+' = '+GD0(R2_190)+' - '+GD0(R2_230);
                #_LogInfo(R2_300)
              }
              else {
                if (fl250 or fl270) {
                  // стр. 300 = стр. 190 - стр. 250 - стр. 270
                  R2_300 := R2_190 - R2_250 - R2_270;  #_SetFldGV_300(R2_300)

                  mR2_300 := 'Стр. 300 = стр. 190 - стр. 250 - стр. 270 (если результат меньше нуля, то 0 (ноль))';
                  vR2_300 := GD0(R2_300)+' = '+GD0(R2_190)+' - '+GD0(R2_250)+' - '+GD0(R2_270);
                  #_LogInfo(R2_300)
                }
                else {
                  // стр. 300 = стр. 190
                  R2_300 := R2_190;  #_SetFldGV_300(R2_300)

                  mR2_300 := 'Стр. 300 = стр. 190 (если результат меньше нуля, то 0 (ноль))';
                  vR2_300 := GD0(R2_300)+' = '+GD0(R2_190);
                  #_LogInfo(R2_300)
                }
              }

              // #endregion Расчёт значения строки 300
            }
      end;

       R1_Isch +=     R2_300     ;
      vR1_Isch += GD0(R2_300)+'+';

      flSum := true;

      // Если до 2019 года
      if isLess2019
        // Если нет признака Платона - суммировать
        flSum := (GetWordVal(XMLAdrJ + '/Служ/ПрПлатон') = 0);

      if flSum {
         R1_Upl +=     R2_300     ;
        vR1_Upl += GD0(R2_300)+'+';
      }
    }

    // #endregion РАЗДЕЛ 2

    // #region ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

    aR1_Isch := XMLAdrI + '/СумАвПлИсч';
    aR1_Upl  := XMLAdrI + '/СумАвПлУпл';

    // #endregion ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

    // #region Расчёт значения строки Isch

    #_SetFldGV(R1_Isch)
    vR1_Isch := GD0(R1_Isch)+' = '+TrimVal(vR1_Isch);
    #_LogInfo(R1_Isch)

    // #endregion Расчёт значения строки Isch

    // #region Расчёт значения строки Upl

    if GetStrNull(aR1_Upl) {
      #_SetFldGV(R1_Upl)
      vR1_Upl := GD0(R1_Upl)+' = '+TrimVal(vR1_Upl);
      #_LogInfo(R1_Upl)
    }
    else {
      vR1_Upl := '';
      LogInfo(aR1_Upl, mR1_Upl_NotEmpt, vR1_Upl);
    }

    // #endregion Расчёт значения строки Upl
  }

  // #endregion РАЗДЕЛ 1
@end.
// #endregion On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//************************************************************************************************************


//============================================================================================================
// #region On_ExportXML ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ЭКСПОРТЕ В XML
//------------------------------------------------------------------------------------------------------------
@Script On_ExportXML : boolean;
@begin
  SetFldVal('Файл/ИдФайл', Replace(_IdFail_, '.xml', ''));

  if (not XMLMap.ExpToXml(_XmlFileName_)) {
    Message('On_ExportXML: ' + XMLMap.GetStLastError, CancelButton + Warning);
    Exit;
  }

  Message('Выгружен в файл ' + _XmlFileName_);
@end.
// #endregion On_ExportXML ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ЭКСПОРТЕ В XML
//************************************************************************************************************
