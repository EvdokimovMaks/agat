//------------------------------------------------------------------------------------------------------------
//                                                                                    (c) корпорация Галактика
// Галактика 9.1 - модуль "Электронная отчетность"
// Алгоритмы расчета : "Заявление о возврате суммы излишне уплаченного (взыск., подл. возм.) налога (сбора, страх. взн., пеней, штрафа) (1150058) (2018)"
//------------------------------------------------------------------------------------------------------------


//============================================================================================================
// #region СЕРВИСНЫЕ МЕТОДЫ
//------------------------------------------------------------------------------------------------------------
@Script GetStrVal(fld:string):string;
@begin
  Result := Trim(XMLMAP.GetAttrValueByName(fld));
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetFldVis(fld:string):boolean;
@begin
  Result := XMLMAP.GetAttrVisByName(fld);
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetFldVisInTree(fld:string):boolean;
@begin
  Result := XMLMAP.GetAttrVisByNameInTree(fld);
@end.

//------------------------------------------------------------------------------------------------------------
@Script SetFldVal(fld:string; val:variant);
@begin
  XMLMAP.SetVariantAttrValueByName_Formula(fld, val, 2);
@end.

//------------------------------------------------------------------------------------------------------------
@Script SetFldVis(fld:string;vis:boolean);
@begin
  XMLMAP.SetAttrVisByName(fld,vis);
@end.

//------------------------------------------------------------------------------------------------------------
@Script MessageErrorStop_ALG(mesMesAdrXML, mesPole, mesMes: string): boolean;
@begin
  MesError.InsertMesError(mesMesAdrXML, Comp(0), '', mesPole, mesMes);
  Result := True;
@end.

//------------------------------------------------------------------------------------------------------------
@Script GetStrNull(fld:string):boolean;
@begin
  Result := XMLMAP.GetIsNullAttrValueByName(fld);
@end.

// #endregion СЕРВИСНЫЕ МЕТОДЫ
//************************************************************************************************************


//============================================================================================================
// #region On_Visable ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ УСТАНОВКЕ ВИДИМОСТИ ПОЛЕЙ
//------------------------------------------------------------------------------------------------------------
@Script On_Visable : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_Visable
  //----------------------------------------------------------------------------------------------------------
  #undef IfVis
  #undef SetVisF
  #undef SetVisT

  #define IfVis(adrIfVis)   SetFldVis(#adrIfVis, not GetStrNull(#adrIfVis));
  #define SetVisF(adrIfVis) SetFldVis(#adrIfVis, False);
  #define SetVisT(adrIfVis) SetFldVis(#adrIfVis, True );

  //------------------------------------------------------------------------------------------------------------
  function PrPodp_1_2 : boolean;
  { // Обязательно для "ПрПодп"=1 | 2
    Result := False;

    case GetStrVal('Файл/Документ/Подписант/ПрПодп') of
      '1', '2' : Result := True;
    end;
  }

  //------------------------------------------------------------------------------------------------------------
  function PrPodp_2 : boolean;
  { // Обязательно для "ПрПодп"=2
    Result := False;

    case GetStrVal('Файл/Документ/Подписант/ПрПодп') of
      '2' : Result := True;
    end;
  }

  // #endregion СЕРВИС On_Visable
  //**********************************************************************************************************
@begin
  Result := False;

  #IfVis('Файл/ИдФайлЗаяв'            )
  #IfVis('Файл/Документ/Подписант/Тлф')

  if PrPodp_1_2
     or (   not GetStrNull('Файл/Документ/Подписант/ФИО/Фамилия')
        and not GetStrNull('Файл/Документ/Подписант/ФИО/Имя'    ) )
  {
    #SetVisT('Файл/Документ/Подписант/ФИО'         )
    #IfVis  ('Файл/Документ/Подписант/ФИО/Отчество')
  }
  else #SetVisF('Файл/Документ/Подписант/ФИО')

  if PrPodp_2
     or ( not GetStrNull('Файл/Документ/Подписант/СвПред/НаимДок') )
  then #SetVisT('Файл/Документ/Подписант/СвПред')
  else #SetVisF('Файл/Документ/Подписант/СвПред')

  // Заявитель - организация | Заявитель - физическое лицо
  // НПЮЛ | НПФЛ

  if (    GetStrNull('Файл/Документ/СвНП/НПФЛ/ФИО/Фамилия')
       or GetStrNull('Файл/Документ/СвНП/НПФЛ/ФИО/Имя'    )
       or ( GetStrNull('Файл/Документ/СвНП/НПФЛ/ИННФЛ') ) )
  {
    #SetVisF('Файл/Документ/СвНП/НПФЛ')
    #SetVisT('Файл/Документ/СвНП/НПЮЛ')

  }
  else
  {
    #SetVisT('Файл/Документ/СвНП/НПФЛ')
    #SetVisF('Файл/Документ/СвНП/НПЮЛ')

    // ИНН физического лица | Сведения о физическом лице, не являющемся индивидуальным предпринимателем
    // ИННФЛ | СведФЛ

    #IfVis('Файл/Документ/СвНП/НПФЛ/ФИО/Отчество')

    if (    GetStrNull('Файл/Документ/СвНП/НПФЛ/СведФЛ/КодВидДок')
         or GetStrNull('Файл/Документ/СвНП/НПФЛ/СведФЛ/СерНомДок')
         or GetStrNull('Файл/Документ/СвНП/НПФЛ/СведФЛ/ВыдДок'   )
         or GetStrNull('Файл/Документ/СвНП/НПФЛ/СведФЛ/ДатаДок'  )
         or GetStrNull('Файл/Документ/СвНП/НПФЛ/СведФЛ/АдрРФ/КодРегион'   ) )
    {
      #SetVisF('Файл/Документ/СвНП/НПФЛ/СведФЛ')
      #SetVisT('Файл/Документ/СвНП/НПФЛ/ИННФЛ' )

    }
    else
    {
      #SetVisT('Файл/Документ/СвНП/НПФЛ/СведФЛ')
      #SetVisF('Файл/Документ/СвНП/НПФЛ/ИННФЛ' )
    }
  }

  // Получатель - организация | Получатель - физическое лицо
  // 1- ПЮЛ | 2 - ПФЛ | 3 - ПОргЛицСч

  case GetStrVal('Файл/Документ/ЗВИУН/Получатель/ПрПолуч') of
  '1':
  {
    #SetVisF('Файл/Документ/ЗВИУН/Получатель/ПФЛ')
    #SetVisF('Файл/Документ/ЗВИУН/Получатель/ПОргЛицСч')
    #SetVisT('Файл/Документ/ЗВИУН/Получатель/ПЮЛ')


  }
  '2':
  {
    #SetVisT('Файл/Документ/ЗВИУН/Получатель/ПФЛ')
    #SetVisF('Файл/Документ/ЗВИУН/Получатель/ПОргЛицСч')
    #SetVisF('Файл/Документ/ЗВИУН/Получатель/ПЮЛ')

    #IfVis('Файл/Документ/ЗВИУН/Получатель/ПФЛ/ФИО/Отчество')
  }
  '3':
  {
    #SetVisF('Файл/Документ/ЗВИУН/Получатель/ПФЛ')
    #SetVisT('Файл/Документ/ЗВИУН/Получатель/ПОргЛицСч')
    #SetVisF('Файл/Документ/ЗВИУН/Получатель/ПЮЛ')
  }
  end;

  Result := True;
@end.
// #endregion On_Visable ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ УСТАНОВКЕ ВИДИМОСТИ ПОЛЕЙ
//************************************************************************************************************


//============================================================================================================
// #region On_Check ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ ПОЛЕЙ
//------------------------------------------------------------------------------------------------------------
@Script On_Check : boolean;
  //==========================================================================================================
  // #region СЕРВИС On_Check
  //----------------------------------------------------------------------------------------------------------
  #include AllTaxObj.Vih

  // #region ПРОВЕРКИ

  // #region КПП
  function IsValidKPP_Local(strIn: string; var strGetMes: string) : boolean;
  { // КППТип
    strGetMes := 'Формат поля: 9 символов';

    Result := False;
    Result := CheckError.isRegExpr('^(([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})([0-9]{2})([0-9A-Z]{2})([0-9]{3}))$', strIn);
  };
  // #endregion КПП
  //----------------------------------------------------------------------------------------------------------
  // #region Код региона
  function IsValidKodRegion(strIn: string; var strGetMes: string) : boolean;
  { // КодРегион
    // Указывается в соответствии со справочником "Коды субъектов Российской Федерации" Приложение N 3 к Приказу ФНС России от 09.11.2015 N ММВ-7-3/497@
    strGetMes := 'Возможные значения: Коды субъектов РФ из Приложение №3 к Приказу ФНС России от 09.11.2015 №ММВ-7-3/497@. Формат: 2 цифры';

    Result := False;
    Result := CheckError.isRegExpr('^(01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29)$', strIn)
           or CheckError.isRegExpr('^(30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58)$', strIn)
           or CheckError.isRegExpr('^(59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|83|86|87|89|91|92|99)$'   , strIn);
  };
  // #endregion Код региона
  //----------------------------------------------------------------------------------------------------------
  // #region Код вида документа
  function IsValidKodVidDok(strIn: string; var strGetMes: string) : boolean;
  { // КодВидДок
    strGetMes := 'Возможные значения: 03, 07, 08, 10, 11, 12, 13, 14, 15, 18, 21, 23, 24 или 91. Формат: 2 цифры';

    Result := False;
    Result := CheckError.isRegExpr('^(03|07|08|10|11|12|13|14|15|18|21|23|24|91)$', strIn);
  };
  // #endregion Код вида документа
  //----------------------------------------------------------------------------------------------------------
  // #region Код вида документа 2
  function IsValidKodVidDok2(strIn: string; var strGetMes: string) : boolean;
  { // КодВидДок
    strGetMes := 'Возможное значение: 21. Формат: 2 цифры';

    Result := False;
    Result := CheckError.isRegExpr('^(21)$', strIn);
  };
  // #endregion Код вида документа 2
  //----------------------------------------------------------------------------------------------------------
  // #region Признак номера счета
  function IsValidPrNomSch(strIn: string; var strGetMes: string) : boolean;
  { // ПрНомСч
    strGetMes := 'Возможные значения: 1, 2, 3 или 4. Формат: 1 цифра';

    Result := False;
    Result := CheckError.isRegExpr('^(1|2|3|4)$', strIn);
  };
  // #endregion Признак номера счета
  //----------------------------------------------------------------------------------------------------------
  // #region Налоговый период (расчетный период) (код)
  function IsValidNalPeriod(strIn: string; var strGetMes: string) : boolean;
  { // НалПериод
    strGetMes := 'Возможные значения: дата или МС.[01-12].ГГГГ, КВ.[01-04].ГГГГ, ПЛ.[01-02].ГГГГ, ГД.00.ГГГГ. Формат: ДД.ММ.ГГГГ (01.01.1800 - 31.12.2099) или XX.YY.ГГГГ';

    Result := False;
    Result := CheckError.isRegExpr('^((МС)\.(01|02|03|04|05|06|07|08|09|10|11|12)\.([0-9]{4}))$', strIn)
           or CheckError.isRegExpr('^((КВ)\.(01|02|03|04)\.([0-9]{4}))$'                        , strIn)
           or CheckError.isRegExpr('^((ПЛ)\.(01|02)\.([0-9]{4}))$'                              , strIn)
           or CheckError.isRegExpr('^((ГД)\.(00)\.([0-9]{4}))$'                                 , strIn)
           or IsValidDate(strIn, '');
  };
  // #endregion Налоговый период (расчетный период) (код)
  //----------------------------------------------------------------------------------------------------------
  // #region Номер статьи НК РФ
  function IsValidNomerStNK(strIn: string; var strGetMes: string) : boolean;
  { // НомерСтНК
    strGetMes := 'Возможные значения: 78, 79, 176, 203 или 333.40. Формат: от 2 до 6 символов';

    Result := False;
    Result := CheckError.isRegExpr('^(78|79|176|203|333.40)$', strIn);
  };
  // #endregion Номер статьи НК РФ
  //----------------------------------------------------------------------------------------------------------
  // #region Признак излишней суммы
  function IsValidPrIzlSum(strIn: string; var strGetMes: string) : boolean;
  { // ПрИзлСум
    strGetMes := 'Возможные значения: 1, 2 или 3. Формат: 1 цифра';

    Result := False;
    Result := CheckError.isRegExpr('^(1|2|3)$', strIn);
  };
  // #endregion Признак излишней суммы
  //----------------------------------------------------------------------------------------------------------
  // #region Признак излишнего платежа
  function IsValidPrIzlPlat(strIn: string; var strGetMes: string) : boolean;
  { // ПрИзлПлат
    strGetMes := 'Возможные значения: 1, 2, 3, 4 или 5. Формат: 1 цифра';

    Result := False;
    Result := CheckError.isRegExpr('^(1|2|3|4|5)$', strIn);
  };
  // #endregion Признак излишнего платежа
  //----------------------------------------------------------------------------------------------------------
  // #region Признак лица, подписавшего документ
  function IsValidPrPodp_local(strIn: string; var strGetMes: string) : boolean;
  { // ПрПодп
    strGetMes := 'Возможные значения: 1, 2 или 3. Формат: 1 цифра';

    Result := False;
    Result := CheckError.isRegExpr('^(1|2|3)$', strIn);
  };
  // #endregion Признак лица, подписавшего документ

  // #endregion ПРОВЕРКИ

  // #region FUNCTION

  function IsStr_1_20   (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,   20, _Mes); }
  function IsStr_1_25   (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,   25, _Mes); }
  function IsStr_1_40   (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,   40, _Mes); }
  function IsStr_1_50   (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,   50, _Mes); }
  function IsStr_1_60   (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,   60, _Mes); }
  function IsStr_1_100  (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,  100, _Mes); }
  function IsStr_1_120  (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,  120, _Mes); }
  function IsStr_1_255  (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1,  255, _Mes); }
  function IsStr_1_1000 (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenStr(_Val, 1, 1000, _Mes); }

  function IsInt_1_10 (_Val: string; var _Mes: string) : boolean;  { Result := IsValidLenNumber(_Val, 1, 10, _Mes, FALSE); }

  function IsDbl_12_2 (_Val: string; var _Mes: string) : boolean;  { Result := IsValidDecimal(_Val, 12, 2, _Mes, FALSE); }

  // #region Признак подписанта = 1 | 2
  function PrPodp_1_2 : boolean;
  { // Обязательно для "ПрПодп"=1 | 2
    Result := False;

    case GetStrVal('Файл/Документ/Подписант/ПрПодп') of
      '1', '2' : Result := True;
    end;
  }
  // #endregion Признак подписанта = 1 | 2
  //----------------------------------------------------------------------------------------------------------
  // #region Признак подписанта = 2
  function PrPodp_2 : boolean;
  { // Обязательно для "ПрПодп"=2
    Result := False;

    case GetStrVal('Файл/Документ/Подписант/ПрПодп') of
      '2' : Result := True;
    end;
  }
  // #endregion Признак подписанта = 2

  // #endregion FUNCTION

  // #region DECLARE

  #declare _NoKor(_adrXML, _Pole)
    MessageErrorStop_ALG
    (
      #_adrXML
    , #_Pole
    , 'Поле не соответствует формату. ' + getMes
    );
  #end

  #declare _IfNotValid(_adrXML, _Valid, _Pole)
    if not #_Valid(GetStrVal(#_adrXML), getMes)
      MessageErrorStop_ALG
      (
        #_adrXML
      , #_Pole
      , 'Поле не соответствует формату. ' + getMes
      );
  #end

  #declare _IfNotValidVis(_adrXML, _Valid, _Pole)
    if GetFldVis(#_adrXML)
      if not #_Valid(GetStrVal(#_adrXML), getMes)
        MessageErrorStop_ALG
        (
          #_adrXML
        , #_Pole
        , 'Поле не соответствует формату. ' + getMes
        );
  #end

  // #endregion DECLARE

  // #endregion СЕРВИС On_Check
  //**********************************************************************************************************
@begin

  var getMes : string;

  if not IsValidVersForm(GetStrVal('Файл/ВерсФорм'), '5.02', getMes)
    #_NoKor('Файл/ВерсФорм', 'Версия формата')

  if not IsValidKND(GetStrVal('Файл/Документ/КНД'), '1150058', getMes)
    #_NoKor('Файл/Документ/КНД', 'Код формы отчетности по КНД')

  #_IfNotValid   ('Файл/ВерсПрог'          , IsStr_1_40 , 'Версия программы'                         )
  #_IfNotValidVis('Файл/ИдФайлЗаяв'        , IsStr_1_255, 'Идентификатор файла документа (сообщения)')
  #_IfNotValid   ('Файл/Документ/ДатаДок'  , IsValidDate, 'Дата формирования документа'              )
  #_IfNotValid   ('Файл/Документ/КодНО'    , IsValidSONO, 'Код налогового органа'                    )
  #_IfNotValid   ('Файл/Документ/НомерЗаяв', IsInt_1_10 , 'Номер заявления'                          )

  if     GetFldVis('Файл/Документ/СвНП/НПЮЛ')
     and GetFldVis('Файл/Документ/СвНП/НПФЛ')
  then MessageErrorStop_ALG
       ( 'Файл/Документ/СвНП/НПЮЛ/НаимОрг'
       , 'Заявитель'
       , 'Для инф. блока "Заявитель" должны быть заполнены либо сведения о ЮЛ, либо сведения о ФЛ' );

  if     not GetFldVis('Файл/Документ/СвНП/НПЮЛ')
     and not GetFldVis('Файл/Документ/СвНП/НПФЛ')
  then MessageErrorStop_ALG
       ( 'Файл/Документ/СвНП/НПЮЛ/НаимОрг'
       , 'Заявитель'
       , 'Для инф. блока "Заявитель" обязательно должны быть заполнены либо сведения о ЮЛ, либо сведения о ФЛ' );

  if GetFldVis('Файл/Документ/СвНП/НПЮЛ')
  {
    #_IfNotValid('Файл/Документ/СвНП/НПЮЛ/НаимОрг', IsStr_1_1000       , 'Наименование организации')
    #_IfNotValid('Файл/Документ/СвНП/НПЮЛ/ИННЮЛ'  , IsValidINNUL       , 'ИНН организации'         )
    #_IfNotValid('Файл/Документ/СвНП/НПЮЛ/ИННЮЛ'  , CheckError.Prov_INN, 'ИНН организации'         )
    #_IfNotValid('Файл/Документ/СвНП/НПЮЛ/КПП'    , IsValidKPP_Local   , 'КПП'                     )
  }

  if GetFldVis('Файл/Документ/СвНП/НПФЛ')
  {
    #_IfNotValid   ('Файл/Документ/СвНП/НПФЛ/ФИО/Фамилия' , IsStr_1_60, 'Фамилия' )
    #_IfNotValid   ('Файл/Документ/СвНП/НПФЛ/ФИО/Имя'     , IsStr_1_60, 'Имя'     )
    #_IfNotValidVis('Файл/Документ/СвНП/НПФЛ/ФИО/Отчество', IsStr_1_60, 'Отчество')

    if GetFldVis('Файл/Документ/СвНП/НПФЛ/ИННФЛ')
    {
      #_IfNotValid('Файл/Документ/СвНП/НПФЛ/ИННФЛ/Значение', IsValidINNFL       , 'ИНН физического лица')
      #_IfNotValid('Файл/Документ/СвНП/НПФЛ/ИННФЛ/Значение', CheckError.Prov_INN, 'ИНН физического лица')
    }

    if GetFldVis('Файл/Документ/СвНП/НПФЛ/СведФЛ')
    {
      #_IfNotValid   ('Файл/Документ/СвНП/НПФЛ/СведФЛ/УдЛичнФЛ/КодВидДок', IsValidKodVidDok, 'Код вида документа'              )
      #_IfNotValid   ('Файл/Документ/СвНП/НПФЛ/СведФЛ/УдЛичнФЛ/СерНомДок', IsStr_1_25      , 'Серия и номер'                   )
      #_IfNotValid   ('Файл/Документ/СвНП/НПФЛ/СведФЛ/УдЛичнФЛ/ВыдДок'   , IsStr_1_255     , 'Кем выдан'                       )
      #_IfNotValid   ('Файл/Документ/СвНП/НПФЛ/СведФЛ/УдЛичнФЛ/ДатаДок'  , IsValidDate     , 'Дата выдачи'                     )
    }

    if     GetFldVis('Файл/Документ/СвНП/НПФЛ/ИННФЛ' )
       and GetFldVis('Файл/Документ/СвНП/НПФЛ/СведФЛ')
    then MessageErrorStop_ALG
         ( 'Файл/Документ/СвНП/НПФЛ/ИННФЛ/Значение'
         , 'Заявитель ФЛ'
         , 'Для инф. блока "Заявитель ФЛ" должны быть заполнены либо сведения о ИНН ФЛ, либо сведения о ФЛ' );

    if     not GetFldVis('Файл/Документ/СвНП/НПФЛ/ИННФЛ' )
       and not GetFldVis('Файл/Документ/СвНП/НПФЛ/СведФЛ')
    then MessageErrorStop_ALG
         ( 'Файл/Документ/СвНП/НПФЛ/ИННФЛ/Значение'
         , 'Заявитель ФЛ'
         , 'Для инф. блока "Заявитель ФЛ" обязательно должны быть заполнены либо сведения о ИНН ФЛ, либо сведения о ФЛ' );
  }

  #_IfNotValid   ('Файл/Документ/Подписант/ПрПодп', IsValidPrPodp_local, 'Признак лица, подписавшего документ')
  #_IfNotValidVis('Файл/Документ/Подписант/Тлф'   , IsStr_1_20         , 'Номер контактного телефона'         )

  if GetFldVis('Файл/Документ/Подписант/ФИО') or PrPodp_1_2
  {
    #_IfNotValid   ('Файл/Документ/Подписант/ФИО/Фамилия' , IsStr_1_60, 'Фамилия' )
    #_IfNotValid   ('Файл/Документ/Подписант/ФИО/Имя'     , IsStr_1_60, 'Имя'     )
    #_IfNotValidVis('Файл/Документ/Подписант/ФИО/Отчество', IsStr_1_60, 'Отчество')
  }

  if GetFldVis('Файл/Документ/Подписант/СвПред') or PrPodp_2
  {
     #_IfNotValid('Файл/Документ/Подписант/СвПред/НаимДок', IsStr_1_120, 'Наименование документа, подтверждающего полномочия представителя')
  }

  #_IfNotValid('Файл/Документ/ЗВИУН/НомерСтНК'          , IsValidNomerStNK, 'Номер статьи НК РФ'                        )
  #_IfNotValid('Файл/Документ/ЗВИУН/ПрИзлСум'           , IsValidPrIzlSum , 'Признак излишней суммы'                    )
  #_IfNotValid('Файл/Документ/ЗВИУН/ПрИзлПлат'          , IsValidPrIzlPlat, 'Признак излишнего платежа'                 )
  #_IfNotValid('Файл/Документ/ЗВИУН/ИзлУплНал/Сумма'    , IsDbl_12_2      , 'Излишне уплаченная сумма'                  )
  #_IfNotValid('Файл/Документ/ЗВИУН/ИзлУплНал/НалПериод', IsValidNalPeriod, 'Налоговый период (расчетный период) (код)' )
  #_IfNotValid('Файл/Документ/ЗВИУН/ИзлУплНал/КБК'      , IsValidKBK      , 'Код бюджетной классификации'               )
  #_IfNotValid('Файл/Документ/ЗВИУН/ИзлУплНал/ОКТМО'    , IsValidOKTMO    , 'Код по ОКТМО'                              )
  #_IfNotValid('Файл/Документ/ЗВИУН/СвСчБанк/НаимБанк'  , IsStr_1_255     , 'Наименование банка (кредитной организации)')
  #_IfNotValid('Файл/Документ/ЗВИУН/СвСчБанк/НаимБанк'  , IsStr_1_100     , 'Наименование банка'                        )
  #_IfNotValid('Файл/Документ/ЗВИУН/СвСчБанк/НомСч   '  , IsValidKorSch   , 'Номер корреспондентского счета'            )
  #_IfNotValid('Файл/Документ/ЗВИУН/СвСчБанк/БИК'       , IsValidBIK      , 'БИК банка (кредитной организации)'         )
  #_IfNotValid('Файл/Документ/ЗВИУН/СвСчБанк/ПрНомСч'   , IsValidPrNomSch , 'Признак номера счета'                      )
  #_IfNotValid('Файл/Документ/ЗВИУН/СвСчБанк/НомСч'     , IsValidKorSch   , 'Номер счета'                               )

  if GetFldVis('Файл/Документ/ЗВИУН/Получатель/ПЮЛ')
  {
    #_IfNotValid('Файл/Документ/ЗВИУН/Получатель/ПЮЛ/НаимОрг', IsStr_1_1000, 'Наименование организации')
  }

  if GetFldVis('Файл/Документ/ЗВИУН/Получатель/ПФЛ')
  {
    #_IfNotValid   ('Файл/Документ/ЗВИУН/Получатель/ПФЛ/ФИО/Фамилия'       , IsStr_1_60       , 'Фамилия'  )
    #_IfNotValid   ('Файл/Документ/ЗВИУН/Получатель/ПФЛ/ФИО/Имя'           , IsStr_1_60       , 'Имя'      )
    #_IfNotValidVis('Файл/Документ/ЗВИУН/Получатель/ПФЛ/ФИО/Отчество'      , IsStr_1_60       , 'Отчество' )
    #_IfNotValid   ('Файл/Документ/ЗВИУН/Получатель/ПФЛ/УдЛичнФЛ/КодВидДок', IsValidKodVidDok2, 'КодВидДок')
    #_IfNotValid   ('Файл/Документ/ЗВИУН/Получатель/ПФЛ/УдЛичнФЛ/СерНомДок', IsStr_1_25       , 'СерНомДок')
    #_IfNotValid   ('Файл/Документ/ЗВИУН/Получатель/ПФЛ/УдЛичнФЛ/ВыдДок'   , IsStr_1_255      , 'ВыдДок'   )
    #_IfNotValid   ('Файл/Документ/ЗВИУН/Получатель/ПФЛ/УдЛичнФЛ/ДатаДок'  , IsValidDate      , 'ДатаДок'  )
  }

  if     GetFldVis('Файл/Документ/ЗВИУН/Получатель/ПЮЛ')
     and GetFldVis('Файл/Документ/ЗВИУН/Получатель/ПФЛ')
     and not GetFldVis('Файл/Документ/ЗВИУН/Получатель/ПОргЛицСч')
  then MessageErrorStop_ALG
       ( 'Файл/Документ/ЗВИУН/Получатель/ПЮЛ/НаимОрг'
       , 'Получатель'
       , 'Для инф. блока "Получатель" обязательно должны быть заполнены либо сведения о ЮЛ, либо сведения о ФЛ, либо о ПОргЛицСч' );

  if     not GetFldVis('Файл/Документ/ЗВИУН/Получатель/ПЮЛ')
     and not GetFldVis('Файл/Документ/ЗВИУН/Получатель/ПФЛ')
     and not GetFldVis('Файл/Документ/ЗВИУН/Получатель/ПОргЛицСч')
  then MessageErrorStop_ALG
       ( 'Файл/Документ/ЗВИУН/Получатель/ПЮЛ/НаимОрг'
       , 'Получатель'
       , 'Для инф. блока "Получатель" обязательно должны быть заполнены либо сведения о ЮЛ, либо сведения о ФЛ, либо о ПОргЛицСч' );

@end.
// #endregion On_Check ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ПРОВЕРКЕ ПОЛЕЙ
//************************************************************************************************************


//============================================================================================================
// #region On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//------------------------------------------------------------------------------------------------------------
@Script On_Recalc : boolean;
@begin

  if ((GetStrVal('Файл/Документ/ДатаДок') = '') or (GetStrVal('Файл/Документ/ДатаДок') = 'ДД.ММ.ГГГГ'))
    SetFldVal('Файл/Документ/ДатаДок', DateToStr(Cur_Date, XMLMap.GetAttrVFormatByName('Файл/Документ/ДатаДок')));

@end.
// #endregion On_Recalc ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ РАСЧЕТЕ
//************************************************************************************************************


//============================================================================================================
// #region On_ExportXML ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ЭКСПОРТЕ В XML
//------------------------------------------------------------------------------------------------------------
@Script On_ExportXML : boolean;
@begin
  if GetFldVisInTree('Файл/Документ/СвНП/НПФЛ/СведФЛ')
  {
    Message('Выгрузка не производится, если для заявителя указаны только сведения о ФЛ', cancelButton+Warning);
    Exit;
  }

  SetFldVal('Файл/ИдФайл', Replace(_IdFail_, '.xml', ''));

  if (not XMLMap.ExpToXml(_XmlFileName_)) {
    Message('On_ExportXML: '+ XMLMap.GetStLastError, cancelButton+Warning);
    Exit;
  }

  Message('Выгружен в файл ' + _XmlFileName_);
@end.
// #endregion On_ExportXML ДЕЙСТВИЯ ВЫПОЛНЯЕМЫЕ ПРИ ЭКСПОРТЕ В XML
//************************************************************************************************************
