//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 8.10 - Спецоснастка
// Печать акта на пересортицу
//------------------------------------------------------------------------------

procedure PrintSortDocHead;
{
  frmSortDoc.PutEventById(feDoLoop, fcSortDoc);

  frmSortDoc.Write(MBPMove.nRec);
  frmSortDoc.Write(MBPMove.Nom);
  frmSortDoc.Write(MBPMove.dMove);
  frmSortDoc.Write(MBPMove.DesGr);
  frmSortDoc.Write(MBPMove.Descr);

  if (not isValid(#KatPodr))
    frmSortDoc.SkipFormat(1);
  else
    frmSortDoc.Write(KatPodr.Name);

  if (not isValid(#KatMol))
    frmSortDoc.SkipFormat(2);
  else
  {
    frmSortDoc.Write(KatMol.Name);
    frmSortDoc.Write(oSDfuns.Get_MOL_Post(KatMol.nRec));
  }

  if (not isValid(#ToKatPodr))
    frmSortDoc.SkipFormat(1);
  else
    frmSortDoc.Write(ToKatPodr.Name);

  if (not isValid(#ToKatMol))
    frmSortDoc.SkipFormat(2);
  else
  {
    frmSortDoc.Write(ToKatMol.Name);
    frmSortDoc.Write(oSDfuns.Get_MOL_Post(ToKatMol.nRec));
  }

  frmSortDoc.Write(iFeeSigners.GetFeeSigners);
}

//-------------------------------------------------------------------------

Procedure PrintSortDocSpec;
{
  frmSortDoc.PutEventById(feDoLoop, fcSortSpDoc);

  // Добавляемый предмет
  if (not isValid(#MBPIn))
    frmSortDoc.SkipFormat(12);
  else
  {
    frmSortDoc.Write(MBPIn.nRec);
    frmSortDoc.Write(KatMBP.Name);
    frmSortDoc.Write(KatMBP.NNumber);
    frmSortDoc.Write(KatEd.Name);
    frmSortDoc.Write(piExtAttr.sGetAttr(coKatEd, KatEd.nRec, 'Код'));
    frmSortDoc.Write(GetMBPSklNum(KatMBP.DopInfo, MBPIn.DopInfo));
    frmSortDoc.Write(GetMBPInvNum(KatMBP.DopInfo, MBPIn.DopInfo));
    frmSortDoc.Write(GetMBPPasNum(KatMBP.DopInfo, MBPIn.DopInfo));
    frmSortDoc.Write(MBPIn.KolDoc);
    frmSortDoc.Write(MBPIn.Price);
    frmSortDoc.Write(InDocSum);
    frmSortDoc.Write(MBPIn.PercNach);
  }

  // Списываемый предмет
  if (not isValid(#MBPOut))
    frmSortDoc.SkipFormat(12);
  else
  {
    frmSortDoc.Write(MBPOut.nRec);
    frmSortDoc.Write(rKatMBP.Name);
    frmSortDoc.Write(rKatMBP.NNumber);
    frmSortDoc.Write(rKatEd.Name);
    frmSortDoc.Write(piExtAttr.sGetAttr(coKatEd, rKatEd.nRec, 'Код'));
    frmSortDoc.Write(GetMBPSklNum(rKatMBP.DopInfo, rMBPIn.DopInfo));
    frmSortDoc.Write(GetMBPInvNum(rKatMBP.DopInfo, rMBPIn.DopInfo));
    frmSortDoc.Write(GetMBPPasNum(rKatMBP.DopInfo, rMBPIn.DopInfo));
    frmSortDoc.Write(MBPOut.Kol);
    frmSortDoc.Write(rMBPIn.Price);
    frmSortDoc.Write(OutBalSum);
    frmSortDoc.Write(MBPOut.tPercent);
  }
}

//-------------------------------------------------------------------------

Procedure PrintSortDoc;
{
  var lCount, i : longint;
  var _cNRec : comp;

  if bPrintCurDoc // печатаем текущий документ
    lCount := 0;
  else            // печатаем помеченные документы
    lCount := GetMarkerCount(DocMarker);

  if (lCount = 0) // печатаем текущий документ
  {
    lCount := 1;
    bPrintCurDoc := True;
  }

  PushPos(#MBPMove);
  PushPos(#MBPIn);

  for (i := 0; i < lCount; i++)
  {
    if (not bPrintCurDoc)
    {
      if (not GetMarker(DocMarker, i, _cNRec))
        Continue;

      if (GetFirst FastFirstRow MBPMove where (( _cNRec == MBPMove.nRec )) <> tsOk)
        Continue;
    }

    PrintSortDocHead;

    if (GetFirst MBPIn <> tsOk)
      frmSortDoc.SkipFormat(24);
    else
      _LOOP MBPIn
        PrintSortDocSpec;
  }

  PopPos(#MBPIn);
  PopPos(#MBPMove);

  if (not frmSortDoc.Error)
    frmSortDoc.ShowFile('Акт на пересортицу (Sort_MBP.OUT)');
  else
    frmSortDoc.AbortForm;
}

//------------------------------------------------------------------------------

var lMarkCount, lIndex : longint;
var bFirst : boolean;

function IsFindSortDoc : boolean;
var _cNRec : comp;
{
  IsFindSortDoc := False;

  if (lIndex = 0)
  {
    if bPrintCurDoc // печатаем текущий документ
      lMarkCount := 0;
    else            // печатаем помеченные документы
      lMarkCount := GetMarkerCount(DocMarker);

    if (lMarkCount = 0) // печатаем текущий документ
    {
      lMarkCount := 1;
      bPrintCurDoc := True;
    }
  }

  while (lIndex < lMarkCount)
  {
    if (not bPrintCurDoc)
    {
      if (not GetMarker(DocMarker, lIndex, _cNRec))
      {
        lIndex++;
        Continue;
      }

      if (GetFirst FastFirstRow MBPMove where (( _cNRec == MBPMove.nRec )) <> tsOk)
      {
        lIndex++;
        Continue;
      }
    }

    IsFindSortDoc := True;
    lIndex++;
    Break;
  }
}

DataStream dtsSortDoc
(
  [CFH]           CommonFormHeader;

  DataSet SortDoc
  (
    [BarCode]       GenerateBarCode(GetDocTiDkGal(pTypeDoc), MBPMove.nRec);
    [DocNom]        MBPMove.Nom;
    [DocDate]       DateToStr(MBPMove.dMove, 'DD/MM/YYYY');
    [FrPodr]        KatPodr.Name;
    [FrMol]         KatMol.Name;
    [FrMolPost]     oSDfuns.Get_MOL_Post(KatMol.nRec);
    [ToPodr]        ToKatPodr.Name;
    [ToMol]         ToKatMol.Name;
    [ToMolPost]     oSDfuns.Get_MOL_Post(ToKatMol.nRec);

    DataSet SortSpDoc
    (
      [InNRec]      MBPIn.nRec;
      [pMBPName]    KatMBP.Name;
      [pMBPNum]     KatMBP.NNumber;
      [pMBPEd]      KatEd.Name;
      [pMBPEdKod]   piExtAttr.sGetAttr(coKatEd, KatEd.nRec, 'Код');
      [pSklNum]     GetMBPSklNum(KatMBP.DopInfo, MBPIn.DopInfo);
      [pInvNum]     GetMBPInvNum(KatMBP.DopInfo, MBPIn.DopInfo);
      [pPasNum]     GetMBPPasNum(KatMBP.DopInfo, MBPIn.DopInfo);
      [pKol]        MBPIn.KolDoc;
      [pPrice]      MBPIn.Price;
      [pStoim]      InDocSum;
      [pPerc]       MBPIn.PercNach;

      [OutNRec]     MBPOut.nRec;
      [rMBPName]    rKatMBP.Name;
      [rMBPNum]     rKatMBP.NNumber;
      [rMBPEd]      rKatEd.Name;
      [rMBPEdKod]   piExtAttr.sGetAttr(coKatEd, rKatEd.nRec, 'Код');
      [rSklNum]     GetMBPSklNum(rKatMBP.DopInfo, rMBPIn.DopInfo);
      [rInvNum]     GetMBPInvNum(rKatMBP.DopInfo, rMBPIn.DopInfo);
      [rPasNum]     GetMBPPasNum(rKatMBP.DopInfo, rMBPIn.DopInfo);
      [rKol]        MBPOut.Kol;
      [rPrice]      rMBPIn.Price;
      [rStoim]      OutBalSum;
      [rPerc]       MBPOut.tPercent;
    );
  );

  DataSet Signers
  (
    [FIO]   iFeeSigners.GetSignerFIO(1);
    [TabN]  iFeeSigners.GetSignerTabN;
    [Post]  iFeeSigners.GetSignerPosition(1);
    [Role]  iFeeSigners.GetSignerRole;
  );
)

HandleEvent DataSet Signers
//-------------------------
  cmPreProcess:
  {
    lSign := 0;

    if (not iFeeSigners.FeeSignersIsValid)
      AbortProcess;
  }
//-------------------------
  cmOnProcess:
  {
    if (not NextVisual)
      BreakProcess;

    lSign++;

    if (lSign = 1)
    {
      if (iFeeSigners.GetSignerFirst)
        ContinueDataSet;
    }
    else
    {
      if (iFeeSigners.GetSignerNext)
        ContinueDataSet;
    }
  }
//-------------------------
End; // HandleEvent DataSet Signers

HandleEvent DataSet SortSpDoc
//------------------
  cmPreProcess:
    bFirst := True;
//------------------
  cmOnProcess:
  {
    if (not NextVisual)
      BreakProcess;

    if (bFirst)
    {
      if (GetFirst MBPIn = tsOk)
        ContinueDataset;
    }
    else
    {
      if (GetNext MBPIn = tsOk)
        ContinueDataset;
    }

    bFirst := False;
  }
//------------------
End; // HandleEvent DataSet SortSpDoc

HandleEvent DataSet SortDoc
//------------------
  cmPreProcess:
    lIndex := 0;
//------------------
  cmOnProcess:
  {
    if (not NextVisual)
      BreakProcess;

    if (IsFindSortDoc)
      ContinueDataSet;
  }
//------------------
End; // HandleEvent DataSet SortDoc

HandleEvent // DataStream dtsSortDoc
//------------------
  cmPreProcess:
  {
    StartNewVisual(vtRotateVisual, vfTimer + vfBreak + vfConfirm, 'Формирование ведомости...', 1);
    PushPos(#MBPMove);
    PushPos(#MBPIn);
  }
//------------------
  cmPostProcess:
  {
    PopPos(#MBPIn);
    PopPos(#MBPMove);
    StopVisual('', 0);
  }
//------------------
End; // HandleEvent DataStream dtsSortDoc
End; // DataStream dtsSortDoc

//------------------------------------------------------------------------------
