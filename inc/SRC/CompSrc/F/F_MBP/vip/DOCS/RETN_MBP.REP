//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Спецоснастка
// Печать накладной на возврат спецоснастки в МЦ,
// Используется форма для внутреннего перемещения спецоснастки.
//------------------------------------------------------------------------------

Create View ctPrnDoc
From
  Persons,
  Appointments,
  Catalogs;

function GetPersName(pPer : comp) : string;
{
  GetPersName := '';

  if (ctPrnDoc.GetFirst Persons where (( pPer == Persons.nRec )) = tsOk)
    GetPersName := ctPrnDoc.Persons.FIO;
}

function GetPersPost(pPer : comp) : string;
{
  GetPersPost := '';

  if (ctPrnDoc.GetLast Appointments where (( pPer       == Appointments.Person and
                                             Integer(0) == Appointments.lPrizn )) = tsOk)
    if (ctPrnDoc.GetFirst Catalogs where (( ctPrnDoc.Appointments.Post == Catalogs.nRec )) = tsOk)
      GetPersPost := ctPrnDoc.Catalogs.Name;
}

//-------------------------------------------------------------------------

procedure ReadPersFIODsk;
{
  if (not ReadMyDsk(cSigners, 'RETNMBP_' + '_cSigners', true))
    cSigners := 0;

  if (not ReadMyDsk(cReqPers, 'RETNMBP_' + '_cReqPers', true))
    cReqPers := 0;

  if (not ReadMyDsk(cLetPers, 'RETNMBP_' + '_cLetPers', true))
    cLetPers := 0;

  sReqPersName := GetPersName(cReqPers);
  sLetPersName := GetPersName(cLetPers);
}

procedure SavePersFIODsk;
{
  SaveMyDsk(cSigners, 'RETNMBP_' + '_cSigners');
  SaveMyDsk(cReqPers, 'RETNMBP_' + '_cReqPers');
  SaveMyDsk(cLetPers, 'RETNMBP_' + '_cLetPers');
}

//-------------------------------------------------------------------------

// Окно настройки печати в документе на внутреннее перемещение
Window wiRetnParams 'Настройка параметров печати' (,, sci1Esc) EscClose, Gray;
  Show at (7, 9, 65, 15);

Screen scRetnParams;
  NoTableNavigation;
Fields
  sFeeSigners  ('Подписанты. (F3 - Выбор, Ctrl+F3 - Выбор с параметрами)',, sci13Esc) : PickButton, Protect;
Buttons
 cmOk, Default,, 'Сформировать отчет';
 cmCancel, ,, 'Отмена';
<<

 `Подписанты:`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


         <.~C~формировать.>      <.   Отмена   .>
>>
end; // Screen scRetnParams

Screen scRetnParamsEx;
  NoTableNavigation;
Fields
  sReqPersName ('Лицо, затребовавшее перемещаемые предметы',, sci13Esc) : Protect;
  sLetPersName ('Лицо, разрешившее перемещение предметов',, sci13Esc) : Protect;
  sFeeSigners  ('Подписанты. (F3 - Выбор, Ctrl+F3 - Выбор с параметрами)',, sci13Esc) : PickButton, Protect;
Buttons
 cmOk, Default,, 'Сформировать отчет';
 cmCancel, ,, 'Отмена';
<<
 `Затребовал:`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Разрешил:`    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Подписанты:`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

         <.~C~формировать.>      <.   Отмена   .>
>>
end; // Screen scRetnParamsEx

HandleEvent // Window wiRetnParams
//--------------------------------
cmInit:
{
  SetRepPers := false;
  ReadPersFIODsk;
  SetFormat(if (boGetTune('SKLAD.AKT_MOVE.ZAPRWIND'), scRetnParamsEx, scRetnParams));
  // Подписанты
  iFeeSigners.SetFeeSigners(cSigners);
  Set sFeeSigners := iFeeSigners.GetFeeSignersName;
}
//--------------------------------
cmRestoreDoc:
{
  case (CurField) of
  //----------------
    #sFeeSigners:
    {
      iFeeSigners.RunWindowFeeSigners(0);
      cSigners := iFeeSigners.GetFeeSigners;
      Set sFeeSigners := iFeeSigners.GetFeeSignersName;
    }
  //----------------
  end;
}
//--------------------------------
cmOk:
{
  SavePersFIODsk;
  SetRepPers := true;
  CloseWindow(wiRetnParams);
}
//--------------------------------
end; // HandleEvent Window wiRetnParams
end; // Window wiRetnParams

//------------------------------------------------------------------------------

var Npp : LongInt;
var ItogKol, ItogSum : Double;

Procedure PrintMove_MBP_Head;
{
  Npp := 0;
  ItogKol := 0.0;
  ItogSum := 0.0;

  frmMove_MBP.Write(iOrgInfo.GetMyOrgType(KatSopr.dSopr));
  frmMove_MBP.Write(iOrgInfo.GetMyOrgNameT(KatSopr.dSopr));
  frmMove_MBP.Write(iOrgInfo.MyOrgOKPO);

  frmMove_MBP.Write(cgDoc_0604);
  frmMove_MBP.Write(KatSopr.nRec);
  frmMove_MBP.Write(KatSopr.NSopr);
  frmMove_MBP.Write(KatSopr.dSopr);

  frmMove_MBP.Write(KatPodr.Name);
  frmMove_MBP.Write(KatMol.Name);
  frmMove_MBP.Write(GetShortName(KatMol.Name));
  frmMove_MBP.Write(oSDfuns.Get_MOL_Post(KatMol.nRec));

  frmMove_MBP.Write(ToPodr.Name);
  frmMove_MBP.Write(ToMol.Name);
  frmMove_MBP.Write(GetShortName(ToMol.Name));
  frmMove_MBP.Write(oSDfuns.Get_MOL_Post(ToMol.nRec));

  frmMove_MBP.Write(GetShortName(sGetTune('MainBuh')));
  frmMove_MBP.SkipFormat(3);

  var bSkip : boolean;
  bSkip := True;

  if (boGetTune('SKLAD.AKT_MOVE.ZAPRWIND') and (cReqPers <> 0))
  {
    bSkip := False;
    frmMove_MBP.Write(GetPersName(cReqPers));
    frmMove_MBP.Write(GetShortName(GetPersName(cReqPers)));
    frmMove_MBP.Write(GetPersPost(cReqPers));
  }
  else
    if (iFeeSigners.FeeSignersIsValid)
    {
      if (iFeeSigners.RestrictFeeByRole(2, 'Requested'))
      {
        bSkip := False;
        frmMove_MBP.Write(iFeeSigners.GetSignerFIO(1));
        frmMove_MBP.Write(iFeeSigners.GetSignerFIO(7));
        frmMove_MBP.Write(iFeeSigners.GetSignerPosition(1));
      }

      iFeeSigners.ClearRestriction;
    }

  if (bSkip)
    frmMove_MBP.SkipFormat(3);

  bSkip := True;

  if (boGetTune('SKLAD.AKT_MOVE.ZAPRWIND') and (cLetPers <> 0))
  {
    bSkip := False;
    frmMove_MBP.Write(GetPersName(cLetPers));
    frmMove_MBP.Write(GetShortName(GetPersName(cLetPers)));
    frmMove_MBP.Write(GetPersPost(cLetPers));
  }
  else
    if (iFeeSigners.FeeSignersIsValid)
    {
      if (iFeeSigners.RestrictFeeByRole(2, 'Allowed'))
      {
        bSkip := False;
        frmMove_MBP.Write(iFeeSigners.GetSignerFIO(1));
        frmMove_MBP.Write(iFeeSigners.GetSignerFIO(7));
        frmMove_MBP.Write(iFeeSigners.GetSignerPosition(1));
      }

      iFeeSigners.ClearRestriction;
    }

  if (bSkip)
    frmMove_MBP.SkipFormat(3);

  frmMove_MBP.Write(iFeeSigners.GetFeeSigners);
}

Procedure PrintMove_MBP_Sp;
{
  Npp := Npp + 1;
  ItogKol := ItogKol + SpSopr.KolFact;
  ItogSum := ItogSum + SpSopr.KolFact * SpSopr.Price;
  frmMove_MBP.SkipFormat(2);
  frmMove_MBP.Write(SpSopr.nRec);                          // 03
  frmMove_MBP.Write(Npp);                                  // 04
  frmMove_MBP.Write(KatMBP.Name);                          // 05
  frmMove_MBP.Write(KatMBP.NNumber);                       // 06
  frmMove_MBP.Write(if (isValid(#KatEd), KatEd.Name, '')); // 07
  frmMove_MBP.Write(if (isValid(#KatEd), sGetAttr(coKatEd, KatEd.nRec, 'Код'), ''));
  frmMove_MBP.Write(KatMBP.KodGr);                         // 08
  frmMove_MBP.Write('Наимен.группы МЦ');                   // 09
  frmMove_MBP.Write(GetMBPSklNum(KatMBP.DopInfo, MBPIn.DopInfo));
  frmMove_MBP.Write(GetMBPInvNum(KatMBP.DopInfo, MBPIn.DopInfo));
  frmMove_MBP.Write(GetMBPPasNum(KatMBP.DopInfo, MBPIn.DopInfo));
  frmMove_MBP.Write(SpSopr.KolFact);                       // 13
  frmMove_MBP.Write(SpSopr.Price);                         // 14
  frmMove_MBP.Write(SpSopr.KolFact * SpSopr.Price);        // 15
  frmMove_MBP.Write(SpSopr.KolFact * SpSopr.Price);        // 16
  frmMove_MBP.SkipFormat(2);
}

Procedure PrintMove_MBP_Foot;
{
  frmMove_MBP.Write(ItogKol);
  frmMove_MBP.Write(ItogSum);
  frmMove_MBP.Write(Npp);
}

Procedure PrintOneMBPMove;
{
  PrintMove_MBP_Head;

  _LOOP SpSopr
    PrintMove_MBP_Sp;

  frmMove_MBP.putEvent(feBreak);
  PrintMove_MBP_Foot;
}

procedure PrintMBPMove;
{
  case (wGetTune('Country')) of
  //---------------------------
    ccRus:
    {
      if (not GetBooleanParameter('FINPARAMS', 'USEVSMNFORMS', 0))
        frmMove_MBP.SetGroup('Передача в МЦ. Россия.');
      else
        frmMove_MBP.SetGroup('Передача в МЦ. ВСМН.');
    }
  //---------------------------
    ccBel: frmMove_MBP.SetGroup('Внутреннее перемещение (Беларусь)');
  //---------------------------
    else
      frmMove_MBP.SetGroup('Внутреннее перемещение');
  //---------------------------
  end; // case

  PushPos(#KatSopr);
  PushPos(#SpSopr);

  if (pMarker.Count = 0)
    PrintOneMBPMove;
  else
  {
    SubBounds(tbRMKatSopr1);

    _LOOP pMarker
    {
      if (GetFirst KatSopr where (( pMarker.pNRec == KatSopr.nRec )) = tsOk)
        PrintOneMBPMove;
    }

    AddBounds(tbRMKatSopr1);
  }

  frmMove_MBP.putEvent(feBreak);

  PopPos(#SpSopr);
  PopPos(#KatSopr);

  if (not frmMove_MBP.Error)
    frmMove_MBP.ShowFile('');
  else
    frmMove_MBP.AbortForm;
}

//------------------------------------------------------------------------------

var lIndex : longint;

function IsFindKatSopr : boolean;
{
  IsFindKatSopr := False;

  if (pMarker.Count = 0) // все текущие документы
  {
    if (lIndex = 0)
      IsFindKatSopr := (GetFirst KatSopr = tsOk);
    else
      IsFindKatSopr := (GetNext KatSopr = tsOk);

    lIndex++;
  }
  else // выбранные документы
  {
    if (lIndex = 0)
      IsFindKatSopr := (GetFirst pMarker = tsOk);
    else
      IsFindKatSopr := (GetNext pMarker = tsOk);

    if (not IsFindKatSopr)
      Exit;

    do
    {
      lIndex++;

      if (GetFirst KatSopr where (( pMarker.pNRec == KatSopr.nRec )) <> tsOk)
        Continue;

      isFindKatSopr := True;
      Break;
    }
    while (GetNext pMarker = tsOk);
  }
}

DataStream dtsRetnMBPInMC
(
  [CommonFormHeader] CommonFormHeader;
  [MyOrgName]        iOrgInfo.GetMyOrgNameT(From_Days(0));
  [IsExistArchive]   (oArchiveFuncs.IsExistArchive and oArchiveFuncs.GetExistTiDkGal(cgDoc_0604));

  DataSet dsKatSopr
  (
    [DocDate] KatSopr.dSopr;
    [DocNom]  KatSopr.NSopr;
    [BarCode] GetDocBarCode(cgDoc_0604, KatSopr.nRec);
    [DesGr]   KatSopr.DesGr;
    [Descr]   KatSopr.Descr;
    [FrPodr]  KatPodr.Name;
    [FrMol]   KatMol.Name;
    [ToPodr]  ToPodr.Name;
    [ToMol]   ToMol.Name;
    [Summa]   Sum;
    [Valuta]  Valut;
  );
)

HandleEvent DataSet dsKatSopr
//----------------------
  cmPreProcess:
    lIndex := 0;
//----------------------
  cmOnProcess:
  {
    if (not NextVisual)
      BreakProcess;

    if (IsFindKatSopr)
      ContinueDataSet;
  }
//----------------------
End; // HandleEvent DataSet dsKatSopr

HandleEvent // HandleEvent DataStream dtsRetnMBPInMC
//---------
  cmPreProcess:
  {
    StartNewVisual(vtRotateVisual, vfTimer + vfBreak + vfConfirm, 'Идет формирование реестра документов...', 0);
    PushPos(#KatSopr);
    SubBounds(tbRMKatSopr1);
  }
//---------
  cmPostProcess:
  {
    AddBounds(tbRMKatSopr1);
    PopPos(#KatSopr);
    StopVisual('', 0);
  }
//---------
end; // HandleEvent DataStream dtsRetnMBPInMC
end; // DataStream dtsRetnMBPInMC
