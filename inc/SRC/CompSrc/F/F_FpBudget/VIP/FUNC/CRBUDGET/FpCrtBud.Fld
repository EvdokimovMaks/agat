//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.10 - модуль "Управление бюджетом"
// Создание бюджетов
//------------------------------------------------------------------------------

Const
  VAR_cCurBudVariant            = 'CBVt';
  Var_sCurStage                 = 'CuSt';
  Var_cCurArea                  = 'CrAr';
  Var_wRedMode                  = 'RedM';
  Var_sCurDescr                 = 'Dscr';

  Tbl_tblCO                     = 'TTCO';
  Tbl_tblPerBud                 = 'TTPB';

  TblVar__tblCO_cRec            = 'COcR';

  TblVar__tblPerBud_cRec        = 'PBcR';

end;


//------------------------------------------------------------------------------
// МАКРОСЫ
//------------------------------------------------------------------------------
#include FpITune.Mac   // Макросы для чтения настроек интерфейсов

//------------------------------------------------------------------------------
function GetTblCO(_cTune : comp): boolean;
{
  GetTblCO := False;

  delete all tblCO;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblCO) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      var cRecCO    : comp; cRecCO    := 0;
      #GetTblFld(Comp,Tbl_tblCO,cSavedRec,TblVar__tblCO_cRec,cRecCO)

      if (not InsCO(cRecCO))
      { FpLog('GetTblCO : (not InsCO(cRecCO))'); }
    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  GetTblCO := True;
}
//------------------------------------------------------------------------------
function GetTblPerBud(_cTune : comp): boolean;
{
  GetTblPerBud := False;
  delete all tblPerBud;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblPerBud) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      var cRecPer   : comp; cRecPer   := 0;
      #GetTblFld(Comp,Tbl_tblPerBud,cSavedRec,TblVar__tblPerBud_cRec,cRecPer)

      if (not pExtFpPeriod.IsCurTPer(cRecPer) )
      { Continue; }

      if (not InsLoadedPer(cRecPer))
      { FpLog('GetTblPerBud : (not InsLoadedPer(cRecPer))'); }
    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

   GetTblPerBud := True;
}
//------------------------------------------------------------------------------
function SetTblCO(_cTune : comp): boolean;
{
  SetTblCO := False;
  PushPos(#tblCO);
  pObjITune.DelTbl(_cTune, Tbl_tblCO);
  _Loop tblCO
  {
      var cSavedRec : comp; cSavedRec := tblCO.cRec;
      #SetTblFld(Comp,Tbl_tblCO,cSavedRec,TblVar__tblCO_cRec, tblCO.cRec)
  }
  PopPos(#tblCO);
  SetTblCO := True;
}
//------------------------------------------------------------------------------
function SetTblPerBud(_cTune : comp): boolean;
{
  SetTblPerBud := False;
  PushPos(#tblPerBud);
  pObjITune.DelTbl(_cTune, Tbl_tblPerBud);
  _Loop tblPerBud
  {
      var cSavedRec : comp; cSavedRec := tblPerBud.cRec;
      #SetTblFld(Comp,Tbl_tblPerBud,cSavedRec,TblVar__tblPerBud_cRec, tblPerBud.cRec)
  }
  PopPos(#tblPerBud);
  SetTblPerBud := True;
}
//------------------------------------------------------------------------------
function MyRead_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MyRead_ITune := False;

  // признак "загружены настройки из пакета заданий"
  if ( not isLoadBatchITune )
  {
    if _cTune = 0
    {
      if pObjFpProfileManager.UpdateZerroIDToOneID
        Set CurProfileID := 1;
      _Entity := #(_CurInt)Entity;
    }
  }
  pObjITune.InitEnt(_Entity, _cTune);

  GetTblPerBud(_cTune);
  GetTblCO(_cTune);

  #GetFld(Comp,   VAR_cCurBudVariant,cCurBudVariant )
  #GetFld(String, Var_sCurStage     , sCurStage     )
  #GetFld(Comp,   Var_cCurArea      , cCurArea      )
  #GetFld(word,   Var_wRedMode      , wRedMode      )
  #GetFld(String, Var_sCurDescr     , sCurDescr     )

  SetBudVariant(cCurBudVariant);
  SetBudStage(sCurStage);
  SetArea(cCurArea);
  SetDescr(sCurDescr);

  pObjITune.DoneEnt(_Entity, _cTune);
  ShowMyHeader;
  MyRead_ITune := True;
}

//------------------------------------------------------------------------------
function Read_ITune(_cTune : comp) : boolean;
{
  isLoadBatchITune := True;
  Read_ITune := MyRead_ITune(#(_CurInt)Entity, _cTune);
}

//------------------------------------------------------------------------------
function MySave_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MySave_ITune := False;

  // были загружены настройки из пакета заданий
  if ( not isLoadBatchITune )
  {
  }

  pObjITune.InitEnt(_Entity, _cTune);

  cCurBudVariant := GetBudVariant;
  #SetFld(Comp,   VAR_cCurBudVariant,cCurBudVariant )
  #SetFld(String, Var_sCurStage     , GetStage      )
  #SetFld(Comp,   Var_cCurArea      , GetArea       )
  #SetFld(word,   Var_wRedMode      , wRedMode      )
  #SetFld(String, Var_sCurDescr     , GetDescr      )

  SetTblPerBud(_cTune);
  SetTblCO(_cTune);

  pObjITune.DoneEnt(_Entity, _cTune);

  MySave_ITune := True;
}

//------------------------------------------------------------------------------
function Save_ITune(_cTune : comp) : boolean;
{ isLoadBatchITune := True;
  Save_ITune := MySave_ITune(#(_CurInt)Entity, _cTune)
}

//------------------------------------------------------------------------------
function MyDel_ITune(_Entity : word; _cTune : comp) : boolean;
{ MyDel_ITune := pObjITune.DelEnt(_Entity, _cTune);
}

//------------------------------------------------------------------------------
function Del_ITune(_cTune : comp) : boolean;
{ Del_ITune := MyDel_ITune(#(_CurInt)Entity, _cTune);
}

//------------------------------------------------------------------------------
// Загрузка из менеджера Списка ЦО
//------------------------------------------------------------------------------
function Read_ITuneNCO(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITuneNCO := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  GetTblCO(_cTune);

  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITuneNCO := True;
}
//------------------------------------------------------------------------------
// Загрузка из менеджера Списка Периодов
//------------------------------------------------------------------------------
function Read_ITuneNPer(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITuneNPer := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  GetTblPerBud(_cTune);

  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITuneNPer := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера реквизитов копии
//------------------------------------------------------------------------------
function Read_ITune1Stage(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1Stage := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  #GetFld(Comp,   VAR_cCurBudVariant,cCurBudVariant )
  #GetFld(String, Var_sCurStage     , sCurStage     )
  #GetFld(Comp,   Var_cCurArea      , cCurArea      )
  #GetFld(String, Var_sCurDescr     , sCurDescr     )

  SetBudVariant(cCurBudVariant);
  SetBudStage(sCurStage);
  SetArea(cCurArea);
  SetDescr(sCurDescr);

  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITune1Stage := True;
}

