//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.10 - модуль "Управление бюджетом"
// Визуальный интерфейс: "Загрузка финансовых операций"
//------------------------------------------------------------------------------

Const
  VarOwn_cCurPP          = 'BPer';
  VarOwn_cCurCO          = 'BCO';
  VarOwn_cCurBudVariant  = 'BVar';

  VarOwn_cCurArea        = 'Area';
  VarOwn_sCurStage       = 'Stg';
end;

Const
  Var_cCurValVariant  = 'VVar';
  Var_vcFilter        = 'Filt';

  Var_wBuhRegMode     = 'BRegM';
  Var_wDelMode        = 'DRegM';
  Var_wCOMode         = 'COM';
end;

//------------------------------------------------------------------------------
#include FpPerParam.Inc    // Константы идентификаторов параметров типа "Периоды и подпериоды"
#include FpCOParam.Inc     // Константы идентификаторов параметров типа "ЦО"
#include FpStageParam.Inc  // Константы идентификаторов параметров типа "Реквизиты копии"
#include FpKodRegParam.Inc // Константы идентификаторов параметров типа "Код регистра"
#include FpITune.Mac       // Макросы для чтения настроек интерфейсов
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
function MyRead_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MyRead_ITune := False;

  // признак "загружены настройки из пакета заданий"
  if ( not isLoadBatchITune )
  {
    if _cTune = 0
    {
      if pObjFpProfileManager.UpdateZerroIDToOneID
        Set CurProfileID := 1;
      _Entity := #(_CurInt)Entity;
    }
  }
  pObjITune.InitEnt(_Entity, _cTune);

  if (not pObjITune.CompGetFld(_cTune, VarOwn_cCurPP, cCurPP) )
  #GetFld(Comp,   Var_cCurPer       , cCurPP         )
  if (not pObjITune.CompGetFld(_cTune, VarOwn_cCurCO, cCurCO) )
  #GetFld(Comp,   Var_cCurCO        , cCurCO         )
  if (_cTune <> 0)
  {
  if (not pObjITune.CompGetFld(_cTune, VarOwn_cCurArea, cCurArea) )
  #GetFld(Comp,   Var_cCurArea      , cCurArea       )
  }

  if (not pObjITune.CompGetFld(_cTune, VarOwn_cCurBudVariant, cCurBudVariant) )
  #GetFld(Comp,   Var_cCurBudVariant, cCurBudVariant )
  #GetFld(Comp,   Var_cCurValVariant, cCurValVariant )
  #GetFld(Comp,   Var_vcFilter      , cCurFilter     )

  if (not pObjITune.StringGetFld(_cTune, VarOwn_sCurStage, sCurStage) )
  #GetFld(String, Var_sCurStage     , sCurStage      )
  #GetFld(String, Var_sCurDescr     , sCurDescr      )

  #GetFld(Word,   Var_wKodReg1      , wRegMode       )
  #GetFld(Word,   Var_wBuhRegMode   , wBuhRegMode    )
  #GetFld(Word,   Var_wDelMode      , wDelMode       )
  #GetFld(Word,   Var_wCOMode       , wCOMode        )

  // замещать прежние значения - опция по умолчанию
  if (wDelMode = 0)
  { 
    SetDelOld(True);
  }

  if (isAutoParam)
  {
    // очищать прежние значения - опция по умолчанию
    SetClearBud(True);
    SetViewListBudVar(False);
    wBuhRegMode := 0;
  }


  pObjITune.DoneEnt(_Entity, _cTune);
  if (not pExtFpPeriod.IsCurTPer(cCurPP) )
  { cCurPP := 0; }

  SetPeriod(cCurPP);
  SetCO(cCurCO);
  if (_cTune <> 0)
  SetArea(cCurArea);
  SetBudVariant(cCurBudVariant);
  SetValVariant(cCurValVariant);
  SetFilter(cCurFilter, true);

  SetBudStage(sCurStage);
  SetDescr(sCurDescr);

  SetForecastMode(isPlanReg);

  ReReadRecord(#EmptyTable);
  MyCheckFieldsState;
  ReScanPanel(#EmptyTable);
  ShowMyHeader;

  MyRead_ITune := True;
}

//------------------------------------------------------------------------------
function Read_ITune(_cTune : comp) : boolean;
{
  isLoadBatchITune := True;
  Read_ITune := MyRead_ITune(#(_CurInt)Entity, _cTune);
}

//------------------------------------------------------------------------------
function MySave_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MySave_ITune := False;

  // были загружены настройки из пакета заданий
  if ( not isLoadBatchITune )
  {
  }

  pObjITune.InitEnt(_Entity, _cTune);

  // удалим все старое, чтоб не осталось "старых" настроек
  pObjITune.DelEnt (_Entity, _cTune);

  if (isAutoParam)
  {
    #SetFld(Word,   Var_wDelMode      , wDelMode       )
  }
  else
  {
    #SetFld(Comp,   Var_cCurPer       , cCurPP         )
    #SetFld(Comp,   Var_cCurCO        , cCurCO         )
    #SetFld(Comp,   Var_cCurArea      , GetArea        )
    #SetFld(Comp,   Var_cCurBudVariant, GetBudVariant  )
    #SetFld(Comp,   Var_cCurValVariant, GetValVariant  )
    #SetFld(Comp,   Var_vcFilter      , cCurFilter     )

    #SetFld(String, Var_sCurStage     , GetStage       )
    #SetFld(String, Var_sCurDescr     , GetDescr       )

    #SetFld(Word,   Var_wKodReg1      , wRegMode       )
    #SetFld(Word,   Var_wBuhRegMode   , wBuhRegMode    )
    #SetFld(Word,   Var_wDelMode      , wDelMode       )
    #SetFld(Word,   Var_wCOMode       , wCOMode        )
  }

  pObjITune.DoneEnt(_Entity, _cTune);

  MySave_ITune := True;
}

//------------------------------------------------------------------------------
function Save_ITune(_cTune : comp) : boolean;
{ isLoadBatchITune := True;
  Save_ITune := MySave_ITune(#(_CurInt)Entity, _cTune)
}

//------------------------------------------------------------------------------
function MyDel_ITune(_Entity : word; _cTune : comp) : boolean;
{ MyDel_ITune := pObjITune.DelEnt(_Entity, _cTune);
}

//------------------------------------------------------------------------------
function Del_ITune(_cTune : comp) : boolean;
{ Del_ITune := MyDel_ITune(#(_CurInt)Entity, _cTune);
}

//------------------------------------------------------------------------------
// Загрузка из менеджера периода планирования
//------------------------------------------------------------------------------
function Read_ITune1Per(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1Per := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Comp,   Var_cCurPer       , cCurPP         )
  SetPeriod(cCurPP);
  pObjITune.DoneEnt(_wEntity, _cTune);
  Read_ITune1Per := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера центра ответственности
//------------------------------------------------------------------------------
function Read_ITune1CO(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1CO := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Comp,   Var_cCurCO        , cCurCO         )
  SetCO(cCurCO);
  pObjITune.DoneEnt(_wEntity, _cTune);
  Read_ITune1CO := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера реквизитов копии
//------------------------------------------------------------------------------
function Read_ITune1Stage(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1Stage := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Comp,   Var_cCurArea      , cCurArea       )
  #GetFld(Comp,   Var_cCurBudVariant, cCurBudVariant )
  #GetFld(String, Var_sCurStage     , sCurStage      )
  #GetFld(String, Var_sCurDescr     , sCurDescr      )
  SetArea(cCurArea);
  SetBudVariant(cCurBudVariant);
  SetBudStage(sCurStage);
  SetDescr(sCurDescr);
  pObjITune.DoneEnt(_wEntity, _cTune);
  Read_ITune1Stage := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера регистров учёта
//------------------------------------------------------------------------------
function Read_ITune1KodReg(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1KodReg := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Word,   Var_wKodReg1      , wRegMode       )
  Set wRegMode := wRegMode;
  pObjITune.DoneEnt(_wEntity, _cTune);
  Read_ITune1KodReg := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера фильтра
//------------------------------------------------------------------------------
function Read_ITune1Flt(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1Flt := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Comp,   Var_vcFilter      , cCurFilter     )
  SetFilter(cCurFilter, true);
  pObjITune.DoneEnt(_wEntity, _cTune);
  Read_ITune1Flt := True;
}
