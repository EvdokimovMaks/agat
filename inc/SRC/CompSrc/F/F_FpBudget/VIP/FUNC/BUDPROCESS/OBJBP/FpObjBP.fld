//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.10 - модуль "Управление бюджетом"
// Обьект поиска и доступа к данным хранилища бюдж.процессов
//------------------------------------------------------------------------------
Const
  Var_cCurCO             = 'cCCO';   // единичный параметр ЦО
  Var_w1Mode             = 'w1MD';   // значение единичного параметра
  Var_wNMode             = 'wNMD';   // значение списка параметра
  Var_wParent1           = 'w1PT';   // значение ссылки на сценарий для единичного параметра
  Var_wParentN           = 'wNPT';   // значение ссылки на сценарий для списка параметров
  Var_cCurPer            = 'cCPr';   // единичный параметр периода планирования

  // таблица центров ответственности
  Tbl_tblCO              = 'TTCO';
  TblVar__tblCO_cRec     = 'COcR';

  // таблица периодов
  Tbl_tblPerBud          = 'TTPB';
  Tbl_LooptblSubPerBud       = 'TSPB';

  TblVar__tblPerBud_cRec        = 'PBcR';

  TblVar__LooptblSubPerBud_cMain    = 'SPcM';
  TblVar__LooptblSubPerBud_NRec     = 'SPNR';
  TblVar__LooptblSubPerBud_cNode    = 'SPNd';
  TblVar__LooptblSubPerBud_Code     = 'SPCd';
  TblVar__LooptblSubPerBud_LevelCode= 'SPLC';
  TblVar__LooptblSubPerBud_isLeaf   = 'SPLf';
  TblVar__LooptblSubPerBud_wLevel   = 'SPLl';
  TblVar__LooptblSubPerBud_Name     = 'SPNm';
  TblVar__LooptblSubPerBud_wDelMode = 'SPDM';

  //реквизиты копии
  VAR_cCurBudVariant            = 'CBVt';
  Var_sCurStage                 = 'CuSt';
  Var_cCurArea                  = 'CrAr';

  // код регистра
  VAR_wKodReg1            = 'VKR1';
  VAR_wKodRegN            = 'VKRN';

  // режим замены
  VAR_wReplaceMode1            = 'VRM1';

  // единичный пользователь
  Var_sCurUser           = 'sCUr';
  // таблица списков пользователей

  Tbl_tblUser            = 'TTUr';
  TblVar__tblUser_Descr  = 'UrDr';

end;

//------------------------------------------------------------------------------
// МАКРОСЫ
//------------------------------------------------------------------------------
#include FpITune.Mac   // Макросы для чтения настроек интерфейсов

//------------------------------------------------------------------------------
function Read_ITune_w1Mode(_cTune : comp; _wEntity : word) : word;
{
  Read_ITune_w1Mode := word(-1);
  pObjITune.InitEnt(_wEntity, _cTune);
  var w1Mode : word = 0;
  #GetFld(word, Var_w1Mode, w1Mode )
  Read_ITune_w1Mode := w1Mode;
  pObjITune.DoneEnt(_wEntity, _cTune);
}
//------------------------------------------------------------------------------
function Read_ITune_wNMode(_cTune : comp; _wEntity : word) : word;
{
  Read_ITune_wNMode := word(-1);
  pObjITune.InitEnt(_wEntity, _cTune);
  var wNMode : word = 0;
  #GetFld(word, Var_wNMode, wNMode )
  Read_ITune_wNMode := wNMode;
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Read_ITune_wParent1(_cTune : comp; _wEntity : word) : word;
{
  Read_ITune_wParent1 := word(-1);
  pObjITune.InitEnt(_wEntity, _cTune);
  var wParent1 : word = 0;
  #GetFld(word, Var_wParent1, wParent1 )
  Read_ITune_wParent1 := wParent1;
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Read_ITune_wParentN(_cTune : comp; _wEntity : word) : word;
{
  Read_ITune_wParentN := word(-1);
  pObjITune.InitEnt(_wEntity, _cTune);
  var wParentN : word = 0;
  #GetFld(word, Var_wParentN, wParentN )
  Read_ITune_wParentN := wParentN;
  pObjITune.DoneEnt(_wEntity, _cTune);
}


//------------------------------------------------------------------------------
//прочитаем по NRec и сущности заданный ЦО
function Read_ITune_CO(_cTune : comp; _wEntity : word) : comp;
{
  Read_ITune_CO := 0;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Comp, Var_cCurCO, Read_ITune_CO)
  pObjITune.DoneEnt(_wEntity, _cTune);
}

function Save_ITune_CO(_cTune : comp; _wEntity : word; _cCurCO : comp) : boolean;
{
  Save_ITune_CO := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #SetFld(Comp, Var_cCurCO, _cCurCO)
  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_CO := True;
}
//------------------------------------------------------------------------------
//прочитаем по NRec и сущности список ЦО
function Read_ITune_tblCO(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune_tblCO := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  delete all tblCO;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblCO) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
       if (BoxRec.cRec = 0)  { Break; }
       var cSavedRec : comp; cSavedRec := BoxRec.cRec;
       ClearBuffer(#tblCO);

       #GetTblFld(Comp,Tbl_tblCO,cSavedRec,TblVar__tblCO_cRec,tblCO.cRec)

       var tsRes : word;  tsRes := insert current tblCO;
       if (tsRes <> tsOk)
      { FpLog('FpCOParam : (insert current tblCO <> tsOk)'+string(tsRes)); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  if GetFirst FastFirstRow tblCO <> tsOk
  {
    Exit;
  }
  pObjITune.DoneEnt(_wEntity, _cTune);
  Read_ITune_tblCO := True;
}

//------------------------------------------------------------------------------
function Save_ITune_tblCO(_cTune : comp; _wEntity : word) : boolean;
{
  Save_ITune_tblCO := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  pObjITune.DelTbl(_cTune, Tbl_tblCO);
  _Loop tblCO
  {
    var cSavedRec : comp; cSavedRec := tblCO.cRec;
    #SetTblFld(Comp,Tbl_tblCO,cSavedRec,TblVar__tblCO_cRec, tblCO.cRec)
  }

  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_tblCO := True;
}

//------------------------------------------------------------------------------
function InsLoadedPer(_cRec : comp) : boolean;
{
  InsLoadedPer := False;
  if GetFirst FastFirstRow fpPeriod where ((_cRec == fpPeriod.NRec)) <> tsOk
  { Exit; }
  if GetFirst FastFirstRow tblPerBud where ((_cRec == tblPerBud.cRec)) = tsOk
  { Exit; }

  ClearBuffer(#tblPerBud);
  tblPerBud.cRec := _cRec;
  insert current tblPerBud;
  InsLoadedPer := True;
}
//------------------------------------------------------------------------------
//прочитаем по NRec и сущности список периодов
function Read_ITune_tblPer(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune_tblPer := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  delete all tblPerBud;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblPerBud) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
       if (BoxRec.cRec = 0)  { Break; }
       var cSavedRec : comp; cSavedRec := BoxRec.cRec;
       ClearBuffer(#tblPerBud);

       #GetTblFld(Comp,Tbl_tblPerBud,cSavedRec,TblVar__tblPerBud_cRec,tblPerBud.cRec)

       if not InsLoadedPer(tblPerBud.cRec)
      { FpLog('GetTblPerBud : (insert current tblPerBud <> tsOk)'); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  if GetFirst FastFirstRow tblPerBud <> tsOk
  {
    Exit;
  }
  pObjITune.DoneEnt(_wEntity, _cTune);
  Read_ITune_tblPer := True;
}

//------------------------------------------------------------------------------
function Save_ITune_tblPer(_cTune : comp; _wEntity : word) : boolean;
{
  Save_ITune_tblPer := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  pObjITune.DelTbl(_cTune, Tbl_tblPerBud);
  _Loop tblPerBud
  {
    var cSavedRec : comp; cSavedRec := tblPerBud.cRec;
    #SetTblFld(Comp,Tbl_tblPerBud,cSavedRec,TblVar__tblPerBud_cRec, tblPerBud.cRec)
  }

  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_tblPer := True;
}

//------------------------------------------------------------------------------
function Read_ITune_Per(_cTune : comp; _wEntity : word) : comp;
{
  Read_ITune_Per := 0;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Comp,   Var_cCurPer, Read_ITune_Per)
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Save_ITune_Per(_cTune : comp; _wEntity : word; _cCurPer : comp) : boolean;
{
  Save_ITune_Per := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #SetFld(Comp, Var_cCurPer, _cCurPer)
  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_Per := True;
}

//------------------------------------------------------------------------------
function Read_ITune_Variant(_cTune : comp; _wEntity : word) : comp;
{
  Read_ITune_Variant := 0;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Comp,   VAR_cCurBudVariant, Read_ITune_Variant)
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Read_ITune_Area(_cTune : comp; _wEntity : word) : comp;
{
  Read_ITune_Area := 0;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Comp, Var_cCurArea, Read_ITune_Area)
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Read_ITune_Stage(_cTune : comp; _wEntity : word) : string;
{
  Read_ITune_Stage := '';
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(String, Var_sCurStage, Read_ITune_Stage)
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Save_ITune_Variant(_cTune : comp; _wEntity : word; _cCurVar : comp) : boolean;
{
  Save_ITune_Variant := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #SetFld(Comp, VAR_cCurBudVariant, _cCurVar)
  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_Variant := True;
}

//------------------------------------------------------------------------------
function Save_ITune_Area(_cTune : comp; _wEntity : word; _cCurArea : comp) : boolean;
{
  Save_ITune_Area := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #SetFld(Comp,Var_cCurArea, _cCurArea)
  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_Area := True;
}

//------------------------------------------------------------------------------
function Read_ITune_KodReg1(_cTune : comp; _wEntity : word) : word;
{
  Read_ITune_KodReg1 := 0;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(word, VAR_wKodReg1, Read_ITune_KodReg1)
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Save_ITune_KodReg1(_cTune : comp; _wEntity : word; _wKodReg1 : word) : boolean;
{
  Save_ITune_KodReg1 := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #SetFld(word, VAR_wKodReg1, _wKodReg1)
  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_KodReg1 := True;
}

//------------------------------------------------------------------------------
function Read_ITune_KodRegN(_cTune : comp; _wEntity : word) : word;
{
  Read_ITune_KodRegN := 0;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(word, VAR_wKodRegN, Read_ITune_KodRegN)
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Save_ITune_KodRegN(_cTune : comp; _wEntity : word; _wKodRegN : word) : boolean;
{
  Save_ITune_KodRegN := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #SetFld(word, VAR_wKodRegN, _wKodRegN)
  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_KodRegN := True;
}

//------------------------------------------------------------------------------
function Read_ITune_ReplaceMode(_cTune : comp; _wEntity : word) : word;
{
  Read_ITune_ReplaceMode := 0;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(word, VAR_wReplaceMode1, Read_ITune_ReplaceMode)
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Save_ITune_ReplaceMode(_cTune : comp; _wEntity : word; _wReplaceMode : word) : boolean;
{
  Save_ITune_ReplaceMode := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #SetFld(word, VAR_wReplaceMode1, _wReplaceMode)
  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_ReplaceMode := True;
}

//------------------------------------------------------------------------------
function Read_ITune_User(_cTune : comp; _wEntity : word) : string;
{
  Read_ITune_User := '';
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(String, Var_sCurUser, Read_ITune_User)
  pObjITune.DoneEnt(_wEntity, _cTune);
}

//------------------------------------------------------------------------------
function Save_ITune_User(_cTune : comp; _wEntity : word; _sUser : string) : boolean;
{
  Save_ITune_User := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #SetFld(String, Var_sCurUser, _sUser)
  pObjITune.DoneEnt(_wEntity, _cTune);
  Save_ITune_User := True;
}
