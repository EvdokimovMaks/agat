//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.10 - модуль "Управление бюджетом"
// Параметры периода и подпериодов
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
#include FpModeParam.Inc   // Константы идентификаторов режимов параметров
#include FpPerParam.Inc    // Константы идентификаторов параметров типа "Периоды и подпериоды"
#include FpITune.Mac       // Макросы для чтения настроек интерфейсов
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
function GetTblPerBud(_cTune : comp): boolean;
{
  GetTblPerBud := False;
  delete all tblPerBud;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblPerBud) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      var cRecPer   : comp; cRecPer := 0;

      #GetTblFld(Comp,Tbl_tblPerBud,cSavedRec,TblVar__tblPerBud_cRec,cRecPer)

      /*
      if (not pExtFpPeriod.IsCurTPer(tblPerBud.cRec) )
      { Continue; }
      */

      if (not InsLoadedPer(cRecPer))
      { FpLog('GetTblPerBud : (not InsLoadedPer(cRecPer))'); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

   GetTblPerBud := True;
}
//------------------------------------------------------------------------------
function GetTblSubPerBud(_cTune : comp): boolean;
{
  GetTblSubPerBud := False;

  delete all LoopSubPerBud;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_LooptblSubPerBud) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      ClearBuffer(#LoopSubPerBud);

      #GetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_cMain,LoopSubPerBud.cMain)
      #GetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_NRec,LoopSubPerBud.NRec)
      #GetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_cNode,LoopSubPerBud.cNode)
      #GetTblFld(word,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_wDelMode,LoopSubPerBud.wDelMode)

      LoopSubPerBud.Code := pExtFpPeriod.GetCode(LoopSubPerBud.NRec);
      /*
      if (not pExtFpPeriod.IsCurTPer(tblSubPerBud.NRec) )
      { Continue; }
      */

      var tsRes : word;  tsRes := insert current LoopSubPerBud;
      if (tsRes <> tsOk)
      { FpLog('GettblSubPerBud : (insert current tblSubPerBud <> tsOk)'+string(tsRes)); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

   GetTblSubPerBud := True;
}

//------------------------------------------------------------------------------
function SetTblPerBud(_cTune : comp): boolean;
{
  SetTblPerBud := False;
  PushPos(#tblPerBud);
  pObjITune.DelTbl(_cTune, Tbl_tblPerBud);
  _Loop tblPerBud
  {
      var cSavedRec : comp; cSavedRec := tblPerBud.cRec;
      #SetTblFld(Comp,Tbl_tblPerBud,cSavedRec,TblVar__tblPerBud_cRec, tblPerBud.cRec)
  }
  PopPos(#tblPerBud);
  SetTblPerBud := True;
}

//------------------------------------------------------------------------------
function SetTblSubPerBud(_cTune : comp): boolean;
{
  SetTblSubPerBud := False;
  PushPos(#LoopSubPerBud);
  pObjITune.DelTbl(_cTune, Tbl_LooptblSubPerBud);
  var cSavedRec : comp; cSavedRec := 5;
  _Loop LoopSubPerBud
  {
      //var cSavedRec : comp; cSavedRec := tblSubPerBud.NRec;
      #SetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_cMain,LoopSubPerBud.cMain)
      #SetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_NRec,LoopSubPerBud.NRec)
      #SetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_cNode,LoopSubPerBud.cNode)
      #SetTblFld(word,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_wDelMode,LoopSubPerBud.wDelMode)
      cSavedRec := cSavedRec+1;

  }
  PopPos(#LoopSubPerBud);
  SetTblSubPerBud := True;
}

//------------------------------------------------------------------------------
function Read_ITune(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  GetTblSubPerBud(_cTune);
  GetTblPerBud(_cTune);

  #GetFld(Comp, Var_cCurPer, cCurPer )
  #GetFld(word, Var_w1Mode, w1Mode )
  #GetFld(word, Var_wNMode, wNMode )
  #GetFld(word, Var_wParent1, wParent1 )
  #GetFld(word, Var_wParentN, wParentN )

  SetMode1(w1Mode);
  SetModeN(wNMode);
  SetParent1(wParent1);
  SetParentN(wParentN);

  Set1Per(cCurPer);
  CheckFieldState;
  AllTreeOpenAllNode;

  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITune := True;
}

//------------------------------------------------------------------------------
function Save_ITune(_cTune : comp; _wEntity : word) : boolean;
{
  Save_ITune := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  #SetFld(Comp, Var_cCurPer, Get1Per)
  #SetFld(word, Var_w1Mode, GetMode1Per)
  #SetFld(word, Var_wNMode, GetModeNPer)
  #SetFld(word, Var_wParent1, GetParent1Per)
  #SetFld(word, Var_wParentN, GetParentNPer)

  SetTblSubPerBud(_cTune);
  SetTblPerBud(_cTune);


  pObjITune.DoneEnt(_wEntity, _cTune);

  Save_ITune := True;
}

//------------------------------------------------------------------------------
function Del_ITune(_cTune : comp; _wEntity : word) : boolean;
{ Del_ITune := pObjITune.DelEnt(_wEntity, _cTune);
}



