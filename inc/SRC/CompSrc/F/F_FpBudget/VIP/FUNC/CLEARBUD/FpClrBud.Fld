//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.10 - модуль "Управление бюджетом"
// Визуальный интерфейс: "Очистка данных бюджета"
//------------------------------------------------------------------------------

Const
  VarOld_wRegMode               = 'RegM';
end;

Const
  Var_wRegMode                  = 'VKRN';//приведем к общему виду констант
  Var_wRedMode                  = 'RedM';
  Var_wFltMode                  = 'FltM';
  VAR_cCurBudVariant            = 'CBVt';
  Var_sCurStage                 = 'CuSt';
  Var_cCurArea                  = 'CrAr';

  Tbl_tblCO                     = 'TTCO';
  Tbl_tblPerBud                 = 'TTPB';
  Tbl_LooptblSubPerBud          = 'TSPB';

  Tbl_tblStBud                  = 'TTSB';
  Tbl_tblTForm                  = 'TTTF';

  TblVar__tblStBud_cRec         = 'SBcR';

  TblVar__tblTForm_cRec         = 'TFcR';

  TblVar__tblCO_cRec            = 'COcR';

  TblVar__tblPerBud_cRec        = 'PBcR';

  TblVar__LooptblSubPerBud_cMain    = 'SPcM';
  TblVar__LooptblSubPerBud_NRec     = 'SPNR';
  TblVar__LooptblSubPerBud_cNode    = 'SPNd';
  TblVar__LooptblSubPerBud_wDelMode = 'SPDM';

end;


//------------------------------------------------------------------------------
// МАКРОСЫ
//------------------------------------------------------------------------------
#include FpITune.Mac   // Макросы для чтения настроек интерфейсов

//------------------------------------------------------------------------------
function GetTblStBud(_cTune : comp): boolean;
{
  GetTblStBud := False;

  delete all tblStBud;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblStBud) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      var cRecStBud : comp; cRecStBud := 0;

      #GetTblFld(Comp,Tbl_tblStBud,cSavedRec,TblVar__tblStBud_cRec,cRecStBud)

      if (not InsStBud(cRecStBud))
      { FpLog('GetTblStBud : (InsStBud(cRecStBud)'); }
    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  GetTblStBud := True;
}
//------------------------------------------------------------------------------
function GetTblTForm(_cTune : comp): boolean;
{
  GetTblTForm := False;

  delete all tblTForm;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblTForm) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      var cRecTForm : comp; cRecTForm := 0;

      #GetTblFld(Comp,Tbl_tblTForm,cSavedRec,TblVar__tblTForm_cRec,cRecTForm)

      if (not InsTForm(cRecTForm))
      { FpLog('GetTblTForm : (not InsTForm(cRecTForm)'); }
    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  GetTblTForm := True;
}
//------------------------------------------------------------------------------
function GetTblCO(_cTune : comp): boolean;
{
  GetTblCO := False;

  delete all tblCO;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblCO) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      var cRecCO    : comp; cRecCO := 0;

      #GetTblFld(Comp,Tbl_tblCO,cSavedRec,TblVar__tblCO_cRec,cRecCO)

      if (not InsCO(cRecCO))
      { FpLog('GetTblCO : (not InsCO(cRecCO))'); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  GetTblCO := True;
}
//------------------------------------------------------------------------------
function GetTblPerBud(_cTune : comp): boolean;
{
  GetTblPerBud := False;
  delete all tblPerBud;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblPerBud) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec  : comp; cSavedRec := BoxRec.cRec;
      var cRecPerBud : comp; cRecPerBud := 0;

      #GetTblFld(Comp,Tbl_tblPerBud,cSavedRec,TblVar__tblPerBud_cRec,cRecPerBud)
      if (not pExtFpPeriod.IsCurTPer(cRecPerBud) )
      { Continue; }

      if (not InsLoadedPer(cRecPerBud))
      { FpLog('GetTblPerBud : (not InsLoadedPer(cRecPerBud)'); }
    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

   GetTblPerBud := True;
}
//------------------------------------------------------------------------------
function GetTblSubPerBud(_cTune : comp): boolean;
{
  GetTblSubPerBud := False;

  delete all LooptblSubPerBud;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_LooptblSubPerBud) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      ClearBuffer(#LooptblSubPerBud);

      #GetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_cMain,LooptblSubPerBud.cMain)
      #GetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_NRec,LooptblSubPerBud.NRec)
      #GetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_cNode,LooptblSubPerBud.cNode)
      #GetTblFld(word,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_wDelMode,LooptblSubPerBud.wDelMode)

      LooptblSubPerBud.Code := pExtFpPeriod.GetCode(LooptblSubPerBud.NRec);

      if (not pExtFpPeriod.IsCurTPer(LooptblSubPerBud.NRec) )
      { Continue; }

      var tsRes : word;  tsRes := insert current LooptblSubPerBud;
      if (tsRes <> tsOk)
      { FpLog('GetLooptblSubPerBud : (insert current LooptblSubPerBud <> tsOk)'+string(tsRes)); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

   GetTblSubPerBud := True;
}
//------------------------------------------------------------------------------
function SetTblStBud(_cTune : comp): boolean;
{
  SetTblStBud := False;
  PushPos(#tblStBud);
  pObjITune.DelTbl(_cTune, Tbl_tblStBud);
  _Loop tblStBud
  {
      var cSavedRec : comp; cSavedRec := tblStBud.cRec;
      #SetTblFld(Comp,Tbl_tblStBud,cSavedRec,TblVar__tblStBud_cRec, tblStBud.cRec)
  }
  PopPos(#tblStBud);
  SetTblStBud := True;
}

//------------------------------------------------------------------------------
function SetTblTForm(_cTune : comp): boolean;
{
  SetTblTForm := False;
  PushPos(#tblTForm);
  pObjITune.DelTbl(_cTune, Tbl_tblTForm);
  _Loop tblTForm
  {
      var cSavedRec : comp; cSavedRec := tblTForm.cRec;
      #SetTblFld(Comp,Tbl_tblTForm,cSavedRec,TblVar__tblTForm_cRec, tblTForm.cRec)
  }
  PopPos(#tblTForm);
  SetTblTForm := True;
}

//------------------------------------------------------------------------------
function SetTblCO(_cTune : comp): boolean;
{
  SetTblCO := False;
  PushPos(#tblCO);
  pObjITune.DelTbl(_cTune, Tbl_tblCO);
  _Loop tblCO
  {
      var cSavedRec : comp; cSavedRec := tblCO.cRec;
      #SetTblFld(Comp,Tbl_tblCO,cSavedRec,TblVar__tblCO_cRec, tblCO.cRec)
  }
  PopPos(#tblCO);
  SetTblCO := True;
}
//------------------------------------------------------------------------------
function SetTblPerBud(_cTune : comp): boolean;
{
  SetTblPerBud := False;
  PushPos(#tblPerBud);
  pObjITune.DelTbl(_cTune, Tbl_tblPerBud);
  _Loop tblPerBud
  {
      var cSavedRec : comp; cSavedRec := tblPerBud.cRec;
      #SetTblFld(Comp,Tbl_tblPerBud,cSavedRec,TblVar__tblPerBud_cRec, tblPerBud.cRec)
  }
  PopPos(#tblPerBud);
  SetTblPerBud := True;
}
//------------------------------------------------------------------------------
function SetTblSubPerBud(_cTune : comp): boolean;
{
  SetTblSubPerBud := False;
  PushPos(#LooptblSubPerBud);
  pObjITune.DelTbl(_cTune, Tbl_LooptblSubPerBud);
  var cSavedRec : comp; cSavedRec := 5;
  _Loop LooptblSubPerBud
  {
      // проверим наличие отвязных записей подпериодов
      if GetFirst FastFirstrow tblPerBud where (( LooptblSubPerBud.cMain == tblPerBud.cRec)) <> tsOk
      { Continue; }
      //var cSavedRec : comp; cSavedRec := LooptblSubPerBud.NRec;
      #SetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_cMain,LooptblSubPerBud.cMain)
      #SetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_NRec,LooptblSubPerBud.NRec)
      #SetTblFld(Comp,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_cNode,LooptblSubPerBud.cNode)
      #SetTblFld(word,Tbl_LooptblSubPerBud,cSavedRec,TblVar__LooptblSubPerBud_wDelMode,LooptblSubPerBud.wDelMode)
      cSavedRec := cSavedRec+1;

  }
  PopPos(#LooptblSubPerBud);
  SetTblSubPerBud := True;
}

//------------------------------------------------------------------------------
function MyRead_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MyRead_ITune := False;
  // признак "загружены настройки из пакета заданий"
  if ( not isLoadBatchITune )
  {
    if _cTune = 0
    {
      if pObjFpProfileManager.UpdateZerroIDToOneID
        Set CurProfileID := 1;
      _Entity := #(_CurInt)Entity;
    }
  }

  pObjITune.InitEnt(_Entity, _cTune);

  GetTblSubPerBud(_cTune);
  GetTblPerBud(_cTune);
  GetTblCO(_cTune);
  GetTblStBud(_cTune);
  GetTblTForm(_cTune);

  if (not pObjITune.WordGetFld(_cTune, VarOld_wRegMode, wRegMode) )
  #GetFld(word,   Var_wRegMode      , wRegMode      )
  #GetFld(word,   Var_wRedMode      , wRedMode      )
  #GetFld(word,   Var_wFltMode      , wFltMode      )
  #GetFld(Comp,   VAR_cCurBudVariant,cCurBudVariant )
  #GetFld(String, Var_sCurStage     , sCurStage     )
  #GetFld(Comp,   Var_cCurArea      , cCurArea      )

  SetBudVariant(cCurBudVariant);
  SetBudStage(sCurStage);
  SetArea(cCurArea);

  case wFltMode of
    0 : SetFormat(scrAllFlt);
    1 : SetFormat(brStBud);
    2 : SetFormat(brTForm);
  end; //case

  AllTreeOpenAllNode;

  pObjITune.DoneEnt(_Entity, _cTune);
  ShowMyHeader;
  MyRead_ITune := True;
}

//------------------------------------------------------------------------------
function Read_ITune(_cTune : comp) : boolean;
{
  isLoadBatchITune := True;
  Read_ITune := MyRead_ITune(#(_CurInt)Entity, _cTune);
}

//------------------------------------------------------------------------------
function MySave_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MySave_ITune := False;

  // были загружены настройки из пакета заданий
  if ( not isLoadBatchITune )
  {
  }

  pObjITune.InitEnt(_Entity, _cTune);

  // удалим все старое, чтоб не осталось "старых" настроек
  pObjITune.DelEnt (#(_CurInt)Entity, _cTune);

  #SetFld(word,   Var_wRegMode      , wRegMode      )
  #SetFld(word,   Var_wRedMode      , wRedMode      )
  #SetFld(word,   Var_wFltMode      , wFltMode      )
  cCurBudVariant := GetBudVariant;
  #SetFld(Comp,   VAR_cCurBudVariant,cCurBudVariant )
  #SetFld(String, Var_sCurStage     , GetStage      )
  #SetFld(Comp,   Var_cCurArea      , GetArea       )

  SetTblSubPerBud(_cTune);
  SetTblPerBud(_cTune);
  SetTblCO(_cTune);
  SetTblStBud(_cTune);
  SetTblTForm(_cTune);

  pObjITune.DoneEnt(_Entity, _cTune);

  MySave_ITune := True;
}
//------------------------------------------------------------------------------
function Save_ITune(_cTune : comp) : boolean;
{
  isLoadBatchITune := True;
  Save_ITune := MySave_ITune(#(_CurInt)Entity, _cTune);
}

//------------------------------------------------------------------------------
function MyDel_ITune(_Entity : word; _cTune : comp) : boolean;
{ MyDel_ITune := pObjITune.DelEnt(_Entity, _cTune);
}

function Del_ITune(_cTune : comp) : boolean;
{ Del_ITune := MyDel_ITune(#(_CurInt)Entity, _cTune);
}

//------------------------------------------------------------------------------
// Загрузка из менеджера Списка ЦО
//------------------------------------------------------------------------------
function Read_ITuneNCO(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITuneNCO := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  GetTblCO(_cTune);

  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITuneNCO := True;
}
//------------------------------------------------------------------------------
// Загрузка из менеджера Списка Периодов
//------------------------------------------------------------------------------
function Read_ITuneNPer(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITuneNPer := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  GetTblPerBud(_cTune);
  GetTblSubPerBud(_cTune);

  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITuneNPer := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера реквизитов копии
//------------------------------------------------------------------------------
function Read_ITune1Stage(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1Stage := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  #GetFld(Comp,   VAR_cCurBudVariant,cCurBudVariant )
  #GetFld(String, Var_sCurStage     , sCurStage     )
  #GetFld(Comp,   Var_cCurArea      , cCurArea      )

  SetBudVariant(cCurBudVariant);
  SetBudStage(sCurStage);
  SetArea(cCurArea);

  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITune1Stage := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера кодов регистра
//------------------------------------------------------------------------------
function Read_ITuneNKodReg(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITuneNKodReg := False;
  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(word,   Var_wRegMode      , wRegMode      )
  pObjITune.DoneEnt(_wEntity, _cTune);
  Read_ITuneNKodReg := True;
}

