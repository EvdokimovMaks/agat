//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.10 - модуль "Управление бюджетом"
// Визуальный интерфейс : "Импорт пакетов данных в модуль УБ"
//------------------------------------------------------------------------------

Const
  Var_cFixTempl              = 'FTmp';
  Var_cKatImp                = 'KImp';
  Var_wAsk                   = 'WAsk';
  Var_wLoadFpOborot          = 'LFOb';
  Var_wLoadInBudget          = 'LIBt';

  Tbl_ImpParamTbl            = 'TIPT';

  Tbl_ImpParamTbl_cRec       = 'TIRC';
  Tbl_ImpParamTbl_wAnType    = 'TIAT';
  Tbl_ImpParamTbl_KodGrKau   = 'TIKK';
  Tbl_ImpParamTbl_cMean      = 'TIMN';
end;

//------------------------------------------------------------------------------
// МАКРОСЫ
//------------------------------------------------------------------------------
#include FpITune.Mac   // Макросы для чтения настроек интерфейсов

//------------------------------------------------------------------------------
function GetTblImpParam(_cTune : comp): boolean;
{
  GetTblImpParam := False;

  delete all ImpParamTbl;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_ImpParamTbl) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      ClearBuffer(#ImpParamTbl);

      #GetTblFld(comp,Tbl_ImpParamTbl,cSavedRec,Tbl_ImpParamTbl_cRec,ImpParamTbl.cRec)
      #GetTblFld(word,Tbl_ImpParamTbl,cSavedRec,Tbl_ImpParamTbl_wAnType,ImpParamTbl.wAnType)
      #GetTblFld(word,Tbl_ImpParamTbl,cSavedRec,Tbl_ImpParamTbl_KodGrKau,ImpParamTbl.KodGrKau)
      #GetTblFld(comp,Tbl_ImpParamTbl,cSavedRec,Tbl_ImpParamTbl_cMean,ImpParamTbl.cMean)
      var tsRes : word;  tsRes := insert current ImpParamTbl;
      if (tsRes <> tsOk)
      { FpLog('GetTblImpParam : (insert current ImpParamTbl <> tsOk)'+string(tsRes)); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  GetTblImpParam := True;
}

//------------------------------------------------------------------------------
function SetTblImpParam(_cTune : comp): boolean;
{
  SetTblImpParam := False;
  PushPos(#ImpParamTbl);
  pObjITune.DelTbl(_cTune, Tbl_ImpParamTbl);
  _Loop ImpParamTbl
  {
      var cSavedRec : comp; cSavedRec := ImpParamTbl.cRec;
      #SetTblFld(comp,Tbl_ImpParamTbl,cSavedRec,Tbl_ImpParamTbl_cRec, ImpParamTbl.cRec)
      #SetTblFld(word,Tbl_ImpParamTbl,cSavedRec,Tbl_ImpParamTbl_wAnType, ImpParamTbl.wAnType)
      #SetTblFld(word,Tbl_ImpParamTbl,cSavedRec,Tbl_ImpParamTbl_KodGrKau,ImpParamTbl.KodGrKau)
      #SetTblFld(comp,Tbl_ImpParamTbl,cSavedRec,Tbl_ImpParamTbl_cMean,ImpParamTbl.cMean)
  }
  PopPos(#ImpParamTbl);
  SetTblImpParam := True;
}

//------------------------------------------------------------------------------
function LoadMailServerTune : boolean;
{
  LoadMailServerTune := False;
  sHost := pFpMailTune.GetHost;
  sPort := pFpMailTune.GetIMAPPort;
  sLogin:= pFpMailTune.GetLogin;
  sPass := pFpMailTune.GetPass;
  LoadMailServerTune := True;
}
//------------------------------------------------------------------------------
function MyRead_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MyRead_ITune := False;

  // признак "загружены настройки из пакета заданий"
  if ( not isLoadBatchITune )
  {
    if _cTune = 0
    {
      if pObjFpProfileManager.UpdateZerroIDToOneID
        Set CurProfileID := 1;
      _Entity := #(_CurInt)Entity;
    }
  }

  pObjITune.InitEnt(_Entity, _cTune);

  #GetFld(comp, Var_cFixTempl    , cFixTempl     )
  #GetFld(comp, Var_cKatImp      , cKatImp       )
  #GetFld(word, Var_wAsk         , wAsk          )
  #GetFld(word, Var_wLoadFpOborot, wLoadFpOborot )
  #GetFld(word, Var_wLoadInBudget, wLoadInBudget )

  Set cFixTempl := cFixTempl;
  Set cKatImp   := cKatImp;

  GetTblImpParam(_cTune);

  pObjITune.DoneEnt(_Entity, _cTune);
  LoadMailServerTune;
  ShowMyHeader;

  MyRead_ITune := True;
}
//------------------------------------------------------------------------------
function Read_ITune(_cTune : comp) : boolean;
{
  isLoadBatchITune := True;
  Read_ITune := MyRead_ITune(#(_CurInt)Entity, _cTune);
}

//------------------------------------------------------------------------------
function MySave_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MySave_ITune := False;

  // были загружены настройки из пакета заданий
  if ( not isLoadBatchITune )
  {
  }

  pObjITune.InitEnt(_Entity, _cTune);

  #SetFld(comp, Var_cFixTempl    , cFixTempl     )
  #SetFld(comp, Var_cKatImp      , cKatImp       )
  #SetFld(word, Var_wAsk         , wAsk          )
  #SetFld(word, Var_wLoadFpOborot, wLoadFpOborot )
  #SetFld(word, Var_wLoadInBudget, wLoadInBudget )

  SetTblImpParam(_cTune);

  pObjITune.DoneEnt(_Entity, _cTune);

  MySave_ITune := True;
}

//------------------------------------------------------------------------------
function Save_ITune(_cTune : comp) : boolean;
{ isLoadBatchITune := True;
  Save_ITune := MySave_ITune(#(_CurInt)Entity, _cTune)
}

//------------------------------------------------------------------------------
function MyDel_ITune(_Entity : word; _cTune : comp) : boolean;
{ MyDel_ITune := pObjITune.DelEnt(_Entity, _cTune);
}

function Del_ITune(_cTune : comp) : boolean;
{ Del_ITune := MyDel_ITune(#(_CurInt)Entity, _cTune);
}
