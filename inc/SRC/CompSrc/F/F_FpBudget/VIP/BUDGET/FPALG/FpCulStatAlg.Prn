//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.10 - модуль "Управление бюджетом"
// Базовый объект : "Вычисление статистических алгоритмов"
//------------------------------------------------------------------------------

/////////////////////////// ВЫГРУЗКА В EXCEL ///////////////////////////////////

var ExRes : boolean;

// матричный вывод
Const
  MaxMatrixRow = 1000;
end;
var MaxMatrixCol : LongInt;
var CurMatrixRow : LongInt;
var CurMatrixCol : LongInt;
var StartMatrixR : LongInt;
var StartMatrixC : LongInt;

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
File aFile;

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
#undef mMyMainAlgSum
#declare mMyMainAlgSum(_Npp, _Row, _Col)

  ExRes := xlDoWriteToMatrix(#_Row, #_Col, MainAlgHash.Sum#(_Npp) );

#end// mMyMainAlgSum

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
function Fill_Excel : boolean;
{
  Fill_Excel := False;

  do
  {
    var Npp : word;
    var sSourceSheetName : string;
    var StartSourceR : integer;  StartSourceR := 1;
    var StartSourceC : integer;  StartSourceC := 1;
    var CurNpp : word;
    ////////////////////////////////////////////////////////////////////////////////
    // Выгрузка данных
    ////////////////////////////////////////////////////////////////////////////////
    StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm+vfScreenBottom,
                   'Выгрузка данных ... ', 1);

//------------------------------------------------------------------------------
#undef mMyLoop
#declare mMyLoop(_Npp)
{
  sSourceSheetName := 'Аргумент ' + string(#(_Npp));
  ExRes := xlAddSheet;
  ExRes := xlSetSheetName(1, sSourceSheetName);
  ExRes := xlSetActiveSheetByName(sSourceSheetName);

  // вывод заголовка
  CurMatrixCol := 0;
  if (not MyGetIsColStat(#(_Npp)) )
  {
    ExRes := xlSetCellStringValue('Период', StartSourceR, StartSourceC + CurMatrixCol, StartSourceR, StartSourceC + CurMatrixCol);
    CurMatrixCol := CurMatrixCol + 1;
  }
  else
  {
    ExRes := xlSetCellStringValue('Начало', StartSourceR, StartSourceC + CurMatrixCol, StartSourceR, StartSourceC + CurMatrixCol);
    CurMatrixCol := CurMatrixCol + 1;
    ExRes := xlSetCellStringValue('Конец', StartSourceR, StartSourceC + CurMatrixCol, StartSourceR, StartSourceC + CurMatrixCol);
    CurMatrixCol := CurMatrixCol + 1;
  }

  for (CurNpp := 1; CurNpp <= wCurAlgAnCount; CurNpp := CurNpp + 1)
  {
    ExRes := xlSetCellStringValue(pExtFpBudAn.GetAnName(MyGetAn(CurNpp )), StartSourceR, StartSourceC + CurMatrixCol, StartSourceR, StartSourceC + CurMatrixCol);
    CurMatrixCol := CurMatrixCol + 1;
  }
  ExRes := xlSetCellStringValue('Сумма', StartSourceR, StartSourceC + CurMatrixCol, StartSourceR, StartSourceC + CurMatrixCol);
  CurMatrixCol := CurMatrixCol + 1;

  // матричный вывод
  MaxMatrixCol := CurMatrixCol;
  CurMatrixRow := 0;
  StartMatrixR := StartSourceR+1;
  StartMatrixC := StartSourceC;
  ExRes := xlCreateMatrix(MaxMatrixRow, MaxMatrixCol);
  if (not ExRes)
  { FpLog('Fill_Excel : (not xlCreateMatrix)'); }
  xlClearMatrix;

  _Loop LoopArgHash#(_Npp)
  { // побежали по значениям аргумента
    CurMatrixCol := 1;
    CurMatrixRow := CurMatrixRow + 1;
    // выведем периоды и даты
    if (not MyGetIsColStat(#(_Npp)) )
    {

      if(not isUPOImplementation)
      {

        ExRes := xlStWriteToMatrix(CurMatrixRow , CurMatrixCol, pExtFpPeriod.GetName(pExtFpPeriod.GetLeafFpPeriodByDate(LoopArgHash#(_Npp).dEnd) ) );
        CurMatrixCol := CurMatrixCol + 1;
      }
      else
      {
        ExRes := xlDtWriteToMatrix(CurMatrixRow , CurMatrixCol, LoopArgHash#(_Npp).dEnd );
        CurMatrixCol := CurMatrixCol + 1;
      }
    }
    else
    {
      if(not isUPOImplementation)
      {
        ExRes := xlStWriteToMatrix(CurMatrixRow , CurMatrixCol, pExtFpPeriod.GetName(pExtFpPeriod.GetLeafFpPeriodByDate(LoopArgHash#(_Npp).dBeg) ) );
        CurMatrixCol := CurMatrixCol + 1;

        ExRes := xlStWriteToMatrix(CurMatrixRow , CurMatrixCol, pExtFpPeriod.GetName(pExtFpPeriod.GetLeafFpPeriodByDate(LoopArgHash#(_Npp).dEnd) ) );
        CurMatrixCol := CurMatrixCol + 1;
      }
      else
      {
        ExRes := xlDtWriteToMatrix(CurMatrixRow , CurMatrixCol, LoopArgHash#(_Npp).dBeg);
        CurMatrixCol := CurMatrixCol + 1;
        ExRes := xlDtWriteToMatrix(CurMatrixRow , CurMatrixCol, LoopArgHash#(_Npp).dEnd);
        CurMatrixCol := CurMatrixCol + 1;
      }
    }
    // выведем значения аналитик
    for (CurNpp := 1; CurNpp <= wCurAlgAnCount; CurNpp := CurNpp + 1)
    {
      ExRes := xlStWriteToMatrix(CurMatrixRow , CurMatrixCol, MyGetMeanName(MyGetAn(CurNpp ), LoopArgHash#(_Npp).cAn[CurNpp ]) );
      CurMatrixCol := CurMatrixCol + 1;
    }

    ExRes := xlDoWriteToMatrix(CurMatrixRow, CurMatrixCol, LoopArgHash#(_Npp).Sum);

  }

  // матричный вывод
  xlWriteMatrixToExcel(StartMatrixR, StartMatrixC);
  xlFreeMatrix;
  xlAddRangeName('GalTbl',1,1,CurMatrixRow+1,CurMatrixCol);
}
#end// mMyLoop
//------------------------------------------------------------------------------

    // Вывод аргументов
    for (Npp := wCurAlgColCount; Npp >= 1; Npp := Npp - 1)
    {
      if (MyGetIsColAlg(Npp) )
      {
        Continue;
      }
           if (Npp = 1 )  #mMyLoop(1 )
      else if (Npp = 2 )  #mMyLoop(2 )
      else if (Npp = 3 )  #mMyLoop(3 )
      else if (Npp = 4 )  #mMyLoop(4 )
      else if (Npp = 5 )  #mMyLoop(5 )
      else if (Npp = 6 )  #mMyLoop(6 )
      else if (Npp = 7 )  #mMyLoop(7 )
      else if (Npp = 8 )  #mMyLoop(8 )
      else if (Npp = 9 )  #mMyLoop(9 )
      else if (Npp = 10)  #mMyLoop(10)
      #ifdef  __FpExtended_lcFpAlgMaxColCount__
      else if (Npp = 11)  #mMyLoop(11)
      else if (Npp = 12)  #mMyLoop(12)
      else if (Npp = 13)  #mMyLoop(13)
      else if (Npp = 14)  #mMyLoop(14)
      else if (Npp = 15)  #mMyLoop(15)
      else if (Npp = 16)  #mMyLoop(16)
      else if (Npp = 17)  #mMyLoop(17)
      else if (Npp = 18)  #mMyLoop(18)
      else if (Npp = 19)  #mMyLoop(19)
      else if (Npp = 20)  #mMyLoop(20)
      else if (Npp = 21)  #mMyLoop(21)
      else if (Npp = 22)  #mMyLoop(22)
      else if (Npp = 23)  #mMyLoop(23)
      else if (Npp = 24)  #mMyLoop(24)
      else if (Npp = 25)  #mMyLoop(25)
      #endif//__FpExtended_lcFpAlgMaxColCount__
    }

    // Вывод расчета
    sSourceSheetName := 'Расчет';
    ExRes := xlAddSheet;
    ExRes := xlSetSheetName(1, sSourceSheetName);

    ExRes := xlSetActiveSheetByName(sSourceSheetName);

    // вывод заголовка
    ExRes := xlSetCellStringValue('Период', StartSourceR, StartSourceC, StartSourceR, StartSourceC);
    CurMatrixCol := 1;

    for (Npp := 1; Npp <= wCurAlgColCount; Npp := Npp + 1)
    {
      if (MyGetIsColAlg(Npp) )
      {
        Continue;
      }

      ExRes := xlSetCellStringValue('Арг'+string(Npp), StartSourceR, StartSourceC + CurMatrixCol, StartSourceR, StartSourceC + CurMatrixCol);
      CurMatrixCol := CurMatrixCol + 1;
    }
    ExRes := xlSetCellStringValue('Рез-т', StartSourceR, StartSourceC+ CurMatrixCol, StartSourceR, StartSourceC+ CurMatrixCol);
    CurMatrixCol := CurMatrixCol + 1;
    ExRes := xlSetCellStringValue('Бюджет', StartSourceR, StartSourceC+ CurMatrixCol, StartSourceR, StartSourceC+ CurMatrixCol);
    CurMatrixCol := CurMatrixCol + 1;
    for (Npp := 1; Npp <= wCurAlgAnCount; Npp := Npp + 1)
    {
      ExRes := xlSetCellStringValue(pExtFpBudAn.GetAnName(MyGetAn(Npp )), StartSourceR, StartSourceC + CurMatrixCol, StartSourceR, StartSourceC + CurMatrixCol);
      CurMatrixCol := CurMatrixCol + 1;
    }

    // матричный вывод
    MaxMatrixCol := CurMatrixCol;
    CurMatrixRow := 0;
    StartMatrixR := StartSourceR+1;
    StartMatrixC := StartSourceC;
    ExRes := xlCreateMatrix(MaxMatrixRow, MaxMatrixCol);
    if (not ExRes)
    { FpLog('Fill_Excel : (not xlCreateMatrix)'); }
    xlClearMatrix;

    _Loop MainAlgHash
    {
      CurMatrixCol := 1;
      CurMatrixRow := CurMatrixRow + 1;

      if(not isUPOImplementation)
      {
        ExRes := xlStWriteToMatrix(CurMatrixRow , CurMatrixCol, pExtFpPeriod.GetName(MainAlgHash.cPeriod));
      }
      else
      {
        ExRes := xlDtWriteToMatrix(CurMatrixRow , CurMatrixCol, MainAlgHash.dDat);
      }

      CurMatrixCol := CurMatrixCol + 1;
      for (Npp := 1; Npp <= wCurAlgColCount; Npp := Npp + 1)
      {

      if (MyGetIsColAlg(Npp) )
      {
        Continue;
      }

             if (Npp = 1 )  #mMyMainAlgSum(1, CurMatrixRow, CurMatrixCol )
        else if (Npp = 2 )  #mMyMainAlgSum(2, CurMatrixRow, CurMatrixCol )
        else if (Npp = 3 )  #mMyMainAlgSum(3, CurMatrixRow, CurMatrixCol )
        else if (Npp = 4 )  #mMyMainAlgSum(4, CurMatrixRow, CurMatrixCol )
        else if (Npp = 5 )  #mMyMainAlgSum(5, CurMatrixRow, CurMatrixCol )
        else if (Npp = 6 )  #mMyMainAlgSum(6, CurMatrixRow, CurMatrixCol )
        else if (Npp = 7 )  #mMyMainAlgSum(7, CurMatrixRow, CurMatrixCol )
        else if (Npp = 8 )  #mMyMainAlgSum(8, CurMatrixRow, CurMatrixCol )
        else if (Npp = 9 )  #mMyMainAlgSum(9, CurMatrixRow, CurMatrixCol )
        else if (Npp = 10)  #mMyMainAlgSum(10, CurMatrixRow, CurMatrixCol)
        #ifdef  __FpExtended_lcFpAlgMaxColCount__
        else if (Npp = 11)  #mMyMainAlgSum(11, CurMatrixRow, CurMatrixCol)
        else if (Npp = 12)  #mMyMainAlgSum(12, CurMatrixRow, CurMatrixCol)
        else if (Npp = 13)  #mMyMainAlgSum(13, CurMatrixRow, CurMatrixCol)
        else if (Npp = 14)  #mMyMainAlgSum(14, CurMatrixRow, CurMatrixCol)
        else if (Npp = 15)  #mMyMainAlgSum(15, CurMatrixRow, CurMatrixCol)
        else if (Npp = 16)  #mMyMainAlgSum(16, CurMatrixRow, CurMatrixCol)
        else if (Npp = 17)  #mMyMainAlgSum(17, CurMatrixRow, CurMatrixCol)
        else if (Npp = 18)  #mMyMainAlgSum(18, CurMatrixRow, CurMatrixCol)
        else if (Npp = 19)  #mMyMainAlgSum(19, CurMatrixRow, CurMatrixCol)
        else if (Npp = 20)  #mMyMainAlgSum(20, CurMatrixRow, CurMatrixCol)
        else if (Npp = 21)  #mMyMainAlgSum(21, CurMatrixRow, CurMatrixCol)
        else if (Npp = 22)  #mMyMainAlgSum(22, CurMatrixRow, CurMatrixCol)
        else if (Npp = 23)  #mMyMainAlgSum(23, CurMatrixRow, CurMatrixCol)
        else if (Npp = 24)  #mMyMainAlgSum(24, CurMatrixRow, CurMatrixCol)
        else if (Npp = 25)  #mMyMainAlgSum(25, CurMatrixRow, CurMatrixCol)
        #endif//__FpExtended_lcFpAlgMaxColCount__

        CurMatrixCol := CurMatrixCol + 1;
      }


      ExRes := xlDoWriteToMatrix(CurMatrixRow, CurMatrixCol, MainAlgHash.AlgSum);
      CurMatrixCol := CurMatrixCol + 1;
      ExRes := xlDoWriteToMatrix(CurMatrixRow, CurMatrixCol, AlgValues.Summa);
      CurMatrixCol := CurMatrixCol + 1;


      for (Npp := 1; Npp <= wCurAlgAnCount; Npp := Npp + 1)
      {
        ExRes := xlStWriteToMatrix(CurMatrixRow , CurMatrixCol, MyGetMeanName(MyGetAn(Npp ), MainAlgHash.cAn[Npp ]));
        CurMatrixCol := CurMatrixCol + 1;
      }

    }

    // матричный вывод
    xlWriteMatrixToExcel(StartMatrixR, StartMatrixC);
    xlFreeMatrix;
    xlAddRangeName('GalTbl',1,1,CurMatrixRow+1,CurMatrixCol);


    ////////////////////////////////////////////////////////////////////////////////
    // Формирование макроса
    ////////////////////////////////////////////////////////////////////////////////

    var FBasName : string;
    var FBasFileName : string;

    FBasFileName := 'RepAutoFlt.bas';
    FBasName := GetPathParameter ('Files', 'TmpFilesDirectory', ifFirstParameter);
    if (SubStr(FBasName, Length(FBasName), 1) <> '\')
    {
      FBasName := FBasName + '\';
    }
    FBasName := FBasName + FBasFileName;
    DeleteFile(FBasName);

    _try
    {
    aFile.OpenFile (FBasName, stCreate);

    aFile.Writeln('Sub AutoFlt()');
    aFile.Writeln('');
    aFile.Writeln('Dim I As Integer');
    aFile.Writeln('For I = 1 To ActiveWorkbook.Worksheets.Count');
    aFile.Writeln('  ActiveWorkbook.Worksheets.Item(I).Select');
    aFile.Writeln('  On Error Resume Next');
    aFile.Writeln('    If ActiveWorkbook.Worksheets.Item(I).AutoFilter Is Nothing Then');
    aFile.Writeln('      Range("GalTbl").AutoFilter');
    aFile.Writeln('    End if');
    aFile.Writeln('  On Error GoTo 0');
    aFile.Writeln('Next I');
    aFile.Writeln('ActiveWorkbook.Worksheets.Item(1).Select');
    aFile.Writeln('');
    aFile.Writeln('End Sub');
    aFile.Writeln('');

    }
    _except
      on ExFile: {
      }
    _finally {
       aFile.Close;
    }

#ifdef Atl51
    if (PutSrvFileToClient(ConvertClientPathToSrv(FBasName), FBasName, False) <> 0)
    {
      if (ConvertClientPathToSrv(FBasName) <> FBasName)
        Message('Невозможно скопировать файл клиенту, ('+FBasName+')');
    }
#endif //Atl51
    ExRes := xlImportModule(FBasName);
    ExRes := xlRunMacro('AutoFlt');
    DeleteFile(FBasName);
  }
  while False;

  StopVisual('',0);
}

//------------------------------------------------------------------------------
function FillArg_Excel(_Npp : word) : boolean;
{
  FillArg_Excel := False;
  do
  {
    var Npp : word;
    var sSourceSheetName : string;
    var StartSourceR : integer;  StartSourceR := 1;
    var StartSourceC : integer;  StartSourceC := 1;
    var CurNpp : word;
    ////////////////////////////////////////////////////////////////////////////////
    // Выгрузка данных
    ////////////////////////////////////////////////////////////////////////////////
    StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm+vfScreenBottom,
                   'Выгрузка данных ... ', 1);

         if (_Npp = 1 )  #mMyLoop(1 )
    else if (_Npp = 2 )  #mMyLoop(2 )
    else if (_Npp = 3 )  #mMyLoop(3 )
    else if (_Npp = 4 )  #mMyLoop(4 )
    else if (_Npp = 5 )  #mMyLoop(5 )
    else if (_Npp = 6 )  #mMyLoop(6 )
    else if (_Npp = 7 )  #mMyLoop(7 )
    else if (_Npp = 8 )  #mMyLoop(8 )
    else if (_Npp = 9 )  #mMyLoop(9 )
    else if (_Npp = 10)  #mMyLoop(10)
    #ifdef  __FpExtended_lcFpAlgMaxColCount__
    else if (_Npp = 11)  #mMyLoop(11)
    else if (_Npp = 12)  #mMyLoop(12)
    else if (_Npp = 13)  #mMyLoop(13)
    else if (_Npp = 14)  #mMyLoop(14)
    else if (_Npp = 15)  #mMyLoop(15)
    else if (_Npp = 16)  #mMyLoop(16)
    else if (_Npp = 17)  #mMyLoop(17)
    else if (_Npp = 18)  #mMyLoop(18)
    else if (_Npp = 19)  #mMyLoop(19)
    else if (_Npp = 20)  #mMyLoop(20)
    else if (_Npp = 21)  #mMyLoop(21)
    else if (_Npp = 22)  #mMyLoop(22)
    else if (_Npp = 23)  #mMyLoop(23)
    else if (_Npp = 24)  #mMyLoop(24)
    else if (_Npp = 25)  #mMyLoop(25)
    #endif//__FpExtended_lcFpAlgMaxColCount__

    ////////////////////////////////////////////////////////////////////////////////
    // Формирование макроса
    ////////////////////////////////////////////////////////////////////////////////

    var FBasName : string;
    var FBasFileName : string;

    FBasFileName := 'RepAutoFlt.bas';
    FBasName := GetPathParameter ('Files', 'TmpFilesDirectory', ifFirstParameter);
    if (SubStr(FBasName, Length(FBasName), 1) <> '\')
    {
      FBasName := FBasName + '\';
    }
    FBasName := FBasName + FBasFileName;
    DeleteFile(FBasName);

    _try
    {
    aFile.OpenFile (FBasName, stCreate);

    aFile.Writeln('Sub AutoFlt()');
    aFile.Writeln('');
    aFile.Writeln('Dim I As Integer');
    aFile.Writeln('For I = 1 To ActiveWorkbook.Worksheets.Count');
    aFile.Writeln('  ActiveWorkbook.Worksheets.Item(I).Select');
    aFile.Writeln('  On Error Resume Next');
    aFile.Writeln('    If ActiveWorkbook.Worksheets.Item(I).AutoFilter Is Nothing Then');
    aFile.Writeln('      Range("GalTbl").AutoFilter');
    aFile.Writeln('    End if');
    aFile.Writeln('  On Error GoTo 0');
    aFile.Writeln('Next I');
    aFile.Writeln('ActiveWorkbook.Worksheets.Item(1).Select');
    aFile.Writeln('');
    aFile.Writeln('End Sub');
    aFile.Writeln('');

    }
    _except
      on ExFile: {
      }
    _finally {
       aFile.Close;
    }

#ifdef Atl51
    if (PutSrvFileToClient(ConvertClientPathToSrv(FBasName), FBasName, False) <> 0)
    {
      if (ConvertClientPathToSrv(FBasName) <> FBasName)
        Message('Невозможно скопировать файл клиенту, ('+FBasName+')');
    }
#endif //Atl51
    ExRes := xlImportModule(FBasName);
    ExRes := xlRunMacro('AutoFlt');
    DeleteFile(FBasName);
  }
  while False;

  StopVisual('',0);

  FillArg_Excel := True;
}

//------------------------------------------------------------------------------
// Вывод в Excel аргумента
//------------------------------------------------------------------------------
function ExportArgToExcel(_Npp : word) : boolean;
{
  ExportArgToExcel := False;

  ExRes := True;
  var XlRes : boolean;  XlRes := True;
  XlRes := xlCreateExcel('', True);
  if (XlRes)
    XlRes := xlIsExcelValid;
  // наконец - построение
  if (XlRes)
    ExportArgToExcel := FillArg_Excel(_Npp); // построение
  xlKillExcel;
}

//------------------------------------------------------------------------------
// Начальная инициализация (Excel)
//------------------------------------------------------------------------------
function ExportToExcel : boolean;
{
  ExportToExcel := False;

  ExRes := True;
  var XlRes : boolean;  XlRes := True;
  XlRes := xlCreateExcel('', True);
  if (XlRes)
    XlRes := xlIsExcelValid;
  // наконец - построение
  if (XlRes)
    ExportToExcel := Fill_Excel; // построение
  xlKillExcel;
}
