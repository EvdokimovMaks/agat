//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.10 - модуль "Управление бюджетом"
// Визуальный интерфейс : "Формирования платежных документов"
//------------------------------------------------------------------------------

Const
  Var_dtBudBeg     = 'dBB';
  Var_dtBudEnd     = 'dBE';
  Var_wDebMode     = 'wDM';
  Var_wEMlSend     = 'wES';

  Var_cBudTPer     = 'cBTP';
  Var_wRegMode     = 'wReg';
  Var_cBudVariant  = 'cVar';
  Var_sBudStage    = 'sBSt';

  Tbl_TblTuneList             = 'TTL';
  TblVar__TblTuneList_cRec    = 'TTLc';

  Tbl_TblCOList               = 'TCL';
  TblVar__TblCOList_cRec      = 'TCLc';
end;

//------------------------------------------------------------------------------
#include FpCOParam.Inc     // Константы идентификаторов параметров типа "ЦО"
#include FpPerParam.Inc    // Константы идентификаторов параметров типа "Периоды и подпериоды"
#include FpStageParam.Inc  // Константы идентификаторов параметров типа "Реквизиты копии"
#include FpKodRegParam.Inc // Константы идентификаторов параметров типа "Регистр учета"
//------------------------------------------------------------------------------
// МАКРОСЫ
//------------------------------------------------------------------------------
#include FpITune.Mac   // Макросы для чтения настроек интерфейсов

//------------------------------------------------------------------------------
function GetTblCOList(_cTune : comp): boolean;
{
  GetTblCOList := False;

  delete all TblCOList;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_TblCOList) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      ClearBuffer(#TblCOList);
      TblCOList.Npp := word(cSavedRec);

      #GetTblFld(Comp,Tbl_TblCOList,cSavedRec,TblVar__TblCOList_cRec,TblCOList.cRec)

      var tsRes : word;  tsRes := insert current TblCOList;
      if (tsRes <> tsOk)
      { FpLog('GetTblCOList : (insert current TblCOList <> tsOk)'+string(tsRes)); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  GetTblCOList := True;
}
//------------------------------------------------------------------------------
function SetTblCOList(_cTune : comp): boolean;
{
  SetTblCOList := False;
  pObjITune.DelTbl(_cTune, Tbl_TblCOList);
  _Loop TblCOList
  {
      var cSavedRec : comp; cSavedRec := TblCOList.Npp;
      #SetTblFld(Comp,Tbl_TblCOList,cSavedRec,TblVar__TblCOList_cRec,TblCOList.cRec)
  }
  SetTblCOList := True;
}

//------------------------------------------------------------------------------
function GetTblTuneList(_cTune : comp): boolean;
{
  GetTblTuneList := False;

  delete all TblTuneList;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_TblTuneList) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      ClearBuffer(#TblTuneList);
      TblTuneList.Npp := word(cSavedRec);

      #GetTblFld(Comp,Tbl_TblTuneList,cSavedRec,TblVar__TblTuneList_cRec,TblTuneList.cRec)

      var tsRes : word;  tsRes := insert current TblTuneList;
      if (tsRes <> tsOk)
      { FpLog('GetTblTuneList : (insert current TblTuneList <> tsOk)'+string(tsRes)); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  GetTblTuneList := True;
}
//------------------------------------------------------------------------------
function SetTblTuneList(_cTune : comp): boolean;
{
  SetTblTuneList := False;
  pObjITune.DelTbl(_cTune, Tbl_TblTuneList);
  _Loop TblTuneList
  {
      var cSavedRec : comp; cSavedRec := TblTuneList.Npp;
      #SetTblFld(Comp,Tbl_TblTuneList,cSavedRec,TblVar__TblTuneList_cRec,TblTuneList.cRec)
  }
  SetTblTuneList := True;
}

//------------------------------------------------------------------------------
function MyRead_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MyRead_ITune := False;

  // признак "загружены настройки из пакета заданий"
  if ( not isLoadBatchITune )
  {
    if _cTune = 0
    {
      if pObjFpProfileManager.UpdateZerroIDToOneID
        Set CurProfileID := 1;
      _Entity := #(_CurInt)Entity;
    }
  }

  pObjITune.InitEnt(_Entity, _cTune);

  GetTblCOList (_cTune);
  GetTblTuneList(_cTune);

  #GetFld(Date,   Var_dtBudBeg    , dtBudBeg    )
  #GetFld(Date,   Var_dtBudEnd    , dtBudEnd    )
  #GetFld(Word,   Var_wDebMode    , wDebMode    )
  #GetFld(Word,   Var_wEMlSend    , wEMlSend    )

  #GetFld(Comp,   Var_cBudTPer    , cBudTPer    )
  #GetFld(Word,   Var_wRegMode    , wRegMode    )
  #GetFld(Comp,   Var_cBudVariant , cBudVariant )
  #GetFld(String, Var_sBudStage   , sBudStage   )

  Set cBudTPer    := cBudTPer;
  Set cBudVariant := cBudVariant;

  pObjITune.DoneEnt(_Entity, _cTune);

  ReReadRecord(#KatH);
  ReReadRecord(#TuneList);
  ReReadRecord(#COList);

  ShowMyHeader;

  if (not MyReSetSenderType)
  { Exit; }

  MyRead_ITune := True;
}

//------------------------------------------------------------------------------
function Read_ITune(_cTune : comp) : boolean;
{
  isLoadBatchITune := True;
  Read_ITune := MyRead_ITune(#(_CurInt)Entity, _cTune);
}

//------------------------------------------------------------------------------
function MySave_ITune(_Entity : word; _cTune : comp) : boolean;
{
  MySave_ITune := False;

  // были загружены настройки из пакета заданий
  if ( not isLoadBatchITune )
  {
  }

  pObjITune.InitEnt(_Entity, _cTune);

  #SetFld(Date,   Var_dtBudBeg    , dtBudBeg    )
  #SetFld(Date,   Var_dtBudEnd    , dtBudEnd    )
  #SetFld(Word,   Var_wDebMode    , wDebMode    )
  #SetFld(Word,   Var_wEMlSend    , wEMlSend    )

  #SetFld(Comp,   Var_cBudTPer    , cBudTPer    )
  #SetFld(Word,   Var_wRegMode    , wRegMode    )
  #SetFld(Comp,   Var_cBudVariant , cBudVariant )
  #SetFld(String, Var_sBudStage   , sBudStage   )

  SetTblCOList (_cTune);
  SetTblTuneList(_cTune);

  pObjITune.DoneEnt(_Entity, _cTune);

  MySave_ITune := True;
}

//------------------------------------------------------------------------------
function Save_ITune(_cTune : comp) : boolean;
{ isLoadBatchITune := True;
  Save_ITune := MySave_ITune(#(_CurInt)Entity, _cTune)
}

//------------------------------------------------------------------------------
function MyDel_ITune(_Entity : word; _cTune : comp) : boolean;
{ MyDel_ITune := pObjITune.DelEnt(_Entity, _cTune);
}

//------------------------------------------------------------------------------
function Del_ITune(_cTune : comp) : boolean;
{ Del_ITune := MyDel_ITune(#(_CurInt)Entity, _cTune);
}


//------------------------------------------------------------------------------
// Загрузка Списка ЦО из менеджера в текущую модель
//------------------------------------------------------------------------------
function GetTblCO(_cTune : comp): boolean;
{
  GetTblCO := False;
  var CurNpp : word; CurNpp := 0;
  delete all TblCOList;
  if (not pObjITune.GetTblBoxRec(_cTune, Tbl_tblCO) )
  {Exit;}
  while GetFirst FastFirstRow BoxRec = tsOk
  {
    do
    {
      if (BoxRec.cRec = 0)  { Break; }
      var cSavedRec : comp; cSavedRec := BoxRec.cRec;
      ClearBuffer(#TblCOList);
      inc(CurNpp);
      TblCOList.Npp := CurNpp;

      #GetTblFld(Comp,Tbl_tblCO,cSavedRec,TblVar__tblCO_cRec,TblCOList.cRec)

      var tsRes : word;   tsRes := insert current TblCOList;
      if (tsRes <> tsOk)
      { FpLog('GetTblCO : (insert current TblCOList <> tsOk)'+string(tsRes)); }

    }
    while False;

    var cBoxRec : comp; cBoxRec := BoxRec.cRec;
    delete all BoxRec where ((cBoxRec == BoxRec.cRec));
  } //while GetFirst FastFirstRow BoxRec

  ReReadRecord(#COList);

  GetTblCO := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера Списка ЦО
//------------------------------------------------------------------------------
function Read_ITuneNCO(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITuneNCO := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  GetTblCO(_cTune);

  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITuneNCO := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера единичного периода
//------------------------------------------------------------------------------
function Read_ITune1Per(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1Per := False;
  pObjITune.InitEnt(_wEntity, _cTune);

  var  cCurPer : comp = 0;
  #GetFld(Comp, Var_cCurPer, cCurPer)

  Set dtBudBeg := pExtFpPeriod.GetDBeg(cCurPer);
  Set dtBudEnd := pExtFpPeriod.GetDEnd(cCurPer);

  pObjITune.DoneEnt(_wEntity, _cTune);
  Read_ITune1Per := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера реквизиты копии
//------------------------------------------------------------------------------
function Read_ITune1Stage(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1Stage := False;

  pObjITune.InitEnt(_wEntity, _cTune);

  #GetFld(Comp,   Var_cCurBudVariant, cBudVariant )
  #GetFld(String, Var_sCurStage     , sBudStage   )

  Set cBudVariant := cBudVariant;
  Set sBudStage   := sBudStage;

  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITune1Stage := True;
}

//------------------------------------------------------------------------------
// Загрузка из менеджера кода регистра
//------------------------------------------------------------------------------
function Read_ITune1KodReg(_cTune : comp; _wEntity : word) : boolean;
{
  Read_ITune1KodReg := False;

  pObjITune.InitEnt(_wEntity, _cTune);
  #GetFld(Word, VAR_wKodReg1, wRegMode)
  Set wRegMode := wRegMode;
  pObjITune.DoneEnt(_wEntity, _cTune);

  Read_ITune1KodReg := True;
}
