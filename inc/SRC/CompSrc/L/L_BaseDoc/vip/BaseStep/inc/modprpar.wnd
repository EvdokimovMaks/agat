//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - ДО_
// Окно ввода параметров пересчета
//******************************************************************************

Create View lMPP
From
  KlPrice
, GrPrice
, Prices
;

var sFltKlPrice   : string;
var pFltKlPrice   : comp;
var sParKlPrice   : string;
var Par1, Par2    : word;
var wGrParFlt     : word;
var wGrPar        : word;
var pFltGrPrice   : comp;
var pGrPrice      : comp;
var sFltGrPrice   : string;
var sGrPrice      : string;
var bOneBaseDoc   : boolean;
var bShowProtocol : boolean;
var pKlPrice      : comp;

form ProtMod ('ProtMod.OUT', 'errr') with novisual;

#doc
Окно установки параметров пересчета
#end
Window ModPricePar 'Параметры пересчета' DoAccept, EscClose, Gray;
  Show at (, , 78, 19);

Panel pModPricePar

Screen scPar (, hcctxPriceIzmPar, sci1Esc)

Fields
  wGrParFlt   ('Фильтр по прайс-листу/группе прайс-листов') : NoProtect;
  sFltKlPrice (,,sci13Esc): Protect;
  sFltGrPrice (,,sci13Esc): Protect;
  wGrPar      ('Новые цены из прайс-листа/группы прайс-листов') : NoProtect;
  sParKlPrice (,,sci13Esc): Protect, NoDel;
  sGrPrice    (,,sci13Esc): Protect;
  Par1 ('Вставка цены в НДЕ из прайс-листа в НДЕ-ДО', , ), NoProtect;
  Par2 ('Обнулять/Не обнулять цену для позиций спецификации, не найденных в прайс-листе', , ), NoProtect;
  bShowProtocol ('Выводить\ не выводить протокол'): NoProtect;

Buttons
  cmYes, Default, , 'Продолжить', , sci1Esc;
  cmCancel, , , 'Отмена', , sci1Esc;
<<

    `Фильтр по позициям спецификации:`
    (.) по прайс-листу`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    (.) по группе прайс-листов`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    `Новые цены из:`
    (.) прайс-листа`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    (.) группы прайс-листов`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    `При вставке в ДО с типом по валюте НДЕ из прайса с типом по валюте НДЕ+ВАЛ`
    (.) Взять цену в НДЕ из прайс-листа`
    (.) Пересчитать цену из валюты прайс-листа в НДЕ по курсу на дату ДО`

    `Обнулять цену для позиций спецификации:`
    [.] не найденных в прайс-листах`                  [.] Выводить протокол`
    [.] найденных в прайс-листах несколько раз`

        <. Продолжить .>                            <.   Отмена   .>
>>
end;

HandleEvent

cmDelOnProtect:
{
  case CurField of
  //******************************************************************************
    #sFltKlPrice:
      {
        if ( pFltKlPrice = 0 )
          {
            set pFltKlPrice := -1;
            set sFltKlPrice := 'по всем позициям спецификации';
          }
        else
          {
            set pFltKlPrice := 0;
            set sFltKlPrice := 'у которых прайс-лист не указан';
          }

        Stop;
      }
    #sFltGrPrice:
      {
        if ( pFltGrPrice = 0 )
          {
            set pFltGrPrice := -1;
            set sFltGrPrice := 'по всем позициям спецификации';
          }
        else
          {
            set pFltGrPrice := 0;
            set sFltGrPrice := 'у которых прайс-лист не указан';
          }

        Stop;
      }
  //******************************************************************************
    #sGrPrice:
      {
        set pGrPrice := 0;
        set sGrPrice := 'прайс-листы без группы';
      }
  end;
}

cmCheckField:
{
  Case CurField of
  //******************************************************************************
    #wGrParFlt, #wGrPar:
      {
        ToggleFieldVisible(#sFltKlPrice, wGrParFlt = 0);
        ToggleFieldVisible(#sFltGrPrice, wGrParFlt = 1);
        ToggleFieldVisible(#sParKlPrice, wGrPar    = 0);
        ToggleFieldVisible(#sGrPrice   , wGrPar    = 1);

        if (CurField = #wGrPar AND wGrPar = 1 AND pGrPrice = -1)
          {
            SelectField(#sGrPrice);

            PutCommand(cmPick)
          }

        if (CurField = #wGrPar AND wGrPar = 0 AND PrNRec = 0)
          {
            SelectField(#sParKlPrice);

            PutCommand(cmPick)
          }

        ClusterDisabledField(#Par1, 0);

        if ( wGrPar = 0 ) AND ( ( BaseDoc.cVal <> 0 ) OR ( lMPP.KlPrice.TipMoney <> 1 ) )
          {
            Par1 := if(BaseDoc.cVal = lMPP.KlPrice.cVal, 0, 1);

            ClusterDisabledField(#Par1, 0FFFFh);
          }
      }
  //******************************************************************************
  end;
}

end;

end; // Panel

HandleEvent

cmInit:
{
  Var
    wVhodNal: word;

  set pFltKlPrice := -1;
  set sFltKlPrice := 'по всем позициям спецификации';

  set pFltGrPrice := -1;
  set sFltGrPrice := 'по всем позициям спецификации';

  pKlPrice := PrNRec;

  if ( lMPP.GetFirst KlPrice where (( pKlPrice == KlPrice.NRec )) = tsOk )
    set sParKlPrice := lMPP.KlPrice.Name;

  if ( lMPP.GetFirst GrPrice where (( pGrPrice == GrPrice.NRec )) = tsOk )
    set sGrPrice := lMPP.GrPrice.Name;

  PrNrec   := 0;
  pGrPrice := -1;

  if NOT ReadMyDSK(wGrParFlt, 'ModPricePar_wGrParFlt', TRUE)
    wGrParFlt := 0;

  if NOT ReadMyDSK(wGrPar, 'ModPricePar_wGrPar', TRUE)
    wGrPar := 0;

  if NOT ReadMyDSK(Par2, 'ModPricePar_Par2', TRUE)
    Par2 := 0;

  if NOT ReadMyDSK(bShowProtocol, 'ModPricePar_bShowProtocol', TRUE)
    bShowProtocol := TRUE;

  ToggleFieldVisible(#sFltKlPrice, wGrParFlt = 0);
  ToggleFieldVisible(#sFltGrPrice, wGrParFlt = 1);
  ToggleFieldVisible(#sParKlPrice, wGrPar    = 0);
  ToggleFieldVisible(#sGrPrice   , wGrPar    = 1);

  Par1 := 0;

  ClusterDisabledField(#Par1, 0);

  if ( wGrPar = 0 )
    {
      wVhodNal := BaseDoc.VhodNal;

      if boGetTune('Price.GrKontr')  // искать прайс по группе
        {
          if NOT oDoPrice.GetKlPriceOnGroup(BaseDoc.cOrg, PrNrec, 0, 1, 0)
            {
              Abort;
              Exit;
            }
          else
            if ( PrNrec = 0 )
              if ( RunInterface('GetKlPr', PrNrec, wVhodNal, word(1), word(0)) = cmCancel )
                {
                  Abort;
                  Exit;
                }
        }
      else
        if ( RunInterface('GetKlPr', PrNrec, wVhodNal, word(1), word(0)) = cmCancel )
          {
            Abort;
            Exit;
          }

      pKlPrice := PrNRec;

      if ( lMPP.GetFirst FastFirstRow KlPrice where (( pKlPrice == KlPrice.nRec )) = tsOk )
        {
          sParKlPrice := lMPP.KlPrice.Name;

          if ( ( BaseDoc.cVal <> 0 ) OR ( lMPP.KlPrice.TipMoney <> 1 ) )
            {
              Par1 := if(BaseDoc.cVal = lMPP.KlPrice.cVal, 0, 1);

              ClusterDisabledField(#Par1, 0FFFFh);
            }
        }
    }
  else
    if ( RunInterface('GetGrPrice', pGrPrice) = cmCancel )
      {
        Abort;
        Exit;
      }
    else
      if ( lMPP.GetFirst FastFirstRow GrPrice where (( pGrPrice == GrPrice.nRec )) = tsOk )
        set sGrPrice := lMPP.GrPrice.Name;
}

cmPick:
{
  ClusterDisabledField(#Par1, 0);

  case CurField of
  //******************************************************************************
    #sFltKlPrice:
      {
        if not boGetTune('Price.GrKontr')  // искать прайс по группе
          {
            if ( RunInterface('GetKlPr', pFltKlPrice, RVhod, word(1), word(0)) = cmCancel )
              Exit;
          }
        else
          {
            var pKlPrice: comp; pKlPrice := if(pFltKlPrice = -1, 0, pFltKlPrice);

            if not oDoPrice.GetKlPriceOnGroup(BaseDoc.cOrg, pKlPrice, 0, 1, 0)
              Exit
            else
              if ( pKlPrice = 0 )
                if ( RunInterface('GetKlPr', pKlPrice, RVhod, word(1), word(0)) = cmCancel )
                  Exit;

            pFltKlPrice := pKlPrice;
          }

        if ( lMPP.GetFirst KlPrice where (( pFltKlPrice == KlPrice.NRec )) = tsOk )
          set sFltKlPrice := lMPP.KlPrice.Name;
      }
  //******************************************************************************
    #sParKlPrice:
      {
        if not boGetTune('Price.GrKontr')  // искать прайс по группе
          {
            if ( RunInterface('GetKlPr', PrNrec, RVhod, word(1), word(0)) = cmCancel)
              Exit;
          }
        else
          {
            pKlPrice := if(PrNrec = -1, 0, PrNrec);

            if not oDoPrice.GetKlPriceOnGroup(BaseDoc.cOrg, pKlPrice, 0, 1, 0)
              Exit
            else
              if ( pKlPrice = 0 )
                if ( RunInterface('GetKlPr', pKlPrice, RVhod, word(1), word(0)) = cmCancel)
                  Exit;

            PrNrec := pKlPrice;
          }

        pKlPrice := PrNRec;

        if ( lMPP.GetFirst KlPrice where (( pKlPrice == KlPrice.NRec )) = tsOk )
          set sParKlPrice := lMPP.KlPrice.Name;
      }
  //******************************************************************************
    #sGrPrice:
      {
        if ( RunInterface('GetGrPrice', pGrPrice) <> cmCancel )
          if ( lMPP.GetFirst GrPrice where (( pGrPrice == GrPrice.nRec )) = tsOk )
            set sGrPrice := lMPP.GrPrice.Name;
      }
  //******************************************************************************
    #sFltGrPrice:
      {
        if ( RunInterface('GetGrPrice', pFltGrPrice) <> cmCancel )
          if ( lMPP.GetFirst GrPrice where (( pFltGrPrice == GrPrice.nRec )) = tsOk )
            set sFltGrPrice := lMPP.GrPrice.Name;
      }
  //******************************************************************************
  end;

  if ( wGrPar = 0 ) AND ( ( BaseDoc.cVal <> 0 ) OR ( lMPP.KlPrice.TipMoney <> 1 ) )
    {
      Par1 := if(BaseDoc.cVal = lMPP.KlPrice.cVal, 0, 1);

      ClusterDisabledField(#Par1, 0FFFFh);
    }
}

cmYes:
{
  SaveMyDSK(wGrParFlt    , 'ModPricePar_wGrParFlt');
  SaveMyDSK(wGrPar       , 'ModPricePar_wGrPar');
  SaveMyDSK(Par2         , 'ModPricePar_Par2');
  SaveMyDSK(bShowProtocol, 'ModPricePar_bShowProtocol');

  PutCommand(cmDefault);
}

end;

end; //Window

Function CheckSpStepFlt : boolean;
var pRec: comp;
{
  pRec := SpStep.cPriceList;

  if wGrParFlt = 0
    Result := (SpStep.cPriceList = pFltKlPrice) OR (pFltKlPrice = -1)
  else
    case pFltGrPrice of
      0  : Result := (SpStep.cPriceList = 0);
      -1 : Result := TRUE;
    else
      if (lMPP.GetFirst FastFirstRow KlPrice where (( pRec == KlPrice.nRec )) = tsOk)
        Result := (lMPP.KlPrice.cGrPrice = pFltGrPrice)
      else
        Result := FALSE;
    end;
}

Function GetPriceForMod : boolean;
var
  wCount, wOtpCount : integer;
  pMC, pParty, pPrice, pOtpPrice : comp;
{

  pOtpPrice := pPrice := 0;
  wOtpCount := wCount := 0;

  pMC    := SpStep.cMCUsl;
  pParty := SpStep.cParty;

  if wGrPar = 0
    {
      pKlPrice := PrNRec;

      if ( lMPP.GetFirst FastFirstRow KlPrice where (( pKlPrice == KlPrice.nRec )) = tsOk )
        if (  ((SpStep.PrMC  = 1) AND (lMPP.KlPrice.Tip = 0))
           OR ((SpStep.PrMC <> 1) AND (lMPP.KlPrice.Tip = 1)) )
          {
            if (lMPP.KlPrice.VidForm <> 0)
              lMPP._LOOP Prices where (( pMC      == Prices.cThing
                                     AND pKlPrice == Prices.cKlPrice
                                     AND pParty   == Prices.cParty ))
                {
                  pPrice := lMPP.Prices.nRec;
                  wCount++;

                  if (lMPP.Prices.cOtpEd = SpStep.cOtpEd)
                    {
                      pOtpPrice := lMPP.Prices.nRec;
                      wOtpCount++;
                    }
                }
            else
              lMPP._LOOP Prices where (( pMC      == Prices.cThing
                                     AND pKlPrice == Prices.cKlPrice ))
                {
                  pPrice := lMPP.Prices.nRec;
                  wCount++;

                  if (lMPP.Prices.cOtpEd = SpStep.cOtpEd)
                    {
                      pOtpPrice := lMPP.Prices.nRec;
                      wOtpCount++;
                    }
                }
          }
    }
  else
    lMPP._LOOP KlPrice where (( pGrPrice == KlPrice.cGrPrice ))
      if (  ((SpStep.PrMC  = 1) AND (lMPP.KlPrice.Tip = 0))
         OR ((SpStep.PrMC <> 1) AND (lMPP.KlPrice.Tip = 1)) )
        if (lMPP.KlPrice.VidForm <> 0)
          lMPP._LOOP Prices where (( pMC          == Prices.cThing
                                 AND KlPrice.nRec == Prices.cKlPrice
                                 AND pParty       == Prices.cParty ))
            {
              pPrice := lMPP.Prices.nRec;
              wCount++;

              if (lMPP.Prices.cOtpEd = SpStep.cOtpEd)
                {
                  pOtpPrice := lMPP.Prices.nRec;
                  wOtpCount++;
                }
            }
        else
          lMPP._LOOP Prices where (( pMC          == Prices.cThing
                                 AND KlPrice.nRec == Prices.cKlPrice ))
            {
              pPrice := lMPP.Prices.nRec;
              wCount++;

              if (lMPP.Prices.cOtpEd = SpStep.cOtpEd)
                {
                  pOtpPrice := lMPP.Prices.nRec;
                  wOtpCount++;
                }
            }

  if ( (wCount > 1) AND (wOtpCount = 1) )
    {
      wCount := wOtpCount;
      pPrice := pOtpPrice;
    }

  var sErr : string;

  if (wCount <> 1)
    sErr :=   'ДО №' + BaseDoc.NoDoc + ' от ' + DateToStr(BaseDoc.dDoc, 'YY/MM/YYYY')
            + ' Поз. № ' + String(SpStep.Npp) + '  "' + if(SpStep.PrMC = 1, KatMC.Name, KatUSl.Name) + '"  ';

  case wCount of
    1 : if ( lMPP.GetFirst FastFirstRow Prices where (( pPrice == Prices.nRec )) = tsOk ) {};
    0 :
      {
        if ( (Par2 AND 1) = 0 )
          {
            if bShowProtocol
              ProtMod.Write(sErr + 'не найдена в прайс-листах. Цена не изменена.');
          }
        else
          {
            update current SpStep set SpStep.Price := 0;

            if bShowProtocol
              ProtMod.Write(sErr + 'не найдена в прайс-листах. Цена обнулена.');
          }
      }
  else
    {
      if ( (Par2 AND 2) = 0 )
        {
          if bShowProtocol
            ProtMod.Write(sErr + 'повторяется в прайс-листах несколько раз. Цена не изменена.');
        }
      else
        {
          update current SpStep set SpStep.Price := 0;

          if bShowProtocol
            ProtMod.Write(sErr + 'повторяется в прайс-листах несколько раз. Цена обнулена.');
        }
    }
  end;

  GetPriceForMod := wCount = 1;
}

//******************************************************************************
