//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 7.12 - логистика
// процедуры отчета "Исполняемые ДО по периодам"
//
//********************************************************************************

#include mathfunc.vpp
#include deblist.re1
#include deblist.re2
#include deblist.re3

//******************************************************************************

Procedure PutEventByIdFC(wEvent : word; wID : word);
{
  case (wID) of
  //-----------------------------------------------
     1:
       frmDebList.PutEventById(wEvent, fcJ000);
  //-----------------------------------------------
     2:
       frmDebList.PutEventById(wEvent, fcJ001);
  //-----------------------------------------------
     3:
       frmDebList.PutEventById(wEvent, fcJ002);
  //-----------------------------------------------
     4:
       frmDebList.PutEventById(wEvent, fcJ003);
  //-----------------------------------------------
     5:
       frmDebList.PutEventById(wEvent, fcJ009);
  //-----------------------------------------------
     7:
       frmDebList.PutEventById(wEvent, fcJ300);
  //-----------------------------------------------
     8:
       frmDebList.PutEventById(wEvent, fcJ301);
  //-----------------------------------------------
     9:
       frmDebList.PutEventById(wEvent, fcJ302);
  //-----------------------------------------------
    10:
       frmDebList.PutEventById(wEvent, fcJ303);
  //-----------------------------------------------
    11:
       frmDebList.PutEventById(wEvent, fcJ309);
  //-----------------------------------------------
    14:
       frmDebList.PutEventById(wEvent, fcJ500);
  //-----------------------------------------------
    15:
       frmDebList.PutEventById(wEvent, fcJ501);
  //-----------------------------------------------
    16:
       frmDebList.PutEventById(wEvent, fcJ502);
  //-----------------------------------------------
    17:
       frmDebList.PutEventById(wEvent, fcJ503);
  //-----------------------------------------------
    18:
       frmDebList.PutEventById(wEvent, fcJ509);
  //-----------------------------------------------
    19:
       frmDebList.PutEventById(wEvent, fcJ510);
  //-----------------------------------------------
    21:
       frmDebList.PutEventById(wEvent, fcJ511);
  //-----------------------------------------------
    20:
       frmDebList.PutEventById(wEvent, fcJ519);
  //-----------------------------------------------
    22:
       frmDebList.PutEventById(wEvent, fcJ599);
  //-----------------------------------------------
    23:
       frmDebList.PutEventById(wEvent, fcJ700);
  //-----------------------------------------------
    24:
       frmDebList.PutEventById(wEvent, fcJ701);
  //-----------------------------------------------
    25:
       frmDebList.PutEventById(wEvent, fcJ702);
  //-----------------------------------------------
    26:
       frmDebList.PutEventById(wEvent, fcJ703);
  //-----------------------------------------------
    27:
       frmDebList.PutEventById(wEvent, fcJ709);
  //-----------------------------------------------
    28:
       frmDebList.PutEventById(wEvent, fcJ710);
  //-----------------------------------------------
    29:
       frmDebList.PutEventById(wEvent, fcJ711);
  //-----------------------------------------------
    30:
       frmDebList.PutEventById(wEvent, fcJ719);
  //-----------------------------------------------
    31:
       frmDebList.PutEventById(wEvent, fcJ720);
  //-----------------------------------------------
    32:
       frmDebList.PutEventById(wEvent, fcJ721);
  //-----------------------------------------------
    33:
       frmDebList.PutEventById(wEvent, fcJ799);
  //-----------------------------------------------
    34:
       frmDebList.PutEventById(wEvent, fcJ900);
  //-----------------------------------------------
    35:
       frmDebList.PutEventById(wEvent, fcJ901);
  //-----------------------------------------------
    36:
       frmDebList.PutEventById(wEvent, fcJ902);
  //-----------------------------------------------
    37:
       frmDebList.PutEventById(wEvent, fcJ903);
  //-----------------------------------------------
    38:
       frmDebList.PutEventById(wEvent, fcJ909);
  //-----------------------------------------------
    39:
       frmDebList.PutEventById(wEvent, fcJ910);
  //-----------------------------------------------
    40:
       frmDebList.PutEventById(wEvent, fcJ911);
  //-----------------------------------------------
    41:
       frmDebList.PutEventById(wEvent, fcJ919);
  //-----------------------------------------------
    42:
       frmDebList.PutEventById(wEvent, fcJ920);
  //-----------------------------------------------
    43:
       frmDebList.PutEventById(wEvent, fcJ921);
  //-----------------------------------------------
    44:
       frmDebList.PutEventById(wEvent, fcJ922);
  //-----------------------------------------------
    45:
       frmDebList.PutEventById(wEvent, fcJ999);
  //-----------------------------------------------
  end;
}

//******************************************************************************

Procedure CreateTmpText;
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Создаются периоды...'#13, 1);

  _LOOP Dog
    {
      if ( (not NextVisual) OR badprint )
        {
          badprint := TRUE;
          Break;
        }
      else
        {
          TblSfDate(TblPeriods, fdPer1, Dog.kd);
          TblSfDate(TblPeriods, fdPer2, Dog.kCurseDate);

          TblSfString( TblPeriods
                     , fName1
                     , if( Longint(Dog.kd) = 0
                         , ''
                         , 'с ' + DateToStr(Dog.kd, 'DD/MM/YYYY')
                         )
                     );

          TblSfString( TblPeriods
                     , fName2
                     , if( Dog.kCurseDate > Date(1, 1, 30000)
                         , ''
                         , 'по ' + DateToStr(Dog.kCurseDate, 'DD/MM/YYYY')
                         )

                     );

          TblInsertCurrent(TblPeriods);
        }
    }

  StopVisual('', 0);
}

//******************************************************************************

Procedure CreateTmpFR;
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Создаются периоды...'#13, 1);

  _LOOP Dog
    {
      if ( (not NextVisual) OR badprint )
        {
          badprint := TRUE;
          Break;
        }
      else
        {
          TblPeriods.fdPer1 := Dog.kd;
          TblPeriods.fdPer2 := Dog.kCurseDate;
          TblPeriods.fName1 := if( Longint(Dog.kd) = 0, '', 'с ' + DateToStr(Dog.kd, 'DD/MM/YYYY'));
          TblPeriods.fName2 := if( Dog.kCurseDate > Date(1, 1, 30000)
                                   , ''
                                   , 'по ' + DateToStr(Dog.kCurseDate, 'DD/MM/YYYY')
                                  );

          insert current TblPeriods;
        }
    }

  StopVisual('', 0);
}

//******************************************************************************

Procedure CreateTmp1;
{
  if (TypeRep = cw_FR)
    CreateTmpFR;

  if (TypeRep = cw_Text)
    CreateTmpText;
}

//******************************************************************************

Procedure CalcSaldoDogText;
Var
  TMPd3z
, TMPd4z
            : double;

  fFrom1
, fto1
, fFrom2
, fto2
            : longint;
{
  TMPd3z := d3z;
  TMPd4z := d4z;

  fFrom1 := fdp3z;
  fto1   := fdp3z;
  fFrom2 := fdp4z;
  fto2   := fdp4z;

  if ( TblGetLast(TblPeriods) )
    do
      {
        if ( (not NextVisual) OR badprint )
          {
            badprint := TRUE;
            Break;
          }
        else
          {
            if ( Znak(TMPd3z) = 0 )
              {
                TblSfDouble(TblPeriods, fTo1, 0.0);
                TMPd3z := 0;
              }
            else
              if ( Znak(TblGfDouble(TblPeriods, fFrom1)) <> Znak(TMPd3z) )
                TblSfDouble(TblPeriods, fTo1, 0.0);
              else
                if ( Abs(TblGfDouble(TblPeriods, fFrom1)) > Abs(TMPd3z) )
                  {
                    TblSfDouble(TblPeriods, fTo1, TMPd3z);
                    TMPd3z := 0;
                  }
                else
                  TMPd3z := TMPd3z - TblGfDouble(TblPeriods, fFrom1);

            if ( Znak(TMPd4z) = 0 )
              {
                TblSfDouble(TblPeriods, fTo2, 0.0);
                TMPd4z := 0;
              }
            else
              if ( Znak(TblGfDouble(TblPeriods, fFrom2)) <> Znak(TMPd4z) )
                TblSfDouble(TblPeriods, fTo2, 0.0)
              else
                if ( Abs(TblGfDouble(TblPeriods, fFrom2)) > Abs(TMPd4z) )
                  {
                    TblSfDouble(TblPeriods, fTo2, TMPd4z);
                    TMPd4z := 0;
                  }
                else
                  TMPd4z := TMPd4z - TblGfDouble(TblPeriods, fFrom2);

            TblSfDouble(TblPeriods, fdp31,  dp31);
            TblSfDouble(TblPeriods, fdp32,  dp32);
            TblSfDouble(TblPeriods, fdp33,  dp33);
            TblSfDouble(TblPeriods, fdp34,  dp34);
            TblSfDouble(TblPeriods, fdp31o, Dog2Ot(dp31));
            TblSfDouble(TblPeriods, fdp32o, Dog2Ot(dp32));
            TblSfDouble(TblPeriods, fdp33o, Dog2Ot(dp33));
            TblSfDouble(TblPeriods, fdp34o, Dog2Ot(dp34));
            TblSfDouble(TblPeriods, fdp3zo, Dog2Ot(dp3z));
            TblSfDouble(TblPeriods, fdp41,  dp41);
            TblSfDouble(TblPeriods, fdp42,  dp42);
            TblSfDouble(TblPeriods, fdp43,  dp43);
            TblSfDouble(TblPeriods, fdp44,  dp44);
            TblSfDouble(TblPeriods, fdp41o, Dog2Ot(dp41));
            TblSfDouble(TblPeriods, fdp42o, Dog2Ot(dp42));
            TblSfDouble(TblPeriods, fdp43o, Dog2Ot(dp43));
            TblSfDouble(TblPeriods, fdp44o, Dog2Ot(dp44));
            TblSfDouble(TblPeriods, fdp4zo, Dog2Ot(dp4z));

            TblUpdateCurrent(TblPeriods);
          }
      }
    While ( TblGetPrev(TblPeriods) )
}

//******************************************************************************

Procedure CalcSaldoDogFR;
Var
  TMPd3z
, TMPd4z
            : double;
{
  TMPd3z := d3z;
  TMPd4z := d4z;

  if ( GetLast TblPeriods = tsOk)
    do
      {
        if ( GetFirst TblStepDocPer where ((StepDoc.NRec    == TblStepDocPer.cStepDoc
                                        and TblPeriods.NRec == TblStepDocPer.cPeriods)) <> tsOk )
          Exit;

        if ( (not NextVisual) OR badprint )
          {
            badprint := TRUE;
            Break;
          }
        else
          {
            if ( Znak(TMPd3z) = 0 )
              {
                TblStepDocPer.fdp3z := 0.0;
                TMPd3z := 0;
              }
            else
              if ( Znak(TblStepDocPer.fdp3z) <> Znak(TMPd3z) )
                TblStepDocPer.fdp3z := 0.0;
              else
                if ( Abs(TblStepDocPer.fdp3z) > Abs(TMPd3z) )
                  {
                    TblStepDocPer.fdp3z := TMPd3z;
                    TMPd3z := 0;
                  }
                else
                  TMPd3z := TMPd3z - TblStepDocPer.fdp3z;

            if ( Znak(TMPd4z) = 0 )
              {
                TblStepDocPer.fdp4z := 0.0;
                TMPd4z := 0;
              }
            else
              if ( Znak(TblStepDocPer.fdp4z) <> Znak(TMPd4z) )
                TblStepDocPer.fdp4z := 0.0
              else
                if ( Abs(TblStepDocPer.fdp4z) > Abs(TMPd4z) )
                  {
                    TblStepDocPer.fdp4z := TMPd4z;
                    TMPd4z := 0;
                  }
                else
                  TMPd4z := TMPd4z - TblStepDocPer.fdp4z;

            TblStepDocPer.fdp31  := dp31;
            TblStepDocPer.fdp32  := dp32;
            TblStepDocPer.fdp33  := dp33;
            TblStepDocPer.fdp34  := dp34;
            TblStepDocPer.fdp31o := Dog2Ot(dp31);
            TblStepDocPer.fdp32o := Dog2Ot(dp32);
            TblStepDocPer.fdp33o := Dog2Ot(dp33);
            TblStepDocPer.fdp34o := Dog2Ot(dp34);
            TblStepDocPer.fdp3zo := Dog2Ot(TblStepDocPer.fdp3z);
            TblStepDocPer.fdp41  := dp41;
            TblStepDocPer.fdp42  := dp42;
            TblStepDocPer.fdp43  := dp43;
            TblStepDocPer.fdp44  := dp44;
            TblStepDocPer.fdp41o := Dog2Ot(dp41);
            TblStepDocPer.fdp42o := Dog2Ot(dp42);
            TblStepDocPer.fdp43o := Dog2Ot(dp43);
            TblStepDocPer.fdp44o := Dog2Ot(dp44);
            TblStepDocPer.fdp4zo := Dog2Ot(TblStepDocPer.fdp4z);

            update current TblStepDocPer;
          }
      }
    While ( GetPrev TblPeriods = tsOk )
}

//******************************************************************************

Procedure CalcSaldoDog;
{
  if (TypeRep = cw_FR)
    CalcSaldoDogFR;

  if (TypeRep = cw_Text)
    CalcSaldoDogText;
}

//******************************************************************************

Procedure CalcSaldoText( Sum1, Sum2 : double; fFrom1, fTo1, fFrom2, fTo2 : longint);
Var
  TMPd3z
, TMPd4z
         : double;
{
  TMPd3z := Sum1;
  TMPd4z := Sum2;

  if ( TblGetLast(TblPeriods) )
    do
      {
        if ( (not NextVisual) OR badprint )
          {
            badprint := TRUE;
            Break;
          }
        else
          {
            if ( Znak(TMPd3z) = 0 )
              {
                TblSfDouble(TblPeriods, fTo1, 0.0);
                TMPd3z := 0;
              }
            else
              if ( Znak(TblGfDouble(TblPeriods, fFrom1)) <> Znak(TMPd3z) )
                TblSfDouble(TblPeriods, fTo1, 0.0);
              else
                if ( Abs(TblGfDouble(TblPeriods, fFrom1)) > Abs(TMPd3z) )
                  {
                    TblSfDouble(TblPeriods, fTo1, TMPd3z);
                    TMPd3z := 0;
                  }
                else
                  TMPd3z := TMPd3z - TblGfDouble(TblPeriods, fFrom1);

          if ( Znak(TMPd4z) = 0 )
            {
              TblSfDouble(TblPeriods, fTo2, 0.0);
              TMPd4z := 0;
            }
          else
            if ( Znak(TblGfDouble(TblPeriods, fFrom2)) <> Znak(TMPd4z) )
              TblSfDouble(TblPeriods, fTo2, 0.0);
            else
              if ( Abs(TblGfDouble(TblPeriods, fFrom2)) > Abs(TMPd4z) )
                {
                  TblSfDouble(TblPeriods, fTo2, TMPd4z);
                  TMPd4z := 0;
                }
              else
                TMPd4z := TMPd4z - TblGfDouble(TblPeriods, fFrom2);
          }

        TblUpdateCurrent(TblPeriods);
      }
    While ( TblGetPrev(TblPeriods) )
}

//******************************************************************************

Procedure CalcSaldoorgFR;
Var
  TMPd3z
, TMPd4z : double;
{
  TMPd3z := k3z;
  TMPd4z := k4z;

  if ( GetLast TblPeriods = tsOk )
    do
      {
        if ( GetFirst TblKatOrgPer where ((KatOrg.NRec     == TblKatOrgPer.cKatOrg
                                       and TblPeriods.NRec == TblKatOrgPer.cPeriods)) <> tsOk )
          Exit;

        if ( (not NextVisual) OR badprint )
          {
            badprint := TRUE;
            Break;
          }
        else
          {
            if ( Znak(TMPd3z) = 0 )
              {
                TblKatOrgPer.fkp3zs := 0.0;
                TMPd3z := 0;
              }
            else
              if ( Znak(TblKatOrgPer.fkp3z) <> Znak(TMPd3z) )
                TblKatOrgPer.fkp3zs := 0.0;
              else
                if ( Abs(TblKatOrgPer.fkp3z) > Abs(TMPd3z) )
                  {
                    TblKatOrgPer.fkp3zs := TMPd3z;
                    TMPd3z := 0;
                  }
                else
                  TMPd3z := TMPd3z - TblKatOrgPer.fkp3z;

          if ( Znak(TMPd4z) = 0 )
            {
              TblKatOrgPer.fkp4zs := 0.0;
              TMPd4z := 0;
            }
          else
            if ( Znak(TblKatOrgPer.fkp4z) <> Znak(TMPd4z) )
              TblKatOrgPer.fkp4zs := 0.0;
            else
              if ( Abs(TblKatOrgPer.fkp4z) > Abs(TMPd4z) )
                {
                  TblKatOrgPer.fkp4zs := TMPd4z;
                  TMPd4z := 0;
                }
              else
                TMPd4z := TMPd4z - TblKatOrgPer.fkp4z;
          }

        update current TblKatOrgPer;
      }
    While ( GetPrev TblPeriods = tsOk )
}

//******************************************************************************

Procedure CalcSaldoAllFR;
Var
  TMPd3z
, TMPd4z
         : double;
{
  TMPd3z := a3z;
  TMPd4z := a4z;

  if ( GetLast TblPeriods = tsOk )
    do
      {
        if ( GetFirst TblAllPer where ((TblPeriods.NRec == TblAllPer.cPeriods)) <> tsOk )
          Exit;

        if ( (not NextVisual) OR badprint )
          {
            badprint := TRUE;
            Break;
          }
        else
          {
            if ( Znak(TMPd3z) = 0 )
              {
                TblAllPer.fap3zss := 0.0;
                TMPd3z := 0;
              }
            else
              if ( Znak(TblAllPer.fap3zs) <> Znak(TMPd3z) )
                TblAllPer.fap3zss := 0.0;
              else
                if ( Abs(TblAllPer.fap3zs) > Abs(TMPd3z) )
                  {
                    TblAllPer.fap3zss := TMPd3z;
                    TMPd3z := 0;
                  }
                else
                  TMPd3z := TMPd3z - TblAllPer.fap3zs;

          if ( Znak(TMPd4z) = 0 )
            {
              TblAllPer.fap4zss := 0.0;
              TMPd4z := 0;
            }
          else
            if ( Znak(TblAllPer.fap4zs) <> Znak(TMPd4z) )
              TblAllPer.fap4zss := 0.0;
            else
              if (Abs(TblAllPer.fap4zs) > Abs(TMPd4z) )
                {
                  TblAllPer.fap4zss := TMPd4z;
                  TMPd4z := 0;
                }
              else
                TMPd4z := TMPd4z - TblAllPer.fap4zs;
          }

        update current TblAllPer;
      }
    While ( GetPrev TblPeriods = tsOk )
}

//******************************************************************************

Procedure CalcSaldoorg;
{
  if (TypeRep = cw_FR)
    CalcSaldoorgFR;

  if (TypeRep = cw_Text)
    CalcSaldoText(k3z, k4z, fkp3z, fkp3zs, fkp4z, fkp4zs);
}

//******************************************************************************

Procedure CalcSaldoAll;
{
  if (TypeRep = cw_FR)
    CalcSaldoAllFR;

  if (TypeRep = cw_Text)
    CalcSaldoText(a3z, a4z, fap3zs, fap3zss, fap4zs, fap4zss);
}

//******************************************************************************

Procedure PrintLinePer( jCC: word);
Var
  i  : word;
{
  For (i := 1; i <= KolPers; i++)
    if ( (not NextVisual) OR badprint )
      {
        badprint := TRUE;
        Break;
      }
    else
      PutEventByIdFC(feDoLoop, jcc);
}

//******************************************************************************

Procedure PrintHead;
{
  frmDebList.write(TblPeriods);

  if ( frmDebList.Error )
    badprint := TRUE;

  frmDebList.write(fdPer1  );
  frmDebList.write(fdPer2  );
  frmDebList.write(fdp31   );  // 041
  frmDebList.write(fdp32   );  // 042
  frmDebList.write(fdp33   );  // 043
  frmDebList.write(fdp34   );  // 044
  frmDebList.write(fdp3z   );  // 045
  frmDebList.write(fdp31o  );  // 046
  frmDebList.write(fdp32o  );  // 047
  frmDebList.write(fdp33o  );  // 048
  frmDebList.write(fdp34o  );  // 049
  frmDebList.write(fdp3zo  );  // 040
  frmDebList.write(fdp41   );  // 051
  frmDebList.write(fdp42   );  // 052
  frmDebList.write(fdp43   );  // 053
  frmDebList.write(fdp44   );  // 054
  frmDebList.write(fdp4z   );  // 055
  frmDebList.write(fdp41o  );  // 056
  frmDebList.write(fdp42o  );  // 057
  frmDebList.write(fdp43o  );  // 058
  frmDebList.write(fdp44o  );  // 059
  frmDebList.write(fdp4zo  );  // 050

  frmDebList.write(fkp31   );
  frmDebList.write(fkp32   );
  frmDebList.write(fkp33   );
  frmDebList.write(fkp34   );
  frmDebList.write(fkp3z   );
  frmDebList.write(fkp3zs  );
  frmDebList.write(fkp41   );
  frmDebList.write(fkp42   );
  frmDebList.write(fkp43   );
  frmDebList.write(fkp44   );
  frmDebList.write(fkp4z   );
  frmDebList.write(fkp4zs  );
  frmDebList.write(fap31   );
  frmDebList.write(fap32   );
  frmDebList.write(fap33   );
  frmDebList.write(fap34   );
  frmDebList.write(fap3z   );
  frmDebList.write(fap3zs  );
  frmDebList.write(fap3zss );
  frmDebList.write(fap41   );
  frmDebList.write(fap42   );
  frmDebList.write(fap43   );
  frmDebList.write(fap44   );
  frmDebList.write(fap4z   );
  frmDebList.write(fap4zs  );
  frmDebList.write(fap4zss );
  frmDebList.write(fName1  );
  frmDebList.write(fName2  );

  if ( frmDebList.Error )
    {
      badprint   := TRUE;
      ErrorPrint := FALSE;
    }

  if ( cValOt = 0 )
    {
      frmDebList.write(oValFunc.GetValSymbol(0));
      frmDebList.write(sGetTune('NDE.NameRUBLAH'));
    }
  else
    {
      Modifier GetFirst KlVal where (( cValOt == KlVal.NRec ));
      frmDebList.write(KlVal.SIMVOLV);
      frmDebList.write(KlVal.DOLLARAH);
    }

  frmDebList.write(OtDate);
  frmDebList.write(BOtDate);
  frmDebList.write(LOtDate);
  frmDebList.write(KolPers);
  frmDebList.write(Prod);
  frmDebList.write(Zakup);
  frmDebList.write(AllKontr);

  PrintLinePer(a1fcj000);
  PrintLinePer(a1fcj001);
  PrintLinePer(a1fcj002);
  PrintLinePer(a1fcj003);
  PrintLinePer(a1fcj009);
}

//******************************************************************************

#declare setValueTxtFr(value, field)
{
  case TypeRep of
    cw_Text  : frmDebList.write(#value);
    cw_FR    : #field := #value;
  end;
}
#end

//******************************************************************************

Procedure PrintKatorg;
{
  if (TypeRep = cw_FR)
    ClearBuffer(#FR_KatOrg);

  #setValueTxtFr(Katorg.Name, FR_Katorg.Name); //наим.организации или ФИО физ.лица

  if (TypeRep = cw_FR)
    {
      FR_KatOrg.cKatOrg := KatOrg.NRec;

      insert current FR_KatOrg;
    }

  if (TypeRep = cw_Text)
    {
      PrintLinePer(a1fcj300);
      PrintLinePer(a1fcj301);
      PrintLinePer(a1fcj302);
      PrintLinePer(a1fcj303);
      PrintLinePer(a1fcj309);
    }
}

//******************************************************************************

Procedure PrintBaseDoc;
{
  var
    sVidDoc,
    sTipMoney : String;

  if (TypeRep = cw_FR)
    ClearBuffer(#FR_BaseDoc);

  #setValueTxtFr(PrintNumber(BaseDoc.Descr, BaseDoc.NoDoc), FR_BaseDoc.NoDoc); //номер документа с дескриптором

  #setValueTxtFr(Dogovor.NoDoc, FR_BaseDoc.NoDog);
  #setValueTxtFr(Dogovor.dDoc, FR_BaseDoc.dDog);

  #setValueTxtFr(BaseDoc.VIDDOC, FR_BaseDoc.VidDoc); //вид док-та: договор, счет, счет-фактура

  #setValueTxtFr(BaseDoc.DopProc, FR_BaseDoc.DopProc); //доп.процент к курсу для вал-руб док-осн

  #setValueTxtFr(BaseDoc.TipMoney, FR_BaseDoc.TipMoney); //тип документа по отношению к валюте

  #setValueTxtFr(BaseDoc.ValCurse, FR_BaseDoc.ValCurse);

  if (TypeRep = cw_FR)
    {
      FR_BaseDoc.cBaseDoc := BaseDoc.NRec;
      FR_BaseDoc.cKatOrg := KatOrg.NRec;

      insert current FR_BaseDoc;
    }
}

//******************************************************************************

Procedure PrintStepDoc;
{
  if (TypeRep = cw_FR)
    ClearBuffer(#FR_StepDoc);

  if ( ValutaDog = 0 )
    {
      #setValueTxtFr(oValFunc.GetValSymbol(0), FR_StepDoc.valDog);
      #setValueTxtFr(sGetTune('NDE.NameRUBLAH'), FR_StepDoc.vValDog);
    }
  else
    {
      cVTmp := ValutaDog;

      Modifier GetFirst KlVal where (( cVTMP == KlVal.NRec ));

      #setValueTxtFr(KlVal.SIMVOLV, FR_StepDoc.valDog);
      #setValueTxtFr(KlVal.DOLLARAH, FR_StepDoc.vValDog);
    }

  #setValueTxtFr(StepDoc.Name, FR_StepDoc.Name);    //наименование
  #setValueTxtFr(StepDoc.dStart, FR_StepDoc.dStart);  //дата начала этапа
  #setValueTxtFr(DOtg, FR_StepDoc.dOtg);
  #setValueTxtFr(DOpl, FR_StepDoc.dOpl);

  if (TypeRep = cw_FR)
    {
      FR_StepDoc.cStepDoc := StepDoc.NRec;
      FR_StepDoc.cBaseDoc := BaseDoc.NRec;

      insert current FR_StepDoc;
    }

};

//******************************************************************************

Procedure PrintDog;
{
  if (TypeRep = cw_FR)
    if ( GetFirst FR_StepDoc where ((StepDoc.NRec == FR_StepDoc.cStepDoc)) <> tsOk )
      Exit;

  #setValueTxtFr(d01, FR_StepDoc.fd01d);
  #setValueTxtFr(d11, FR_StepDoc.fd11d);
  #setValueTxtFr(d12, FR_StepDoc.fd12d);
  #setValueTxtFr(d13, FR_StepDoc.fd13d);
  #setValueTxtFr(d14, FR_StepDoc.fd14d);
  #setValueTxtFr(d15, FR_StepDoc.fd15d);
  #setValueTxtFr(d16, FR_StepDoc.fd16d);
  #setValueTxtFr(d17, FR_StepDoc.fd17d);
  #setValueTxtFr(d18, FR_StepDoc.fd18d);
  #setValueTxtFr(d19, FR_StepDoc.fd19d);
  #setValueTxtFr(d1a, FR_StepDoc.fd1ad);
  #setValueTxtFr(d1b, FR_StepDoc.fd1bd);
  #setValueTxtFr(d1c, FR_StepDoc.fd1cd);
  #setValueTxtFr(d1z, FR_StepDoc.fd1zd);

  #setValueTxtFr(d21, FR_StepDoc.fd21d);
  #setValueTxtFr(d22, FR_StepDoc.fd22d);
  #setValueTxtFr(d23, FR_StepDoc.fd23d);
  #setValueTxtFr(d24, FR_StepDoc.fd24d);
  #setValueTxtFr(d25, FR_StepDoc.fd25d);
  #setValueTxtFr(d26, FR_StepDoc.fd26d);
  #setValueTxtFr(d2z, FR_StepDoc.fd2zd);

  #setValueTxtFr(d31, FR_StepDoc.fd31d);
  #setValueTxtFr(d32, FR_StepDoc.fd32d);
  #setValueTxtFr(d33, FR_StepDoc.fd33d);
  #setValueTxtFr(d34, FR_StepDoc.fd34d);
  #setValueTxtFr(d35, FR_StepDoc.fd35d);
  #setValueTxtFr(d36, FR_StepDoc.fd36d);
  #setValueTxtFr(d3z, FR_StepDoc.fd3zd);

  #setValueTxtFr(d41, FR_StepDoc.fd41d);
  #setValueTxtFr(d42, FR_StepDoc.fd42d);
  #setValueTxtFr(d43, FR_StepDoc.fd43d);
  #setValueTxtFr(d44, FR_StepDoc.fd44d);
  #setValueTxtFr(d45, FR_StepDoc.fd45d);
  #setValueTxtFr(d46, FR_StepDoc.fd46d);
  #setValueTxtFr(d4z, FR_StepDoc.fd4zd);

  #setValueTxtFr(Dog2Ot(d01), FR_StepDoc.fd01);
  #setValueTxtFr(Dog2Ot(d11), FR_StepDoc.fd11);
  #setValueTxtFr(Dog2Ot(d12), FR_StepDoc.fd12);
  #setValueTxtFr(Dog2Ot(d13), FR_StepDoc.fd13);
  #setValueTxtFr(Dog2Ot(d14), FR_StepDoc.fd14);
  #setValueTxtFr(Dog2Ot(d15), FR_StepDoc.fd15);
  #setValueTxtFr(Dog2Ot(d16), FR_StepDoc.fd16);
  #setValueTxtFr(Dog2Ot(d17), FR_StepDoc.fd17);
  #setValueTxtFr(Dog2Ot(d18), FR_StepDoc.fd18);
  #setValueTxtFr(Dog2Ot(d19), FR_StepDoc.fd19);
  #setValueTxtFr(Dog2Ot(d1a), FR_StepDoc.fd1a);
  #setValueTxtFr(Dog2Ot(d1b), FR_StepDoc.fd1b);
  #setValueTxtFr(Dog2Ot(d1c), FR_StepDoc.fd1c);
  #setValueTxtFr(Dog2Ot(d1z), FR_StepDoc.fd1z);

  #setValueTxtFr(Dog2Ot(d21), FR_StepDoc.fd21);
  #setValueTxtFr(Dog2Ot(d22), FR_StepDoc.fd22);
  #setValueTxtFr(Dog2Ot(d23), FR_StepDoc.fd23);
  #setValueTxtFr(Dog2Ot(d24), FR_StepDoc.fd24);
  #setValueTxtFr(Dog2Ot(d25), FR_StepDoc.fd25);
  #setValueTxtFr(Dog2Ot(d26), FR_StepDoc.fd26);
  #setValueTxtFr(Dog2Ot(d2z), FR_StepDoc.fd2z);

  #setValueTxtFr(Dog2Ot(d31), FR_StepDoc.fd31);
  #setValueTxtFr(Dog2Ot(d32), FR_StepDoc.fd32);
  #setValueTxtFr(Dog2Ot(d33), FR_StepDoc.fd33);
  #setValueTxtFr(Dog2Ot(d34), FR_StepDoc.fd34);
  #setValueTxtFr(Dog2Ot(d35), FR_StepDoc.fd35);
  #setValueTxtFr(Dog2Ot(d36), FR_StepDoc.fd36);
  #setValueTxtFr(Dog2Ot(d3z), FR_StepDoc.fd3z);

  #setValueTxtFr(Dog2Ot(d41), FR_StepDoc.fd41);
  #setValueTxtFr(Dog2Ot(d42), FR_StepDoc.fd42);
  #setValueTxtFr(Dog2Ot(d43), FR_StepDoc.fd43);
  #setValueTxtFr(Dog2Ot(d44), FR_StepDoc.fd44);
  #setValueTxtFr(Dog2Ot(d45), FR_StepDoc.fd45);
  #setValueTxtFr(Dog2Ot(d46), FR_StepDoc.fd46);
  #setValueTxtFr(Dog2Ot(d4z), FR_StepDoc.fd4z);

  if (TypeRep = cw_FR)
    update current FR_StepDoc;

  if (TypeRep = cw_Text)
    {
      PrintLinePer(a1fcj500);

      PrintLinePer(a1fcj501);
      PrintLinePer(a1fcj502);
      PrintLinePer(a1fcj503);
      PrintLinePer(a1fcj509);

      PrintLinePer(a1fcj510);

      PrintLinePer(a1fcj519);

      PrintLinePer(a1fcj511);

      PrintLinePer(a1fcj599);
    }

  nPrinted := nPrinted + 1;

  SetVisualHeader( '        ФОРМИРУЕТСЯ ОТЧЕТ...'#13
                 + '  обработано ДО: '
                 + String(nPrinted)
                 + ''#13
                 + '          контрагентов: '
                 + String(nPrintedK)
                 + '/'
                 + String(nkontr)
                 + ' '
                 );
}

//******************************************************************************

Procedure Printorg;
{
  if (TypeRep = cw_FR)
    if ( GetFirst FR_KatOrg where ((KatOrg.NRec == FR_KatOrg.cKatOrg)) <> tsOk )
      Exit;

  #setValueTxtFr(k01,  FR_KatOrg.fk01);
  #setValueTxtFr(k02,  FR_KatOrg.fk02);
  #setValueTxtFr(k11,  FR_KatOrg.fk11);
  #setValueTxtFr(k12,  FR_KatOrg.fk12);
  #setValueTxtFr(k13,  FR_KatOrg.fk13);
  #setValueTxtFr(k14,  FR_KatOrg.fk14);
  #setValueTxtFr(k15,  FR_KatOrg.fk15);
  #setValueTxtFr(k16,  FR_KatOrg.fk16);
  #setValueTxtFr(k17,  FR_KatOrg.fk17);
  #setValueTxtFr(k18,  FR_KatOrg.fk18);
  #setValueTxtFr(k19,  FR_KatOrg.fk19);
  #setValueTxtFr(k1a,  FR_KatOrg.fk1a);
  #setValueTxtFr(k1b,  FR_KatOrg.fk1b);
  #setValueTxtFr(k1c,  FR_KatOrg.fk1c);
  #setValueTxtFr(k1zP, FR_KatOrg.fk1zP);
  #setValueTxtFr(k1zZ, FR_KatOrg.fk1zZ);

  #setValueTxtFr(k21,  FR_KatOrg.fk21);
  #setValueTxtFr(k22,  FR_KatOrg.fk22);
  #setValueTxtFr(k23,  FR_KatOrg.fk23);
  #setValueTxtFr(k24,  FR_KatOrg.fk24);
  #setValueTxtFr(k25,  FR_KatOrg.fk25);
  #setValueTxtFr(k26,  FR_KatOrg.fk26);
  #setValueTxtFr(k2z,  FR_KatOrg.fk2z);

  #setValueTxtFr(k31,  FR_KatOrg.fk31);
  #setValueTxtFr(k32,  FR_KatOrg.fk32);
  #setValueTxtFr(k33,  FR_KatOrg.fk33);
  #setValueTxtFr(k34,  FR_KatOrg.fk34);
  #setValueTxtFr(k35,  FR_KatOrg.fk35);
  #setValueTxtFr(k36,  FR_KatOrg.fk36);
  #setValueTxtFr(k3z,  FR_KatOrg.fk3z);

  #setValueTxtFr(k41,  FR_KatOrg.fk41);
  #setValueTxtFr(k42,  FR_KatOrg.fk42);
  #setValueTxtFr(k43,  FR_KatOrg.fk43);
  #setValueTxtFr(k44,  FR_KatOrg.fk44);
  #setValueTxtFr(k45,  FR_KatOrg.fk45);
  #setValueTxtFr(k46,  FR_KatOrg.fk46);
  #setValueTxtFr(k4z,  FR_KatOrg.fk4z);

  if (TypeRep = cw_FR)
    update current FR_KatOrg;


  if (TypeRep = cw_Text)
    {
      PrintLinePer(a1fcj700);

      PrintLinePer(a1fcj701);
      PrintLinePer(a1fcj702);
      PrintLinePer(a1fcj703);

      PrintLinePer(a1fcj709);

      PrintLinePer(a1fcj710);
      PrintLinePer(a1fcj711);

      PrintLinePer(a1fcj719);

      PrintLinePer(a1fcj720);
      PrintLinePer(a1fcj721);
      PrintLinePer(a1fcj799);
    }
}

//******************************************************************************

Procedure PrintAll;
{
  if (TypeRep = cw_Text)
    {
      frmDebList.write(a01);
      frmDebList.write(a02);
      frmDebList.write(a11);
      frmDebList.write(a12);
      frmDebList.write(a13);
      frmDebList.write(a14);
      frmDebList.write(a15);
      frmDebList.write(a16);
      frmDebList.write(a17);
      frmDebList.write(a18);
      frmDebList.write(a19);
      frmDebList.write(a1a);
      frmDebList.write(a1b);
      frmDebList.write(a1c);
      frmDebList.write(a1zP);
      frmDebList.write(a1zZ);

      frmDebList.write(a21);
      frmDebList.write(a22);
      frmDebList.write(a23);
      frmDebList.write(a24);
      frmDebList.write(a25);
      frmDebList.write(a26);
      frmDebList.write(a2z);

      frmDebList.write(a31);
      frmDebList.write(a32);
      frmDebList.write(a33);
      frmDebList.write(a34);
      frmDebList.write(a35);
      frmDebList.write(a36);
      frmDebList.write(a3z);

      frmDebList.write(a41);
      frmDebList.write(a42);
      frmDebList.write(a43);
      frmDebList.write(a44);
      frmDebList.write(a45);
      frmDebList.write(a46);
      frmDebList.write(a4z);
    }

  CalcSaldoAll;

  if (TypeRep = cw_FR)
    if ( GetFirst TblPeriods = tsOk )
      do
        {
          if ( GetFirst TblAllPer where ((TblPeriods.NRec == TblAllPer.cPeriods)) <> tsOk )
            Exit;

          if ( GetLast TblKatOrgPer <> tsOk)
            Exit;

          if ( GetFirst TblStepDocPer where ((TblKatOrgPer.cKatOrg == TblStepDocPer.cKatOrg
                                          and TblPeriods.NRec      == TblStepDocPer.cPeriods)) <> tsOk )
            Exit;

          TblStepDocPer.fap31   := TblAllPer.fap31;
          TblStepDocPer.fap32   := TblAllPer.fap32;
          TblStepDocPer.fap33   := TblAllPer.fap33;
          TblStepDocPer.fap34   := TblAllPer.fap34;
          TblStepDocPer.fap3z   := TblAllPer.fap3z;
          TblStepDocPer.fap3zs  := TblAllPer.fap3zs;
          TblStepDocPer.fap3zss := TblAllPer.fap3zss;
          TblStepDocPer.fap41   := TblAllPer.fap41;
          TblStepDocPer.fap42   := TblAllPer.fap42;
          TblStepDocPer.fap43   := TblAllPer.fap43;
          TblStepDocPer.fap44   := TblAllPer.fap44;
          TblStepDocPer.fap4z   := TblAllPer.fap4z;
          TblStepDocPer.fap4zs  := TblAllPer.fap4zs;
          TblStepDocPer.fap4zss := TblAllPer.fap4zss;

          update current TblStepDocPer;
        }
      While (GetNext TblPeriods = tsOk )

  if (TypeRep = cw_Text)
    {
      PrintLinePer(a1fcj900);

      PrintLinePer(a1fcj901);
      PrintLinePer(a1fcj902);
      PrintLinePer(a1fcj903);
      PrintLinePer(a1fcj909);

      PrintLinePer(a1fcj910);
      PrintLinePer(a1fcj911);
      PrintLinePer(a1fcj919);

      PrintLinePer(a1fcj920);
      PrintLinePer(a1fcj921);
      PrintLinePer(a1fcj922);
      PrintLinePer(a1fcj999);
    }
}

//******************************************************************************

Procedure DoStepDoc;
{
  if (TypeRep = cw_Text)
    frmDebList.PutEventById(feDoLoop, fcfStepDoc);

  ClearDog;
  PrintStepDoc;

  PushBounds(tbStepDocKatSopr);

  _LOOP KatSopr
    {
      if ( (not NextVisual) OR badprint )
        {
          badprint := TRUE;
          Break;
        }
      else
        NextKatSopr;
    }

  PopBounds(tbStepDocKatSopr);
  PushBounds(tbStepDocBaseFin);

  _LOOP BaseFin
    {
      if ( (not NextVisual) OR badprint OR ( if(TypeRep = cw_Text, frmDebList.Error, False) ) )
        {
          badprint := TRUE;
          Break;
        }
      else
        NextBaseFin;
    }

  PopBounds(tbStepDocBaseFin);

  CalcSaldoDog;
  NextStepDoc;
  PrintDog;
}

//******************************************************************************

Procedure DoBaseDoc;
{
  if (TypeRep = cw_Text)
    frmDebList.PutEventById(feDoLoop, fcfBaseDoc);

  PushBounds(tbBaseDocDogovor);

  PrintBaseDoc;

  PopBounds(tbBaseDocDogovor);

  PushBounds(tbBaseDocStepDoc);

  _LOOP StepDoc
    {
      if ( (not NextVisual) OR badprint OR ( if(TypeRep = cw_Text, frmDebList.Error, False) ) )
        {
          badprint := TRUE;
          Break;
        }
      else
        DoStepDoc
    }

  PopBounds(tbBaseDocStepDoc);
};


//******************************************************************************

Procedure DoKatorg;
Var
  IsOkFilter: boolean;
  MarkerDog: TPtr;
{
  MarkerDog := InitMarker('MDogovor', 8, 100, 10);

  nprintedK++;

  SetVisualHeader( '        ФОРМИРУЕТСЯ ОТЧЕТ...'#13
                 + '  обработано ДО: '
                 + String(nPrinted)
                 + ''#13
                 + '          контрагентов: '+String(nPrintedK)
                 + '/'
                 + String(nkontr)
                 + ' '
                 );

  PushBounds(tbKatorgBaseDoc);

  if ( sGetTune('Rep.FiltrDsc') <> '' )
    PushCondition(tcBaseDoc_Desc);

  if ( modifier GetFirst BaseDoc = tsOk )
    {
      if (TypeRep = cw_Text)
        frmDebList.PutEventById(feDoLoop, fcfKatorg);

      PrintKatorg;
      Clearorg;

      _LOOP BaseDoc
        {
          if ( (not NextVisual) OR badprint OR ( if(TypeRep = cw_Text, frmDebList.Error, False) ) )
            {
              badprint := TRUE;
              Break;
            }
          else
            {
              // Фильтр по группе ДО
              if ( (AllKontr AND 2) = 2 )
                {
                  IsOkFilter := FALSE;

                  _LOOP SpGrSchRoot
                    if ( GetFirst PickGrDO where ((  Word(4)               == PickGrDO.wList
                                                 AND SpGrSchRoot.cGroupSch == PickGrDO.cRec
                                                 )) = tsOk )
                      {
                        IsOkFilter := TRUE;
                        Break
                      }

                  if ( NOT IsOkFilter )
                    Continue;
                }

              // Фильтр по договорам
              if ( (AllKontr AND 4) = 4 )
                {
                  if not FoundMarker(MarkerDog, BaseDoc.cDogovor) AND not FoundMarker(MarkerDog, BaseDoc.cAppDogovor)
                    Continue;
                }

              DoBaseDoc;
            }
        }

      CalcSaldoorg;
      NextKatorg;
      Printorg;
    }

  if ( sGetTune('Rep.FiltrDsc') <> '' )
    PopCondition(tcBaseDoc_Desc);

  PopBounds(tbKatorgBaseDoc);

  DoneMarker(MarkerDog, '');
}

//******************************************************************************

Procedure InitReport;
{
  TblPeriods := TblInitNew(KolPers, 5);
  fdPer1  := TblNewField(TblPeriods, ftDate);
  TblEndKey(TblPeriods);
  fdPer2  := TblNewField(TblPeriods, ftDate);

  fdp31   := TblNewField(TblPeriods, ftDouble); // 041
  fdp32   := TblNewField(TblPeriods, ftDouble); // 042
  fdp33   := TblNewField(TblPeriods, ftDouble); // 043
  fdp34   := TblNewField(TblPeriods, ftDouble); // 044
  fdp3z   := TblNewField(TblPeriods, ftDouble); // 045
  fdp31o  := TblNewField(TblPeriods, ftDouble); // 046
  fdp32o  := TblNewField(TblPeriods, ftDouble); // 047
  fdp33o  := TblNewField(TblPeriods, ftDouble); // 048
  fdp34o  := TblNewField(TblPeriods, ftDouble); // 049
  fdp3zo  := TblNewField(TblPeriods, ftDouble); // 040
  fdp41   := TblNewField(TblPeriods, ftDouble); // 051
  fdp42   := TblNewField(TblPeriods, ftDouble); // 052
  fdp43   := TblNewField(TblPeriods, ftDouble); // 053
  fdp44   := TblNewField(TblPeriods, ftDouble); // 054
  fdp4z   := TblNewField(TblPeriods, ftDouble); // 055
  fdp41o  := TblNewField(TblPeriods, ftDouble); // 056
  fdp42o  := TblNewField(TblPeriods, ftDouble); // 057
  fdp43o  := TblNewField(TblPeriods, ftDouble); // 058
  fdp44o  := TblNewField(TblPeriods, ftDouble); // 059
  fdp4zo  := TblNewField(TblPeriods, ftDouble); // 050

  fkp31   := TblNewField(TblPeriods, ftDouble);
  fkp32   := TblNewField(TblPeriods, ftDouble);
  fkp33   := TblNewField(TblPeriods, ftDouble);
  fkp34   := TblNewField(TblPeriods, ftDouble);
  fkp3z   := TblNewField(TblPeriods, ftDouble);
  fkp3zs  := TblNewField(TblPeriods, ftDouble);
  fkp41   := TblNewField(TblPeriods, ftDouble);
  fkp42   := TblNewField(TblPeriods, ftDouble);
  fkp43   := TblNewField(TblPeriods, ftDouble);
  fkp44   := TblNewField(TblPeriods, ftDouble);
  fkp4z   := TblNewField(TblPeriods, ftDouble);
  fkp4zs  := TblNewField(TblPeriods, ftDouble);
  fap31   := TblNewField(TblPeriods, ftDouble);
  fap32   := TblNewField(TblPeriods, ftDouble);
  fap33   := TblNewField(TblPeriods, ftDouble);
  fap34   := TblNewField(TblPeriods, ftDouble);
  fap3z   := TblNewField(TblPeriods, ftDouble);
  fap3zs  := TblNewField(TblPeriods, ftDouble);
  fap3zss := TblNewField(TblPeriods, ftDouble);
  fap41   := TblNewField(TblPeriods, ftDouble);
  fap42   := TblNewField(TblPeriods, ftDouble);
  fap43   := TblNewField(TblPeriods, ftDouble);
  fap44   := TblNewField(TblPeriods, ftDouble);
  fap4z   := TblNewField(TblPeriods, ftDouble);
  fap4zs  := TblNewField(TblPeriods, ftDouble);
  fap4zss := TblNewField(TblPeriods, ftDouble);
  fName1  := TblNewField(TblPeriods, ftString);
  fName2  := TblNewField(TblPeriods, ftString);
}

//******************************************************************************


DataStream DTS_DebList
(
  [CFH] CommonFormHeader;

  [ValRep]   if((cValOt = 0), oValFunc.GetValSymbol(0),   if(Modifier GetFirst KlVal where (( cValOt == KlVal.NRec )) = tsOk, KlVal.SIMVOLV,  ''));
  [VValRep]  if((cValOt = 0), sGetTune('NDE.NameRUBLAH'), if(Modifier GetFirst KlVal where (( cValOt == KlVal.NRec )) = tsOk, KlVal.DOLLARAH, ''));

  [DateRep]  OtDate;
  [BOtDate]  BOtDate;
  [LOtDate]  LOtDate;
  [KolPers]  KolPers;
  [ProdZak]  If(Prod=1, If(Zakup=1,'закупки и продажи','продажи'), If(Zakup=1,'закупки',''));
  [AllKontr] If(AllKontr = 0,'контрагентам:','выбранным контрагентам:');

  [a01]  a01;
  [a02]  a02;
  [a11]  a11;
  [a12]  a12;
  [a13]  a13;
  [a14]  a14;
  [a15]  a15;
  [a16]  a16;
  [a17]  a17;
  [a18]  a18;
  [a19]  a19;
  [a1a]  a1a;
  [a1b]  a1b;
  [a1c]  a1c;
  [a1zP] a1zP;
  [a1zZ] a1zZ;

  [a21]  a21;
  [a22]  a22;
  [a23]  a23;
  [a24]  a24;
  [a25]  a25;
  [a26]  a26;
  [a2z]  a2z;

  [a31]  a31;
  [a32]  a32;
  [a33]  a33;
  [a34]  a34;
  [a35]  a35;
  [a36]  a36;
  [a3z]  a3z;

  [a41]  a41;
  [a42]  a42;
  [a43]  a43;
  [a44]  a44;
  [a45]  a45;
  [a46]  a46;
  [a4z]  a4z;

  Table FR_KatOrg1
  (
    [cKatOrg] FR_KatOrg1.cKatOrg;
    [Name]    FR_KatOrg1.Name;

    [fk01]    FR_KatOrg1.fk01;
    [fk02]    FR_KatOrg1.fk02;
    [fk11]    FR_KatOrg1.fk11;
    [fk12]    FR_KatOrg1.fk12;
    [fk13]    FR_KatOrg1.fk13;
    [fk14]    FR_KatOrg1.fk14;
    [fk15]    FR_KatOrg1.fk15;
    [fk16]    FR_KatOrg1.fk16;
    [fk17]    FR_KatOrg1.fk17;
    [fk18]    FR_KatOrg1.fk18;
    [fk19]    FR_KatOrg1.fk19;
    [fk1a]    FR_KatOrg1.fk1a;
    [fk1b]    FR_KatOrg1.fk1b;
    [fk1c]    FR_KatOrg1.fk1c;
    [fk1zP]   FR_KatOrg1.fk1zP;
    [fk1zZ]   FR_KatOrg1.fk1zZ;

    [fk21]    FR_KatOrg1.fk21;
    [fk22]    FR_KatOrg1.fk22;
    [fk23]    FR_KatOrg1.fk23;
    [fk24]    FR_KatOrg1.fk24;
    [fk25]    FR_KatOrg1.fk25;
    [fk26]    FR_KatOrg1.fk26;
    [fk2z]    FR_KatOrg1.fk2z;

    [fk31]    FR_KatOrg1.fk31;
    [fk32]    FR_KatOrg1.fk32;
    [fk33]    FR_KatOrg1.fk33;
    [fk34]    FR_KatOrg1.fk34;
    [fk35]    FR_KatOrg1.fk35;
    [fk36]    FR_KatOrg1.fk36;
    [fk3z]    FR_KatOrg1.fk3z;

    [fk41]    FR_KatOrg1.fk41;
    [fk42]    FR_KatOrg1.fk42;
    [fk43]    FR_KatOrg1.fk43;
    [fk44]    FR_KatOrg1.fk44;
    [fk45]    FR_KatOrg1.fk45;
    [fk46]    FR_KatOrg1.fk46;
    [fk4z]    FR_KatOrg1.fk4z;

    Table FR_BaseDoc1
    (
      [cBaseDoc]  FR_BaseDoc1.cBaseDoc;
      [cKatOrg]   FR_BaseDoc1.cKatOrg;

      [NoDoc]     FR_BaseDoc1.NoDoc;
      [NoDog]     FR_BaseDoc1.NoDog;
      [dDog]      if (Trim(FR_BaseDoc1.NoDog) = '', '', DateToStr(FR_BaseDoc1.dDog, 'DD/MM/YYYY'));
      [Name]      FR_BaseDoc1.Name;
      [VidDoc]    if (FR_BaseDoc1.VidDoc=101,'сч.закупки',
                    if (FR_BaseDoc1.VidDoc=102,'прием.конс',
                      if (FR_BaseDoc1.VidDoc=201,'сч.продажи',
                        if (FR_BaseDoc1.VidDoc=202,'отп.консиг',''))));

      [VidDocF]   if (FR_BaseDoc1.VidDoc=101,'счет на закупку.',
                    if (FR_BaseDoc1.VidDoc=102,'ДО приема на консигнацию.',
                      if (FR_BaseDoc1.VidDoc=201,'счет на продажу.',
                        if (FR_BaseDoc1.VidDoc=202,'ДО отпуска на консигнацию.',''))));

      [TipMoney]  if (FR_BaseDoc1.TipMoney=1,'Руб.',
                    if (FR_BaseDoc1.TipMoney=2,'В-р.',
                      if (FR_BaseDoc1.TipMoney=3,'Вал.','')));

      [TipMoneyF] if (FR_BaseDoc1.TipMoney=1,'Рублевый',
                    if (FR_BaseDoc1.TipMoney=2,'Валютно-рублевый',
                      if (FR_BaseDoc1.TipMoney=3,'Валютный','')));

      [ValCurse]  if(FR_BaseDoc1.TipMoney=2,
                    if(FR_BaseDoc1.ValCurse>0.00001,'Курс='+String(FR_BaseDoc1.ValCurse,0,2)+'+',
                      if(FR_BaseDoc1.DopProc<>0,'Надбавка к курсу: ','') )+
                    if(FR_BaseDoc1.DopProc<>0,String(FR_BaseDoc1.DopProc,0,2)+'%',''),
                    '');

      Table FR_StepDoc1
      (
        [cStepDoc] FR_StepDoc1.cStepDoc;
        [cBaseDoc] FR_StepDoc1.cBaseDoc;

        [valDog]   FR_StepDoc1.valDog;
        [vValDog]  FR_StepDoc1.vValDog;
        [Name]     FR_StepDoc1.Name;
        [dStart]   FR_StepDoc1.dStart;
        [dOtg]     FR_StepDoc1.dOtg;
        [dOpl]     FR_StepDoc1.dOpl;

        [fd01d]    FR_StepDoc1.fd01d;
        [fd11d]    FR_StepDoc1.fd11d;
        [fd12d]    FR_StepDoc1.fd12d;
        [fd13d]    FR_StepDoc1.fd13d;
        [fd14d]    FR_StepDoc1.fd14d;
        [fd15d]    FR_StepDoc1.fd15d;
        [fd16d]    FR_StepDoc1.fd16d;
        [fd17d]    FR_StepDoc1.fd17d;
        [fd18d]    FR_StepDoc1.fd18d;
        [fd19d]    FR_StepDoc1.fd19d;
        [fd1ad]    FR_StepDoc1.fd1ad;
        [fd1bd]    FR_StepDoc1.fd1bd;
        [fd1cd]    FR_StepDoc1.fd1cd;
        [fd1zd]    FR_StepDoc1.fd1zd;

        [fd21d]    FR_StepDoc1.fd21d;
        [fd22d]    FR_StepDoc1.fd22d;
        [fd23d]    FR_StepDoc1.fd23d;
        [fd24d]    FR_StepDoc1.fd24d;
        [fd25d]    FR_StepDoc1.fd25d;
        [fd26d]    FR_StepDoc1.fd26d;
        [fd2zd]    FR_StepDoc1.fd2zd;

        [fd31d]    FR_StepDoc1.fd31d;
        [fd32d]    FR_StepDoc1.fd32d;
        [fd33d]    FR_StepDoc1.fd33d;
        [fd34d]    FR_StepDoc1.fd34d;
        [fd35d]    FR_StepDoc1.fd35d;
        [fd36d]    FR_StepDoc1.fd36d;
        [fd3zd]    FR_StepDoc1.fd3zd;

        [fd41d]    FR_StepDoc1.fd41d;
        [fd42d]    FR_StepDoc1.fd42d;
        [fd43d]    FR_StepDoc1.fd43d;
        [fd44d]    FR_StepDoc1.fd44d;
        [fd45d]    FR_StepDoc1.fd45d;
        [fd46d]    FR_StepDoc1.fd46d;
        [fd4zd]    FR_StepDoc1.fd4zd;

        [fd01]     FR_StepDoc1.fd01;
        [fd11]     FR_StepDoc1.fd11;
        [fd12]     FR_StepDoc1.fd12;
        [fd13]     FR_StepDoc1.fd13;
        [fd14]     FR_StepDoc1.fd14;
        [fd15]     FR_StepDoc1.fd15;
        [fd16]     FR_StepDoc1.fd16;
        [fd17]     FR_StepDoc1.fd17;
        [fd18]     FR_StepDoc1.fd18;
        [fd19]     FR_StepDoc1.fd19;
        [fd1a]     FR_StepDoc1.fd1a;
        [fd1b]     FR_StepDoc1.fd1b;
        [fd1c]     FR_StepDoc1.fd1c;
        [fd1z]     FR_StepDoc1.fd1z;

        [fd21]     FR_StepDoc1.fd21;
        [fd22]     FR_StepDoc1.fd22;
        [fd23]     FR_StepDoc1.fd23;
        [fd24]     FR_StepDoc1.fd24;
        [fd25]     FR_StepDoc1.fd25;
        [fd26]     FR_StepDoc1.fd26;
        [fd2z]     FR_StepDoc1.fd2z;

        [fd31]     FR_StepDoc1.fd31;
        [fd32]     FR_StepDoc1.fd32;
        [fd33]     FR_StepDoc1.fd33;
        [fd34]     FR_StepDoc1.fd34;
        [fd35]     FR_StepDoc1.fd35;
        [fd36]     FR_StepDoc1.fd36;
        [fd3z]     FR_StepDoc1.fd3z;

        [fd41]     FR_StepDoc1.fd41;
        [fd42]     FR_StepDoc1.fd42;
        [fd43]     FR_StepDoc1.fd43;
        [fd44]     FR_StepDoc1.fd44;
        [fd45]     FR_StepDoc1.fd45;
        [fd46]     FR_StepDoc1.fd46;
        [fd4z]     FR_StepDoc1.fd4z;

         Table TblStepDocPer1
         (
           [cStepDoc]   TblStepDocPer1.cStepDoc;
           [cKatOrg]    TblStepDocPer1.cKatOrg;
           [cPeriods]   TblStepDocPer1.cPeriods;
           [fName1]     TblStepDocPer1.fName1;
           [fName2]     TblStepDocPer1.fName2;

           [fdp31]      TblStepDocPer1.fdp31;
           [fdp32]      TblStepDocPer1.fdp32;
           [fdp33]      TblStepDocPer1.fdp33;
           [fdp34]      TblStepDocPer1.fdp34;
           [fdp3z]      TblStepDocPer1.fdp3z;
           [fdp31o]     TblStepDocPer1.fdp31o;
           [fdp32o]     TblStepDocPer1.fdp32o;
           [fdp33o]     TblStepDocPer1.fdp33o;
           [fdp34o]     TblStepDocPer1.fdp34o;
           [fdp3zo]     TblStepDocPer1.fdp3zo;
           [fdp41]      TblStepDocPer1.fdp41;
           [fdp42]      TblStepDocPer1.fdp42;
           [fdp43]      TblStepDocPer1.fdp43;
           [fdp44]      TblStepDocPer1.fdp44;
           [fdp4z]      TblStepDocPer1.fdp4z;
           [fdp41o]     TblStepDocPer1.fdp41o;
           [fdp42o]     TblStepDocPer1.fdp42o;
           [fdp43o]     TblStepDocPer1.fdp43o;
           [fdp44o]     TblStepDocPer1.fdp44o;
           [fdp4zo]     TblStepDocPer1.fdp4zo;

           [fkp31]      TblStepDocPer1.fkp31;
           [fkp32]      TblStepDocPer1.fkp32;
           [fkp33]      TblStepDocPer1.fkp33;
           [fkp34]      TblStepDocPer1.fkp34;
           [fkp3z]      TblStepDocPer1.fkp3z;
           [fkp3zs]     TblStepDocPer1.fkp3zs;
           [fkp41]      TblStepDocPer1.fkp41;
           [fkp42]      TblStepDocPer1.fkp42;
           [fkp43]      TblStepDocPer1.fkp43;
           [fkp44]      TblStepDocPer1.fkp44;
           [fkp4z]      TblStepDocPer1.fkp4z;
           [fkp4zs]     TblStepDocPer1.fkp4zs;

           [fap31]      TblStepDocPer1.fap31;
           [fap32]      TblStepDocPer1.fap32;
           [fap33]      TblStepDocPer1.fap33;
           [fap34]      TblStepDocPer1.fap34;
           [fap3z]      TblStepDocPer1.fap3z;
           [fap3zs]     TblStepDocPer1.fap3zs;
           [fap3zss]    TblStepDocPer1.fap3zss;
           [fap41]      TblStepDocPer1.fap41;
           [fap42]      TblStepDocPer1.fap42;
           [fap43]      TblStepDocPer1.fap43;
           [fap44]      TblStepDocPer1.fap44;
           [fap4z]      TblStepDocPer1.fap4z;
           [fap4zs]     TblStepDocPer1.fap4zs;
           [fap4zss]    TblStepDocPer1.fap4zss;
         );
      );
    );
  );
)
end;

//******************************************************************************

Procedure CreateReport;
{
  nprinted  := 0;
  nprintedK := 0;
  badprint  := FALSE;

  StartNewVisual( vtRotateVisual
                , vfTimer + vfBreak + vfconfirm
                ,   'Идет формирование отчета по исполняемым ДО...'#13
                  + 'Заполнение временной таблицы... '
                , 1
                );

  ErrorPrint := TRUE;

  if (TypeRep = cw_FR)
    {
      mtClear(#TblPeriods   , mfNormal);
      mtClear(#TblStepDocPer, mfNormal);
      mtClear(#FR_StepDoc   , mfNormal);
      mtClear(#FR_BaseDoc   , mfNormal);
      mtClear(#TblKatOrgPer , mfNormal);
      mtClear(#FR_KatOrg    , mfNormal);
      mtClear(#TblAllPer    , mfNormal);
    }

  if (TypeRep = cw_Text)
    InitReport;

  CreateTmp1;

  BegDatBaseDoc := BOtdate;
  EndDatBaseDoc := LOtdate;

  ClearAll;

  if (TypeRep = cw_Text)
    PrintHead;

  if ( (AllKontr AND 2) = 2 )
    PushBounds(tbByGroupDO);

  if ( (AllKontr AND 1) = 0 )
    {
      NKontr := RecordsInTable(#KatOrg);

      _LOOP Katorg
        {
          if ( (not NextVisual) OR badprint OR ( if(TypeRep = cw_Text, frmDebList.Error, False) ) )
            {
              badprint := TRUE;
              Break;
            }
          else
            DoKatorg;
        }
    }
  else
    {
      NKontr := 0;

      _LOOP Pick
        NKontr++;

      PushBounds(tbPickKatorg);

      _LOOP Pick
        if ( modifier GetFirst Katorg = tsOk ) OR (Pick.cRec = 0)
          {
            if ( (not NextVisual) OR badprint OR ( if(TypeRep = cw_Text, frmDebList.Error, False) ) )
              {
                badprint := TRUE;
                Break;
              }
            else
              DoKatorg;
          }
        else
          Message('Ошибка поиска записи организации', Warning + CancelButton);

      PopBounds(tbPickKatorg);
    }

  if ( (AllKontr AND 2) = 2 )
    PopBounds(tbByGroupDO);

  PrintAll;

  StopVisual('', 0);

  if (TypeRep = cw_Text)
    {
      if ( frmDebList.error AND ErrorPrint )
        {
          Message('Ошибки при печати', InFormation + OkButton);
          frmDebList.abortForm;
        }
      else
        if ( badprint )
          {
            Message('Печать прервана пользователем', InFormation + OkButton);
            frmDebList.abortForm;
          }
        else
          if ( nprinted = 0 )
            {
              Message('Нет данных для печати', InFormation + OkButton);
              frmDebList.abortForm;
            }
          else
          {
            frmDebList.ShowFile('Исполняемые ДО по периодам', True, 1);
          }
    }

  if (TypeRep = cw_FR)
    RunFReport(DTS_DebList, '', False);


  if (TypeRep = cw_Text)
    TblDeleteTable(TblPeriods);

}
