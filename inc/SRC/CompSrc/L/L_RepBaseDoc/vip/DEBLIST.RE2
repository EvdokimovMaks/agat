//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 7.12 - логистика
// процедуры отчета "Исполняемые ДО по периодам"
// вычисление сумм по договору, контрагенту, всем контрагентам
//
//********************************************************************************

// Функции по договорам

Function d01 : double;    // Сумма по договору в валюте договора
{
  d01 := Basedoc.Total;

  if ( (Basedoc.TipMoney = 2) AND (Valutadog = 0) AND (Stepdoc.cVal <> 0) )
    {
      if ( RubValIsCurse )
        d01 := d01 * Basedoc.ValCurse;
      else if ( Valutadog <> Stepdoc.cVal )
        d01 := oValFunc.GetAnyCurrency( Stepdoc.cVal, d01, Stepdoc.dStart, Valutadog);

      d01 := d01 / RubValK;
    }
  else if ( Valutadog <> Stepdoc.cVal )
    d01 := oValFunc.GetAnyCurrency (Stepdoc.cVal, d01, Stepdoc.dStart, Valutadog);
}

//******************************************************************************

//d11.+Отгружено  товара   = сумма расходной накладной в продажах для дог.продажи
//d12.-Возвращено товара   = сумма возвратной накл. в продажах для дог.продажи
//     (отгруженного)
//d13.-Принято товара      = сумма приходной накладной в закупках для дог.закупки
//d14.+Возвращено товара   = сумма возвратной накл. в закупках для дог.закупки
//       (принятого)
//d15.-Оплачено нам денег  = сумма платежного документа от контрагента
//                           для договора продажи
//d16.+Возвращено денег    = сумма платежного документа от нас
// контрагенту(по продаже)   для договора продажи
//d17.+Оплачено нами денег = сумма платежного документа от нас
//                           для договора закупки
//d18.-Возвращено денег    = сумма платежного документа от контрагента
// нам (по закупке)          для договора закупки
//d19.-Оплачено нам товаром = сумма приходной накладной для дог.продажи
//d1a.+Возврат d19.        = сумма возвратной накл. в закупках для дог.продажи
//d1b.+Оплачено нами товаром = сумма расходной накладной для дог.закупки
//d1c.-Возврат d1b.        = сумма возвратной накл. в продажах для дог.закупки

//21. Фактически отгружено        = {11.}-{12.}
//22. Фактически принято          = {13.}-{14.}
//23. Фактически оплачено нам     = {15.}+{19.}-{16.}-{1a.}
//24. Фактически оплачено нами    = {17.}+{1b.}-{18.}-{1c.}
//25. Задолженность по продаже (контрагента) = {21.}-{23.}
//26. Задолженность по закупке (контрагента) = {24.}-{22.}
//2z. Фактическая задолженность   = {25.}+{26.}
// то есть если контрагент должен нам - положительное число

Function d21 : double;
{
  d21 := d11 - d12;
}

//******************************************************************************

Function d22 : double;
{
  d22 := d13 - d14;
}

//******************************************************************************

Function d23 : double;
{
  d23 := d15 + d19 - d16 - d1a;
}

//******************************************************************************

Function d24 : double;
{
  d24 := d17 + d1b - d18 - d1c;
}

//******************************************************************************

Function d25 : double;
{
  d25 := d21 - d23;
}

//******************************************************************************

Function d26 : double; { d26 := d24 - d22; }

//******************************************************************************

Function d2z : double; { d2z := d25 + d26; }

//31. По товару (Продажа) (наша)            = if(Продажа, {d01.} - {d21.}, 0)
//32. По товару (Закупка) (контр)           = if(Закупка, {d01.} - {d22.}, 0)
//33. По оплате (Продажа) (контр)           = if(Продажа, {d01.} - {d23.}, 0)
//34. По оплате (Закупка) (наша)            = if(Закупка, {d01.} - {d24.}, 0)
//35. Задолженность по продаже(контрагента) = {d33.} - {d31.}
//36. Задолженность по закупке(контрагента) = {d32.} - {d34.}
//3z. Фактическая задолженность             = {d35.} + {d36.}
//     контрагента(>0) или наша (<0)

Function d31 : double;
{
  d31 := if(DProd, d01 - d21, 0);
}

//******************************************************************************

Function d32 : double;
{
  d32 := if(DZak,  d01 - d22, 0);
}

//******************************************************************************

Function d33 : double;
{
  d33 := if(DProd, d01 - d23, 0);
}

//******************************************************************************

Function d34 : double;
{
  d34 := if(DZak,  d01 - d24, 0);
}

//******************************************************************************

Function d35 : double;
{
  d35 := d33 - d31;
}

//******************************************************************************

Function d36 : double;
{
  d36 := d32 - d34;
}

//******************************************************************************

Function d3z : double;
{
  d3z := d35 + d36;
}

//******************************************************************************

//Итоговая просроченная задолженность по договору
//41. По товару (Продажа) (наша)      = if({наступил срок отгрузки}, {d31.} , 0)
//42. По товару (Закупка) (контр)     = if({наступил срок отгрузки}, {d32.} , 0)
//43. По оплате (Продажа) (контр)     = if({наступил срок оплаты}  , {d33.} , 0)
//44. По оплате (Закупка) (наша)      = if({наступил срок оплаты}  , {d34.} , 0)
//45. Задолженность по продаже(контрагента) = if({d25.}>0 и {наступил срок оплаты}
//                                           или {d25.}<0 и {наступил срок отгрузки},
//                                               {d25.}, 0 )
//46. Задолженность по закупке(контрагента) = if({d26.}>0 и {наступил срок отгрузки}
//                                           или {d26.}<0 и {наступил срок оплаты},
//                                               {d26.}, 0 )
//4z. Фактическая задолженность             = {d45.} + {d46.}
//     контрагента(>0) или наша (<0)

Function d41 : double;
{
  d41 := if(PrOtgr, d31, 0);
}

//******************************************************************************

Function d42 : double;
{
  d42 := if(PrOtgr, d32, 0);
}

//******************************************************************************

Function d43 : double;
{
  d43 := if(PrOpl,  d33, 0);
}

//******************************************************************************

Function d44 : double;
{
  d44 := if(PrOpl,  d34, 0);
}

//******************************************************************************

Function d45 : double;
{
  d45 := if( (d25>0 AND PrOpl) OR (d25<0 AND PrOtgr), d25, 0);
}

//******************************************************************************

Function d46 : double;
{
  d46 := if( (d26>0 AND PrOtgr) OR (d26<0 AND PrOpl), d26, 0);
}

//******************************************************************************

Function d4z : double;
{
  d4z := d45 + d46;
}

//******************************************************************************

// Суммы по периодам

//d12.-Возвращено товара   = сумма возвратной накл. в продажах для дог.продажи
//     (отгруженного)
//d14.+Возвращено товара   = сумма возвратной накл. в закупках для дог.закупки
//       (принятого)
//d1a.+Возврат d19.        = сумма возвратной накл. в закупках для дог.продажи
//d1c.-Возврат d1b.        = сумма возвратной накл. в продажах для дог.закупки

Function dPer1 : Date;
{
  if (TypeRep = cw_FR)
    dPer1 := TblPeriods.fdPer1;

  if (TypeRep = cw_Text)
    dPer1 := TblGfDate(TblPeriods, fdPer1);
}

//******************************************************************************

Function dPer2 : Date;
{
  if (TypeRep = cw_FR)
    dPer2 := TblPeriods.fdPer2;

  if (TypeRep = cw_Text)
    dPer2 := TblGfDate(TblPeriods, fdPer2);
}

//******************************************************************************

//d31. d32.                                          dp31. dp32.
//d33. d34. - помещаются в период по дате договора   dp33. dp34.
//
//d41. d42.  - помещаются в период по дате отгрузки  dp41. dp42.
//d43. d44.  - помещаются в период по дате оплаты    dp43. dp44.
//
//d3z. d4z. разбиваются в соответствии с фактическим движением
//          по договору по следующему алгоритму:     dp3z. dp4z.

Function dp31 : double;
{
  dp31 := if(DDateDog >= dPer1 AND DDateDog <= dPer2, d31, 0);
}

//******************************************************************************

Function dp32 : double;
{
  dp32 := if(DDateDog >= dPer1 AND DDateDog <= dPer2, d32, 0);
}

//******************************************************************************

Function dp33 : double;
{
  dp33 := if(DDateDog >= dPer1 AND DDateDog <= dPer2, d33, 0);
}

//******************************************************************************

Function dp34 : double;
{
  dp34 := if(DDateDog >= dPer1 AND DDateDog <= dPer2, d34, 0);
}

//******************************************************************************

Function dp3z : double;
{
  dp3z := TblGfdouble(TblPeriods, fdp3z);
}

//******************************************************************************

Function dp41 : double;
{
  dp41 := if(DOtg >= dPer1 AND Dotg <= dPer2, d41, 0);
}

//******************************************************************************

Function dp42 : double;
{
  dp42 := if(DOtg >= dPer1 AND Dotg <= dPer2, d42, 0);
}

//******************************************************************************

Function dp43 : double;
{
  dp43 := if(DOpl >= dPer1 AND Dopl <= dPer2, d43, 0);
}

//******************************************************************************

Function dp44 : double;
{
  dp44 := if(DOpl >= dPer1 AND Dopl <= dPer2, d44, 0);
}

//******************************************************************************

Function dp4z : double;
{
  dp4z := TblGfdouble(TblPeriods, fdp4z);
}

//******************************************************************************

Function k21 : double;
{
  k21 := k11 - k12;
}

//******************************************************************************

Function k22 : double;
{
  k22 := k13 - k14;
}

//******************************************************************************

Function k23 : double;
{
  k23 := k15 + k19 - k16 - k1a;
}

//******************************************************************************

Function k24 : double;
{
  k24 := k17 + k1b - k18 - k1c;
}

//******************************************************************************

Function k25 : double;
{
  k25 := k21 - k23;
}

//******************************************************************************

Function k26 : double;
{
  k26 := k24 - k22;
}

//******************************************************************************

Function k2z : double;
{
  k2z := k25 + k26;
}

//******************************************************************************

Function k35 : double;
{
  k35 := k33 - k31;
}

//******************************************************************************

Function k36 : double;
{
  k36 := k32 - k34;
}

//******************************************************************************

Function k3z : double;
{
  k3z := k35 + k36;
}

//******************************************************************************

Function kp31 : double;
{
  kp31 := TblGfdouble(TblPeriods, fkp31 );
}

//******************************************************************************

Function kp32 : double;
{
  kp32 := TblGfdouble(TblPeriods, fkp32 );
}

//******************************************************************************

Function kp33 : double;
{
  kp33 := TblGfdouble(TblPeriods, fkp33 );
}

//******************************************************************************

Function kp34 : double;
{
  kp34 := TblGfdouble(TblPeriods, fkp34 );
}

//******************************************************************************

Function kp3z : double;
{
  kp3z := TblGfdouble(TblPeriods, fkp3z );
}

//******************************************************************************

Function kp3zs : double;
{
  kp3zs := TblGfdouble(TblPeriods, fkp3zs);  // сальдированная
} 

//******************************************************************************

//Итоговая просроченная задолженность

Function kp41 : double;
{
  kp41 := TblGfdouble(TblPeriods, fkp41);
}

//******************************************************************************

Function kp42 : double;
{
  kp42 := TblGfdouble(TblPeriods, fkp42);
}

//******************************************************************************

Function kp43 : double;
{
  kp43 := TblGfdouble(TblPeriods, fkp43);
}

//******************************************************************************

Function kp44 : double;
{
  kp44 := TblGfdouble(TblPeriods, fkp44);
}

//******************************************************************************

Function kp4z : double;
{
  kp4z := TblGfdouble(TblPeriods, fkp4z);
}

//******************************************************************************

Function kp4zs : double;
{
  kp4zs := TblGfdouble(TblPeriods, fkp4zs);  // сальдированная
}

//******************************************************************************

Function a21 : double;
{
  a21 := a11 - a12;
}

//******************************************************************************

Function a22 : double;
{
  a22 := a13 - a14;
}

//******************************************************************************

Function a23 : double;
{
  a23 := a15 + a19 - a16 - a1a;
}

//******************************************************************************

Function a24 : double;
{
  a24 := a17 + a1b - a18 - a1c;
}

//******************************************************************************

Function a25 : double;
{
  a25 := a21 - a23;
}

//******************************************************************************

Function a26 : double;
{
  a26 := a24 - a22;
}

//******************************************************************************

Function a2z : double;
{
  a2z := a25 + a26;
}

//******************************************************************************

Function a35 : double;
{
  a35 := a33 - a31;
}

//******************************************************************************

Function a36 : double;
{
  a36 := a32 - a34;
}

//******************************************************************************

Function a3z : double;
{
  a3z := a35 + a36;
}

//******************************************************************************

// Задолженности по периодам
//31. По товару (Продажа)
//32. По товару (Закупка)
//33. По оплате (Продажа)
//34. По оплате (Закупка)
//3z. Фактическая задолженность

Function ap31 : double;
{
  ap31 := TblGfdouble(TblPeriods, fap31);
}

//******************************************************************************

Function ap32 : double;
{
  ap32 := TblGfdouble(TblPeriods, fap32);
}

//******************************************************************************

Function ap33 : double;
{
  ap33 := TblGfdouble(TblPeriods, fap33);
}

//******************************************************************************

Function ap34 : double;
{
  ap34 := TblGfdouble(TblPeriods, fap34);
}

//******************************************************************************

Function ap3z : double;
{
  ap3z := TblGfdouble(TblPeriods, fap3z);
}

//******************************************************************************

Function ap3zs : double;
{
  ap3zs := TblGfdouble(TblPeriods, fap3zs); // сальдированная
}

//******************************************************************************

Function ap3zss : double;
{
  ap3zss := TblGfdouble(TblPeriods, fap3zss);   // сальдированная
}

//******************************************************************************

//Итоговая просроченная задолженность по периодам
//41. По товару (Продажа)
//42. По товару (Закупка)
//43. По оплате (Продажа)
//44. По оплате (Закупка)
//4z. Фактическая просроченная сальдированная задолженность
//     контрагента (>0) или наша (<0)

Function ap41 : double;
{
  ap41 := TblGfdouble(TblPeriods, fap41);
}

//******************************************************************************

Function ap42 : double;
{
  ap42 := TblGfdouble(TblPeriods, fap42);
}

//******************************************************************************

Function ap43 : double;
{
  ap43 := TblGfdouble(TblPeriods, fap43);
}

//******************************************************************************

Function ap44 : double;
{
  ap44 := TblGfdouble(TblPeriods, fap44);
}

//******************************************************************************

Function ap4z : double;
{
  ap4z := TblGfdouble(TblPeriods, fap4z);
}

//******************************************************************************

Function ap4zs : double;
{
  ap4zs := TblGfdouble(TblPeriods, fap4zs);  // сальдированная
}

//******************************************************************************

Function ap4zss : double;
{
  ap4zss := TblGfdouble(TblPeriods, fap4zss); // сальдированная
}