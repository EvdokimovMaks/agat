/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,98 корпорация ГАЛАКТИКА                      ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Модуль Управление ремонтами                               ║
 ║ Версия        : 5.80                                                      ║
 ║ Назначение    : Функции для генерация нового дерева объектов ремонта      ║
 ║ Ответственный : Бургардт Александр                                        ║
 ║ Изменения     :                                                           ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/
//////////////////////////////////////////////////////////////////
function Rem_Descr (Descr_Table : Word;
                    Descr_Name  : String;
                    Descr_cRec  : Comp;
                    Descr_cGroup: Comp;
                    Descr_isLeaf: word
                   )            : Word;
begin
          ObjRemDescr.Nrec  := 0;
          ObjRemDescr.Code  := 1;
          ObjRemDescr.cTable:= Descr_Table;
          ObjRemDescr.Name  := Descr_Name;
          ObjRemDescr.cRec  := Descr_cRec;
          ObjRemDescr.cGroup:= Descr_cGroup;
          ObjRemDescr.isLeaf:= Descr_isLeaf;

  Rem_Descr := insert current ObjRemDescr;

end;

//////////////////////////////////////////////////////////////////
function GenTree_TLevel(TLevel:word):word;
{
   case TLevel of
    0: GenTree_TLevel:=0;
    1: GenTree_TLevel:=tree1;
    2: GenTree_TLevel:=tree2;
    3: GenTree_TLevel:=tree3;
    4: GenTree_TLevel:=tree4;
    5: GenTree_TLevel:=tree5;
    6: GenTree_TLevel:=tree6;
    7: GenTree_TLevel:=tree7;
    8: GenTree_TLevel:=tree8;
    9: GenTree_TLevel:=tree9;
   end; // case
}

//////////////////////////////////////////////////////////////////
function GenTree_ObjLevel(ObjRec:comp):word;
{
  GenTree_ObjLevel := 1;
  //Rec1_Obj  := ObjRem3.Nrec;      // запомнить позицию
  rec_Goods := ObjRem3.cGoods;

if (rec_Goods <> 0)
if (GetFirst ObjRemDoc where((rec_Goods==ObjRem.Nrec))=tsOk and State)
DO BEGIN
  GenTree_ObjLevel := GenTree_ObjLevel + 1;
  rec_Goods := ObjRemDoc.cGoods;
END;
while (GetFirst ObjRemDoc where((rec_Goods==ObjRemDoc.Nrec))=tsOk and State)

//if (GetFirst ObjRem3 where((Rec1_Obj==ObjRem3.Nrec))=tsOk) {} // вернуться
}

//////////////////////////////////////////////////////////////////
function GenTree_ObjTree(TLevel:word):word;
{
  GenTree_ObjTree := 0;
for (Y:=1; Y<=9; Y:=Y+1)
begin
  if (GenTree_TLevel(TrLevel[Y])=6 and TrLevel[Y]<=TLevel)
    GenTree_ObjTree := GenTree_ObjTree + 1;
end; // for Y
}

//////////////////////////////////////////////////////////////////
procedure GenTree_TrObj;
{
 var Kol_Obj : word;
     Kol_Obj :=0;

for (Y:=1; Y<=9; Y:=Y+1)
begin
  TrObj[Y] := 100;
  if (GenTree_TLevel(TrLevel[Y])=6)
  {
    Kol_Obj := KOl_Obj + 1;
    TrObj[Kol_Obj] := TrLevel[Y];
  }
end; // for Y
}

//////////////////////////////////////////////////////////////////
function GenTree_GetGroup(TLevel:word;Descr_cGroup:comp):comp;
{
       Podr_Kol := 0;
       Podr_Kol2:= 0;
   var Podr_Group : comp;

   tree0 := GenTree_TLevel(TLevel);
   Descr_cTable := word(0);
   Descr_cRec   := comp(0);
   GenTree_GetGroup := comp(0);

  case tree0 of
   1: Descr_cTable := word(3);
   2: Descr_cTable := word(6);
   3: Descr_cTable := word(7);
   4: Descr_cTable := word(8);
   5: Descr_cTable := word(9);
   6: Descr_cTable := word(1);
   7: Descr_cTable := word(10);
   8: Descr_cTable := word(11);
   9: Descr_cTable := word(12);
  10: Descr_cTable := word(3);
  end; // case

  case tree0 of
   1: {
        Descr_cRec := ObjRem3.cKatPodr;

        if (GetFirst KatPodr5 Where((ObjRem3.cKatPodr==KatPodr5.Nrec))=tsOk)
        if (KatPodr5.cPodr > 0)  // Есть вышестоящие подразделения
        {
          do begin
            Podr_Kol           := Podr_Kol + 1;
            Podr_Rec[Podr_Kol] := KatPodr5.Nrec;
            Podr_Group         := KatPodr5.cPodr; //ссылка на вышестоящее подразделение
            Descr_cRec         := KatPodr5.Nrec;
          end;
          while (GetFirst KatPodr5 where ((Podr_Group==KatPodr5.Nrec))=tsOk);
        }
      }
   2: Descr_cRec := ObjRem3.cTipObj;
   3: Descr_cRec := ObjRem3.cGrObj;
   4: Descr_cRec := ObjRem3.cKatMark;
   5: Descr_cRec := ObjRem3.cKatTexN;
   6: Descr_cRec := ObjRem3.Nrec;
   7: Descr_cRec := ObjRem3.cNrec1;
   8: Descr_cRec := ObjRem3.cNrec2;
   9: Descr_cRec := ObjRem3.cNrec3;
  10: Descr_cRec := ObjRem3.cKatPodr;
  end; // case


  if (GetFirst ObjRemDescr Where((Descr_cTable == ObjRemDescr.cTable and
                                  Descr_cGroup == ObjRemDescr.cGroup and
                                  Descr_cRec   == ObjRemDescr.cRec ))=tsOk)
  {
      if (tree0<>1 or Podr_Kol=0) // Не Подразделение или Нет вышестоящих подразделение
        GenTree_GetGroup := ObjRemDescr.Nrec;
      else                        // Подразделение с вышестоящими подразделениями
      {
            Podr_Kol2    := Podr_Kol;
          do begin                // Нахожу нужное подразделение в дереве
            Descr_cGroup := ObjRemDescr.Nrec;
            Podr_Kol2    := Podr_Kol2 - 1;
            Descr_cRec   := Podr_Rec[Podr_Kol2];
          end;
          while (Podr_Kol2         > 0                and
                 ObjRem3.cKatPodr <> ObjRemDescr.cRec and
                 GetFirst ObjRemDescr Where((Descr_cTable == ObjRemDescr.cTable and
                                             Descr_cGroup == ObjRemDescr.cGroup and
                                             Descr_cRec   == ObjRemDescr.cRec ))=tsOk)

          if (ObjRem3.cKatPodr = ObjRemDescr.cRec)
            GenTree_GetGroup := ObjRemDescr.Nrec;
      }
  }
}

//////////////////////////////////////////////////////////////////
procedure GenTree_AddRemDescr(TLevel:word;rec_group:comp);
{
   tree0 := GenTree_TLevel(TLevel);

   Case tree0 of
   1:
     {
       if (Podr_Kol = 0)
       {
          if (GetFirst KatPodr5 Where((Objrem3.cKatPodr==KatPodr5.Nrec))=tsOk)
          {
            Rem_Descr(3,KatPodr5.Name,KatPodr5.Nrec,rec_group,0);
            CurGroup    := ObjRemDescr.Nrec;     // код группы уровня
          }
       }
       else
       for (Y:=Podr_Kol; Y>0; Y:=Y-1)
       begin
         if (GetFirst ObjRemDescr Where((word(3)      == ObjRemDescr.cTable and
                                         rec_group    == ObjRemDescr.cGroup and
                                        Podr_Rec[Y]   == ObjRemDescr.cRec ))=tsOk)
         {
           rec_group := ObjRemDescr.Nrec;
         }
         else
         {
          if (GetFirst KatPodr5 Where((Podr_Rec[Y]==KatPodr5.Nrec))=tsOk)
          {
            Rem_Descr(3,KatPodr5.Name,KatPodr5.Nrec,rec_group,0);
            CurGroup   := ObjRemDescr.Nrec;     // код группы уровня
            rec_group  := ObjRemDescr.Nrec;
          }
         }
       end; // for Y
     }

   2:
     if (GetFirst TipObj3 Where((ObjRem3.cTipObj==TipObj3.Nrec))=tsOk)
     {
       Rem_Descr(6,TipObj3.Name,TipObj3.Nrec,rec_group,0);
       CurGroup := ObjRemDescr.Nrec;     // код группы уровня
     }

   3:
     if (GetFirst GrObj3 Where((ObjRem3.cGrObj==GrObj3.Nrec))=tsOk)
     { Rem_Descr(7,GrObj3.Name,GrObj3.Nrec,rec_group,0);
       CurGroup := ObjRemDescr.Nrec;     // код группы уровня
     }

   4:
     if (GetFirst KatMark3 Where((ObjRem3.cKatMark==KatMark3.Nrec))=tsOk)
     { Rem_Descr(8,KatMark3.Name,KatMark3.Nrec,rec_group,0);
       CurGroup := ObjRemDescr.Nrec;     // код группы уровня
     }

   5:
     if (GetFirst KatTexN3 Where((ObjRem3.cKatTexN==KatTexN3.Nrec))=tsOk)
     { Rem_Descr(9,KatTexN3.Name,KatTexN3.Nrec,rec_group,0);
       CurGroup := ObjRemDescr.Nrec;     // код группы уровня
     }

   6:
     if (GetFirst ObjRemDescr Where((CurGroup==ObjRemDescr.Nrec))=tsOk)
     {
       CurGroup := ObjRemDescr.Nrec;     // код группы уровня
     }

   7:
     if (GetFirst KurRemObj3 Where((ObjRem3.cNrec1==KurRemObj3.Nrec))=tsOk)
     { Rem_Descr(10,KurRemObj3.Name,KurRemObj3.Nrec,rec_group,0);
       CurGroup := ObjRemDescr.Nrec;     // код группы уровня
     }

   8:
     if (GetFirst IspRemObj3 Where((ObjRem3.cNrec2==IspRemObj3.Nrec))=tsOk)
     { Rem_Descr(11,IspRemObj3.Name,IspRemObj3.Nrec,rec_group,0);
       CurGroup := ObjRemDescr.Nrec;     // код группы уровня
     }

   9:
     if (GetFirst SposRemObj3 Where((ObjRem3.cNrec3==SposRemObj3.Nrec))=tsOk)
     { Rem_Descr(12,SposRemObj3.Name,SposRemObj3.Nrec,rec_group,0);
       CurGroup := ObjRemDescr.Nrec;     // код группы уровня
     }

  10:
     if (GetFirst KatPodr5 Where((Objrem3.cKatPodr==KatPodr5.Nrec))=tsOk)
     {
       Rem_Descr(3,KatPodr5.Name,KatPodr5.Nrec,rec_group,0);
       CurGroup    := ObjRemDescr.Nrec;     // код группы уровня
     }
   end; // case tree0
}

//////////////////////////////////////////////////////////////////
procedure GenTree_CurGroup(TLevel:word);
{
  //if (TrLevel[TLevel] > 0)   // есть уровень
  if (TrL0 > 0)   // есть уровень
  {
    //if (GenTree_GetGroup(TrLevel[TLevel],CurGroup)=0) // найти запись каталога в дереве для уровня
    //  GenTree_AddRemDescr(TrLevel[TLevel],CurGroup); // не найден -> insert в ObjRemDescr группы уровня
    if (GenTree_GetGroup(TrL0,CurGroup)=0) // найти запись каталога в дереве для уровня
      GenTree_AddRemDescr(TrL0,CurGroup); // не найден -> insert в ObjRemDescr группы уровня
    else
      CurGroup := ObjRemDescr.Nrec;     // код группы уровня
  }
}

//////////////////////////////////////////////////////////////////
function GenTree_NextLevel(TLevel:word):word;
{
  GenTree_NextLevel := 0;
do begin
 TLevel := TLevel + 1;
 case TLevel of
  1: GenTree_NextLevel:=if(tree1>0,TLevel,0);
  2: GenTree_NextLevel:=if(tree2>0,TLevel,0);
  3: GenTree_NextLevel:=if(tree3>0,TLevel,0);
  4: GenTree_NextLevel:=if(tree4>0,TLevel,0);
  5: GenTree_NextLevel:=if(tree5>0,TLevel,0);
  6: GenTree_NextLevel:=if(tree6>0,TLevel,0);
  7: GenTree_NextLevel:=if(tree7>0,TLevel,0);
  8: GenTree_NextLevel:=if(tree8>0,TLevel,0);
  9: GenTree_NextLevel:=if(tree9>0,TLevel,0);
 end; // case
end; //do
while (GenTree_NextLevel = 0 and
       TLevel            < 9)
}
//////////////////////////////////////////////////////////////////