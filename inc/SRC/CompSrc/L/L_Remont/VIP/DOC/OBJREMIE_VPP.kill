/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,98 корпорация ГАЛАКТИКА                      ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Модуль Управление ремонтами                               ║
 ║ Версия        : 5.80                                                      ║
 ║ Назначение    : Каталог объектов ремонта (дерево и переключаемые экраны)  ║
 ║ Ответственный : Бургардт Александр                                        ║
 ║ Изменения     :                                                           ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/
Panel ScObjRem
  Table ObjRemDescr;

Tree trObjRem;
  Show (,,35,29);
Fields
#ObjRemColor2
;
  ObjRemDescr.Name 'Наименование объекта ремонта' ('Наименование объекта ремонта',hcRemObjRemTree,sciRem1478EnEscTree) :[30], Protect;
  Obj_Num 'Номер' ('Номер объекта ремонта',hcRemObjRemTree,sciRem1478EnEscTree) :[5], Protect,
#ObjRemColor3
;
  tr_KatOs2_InNum    'Инвент.номер'  ('Инвентарный номер основного средства',hcRemInNum): [7], Protect;
  tr_Katpodr4_Name   'Подразделение' ('Подразделение',hcRemKatPodr) : [13], Protect;
  tr_TipObj2_Name    'Тип Объекта '  ('Тип объекта ремонта',hcRemTipObj) : [7], Protect;
  tr_GrObj2_Name     'Группа объекта'  ('',hcRemGrObj) : [7], Protect;
  tr_KatMark2_Name    'Марка объекта' ('',hcRemKatMark) : [7], Protect;
  tr_KatTexN2_Name    'Линия технологическая' ('Технологическа линия (цепочка)',hcRemKatTexN) : [7], Protect;
  tr_ObjRemDoc_TexNum   'Номер в линии' ('Номер объекта ремонта в технологической цепочке (линии)',hcRemObjRem_TexNum): [5], Protect;
  tr_Name_Kur_Obj2    'Куратор ремонта    ' ('Основной Куратор ремонта     ',hcRemKurRem) : [7], Protect;
  tr_Name_Isp_Obj2    'Исполнитель ремонта' ('Основной Исполнитель ремонта ',hcRemIspRem) : [7], Protect;
  tr_SposRemObj2_Name 'Способ выполнения  ' ('Основной Способ выполнения   ',hcRemSposRem) : [7], Protect;
End;

Screen ScRemGroup ('',hcRemont,sciRem1478Esc);
  Show (36,2,,30);
<<

>>
end; // Screen ScRemGroup

browse TrAttrib ('',hcGKatalM1Attr,sciRem1478Esc);
  Show (36,2,,30);
Table AttrVal;
  Fields
    AttrNam.NAME 'Название-атрибута': [29], skip;
    tAV3         'Значение атрибута'('В этом поле находится значение внешнего атрибута') : [44], Protect;
end; // of TrAttrib


Screen ScRemKatOrg ('',hcGKatalM1Org,sciRem1478Esc);
  Show (36,2,,30);
Fields
  if (KatOrg.IsArch = 1, 'Архивная', '') : skip;
  KatOrg.NRec : skip;
  KatOrg.TipOrg ('Тип организации: АО, НПО, ЗАО, СП, ИП и т.д.'),Protect;
  KatOrg.Name ('Наименование организации'),Protect;
  KatOrg.Code ('Внутренний учетный номер организации'),Protect;
  KatOrgDescr1.Name : skip;
  KatOrg.UNN ('Учетный/идентификационный номер налогоплательщика: УНН/ИНН'),Protect;
  KatOrg.OKPO ('Код ОКПО организации'),Protect;
  KatOrg.OKDP ('Код ОКДП организации'),Protect;
  KatOrg.OKONH ('Код ОКОНХ организации'),Protect;
  KatOrg.KodPlatNDS ('Код плательщика НДС'),Protect;
  KatOrg.IndexK ('Индекс организации'),Protect;
  KatState.Name ('Государство'),Protect;
  KatCity.Name ('Город'),Protect;
  KatOrg.Addr ('Адрес организации'),Protect;
  KatOrg.Tel ('Телефон, факс организации, доп.информация'),Protect;
  KatOrg.corpoin ('Входит или нет организация в состав корпорации') : Protect;
  KatOrg.NeedCustom ('Нужно ли при закупке учитывать таможенные налоги') : Protect;
  KatOrg.Skid ('Процент скидки при продажах по умолчанию') : [6.3],Protect;
  KatOrg.MaxDolgRub ('максимальный долг в национальной денежной единице') : [15.2],Protect;
  KatOrg.MaxDolgVal ('максимальный долг в базовой валюте') : [15.2],Protect;
<<
 .@@@@@@@@@@@@@@@                                      .@@@@@@@@@@@@@@@@@@@@@@@
`Тип организации`           .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Наименование организации`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Внутренний учетный номер`  .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Группа`                    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`ИНН`.@@@@@@@@@@@@@@`ОКПО`.@@@@@@@@@@@@`ОКДП`.@@@@@@@@@@@@`ОКОНХ`.@@@@@@@@@@@@@
`Код плательщика НДС`       .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Индекс организации`        .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Государство`               .@@@@@@@@@@@@@@@@@@@@@@@@@@`Город`.@@@@@@@@@@@@@@@@
`Адрес организации`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Тел.,факс`                 .@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Входит в состав корпорации` [.] При закупке автоматически применять налоги`
`% скидки по умолчанию`     .@@@@@@@
`Максимальный долг: в НДЕ`  .@@@@@@@@@@@@@@@ `в базовой валюте`.@@@@@@@@@@@@@@@
>>
end; // Screen ScRemKatOrg


Screen ScRemKatPodr ('',hcGKatalM1Podr,sciRem1478Esc);
  Show (36,2,,30);
Fields
  KATPODR2.KOD ('Код подразделения'), Protect;
  //TempTip       ('Тип: подразделение, склад, розничная торговля'):protect;
  KATPODR2.SKLAD ('Тип'):
    [List 'подразделение',
          'склад',
          'розничная торговля',
          'транзитный склад'],
    protect,skip;

  KatPodr2.NAME  ('Наименование подразделения'), Protect;
  KatPodr2.SkPrior ('Приоритет подразделения'), Protect;
  KatPodr2.Addr ('Адрес подразделения'), Protect;
  KatPodr2.TEL ('Телефон'), Protect;
  KatPodr2.FIO ('Атрибуты руководителя'), Protect;
  DepFunc.NmFunc ('Производственная функция',hcGKatalManufFunctionSelect), Protect;
  GrPodr.Name ('Группа подразделений'), Protect;
  KatPodr3.Name ('Вышестоящее подразделение'), Protect;

  Grafik.Code ('Код графика работы подразделения'), Protect;
  Grafik.Name ('Наименование графика работы подразделения'), Protect;
  Calendar.Code ('Код календаря для подразделения'), Protect;
  Calendar.Name ('Наименование календаря для подразделения'), Protect;
  KatPodr2.Smen  ('Количество смен (0 - 3)', hcGKatalM1Podr), Protect;
  ShiftTime1 ('Продолжительность первой смены'), Protect;
  ShiftTime2 ('Продолжительность второй смены'), Protect;
  ShiftTime3 ('Продолжительность третьей смены'), Protect;
<<
`Код`         .@@@@@@@@@@@@@@@@@@@@@
`Тип`         .@@@@@@@@@@@@@@@@@@@@@
`Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Приоритет`   .@@@@@`Адрес`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Телефоны`                 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Руководитель`             .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Производственная функция` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Группа подразделений`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Вышестоящее подразделение`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`График`      .@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Календарь`   .@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Кол-во смен` .@@@@@ Продолжительность смен   1:.@@@@@   2:.@@@@@   3:.@@@@@
>>
end; // Screen ScRemKatPodr


Screen ScRemKatMc ('',hcOKatalM1Mc,sciRem1478Esc);
  Show (36,2,,30);
Fields
  KatMC.Name    ('наименование МЦ') : protect;
  KatED.Name    ('учетная единица измерения') : protect;
  KatMC.BarKod  ('номенклатурный номер, должен быть уникальным') : protect;
  //KatMc.NRec : skip;
  KatMC.OKDP    ('код ОКДП') : protect;
  KatMC.tnved   ('Код ТНВЭД') : protect;
  GroupMC.KOD   ('Код группы МЦ') : protect;
  GroupMC.Name  ('Наименование группы МЦ') : protect;
  GrNal.Kod     ('Код группы налогов') : protect;
  GrNal.Name    ('Наименование группы налогов') : protect;
  //ExistOtp : skip;
  //ExistDopEd : skip;
  KatMC.RemMC    ('Примечания: место, время изготовления и т.п. (используется в прайс-листах)') : protect;

  KatMC.Massa   ('масса в кг учетной единицы матценности'):[15.5], Protect;
  KatMC.SizeX       ('линейные координаты (в метрах)'):[15.5], Protect;
  KatMC.mTara      ('масса в кг тары'):[15.5], Protect;
  KatMC.SizeY     ('линейные координаты (в метрах)'):[15.5], Protect;
  KatMC.Volume    ('объем (в кубических метрах)'):[15.5], Protect;
  fBrutto           ('масса в кг матценности вместе с тарой'):[15.5], Protect;
  KatMC.SizeZ       ('линейные координаты (в метрах)'):[15.5], Protect;
  KatMC.KOMPLEKT ('Является или нет данная МЦ комплектом') : protect;
  KlResHr.Name  ('ссылка на ресурс хранения'), Protect;
  TekMC.KolAKT    :[10.3],skip, {Font = {Bold = true}};
  KatMC.ZapasMin  ('Минимальный нормативный запас'):[10.3], Protect;
  TekMC.Reserve   :[10.3],skip, {Font = {Bold = true}};
  KatMC.ZapasMax  ('Максимальный нормативный запас'):[10.3], Protect;
  Svobodno  :[10.3],skip, {Font = {Bold = true}};

  KatMC.PricePU ('Заводская цена МЦ в нац.ден.единице') : [14.5], Protect;
  TypeMC.Name   ('Тип объекта учета'):protect;
  TypeMC.Kind    ('Категория МЦ'):
           [LIST   'Прочее',
                   'Покупное',
                   'Собственного производства',
                   'Готовая продукция'], skip, protect, {Font = {Bold = true}};
  TypeMC.PrMat    ('Признак'):
           [LIST   'Материал',
                   'ДСЕ',
                   'Инструмент, оснастка'], skip, protect, {Font = {Bold = true}};

  KatMC.Obozn ('Конструкторское обозначение'), Protect;
  KatPodr6.Name ('Цех-изготовитель'):protect;
#ifndef GAL8_1
  KaTech.Name ('Основной тех-процесс'):protect;
#endif
  PrDiv ('Признак разделяемости полуфабриката'): protect;
<<
 Наименование МЦ:.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Учетная единица:.@@@@@@@@ Номенклатурный номер (бар-код).@@@@@@@@@@@@@@@@@@@
 Код ОКДП.@@@@@@@@@@@@@@@@@@@@@@@@@       Код ТНВЭД.@@@@@@@@@@@@@@@@@@@@@@@@@
 Группа.@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Налоги.@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Примечания.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   нетто .@@@@@@@@@@@@@@@@@@@  X:.@@@@@@@@@@@@@@@@@@          Объем
   тара  .@@@@@@@@@@@@@@@@@@@  Y:.@@@@@@@@@@@@@@@@@@    .@@@@@@@@@@@@@@@@@
   брутто.@@@@@@@@@@@@@@@@@@@  Z:.@@@@@@@@@@@@@@@@@@ [.] `Является комплектом
 Ресурс хранения.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ НАЛИЧИЕ .@@@@@@@@@@@@@@@@@@
 Нормативный минимальный запас .@@@@@@@@@@        РЕЗЕРВ  .@@@@@@@@@@@@@@@@@@
 Нормативный максимальный запас.@@@@@@@@@@        СВОБОДНО.@@@@@@@@@@@@@@@@@@
 Плановая цена        .@@@@@@@@@@@@@@
 Тип объекта учета    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Категория:           .@@@@@@@@@@@@@@@@@@ Характеристика:.@@@@@@@@@@@@@@@@@@@
 Конструкторское обозначение.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Цех-изготовитель           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#ifndef GAL8_1
 Основной техпроцесс        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@
#else
                                                              .@@@@@@@@@@@@@@
#endif
>>
end; // Screen ScRemKatMc


Screen ScRemKatUsl ('',hcOKatalM1Usl,sciRem1478Esc);
  Show (36,2,,30);
Fields
  KatUsl.Name ('Наименование услуги'):[25], Protect;
  KatUsl.KOD ('Код услуги'):[10], Protect;
  KatUsl.OKDP ('Код ОКДП'):[10], protect;
  KatUsl.TYPEUSL ('Тип услуги'): [LIST 'нерасчетная','расчетная'],protect,skip; // SVG
  SHBUSL.NAME ('Наименование шаблона'),protect; // SVG
  KatEd2.Name ('Наименование единицы измерения'):[7], Protect;
  GroupUsl.Name ('Наименование группы услуг'):[15], Protect;
  GrNal2.Kod ('Код группы налогов'):[5], protect;
  GrNal2.Name ('Наименование группы налогов'):[5], protect;
  KatUsl.KolAkt ('Количество'):[9.1], Protect;
  KatUsl.RasCenka ('Расценка'):[9.2], Protect;
  KatUsl.NormTime ('Норматив времени'):[8.2], Protect;
  KatUsl.Klass ('необходимый разряд (коэффициент)'):[6.3], Protect;
<<
`Наименование услуги`
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Код услуги`.@@@@@@@@@@@@@@@@@@@@@ `ОКДП`.@@@@@@@@@@@@@@@@
`Тип услуги`.@@@@@@@@@@@@@
`Шаблон`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Учетная единица измерения`.@@@@@@@@@@@@@@@@@@@@

`Группа`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Группа налогов`.@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Количество`.@@@@@@@@@@@@@@@@@@@@

`Расценка `.@@@@@@@@@@@@@@@@@@@@
`Норматив `.@@@@@@@@@@@@@@@@@@@@
`Разряд   `.@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen ScRemKatUsl

Screen ScRemTipObj ('',hcRemTipObj,sciRem1478Esc);
  Show (36,2,,30);
Fields
  TipObj4.Kod   ('Код Типа объекта ремонта'):[10], Protect;
  TipObj4.Name  ('Наименование Типа объекта ремонта'):[25], Protect;
<<

`Код         `.@@@@@@@@@@@@@@@@@@@@@
`Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
end; // Screen ScRemTipObj

Screen ScRemGrObj ('',hcRemGrObj,sciRem1478Esc);
  Show (36,2,,30);
Fields
  GrObj4.Kod   ('Код Группы объекта ремонта'):[10], Protect;
  GrObj4.Name  ('Наименование Группы объекта ремонта'):[25], Protect;
<<

`Код         `.@@@@@@@@@@@@@@@@@@@@@
`Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
end; // Screen ScRemGrObj

Screen ScRemKatMark ('',hcRemKatMark,sciRem1478Esc);
  Show (36,2,,30);
Fields
  KatMark4.Kod   ('Код Марки объекта ремонта'):[10], Protect;
  KatMark4.Name  ('Наименование Марки объекта ремонта'):[25], Protect;
<<

`Код         `.@@@@@@@@@@@@@@@@@@@@@
`Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
end; // Screen ScRemKatMark

Screen ScRemKatTexN ('',hcRemKatTexN,sciRem1478Esc);
  Show (36,2,,30);
Fields
  KatTexN4.Kod   ('Код Тех.линии объекта ремонта'):[10], Protect;
  KatTexN4.Name  ('Наименование Тех.линии объекта ремонта'):[25], Protect;
<<

`Код         `.@@@@@@@@@@@@@@@@@@@@@
`Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
end; // Screen ScRemKatTexN


Screen ScRemKurRemObj ('',hcRemKurRem,sciRem1478Esc);
  Show (36,2,,30);
Fields
  KurRemTree.Kod  ('Код'), Protect;
  Pr_Kur_Tree     ('Признак: подразделение, организация, физич.лицо'), Protect, {Font={Color=ColorSysMaroon;Italic=True}};
  Name_Kur_Tree   ('Наименование')             , Protect;
  KurRemTree.Abbr ('Сокращенное наименование') , Protect;
<<

`Код         `.@@@@@@@@@@@@@@@@@@@@@
`Признак     `.@@@@@@@@@@@@@@@@@@@@@
`Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Сокращенное `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
end; // Screen ScRemKurRemObj

Screen ScRemIspRemObj ('',hcRemIspRem,sciRem1478Esc);
  Show (36,2,,30);
Fields
  IspRemTree.Kod  ('Код'), Protect;
  Pr_Isp_Tree     ('Признак: подразделение, организация, физич.лицо'), Protect, {Font={Color=ColorSysMaroon;Italic=True}};
  Name_Isp_Tree   ('Наименование')             , Protect;
  IspRemTree.Abbr ('Сокращенное наименование') , Protect;
<<

`Код         `.@@@@@@@@@@@@@@@@@@@@@
`Признак     `.@@@@@@@@@@@@@@@@@@@@@
`Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Сокращенное `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
end; // Screen ScRemIspRemObj

Screen ScRemSposRemObj ('',hcRemSposRem,sciRem1478Esc);
  Show (36,2,,30);
Fields
  SposRemTree.Kod  ('Код'), Protect;
  SposRemTree.Name ('Наименование')             , Protect;
  SposRemTree.Abbr ('Сокращенное наименование') , Protect;
<<

`Код         `.@@@@@@@@@@@@@@@@@@@@@
`Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Сокращенное `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
end; // Screen ScRemSposRemObj

HandleEvent

cmEdit:
{
  if (CurPanFormat = 0)
  {
    pr_Edit := false;
    SavedNrec := ObjRemDescr.cRec;
    case ObjRemDescr.cTable of
      0 :
      {
        p_Name := ObjRemDescr.Name;
        if (RunDialog('RemAddNewRecDescr', p_Name) = cmOk)
          ObjRemDescr.Name := p_Name;
      }
      1 :
      {
        RunInterface(ObjRem, SavedNrec, true, true, true);
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst ObjRemDoc where ((SavedNrec == ObjRemDoc.Nrec)) = tsOk)
            ObjRemDescr.Name := ObjRemDoc.Name;
      }
      2 :
      {
        RunInterface(KatOrg, SavedNrec, comp(0), word(0));
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst KatOrg where ((SavedNrec == KatOrg.Nrec)) = tsOk)
            ObjRemDescr.Name := KatOrg.Name;
      }
      3 :
      {
        RunInterface('KatPodr', integer(0), SavedNrec);
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst KatPodr where ((SavedNrec == KatPodr.Nrec)) = tsOk)
            ObjRemDescr.Name  := KatPodr.Name;
      }
      4 :
      {
#ifdef GAL7_1
        RunInterface(KatMc, SavedNrec, comp(0));
#else
        RunInterface(KatMc, SavedNrec);
#endif
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst KatMc where ((SavedNrec == KatMc.Nrec)) = tsOk)
            ObjRemDescr.Name := KatMc.Name;
      }
      5 :
      {
#ifdef GAL7_11
        RunInterface(KatUsl, SavedNrec, comp(0));
#else
        RunInterface(KatUsl, SavedNrec);
#endif
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst KatUsl where ((SavedNrec == KatUsl.Nrec)) = tsOk)
            ObjRemDescr.Name := KatUsl.Name;
      }
      6 :
      {
        RunInterface(TipObj, SavedNrec);
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst TipObj where ((SavedNrec == TipObj.Nrec)) = tsOk)
            ObjRemDescr.Name  := TipObj.Name;
      }
      7 :
      {
        RunInterface(GrObj, SavedNrec);
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst GrObj where ((SavedNrec == GrObj.Nrec)) = tsOk)
            ObjRemDescr.Name := GrObj.Name;
      }
      8 :
      {
        RunInterface(KatMark, SavedNrec);
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst KatMark where ((SavedNrec == KatMark.Nrec)) = tsOk)
            ObjRemDescr.Name := KatMark.Name;
      }
      9 :
      {
        RunInterface(KatTexN, SavedNrec);
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst KatTexN where ((SavedNrec == KatTexN.Nrec)) = tsOk)
            ObjRemDescr.Name := KatTexN.Name;
      }
      10:
      {
        RunInterface(KurRem, SavedNrec);
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst KurRem where ((SavedNrec == KurRem.Nrec)) = tsOk)
          {
            ObjRemDescr.Name := KurRem.Name;

            if (KurRem.cKatPodr > comp(0))
              if (getFirst KatPodr where ((KurRem.cKatPodr == KatPodr.Nrec)) = tsOk)
                ObjRemDescr.Name := KatPodr.Name;

            if (KurRem.cKatOrg > comp(0))
              if (getFirst KatOrg where ((KurRem.cKatOrg == KatOrg.Nrec)) = tsOk)
                ObjRemDescr.Name := KatOrg.Name;

            if (KurRem.cPersons > comp(0))
              if (getFirst Persons where ((KurRem.cPersons == Persons.Nrec)) = tsOk)
                ObjRemDescr.Name := Persons.FIO;
          }
      }
      11:
      {
        RunInterface(IspRem, SavedNrec);
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst IspRem where ((SavedNrec == IspRem.Nrec)) = tsOk)
          {
            ObjRemDescr.Name := IspRem.Name;

            if (IspRem.cKatPodr > comp(0))
              if (getFirst KatPodr where ((IspRem.cKatPodr == KatPodr.Nrec)) = tsOk)
                ObjRemDescr.Name := KatPodr.Name;

            if (IspRem.cKatOrg > comp(0))
              if (getFirst KatOrg where ((IspRem.cKatOrg == KatOrg.Nrec)) = tsOk)
                ObjRemDescr.Name := KatOrg.Name;

            if (IspRem.cPersons > comp(0))
              if (getFirst Persons where ((IspRem.cPersons == Persons.Nrec)) = tsOk)
                ObjRemDescr.Name := Persons.FIO;
          }
      }
      12:
      {
        RunInterface(SposRem, SavedNrec);
        if (ObjRemDescr.cRec = SavedNrec)
          if (getFirst SposRem where ((SavedNrec == SposRem.Nrec)) = tsOk)
            ObjRemDescr.Name := SposRem.Name;
      }
    end; // case ObjRemDescr.cTable

    if (ObjRemDescr.cRec = SavedNrec)
      if (update current ObjRemDescr = tsOk)
      {
      }

    if (not TreeJumpToRecord(trObjRem, ObjRemDescr.Nrec))
      TreeGetFirst(MyTree);

    RescanPanel(#ObjRemDescr);
    case ObjRemDescr.cTable of
      1 : RescanPanel(#ObjRemDoc);
      2 : RescanPanel(#KatOrg);
      3 : RescanPanel(#KatPodr2);
      4 : RescanPanel(#KatMc);
      5 : RescanPanel(#KatUsl);
      6 : RescanPanel(#TipObj4);
      7 : RescanPanel(#GrObj4);
      8 : RescanPanel(#KatMark4);
      9 : RescanPanel(#KatTexN4);
      10: RescanPanel(#KurRemTree);
      11: RescanPanel(#IspRemTree);
      12: RescanPanel(#SposRemTree);
    end;

    if (tEdit) // вызов Interface(ObjRem) для редактирования записи
      PutCommand(cmClose);  // закрыть весь интерфейс
  }
} // cmEdit

cmDeleteRecord:
{
  if (CurPanFormat = 0)
  {
    if ((CurTable = #ObjRemDescr) or (CurObjFormat = 1))
    {
      pr_Edit := false;
      var isDeleteConfirmed : boolean;
      isDeleteConfirmed := false;
      Del_Group := ObjRemDescr.Nrec;
      c_Group := ObjRemDescr.cGroup;

      if (ObjRemDescr.isLeaf = 0)
        mess_str := 'Удалить из дерева узел : '#13#13''+Trim(ObjRemDescr.Name)+' ?'#13#13''+
                    '(При этом удалятся все объекты этой группы)'#13#13'';
      else
        mess_str := 'Удалить из дерева объект : '#13#13''+Trim(ObjRemDescr.Name)+' ?'#13#13'';

      if (ObjRemDescr.cTable = 1)
      {
        case RunDialog('DelTreeObjRem') of
          cmVal1:
          {
            if (getFirst ObjRem where ((ObjRemDescr.cRec == ObjRem.Nrec)) = tsOk)
            {
#include DelObjR.vpp
              if (not TreeJumpToRecord(trObjRem, c_Group))
                TreeGetFirst(MyTree);
              RescanPanel(#ObjRemDescr);
              RescanPanel(#ObjRemDoc);
              PutCommand(cmPositionChanged);
            }
          }
          cmVal2:
          {
            if (Message(mess_str, Warning+YesNo) = cmYes)
              isDeleteConfirmed := true;
          }
        end; // case RunDialog('DelTreeObjRem')
      }
      else
      {
        if (Message(mess_str, Warning+YesNo) = cmYes)
          isDeleteConfirmed := true;
      }

      if (isDeleteConfirmed)
      {
        delete from AttrVal where((word(coObjRemDescr) == AttrVal.wTable and
                                   ObjRemDescr.Nrec    == AttrVal.cRec));
        delete current ObjRemDescr;
        delete ObjRemDescr where ((Del_Group==ObjRemDescr.cGroup))

        // проверка - а не пустая ли стала группа после удаления объекта
        PopBounds(#ObjRemDescr);
        if (getFirst ObjRemDescr where((c_Group==ObjRemDescr.cGroup)) <> tsOk)
          if (getFirst ObjRemDescr where((c_Group==ObjRemDescr.NRec)) =  tsOk)
          {
            ObjRemDescr.isLeaf := 1;    // из узла в лист
            update current ObjRemDescr;
            TreeCloseNode(trObjRem);    // закрыть узел
          }
        PushBounds(#ObjRemDescr);

        if (not TreeJumpToRecord(trObjRem, c_Group))
          TreeGetFirst(MyTree);

        RescanPanel(#ObjRemDescr);
        RescanPanel(#ObjRemDoc);
        PutCommand(cmPositionChanged);
      }
    }
  }

  if (CurPanFormat = 1)         // линейный список
     SetTitle('Каталог объектов ремонта (всего:'+String(RecordsInTable(#ObjRem))+')');
  else
     SetTitle('Каталог объектов ремонта (всего записей в дереве:'+String(RecordsInTable(#ObjRemDescr))+')');
} // cmDeleteRecord

cmAddNewRec:
{
  if (CurPanFormat = 0)
  {
    if ((CurTable = #ObjRemDescr) or (CurObjFormat = 1))
    {
      pr_Edit := false;
      UpdateTable;
      SavedNrec     := 0;
      pDescrTable   := 0;
      pCurObjFormat := 0;

      p_Menu := RunMenu('RemAddNewDescr');

      if (p_Menu > word(0))
      {
        var isInserted : boolean;

        case p_Menu of
          cmRemPickObjRem2,
          cmRemPickKatOrg2,
          cmRemPickKatPodr2,
          cmRemPickKatMc2,
          cmRemPickKatUsl2,
          cmRemNewDescr2,
          cmRemPickTipObj2,
          cmRemPickGrObj2,
          cmRemPickKatMark2,
          cmRemPickKatTexN2,
          cmRemPickKurRem2,
          cmRemPickIspRem2,
          cmRemPickSposRem2,
          cmRemNewObjRem2 :
          {
            CurGroup := ObjRemDescr.Nrec;
            ObjRemDescr.isLeaf := 0;
            update current ObjRemDescr;
          }
        end; // case

        ObjRemDescr.Name   := '';
        ObjRemDescr.cTable := 0;
        isInserted := false;

        case p_Menu of
          cmRemNewObjRem1, // Создать новый объект ремонта (тек. уровень)
          cmRemNewObjRem2: // Создать новый объект ремонта (уровнем ниже)
          {
            if (DemoMode and RecordsInTable(#ObjRem) > 50)
            {
              Message(''#13'Демо-режим предполагает наличие не более 50 объектов ремонта', CancelButton);
            }
            else
            {
              if (CurGroup <> 0)
                SavedNrec := (CurGroup * comp(-1));
              else
                SavedNrec := comp(-1);

              RunInterface(ObjRem, SavedNrec, false, true, false);
              if (getFirst ObjRemDoc where ((SavedNrec == ObjRemDoc.Nrec)) = tsOk)
              {
                ObjRemDescr.cTable := 1;
                ObjRemDescr.Name := ObjRemDoc.Name;
                ObjRemDescr.cRec := ObjRemDoc.Nrec;
              }
            } // else
          }
          cmRemPickObjRem1, // Добавить в дерево из каталога объектов (тек. уровень)
          cmRemPickObjRem2: // Добавить в дерево из каталога объектов (уровнем ниже)
          {
            if (RunInterface(GetObjRem, cgiMulti, SavedNrec, true, true, false, true) <> cmCancel)
            {
  //            if (getFirst ObjRemDoc where ((SavedNrec==ObjRemDoc.Nrec))=tsOk)
  //            { ObjRemDescr.cTable:= 1;
  //              ObjRemDescr.Name  := ObjRemDoc.Name;
  //              ObjRemDescr.cRec  := ObjRemDoc.Nrec;
  //            }
              StartNewVisual(vtRotateVisual, vfTimer+vfBreak+vfConfirm, 'Добавление объектов ремонта...', 1);
              _LOOP Pick where ((word(5000) == Pick.wList))
              {
                ClearBuffer(tnObjRemDescr);
                ObjRemDescr.cTable := word(1);
                getFirst ObjRemDoc where ((Pick.cRec == ObjRemDoc.Nrec));
                ObjRemDescr.Name   := ObjRemDoc.Name;
                ObjRemDescr.cRec   := Pick.cRec;
                ObjRemDescr.cGroup := CurGroup;
                ObjRemDescr.Code   := word(1);
                ObjRemDescr.isLeaf := word(1);
                insert current ObjRemDescr;
                NextVisual;
              }
              StopVisual('', 0);
              isInserted := true;
            }
          }
          cmRemPickTipObj1, // Добавить в дерево из каталога типов объектов (тек. уровень)
          cmRemPickTipObj2: // Добавить в дерево из каталога типов объектов (уровнем ниже)
          {
            RunInterface(GetTipObj, cgiPick, SavedNrec, true);
            if (getFirst TipObj where ((SavedNrec == TipObj.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 6;
              ObjRemDescr.Name := TipObj.Name;
              ObjRemDescr.cRec := TipObj.Nrec;
            }
          }
          cmRemPickGrObj1, // Добавить в дерево из каталога групп объектов (тек. уровень)
          cmRemPickGrObj2: // Добавить в дерево из каталога групп объектов (уровнем ниже)
          {
            RunInterface(GetGrObj, cgiPick, SavedNrec, true);
            if (getFirst GrObj where ((SavedNrec == GrObj.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 7;
              ObjRemDescr.Name := GrObj.Name;
              ObjRemDescr.cRec := GrObj.Nrec;
            }
          }
          cmRemPickKatMark1, // Добавить в дерево из каталога марок объектов (тек. уровень)
          cmRemPickKatMark2: // Добавить в дерево из каталога марок объектов (уровнем ниже)
          {
            RunInterface(GetKatMark, cgiPick, SavedNrec, true);
            if (getFirst KatMark where ((SavedNrec == KatMark.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 8;
              ObjRemDescr.Name := KatMark.Name;
              ObjRemDescr.cRec := KatMark.Nrec;
            }
          }
          cmRemPickKatTexN1, // Добавить в дерево из каталога тех. цепочек (тек. уровень)
          cmRemPickKatTexN2: // Добавить в дерево из каталога тех. цепочек (уровнем ниже)
          {
            RunInterface(GetKatTexN, cgiPick, SavedNrec, true);
            if (getFirst KatTexN where ((SavedNrec == KatTexN.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 9;
              ObjRemDescr.Name := KatTexN.Name;
              ObjRemDescr.cRec := KatTexN.Nrec;
            }
          }
          cmRemPickKatOrg1, // Добавить в дерево из каталога организаций (тек. уровень)
          cmRemPickKatOrg2: // Добавить в дерево из каталога организаций (уровнем ниже)
          {
            RunInterface(GetKatOr, SavedNrec, comp(0), false, comp(0), comp(0));
            if (getFirst KatOrg where ((SavedNrec == KatOrg.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 2;
              ObjRemDescr.Name := KatOrg.Name;
              ObjRemDescr.cRec := KatOrg.Nrec;
            }
          }
          cmRemPickKatPodr1, // Добавить в дерево из каталога подразделений (тек. уровень)
          cmRemPickKatPodr2: // Добавить в дерево из каталога подразделений (уровнем ниже)
          {
            RunInterface(GetAnyPodr, SavedNrec, word(4));
            if (getFirst KatPodr where ((SavedNrec == KatPodr.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 3;
              ObjRemDescr.Name := KatPodr.Name;
              ObjRemDescr.cRec := KatPodr.Nrec;
            }
          }
          cmRemPickKatMc1, // Добавить в дерево из каталога МЦ (тек. уровень)
          cmRemPickKatMc2: // Добавить в дерево из каталога МЦ (уровнем ниже)
          {
  //         RunInterface(GetMc,SavedNrec);
  //         if (RunInterface(SelectMC, Integer(BuyDSE + Manuf + Ready))<>cmCancel)
  //         if (RunInterface(SelectMC,0,
  //             Integer(BuyDSE + Manuf + Ready),
  //             comp(0), SavedNrec, comp(0), comp(0)) <> cmCancel)

            if (RunInterface(GetMC, SavedNrec) <> cmCancel)
             if (getFirst KatMc where ((SavedNrec == KatMc.Nrec)) = tsOk)
             {
               ObjRemDescr.cTable := 4;
               ObjRemDescr.Name := KatMc.Name;
               ObjRemDescr.cRec := KatMc.Nrec;
             }
          }
          cmRemPickKatUsl1, // Добавить в дерево из каталога услуг (тек. уровень)
          cmRemPickKatUsl2: // Добавить в дерево из каталога услуг (уровнем ниже)
          {
            RunInterface(GetUsl, SavedNrec);
            if (getFirst KatUsl where ((SavedNrec == KatUsl.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 5;
              ObjRemDescr.Name := KatUsl.Name;
              ObjRemDescr.cRec := KatUsl.Nrec;
            }

          }
          cmRemPickKurRem1, // Добавить в дерево из каталога кураторов ремонта (тек. уровень)
          cmRemPickKurRem2: // Добавить в дерево из каталога кураторов ремонта (уровнем ниже)
          {
            RunInterface(GetKurRem, cgiPick, SavedNrec, true);
            ResetBounds(#KurRemObj1);
            if (getFirst KurRemObj1 where ((SavedNrec == KurRemObj1.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 10;
              if (KurRemObj1.cKatPodr > comp(0))
                ObjRemDescr.Name := KatPodrKurObj1.Name;
              else
                if (KurRemObj1.cKatOrg > comp(0))
                  ObjRemDescr.Name := KatOrgKurObj1.Name;
                else
                  if (KurRemObj1.cPersons > comp(0))
                    ObjRemDescr.Name := PersonsKurObj1.FIO;
                  else
                    ObjRemDescr.Name := KurRemObj1.Name;

              ObjRemDescr.cRec  := KurRemObj1.Nrec;
            }
            SetBounds(#KurRemObj1);
          }
          cmRemPickIspRem1, // Добавить в дерево из каталога исполнителей ремонта (тек. уровень)
          cmRemPickIspRem2: // Добавить в дерево из каталога исполнителей ремонта (уровнем ниже)
          {
            RunInterface(GetIspRem, cgiPick, SavedNrec, true);
            ResetBounds(#IspRemObj1);
            if (getFirst IspRemObj1 where ((SavedNrec == IspRemObj1.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 11;

              if (IspRemObj1.cKatPodr > comp(0))
                ObjRemDescr.Name := KatPodrIspObj1.Name;
              else
                if (IspRemObj1.cKatOrg > comp(0))
                  ObjRemDescr.Name  := KatOrgIspObj1.Name;
                else
                  if (IspRemObj1.cPersons > comp(0))
                    ObjRemDescr.Name := PersonsIspObj1.FIO;
                  else
                    ObjRemDescr.Name := IspRemObj1.Name;

              ObjRemDescr.cRec := IspRemObj1.Nrec;
            }
            SetBounds(#IspRemObj1);
          }
          cmRemPickSposRem1, // Добавить в дерево из каталога способов ремонта (тек. уровень)
          cmRemPickSposRem2: // Добавить в дерево из каталога способов ремонта (уровнем ниже)
          {
            RunInterface(GetSposRem, cgiPick, SavedNrec, true);
            if (getFirst SposRem where ((SavedNrec == SposRem.Nrec)) = tsOk)
            {
              ObjRemDescr.cTable := 12;
              ObjRemDescr.Name := SposRem.Name;
              ObjRemDescr.cRec := SposRem.Nrec;
            }
          }
          cmRemNewDescr1, // Добавить в дерево новую запись (тек. уровень)
          cmRemNewDescr2: // Добавить в дерево новую запись (уровнем ниже)
          {
            ObjRemDescr.cTable := 0;
            ObjRemDescr.cRec   := 0;
            p_Name             := '';
            if (RunDialog('RemAddNewRecDescr', p_Name) = cmOk)
              ObjRemDescr.Name := p_Name;
          }
        end; // case

        if ((ObjRemDescr.Name <> ''))
        {
          if (not IsInserted)
          {
            ObjRemDescr.Nrec  := 0;
            ObjRemDescr.cGroup:= CurGroup;
            ObjRemDescr.Code  := 1;
            ObjRemDescr.isLeaf:= 1;
            if (ObjRemDescr.cRec = 0)
              ObjRemDescr.cRec := ObjRemDescr.Nrec;

            insert current ObjRemDescr;

            if (ObjRemDescr.cRec=0)
            {
              ObjRemDescr.cRec := ObjRemDescr.Nrec;
              update current ObjRemDescr;
            }
          }

          if (not TreeJumpToRecord(trObjRem,ObjRemDescr.Nrec))
            TreeGetFirst(MyTree);

          pDescrTable  := 999;
          PutCommand(cmPositionChanged);
          RescanPanel(#ObjRemDescr);
          case CurObjFormat of
            1: RescanPanel(#ObjRemDoc);
            2: RescanPanel(#NormRem);
            3: RescanPanel(#GrafRem);
            4: RescanPanel(#MolRem);
            5: RescanPanel(#JourObj);
            6: RescanPanel(#JourDef);
            7: RescanPanel(#ObjRemAttrVal);
          end; // case
        }
      }
    } // if ((CurTable = #ObjRemDescr) or (CurObjFormat = 1))
  } // if (CurPanFormat = 0)

  if (CurPanFormat = 1)         // линейный список
     SetTitle('Каталог объектов ремонта (всего:'+String(RecordsInTable(#ObjRem))+')');
  else
     SetTitle('Каталог объектов ремонта (всего записей в дереве:'+String(RecordsInTable(#ObjRemDescr))+')');
} // cmAddNewRec

cmShowAll:
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Открытие...', 1 );
  TreePushPos(trObjRem);
  TreeGetFirst(trObjRem);
  do
    TreeOpenNode(trObjRem);
  while (TreeGetNext(trObjRem))
  TreePopPos(trObjRem);
  RescanPanel(#ObjRemDescr);
  StopVisual( '', 0 );
} // cmShowAll

cmHideAll :
{
  TreeGetFirst(trObjRem);
  TreeCloseAllOpenedNode(trObjRem);
  RescanPanel(#ObjRemDescr);
} // cmHideAll

cmTreeTop:
{
  CurGroup := UpperGroup;
}

cmTreeUp:
{
  CurGroup := ObjRemDescr.cGroup;
}

cmTreeDown:
{
  CurGroup := ObjRemDescr.NRec;
}

cmTreeNodeType:
{
  var vsComp : string;
#ifdef ComponentVersion
  vsComp := 'L_REMONT::';
#else
  vsComp := '';
#end
  if (ObjRemDescr.isLeaf = 1)
    TreeSetNodeType(trObjRem, ntfText, vsComp +
#include Bmp_Obj2.vpp
                   );
}

cmRemTreeCloseAll:
{
  var cTemp : comp;
  cTemp := ObjRemDescr.NRec;
  CurGroup := ObjRemDescr.cGroup;
  TreeCloseAllOpenedNode(trObjRem);
  TreeJumpToRecord(trObjRem, cTemp);
  RescanPanel(#ObjRemDescr);
}

cmTreeNeedOwner:
{
  if (ObjRemDescr.cGroup <> UpperGroup)
    TreeJumpToRecord(trObjRem, ObjRemDescr.cGroup);
  else
    TreeJumpToRecord(trObjRem, comp(0));
}

cmRemMove: // перенос узла дерева в новое место
{
  mess_str := 'Режим переноса.'#13#13''+'Желаете перенести объект'#13' '+ObjRemDescr.Name+' ?'#13'';
  if (ObjRemDescr.isLeaf = 0)  // если узел
    mess_str := mess_str + ''#13+'При этом перенесутся все входящие в него объекты.'#13;

  if (Message(mess_str, YesNo+Warning) = cmYes)
  {
    var SavedGroup:comp;
    c_Group := comp(0);
    SavedNrec := ObjRemDescr.NRec;
    SavedGroup := ObjRemDescr.cGroup;
    RunInterface(GetObjRem, cgiPick, c_Group, true, false, true, true);

    if (c_Group = SavedNrec)
      Message('Выбранный узел не может быть переносимым объектом.'#13#13'Перенос невозможен !');
    else

    if (c_Group > comp(0))
    {
      if (getFirst ObjRemDescr where ((c_Group == ObjRemDescr.Nrec)) = tsOk)
      {
        ResetBounds(#ObjRemDescr);
        CurGroup := ObjRemDescr.Nrec;
        if (ObjRemDescr.isLeaf = 1)  // если не узел -> сделать узлом
        {
          ObjRemDescr.isLeaf := 0;
          update current ObjRemDescr;
        }
        if (getFirst ObjRemDescr where ((SavedNrec == ObjRemDescr.Nrec)) = tsOk)
        {
        }
//        {
        ObjRemDescr.cGroup:= CurGroup;  // сменить код группы
        update current ObjRemDescr;

        // проверка - а не пустая ли стала группа после переноса объекта
        if (getFirst ObjRemDescr where((SavedGroup == ObjRemDescr.cGroup)) <> tsOk)
          if (getFirst ObjRemDescr where((SavedGroup == ObjRemDescr.NRec)) =  tsOk)
          {
            ObjRemDescr.isLeaf := 1;    // из группы в лист
            update current ObjRemDescr;
            TreeCloseNode(trObjRem);    // закрыть группу
          }
//        }
        SetBounds(#ObjRemDescr);
        TreeJumpToRecord(trObjRem, SavedNrec);
        RescanPanel(#ObjRemDescr);
        case ObjRemDescr.cTable of
          1 : RescanPanel(#ObjRemDoc);
          2 : RescanPanel(#KatOrg);
          3 : RescanPanel(#KatPodr2);
          4 : RescanPanel(#KatMc);
          5 : RescanPanel(#KatUsl);
          6 : RescanPanel(#TipObj4);
          7 : RescanPanel(#GrObj4);
          8 : RescanPanel(#KatMark4);
          9 : RescanPanel(#KatTexN4);
          10: RescanPanel(#KurRemTree);
          11: RescanPanel(#IspRemTree);
          12: RescanPanel(#SposRemTree);
        end;
        PutCommand(cmPositionChanged);
      }
    }
    else             // Не выбран узел
      if (getFirst ObjRemDescr where ((SavedNrec == ObjRemDescr.Nrec)) = tsOk)
      {
      }
  }
} // cmRemMove

cmDefault:
{
  if (ObjRemDescr.isLeaf <> 1)
  {
    CurTreeFormat := 1;
    if (TreeNodeIsOpen(trObjRem))
      PutCommand(cmTreeCloseNode);
    else
      PutCommand(cmTreeOpenNode);
  }
  else
    PutCommand(cmEdit);
}

cmOpenSearch: // поиск объекта в дереве
{
#include Obj_Find.vpp
}

cmValue2: // генерация нового дерева
{
#include GenObjTr.vpp

  if (getFirst ObjRemDescr = tsOk)
  {
  }
  CurGroup := 0;
  SetBounds(#ObjRemDescr);
  TreeGetFirst(MyTree);
  TreeCloseAllOpenedNode(MyTree);
  PutCommand(cmPositionChanged);
  RescanPanel(#ObjRemDescr);
  SetTitle('Каталог объектов ремонта (всего записей в дереве:'+String(RecordsInTable(#ObjRemDescr))+')');
}

cmLegend: // Alt+U
{
  ResetBounds(#ObjRem3);
  ResetBounds(#NormRem);
  ResetBounds(#Norma);

  Kol_Obj := RecordsInTable(#ObjRem3);
  StartNewVisual(vtIndicatorVisual, vfBreak+vfConfirm+vfTimer, 'Привязка норм к объектам', kol_obj);

  if (getFirst ObjRem3=tsOk)
    do //  ЦИКЛ ПО ObjRem3
    {
      for (U:=1; U<=3; U:=U+1)
      {

        case U of
          1: SavedNrec := comp(2);
          2: SavedNrec := comp(3);
          3: SavedNrec := comp(4);
        end; //case

        if (getFirst Norma where ((SavedNrec == Norma.Nrec)) = tsOk)
        {
          ClearBuffer(#NormRem);
          NormRem.cObjRem  := ObjRem3.Nrec;
          NormRem.Number   := U;
          NormRem.cNorma   := Norma.Nrec;
          NormRem.cVIDREM  := Norma.cVIDREM;
          NormRem.cISPREM  := Norma.cISPREM;
          NormRem.cSPOSREM := Norma.cSPOSREM;
          NormRem.cKURREM  := Norma.cKURREM;
          NormRem.cTIPVED  := Norma.cTIPVED;
          NormRem.METOD    := Norma.METOD;
          NormRem.LONG     := Norma.LONG;
          NormRem.Period   := Norma.Period;
          NormRem.VAR1     := Norma.VAR1;
          NormRem.VAR2     := Norma.VAR2;
          NormRem.VAR3     := Norma.VAR3;
          NormRem.Rejim    := Norma.Rejim;
          NormRem.Name     := Norma.Name;
          insert current NormRem;

          delete PerNoRem where ((NormRem.Nrec == PerNoRem.cNormRem and byte(1) == PerNoRem.PrNorm));

          if (getFirst PerNoRem where ((Norma.Nrec == PerNoRem.cNormRem and byte(0) == PerNoRem.PrNorm)) = tsOk)
          do
          {
            PerNoRem.Nrec     := comp(0);
            PerNoRem.cNormRem := NormRem.Nrec;
            PerNoRem.PrNorm   := byte(1); // признак норматива (0-типовой,1-рабочий)
            insert current PerNoRem;
          }
          while (getNext PerNoRem where ((Norma.Nrec == PerNoRem.cNormRem and byte(0) == PerNoRem.PrNorm)) = tsOk)
        }
      } // for U
    } // КОНЕЦ ЦИКЛА ПО ObjRem3
    while ((getNext ObjRem3 = tsOk) and NextVisual)
  SetBounds(#ObjRem3);
  SetBounds(#NormRem);
  SetBounds(#Norma);
  StopVisual('', 0);
} // cmLegend

end; //HandleEvent

end; //panel
