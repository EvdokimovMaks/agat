//------------------------------------------------------------------------------
//                                                      (c) Корпорация ГАЛАКТИКА
//------------------------------------------------------------------------------
// Галактика 8.1 - Ядро
// Описание требований к настройкам, описание реализации
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
I.  Требования к настройкам
//------------------------------------------------------------------------------
  1. Значения должны начинаться со строчной (маленькой) буквы

  2. По возможности делать ответы на настройки односложными.

  3. Скрывать значения, которые не актуальны при определенных значениях настроек

  4. Наоборот, показывать (в skip-режиме) настройки, которые хоть
     и недоступны для редактирования, но всегда принимают одно и то же значение

  5. Придумывать заголовки для настроек и их значений, удовлетворяющие следующим
     требованиям:
     - лаконичные (особенно значения настроек)
     - говорящие, т.е. из названия настройки должно быть максимально понятна
       ее суть
     - с однозначным толкованием
     - в более-менее едином стиле

    Например:

    вместо

      TR.AddTuneU('Manuf.Nakl501.ParamOpr', 'Параметры списания', ftList, '0', '', hcNastrProizvParamSpis);
        TR.AddList(0, 'при списании не выполнять синхронизацию цен');
        TR.AddList(1, 'при списании устанавливать цены в накладной из расходного ордера');
        TR.AddList(2, 'при списании установить цены в расходном ордере из накладной');

   лучше сразу сделать

      TR.AddTuneU('Manuf.Nakl501.ParamOpr', 'Автоматически синхронизировать цены при списании', ftList, '0', '', hcNastrProizvParamSpis);
        TR.AddList(0, 'нет');
        TR.AddList(1, 'цены из ордера переносить в накладную');
        TR.AddList(2, 'цены из накладной переносить в ордер');

  5. По поводу любого добавления или модификации настроек обращаться к
     ответственному за настройки (tune@galaktika.by)

  6. Необходимо помнить, что для настроек, принимающих значения нет/да
     обязательно должно выполняться 0 = нет.

  7.  Для версии 8.1 hc-константа типа word заменена на хелп константу типа строка.
      Для 5.1 так более правильно и  быстрее грузится интерфейс.
      Т.е. теперь необходимо делать так:
        TR.AddTuneU('Manuf.Nakl501.ParamOpr', 'Параметры списания', ftList, '0', '', 'NastrProizvParamSpis');

//------------------------------------------------------------------------------
II. Разнесение настроек по компонентам (Начиная с версии 8.10)
//------------------------------------------------------------------------------

  Компонента может иметь свой интерфейс создания настроек.
  Для запуска используется механизм точек расширения.
  Смотри CtTune.vih и TuneSpec.Vih.
  Заведены следующие точки расширения:

  // Дата модификации реестра настроек
  // см. описание в CreateTune.vih
  ExtensionPoint epDateModifyTune (TS : ObjStartCrTune);

  // Создание настроек
  // см. описание в CreateTune.vih
  ExtensionPoint epCreateTuneComponent (TR : ObjCreateTune);

  Пример можно найти
  CompSrc\C\C_Tune\VIP\Component\Example\CreateTune_C_Common.vip

  !!! Для обработчиков точки расширения epCreateTuneComponent
      нужно устанавливать приоритет, см. CreateTune.vih

  Чем меньше число, обозначающее приоритет, тем сам больше приоритет
  и тем раньше будет вызван обработчик

  Шаблон реализации точек расширения можно найти
  CompSrc\C\C_Tune\VIP\Component\Template\CreateTune_X_Template.vip

  Вызовы постметодов и интерфейсов для изменения реализованы аналогично.
  Для них реализация объектных интерфейсов обязательна.

  ExtensionPoint epPostTuneComponent (TR : TuneFuncObj; TuneCode : string; TuneObj: LongInt; TuneUser : comp);
  ExtensionPoint epIntrTuneComponent (TuneCode : string; TuneObj: LongInt; TuneUser : comp; Inter : string);
//------------------------------------------------------------------------------


