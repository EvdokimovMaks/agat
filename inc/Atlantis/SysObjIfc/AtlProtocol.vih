#ifndef __AtlProtocol__
#define __AtlProtocol__

#Component ""


// Типы событий
const 
   APE_NONE         = 0;  // не определено
   APE_BREAK        = 1;  // пользователь прервал процесс
   APE_ERROR        = 2;  // ошибка
   APE_WARNING      = 3;  // предупреждение
   APE_CAUTION      = 4;  // предостережение
   APE_REMARK       = 5;  // замечание 
   APE_NOTIFICATION = 6;  // оповещение
   APE_MESSAGE      = 7;  // сообщение
   APE_INFO         = 8;  // информация
end;


// ──────────────────────────────────────

ObjInterface IAtlProtocol;    // #docl Объектный интерфейс для ведения универсального протокола. </brief>
public:

  property    Visible         // #docl Чтение /Запись <br> Показать /скрыть окно протокола. </brief>
                       : Boolean Read Write;

  property    AutoFlush       // #docl Чтение /Запись <br> Автоматическое параллельное сохранение протокола. Если свойство установлено в значение true, протокол по мере заполнения дублируется в файле, указанном в свойстве <link property LogFile><b>LogFile</b></link>. </brief>
                       : Boolean Read Write;

  property    CurParent       // #docl Чтение /Запись <br> Идентификатор вышестоящей записи. </brief>
                       : Longint Read Write;

  property    LogFile         // #docl Чтение /Запись <br> Файл для автоматического параллельного сохранения протокола (см. свойство <link property AutoFlush><b>AutoFlush</b></link>). </brief>
                       : String Read Write;

  function    LogRoot         // #docl Создать запись, которая будет являться узлом в иерархической структуре протокола. </brief>
                     (aStr    // #docl Описание события. </brief>
                       : String): Longint;    // #docl Возвращаемое значение: идентификатор записи. </brief>

  function    LogLine         // #docl Создать запись в протоколе. </brief>
                     (aType   // #docl Тип события: ошибка, предупреждение, etc. </brief>
                       : byte; aStr           // #docl Описание события. </brief>
                       : String): Longint;    // #docl Возвращаемое значение: идентификатор записи. </brief>

  function    LogCommit       // #docl Завершение работы с текущим узлом иерархии. Все записи узла анализируются, выявляется наименьшее значение типа событий (наиболее критичное), этот тип присваивается узлу. </brief>
                       : byte;                // #docl Возвращаемое значение: тип события корневой записи (узла). </brief>

  function    LogStartVisual  // #docl Запустить визуализацию с открытием корневого узла иерархии. </brief>
                     (aStr    // #docl Заголовок визуализации. </brief>
                       : String; aCount       // #docl Количество обрабатываемых записей. Если aCount=0, стартует прокручиваемая визуализация. </brief>
                       : Longint): Longint;   // #docl Возвращаемое значение: идентификатор созданной записи-узла. </brief>

  function    LogNextVisual   // #docl Продолжить визуализацию, перейти к следующему шагу. </brief>
                     (aStr    // #docl Заголовок визуализации. </brief>
                       : String): boolean;    // #docl Возвращаемое значение: признак продолжения процесса. Если false, пользователь прервал процесс. </brief>

  function    LogStopVisual   // #docl Завершить визуализацию с закрытием корневого узла. </brief>
                       : byte;                // #docl Возвращаемое значение: тип события корневой записи (узла). </brief>

  function    LogMessage      // #docl Создать запись в протоколе. </brief>
                    (aType    // #docl Тип события: ошибка, предупреждение, etc. </brief>
                      : byte; aStr            // #docl Описание события. </brief>
                      : String): Longint;     // #docl Возвращаемое значение: идентификатор записи. Этот идентификатор присваивается свойству CurParent. </brief>

  function    LogMessageEx    // #docl Создать запись в протоколе. </brief>
                    (aType    // #docl Тип события: ошибка, предупреждение, etc. </brief>
                      : byte; aStr            // #docl Описание события. </brief>
                      : String; aParent       // #docl Ссылка на вышестоящий элемент-узел иерархии. </brief>
                      : Longint): Longint;    // #docl Возвращаемое значение: идентификатор записи. </brief>

  function    LogCompilerMessage // #docl Создать запись в протоколе, предварительно вычленив из описания события его тип. Подразумевается, что передаваемая строка является сообщением из лога компиляции компилятором vip.</brief>
                    (aStr     // #docl Описание события. Ожидается строка лога компиляции компилятора vip. </brief>
                      : String): Longint;     // #docl Возвращаемое значение: идентификатор записи. </brief>

  function    LogMessageCommit   // #docl Завершение работы с узлом иерархии. Все записи узла анализируются, выявляется наименьшее значение типа событий (наиболее критичное), этот тип присваивается узлу. </brief>
                    (aParent     // #docl Идентификатор узла. с которым завершается работа. </brief>
                      : Longint): byte;       // #docl Возвращаемое значение: тип события корневой записи (узла). </brief>

  function    GetRecordStatus // #docl Получить тип события по идентификатору записи протокола. </brief>
                    (aID      // #docl Идентификатор записи. </brief>
                      : Longint): byte;       // #docl Возвращаемое значение: тип события записи. </brief>

  procedure   Clear;          // #docl Очистить протокол. </brief>
  procedure   Refresh;        // #docl Обновить содержимое протокола. </brief>
end;


// ──────────────────────────────────────

VipInterface AtlProtocol; forward;

VipInterface AtlProtocol      // #docl Интерфейс для ведения универсального протокола. </brief>
   implements IAtlProtocol
   licensed (free);
public:
  constructor Init;           // #docl Конструктор. </brief>
  constructor InitAsPrivate;  // #docl Конструктор для создания приватного (неразделяемого) экземпляра. </brief>
  constructor Clone (aLog: AtlProtocol);      // #docl Конструктор для клонирования протокола по предоставленной ссылке. </brief>
  destructor  Done;           // #docl Деструктор. </brief>

  procedure   ShowLog         // #docl Показать протокол в модальном окне. </brief>
                    (aShow    // #docl Если true - показать, если false - закрыть. </brief>
                      : boolean);

  event function  OnDefault   // #docl Оповещение о нажатии Enter на определенной записи протокола. </brief>
                    (lID      // #docl Идентификатор записи. </brief>
                      : Longint; lMessage     // #docl Описание события. </brief>
                      : String) : Word;
end;

#endif
