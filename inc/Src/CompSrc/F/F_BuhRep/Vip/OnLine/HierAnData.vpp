//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 5.80 - модуль "Платежный календарь"
// Описание элементов построителя деревьев для ИАО
//------------------------------------------------------------------------------

#ifndef __HierAnTreeNew_Vpp__
#define __HierAnTreeNew_Vpp__

#ifdef ComponentVersion
#Component "F_BuhRep"
#end

Type
  TTreeSums = array [0..25] of double;

//******************************************************************************
// таблица для хранения всех названий уровней
Table struct sNewTreeNames
(
  nRec    : comp  ,
  Code    : word  ,  // номер отчета
  Name    : string,  // название узла
  isKau   : word,    // для поиска перед тем, как добавить
  wTable  : word,    //
  cTable  : comp     //
)
with index
(
  byNRec = nRec(unique, surrogate),
  byName = Code + Name,
  byTable = Code + isKau + wTable + cTable
);

//******************************************************************************
// структура дерева
Table struct sNewTempDescr
(
  nRec     : comp,      // nRec
  RecType  : word,      // тип записи
  cRec     : comp,      // запись, которую привязываем
  Param    : longint,   // для дополнительной подцепки
  Code     : word,      // номер иерархии (м б несколько одновременно)
  cGroup   : comp,      // вышестоящий
  isLeaf   : word,      // 1 - лист, 0 - узел
  Level    : word,      // номер уровня (подряд)  -> TreeLevel
  GroupNum : word,      // номер группировки (=номер нераскрытого уровня)
  
  // TODO delete (?) после оптимизации
!  HierNum  : word,      // уровень раскрытой иерархии (для раскрытого КАУ =0..numKauLevels
                        // 0 - нижний, 1 - его группа, 2 - ее группа и т.д.)
  TipSch   : word,      // активный/пассивный/активно-пассивный
  wTable   : word,      // код таблицы
  cName    : comp,      // ссылка на название уровня
  SortName : longint,
  Sums     : array [0..25] of double,
  cEd      : comp,       // ссылка на название единицы измерения
  IsZeroEd : boolean,  //совпадают(true) или нет единицы измерения
  IsKol    : boolean   //количественный учет по уровню
)
with index
(
  byNRec     = nRec (Unique, Surrogate),          
  bySortName = Code + cGroup + isLeaf + SortName, 
  byLevel    = Code + isLeaf + Level,             
  byNGroup   = Code + GroupNum,
  byName     = Code + cGroup + cName             
);                                                


// привязка к документам

Table struct sNewTempIer
(
  Code     : byte,   // для удаления
  cRec     : comp,
//  cRecDs   : comp,   // TODO delete
  cGroup   : comp,
  SortName : LongInt
)
with index
(
  byCode  = Code,
//  byRecDs = cGroup + cRecDs,     // TODO delete
  bySort  = cGroup + SortName
);

// таблица сортировок

Table struct TblSorts
(
   RecNo    : longint
  ,SortName : string
  ,Npp      : longint
)
With Index
(
   TblSorts01 = RecNo (AutoInc)
  ,TblSorts02 = SortName
);

table struct TreeHiers
(
  wKau    : word,
  cKau    : comp,
  cParent : comp
)
with index
(
  TreeHiers01 = wKau + cKau
);


// таблица для связей между узлами "Группа организаций" -> "Организация"
// используется для правильного подсчета итогов по группам организаций
table struct mtGrOrgNodes
(
  cGrOrgNode : comp,   // ссылка на узел Группа организаций
  cOrgNode   : comp,   // ссылка на узел Организация
  cOrg       : comp    // Nrec организации
)
with index
(
  idx01 = cGrOrgNode + cOrgNode,
  idx02 = cGrOrgNode + cOrg
);


// описание текущей записи, по которой строится ветка дерева

type TRecData = record
  RecType  : word;            // тип записи
  VidSumEx : word;            // сальдо/обороты
  cRec     : comp;            // описание записи (доп.поля)
  SortName : string;          // строка для сортировки
  NameLeaf : string;
  NumLevels: word;            // число уровней
  
  // для сверки сальдо
  TipSch   : word;            // тип счета (для аналитических отчетов)
  TipSchSub: word;            // тип счета на субсчете (может отличаться от TipSch, в разных случаях используется один из двух)
  
  Sums     : TTreeSums;
  cEd      : comp;            //единица измерения
end;


#end //__HierAnTreeNew_Vpp__
