/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 2003 корпорация ГАЛАКТИКА                         ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Основные средства                                         ║
 ║ Версия        : 6.0                                                       ║
 ║ Назначение    : Расчет амортизации ОС или НМА                             ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/
#ifndef __AMORT_VIH__
#define __AMORT_VIH__

#Component "F_OSOPER"
#doc
Расчет амортизации ОС или НМА
#end

//------------------------------------------------------------------------------
// Параметры рассчета Амортизации
type TCalcAmortParm = record
  // Расчет
  isReCalcOldAmort   : boolean;    // 1 пересчитывать старые значения
  isMakeOborot       : boolean;    // 2 формирование проводок при расчете амортизации при переходе на след. период
  isLgota            : boolean;    // 4 учитывать амортизационную льготу
  isCalcOsRazn       : boolean;    // 8 рассчитывать разницу данных
  isAmortFuture      : boolean;    // 16 учитывать амортизацию будущих периодов
  isAnalizLinkTxo    : boolean;    // 32 анализировать наличие привязанной ТХО
  isOperCorectAmort  : boolean;    // 64 учитывать операцию "корректировка амортизации"
  isOperCorectRazn   : boolean;    // 128 учитывать операцию "корректировка разниц"

  // Отмена
  isCorectOborot     : boolean;    // 1 корректировать проводки
  isCorectRazn       : boolean;    // 2 корректировать разницу данных

  wProtCalc_Amort    : word;       // Признак формирования протокола при расчете/отмене амортизации (0-нет, 1-только ошибки, 2-полный)
  wProtDetail        : word;       // Уровень детализации протокола расчета амортизации


  IsCheckKatOsPeriod : boolean;    // проверка наличия ИК не в текущем периоде и проверка ИК на предмет доступности данному пользователю

  IsCalcAmLgotaBuh   : boolean;    // битовая маска учета выполнения расчета аморт.льгот в тек.сеансе расчета амортизации для Бухгалтерского метода учета
  IsCalcAmLgotaNal   : boolean;    // битовая маска учета выполнения расчета аморт.льгот в тек.сеансе расчета амортизации для Налогового метода учета

  wModeMakeOborot    : word;       // Режим формирования проводок
end;


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
ObjInterface ObjAmort;
//------------------------------------------------------------------------------
#doc
  Инициализация параметров интерфейса
#end
  procedure InitAmortParams(In_TipDock : word;    // тип документа
                            In_c1      : word;    // 1 - расчет, 2 - отмена
                            In_c11     : comp     // Nrec метода учета
                           );

//------------------------------------------------------------------------------
#doc
  Запись рассчитанного износа в SpMove и SoprHoz
#end
  procedure UpdateItogResults;

//------------------------------------------------------------------------------
#doc
  Инициализация отчёта со списком ошибок
#end
  procedure InitAmortErrorReport;
//------------------------------------------------------------------------------
#doc
  Вывод списка ошибок, обнаруженных при расчёте амортизации
#end
  procedure ShowErrReport;
//------------------------------------------------------------------------------
#doc
  Получить последнее значение ошибки
#end
  Function GetLastError :string;
//------------------------------------------------------------------------------
#doc
  Выдача предупреждений, в случае нахождения карточек не в текущем периоде или
  карточек с дескриптором другого пользователя...
#end
  //возвращает True если выбрано продолжение расчёта, иначе - False
  function ShowDiffPerAndUser(In_sMessage : string  //текст сообщения в выдаваемом окне
                             ) : boolean;
//------------------------------------------------------------------------------
#doc
  Проверка наличия ИК не в текущем периоде и проверка ИК на предмет доступности данному пользователю
#end
Procedure CheckKatOsPeriod(_bUsePick      : boolean; //True - расчёт идёт по Pick-у, иначе - False
                           _dDatOb        : date;    //дата операции
                           _wTiDk         : word     //15-ОС, 16-НМА
                          );
//------------------------------------------------------------------------------
#doc
  Распределение начисленного износа по спецификации ОС по МЦ
#end
  procedure FillSpOsMcWithAmort(In_cKatOs   : comp;    //ссылка на ИК
                                In_cNastrOs : comp;    //ссылка на метод учёта
                                In_SIznM    : tSumma;  //начисленный износ, подлежащий распределению
                                In_DatOb    : date;    //дата начисления амортизации
                                In_wMode    : word     //настройка на вид распределения
                               );
//------------------------------------------------------------------------------
#doc
  Установка флага необходимости работы с разностями данных
#end
  //возвращает False если что-то не так в настройках...
  function CheckNeedCalcOsRazn(In_bCallFromAmort : boolean; //True - если вызывается из данного интерфейса
                               In_wTiDk          : word     //15-ОС, 16-НМА
                              ) : boolean;
//------------------------------------------------------------------------------
#doc
  Инициализация переменных для РАСЧЕТА амортизации
#end
  Procedure InitAmortParamForCalc(In_TipDock : word;    // тип документа
                                  In_c1      : word;    // 1 - расчет, 2 - отмена
                                  In_c11     : comp    // Nrec метода учета
                                 );
//------------------------------------------------------------------------------
#doc
  Расчет амортизации на заданную дату ...
#end
  // возвращаем  0 - все нормально
  //             1 - нет метода начисления
  //             2 - метод возвращает неверный результат
  //             4 - в этом месяце не надо считать
  //             5 - Начисление амортизации - НЕТ либо КОНСЕРВАЦИЯ
  //             6 - в этом месяце не надо считать согласно доп.информации
  //                 ( дат ввода, выбытия, поступления и прочих параметров... )
  // doSumAmort - амортизация за период (месяц, квартал... согласно метода учета)
  // doAmortAlg - рассчитанное по алгоритму значение без поправок
  Function CalcAmortAbstract( cRecKatOS, cRecNastrOS, cRecAlgCalc: comp;  dOperAmort: date;
                              var doSumAmort, doAmortAlg :tSumma
                            ): word;
//------------------------------------------------------------------------------
#doc
  Наполнение таблицы в памяти значениями величин изменения стоимости по объектам ОС
  для амортизационной льготы
#end
  //   Sum1 - величина изменения стоимости подлежащая амортизационной льготе
  //          для проведения амортизации
  //   Sum2 - накопленная величина изменения стоимости подлежащая амортизационной льготе
  //   Sum3 - накопленная величина изменения стоимости не подлежащая амортизационной льготе
  //   Sum4 - величина изменения стоимости не подлежащая амортизационной льготе
  //   CurSumL - величина амортизационной льготы текущего отчетного периода
  //   AllSumL - накопленная величина амортизационной льготы
  // за ЕДИНИЦУ учета ОС(НМА)
  Function GetSumCalcAmortLgota( In_cKatOs
                               , In_cNastrOs: comp;
                                 In_dAmortOper      // дата операции начисления износа
                               , In_dBegOper        // начальная дата периода
                               , In_dEndOper: date; // конечная дата периода
                                 wMode      : word  // 0 - без детализации,
                                                    // 1 - по датам
                                                    // 2 - операции изменения стоимости текущего периода
                               ): boolean;
//------------------------------------------------------------------------------
#doc
  Значение величины изменения срока использования ОС/НМА на дату
#end
  Function GetValue_SrokUsedOS(_cKatOS, _cNastrOS, _cOsAlg: comp; dOper: date) : tSumma;
//------------------------------------------------------------------------------
#doc
  Наименование ошибки при расчете амортизации
#end
  Function GetStrErrorRasAmort(wError: word): string;

//------------------------------------------------------------------------------
#doc
  Установка/снятие ограничений для расчета амортизации на основании таблиц в памяти
#end
  Procedure SetBoundsForCalcAmortAbstract(pwMode: word);
//------------------------------------------------------------------------------
#doc
  Абстрактный расчет амортизации на заданную дату на основании буферов KatOS и NastrOS
#end
  // wParamCalc - доп.параметры расчета
  // doSumAmort - амортизация за период
  // doAmortAlg - рассчитанное по алгоритму значение без поправок
  Function CalcAmortAbstractEx( _cKatOs : comp;
                                _cNastrOS : comp;
                                cRecAlgCalc: comp;
                                dOperAmort: date;
                                wParamCalc: word;
                                var doSumAmort
                                  , doAmortAlg :tSumma
                              ): word;
//------------------------------------------------------------------------------
#doc
  Должна ли быть и/или рассчитана амортизация в заданном отчетном периоде
#end
  Function CanMustCalcAmort(_cKatOS, _cNastrOS, _cOsAlg: comp; dOper: date) : boolean;
//------------------------------------------------------------------------------
#doc
  Количество пропущенных расчетов амортизации для ИК за период
#end
  Function GetMissingCalcAmort(pcKatOS, pcNastrOS : comp; pdBeg, pdEnd: date) : integer;

//------------------------------------------------------------------------------
#doc
  Правило формирования проводок для хозяйственных операций по операции амортизация
#end
  Function SetParamByOborot(pwParam: word): word;

//------------------------------------------------------------------------------
// Расчет амортизации для одной ИК.  In_bFromAmort - из Администратора или Картотеки
  Procedure AmortLeaf(In_cKatOs : comp);

  procedure SetAmortParm( _ap : TCalcAmortParm );
  function  GetAmortParm : TCalcAmortParm;

//------------------------------------------------------------------------------
// ПИР 102.86543
  Function GetComplementSrokIsp_RB(pcKatOS, pcNastrOS: comp; pdBeg, pdEnd: date) : tSumma;

// Расчет амортизации по выбранным МУ и выбранным Ос за указанный период
  Function CalcAmort (_dtAmort: date): boolean;

// Расчет по Alt+S для одной кариочкм
Procedure RasAmorForInform (_TiDk: word; _cKatOs: comp; _cNastrOs: comp; _isMsg : boolean; var _ValueAmort : tSumma; var _ValueAmortPer : tSumma);

end;  // ObjAmort


//------------------------------------------------------------------------------
// Свойтво для точки расширения  epDeleteOborotForPickedOS
ObjInterface IAmortExt;
  property isRunDeleteOborot : boolean read write;   // Надо ли выпонять стандартную процедуру удаления проводок по выбранным ОС.
end;                                                 // Если isRunDeleteOborot = false, то стандартная процедура удаления не выполняется.


//------------------------------------------------------------------------------
#doc
Точка расширения epDeleteOborotForPickedOS. Вызывается для удаления проводок по части картотеки при отмене амортизации или расчете по части картотеки.
</brief>
  Вызывается из интерфейса расчета-отмены амортизации Amort.
  Вызывается при отмене амортизации, если для удаления проводок задан парметр проводки по операции амортизация - "удалять с аналитикой по ОС/НМА в проводке".                  `
  Если обработчик точки расширения вернет FALSE, то стандартная функция удаления проводок (DeleteObSpMoveForPickedOS) не вызываются.
  Параметры:
 <p> _wTip     - 15-ОС, 16-НМА. <br>
 <p> _cSoprHoz - ссылка на SoprHoz. <br>
 Карточки по которым производится отмена амортизации занесены в таблицу Pick с wlist = 120 (cgPick_KatOs120);
 pAmortExt - ссылка на объектный интерфейс IAmortExt.
#end
ExtensionPoint epDeleteOborotForPickedOS(_wTip: word; _cSoprHoz: comp; pAmortExt : IAmortExt);


//------------------------------------------------------------------------------
#doc
Точка расширения. Вызывается для расчета разниц по выбранным карточкам в указанный период.
</brief>
 <p> Вызывается из интерфейса Amort (расчет амортизации). Вызывается один раз для всех выбранных ИК. <br>
  Перед вызовом НЕ создается запись таблицы OsRazn для указанного периода. Но она создается при переходе на следующий период.
  Операция корректировки разниц НЕ выполняется.
  Амортизационная льгота рассчитывается согласно параметрам расчета амортизации.
  Если обработчик точки расширения вернет FALSE, то алгоритмы расчета разниц не вызываются.
  Параметры:
 <p> _dDate  - дата расчета. <br>
 <p> _wList  - код (Pick.wList) <br>
 <p> _KolOs  - количество выбранных карточек. <br>
#end
ExtensionPoint epCalcRaznPick (_dDate: date; _wList: word; _KolOs : LongInt);

//------------------------------------------------------------------------------
#doc
Точка расширения. Вызывается для отмены расчета разниц по выбранным карточкам в указанный период.
</brief>
 <p> Вызывается из интерфейса Amort (расчет амортизации). Вызывается один раз для всех выбранных ИК. <br>
  Если обработчик точки расширения вернет FALSE, то отмена расчета разниц не вызываются.
  Параметры:
 <p> _dDate  - дата расчета. <br>
 <p> _wList  - код (Pick.wList) <br>
 <p> _KolOs  - количество выбранных карточек. <br>
#end
ExtensionPoint epUndoCalcRaznPick (_dDate: date; _wList: word; _KolOs : LongInt);


//------------------------------------------------------------------------------
VipInterface Amort Implements ObjAmort, IAmortExt
  Parameters
  (
    TipDock : word; // тип документа
    c1      : word; // 1 - расчет, 2 - отмена
    c11     : comp; // Nrec метода учета
    c4      : comp  // NRec - ссылка на операцию
  )
  Licensed  (FREE);

#end // __AMORT_VIH__
