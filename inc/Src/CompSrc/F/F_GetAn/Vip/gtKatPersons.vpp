// несколько шаблонов, объединенных в один универсальный
// (получается шаблон в шаблоне :)
// cgKau_Persons - интерфейс у которого корневая таблица Persons
// cgKau_mt_Persons - интерфейс с корневой таблицей mt_Persons(таблица в памяти)
// в эту таблицу выгружаются записи из Persons в соответствии с разграничением прав по
// структурным единицам штатного расписания

#declare AddKauTitle
  if (MyEmployee = 'С',
    if (AddMode = 0, '[Работающие]',
    if (AddMode = 1, '[Уволенные]',
    if (AddMode = 2, '[Текущие]', '[???]'))),
  if (MyEmployee = 'У', '[Архив]',if (MyEmployee = ''#0, '[Все]','[???]'))) +
! "Приказ" светить не будем, т.к. это еще не сотрудники предприятия
! так сказали Магниченко и Мохова
!  if (MyEmployee = 'П', '[Приказ]','[???]'))) +
  if (MyPodr <> 0,'[Подр:' +
    if (GetAnyKAU(cgAkSimple, cgKau_KatPodr, MyPodr),GivenAnName(cgAnName),'') + ']', '')
#end

#ifdef Gal9_1
  #define TypeEmployee s1
#else
  #define TypeEmployee char
#end
#declare AddKauVars
  MyPodr     : comp;
  MyEmployee : #TypeEmployee;
  AddMode    : word;   // 0 - работающие
                       // 1 - уволенные
                       // 2 - текущие (работающие + уволенные)
  SavedMode  : byte;

  Departments : UserDepartmentsLimiter;
  UserDepartments: UserDepartmentsIterator;
  InsZarS    : IncRecordToZarsignal; // для получения Persons.Department по Persons.GalDep
  RightsMarker : TPtr;
#end

#declare AddKauParameters
  ,MyPodr                                             // Фильтр по подразделению
#end

#declare PrivateFindPickedDoc
  var DateChanged: boolean;
  var TmpMode : word;

  if (cSavedKau <> 0)
  {
    if (GetFirst #KauTable where ((cSavedKau == #KauTable.NRec)) = tsOk)
    {
      MyEmployee := #KauTable.isEmployee;
      if (#KauTable.DisDate > Date(0,0,0))
        AddMode := 1;
      else
        AddMode := 0;

      if (ReadMyDsk(TmpMode, #DskConst+'_AddMode', DateChanged))
      {
         case TmpMode of
           2: AddMode := word(2);
           3:{AddMode := 3; MyEmployee := ''#0;}
         end;

      }
      PersonsBounds;
      ReReadRecord(##KauTable);
      Exit;
    }
  }
#end

#declare BrowseFields
  #KauTable.FIO                      'Физические лица'   : [42], Protect;
  #KauTable.TabNmb                   'Таб. номер'        : [10], Protect;
  #KauTable.StrTabN                  'Таб. номер'        : [10], Protect;
  [Podr1] GetFulDepNameOrPodr(true)  'Подразделение'     : [21], Protect;
  [Podr2] GetFulDepNameOrPodr(false) 'Структурное подр.' : [21], Protect;
#end

#declare QuickChoiceFields
  ViewField = #KauTable.FIO;
  ViewField = #KauTable.TabNmb;
  ViewField = #KauTable.StrTabN;
  SearchField = #KauTable.FIO;
#end
#declare KauBounds
  bounds    GetByEmployee  = MyEmployee == #KauTable.IsEmployee ordered by TableOrder

  condition GetByPodr      = iKatPodrGr.isLeafPodr(MyPodr, #KauTable.GalDep)
  condition GetByAllEmp    = char('С') = #KauTable.IsEmployee or
                             char('У') = #KauTable.IsEmployee
  condition GetByDismiss   = date(0,0,0) <  #KauTable.DisDate
  condition GetByNoDismiss = date(0,0,0) =  #KauTable.DisDate
#end
#declare KauOrders
  order byName      by #KauTable.IsEmployee, #KauTable.FIO
  order byTabNumber by #KauTable.IsEmployee, #KauTable.TabNmb, #KauTable.StrTabN
#end
#declare KauOrdersCase
  ##KauTable.FIO: SetOrder(tiByName);
  ##KauTable.TabNmb, ##KauTable.StrTabN: SetOrder(tiByTabNumber);
#end
#ifdef mt_Persons
  #ifdef Atl60
#declare AddKauTables
, KatPodr                (ReadOnly)
, UserAccess             (ReadOnly)
, Persons    PersonsSyn1 (ReadOnly)
, Persons    PersonsSyn2 (ReadOnly)
    , GroupMembers GrMembers (ReadOnly)
    #end
  #else
    #declare AddKauTables
    , KatPodr                (ReadOnly)
    , UserAccess             (ReadOnly)
    , Persons    PersonsSyn1 (ReadOnly)
    , Persons    PersonsSyn2 (ReadOnly)
    , GroupUsers GrMembers   (ReadOnly)
#end
  #end
#else
#declare AddKauTables
, KatPodr                (ReadOnly)
#end
#endif

#ifdef mt_Persons
  #ifdef Atl60
#declare AddLogTableBounds
      and UserId == GrMembers.ObjCode
      and 0 == GrMembers.ObjType
  and char(0)          << #KauTable.IsEmployee
  and #KauTable.GalDep == KatPodr.NRec

  and char('С') == PersonsSyn1.IsEmployee and (FoundMarker(RightsMarker, PersonsSyn1.Department))

  and char('У') == PersonsSyn2.IsEmployee and (FoundMarker(RightsMarker, PersonsSyn2.Department))
    #end
  #else
    #declare AddLogTableBounds
      and UserId == GrMembers.UserCode
      and char(0)          << #KauTable.IsEmployee
      and #KauTable.GalDep == KatPodr.NRec
      and char('С') == PersonsSyn1.IsEmployee and (FoundMarker(RightsMarker, PersonsSyn1.Department))
      and char('У') == PersonsSyn2.IsEmployee and (FoundMarker(RightsMarker, PersonsSyn2.Department))
    #end
#end
#else
#declare AddLogTableBounds
  and char(0)          << #KauTable.IsEmployee
  and #KauTable.GalDep == KatPodr.NRec
#end
#endif

#ifdef AllAccess   // ветка отсутствия контроля по настройке  Fin.Anal.Access.Persons
#ifdef mt_Persons  // при включенном разграничении прав
#declare AddInitAction

  // !! нельзя делать через вычисляемое поле, иначе потеряется быстрый поиск (см. ПИР 101.36203)
  if wGetTune('FormatClockNumber') = 0
    ClearFieldState(##KauTable.StrTabn, sfVisible);
  else
    ClearFieldState(##KauTable.TabNmb, sfVisible);


  if (not CheckKatPodrRights)
    Message('Ошибки при вставке записей', Information);

  // восстановить запомненный режим
  var DateChanged: boolean;

  SavedMode := 6; // покажем всех. т.к. если передается ссылка, то она может не попасть в поставл. ограничения

  if cKau = comp(0) // если ссылка на сотрудника не передается, нет сохраненного режима, то покажем работающих
    // независимо от таблицы Persons, mt_Persons ссылку на сотрудника сохраняем в одно место
    if (not ReadMyDsk(SavedMode, #DskConst+'_SavedMode', DateChanged))
      SavedMode := 1;

  if (MyPodr <> 0)
    if (GetFirst #KauTable where ((cKau == #KauTable.nRec)) = tsOk)
      if (MyPodr <> #KauTable.GalDep)
        MyPodr := 0;

  SetMode(SavedMode);

  if (MyPodr = 0)
    DisableCommand(cmValue11);  // снять фильтр

  if (GetFirst #KauTable <> tsOk)
    if (boGetTune('UP.UsePersons')  and (UserDepartments.First = 0))
      Message('Нет доступных подразделений. Права доступа задаются в интерфейсе:'#13
            + '"Управление персоналом - Настройка - Права доступа - к структурным единицам штатного расписания"', Information);
    else
      Message('Нет сотрудников ' + if(MyPodr <> 0, 'по указанному подразделению ', '') + 'для выбора', Information);

#end //AddInitAction
#else //mt_Persons
#declare AddInitAction
  // !! нельзя делать через вычисляемое поле, иначе потеряется быстрый поиск (см. ПИР 101.36203)
  if wGetTune('FormatClockNumber') = 0
    ClearFieldState(##KauTable.StrTabn, sfVisible);
  else
    ClearFieldState(##KauTable.TabNmb, sfVisible);

  // восстановить запомненный режим
  var DateChanged: boolean;

  SavedMode := 6; // покажем всех. т.к. если передается ссылка, то она может не попасть в поставл. ограничения

  if cKau = comp(0) // если ссылка на сотрудника не передается, нет сохраненного режима, то покажем работающих
    // независимо от таблицы Persons, mt_Persons ссылку на сотрудника сохраняем в одно место
    if (not ReadMyDsk(SavedMode, #DskConst+'_SavedMode', DateChanged))
      SavedMode := 1;

  if (MyPodr <> 0)
    if (GetFirst #KauTable where ((cKau == #KauTable.nRec)) = tsOk)
      if (MyPodr <> #KauTable.GalDep)
        MyPodr := 0;

  SetMode(SavedMode);

  if (MyPodr = 0)
    DisableCommand(cmValue11);  // снять фильтр

  if (GetFirst #KauTable <> tsOk)
    if (boGetTune('UP.UsePersons')  and (UserDepartments.First = 0))
      Message('Нет доступных подразделений. Права доступа задаются в интерфейсе:'#13
            + '"Управление персоналом - Настройка - Права доступа - к структурным единицам штатного расписания"', Information);
    else
      Message('Нет сотрудников ' + if(MyPodr <> 0, 'по указанному подразделению ', '') + 'для выбора', Information);
#end  //AddInitAction
#endif //mt_Persons
#else  //AllAccess
#ifdef mt_Persons
#declare AddInitAction
  if (wGetTune('Fin.Anal.Access.Persons') = 0)
  {
    Message('Согласно настройке ' +
            ''#13 + GetTuneName('Fin.Anal.Access.Persons') +
            ''#13 + 'выбор значения аналитики невозможен.', Information);
    Abort;
    Exit;
  }

  // !! нельзя делать через вычисляемое поле, иначе потеряется быстрый поиск (см. ПИР 101.36203)
  if wGetTune('FormatClockNumber') = 0
    ClearFieldState(##KauTable.StrTabn, sfVisible);
  else
    ClearFieldState(##KauTable.TabNmb, sfVisible);

  if (not CheckKatPodrRights)
    Message('Ошибки при вставке записей', Information);

  // восстановить запомненный режим
  var DateChanged: boolean;

  SavedMode := 6; // покажем всех. т.к. если передается ссылка, то она может не попасть в поставл. ограничения

  if cKau = comp(0) // если ссылка на сотрудника не передается, нет сохраненного режима, то покажем работающих
    // независимо от таблицы Persons, mt_Persons ссылку на сотрудника сохраняем в одно место
    if (not ReadMyDsk(SavedMode, #DskConst +'_SavedMode', DateChanged))
      SavedMode := 1;

  if (MyPodr <> 0)
    if (GetFirst #KauTable where ((cKau == #KauTable.nRec)) = tsOk)
      if (MyPodr <> #KauTable.GalDep)
        MyPodr := 0;

  SetMode(SavedMode);

  if (MyPodr = 0)
    DisableCommand(cmValue11);  // снять фильтр

  if (GetFirst #KauTable <> tsOk)
    if (boGetTune('UP.UsePersons')  and (UserDepartments.First = 0))
      Message('Нет доступных подразделений. Права доступа задаются в интерфейсе:'#13
            + '"Управление персоналом - Настройка - Права доступа - к структурным единицам штатного расписания"', Information);
    else
      Message('Нет сотрудников ' + if(MyPodr <> 0, 'по указанному подразделению ', '') + 'для выбора', Information);

#end //AddInitAction
#else //mt_Persons
#declare AddInitAction
  if (wGetTune('Fin.Anal.Access.Persons') = 0)
  {
    Message('Согласно настройке ' +
            ''#13 + GetTuneName('Fin.Anal.Access.Persons') +
            ''#13 + 'выбор значения аналитики невозможен.', Information);
    Abort;
    Exit;
  }

  // !! нельзя делать через вычисляемое поле, иначе потеряется быстрый поиск (см. ПИР 101.36203)
  if wGetTune('FormatClockNumber') = 0
    ClearFieldState(##KauTable.StrTabn, sfVisible);
  else
    ClearFieldState(##KauTable.TabNmb, sfVisible);

  // восстановить запомненный режим
  var DateChanged: boolean;

  SavedMode := 6; // покажем всех. т.к. если передается ссылка, то она может не попасть в поставл. ограничения

  if cKau = comp(0) // если ссылка на сотрудника не передается, нет сохраненного режима, то покажем работающих
    // независимо от таблицы Persons, mt_Persons ссылку на сотрудника сохраняем в одно место
    if (not ReadMyDsk(SavedMode, #DskConst + '_SavedMode', DateChanged))
      SavedMode := 1;

  if (MyPodr <> 0)
    if (GetFirst #KauTable where ((cKau == #KauTable.nRec)) = tsOk)
      if (MyPodr <> #KauTable.GalDep)
        MyPodr := 0;

  SetMode(SavedMode);

  if (MyPodr = 0)
    DisableCommand(cmValue11);  // снять фильтр

  if (GetFirst #KauTable <> tsOk)
    if (boGetTune('UP.UsePersons')  and (UserDepartments.First = 0))
      Message('Нет доступных подразделений. Права доступа задаются в интерфейсе:'#13
            + '"Управление персоналом - Настройка - Права доступа - к структурным единицам штатного расписания"', Information);
    else
      Message('Нет сотрудников ' + if(MyPodr <> 0, 'по указанному подразделению ', '') + 'для выбора', Information);
#end  //AddInitAction
#endif //mt_Persons
#endif //AllAccess

#declare AddReturnAction
  SaveMode;
  // для аналитики cgKau_KatPersons выбранное значение запишем в cgKau_Persons 102.111825
  SaveMyDsk(#KauTable.NRec,'Gt_Saved_cKau_' + #DskConst);
#end

#declare EditCommand
{
  if (CurField <> #Podr2)
    RunInterface('ReceptionT2',   #KauTable.NRec);
  else
    RunInterface('ReceptionMain', #KauTable.NRec);
}
#end
#declare AddCommand
  RunInterface('ReceptionT2', comp(-1));
#end

#ifdef mt_Persons
#declare GloInterfaceVars

table struct mt_Persons
(
  nRec       : comp,
  DisDate    : date,
  GalDep     : comp,
  TabNmb     : longint,
  FIO        : string[50],
  IsEmployee : #TypeEmployee,
  Department : comp,
  StrTabn    : string[20]
)
with index
(
  mt_Persons01 = IsEmployee + TabNmb + StrTabn,
  mt_Persons02 = IsEmployee + FIO + TabNmb,
  mt_Persons03 = FIO + TabNmb,
  mt_Persons04 = TabNmb + StrTabn,
  mt_Persons05 = GalDep + FIO,
  mt_Persons06 = nRec
);

  procedure SetMode(Mode: byte); forward;
  procedure SaveMode;            forward;
  procedure PersonsBounds;       forward;
  procedure PersonsPosAndTitle;  forward;
  function  GetFulDepNameOrPodr(_boOutInt : boolean) : string; forward;

  var iGetKau    : GetKau;
  var iKatPodrGr : KatPodrGr;
  var IDepartIer : DepartIer;
#end
#else
#declare GloInterfaceVars
  procedure SetMode(Mode: byte); forward;
  procedure SaveMode;            forward;
  procedure PersonsBounds;       forward;
  procedure PersonsPosAndTitle;  forward;
  function  GetFulDepNameOrPodr(_boOutInt : boolean) : string; forward;

  var iGetKau    : GetKau;
  var iKatPodrGr : KatPodrGr;
  var IDepartIer : DepartIer;
#end
#endif

#ifdef mt_Persons
#declare AddProcedures
!-------------------------------------------------------------------------------
procedure PersonsPosAndTitle;
{
  if (GetFirst #KauTable = tsOk) {};
  ReReadRecord(##KauTable);
  SetNameWindow;
} // procedure PersonsPosAndTitle

!-------------------------------------------------------------------------------
procedure PersonsBounds;
{
  if ConditionActive(tcGetByPodr)
    PopCondition(tcGetByPodr);

  if ConditionActive(tcGetByNoDismiss)
    PopCondition(tcGetByNoDismiss);

  if ConditionActive(tcGetByDismiss)
    PopCondition(tcGetByDismiss);

  if (MyPodr <> 0)
    PushCondition(tcGetByPodr);

  if (MyEmployee = 'С')
    case AddMode of
      0: PushCondition(tcGetByNoDismiss);
      1: PushCondition(tcGetByDismiss);
    end;

  if (MyEmployee = ''#0)
  {
    if BoundActive(tbGetByEmployee)
      SubBounds(tbGetByEmployee);

    if not ConditionActive(tcGetByAllEmp)
      PushCondition(tcGetByAllEmp);
  }
  else
  {
    if not BoundActive(tbGetByEmployee)
      AddBounds(tbGetByEmployee);

    if ConditionActive(tcGetByAllEmp)
      PopCondition(tcGetByAllEmp);
  }
}

!-------------------------------------------------------------------------------
procedure SetMode(Mode: byte);
{
  case Mode of
    1 : { MyEmployee := 'С'; AddMode := 0; }
    2 : { MyEmployee := 'С'; AddMode := 1; }
    3 : { MyEmployee := 'С'; AddMode := 2; }
    4 : { MyEmployee := 'У'; AddMode := 0;}
!   5 : { MyEmployee := 'П'; }
    6 : { MyEmployee := ''#0;AddMode := 3;}
  else
  {
    MyEmployee := 'С';
    AddMode := 0;
  }
  end; // case

  if not boGetTune('UP.ZAR.ZU.FLAG3')     // не показывать уволенных
  {
   AddMode := 0;
   DisableCommand(cmValue2);  // уволенные
   DisableCommand(cmValue3);  // текущие
   DisableCommand(cmValue4);  // архив
   DisableCommand(cmValue6);  // все
   DisableCommand(cmAttrib);
  }
  else
  {
   EnableCommand(cmValue1);
   EnableCommand(cmValue2);
   EnableCommand(cmValue3);
   EnableCommand(cmValue4);
   EnableCommand(cmValue6);
   EnableCommand(cmAttrib);
  }

  PersonsBounds;
  PersonsPosAndTitle;
  SavedMode := Mode;
} // procedure SetMode

function CheckKatPodrRights : boolean;
{
  CheckKatPodrRights := true;

  RightsMarker := InitMarker('', 8, 100, 5);
  ClearMarker(RightsMarker);

  delete all mt_Persons;

  // добавим в маркер подразделения, на которые есть права
  _loop UserAccess where (( UserId()         == UserAccess.cRec))
    InsertMarker(RightsMarker, UserAccess.cGroup);

  // добавим в маркер подразделения, на которые есть права у группы, в которую включен пользователь
  _loop GrMembers // группы сотрудника
    _loop UserAccess where (( GrMembers.GroupCode == UserAccess.cRec and (1 = USERACCESS.WCOD))) // права группы
      InsertMarker(RightsMarker, UserAccess.cGroup);


  // не "привязанные" сотрудники
  InsertMarker(RightsMarker, comp(0));

  // char('С') == PersonsSyn1.IsEmployee
  _loop PersonsSyn1
  {
    #KauTable.nRec       := PersonsSyn1.NRec;
    #KauTable.DisDate    := PersonsSyn1.DisDate;
    #KauTable.GalDep     := PersonsSyn1.GalDep;
    #KauTable.TabNmb     := PersonsSyn1.TabNmb;
    #KauTable.FIO        := PersonsSyn1.FIO;
    #KauTable.IsEmployee := PersonsSyn1.IsEmployee;
    #KauTable.Department := PersonsSyn1.Department;
    #KauTable.StrTabn    := PersonsSyn1.StrTabn;

    if Insert Current #KauTable <> tsOk
      CheckKatPodrRights := false;
  }

  // char('У') == PersonsSyn2.IsEmployee
  _loop PersonsSyn2
  {
    #KauTable.nRec       := PersonsSyn2.NRec;
    #KauTable.DisDate    := PersonsSyn2.DisDate;
    #KauTable.GalDep     := PersonsSyn2.GalDep;
    #KauTable.TabNmb     := PersonsSyn2.TabNmb;
    #KauTable.FIO        := PersonsSyn2.FIO;
    #KauTable.IsEmployee := PersonsSyn2.IsEmployee;
    #KauTable.Department := PersonsSyn2.Department;
    #KauTable.StrTabn    := PersonsSyn2.StrTabn;

    if Insert Current #KauTable <> tsOk
      CheckKatPodrRights := false;

  }

  DoneMarker(RightsMarker,'');
}

procedure SaveMode;
{
  SaveMyDsk(SavedMode, #DskConst+'_SavedMode');
  SaveMyDsk(AddMode,   #DskConst+'_AddMode');
}

function GetFulDepNameOrPodr(_boOutInt : boolean) : string;
{
  if _boOutInt
    GetFulDepNameOrPodr := KatPodr.Name;
  else
    GetFulDepNameOrPodr := IDepartIer.GetFulDepNameOrPodr(#KauTable.Department, 0, true);
}
#end
#else
#declare AddProcedures
!-------------------------------------------------------------------------------
procedure PersonsPosAndTitle;
{
  if (GetFirst #KauTable = tsOk) {};
  ReReadRecord(##KauTable);
  SetNameWindow;
} // procedure PersonsPosAndTitle

!-------------------------------------------------------------------------------
procedure PersonsBounds;
{
  if ConditionActive(tcGetByPodr)
    PopCondition(tcGetByPodr);

  if ConditionActive(tcGetByNoDismiss)
    PopCondition(tcGetByNoDismiss);

  if ConditionActive(tcGetByDismiss)
    PopCondition(tcGetByDismiss);

  if (MyPodr <> 0)
    PushCondition(tcGetByPodr);

  if (MyEmployee = 'С')
    case AddMode of
      0: PushCondition(tcGetByNoDismiss);
      1: PushCondition(tcGetByDismiss);
    end;

  if (MyEmployee = ''#0)
  {
    if BoundActive(tbGetByEmployee)
      SubBounds(tbGetByEmployee);

    if not ConditionActive(tcGetByAllEmp)
      PushCondition(tcGetByAllEmp);
  }
  else
  {
    if not BoundActive(tbGetByEmployee)
      AddBounds(tbGetByEmployee);

    if ConditionActive(tcGetByAllEmp)
      PopCondition(tcGetByAllEmp);
  }
}

!-------------------------------------------------------------------------------
procedure SetMode(Mode: byte);
{
  case Mode of
    1 : { MyEmployee := 'С'; AddMode := 0; }
    2 : { MyEmployee := 'С'; AddMode := 1; }
    3 : { MyEmployee := 'С'; AddMode := 2; }
    4 : { MyEmployee := 'У'; AddMode := 0;}
!   5 : { MyEmployee := 'П'; }
    6 : { MyEmployee := ''#0;AddMode := 3;}
  else
  {
    MyEmployee := 'С';
    AddMode := 0;
  }
  end; // case

  if not boGetTune('UP.ZAR.ZU.FLAG3')     // не показывать уволенных
  {
   AddMode := 0;
   DisableCommand(cmValue2);  // уволенные
   DisableCommand(cmValue3);  // текущие
   DisableCommand(cmValue4);  // архив
   DisableCommand(cmValue6);  // все
   DisableCommand(cmAttrib);
  }
  else
  {
   EnableCommand(cmValue1);
   EnableCommand(cmValue2);
   EnableCommand(cmValue3);
   EnableCommand(cmValue4);
   EnableCommand(cmValue6);
   EnableCommand(cmAttrib);
  }

  PersonsBounds;
  PersonsPosAndTitle;
  SavedMode := Mode;
} // procedure SetMode

procedure SaveMode;
{
  SaveMyDsk(SavedMode, #DskConst+'_SavedMode');
  SaveMyDsk(AddMode,   #DskConst+'_AddMode');
}

function GetFulDepNameOrPodr(_boOutInt : boolean) : string;
{
  if _boOutInt
    GetFulDepNameOrPodr := KatPodr.Name;
  else
    GetFulDepNameOrPodr := IDepartIer.GetFulDepNameOrPodr(#KauTable.Department, 0, true);
}
#end
#endif

#declare SpecialKauCommands
  cmAttrib : {
    case MyEmployee of
      'С' : if (AddMode = 2) { MyEmployee := 'У'; AddMode := 0;}
            else AddMode := AddMode + 1;
      'У' : { MyEmployee := ''#0;AddMode := 3;}
!     'П' : MyEmployee := 'У';
      ''#0  : {MyEmployee := 'С'; AddMode := 0;}
    end; // case
    PersonsBounds;
    PersonsPosAndTitle;
    SavedMode := (SavedMode mod 4) + 1; // 1->2, 2->3, 3->4, 4->1
  }

  cmValue1 : SetMode(1);  // работающие
  cmValue2 : SetMode(2);  // уволенные
  cmValue3 : SetMode(3);  // текущие
  cmValue4 : SetMode(4);  // архив
! cmValue5 : SetMode(5);  // приказ
  cmValue6 : SetMode(6);  // все
  // фильтр по подразделению
  cmValue10:
  {
    if (iGetKau.GetCodeKau(cgiPick, cgKau_KatPodr, MyPodr) > 0)
    {
      PersonsBounds;
      PersonsPosAndTitle;
      EnableCommand(cmValue11);  // снять фильтр

      if (GetFirst #KauTable <> tsOk)
        if (boGetTune('UP.UsePersons') and
        (Departments.Accessibility(InsZarS.GetDepartmentNrec(MyPodr), 0) <> 1))
           Message('Нет доступа к указанному подразделению. Права доступа задаются в интерфейсе:'#13
                 + '"Управление персоналом - Настройка - Права доступа - к структурным единицам штатного расписания"', Information);
    }
  }

  // снять фильтр
  cmValue11:
  {
    MyPodr := 0;
    PersonsBounds;
    PersonsPosAndTitle;
    DisableCommand(cmValue11);  // снять фильтр
  }

  cmFilterSave : {
    PutHotCommand(RunMenu('HotKeys_' + #DskConst));
  }
#end
#define HotKeyLines
#define HelpContext hcKassOknoSotrPredpr
