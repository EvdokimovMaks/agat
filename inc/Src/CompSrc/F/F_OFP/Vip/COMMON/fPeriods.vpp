//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 8.10 - модуль "Платежный календарь"
// Функции проверки корректности пары значений
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// входит ли дата в период
!IsInPeriod
Function Period_Contains(_BegDate: date; _EndDate: date; _Date: date): boolean;
{
  Period_Contains := True;

  if ((longint(_BegDate) <> 0) and (_Date < _BegDate)) or
     ((longint(_EndDate) <> 0) and (_Date > _EndDate))
    Period_Contains := False;
}

//------------------------------------------------------------------------------
// период задан правильно
Function Period_IsOk(_BegDate: date; _EndDate: date): boolean;
{
  Period_IsOk := not (longint(_EndDate) <> 0 and (_BegDate > _EndDate));
}

//------------------------------------------------------------------------------
// проверка кооректности дат
// _CheckNull может быть не задан
// _CheckEndDate должна быть задана дата окончания интервала
Function Period_Check(_BegDate, _EndDate: date; _CheckNull, _CheckEndDate: boolean): boolean;
{
  Period_Check := false;

  if (longint(_BegDate) <> 0) and (longint(_EndDate) <> 0) and (_EndDate < _BegDate) // обе заданы, но некорректно
    message(''#3'Вторая дата должна быть не меньше первой!', warning);
  else
    if (not _CheckNull) and (longint(_EndDate) = 0) and (longint(_BegDate) = 0)
      message(''#3'Необходимо задать интервал дат!', warning);
    else
      if _CheckEndDate and (longint(_EndDate) = 0) and (longint(_BegDate) <> 0)
        message(''#3'Необходимо задать дату окончания интервала дат!', warning);
      else
        Period_Check := true;
}

//------------------------------------------------------------------------------
// удовлетворяет ли дата указанному условию
Function Date_EqualPaidType(_date: date; _tip: word): boolean;
var ret: boolean;
{
  case _tip of
    shALL      : ret := True; // все
    shNOT_PAID : ret := (longint(_date)  = 0); // неопл.
    shPAID     : ret := (longint(_date) <> 0); // опл-ные
  else           ret := True;
  end;
  Date_EqualPaidType := ret;
}

//------------------------------------------------------------------------------
// Корректный диапазон сумм
Function DiapasonSum_Check(Sum_Begin, Sum_End: Double; _isMessage: word): boolean;
var ret: boolean;
{
  ret := False;

  If #mIsDoubleGreater(Sum_Begin,Sum_End)
  {
    If _isMessage != cgNoMessage   // выводить диагностические сообщения
      message(''#3'Вторая сумма должна быть не меньше первой!', warning);

    ret := True;
  }

  DiapasonSum_Check := ret;
}
