/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,97 корпорация ГАЛАКТИКА                      ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Спецодежда                                                ║
 ║ Версия        : 5.85+                                                     ║
 ║ Назначение    : Объектный интерфейс к операциям выдачи СФО                ║
 ║ Ответственный : Станевич Юрий Олегович                                    ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#ifndef _oPers_SFO_
#define _oPers_SFO_

//-----------------------------------------------------------------------------

#ifdef ComponentVersion
#component "F_SFO"
#end

//-----------------------------------------------------------------------------

#ifdef ComponentVersionInDict
  public
#end
#ifndef __TPers_SFO__
#define __TPers_SFO__
Type TPers_SFO = Record As Table PersSFO;
#end

//-----------------------------------------------------------------------------

#doc
Данный интерфейс описывает набор функций для предварительной проверки и модификации
таблицы PersSFO - основной оперативной таблицы модуля "Спецодежда".<br>
#end

ObjInterface oPers_SFO;

#doc
Возвращает True, если значение хотя бы одного из полей (даже вычисляемого) в передаваемом
в параметре _Buf буфере записи таблицы PersSFO отличается от значения соответствующего поля
в БД. Перед вызовом данной функции соответсnвующая запись в таблице PersSFO внутри интерфейса
должна быть спозиционирована.<br>
#end
function  AnyChanged( _Buf : TPers_SFO) : Boolean;

#doc
Анализирует, имеются ли у операции выдачи _Buf дочерние операции списания либо перемещения.
От этого зависит количество кнопок в запросах подтверждения у пользователя. Результат
возвращается установкой переменной _BatMode в соответствующее состояние.<br>
#end
procedure CheckChain( _Buf : TPers_SFO; _Contx : TCallCtx; var _BatMode : Integer);

#doc
В переданном буфере записи устанавливает значения вычисляемых полей в соответствии со
значениями исходных полей.<br>
#end
procedure CalcRecord( var _Buf : TPers_SFO);

#doc
Проверяет возможность модификации записи. В случае отрицательного результата генерируется
исключение.<br>
#end
procedure CanStartChObj( var _Buf : TPers_SFO; _Contx : TCallCtx);

#doc
Запрашивает у пользователя подтверждения в случае неоднозначностей в вопросе возможности
модификации записи. При отказе пользователем от изменения записи генерируется исключение.<br>
#end
procedure CnfStartChObj( var _Buf : TPers_SFO; _Contx : TCallCtx; var _Response: TBatConf) ;

#doc
Проверяет возможность изменения конкретного поля записи из заданного контекста. Выполняются
как безусловные проверки, так и с запросами подтверждения пользователя. Используется в обработчиках
cmCheckField, cmPick, cmDelOnProtect. В случае отрицательного результата генерируется исключение.<br>
#end
procedure ChkStartChFld( var _Buf : TPers_SFO; _Contx : TCallCtx; var _Response: TBatConf; _FldID : Integer);

#doc
Проверяет допустимость нового ЗНАЧЕНИЯ поля. В случае отрицательного результата генерируется
исключение.<br>
#end
procedure PostCanChFld( var _Buf : TPers_SFO; _Contx : TCallCtx; _FldID : Integer);

#doc
Запрашивает подтверждение у пользователя в случае если допустимость нового ЗНАЧЕНИЯ поля
вызывает сомнения. В случае отрицательного ответа пользователя генерируется исключение.<br>
#end
procedure PostCnfChFld( var _Buf : TPers_SFO; _Contx : TCallCtx; var _Response: TBatConf; _FldID : Integer);

#doc
Представляет собой последовательный вызов двух предыдущих процедур. Используется
при проверках в обработчиках cmCheckField, cmDelOnProtect, cmPick.<br>
#end
procedure PostCheckFld( var _Buf : TPers_SFO; _Contx : TCallCtx; var _Response: TBatConf; _FldID : Integer);

#doc
Проверяет взаимную совместимость новых значений полей записи.<br>
#end
procedure PostCheckCor( var _Buf : TPers_SFO; _Contx : TCallCtx);

#doc
Выполняет все перечисленные выше безусловные(CanXXX) проверки возможности изменения и
корректности изменений записи. Используется в описанной ниже процедуре ChkModify().<br>
#end
procedure CanChRecord( var _Buf : TPers_SFO; _Contx : TCallCtx);

#doc
Выполняет все перечисленные выше условные(CnfXXX) проверки возможности изменения и
корректности изменений записи. Используется в описанной ниже процедуре ChkModify().<br>
#end
procedure CnfChRecord( var _Buf : TPers_SFO; _Contx : TCallCtx; var _Response: TBatConf);

#doc
Используется для проверок корректности изменения записи при ее модификации алгоритмом
(а не интерактивно с клавитауры), при этом может измениться несколько полей записи сразу.<br>
#end
procedure ChkModify( var _Buf  : TPers_SFO; _NewPrice : Double; _Contx : TCallCtx; var _Response : TBatConf);

#doc
Выполняет проверки возможности и корректности изменений связанных записей из той же или
других таблиц, которые необходимо выполнить при рассматриваемой модификации записи в таблице
PersSFO. Используется в обработчике cmCheckRecord, а также в процедуре ChkModify().<br>
#end
procedure ChkLinkedObj( var _Buf : TPers_SFO; _Contx : TCallCtx; var _Response: TBatConf);

#doc
Выполняет вставку новой записи. Производятся необходимые модификации связанных записей.
Никаких проверок корректности изменений внутри не производится, поэтому процедуру необходимо
предварять соответствующим набором процедур проверки, размещенных в одном _try-блоке с ней.
При возникновении проблем с модификацией таблиц внутри процедуры генерируется исключение.<br>
#end
procedure InsertObj( var _Buf : TPers_SFO; _Contx : TCallCtx; _Response : TBatConf);

#doc
Выполняет модификацию записи. Производятся необходимые модификации связанных записей.
Никаких проверок корректности изменений внутри не производится, поэтому процедуру необходимо
предварять соответствующим набором процедур проверки, размещенных в одном _try-блоке с ней.
При возникновении проблем с модификацией таблиц внутри процедуры генерируется исключение.<br>
#end
procedure UpdateObj( var _Buf : TPers_SFO; _Contx : TCallCtx; _Response : TBatConf);

#doc
Выполняет все условные(требующие подтверждения пользователя) и безусловные проверки
возможности удаления записи. В случае отрицательного результата генерируется исключение.<br>
#end
procedure ChkDelete( _Buf : TPers_SFO; _Contx : TCallCtx; var _Response : TBatConf);

#doc
Удаляет запись. При необходимости корректируется информация в связанных записях
(удаляются дочерние записи). Никаких дополнительных проверок не выполняется, поэтому
процедуру необходимо предварять вызовом ChkDelete(), размещенным в том же _try-блоке.
При возникновении проблем с модификацией таблиц внутри процедуры генерируется исключение.<br>
#end
procedure DeleteObj( _Buf : TPers_SFO; _Contx : TCallCtx; _Response : TBatConf);

#doc
Синхронизация разреза в приходе в КУ СФО при редактировании строк спецификации документа
на Возврат из использования.<br>
#end
procedure sincRetMBPInRec( _Buf : TPers_SFO; _Contx : TCallCtx; var _Response: TBatConf;
                           _cPodr : TNRec; _cMol : TNRec; _NewPrice : Double; _InExpl : Word; RealUpd : Boolean);

#doc
Синхронизация прихода в КУ СФО из строки спецификации Аттестата на вещевое довольствие.
Используется в функции "Формирование приходов в КУ по Аттестатам", а также при редактировании
строк спецификации Аттестата на вещевое довльствие, если по нему были сформированы приходы.<br>
#end
procedure SincPersInUse( _Buf : TPers_SFO; _Create : Boolean; _Contx : TCallCtx;
                 var _Response: TBatConf; NewPrice, NewIznos : Double; RealUpd : Boolean);

end;

//-----------------------------------------------------------------------------

VipInterface iPers_SFO implements oPers_SFO
#ifdef Atl51
  Licensed (FREE)
#end
;

//-----------------------------------------------------------------------------

#endif
