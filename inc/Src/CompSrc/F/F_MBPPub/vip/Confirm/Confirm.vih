//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Финансовый контур
// Декларация интерфейса запросов подтверждения у пользователя
//******************************************************************************

#ifndef _oConf_
#define _oConf_

//-----------------------------------------------------------------------------

#ifdef ComponentVersion
#component "F_MBPPub"
#end

//-----------------------------------------------------------------------------
// Использовать собственные исключения, описанные в VPP-шке на Атлантисе 3.xx
// не удалось из-за особенностей Атлантиса относительно передачи пользовательских
// исключений между интерфейсами. Вместо них использую системные:

#define ExSkipUnit    ExFileNotFound  // (ExVip) Пропустить обработку данного экземпляра объекта
#define ExFalseRet    ExInternalError // (ExVip) Выполнение последующей операции невозможно
#define ExRecNotFound ExDbNotFound    // (ExDB)  Позиционирование объекта неудачно

//-----------------------------------------------------------------------------
// Структура для хранения отклика пользователя на запросы подтверждения
// Запрос по каждому типу проблемы связан с одним разрядом в каждом поле структуры

Type TBatConf = Record
                  Action: Longint; // Что выбрал пользователь - "да" или "нет"
                  Singl : LongInt; // Выбран Action для одного объекта
                  Multi : LongInt; // Выбран "Action для всех"
                end;

//-----------------------------------------------------------------------------
// Структура для передачи контеста вызова в функции проверки

Type TCallCtx = Record
                  OutSide : Boolean; // Вызов проверки из другого экземпляра объекта
                  BatMode : Integer; // Режим запросов при пакетной обработке (см. описание)
                  FrWhere : Integer; // Место вызова функция проверки - документ, КУ, и т.д.
                  BlPhase : Integer; // Из какой фазы модификации объекта осуществляется вызов
                  Level   : Integer; // Уровень вложенности вызова функции бизнес-логики
                  NeedChk : Integer; // Режим проверок возможности вставки, модификации или удаления записей
                end;

//-----------------------------------------------------------------------------

#doc
Объектный интерфейс описывает методы для работы с функционалом запроса подтверждений у пользователя.<br>
Кроме того, в нем резмещено еще несколько служебных функций и групп: анализ значения NRec-а на предмет
соответствует ли он новой записи или уже сохранявшейся в БД, группа функций для форматирования сообщений
о возникновении исключения, группа функций для работы со значениями настроек ограничения редактирования
документов в закрытом периоде (по разрезам) и при наличии проводок, группа функций для инициализации
структуры контекста вызова.<br>
#end
ObjInterface oConfirm;

#doc
Сбрасывает состояние объекта к начальному. Полностью очищает информацию о предшествующей
реакции пользователя на групповые ("Да для всех", например) и одиночные запросы подтверждений.<br>
#end
procedure ConfClrAll( var _Response : TBatConf);

#doc
Очищает информацию о предшествующей реакции пользователя на одиночные запросы подтверждений.<br>
#end
procedure ConfClrSingle( var _Response : TBatConf);

#doc
Возвращает признак наличия в передаваемой в качестве параметра структуре выставленных флагов
хотя бы какой-либо реакции пользователя на одиночные или групповые запросы подтверждения.<br>
#end
function  ConfSomeAsked( _Response : TBatConf) : Boolean;

#doc
Возвращает True, если запрос подтверждения на предупреждение с идентификатором _ConfID
уже выдавался и пользователь ответил на него "Да для всех".<br>
#end
function  ConfSubsqNeed( _ConfID : LongInt; _Response : TBatConf) : Boolean;

#doc
Возвращает True, если запрос подтверждения на предупреждение с идентификатором _ConfID
уже выдавался и пользователь ответил на него просто "Да".<br>
#end
function  ConfSingleAsked( _ConfID : LongInt; _Response : TBatConf) : Boolean;

#doc
Формирование диалога запроса подтверждения у пользователя (количество кнопок в окне
соответствует значению _BatMode) и обработка ответа: либо выставление флага _ConfID
внутри структуры _Response, либо генерация исключения.<br>
#end
procedure ShowConfDlg( _BatMode : Word;     // Пакетный ли режим
                       _ConfID  : LongInt;  // Идентификатор предупреждения
                   var _Response: TBatConf; // Отклик на предупреждение
                       _MsgStr  : String;   // Текст предупреждения
                       _DlgType : Longint   // Тип диалога - Информация/Предупреждение/...
                     ); // Выставляет битовые флажки в отклике, в случае отказа генерирует исключения

#doc
Выводит сообщение об ошибке в окне, соответствующем значению _BatMode (в случае пакетного
режима есть выбор "Отменить/Пропустить", иначе одна кнопка "Отменить") и генерирует нужное
исключение (опять-таки в зависимости от значения _BatMode).<br>
#end
procedure ShowErrDlg( _BatMode : Word;     // Пакетный ли режим
                      _MsgStr  : String    // Текст ошибки
                    );

#doc
Аналог предыдущей процедуры, но исключение не генерирует. Предназначена для использования
в _except-блоке с целью обхода ПИР 102.47350.<br>
#end
function ShowErrDlgEx( _BatMode : Word;   // Пакетный ли режим
                       _MsgStr  : String  // Текст предупреждения
                     ) : Boolean;         // Прервать ли весь процесс

//-----------------------------------------------------------------------------

#doc
На вход подается возвращаемая функцией ExploreException строка с информацией об исключении.
На выходе получаем информацию об исключении с убранной системной информацией о типе
исключения (например, "ExUserBreak (ExVip)").<br>
#end
function  CutExName( ExptStr : String) : String;

#doc
Выводит на экран сообщение об ошибке только в случае если ExptStr после обработки
предыдущей функцией не превращается в пустую строку.<br>
#end
procedure ExMessage( ExptStr : String);

//-----------------------------------------------------------------------------

#doc
Возвращает True, если значение параметра лежит в пределах от -1 до 1 включительно.<br>
#end
function isNewRecord( _NRec : Comp) : Boolean;

//-----------------------------------------------------------------------------

#doc
Возвращает дату закрытия периода для документов спецоснастки в соответствии со
значениями настройки "Режим ограничения доступа к данным" модуля и связанных с ней.
При значении True параметра UseRazr и соответствующими значениями ряда настроек
вычисляется дата закрытия периода по указанному в вызове разрезу.<br>
#end
function GetCloseDate( _cPodr : TNRec; _cMol : TNRec; UseRazr : Boolean) : Date;

#doc
Возвращает установленный тип ограничения при доступе к данным в закрытом периоде:
запрещать, разрешать с подтверждением, разрешать.<br>
#end
function GetModAftCls : Word;

#doc
Принимает на вход характеристики документа: дата, разрез. Возвращает тип ограничения
доступа для данного документа.<br>
#end
function GetModifiAble( dOper : Date; _cPodr : TNRec; _cMol : TNRec; UseRazr : Boolean) : Word;

#doc
Возвращает установленный тип ограничения при доступе к документам, по которым имеются
сформированные проводки: запрещать, разрешать с подтверждением, разрешать.<br>
#end
function GetModProvod : Word;

#doc
Возвращает признак включенности использования в системе механизма закрытия разрезов.
Это требуется для вариации текста сообщений. Например, вместо "данный приход в
закрытом периоде" можно выводить "разрез данного прихода закрыт до".<br>
#end
function GetCloseRazr : Word;

//-----------------------------------------------------------------------------

#doc
Инициализирует структуру контекста вызова значениями, индицирующими вызов функции
бизнес-логики между экземплярами объектов.<br>
#end
procedure PrepForOuter( var _CallCtx : TCallCtx; _BlPhase : Integer; _FrWhere : Integer);

#doc
Инициализирует структуру контекста вызова значениями, индицирующими нахождение
внутри пакетной операции.<br>
#end
procedure MultiBatchEnter( var _CallCtx : TCallCtx; _ContxtDef : Integer);

#doc
Инициализирует структуру контекста вызова значениями, индицирующими нахождение
внутри одиночной операции.<br>
#end
procedure SingleBatchEnter( var _CallCtx : TCallCtx; _ContxtDef : Integer);

#doc
Возвращает строку - описание фазы выполнения бизнес-логики, численное значение
фазы подается на вход в переменной _blPhase.<br>
#end
function GetActStr( _blPhase : Integer; _sel : Integer) : String;

end;

//-----------------------------------------------------------------------------

VipInterface Confirm implements oConfirm
#ifdef Atl51
  Licensed (FREE)
#end
;

//-----------------------------------------------------------------------------

#endif
