/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,97 корпорация ГАЛАКТИКА                      ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : МБП                                                       ║
 ║ Версия        : 5.85+                                                     ║
 ║ Назначение    : Объектный интерфейс к операциям прихода МБП               ║
 ║ Ответственный : Станевич Юрий Олегович                                    ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
   Сочетания символов в названиях функций означают следующе:
    Can   - проверка запретов изменения
    Cnf   - проверка с запросами подтверждения пользователя
    Chk   - скомбинированы вызовы проверок запрета и с запросами подтверждения

    Start - пред-проверка
    Post  - пост-проверка

    Fld   - проверка поля
    Rec   - проверка записи
    Obj   - проверка объект в целом
    Modify- проверка с учетом связанных обектов

   Может, имеет смысл завести:
    Vis   - для функций, вызываемых только из визуального интерфейса
    Ext   - для функций, предназначенных специально для вызова из другого экземпляра
*/

#ifndef _oMBP_In_
#define _oMBP_In_

#ifdef ComponentVersion
#component "F_MBP"
#end

//-----------------------------------------------------------------------------

#ifndef _T_MBP_In_
#define _T_MBP_In_

#ifdef ComponentVersionInDict
  Public
#end
Type TMBP_In = Record As Table MBPIn;
#end

//-----------------------------------------------------------------------------

#doc
Данный интерфейс описывает набор функций для предварительной проверки и модификации
таблицы MBPIn - одной из двух основных оперативных таблиц модуля "Спецоснастка".<br>
#end
ObjInterface oMBP_In;

#doc
Функция устарела и не используется. Пока не выбрасывал - может еще сгодится.<br>
#end
procedure InitObj; // Загрузка значений параметров настройки

//-----------------------------------------------------------------------------
// Позиционирование бизнес-логики встроено в каждую функцию

//-----------------------------------------------------------------------------
// Тривиальная логика - вставки, модификации, удаления. CanXXX вызывать внутри _try.

#doc
Заполнение буфера записи значениями по умолчанию. Если какие-либо из полей инициализированы
перед вызовом данной процедуры, для них вызываются проверки корректности значений.<br>
#end
procedure SetDeflts( var _Buf : TMBP_In; _Contx : TCallCtx; var _Response : TBatConf);

#doc
Функция заполняет буфер значениями полей записи, на которую спозиционирован данный
интерфейс. Возвращает NRec спозиционированной записи.<br>
#end
function  GetValues( var _Buf : TMBP_In   // Буфер, заполняемый значениями полей записи
                   ) : Comp; // Возвращает значение - для вызова в вычисл. поле с целью отображения в Browse.

#doc
Сравнивает буфер со значением в БД.<br>
#end
function  AnyChanged( _Buf : TMBP_In) : Boolean;

#doc
Проверяет, затронут ли изменения одну запись, или целую группу. От этого зависит количество
кнопок в запросах подтверждения у пользователя. Результат возвращается установкой переменной
_BatMode в соответствующее состояние.<br>
#end
procedure CheckChain( _Buf : TMBP_In; _Contx : TCallCtx; var _BatMode : Integer);

#doc
Расчет вычисляемых полей и упрощенный расчет текущих значений только для отображения на экране.<br>
#end
procedure CalcRecord( var _Buf : TMBP_In);

// Проверки модифицируемости. В случае отказа от удаления объекта генерируются исключения

// Попытка начать изменение ОБЪЕКТА В ЦЕЛОМ - общие пред-проверки (ChkStartChObj не понадобился)

#doc
Проверяет возможность модификации записи. В случае отрицательного результата генерируется
исключение.<br>
#end
procedure CanStartChObj( var _Buf : TMBP_In; _Contx : TCallCtx);

#doc
Запрашивает у пользователя подтверждения в случае неоднозначностей в вопросе возможности
модификации записи. При отказе пользователем от изменения записи генерируется исключение.<br>
#end
procedure CnfStartChObj( var _Buf : TMBP_In; _Contx : TCallCtx; var _Response: TBatConf);

// Пред-проверки НА УРОВНЕ ПОЛЕЙ записи. CanStartChFld и CnfStartChFld не делал public

#doc
Проверяет возможность изменения конкретного поля записи из заданного контекста. Выполняются
как безусловные проверки, так и с запросами подтверждения пользователя. Используется в обработчиках
cmCheckField, cmPick, cmDelOnProtect. В случае отрицательного результата генерируется исключение.<br>
#end
procedure ChkStartChFld( var _Buf : TMBP_In; _Contx : TCallCtx; var _Response: TBatConf; _FldID : Integer);

// Пост-проверки значений ПОЛЕЙ записи

#doc
Проверяет допустимость нового ЗНАЧЕНИЯ поля. В случае отрицательного результата генерируется
исключение.<br>
#end
procedure PostCanChFld( var _Buf : TMBP_In; _Contx : TCallCtx; _FldID : Integer);

#doc
Запрашивает подтверждение у пользователя в случае если допустимость нового ЗНАЧЕНИЯ поля
вызывает сомнения. В случае отрицательного ответа пользователя генерируется исключение.<br>
#end
procedure PostCnfChFld( var _Buf : TMBP_In; _Contx : TCallCtx; var _Response: TBatConf; _FldID : Integer);

#doc
Представляет собой последовательный вызов двух предыдущих процедур. Используется
при проверках в обработчиках cmCheckField, cmDelOnProtect, cmPick.<br>
#end
procedure PostCheckFld( var _Buf : TMBP_In; _Contx : TCallCtx; var _Response: TBatConf; _FldID : Integer);


#doc
Проверка корректности ЗАПИСИ В ЦЕЛОМ (корректность сочетания значений полей).<br>
#end
procedure PostCheckCor( var _Buf : TMBP_In; _Contx : TCallCtx);

#doc
Выполняет проверки возможности и корректности изменений связанных записей из той же или
других таблиц, которые необходимо выполнить при рассматриваемой модификации записи в таблице
MBPIn. Используется в обработчике cmCheckRecord, а также в процедуре ChkModify().<br>
#end
procedure ChkLinkedObj( var _Buf : TMBP_In; _Contx : TCallCtx; var _Response: TBatConf);

// Методы для вызова снаружи интерфейса:

#doc
Проверка возможности изменения ПОЛЯ объекта (вызываются пред+пост проверки).<br>
#end
procedure CanChField( var _Buf : TMBP_In; _Contx : TCallCtx; _FldID : Integer);

// Проверки записи в целом, используются в ChkModify

#doc
Выполняет все перечисленные выше безусловные(CanXXX) проверки возможности изменения и
корректности изменений записи.<br>
#end
procedure CanChRecord( var _Buf : TMBP_In; _Contx : TCallCtx);

#doc
Выполняет все перечисленные выше условные(CnfXXX) проверки возможности изменения и
корректности изменений записи.<br>
#end
procedure CnfChRecord( var _Buf : TMBP_In; _Contx : TCallCtx; var _Response: TBatConf);


#doc
Проверка возможности модификации объекта С УЧЕТОМ его СВЯЗЕЙ с другими объектами.
Используется для проверок корректности изменения записи при ее модификации алгоритмом
(а не интерактивно с клавитауры), при этом может измениться несколько полей записи сразу.
В будущем планируется реализовать отдельные ветки: CanModify() и CnfModify().<br>
#end
procedure ChkModify( var _Buf  : TMBP_In;  // Предполагаемое изменение полей объекта
                        _Contx : TCallCtx; // Глубина вложенности вызова, групповая обработка, контекст вызова
                 var _Response : TBatConf  // Накапливает реакцию пользователя на предупреждения
                   );

//-----------------------------------------------------------------------------

#doc
Выполняет вставку новой записи. Производятся необходимые модификации связанных записей.
Никаких проверок корректности изменений внутри не производится, поэтому процедуру необходимо
предварять соответствующим набором процедур проверки, размещенных в одном _try-блоке с ней.
При возникновении проблем с модификацией таблиц внутри процедуры генерируется исключение.<br>
Возвращает значение для позиционирования на новую запись в _Buf.NRec.<br>
#end
procedure InsertObj( var _Buf : TMBP_In; _Contx : TCallCtx; _Response : TBatConf);

#doc
Выполняет модификацию записи. Производятся необходимые модификации связанных записей.
Никаких проверок корректности изменений внутри не производится, поэтому процедуру необходимо
предварять соответствующим набором процедур проверки, размещенных в одном _try-блоке с ней.
При возникновении проблем с модификацией таблиц внутри процедуры генерируется исключение.<br>
#end
procedure UpdateObj( var _Buf : TMBP_In; _OldParSum : Double; _OldParIzn : Double; _Contx : TCallCtx; _Response : TBatConf);


#doc
Выполняет все условные(требующие подтверждения пользователя) и безусловные проверки
возможности удаления записи. Анализируются, в том числе, необходимые модификации связанных
записей. В случае отрицательного результата генерируется исключение.<br>
#end
procedure ChkDelete( _Buf : TMBP_In;  // Для позиционирования
                   _Contx : TCallCtx; // Глубина вложенности вызова, групповая обработка, контекст вызова
            var _Response : TBatConf  // Накапливает реакцию пользователя на предупреждения
                   );

#doc
Удаляет запись. При необходимости корректируется информация в связанных записях
(удаляются дочерние записи). Никаких дополнительных проверок не выполняется, поэтому
процедуру необходимо предварять вызовом ChkDelete(), размещенным в том же _try-блоке.
При возникновении проблем с модификацией таблиц внутри процедуры генерируется исключение.<br>
#end
procedure DeleteObj( _Buf : TMBP_In; _Contx : TCallCtx; _Response : TBatConf);

//-----------------------------------------------------------------------------
// Собственно полезная функциональность

#doc
Возвращает процент износа, который нужно начислить при создании прихода.<br>
#end
function  GetPercNach( _Buf : TMBP_In; _Contx : TCallCtx) : Double;

#doc
Проверяет необходимость автосписания предметов после модификации прихода.
В случае отрицательного результата генерируется исключение.<br>
#end
procedure CheckAutoSpis( _Buf : TMBP_In; _Contx : TCallCtx; var _Response : TBatConf);

#doc
Вычисляет текущее количество и процент износа заданного прихода на
указанную дату к моменту указанной операции списания.<br>
#end
procedure CalcCurState( _NRec : TNRec; _Contx : TCallCtx;
            _OnDate : Date; _OperID : Comp; var _Kol : Double; var _Perc : Double);

#doc
Приводит содержимое хозоперации в соответствие с изменившимся содержанием
операции прихода.<br>
#end
procedure UpdateTXO( _Buf : TMBP_In; _Contx : TCallCtx; _cTXO : TNRec);
end;

//-----------------------------------------------------------------------------

VipInterface iMBP_In implements oMBP_In
#ifdef Atl51
  Licensed ( FREE)
#end
;

//-----------------------------------------------------------------------------

#endif
