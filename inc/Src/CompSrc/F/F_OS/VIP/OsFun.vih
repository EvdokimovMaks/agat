//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 8.10 - Основные средства
// Настройка ОС и НМА
//********************************************************************************

#ifndef __OsFun_VIH__
#define __OsFun_VIH__

#ifdef ComponentVersion
#Component "F_OS"
#end

#include RecTypes.vpp

#doc
  Общие функции для ОС и НМА. Самые общие.
#end
//------------------------------------------------------------------------------
ObjInterface objOsFun;

// Возвращает инвентарный номер карточки c учетом настройкм.
Function  GetKatOsInNum(_cKatOs : comp) : string;
// Инвентарный номер и наименование объекта ОС/НМА
Function GetFullNameKatOs(_cKatOs : comp) : string;

// ------------------------------------------------------------
// FnDate.vpp
// Определение последней даты предыдущего периода
function PrevPeriodLastDate(pwPeriodType : word; pdCurrent : date) : date;
// Количество дней между датами
function Days_Between( d1 : date; d2 : date ) : longint;
// последняя дата месяца
function LastDayDate( dPar : date ) : date;
// первая дата месяца
function FirstDayDate( dPar : date ) : date;
// количество месяцев от начала новой эры
function MonthAD( dPar : date ) : word;
// принадлежность двух дат одному отчетному периоду ОС/НМА
Function CanOneOtchPeriod(cRecNastrOS: comp; dOne, dTwo : date) : boolean;

// ------------------------------------------------------------
// FnKatIer.vpp
// Создание записей в иерархии для инвентарной карточки
Function CreateKatOsIer( tKatOsNRec : comp ) : boolean;
// Удаление записей в иерархии для инвентарной карточки
Function DeleteKatOsIer( tKatOsNRec : comp ) : integer;

// ------------------------------------------------------------
// GetMetUm.vpp
// установиить метод учёта пользователя
procedure SetUserMetUm(_UserTiDk : word; _cUserNastrOs : comp);
// определяет метод учёта пользователя (тот который сейчас использует пользователь)
function GetUserNastrOsPos(_TiDk : word) : comp;
// определяет метод учёта по умолчанию
Function GetUserDefaultNastrOS(_TiDk : word) : comp;

// ------------------------------------------------------------
//  Round.vpp
Function my_Round(value_: tSumma; tochn: double; tip: word): tSumma;
Function CheckRoundPrecision(_Precision : double): boolean;

// ------------------------------------------------------------
//  OsGetTune.vpp
Function GetOtchPeriodNU(wTipDk : word): word;

// ------------------------------------------------------------
// #include FnKatOs.vpp
Function AddValueToHigherOs( _KatOsNRec   : comp;  _NastrOsNRec : comp;
                             _Stoim   : Double;  _SumIzn : Double; _StoimPs : Double;
                             _IznosPs : Double;  _SIznM  : Double; _SumOtkl : Double ) : boolean;
function KatOsRecIsLeaf( tKatOsNRec : comp ) : word;
Function IsKatOsLeaf( tKatOsNRec : comp ) : word;
Function ResetKatOsIsLeaf( tKatOsNRec : comp ) : boolean;
function GetSpKatOsBuffer( pcKatOsNRec : comp; pcNastrOsNRec : comp ) : TSpKatOsRec;
function GetKatOsBuffer( pcKatOsNRec : comp ) : TKatOsRec;

// Не использовать - перехала в Amort.vip
Function GetComplementSrokIsp_RB(pcKatOS, pcNastrOS: comp; pdBeg, pdEnd: date) : tSumma;

Function MayFillRashodWithRemont(In_cNastrOs : comp;   //текущий метод учёта
                                 In_wTipDock : word;   //15 - ОС, 16 - НМА
                                 In_dNumKod  : double  //Тип операции:  1 - ремонт,  иначе - всё что угодно
                                ) : boolean;


// ------------------------------------------------------------
//  FnOSDlt.vpp
Function AddValueToHigherArcOs( _ArcOsNRec : comp; _Stoim : Double;  _SumIzn : Double; _SIznM : Double ) : boolean;
Function DeleteArcIznos( tArcIznosNRec : comp; tbDelSlave : boolean; tbRecalc : boolean ) : integer;
Function DeleteKatOs( tKatOsNRec : comp; tbDelSlave : boolean; tbRecalc : boolean ) : integer;

// ------------------------------------------------------------
//  FnArcOs.vpp
function GetArcIznosInNum( pcArcIznosNRec : comp ) : string;

// ------------------------------------------------------------
//  ModAmort.vpp
function OperationMark(pcKatOsNRec : comp; pwSysOper : word; pbSet : boolean) : boolean;
function SetOperationMark(pcKatOsNRec : comp; pwSysOper : word) : boolean;
function ClearOperationMark(pcKatOsNRec : comp; pwSysOper : word) : boolean;
function SetModificationMark(pcKatOsNRec : comp) : boolean;

// ------------------------------------------------------------
//  FnInNum.vpp
Function  GetNextKatOsInNum( KatOsBuf : TKatOsRec;  SpKatOsBuf : TSpKatOsRec;  bSilent    : boolean) : string;
Procedure DelNextInNum(pwTiDk : word; psInNum : string);
Function  GetNextSpMoveOsInNum( KatOsBuf : TKatOsRec; SpKatOsBuf  : TSpKatOsRec; SpMoveOsBuf : TSpMoveOsRec; bSilent : boolean) : string;
Function  CheckUniqInNum( KatOsBuf : TKatOsRec ) : boolean;
Function  CheckUniqSpMoveOsInNum( SpMoveOsBuf : TSpMoveOsRec ) : boolean;
Function  GetNextSpVvStroyInNum( KatOsBuf: TKatOsRec;  SpKatOsBuf: TSpKatOsRec; SpVvStroyBuf : TSpVvStroyRec;  bSilent : boolean) : string;
Function  CheckUniqSpVvStroyInNum( SpVvStroyBuf : TSpVvStroyRec ) : boolean;
Function  GetInNumBase(KatOsBuf : TKatOsRec;  SpKatOsBuf : TSpKatOsRec;
                       bSilent  : boolean;  var wIncWidth : byte; var awSize : word) : string;


// ------------------------------------------------------------
//  ChkOSCfg.vpp
function CheckOSConfig( pwTiDk : word ) : boolean;



// ------------------------------------------------------------
#doc
  Пересчет сложных инвентарных объектов
#end
  // Обновление стоимости текущего узла для сложных ОС для указанного МУ
  Procedure ReCalcComplexOsOne(_cKatOs : comp; _cNastrOs: comp);   // _cKatOs NRec обновляемого узла
  // Обновление стоимости текущего узла для сложных объектов
  Procedure ReCalcComplexOS (_cKatOs : comp);                     // _cKatOs NRec обновляемого узла
  // Пересчет стоимостей всех сложных объектов, а также их статуса
  // при изменении положения текущей ИК в иерархии
  Procedure ReCalcComplexOSOnMove(_cKatOs : comp; _cOldHigherOs : comp;  // старый вышестоящий
                                                  _cNewHigherOs : comp);  // новый вышестоящий
  // Востановить по архиву стоимость и износ вышестояшей ИК, если она стала листом   102.96644
  Function RestoreIKfromArcIznos (_cKatOs : comp) : boolean;

  // Обновление стоимости текущего узла для сложных объектов для архива для одного МУ и указанного периода
  Procedure ReCalcComplexArcIznosOne(_cKatOs : comp; _cNastrOs: comp; _dPeriod: date);   // NRec обновляемого узла
  // Обновление стоимости текущего узла для сложных объектов для архива для всех МУ
  Procedure ReCalcComplexArcIznos   (_cKatOs : comp; _dPeriod: date);                    // NRec обновляемого узла


  // Удалть ArcIznos за указанный интервал по всем МУ
  Procedure DeleteArcIznosPeriod (_cKatOs : comp;  _dBegPer, _dEndPer : date);    // удалть ArcIznos за указанный период по всем МУ


// ------------------------------------------------------------
  // Инициализация общих переменных
  Procedure Init (_wTiDk: word);
  // Проверка возможности редактирования каталог ОС согласно настройки
  Function  CheckEditKatOS (_pwMode: word = 1) : boolean;
  // Согласно доступа по дескрипторам и настройкам
  Function  CanEdit      (_cKatOs : comp; _msg : boolean = true) : boolean; // true - Разрешить
  // Проверка возможности редактирования карточки ОС/НМА
  // С учетом доступных подразделений
  Function  CanEditPodr (_cKatOs : comp; _msg  : boolean = true) : boolean; // true - Разрешить
  // Проверка возможности редактирования карточки ОС/НМА
  // С учетом доступных подразделений и для выбывших ИК
  Function  CanEditOs (_cKatOs : comp; _msg : boolean = true; _EmpValue: boolean = true) : boolean; // true - Разрешить

  // Установить в переменной Val бит номер Num в Bit. Num 0-15
  Function SetBit (Val: word; Num: word; Bit: boolean): word;
  // Получить в переменной Val значение бит номер Num. Num 0-15
  Function GetBit (Val: word; Num: word): boolean;


end;

//------------------------------------------------------------------------------
ObjInterface objOsFun1;

  // Проверка возможности редактирования карточки ОС/НМА  С учетом выбывших
  Function  CanEditDropOut (_cKatOs : comp; _msg  : boolean = true; _EmpValue: boolean = true) : boolean; // true - Разрешить

  // Проверка возможности редактирования данных по МУ для текущего пользователя
  Function  CanEditMU (_cKatOs : comp; _cNastrOs: comp;  _msg  : boolean = true) : boolean; // true - Разрешить

  // Полная проверка возможности редактирования карточки ОС/НМА для указанного МУ
  Function  CanEditOsMU (_cKatOs : comp; _cNastrOs: comp; _msg : boolean = true; _EmpValue: boolean = true) : boolean; // true - Разрешить

  // Получить cстроку ошибки
  Function GetStrErr : string;

end;


//------------------------------------------------------------------------------
ObjInterface objOsFun2;
  // Перечитать запись ОС
  Function ReReadOS(_cKatOs : comp) : boolean;

end;

//------------------------------------------------------------------------------
ObjInterface objOsFun3;

//  OsHist.vpp
Function GetMolOnDate   ( pwMode : word; pdWhen : date; pcKatOsNRec : comp; bCanReturnNull : boolean) : comp;
Function GetPersonOnDate( pwMode : word; pdWhen : date; pcKatOsNRec : comp) : comp;
Function GetPodrOnDate  ( pwMode : word; pdWhen : date; pcKatOsNRec : comp; bCanReturnNull : boolean) : comp;
Function GetVidOnDate   ( pwMode : word; pdWhen : date; pcKatOsNRec : comp) : comp;
Function GetGrOsOnDate  ( pwMode : word; pdWhen : date; pcKatOsNRec : comp) : comp;
Function GetCOOnDate    (pwMode : word; pdWhen : date; pcKatOsNRec : comp) : comp;
Function GetPrSbOnDate  (pwMode : word; pdWhen : date; pcKatOsNRec : comp) : comp;
Function GetSposobOnDate(pwMode : word; pdWhen : date; pcKatOsNRec : comp) : comp;
Function GetOKOFOnDate  (pwMode : word; pdWhen : date; pcKatOsNRec : comp) : comp;
Function GetKauReffOnDate(pwMode : word; pdWhen : date; pcKatOsNRec : comp; pwKau: word) : comp;
Function GetNormaOnDate  (pwMode : word; pdWhen : date; pcKatOsNRec : comp; pcNastrOsNRec : comp) : comp;
Function GetIspOnDate    (pwMode : word; pdWhen : date; pcKatOsNRec, pcNastrOsNRec : comp) : comp;
Function GetAmortGrOnDate(pwMode : word; pdWhen : date; pcKatOsNRec, pcNastrOsNRec : comp) : comp;
Function GetPrevSumOtklOnDate(pdWhen : date; pcKatOsNRec : comp; pcNastrOsNRec : comp) : double;
Function GetTXOAmortOnDate   (pwMode : word; pdWhen : date; pcKatOsNRec, pcNastrOsNRec : comp) : comp;
Function GetOsAlgAmortOnDate (pwMode : word; pdWhen : date; pcKatOsNRec, pcNastrOsNRec : comp) : comp;
Function GetSrokIspOnDate    (pwMode : word; pdWhen : date; pcKatOsNRec, pcNastrOsNRec : comp) : double;
Function GetPoprKoefOnDate(pwMode : word; pdWhen : date; pcKatOsNRec, pcNastrOsNRec : comp) : double;
Function GetKatNalGrOnDate(pwMode : word; pdWhen : date; pcKatOsNRec : comp) : comp;
Function SetNastrOsPosition( pcNastrOsNRec : comp ) : boolean;

// FnSkObor.vpp
Function OborotIsValidForKatOs(pcOborotNRec : comp; pcKatOsNRec : comp; pcNastrOsNrec : comp ) : boolean;

end;

//------------------------------------------------------------------------------
ObjInterface objOsFun4;
  // Удалть ArcIznos за конкретнную дату  по всем МУ
  Procedure  DelArcIznosPeriod (_cKatOs : comp;  _dEndPer : date);
end;

//------------------------------------------------------------------------------
ObjInterface objOsFun5;
  // Округлить согласно настройке в Методе учета
  // Еслм _cNastrOs=0, то берется текущий МУ
  Function RoundMU (_value : tSumma; _cNastrOs : comp = 0) : tSumma;
end;

//------------------------------------------------------------------------------
ObjInterface objOsFun6;
  // Для текущего пользователя есть ли полный доступ к картотеке.
  Function  isFullRightUser (_wTiDk: word = 15) : boolean; // true - Есть полный доступ
end;

//------------------------------------------------------------------------------
VipInterface OsFun  Implements objOsFun, objOsFun1, objOsFun2, objOsFun3, objOsFun4, objOsFun5, objOsFun6
  Licensed   (FREE);

#end // __OsFun_VIH__

