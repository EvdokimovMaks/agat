!
! Общие функции для присоединенных форм Формы 11
!
.var
  Period  : string                 // период формы
  sYearOtch : string
  SARR     : array[1..5] of string;  // хранилище для разобранных строк. Доступ через #NAIM_POK(i,j)
  RowCnt : integer;                // количество строк
  ClmnCnt: array[1..1] of integer; // количество колонок в строке
  N1     : integer;                // счетчик для цикла вывода подстрок в печатную форму
  sName  : array[1..7] of string;  // хранилище для разобранных строк
  KolRow : integer;                // количество строк
.endvar
! Наименования показателей для текущей строки, разбитые на
! строки (строки разбиваются на колонки)
! Нулевой элемент в строке массива есть полная строка текста не разбитая на колонки
! Количество колонок: 5
#ifndef __FORM11FN_FRM_DEFS__
#define __FORM11FN_FRM_DEFS__
! -----------------------------------------------------------------------------
#define NAIM_POK(i,j) SARR[(#i-1)*5+#j+1]
! -----------------------------------------------------------------------------
#define C_STR_BEG '{'
#define C_STR_END '}'
#define C_COL_SEP '#'
#endif//__FORM11FN_FRM_DEFS__
! -----------------------------------------------------------------------------
.procedure ParseParamName(pS : string);
! Разбираем строку следующего вида:
! {SS..S#..#SS..S}..{SS..S#..#SS..S}
! Получаем набор строк разбитых на колонки.
! Символы '{' и '}' обозначают начало и конец строки
! Символы '#' делят строку на данные по колонкам
begin
  var p1, p2, k : word;

  for (k := 1; k <= RowCnt*5; k++)
    SARR[k] := '';

  // разбор наименования на отдельные строки
  RowCnt := 0;
  var S : string; S := pS;
  p1 := Pos(#C_STR_BEG,S);
  if p1 = 0                   // Если нет разделителей строки то все рассматриваем
  {                           // как одну строку.
    RowCnt := 1;
    #NAIM_POK(RowCnt,0) := S;
  }
  else
  {
    do
    {
      p1 := Pos(#C_STR_BEG,S);
      if p1 = 0
        break;
      else
      {
        p2 := Pos(#C_STR_END,S);
        if p2 = 0
          break;
        else
        {
          RowCnt++;
          #NAIM_POK(RowCnt,0) := SubStr(S,p1+1,p2-p1-1);
          S := SubStr(S,p2+1,length(S)-p2);
        }
      }
    }
    while (true)
  }

  // разбор строк на данные по колонкам
  var i : word;
  for (i := 1; i <= RowCnt; i++)
  {
    ClmnCnt[i] := 0;
    S := #NAIM_POK(i,0);
    do
    {
      ClmnCnt[i]++;
      p2 := Pos(#C_COL_SEP,S);
      if p2 = 0
      {
        #NAIM_POK(i,ClmnCnt[i]) := S;
        break;
      }
      else
      {
        #NAIM_POK(i,ClmnCnt[i]) := SubStr(S,1,p2-1);
        S := SubStr(S,p2+1,length(S)-p2);
      }
    }
    while (true)
  }
end.
! -----------------------------------------------------------------------------
! парситстроку вида sss;dddd;ee  возвращает строку но номеру 0,1
.function ParseDopParamNum (pS : string; num: word) : string;
begin
  var p1 : word;
  var n  : word;     n := 0;
  var S  : string;   S := pS;
  do
  {
    result := S;
    p1 := Pos(';',S);
    if p1 = 0
      break;
    else
    {
      result := SubStr(S,1,p1-1);
      if (n = num)
        break;

      s := SubStr(S,p1+1, length(s));
      n++;
     }
  }
  while (true)
end.
! -----------------------------------------------------------------------------
! Разбор наименования на отдельные строки до длины _Len в массив sName
! Строки дополняются пробелами слева согласно уровня иерархиии
.procedure ParseName (_str : string; _Len: word);
begin
  var i, j, KolBlank, lenStr, p1, p2,  PosStart, KolStrTmp, SizeArr : word;
  var S, strEmpty, StrBlank  : string;
  var strTmp : array[1..2] of string;
  strEmpty  := '                   ';

  SizeArr :=  7;  // Размер массива

  for (i := 1; i <= SizeArr; i++)
    sName[i] := '';
  for (i := 1; i <= 2; i++)
    strTmp[i] := '';

  // Разбираем строку следующего вида: {SS..S}..{SS..S}
  // Получаем набор массива строк разбитых на строки
  // Символы '{' и '}' обозначают начало и конец строки
  // Выделяем только две строки т.к. в 11 форме больше не бывает

  KolStrTmp := 0;
  S := _str;
  p1 := Pos(#C_STR_BEG,S);
  if (p1 >  0 )
  {
    do
    {
      p1 := Pos(#C_STR_BEG,S);
      if p1 = 0
        break;
      else
      {
        p2 := Pos(#C_STR_END,S);
        if p2 = 0
          break;
        else
        {
          KolStrTmp++;
          StrTmp[KolStrTmp] := SubStr(S,p1+1,p2-p1-1);
          S := SubStr(S,p2+1,length(S)-p2);
        }
      }
    }
    while (true)
  }

  KolRow:=1;
  if (Length(_str) <= _Len) and (KolStrTmp <= 1)   // Если одна строка и  без {}
  {
    sName[1] := _str;
    Exit;
  }

  // Определим количество пробелов слева в переданной строке
  KolBlank := 0;
  for (i := 1; i <= _Len; i++)
  {
    if (_Str[i] = ' ')
      KolBlank++;
    else
      break;
  }
  strBlank := substr(strEmpty, 1, KolBlank);

  // Разобъем строку по массву строк и дополним пробелами
  PosStart := 1;
  s := trim(_Str);
  if (KolStrTmp > 1)
  {
    sName[1] := strBlank + Trim( StrTmp[1] );
    PosStart := 2;
    s := trim( StrTmp[2] );
  }

  for (j := PosStart; j <= SizeArr; j++)
  {
    lenStr := length(s);
    if (LenStr <= 0)
      break;
    if (lenStr + KolBlank <= _Len)
    {
      sName[j] := strBlank + s;
      KolRow:=j;
      break;
    }
    for (i := _Len - KolBlank; i > 0; i--)
      if (s[i] = ' ')
      {
        p1:=i;
        Break;
      }
    sName[j] := strBlank + substr(s, 1, p1-1);
    KolRow:=j;
    s := SubStr(s, p1+1, 255);
    // message (string(p1+1) + ' ' + length(s) + ' ' + s);
  }
  // message (string(KolRow) + ' =  ' + sName[2]);
end.
! -----------------------------------------------------------------------------
.begin
  if boGetTune ('Rep.isHeader')
    Period := 'Отчет за период с ' + if(Longint(dFormStDate) <> 0, DateToStr(dFormStDate, 'DD/MM/YYYY'), '') + ' по ' + if(Longint(dFormEndDate) <> 0, DateToStr(dFormEndDate, 'DD/MM/YYYY'), '');
  else
    Period := '';
  sYearOtch    := DateToStr(if(Longint(dFormEndDate) > 0, dFormEndDate, Cur_Date ), 'YYYY');
  RowCnt := 0;
!end. // Вынес в вызывающий файл
