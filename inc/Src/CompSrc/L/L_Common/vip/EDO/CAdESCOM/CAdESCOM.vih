//-------------------------------------------------------------------
//--- Copyright(c) 2001 by Galaktika Corporation                  ---
//--- Этот файл автоматически генерируется для использования      ---
//--- COM интерфейсов из Атлантиса. Править этот файл запрещается ---
//--- так как это может привести к неработоспособности системы    ---
//-------------------------------------------------------------------

// Crypto-Pro CAdES 1.0 Type Library

#ifndef __CAdESCOM__
#define __CAdESCOM__
#include atlcom.vih
#include CAPICOM.vih

//--- Forwards declarations --------------

ObjInterface comISymmetricAlgorithm; forward;
ObjInterface comICPSignedData; forward;
ObjInterface comICPSignedData2; forward;
ObjInterface comICPSignedData3; forward;
ObjInterface comICPSignedData4; forward;
ObjInterface comICPSignedData5; forward;
ObjInterface comICPSigner; forward;
ObjInterface comICPAttributes; forward;
ObjInterface comICPBlobs; forward;
ObjInterface comICPSigner2; forward;
ObjInterface comICPSigner3; forward;
ObjInterface comICPSigner4; forward;
ObjInterface comISignatureStatus; forward;
ObjInterface comICPSigner5; forward;
ObjInterface comICPAttribute; forward;
ObjInterface comICPAttribute2; forward;
ObjInterface comICPEnvelopedData; forward;
ObjInterface comICPHashedData; forward;
ObjInterface comISignedXML; forward;
ObjInterface comICardholderData; forward;
ObjInterface comIIdentityCard; forward;
ObjInterface comIPersonalCardholderData; forward;
ObjInterface comIOMSData; forward;
ObjInterface comIUECard; forward;
ObjInterface comIUECard2; forward;
ObjInterface comIUECard3; forward;
ObjInterface comIEventSource; forward;
ObjInterface comITrustedSites; forward;
ObjInterface comIPluginConfiguration; forward;
ObjInterface comIRawSignature; forward;
ObjInterface comIAbout; forward;
ObjInterface comIVersion; forward;
ObjInterface comIAbout2; forward;
ObjInterface comIAbout3; forward;


//--- Types definition  ------------------

type __MIDL___MIDL_itf_cadescom_0000_0000_0002 // #docl  Комментарии отсутствуют. </brief>
                                               = longint;
const
  CADESCOM_DISPLAY_DATA_NONE = 0;
  CADESCOM_DISPLAY_DATA_CONTENT = 1;
  CADESCOM_DISPLAY_DATA_ATTRIBUTE = 2;
end;

type __MIDL___MIDL_itf_cadescom_0000_0000_0003 // #docl  Комментарии отсутствуют. </brief>
                                               = longint;
const
  CADESCOM_CADES_DEFAULT = 0;
  CADESCOM_CADES_BES = 1;
  CADESCOM_CADES_X_LONG_TYPE_1 = 93;
end;

type __MIDL___MIDL_itf_cadescom_0000_0000_0004 // #docl  Комментарии отсутствуют. </brief>
                                               = longint;
const
  CADESCOM_STRING_TO_UCS2LE = 0;
  CADESCOM_BASE64_TO_BINARY = 1;
end;

type __MIDL___MIDL_itf_cadescom_0000_0000_0005 // #docl  Комментарии отсутствуют. </brief>
                                               = longint;
const
  CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED = 0;
  CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING = 1;
  CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE = 2;
end;

type __MIDL___MIDL_itf_cadescom_0000_0000_0006 // #docl  Комментарии отсутствуют. </brief>
                                               = longint;
const
  CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;
  CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;
  CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;
  CADESCOM_ATTRIBUTE_OTHER = 0-1;
end;

type __MIDL___MIDL_itf_cadescom_0000_0000_0007 // #docl  Комментарии отсутствуют. </brief>
                                               = longint;
const
  CADESCOM_HASH_ALGORITHM_SHA1 = 0;
  CADESCOM_HASH_ALGORITHM_MD2 = 1;
  CADESCOM_HASH_ALGORITHM_MD4 = 2;
  CADESCOM_HASH_ALGORITHM_MD5 = 3;
  CADESCOM_HASH_ALGORITHM_SHA_256 = 4;
  CADESCOM_HASH_ALGORITHM_SHA_384 = 5;
  CADESCOM_HASH_ALGORITHM_SHA_512 = 6;
  CADESCOM_HASH_ALGORITHM_CP_GOST_3411 = 100;
end;

type __MIDL___MIDL_itf_cadescom_0000_0000_0008 // #docl  Комментарии отсутствуют. </brief>
                                               = longint;
const
  CADESCOM_ENCRYPTION_ALGORITHM_RC2 = 0;
  CADESCOM_ENCRYPTION_ALGORITHM_RC4 = 1;
  CADESCOM_ENCRYPTION_ALGORITHM_DES = 2;
  CADESCOM_ENCRYPTION_ALGORITHM_3DES = 3;
  CADESCOM_ENCRYPTION_ALGORITHM_AES = 4;
  CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89 = 25;
end;

type _CADESCOM_HUMAN_SEXES // #docl  Комментарии отсутствуют. </brief>
                           = longint;
const
  CADESCOM_SEX_NOT_KNOWN = 0;
  CADESCOM_SEX_MALE = 1;
  CADESCOM_SEX_FEMALE = 2;
  CADESCOM_SEX_NOT_APPLICABLE = 9;
end;

/*type __MIDL___MIDL_itf_cadescom_0000_0000_0001 // #docl  Комментарии отсутствуют. </brief>
                                               = longint;
const
  CAPICOM_ENCODE_BASE64 = 0;
  CAPICOM_ENCODE_BINARY = 1;
  CAPICOM_ENCODE_ANY = 0-1;
end;   */

type CADESCOM_DISPLAY_DATA // #docl  Комментарии отсутствуют. </brief>
                           = __MIDL___MIDL_itf_cadescom_0000_0000_0002;

type CADESCOM_CADES_TYPE // #docl  Комментарии отсутствуют. </brief>
                         = __MIDL___MIDL_itf_cadescom_0000_0000_0003;

type CADESCOM_CONTENT_ENCODING_TYPE // #docl  Комментарии отсутствуют. </brief>
                                    = __MIDL___MIDL_itf_cadescom_0000_0000_0004;

type CADESCOM_XML_SIGNATURE_TYPE // #docl  Комментарии отсутствуют. </brief>
                                 = __MIDL___MIDL_itf_cadescom_0000_0000_0005;

type CADESCOM_ATTRIBUTE // #docl  Комментарии отсутствуют. </brief>
                        = __MIDL___MIDL_itf_cadescom_0000_0000_0006;

type CADESCOM_HASH_ALGORITHM // #docl  Комментарии отсутствуют. </brief>
                             = __MIDL___MIDL_itf_cadescom_0000_0000_0007;

type CADESCOM_ENCRYPTION_ALGORITHM // #docl  Комментарии отсутствуют. </brief>
                                   = __MIDL___MIDL_itf_cadescom_0000_0000_0008;

//--- arrays



//--- Object Interfaces ------------------

ObjInterface comISymmetricAlgorithm( comIDispatch );
// #docl ISymmetricAlgorithm Interface </brief>
  property  IV // #docl Sets IV. </brief>
               : string Read Write;
  property  DiversData // #docl Sets DiversData. </brief>
                       : string Read Write;
  procedure GenerateKey  // #docl Method to generate new random key. </brief>
                          ( algorithm // #docl Тип параметра: входной.
                          : CADESCOM_ENCRYPTION_ALGORITHM );
  function  DiversifyKey  // #docl Method to diversify key. </brief>
                           : comISymmetricAlgorithm; // #docl Результат типа comISymmetricAlgorithm
  function  Encrypt  // #docl Method to encrypt message. </brief>
                      ( pbData // #docl Тип параметра: входной.
                      : string; isFinal // #docl Тип параметра: входной.
                      : boolean ) : string; // #docl Результат типа string
  function  Decrypt  // #docl Method to decrypt message. </brief>
                      ( pbData // #docl Тип параметра: входной.
                      : string; isFinal // #docl Тип параметра: входной.
                      : boolean ) : string; // #docl Результат типа string
  procedure ImportKey  // #docl Method to import symmetric key. </brief>
                        ( pbData // #docl Тип параметра: входной.
                        : string; pVal // #docl Тип параметра: входной.
                        : comICertificate; Password // #docl Тип параметра: входной.
                        : string );
  function  ExportKey  // #docl Method to export symmetric key. </brief>
                        ( pVal // #docl Тип параметра: входной.
                        : comICertificate ) : string; // #docl Результат типа string
end;

VipInterface vcomISymmetricAlgorithm( vcomIDispatch ) Implements comISymmetricAlgorithm (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSignedData( comISignedData );
// #docl ICPSignedData Interface </brief>
  procedure Display  // #docl Method to display CAdES message </brief>
                      ( hwndParent // #docl Тип параметра: входной.
                      : longint; Title // #docl Тип параметра: входной.
                      : string );
end;

VipInterface vcomICPSignedData( vcomISignedData ) Implements comICPSignedData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSignedData2( comICPSignedData );
// #docl ICPSignedData2 Interface </brief>
  function  SignCades  // #docl Method to create CAdES message. </brief>
                        ( Signer // #docl Тип параметра: входной.
                        : VARIANT; CadesType // #docl Тип параметра: входной.
                        : CADESCOM_CADES_TYPE; bDetached // #docl Тип параметра: входной.
                        : boolean; EncodingType // #docl Тип параметра: входной.
                        : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  function  CoSignCades  // #docl Method to CoSign the CAdES message. </brief>
                          ( Signer // #docl Тип параметра: входной.
                          : VARIANT; CadesType // #docl Тип параметра: входной.
                          : CADESCOM_CADES_TYPE; EncodingType // #docl Тип параметра: входной.
                          : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  procedure VerifyCades  // #docl Method to verify if CAdES signature(s) in the CAdES message is valid. </brief>
                          ( SignedMessage // #docl Тип параметра: входной.
                          : string; CadesType // #docl Тип параметра: входной.
                          : CADESCOM_CADES_TYPE; bDetached // #docl Тип параметра: входной.
                          : boolean );
  function  EnhanceCades  // #docl Method to enhance signature(s) in the CAdES message to conform to different CAdES type. </brief>
                           ( CadesType // #docl Тип параметра: входной.
                           : CADESCOM_CADES_TYPE; TSAAddress // #docl Тип параметра: входной.
                           : string; EncodingType // #docl Тип параметра: входной.
                           : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
end;

VipInterface vcomICPSignedData2( vcomICPSignedData ) Implements comICPSignedData2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSignedData3( comICPSignedData2 );
// #docl ICPSignedData3 Interface </brief>
  property  ContentEncoding // #docl Gets the content encoding. </brief>
                            : CADESCOM_CONTENT_ENCODING_TYPE Read Write;
end;

VipInterface vcomICPSignedData3( vcomICPSignedData2 ) Implements comICPSignedData3 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSignedData4( comICPSignedData3 );
// #docl ICPSignedData4 Interface </brief>
  function  SignHash  // #docl Method to create CAdES message. </brief>
                       ( Hash // #docl Тип параметра: входной.
                       : comIHashedData; Signer // #docl Тип параметра: входной.
                       : VARIANT; CadesType // #docl Тип параметра: входной.
                       : CADESCOM_CADES_TYPE; EncodingType // #docl Тип параметра: входной.
                       : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  function  CoSignHash  // #docl Method to co-create CAdES message. </brief>
                         ( Hash // #docl Тип параметра: входной.
                         : comIHashedData; Signer // #docl Тип параметра: входной.
                         : VARIANT; CadesType // #docl Тип параметра: входной.
                         : CADESCOM_CADES_TYPE; EncodingType // #docl Тип параметра: входной.
                         : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  procedure VerifyHash  // #docl Method to verify if CAdES signature(s) in the CAdES message is valid. </brief>
                         ( Hash // #docl Тип параметра: входной.
                         : VARIANT; SignedMessage // #docl Тип параметра: входной.
                         : string; CadesType // #docl Тип параметра: входной.
                         : CADESCOM_CADES_TYPE );
end;

VipInterface vcomICPSignedData4( vcomICPSignedData3 ) Implements comICPSignedData4 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSignedData5( comICPSignedData4 );
// #docl ICPSignedData5 Interface </brief>
  property  DisplayData // #docl Gets flag display content. </brief>
                        : CADESCOM_DISPLAY_DATA Read Write;
end;

VipInterface vcomICPSignedData5( vcomICPSignedData4 ) Implements comICPSignedData5 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSigner( comISigner2 );
// #docl ICPSigner Interface </brief>
  property  UnauthenticatedAttributes // #docl Property to add/remove unauthenticated attributes. </brief>
                                      : comICPAttributes Read;
  property  AuthenticatedAttributes2 // #docl Property to add/remove authenticated attributes. </brief>
                                     : comICPAttributes Read;
  property  CRLs // #docl Property to get CRLs. </brief>
                 : comICPBlobs Read;
  property  OCSPResponses // #docl Property to get OCSP Responses. </brief>
                          : comICPBlobs Read;
  property  TSAAddress // #docl Gets the TSAAddress. </brief>
                       : string Read Write;
end;

VipInterface vcomICPSigner( vcomISigner2 ) Implements comICPSigner (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPAttributes( comIDispatch );
// #docl ICPAttributes Interface </brief>
  procedure Add  // #docl Adds new attribute to collection </brief>
                  ( Attribute // #docl Тип параметра: входной.
                  : VARIANT );
  procedure Remove  // #docl Removes specified attribute from collection </brief>
                     ( aIndex // #docl Тип параметра: .
                     : longint );
  procedure Clear  // #docl Clears collection </brief>
                   ;
  function  Get_Item  // #docl property Item </brief>
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  _NewEnum // #docl property _NewEnum </brief>
                     : comIUnknown Read;
  property  Count_ // #docl Count of attributes in Collection </brief>
                  : longint Read;
end;

VipInterface vcomICPAttributes( vcomIDispatch ) Implements comICPAttributes (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPBlobs( comIDispatch );
// #docl ICPBlobs Interface </brief>
  procedure Add  // #docl Adds new item to collection </brief>
                  ( Blob // #docl Тип параметра: входной.
                  : VARIANT );
  procedure Remove  // #docl Removes specified item from collection </brief>
                     ( aIndex // #docl Тип параметра: .
                     : longint );
  procedure Clear  // #docl Clears collection </brief>
                   ;
  function  Get_Item  // #docl property Item </brief>
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  _NewEnum // #docl property _NewEnum </brief>
                     : comIUnknown Read;
  property  Count_ // #docl Count of CRL in Collection </brief>
                  : longint Read;
end;

VipInterface vcomICPBlobs( vcomIDispatch ) Implements comICPBlobs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSigner2( comICPSigner );
// #docl ICPSigner2 Interface </brief>
  procedure Display  // #docl Method to display CAdES signature </brief>
                      ( hwndParent // #docl Тип параметра: входной.
                      : longint; Title // #docl Тип параметра: входной.
                      : string );
end;

VipInterface vcomICPSigner2( vcomICPSigner ) Implements comICPSigner2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSigner3( comICPSigner2 );
// #docl ICPSigner3 Interface </brief>
  property  SignatureTimeStampTime // #docl Property to get signatureTimeStamp time </brief>
                                   : DATE Read;
  property  SigningTime // #docl Property to get signingTime time </brief>
                        : DATE Read;
end;

VipInterface vcomICPSigner3( vcomICPSigner2 ) Implements comICPSigner3 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSigner4( comICPSigner3 );
// #docl ICPSigner4 Interface </brief>
  property  KeyPin // #docl Not implemented. </brief>
                   : string Read Write;
end;

VipInterface vcomICPSigner4( vcomICPSigner3 ) Implements comICPSigner4 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISignatureStatus( comIDispatch );
// #docl ISignatureStatus Interface </brief>
  property  IsValid // #docl Default property to get the signature validity result. </brief>
                    : boolean Read;
end;

VipInterface vcomISignatureStatus( vcomIDispatch ) Implements comISignatureStatus (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPSigner5( comICPSigner4 );
// #docl ICPSigner5 Interface </brief>
  property  SignatureStatus // #docl Property to get signature status. </brief>
                            : comISignatureStatus Read;
end;

VipInterface vcomICPSigner5( vcomICPSigner4 ) Implements comICPSigner5 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPAttribute( comIDispatch );
// #docl ICPAttribute Interface </brief>
  property  OID // #docl Gets the OID. </brief>
                : comIOID Read;
  property  Value // #docl Gets the value of attribute. </brief>
                  : VARIANT Read Write;
end;

VipInterface vcomICPAttribute( vcomIDispatch ) Implements comICPAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPAttribute2( comICPAttribute );
// #docl ICPAttribute2 Interface </brief>
  property  ValueEncoding // #docl Property to get the encoding of attribute value. </brief>
                          : CAPICOM_ENCODING_TYPE Read Write;
  property  Name // #docl Property to get attribute name. </brief>
                 : CADESCOM_ATTRIBUTE Read Write;
end;

VipInterface vcomICPAttribute2( vcomICPAttribute ) Implements comICPAttribute2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPEnvelopedData( comIEnvelopedData );
// #docl ICPEnvelopedData Interface </brief>
  property  ContentEncoding // #docl Gets the content encoding. </brief>
                            : CADESCOM_CONTENT_ENCODING_TYPE Read Write;
end;

VipInterface vcomICPEnvelopedData( vcomIEnvelopedData ) Implements comICPEnvelopedData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPHashedData( comIHashedData );
// #docl ICPHashedData Interface </brief>
  property  DataEncoding // #docl Gets the data encoding. </brief>
                         : CADESCOM_CONTENT_ENCODING_TYPE Read Write;
  procedure SetHashValue  // #docl Sets the hash value. </brief>
                           ( newVal // #docl Тип параметра: входной.
                           : string );
end;

VipInterface vcomICPHashedData( vcomIHashedData ) Implements comICPHashedData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISignedXML( comIDispatch );
// #docl ISignedXML Interface </brief>
  property  Content // #docl Default property to set content to be signed. </brief>
                    : string Read Write;
  property  Signers // #docl Property to get all the content signers as an ISigners collection object. </brief>
                    : comISigners Read;
  function  Sign  // #docl Method to sign the XML-document. </brief>
                   ( Signer // #docl Тип параметра: входной.
                   : VARIANT; XPath // #docl Тип параметра: входной.
                   : string ) : string; // #docl Результат типа string
  procedure Verify  // #docl Method to verify if signature(s) in the signed message is cryptographically valid. </brief>
                     ( SignedMessage // #docl Тип параметра: входной.
                     : string; XPath // #docl Тип параметра: входной.
                     : string );
  property  SignatureType // #docl Not implemented. </brief>
                          : CADESCOM_XML_SIGNATURE_TYPE Read Write;
  property  SignatureMethod // #docl Not implemented. </brief>
                            : string Read Write;
  property  DigestMethod // #docl Not implemented. </brief>
                         : string Read Write;
end;

VipInterface vcomISignedXML( vcomIDispatch ) Implements comISignedXML (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICardholderData( comIDispatch );
// #docl Internal Interface </brief>
  property  SocialAccountNumber // #docl Internal. </brief>
                                : string Read;
  property  OMSNumber // #docl Internal. </brief>
                      : string Read;
  property  CardholderName // #docl Internal. </brief>
                           : string Read;
  property  CardholderFirstName // #docl Internal. </brief>
                                : string Read;
  property  CardholderLastName // #docl Internal. </brief>
                               : string Read;
  property  CardholderSecondName // #docl Internal. </brief>
                                 : string Read;
  property  CardIssuerAddress // #docl Internal. </brief>
                              : string Read;
  property  DateOfBirth // #docl Internal. </brief>
                        : string Read;
  property  PlaceOfBirth // #docl Internal. </brief>
                         : string Read;
  property  SexString // #docl Internal. </brief>
                      : string Read;
  property  Sex // #docl Internal. </brief>
                : _CADESCOM_HUMAN_SEXES Read;
end;

VipInterface vcomICardholderData( vcomIDispatch ) Implements comICardholderData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIIdentityCard( comIDispatch );
// #docl Internal Interface </brief>
  property  ContainerType // #docl Internal. </brief>
                          : string Read Write;
  property  DivisionCode // #docl Internal. </brief>
                         : string Read Write;
  property  DivisionName // #docl Internal. </brief>
                         : string Read Write;
  property  EffectiveDate // #docl Internal. </brief>
                          : string Read Write;
  property  ExpirationDate // #docl Internal. </brief>
                           : string Read Write;
  property  IdExtension // #docl Internal. </brief>
                        : string Read Write;
  property  IdNumber // #docl Internal. </brief>
                     : string Read Write;
  property  IdSeries // #docl Internal. </brief>
                     : string Read Write;
end;

VipInterface vcomIIdentityCard( vcomIDispatch ) Implements comIIdentityCard (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIPersonalCardholderData( comIDispatch );
// #docl Internal Interface </brief>
  property  Address // #docl Internal. </brief>
                    : string Read Write;
  property  PhoneNumber // #docl Internal. </brief>
                        : string Read Write;
  property  Email // #docl Internal. </brief>
                  : string Read Write;
  property  IndividualTaxpayerNumber // #docl Internal. </brief>
                                     : string Read Write;
  property  VehicleLicenseNumber // #docl Internal. </brief>
                                 : string Read Write;
  property  VehicleRegistrationCertificate // #docl Internal. </brief>
                                           : string Read Write;
  property  IdentityCard // #docl Internal. </brief>
                         : comIIdentityCard Read;
  procedure Submit  // #docl Internal. </brief>
                    ;
  procedure ResetAllData  // #docl Internal. </brief>
                          ;
end;

VipInterface vcomIPersonalCardholderData( vcomIDispatch ) Implements comIPersonalCardholderData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIOMSData( comIDispatch );
// #docl Internal Interface </brief>
  property  OGRN // #docl Internal. </brief>
                 : string Read;
  property  OKATO // #docl Internal. </brief>
                  : string Read;
  property  EffectiveDate // #docl Internal. </brief>
                          : string Read;
  property  ExpirationDate // #docl Internal. </brief>
                           : string Read;
end;

VipInterface vcomIOMSData( vcomIDispatch ) Implements comIOMSData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIUECard( comIDispatch );
// #docl Internal Interface </brief>
  property  CardholderData // #docl Internal. </brief>
                           : comICardholderData Read;
  function  Get_PersonalCardholderData  // #docl Internal. </brief>
                                         ( bTrustedData // #docl Тип параметра: входной.
                                         : boolean ) : comIPersonalCardholderData; // #docl Результат типа comIPersonalCardholderData
  property  UECardWelcomeText // #docl Internal. </brief>
                              : string Read;
  property  ProviderVersion // #docl Internal. </brief>
                            : string Read;
  procedure SetPin1  // #docl Internal. </brief>
                      ( Pin1 // #docl Тип параметра: входной.
                      : string );
end;

VipInterface vcomIUECard( vcomIDispatch ) Implements comIUECard (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIUECard2( comIUECard );
// #docl Internal Interface </brief>
  property  Certificate // #docl Internal. </brief>
                        : comICertificate Read;
end;

VipInterface vcomIUECard2( vcomIUECard ) Implements comIUECard2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIUECard3( comIUECard2 );
// #docl Internal Interface </brief>
  property  OMSData // #docl Internal. </brief>
                    : comIOMSData Read;
end;

VipInterface vcomIUECard3( vcomIUECard2 ) Implements comIUECard3 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEventSource( comIDispatch );
// #docl Internal Interface </brief>
  procedure addEventListener  // #docl Internal. </brief>
                               ( Event // #docl Тип параметра: входной.
                               : string; Listener // #docl Тип параметра: входной.
                               : VARIANT; bUseCapture // #docl Тип параметра: входной.
                               : boolean );
  procedure removeEventListener  // #docl Internal. </brief>
                                  ( Event // #docl Тип параметра: входной.
                                  : string; Listener // #docl Тип параметра: входной.
                                  : VARIANT; bUseCapture // #docl Тип параметра: входной.
                                  : boolean );
end;

VipInterface vcomIEventSource( vcomIDispatch ) Implements comIEventSource (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comITrustedSites( comIDispatch );
// #docl ITrustedSites Interface </brief>
  function  Add  // #docl Adds new site to collection </brief>
                  ( Site // #docl Тип параметра: входной.
                  : string ) : string; // #docl Результат типа string
  procedure Remove  // #docl Removes specified site from collection </brief>
                     ( aIndex // #docl Тип параметра: .
                     : longint );
  function  Get_Item  // #docl property Item </brief>
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Count of sites in Collection </brief>
                  : longint Read;
  procedure __Save  // #docl Save settings </brief>
                    ;
end;

VipInterface vcomITrustedSites( vcomIDispatch ) Implements comITrustedSites (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIPluginConfiguration( comIDispatch );
// #docl ICPPluginConfiguration Interface </brief>
  property  TrustedSites // #docl Property to get trusted sites. </brief>
                         : comITrustedSites Read;
end;

VipInterface vcomIPluginConfiguration( vcomIDispatch ) Implements comIPluginConfiguration (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIRawSignature( comIDispatch );
// #docl IRawSignature Interface </brief>
  function  SignHash  // #docl Method to sign the hash value. </brief>
                       ( Hash // #docl Тип параметра: входной.
                       : comIHashedData; Certificate // #docl Тип параметра: входной.
                       : VARIANT ) : string; // #docl Результат типа string
  procedure VerifyHash  // #docl Method to verify signature of the hash value. </brief>
                         ( Hash // #docl Тип параметра: входной.
                         : comIHashedData; Certificate // #docl Тип параметра: входной.
                         : comICertificate; Signature // #docl Тип параметра: входной.
                         : string );
end;

VipInterface vcomIRawSignature( vcomIDispatch ) Implements comIRawSignature (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIAbout( comIDispatch );
// #docl IAbout Interface </brief>
  property  Version // #docl Version </brief>
                    : string Read;
  property  MajorVersion // #docl MajorVersion </brief>
                         : longint Read;
  property  MinorVersion // #docl MinorVersion </brief>
                         : longint Read;
  property  BuildVersion // #docl BuildVersion </brief>
                         : longint Read;
end;

VipInterface vcomIAbout( vcomIDispatch ) Implements comIAbout (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIVersion( comIDispatch );
// #docl IVersion Interface </brief>
  property  toStringDefault // #docl toStringDefault </brief>
                            : string Read;
  function  toString  // #docl toString </brief>
                       : string; // #docl Результат типа string
  property  MajorVersion // #docl MajorVersion </brief>
                         : longint Read;
  property  MinorVersion // #docl MinorVersion </brief>
                         : longint Read;
  property  BuildVersion // #docl BuildVersion </brief>
                         : longint Read;
end;

VipInterface vcomIVersion( vcomIDispatch ) Implements comIVersion (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIAbout2( comIAbout );
// #docl Deprecated interface </brief>
  function  ProviderVersion  // #docl Deprecated </brief>
                              ( ProviderName // #docl Тип параметра: входной.
                              : string; ProviderType // #docl Тип параметра: входной.
                              : longint ) : string; // #docl Результат типа string
end;

VipInterface vcomIAbout2( vcomIAbout ) Implements comIAbout2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIAbout3( comIAbout2 );
// #docl IAbout3 Interface </brief>
  function  CSPVersion  // #docl CSPVersion </brief>
                         ( ProviderName // #docl Тип параметра: входной.
                         : string; ProviderType // #docl Тип параметра: входной.
                         : longint ) : comIVersion; // #docl Результат типа comIVersion
  property  PluginVersion // #docl PluginVersion </brief>
                          : comIVersion Read;
end;

VipInterface vcomIAbout3( vcomIAbout2 ) Implements comIAbout3 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;


//--- coClasses---------------------------

VipInterface coTrustedSites // #docl TrustedSites Class </brief>
                            ( vcomITrustedSites );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPluginConfiguration // #docl PluginConfiguration Class </brief>
                                   ( vcomIPluginConfiguration );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPAttribute // #docl CPAttribute Class </brief>
                           ( vcomICPAttribute2 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPAttributes // #docl CPAttributes Class </brief>
                            ( vcomICPAttributes );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPSigner // #docl CPSigner Class </brief>
                        ( vcomICPSigner5 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPSigners // #docl CPSigners Class </brief>
                         ( vcomISigners );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPBlobs // #docl CPBlobs Class </brief>
                       ( vcomICPBlobs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSignatureStatus // #docl CAdESCOM.SignatureStatus Class </brief>
                               ( vcomISignatureStatus );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAbout // #docl About Class </brief>
                     ( vcomIAbout3 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coVersion // #docl CAdESCOM.Version Class </brief>
                       ( vcomIVersion );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCadesSignedData // #docl CadesSignedData class. </brief>
                               ( vcomICPSignedData5 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSignedXML // #docl SignedXML class. </brief>
                         ( vcomISignedXML );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPEnvelopedData // #docl CPEnvelopedData class. </brief>
                               ( vcomICPEnvelopedData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPHashedData // #docl CAdESCOM.HashedData class. </brief>
                            ( vcomICPHashedData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRawSignature // #docl RawSignature class. </brief>
                            ( vcomIRawSignature );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPCertificate // #docl CAdESCOM.Certificate Class </brief>
                             ( vcomICertificate2 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSymmetricAlgorithm // #docl CAdESCOM.SymmetricAlgorithm Class </brief>
                                  ( vcomISymmetricAlgorithm );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPStore // #docl CAdESCOM.Store Class </brief>
                       ( vcomIStore3 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCPPrivateKey // #docl CAdESCOM.PrivateKey Class </brief>
                            ( vcomIPrivateKey );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUECard // #docl CAdESCOM.UECard Class </brief>
                      ( vcomIUECard3 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCardholderData // #docl CAdESCOM.CardholderData Class </brief>
                              ( vcomICardholderData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPersonalCardholderData // #docl CAdESCOM.PersonalCardholderData Class </brief>
                                      ( vcomIPersonalCardholderData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIdentityCard // #docl CAdESCOM.IdentityCard Class </brief>
                            ( vcomIIdentityCard );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOMSData // #docl CAdESCOM.OMSData Class </brief>
                       ( vcomIOMSData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;


#endif
