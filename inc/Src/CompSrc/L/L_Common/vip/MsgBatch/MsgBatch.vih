/*
//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 8.1
// объект функций протоколирования пользовательских сообщений
//------------------------------------------------------------------------------
*/
#ifNdef __MsgBatch_VIH__
#define __MsgBatch_VIH__

#ifdef ComponentVersion
#component "L_Common"
#end

Const
  // Константы: FR в константы наименований FR отчетов
  // + ВНИМАНИЕ! Добавляя свои представления протокола, добавляйте названия отчета
  ptFRRep_Date = 0; // сортированный по датам
  ptFRRep_GrType = 1; // группировка по типу сообщения, сортировка по дате
End;

#doc
  Протоколирование сообщений
#end
ObjInterface IMsgBatch;

//-----------------------------------------------------------------------------
#doc
  Протоколирование сообщений. Невизуальный запуск
#end
Procedure StartLog(
  _logFlags : word = 0 //#docl Параметры пакетного логирования
);

#doc
  Протоколирование сообщений c параметрами встроенного интерфейса
#end
Procedure StartLogFromInterface;

#doc
  Прекратить протоколирование (для визуального и невизуального запуска)
#end
Procedure EndMsgLog;

#doc
  Очистка протокола
#end
Procedure ClearProt;

#doc
  Установить Help топик для встраиваемого интерфейса
#end
Procedure SetHelpTopik(
  _sTopikID : string    //#docl Id - хелп топика
);

#doc
  Текст последней ошибки возникшей при протоколировании
#end
Function sLastError:string;

#doc
  Создать исключение процесса протоколирования
#end
Procedure SetException(
  _sLastError: string = '' // Сообщение последней ошибки
);

#doc
  Печать отчета в FastReport
#end
Procedure PrintFRProtokol(
  _wReport: word = 0 // Наименование протокола выводимого на печать
);

#doc
  Количество сообщений уже попавших в протокол
#end
Function CountProtocolRecord: longint;

// ------------------ методы для отчетов Бизнес текста -------------------------
#doc
  Запись сообщения в протокол
#end
Procedure Write(
  _vMessage: variant;  //#docl Сообщение
  _iLength: integer = 0//#docl Количество символов в вещественном числе
);

#doc
  Запись сообщения в протокол с возможностью указания типа сообщения и подключения
#end
Procedure WriteTypeTopik(
  _vMessage: variant;                //#docl Сообщение
  _wTypeMessage: word = Information; //#docl Тип сообщения (ошибка, предупреждение, информация, подтверждение)
  _sTopID: string = ''               //#docl Хелп-топик сообщения
);

#doc
  Проверка на ошибки протоколирования
#end
Function Error: boolean;

#doc
  Прерывание процесса протоколирования сообщений
#end
Procedure AbortForm;

#doc
  Вывод на печать указанного отчета
#end
Procedure ShowFile(
  _sNameReport: string = 'Протокол сообщений' //#docl Наименование протокола выводимого на печать
);

#doc
  Передача имени протоколируемого интерфейса для определения в какой файл
  записывать протокол и Dsk переменные
#end
Procedure SetDskFilePostFix(_FilePostfix: string //#docl постфикс файла протокола и дск файла
);

#doc
  Возвращает есть ли сообщения в протоколе
#end
Function WasMessage: boolean;

// Элементы табличного объекта

property NRec:     tNRec     read;
property tTime:    _DateTime read;
property sStrMsg:  String    read;
property wTypeMsg: word      read;
property sTopID:   String    read;

index MsgBatchByNRec = nRec;
index MsgBatchByTime = tTime;
index MsgBatchByTypeMsgAndTime = wTypeMsg, tTime;

end;

//-----------------------------------------------------------------------------
VipInterface MsgBatch implements IMsgBatch licensed (FREE);

#end // __MsgBatch_VIH__
