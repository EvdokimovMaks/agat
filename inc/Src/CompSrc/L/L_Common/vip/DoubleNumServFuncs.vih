//------------------------------------------------------------------------------
//                                            (c) 1994,2011 корпорация Галактика
// Галактика 8.10
// Вспомогательные функции для работы с ценовыми и количественными показателями,
// представленными в виде величин типа double
//------------------------------------------------------------------------------

#ifndef _DoubleNumServFuncs_vih_
#define _DoubleNumServFuncs_vih_

#ifdef ComponentVersion
#component "L_Common"
#end

ObjInterface objDoubleNumServFuncs;
  #doc
  Проверка на ноль ценовых показателей в НДЕ (цена, сумма)
  #end
  function IsSumNdeZero( _sum: double ): boolean;

  #doc
  Проверка на ноль ценовых показателей в валюте (цена, сумма)
  #end
  function IsSumValZero( _sum: double ): boolean;

  #doc
  Проверка на ноль количественных показателей МЦ/Услуг (с точностью до значения настройки OPER.MINKOLMC)
  #end
  function IsKolZero( _kol: double ): boolean;

  #doc
  Сравнение количественных величин (с точностью до значения настройки OPER.MINKOLMC)
  #end
  function IsKolEqual(_kol1, _kol2: double): boolean;

  #doc
  сравнение сумм в НДЕ
  #end
  function IsSumNdeEqual(_sum1, _sum2: double): boolean;

  #doc
  сравнение сумм в валюте
  #end
  function IsSumValEqual(_sum1, _sum2: double): boolean;
end;

ObjInterface objDoubleNumServFuncsEx01(objDoubleNumServFuncs);
  #doc
  Сравнение величин типа double с точностью до 14 значащего разряда.</brief>
  Возвращает:
    0, если _v1 сравнимо с _v2;
    1, если _v1 > _v2;
   -1, если _v1 < _v2;

  Такая функция необходима, по крайней мере, в atlantis 5.5.0.7. Дело в том, что оператор "=" atlantis
  реализует как сравнение с точностью до 14 значащего десятичного разряда.
  А вот операторы ">", "<", ">=", "<=" реализованы без учета указанной погрешности.
  В результате, в прикладном коде легко можем получить неприятную ситуацию, в которой для a,b типа double:
  (a = b)  - дает true
  (a > b)  - дает true !
  (a <= b) - дает false !

  Поэтому, в случаях, когда, например, необходимо проверить условие ">=" - следует пользоваться данной функцией:
    if( DoubleCompare(a,b) != -1 )

  Соответственно для остальных проверок:
  (a = b)  - можно писать непосредственно, а = b, либо DoubleCompare(a,b) = 0;
  (a < b)  - DoubleCompare(a,b) = -1;
  (a > b)  - DoubleCompare(a,b) = 1;
  (a >= b) - DoubleCompare(a,b) != -1;
  (a <= b) - DoubleCompare(a,b) != 1;

  При использовании функции DoubleCompare Вы всегда получите согласованный результат. Т.е. описанная выше странная
  ситуация с результатами сравнения возникать не будет. Конечно, если важны результаты сравнения исключительно
  на "больше", либо "меньше" - можно спокойно использовать встроенные операторы языка.
  #end
  public function DoubleCompare(_v1, _v2: double): integer;
end;

VipInterface DoubleNumServFuncs implements objDoubleNumServFuncsEx01 licensed(free);

#endif
