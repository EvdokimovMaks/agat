//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 8.1
// Интерфейс конвертера в(из) XML
//********************************************************************************

#ifndef __XMLConverter_vih__
#define __XMLConverter_vih__

//******************************************************************************

#include XMLConverter.inc

#ifdef ComponentVersion
#Component "L_Common"
#end

#doc
Интерфейс конвертера XML <-> таблицы в памяти
#end
ObjInterface ObjXMLConverter;

  #doc
  Отображение диалога прогресса операции</brief>.
  Значение по умолчанию - <code>false</code>.
  #end
  property ShowProgress: boolean read write;

  #doc
  Добавить узел
  #end
  Function AddNode(pcHigh: comp; psName, psVal: string; pwNpp: word): comp;

  #doc
  Добавить атрибут узла
  #end
  Procedure AddAttr(pcNode: comp; psName, psVal: string);
  
  #doc
  Сохранить в XML-файл
  #end
  Function SaveTxmlTables(sFileName: string): boolean;

  #doc
  Загрузить из XML-файла
  #end
  Function LoadTxmlTables(sFileName: string): boolean;

  #doc
  Сортировка атрибутов узла по имени (true) или по порядку добавления (false)</brief>.
  Значение по умолчанию - <code>true</code>.
  #end
  property SortAttrByName: boolean read write;

  #doc
  Инициализация интерфейса (очистка внутренних структур).

  <h3>См. также:</h3>
  <code><link procedure L_Common::ObjXMLConverterDelEmtry.ClearZeroValues>ObjXMLConverterDelEmtry.ClearZeroValues</link></code>
  #end
  Procedure Init;

end;

#doc
Дополнительные функции конвертера XML <-> таблицы в памяти
#end
ObjInterface ObjXMLConverterN;

  #doc
  Добавить массив строк в узел
  #end
  Procedure AddNodeMem(pcHigh: comp; psName, psVal: string; pMem: TMemoStrArray; pCount, pwNpp: word);

end;

#doc
Дополнительные функции конвертера XML <-> таблицы в памяти
#end
ObjInterface ObjXMLConverterV2(ObjXMLConverter);

  #doc
  Добавить массив строк атрибута
  #end
  Procedure AddAttrMem(pcNode: comp; psName, psVal: string; pMem: TMemoStrArray; pCount: word);

end;

#doc
Дополнительные функции конвертера XML <-> таблицы в памяти
#end
ObjInterface ObjXMLConverterV3(ObjXMLConverterV2);

  #doc
  Сохранить в XML-файл в указанной кодировке
  #end
  Function SaveTxmlTablesEncoding(sFileName, sEncoding : string): boolean;

end;

#doc
Дополнительные функции конвертера XML <-> таблицы в памяти
#end
ObjInterface ObjXMLConverterEx2;

  #doc
  Сохранить в XML-файл с переводом каретки и табуляцией
  #end
  Function SaveTxmlTablesWithTabs(sFileName: string): boolean;
end;

#doc
Дополнительные функции конвертера XML <-> таблицы в памяти
#end
ObjInterface ObjXMLConverterEx3;

  #doc
  Сохранить в XML-файл в указанной кодировке с переводом каретки и табуляцией
  #end
  Function SaveTxmlTablesEncodingWithTabs(sFileName, sEncoding : string): boolean;
end;
//******************************************************************************

#doc
Дополнительные функции конвертера XML <-> возможность вывода нескольких Processing Instruction
#end
ObjInterface ObjXMLConverterEx4;

  #doc
  Добавить массив Processing Instruction
  #end
  Procedure AddProcessingInstructions(wNpp: word; sName, sData: string);
  #doc
  Сохранить в XML-файл с переводом каретки и табуляцией и со множеством Processing Instruction
  #end
  Function SaveTablesWithMultProcInstr(sFileName: string; bWithTabs: boolean/*; sEncoding: string*/): boolean;
end;

#doc
Функции конвертера XML <-> таблицы в памяти, используемые для удаления узла и таблиц в памяти, а
также для проверки их на заполненность
#end
ObjInterface ObjXMLConverterDelEmtry;

  #doc
  Проверить элемент и вложенные элементы на заполненность</brief>.

  <p>По умолчанию значение узла или атрибута считается незаполненным, если в нем самом, его атрибутах
  и вложенных в него узлах находятся пустые строки.</p>

  <p>В том случае, если параметр <code>boIgnoreParentNode</code> установлен в <code>true</code>,
  значение узла <code>pcNode</code> и его атрибутов игнорируются, т.е. на результат функции
  влияет только факт заполненности <b>вложенных</b> узлов и их атрибутов</p>

  <p>Для <i>расширения</i> перечня значений, принимаемых за незаполненные,
  следует использовать метод <code>AddZeroValue</code></p>

  <h3>См. также:</h3>
  <code><link procedure L_Common::ObjXMLConverterDelEmtry.AddZeroValue>ObjXMLConverterDelEmtry.AddZeroValue</link></code><br />
  <code><link function L_Common::ObjXMLConverterDelEmtry.DelNode>ObjXMLConverterDelEmtry.DelNode</link></code>
  #end
  Function NodeIsEmpty(pcNode: comp; boIgnoreParentNode: boolean = false): boolean;

  #doc
  Удалить узел вместе со вложенными в него элементами</brief>.
  <p>В случае успеха функция возвращает <code>true</code>.</p>

  <h3>См. также:</h3>
  <code><link procedure L_Common::ObjXMLConverterDelEmtry.AddZeroValue>ObjXMLConverterDelEmtry.AddZeroValue</link></code>
  #end
  function DelNode(pcNode: comp): boolean;

  #doc
  Добавить значение в перечень принимаемых за незаполненные</brief>.
  <p>Используется для расширения возможностей <code>NodeIsEmpty</code>.</p>

  <h3>См. также:</h3>
  <code><link procedure L_Common::ObjXMLConverterDelEmtry.ClearZeroValues>ObjXMLConverterDelEmtry.ClearZeroValues</link></code><br />
  <code><link function L_Common::ObjXMLConverterDelEmtry.NodeIsEmpty>ObjXMLConverterDelEmtry.NodeIsEmpty</link></code>
  #end
  Procedure AddZeroValue(sZeroValue: string);

  #doc
  Очистить перечень дополнительных значений, принимаемых за незаполненные</brief>.

  <h3>См. также:</h3>
  <code><link procedure L_Common::ObjXMLConverterDelEmtry.AddZeroValue>ObjXMLConverterDelEmtry.AddZeroValue</link></code><br />
  <code><link function L_Common::ObjXMLConverterDelEmtry.NodeIsEmpty>ObjXMLConverterDelEmtry.NodeIsEmpty</link></code>
  #end
  Procedure ClearZeroValues;
end;

VipInterface XMLConverter 
  implements ObjXMLConverterN, ObjXMLConverterV3, ObjXMLConverterEx2, ObjXMLConverterEx3, ObjXMLConverterEx4, ObjXMLConverterDelEmtry 
  licensed(FREE);

//******************************************************************************

#endif
