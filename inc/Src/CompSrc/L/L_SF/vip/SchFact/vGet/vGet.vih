//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 8.1 - Логистика
// Объектизация функций из vGetXXX.vpp
//******************************************************************************

#ifNdef __VGET_VIH__
#define __VGET_VIH__

#ifdef ComponentVersion
#component "L_SF"
#end

#include SchRegisterProvider.vih
#include TotalLog.vih

ObjInterface vGetObj;

  //******************************************************************************
  // vGetBD.vpp
  //******************************************************************************

  Procedure vGetBDInit;
  Function  vGetBD(pBD: comp): boolean;
  Function  vGetBDbuf: type$BaseDoc;

  //******************************************************************************
  // vGetBK.vpp
  //******************************************************************************
/*
  Procedure vGetBKInit;
  Function  vGetBk (pcBK: comp): boolean;
  Function  vGetBkV(pcBK: comp): boolean;
  Function  vGetAvansNum_ForVozvrat(aSF : comp) : string;
*/
  //******************************************************************************
  // vGetDog.vpp
  //******************************************************************************

  Procedure vGetDogInit;
  Function  vGetDog(aDog : Comp) : Boolean;
  Function  vGetDogBuf: type$Dogovor;
  Function  vGetAppDog(aAppDog : Comp) : Boolean;
  function  vGetCalPl(aClPl : Comp) : Boolean;
  function  vGetSpDocs(aSpD : Comp) : Boolean;

  //******************************************************************************
  // vGetFil.vpp
  //******************************************************************************

  Procedure vGetFilInit;
  Function  vGetFil(pFil: comp): boolean;
  Function  vGetFilbuf: type$Filial;

  //******************************************************************************
  // vGetGS.vpp
  //******************************************************************************

  Procedure vGetGSInit;
  Function  vGetGS(pGS: comp): boolean;
  Function  vGetGSbuf: type$GroupSch;

  //******************************************************************************
  // vGetGrSopr.vpp
  //******************************************************************************

/*
  Procedure vGetGrSoprInit;
  Function  vGetGrSopr(pGrSopr : comp) : Boolean;
  Function  vGetGrSoprbuf: type$GrSopr;
  Function  vGrSoprFindSFbyOrg(aOrg: comp): comp;
  Function  vGrSoprFindKSbyOrg(aOrg: comp): comp;
*/

  //******************************************************************************
  // vGetGTD.vpp
  //******************************************************************************

  Procedure GetGTDData(aCurrBookPrZk: comp; var SrcCountry, SrcGTD: string);

  //******************************************************************************
  // vGetKB.vpp
  //******************************************************************************

  Procedure vGetKBInit;
  Function  vGetKB(pKB: comp): boolean;
  Function  vGetKBActive(pKO: comp): boolean;
  Function  vGetKBbuf: type$KatBank;

  //******************************************************************************
  // vGetKC.vpp
  //******************************************************************************

  Procedure vGetKCInit;
  Function  vGetKC(pKC: comp): boolean;
  Function  vGetKCbuf: type$KatCity;

  //******************************************************************************
  // vGetKN.vpp
  //******************************************************************************

  Procedure vGetKNInit;
  Function  vGetKN(pKN: comp): boolean;
  Function  TaxOverNDS(cNal: comp; wNdsPrior: word): boolean;
  Function  vGetKNbuf: type$KatNalog;

  //******************************************************************************
  // vGetKO.vpp
  //******************************************************************************

  Procedure vGetKOInit;
  Function  vGetKO(pKO: comp): boolean;
  Function  vGetKObuf: type$KatOrg;
  Function  vGetKatState(pKS: comp): boolean;
  Function  vGetKatStatebuf: type$KatState;

  //******************************************************************************
  // vGetKS.vpp
  //******************************************************************************
/*
  Procedure vGetKSInit;
  Function  vGetKS(pKS: comp): boolean;
  Function  funIsExport(aKS : Comp) : Boolean;
  Function  GetKSInfo : String;
*/
  //******************************************************************************
  // vGetMcUs.vpp
  //******************************************************************************

  Procedure vGetMCUslInit;
  Function  vGetMC(pMC: comp): boolean;
  Function  vGetUsl(pUsl: comp): boolean;
  Function  vGetGrMC(pGrMC: comp): boolean;
  Function  vGetGrUsl(pGrUsl: comp): boolean;
  Function  IsTara(cMcUsl: comp): boolean;
  Function  funIsNoNDSObj(aPrMC : Word; aMCUsl : Comp) : Boolean;
  Function  vGetMCbuf: type$KatMC;
  Function  vGetUslbuf: type$KatUsl;
  Function  vGetGrMCbuf: type$GroupMC;

  //******************************************************************************
  // vGetObj.vpp
  //******************************************************************************
/*
  Function  vGetObj(cObject: comp): boolean;
  Procedure vObjInsertBk;
  Procedure vObjGetStorno;
  Function  vObjStornBk: boolean;
  Procedure vObjStronSchFact(cSf: comp; DateStorn: Date; cObject: comp);
  Procedure vObjStornDelayedReg( cSF: comp;
                                 DateStorn: Date;
                                 cObject: comp;
                                 provider: DelayedUKSRegistration
                               );
  Procedure vObjStornDelayedUKS( wTiDk: word;
                                 cDoc : comp;
                                 cSF: comp;
                                 dateStorn: date;
                                 cObject: comp;
                                 provider: DelayedUKSRegistration
                               );
  Procedure vObjStornInit;
*/
  //******************************************************************************
  // vGetPl.vpp
  //******************************************************************************

  Procedure vGetPLInit;
  Function  vGetPL(pPL: comp): boolean;
  Function  vGetVK(pVK: comp): boolean;
  Function  IsMainOrg_Pol(wTip : Word) : Boolean;
  Function  vGetPLbuf: type$PlPor;
  Function  vGetVKbuf: type$AppVeks;

  //******************************************************************************
  // vGetRate.vpp
  //******************************************************************************
/*
  Function  getRateDate: Date;
  //******************************************************************************
  // r1 = rate1 - курс валют по ДО на дату dCursPlat
  // r2 = rate2 - курс валют по KatSopr'у на дату dCursOtgr
  // r3 = rate3 - курс валют по KatSopr'у на дату KatSopr.dOpr
  // if (Abs(rate1 * rate2) < 0.0001) - коэффициенты не устанавливаются
  Procedure getRatesVR_DO(cPlatSf  : comp;
                          dCursPlat: date;
                          cOtgrSf  : comp;
                          dCursOtgr: date;
                          var r1: double;
                          var r2: double;
                          var r3: double;
                         );
  Procedure GetRatesForAvans_ByValNDE_DO(aPlatSchf, aOtgrSchf : comp; var AvRate_SH, AvRate_KS : double);
*/
  //******************************************************************************
  // vGetSD.vpp
  //******************************************************************************
  Procedure vGetSDInit;
  Function  vGetSD(pSD: comp): boolean;
  Function  vGetSDbyBD(pBD: comp): boolean;
  Function  vGetSDbuf: type$StepDoc;
  Function  vGetSD_c1: comp;
  Procedure vGetSDFindAvans(pSD
                              : comp;
                        var aBK_CorrAvans
                              : comp;
                        var AvansByCorr
                          , AvansByCorr1
                          , AvansByCorr2
                          , AvansByCorr3
                          , AvansByCorr4
                          , AvansByCorr5
                          , AvansByCorr6
                          , AvansByCorr7
                          , AvansByCorr8
                          , AvansByCorr9
                          , AvansByCorr10
                          , AvansByCorr23
                          , AvansByCorri1
                          , AvansByCorri2
                          , AvansByCorri3
                          , AvansByCorri4
                          , AvansByCorri11
                              : double
                        );
  //******************************************************************************
  // vGetSF.vpp
  //******************************************************************************
/*
  Function  vSfCkDir: boolean;
  Function  vGetSF(pSF: comp): boolean;
  Function  vGetSfInit(pDir: word): boolean;
*/
  //******************************************************************************
  // vGetSH.vpp
  //******************************************************************************
/*
  Procedure vGetSHInit;
  Function  vGetSH(pSH: comp): boolean;
*/
  //******************************************************************************
  // vGetSp.vpp
  //******************************************************************************
/*
  Procedure vGetSPInit;
  Function  vGetSP(pSP: comp): boolean;
*/
  //******************************************************************************
  // vGetSSD.vpp
  //******************************************************************************

  Function  IsDifferentNalogs(aStepDoc : Comp) : Boolean;

  //******************************************************************************
  // vGetSSH.vpp
  //******************************************************************************
/*
  Procedure vGetSSHInit;
  Function  vGetSSH(pSSH: comp): boolean;
*/
  //******************************************************************************
  // vGetSSP.vpp
  //******************************************************************************
/*
  Procedure vGetSSpInit;
  Function  vGetSSp(pSSp: comp): boolean;
*/
  //******************************************************************************
  // vGetUd.vpp
  //******************************************************************************

  Procedure vGetUDInit;
  Function  vGetUD(pwUD: word): boolean;
  Function  vGetUDbuf: type$UsersDoc;
  Function  vGetUD_Delete_Current: word;
  Function  vGetUD_Update_Current: word;
  Function  vGetUD_Insert_Current: word;
  Procedure vGetUD_SetBuf(Buf: type$UsersDoc);
  Procedure vGetUD_VSFCRTIP;

  //******************************************************************************
  // vGetVal.vpp
  //******************************************************************************

  Procedure vGetValInit;
  Function  vGetVal(pVal: comp): boolean;
  Function  vGetValSumma(pVal: comp; s1: double; s2: double): double;
  Function  vGetValCurs(pVal: comp; pDate: Date): double;

  //******************************************************************************
  // vGetVzr.vpp
  //******************************************************************************
/*
  Function  GetSrcOtgr(cSfVzr: comp; var dDateOtgrSF : date) : comp;
*/
  //******************************************************************************
  // vGetVzrRz.vpp
  //******************************************************************************

  Function  GetSrcOtgrRozn(cSFVzr : Comp; var dDateOtgrSF : Date) : Comp;

  //******************************************************************************
end;

ObjInterface vGetObj1;

  Function  vGetAppDogBuf: type$Dogovor;

end;

VipInterface ivGet implements vGetObj, vGetObj1 licensed(FREE);

#end // __VGET_VIH__
