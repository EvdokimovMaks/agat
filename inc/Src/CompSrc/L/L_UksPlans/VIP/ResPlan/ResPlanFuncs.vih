//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.1
// Вспомогательные функции для поресурсного планирования
//------------------------------------------------------------------------------
#ifndef _ResPlanFuncs_vih_
#define _ResPlanFuncs_vih_

#component "L_UksPlans"

#include ScheduleKS.vih

const
  HOURS_IN_WORK_DAY = 8;

  // Единицы отображение длительности работ
  DURATION_DISPLAY_UNIT_DAYS = 0; // дни
  DURATION_DISPLAY_UNIT_HOURS = 1; // часы
end;

objinterface IResPlanFuncs;

  #doc
  Проверка на равенство двух значений КТУ с "жестко зашитой" абсолютной погрешностью.
  #end
  public function KtuEqual(_ktu1, _ktu2: double): boolean;

  #doc
  Сравнение двух значений КТУ с "жестко зашитой" абсолютной погрешностью.</brief>
  Возвращаемые значения:
   0 - если _ktu1 равно в пределах погрешности _ktu2
   1 - если _ktu1 > _ktu2
  -1 - если _ktu1 < _ktu2
  #end
  public function KtuCompare(_ktu1, _ktu2: double): integer;

  #doc
  Конвертация количества рабочих часов в количество рабочих дней.
  #end
  public function WorkHoursToDays(_hours: double): longint;

  #doc
  Конвертация количества рабочих дней в количество рабочих часов.
  #end
  public function WorkDaysToHours(_days: longint): double;

  #doc
  Дата начала выполнения работы, рассчитанная на основании смещения от даты начала использования ресурса.
  #end
  public function DateBeginByTimeShift(_resDateBegin: date; _timeShiftInHours: double): date;

  #doc
  Получить дату начала выполнения работы/использования ресурса на основании продолжительности и даты окончания.
  #end
  public function DateBeginByDateEnd(_dateEnd: date; _durationInHours: double): date;

  #doc
  Дата окончания выполнения работы, рассчитанная на основании продолжительности и даты начала выполнения работы.
  #end
  public function DateEndByDuration(_jobDateBegin: date; _durationInHours: double): date;

  #doc
  Возвращает смещение от даты начала использования ресурса для указанной даты начала выполнения работы
  #end
  public function TimeShiftByDateBegin(_resDateBegin, _jobDateBegin: date): double;

  #doc
  Возвращает продолжительность выполнения работы или длительность использования ресурса
  на основании даты начала и даты окончания
  #end
  public function DurationBetweenDates(_dateBegin, _dateEnd: date): double;

  #doc
  преобразует хранимые в БД  единицы измерения длительности в отображаемые
  #end
  public function DurationToDisplayUnits(_displayUnit: word; _durationInHours: double): longint;

  #doc
  преобразует отображаемые единицы измерения длительности в единицы, хранимые в БД
  #end
  public function DisplayUnitsToDuration(_displayUnit: word; _durationInDisplayUnits: longint): double;

  #doc
  Расчет КТУ на основании трудоемкости и длительности с учетом единицы измерения трудоемкости
  #end
  public function CalcKtu(_labor: double; _cEdLabor: comp; _duration: double): double;

  #doc
  Расчет длительности на основании трудоемкости и КТУ с учетом единицы измерения трудоемкости
  #end
  public function CalcDuration(_labor: double; _cEdLabor: comp; _ktu: double): double;

  #doc
  возвращает трудоемкость задачи
  #end
  public function GetTaskLaboriousness(
    _planJob: comp;         // PlanJob.nRec
    _dBeg: date;            // TaskInfo.dBeg
    _duration: double;      // TaskInfo.fDuration
    _schedule: IScheduleKS
  ): double;

  #doc
  Подстройка (корректировка) соответствия атрибутов задачи (ресурса) атрибутам назначенных исполнителей (при их наличии).
  #end
  public function AdjustTaskInfoByAssignments(
    _schedule: IScheduleKS; //#docl ссылка на планировщик
    _planJobTipRes: word;     //#docl PlanJob.TipRes ресурса
    var _taskInfo: type$TaskInfo
  ): boolean; //#docl Возвращает true, если атрибуты задачи были скорректированы

  #doc
  Подстройка (корректировка) соответствия атрибутов всех задач (ресурсов) указанного варианта плана
  атрибутам назначенных исполнителей (при их наличии).
  #end
  public procedure AdjustAllTasksByAssignments(
    _planVar: comp;         //#docl вариант плана
    _schedule: IScheduleKS  //#docl ссылка на планировщик
  );

end;

vipinterface ResPlanFuncs implements IResPlanFuncs licensed(free);

#endif
