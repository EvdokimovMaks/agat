//-------------------------------------------------------------------
//--- Copyright(c) 2001 by Galaktika Corporation                  ---
//--- Этот файл автоматически генерируется для использования      ---
//--- COM интерфейсов из Атлантиса. Править этот файл запрещается ---
//--- так как это может привести к неработоспособности системы    ---
//-------------------------------------------------------------------

// mscorlib.dll

#ifndef __mscorlib__
#define __mscorlib__
#include atlcom.vih

//--- Forwards declarations --------------

ObjInterface comISerializable; forward;
ObjInterface com_Exception; forward;
ObjInterface comIComparable; forward;
ObjInterface comIFormattable; forward;
ObjInterface comIConvertible; forward;
ObjInterface comICloneable; forward;
ObjInterface comIEnumerable; forward;
ObjInterface comICollection; forward;
ObjInterface comIList; forward;
ObjInterface comIEnumerator; forward;
ObjInterface comIDisposable; forward;
ObjInterface comIComparer; forward;
ObjInterface comIEqualityComparer; forward;
ObjInterface comIDeserializationCallback; forward;
ObjInterface com_Activator; forward;
ObjInterface com_AppDomain; forward;
ObjInterface comIEvidenceFactory; forward;
ObjInterface comIAppDomainSetup; forward;
ObjInterface com_Attribute; forward;
ObjInterface com_Thread; forward;
ObjInterface comIObjectReference; forward;
ObjInterface comIAsyncResult; forward;
ObjInterface comICustomFormatter; forward;
ObjInterface comIFormatProvider; forward;
ObjInterface comICustomAttributeProvider; forward;
ObjInterface com_MemberInfo; forward;
ObjInterface com_Type; forward;
ObjInterface comIReflect; forward;
ObjInterface comIObjectHandle; forward;
ObjInterface comIHashCodeProvider; forward;
ObjInterface comIDictionary; forward;
ObjInterface comIDictionaryEnumerator; forward;
ObjInterface comISymbolBinder; forward;
ObjInterface comISymbolBinder1; forward;
ObjInterface comISymbolDocument; forward;
ObjInterface comISymbolDocumentWriter; forward;
ObjInterface comISymbolMethod; forward;
ObjInterface comISymbolNamespace; forward;
ObjInterface comISymbolReader; forward;
ObjInterface comISymbolScope; forward;
ObjInterface comISymbolVariable; forward;
ObjInterface comISymbolWriter; forward;
ObjInterface com_Assembly; forward;
ObjInterface com_AssemblyName; forward;
ObjInterface com_MethodBase; forward;
ObjInterface com_MethodInfo; forward;
ObjInterface com_ConstructorInfo; forward;
ObjInterface com_FieldInfo; forward;
ObjInterface com_PropertyInfo; forward;
ObjInterface com_EventInfo; forward;
ObjInterface com_ParameterInfo; forward;
ObjInterface com_Module; forward;
ObjInterface comIFormatterConverter; forward;
ObjInterface comISerializationSurrogate; forward;
ObjInterface comIFormatter; forward;
ObjInterface comISurrogateSelector; forward;
ObjInterface comIResourceReader; forward;
ObjInterface comIResourceWriter; forward;
ObjInterface comISecurityEncodable; forward;
ObjInterface comISecurityPolicyEncodable; forward;
ObjInterface comIMembershipCondition; forward;
ObjInterface comIIdentityPermissionFactory; forward;
ObjInterface comIApplicationTrustManager; forward;
ObjInterface comIIdentity; forward;
ObjInterface comIPrincipal; forward;
ObjInterface comICustomMarshaler; forward;
ObjInterface comITypeLibImporterNotifySink; forward;
ObjInterface comICustomAdapter; forward;
ObjInterface comICustomFactory; forward;
ObjInterface comIRegistrationServices; forward;
ObjInterface comITypeLibExporterNotifySink; forward;
ObjInterface comITypeLibConverter; forward;
ObjInterface comITypeLibExporterNameProvider; forward;
ObjInterface comIExpando; forward;
ObjInterface comIPermission; forward;
ObjInterface comIStackWalk; forward;
ObjInterface comIUnrestrictedPermission; forward;
ObjInterface comIContextAttribute; forward;
ObjInterface comIContextProperty; forward;
ObjInterface comIActivator; forward;
ObjInterface comIMessageSink; forward;
ObjInterface comIClientResponseChannelSinkStack; forward;
ObjInterface comIClientChannelSinkStack; forward;
ObjInterface comIServerResponseChannelSinkStack; forward;
ObjInterface comIServerChannelSinkStack; forward;
ObjInterface comISponsor; forward;
ObjInterface comIContextPropertyActivator; forward;
ObjInterface comIChannel; forward;
ObjInterface comIChannelSender; forward;
ObjInterface comIChannelReceiver; forward;
ObjInterface comIServerChannelSinkProvider; forward;
ObjInterface comIChannelSinkBase; forward;
ObjInterface comIServerChannelSink; forward;
ObjInterface comIMessage; forward;
ObjInterface comIMethodMessage; forward;
ObjInterface comIMethodCallMessage; forward;
ObjInterface comIConstructionCallMessage; forward;
ObjInterface comIMethodReturnMessage; forward;
ObjInterface comIConstructionReturnMessage; forward;
ObjInterface comIChannelReceiverHook; forward;
ObjInterface comIClientChannelSinkProvider; forward;
ObjInterface comIClientFormatterSinkProvider; forward;
ObjInterface comIServerFormatterSinkProvider; forward;
ObjInterface comIClientChannelSink; forward;
ObjInterface comIClientFormatterSink; forward;
ObjInterface comIChannelDataStore; forward;
ObjInterface comITransportHeaders; forward;
ObjInterface comIContributeClientContextSink; forward;
ObjInterface comIContributeDynamicSink; forward;
ObjInterface comIContributeEnvoySink; forward;
ObjInterface comIContributeObjectSink; forward;
ObjInterface comIContributeServerContextSink; forward;
ObjInterface comIDynamicProperty; forward;
ObjInterface comIDynamicMessageSink; forward;
ObjInterface comILease; forward;
ObjInterface comIMessageCtrl; forward;
ObjInterface comIRemotingFormatter; forward;
ObjInterface comIFieldInfo; forward;
ObjInterface comIRemotingTypeInfo; forward;
ObjInterface comIChannelInfo; forward;
ObjInterface comIEnvoyInfo; forward;
ObjInterface comISoapXsd; forward;
ObjInterface comITrackingHandler; forward;
ObjInterface comILogicalThreadAffinative; forward;
ObjInterface comINormalizeForIsolatedStorage; forward;
ObjInterface comISoapMessage; forward;
ObjInterface com_AssemblyBuilder; forward;
ObjInterface com_ConstructorBuilder; forward;
ObjInterface com_CustomAttributeBuilder; forward;
ObjInterface com_EnumBuilder; forward;
ObjInterface com_EventBuilder; forward;
ObjInterface com_FieldBuilder; forward;
ObjInterface com_ILGenerator; forward;
ObjInterface com_LocalBuilder; forward;
ObjInterface com_MethodBuilder; forward;
ObjInterface com_MethodRental; forward;
ObjInterface com_ModuleBuilder; forward;
ObjInterface com_ParameterBuilder; forward;
ObjInterface com_PropertyBuilder; forward;
ObjInterface com_SignatureHelper; forward;
ObjInterface com_TypeBuilder; forward;
ObjInterface comICryptoTransform; forward;
ObjInterface comICspAsymmetricAlgorithm; forward;
ObjInterface com_Object; forward;
ObjInterface com_ValueType; forward;
ObjInterface com_Enum; forward;
ObjInterface com_Delegate; forward;
ObjInterface com_MulticastDelegate; forward;
ObjInterface com_Array; forward;
ObjInterface com_String; forward;
ObjInterface com_StringComparer; forward;
ObjInterface com_StringBuilder; forward;
ObjInterface com_SystemException; forward;
ObjInterface com_OutOfMemoryException; forward;
ObjInterface com_StackOverflowException; forward;
ObjInterface com_DataMisalignedException; forward;
ObjInterface com_ExecutionEngineException; forward;
ObjInterface com_MemberAccessException; forward;
ObjInterface com_AccessViolationException; forward;
ObjInterface com_ApplicationActivator; forward;
ObjInterface com_ApplicationException; forward;
ObjInterface com_EventArgs; forward;
ObjInterface com_ResolveEventArgs; forward;
ObjInterface com_AssemblyLoadEventArgs; forward;
ObjInterface com_ResolveEventHandler; forward;
ObjInterface com_AssemblyLoadEventHandler; forward;
ObjInterface com_AppDomainInitializer; forward;
ObjInterface com_MarshalByRefObject; forward;
ObjInterface com_CrossAppDomainDelegate; forward;
ObjInterface com_AppDomainManager; forward;
ObjInterface com_LoaderOptimizationAttribute; forward;
ObjInterface com_AppDomainUnloadedException; forward;
ObjInterface com_EvidenceBase; forward;
ObjInterface com_ActivationArguments; forward;
ObjInterface com_ApplicationId; forward;
ObjInterface com_ArgumentException; forward;
ObjInterface com_ArgumentNullException; forward;
ObjInterface com_ArgumentOutOfRangeException; forward;
ObjInterface com_ArithmeticException; forward;
ObjInterface com_ArrayTypeMismatchException; forward;
ObjInterface com_AsyncCallback; forward;
ObjInterface com_AttributeUsageAttribute; forward;
ObjInterface com_BadImageFormatException; forward;
ObjInterface com_Buffer; forward;
ObjInterface com_CannotUnloadAppDomainException; forward;
ObjInterface com_CharEnumerator; forward;
ObjInterface com_CLSCompliantAttribute; forward;
ObjInterface com_TypeUnloadedException; forward;
ObjInterface com_CriticalFinalizerObject; forward;
ObjInterface com_ContextMarshalException; forward;
ObjInterface com_ContextBoundObject; forward;
ObjInterface com_ContextStaticAttribute; forward;
ObjInterface com_TimeZone; forward;
ObjInterface com_DBNull; forward;
ObjInterface com_Binder; forward;
ObjInterface com_DivideByZeroException; forward;
ObjInterface com_DuplicateWaitObjectException; forward;
ObjInterface com_TypeLoadException; forward;
ObjInterface com_EntryPointNotFoundException; forward;
ObjInterface com_DllNotFoundException; forward;
ObjInterface com_Environment; forward;
ObjInterface com_EventHandler; forward;
ObjInterface com_FieldAccessException; forward;
ObjInterface com_FlagsAttribute; forward;
ObjInterface com_FormatException; forward;
ObjInterface com_IndexOutOfRangeException; forward;
ObjInterface com_InvalidCastException; forward;
ObjInterface com_InvalidOperationException; forward;
ObjInterface com_InvalidProgramException; forward;
ObjInterface com_LocalDataStoreSlot; forward;
ObjInterface com_MethodAccessException; forward;
ObjInterface com_MissingMemberException; forward;
ObjInterface com_MissingFieldException; forward;
ObjInterface com_MissingMethodException; forward;
ObjInterface com_MulticastNotSupportedException; forward;
ObjInterface com_NonSerializedAttribute; forward;
ObjInterface com_NotFiniteNumberException; forward;
ObjInterface com_NotImplementedException; forward;
ObjInterface com_NotSupportedException; forward;
ObjInterface com_NullReferenceException; forward;
ObjInterface com_ObjectDisposedException; forward;
ObjInterface com_ObsoleteAttribute; forward;
ObjInterface com_OperatingSystem; forward;
ObjInterface com_OperationCanceledException; forward;
ObjInterface com_OverflowException; forward;
ObjInterface com_ParamArrayAttribute; forward;
ObjInterface com_PlatformNotSupportedException; forward;
ObjInterface com_Random; forward;
ObjInterface com_RankException; forward;
ObjInterface com_TypeInfo; forward;
ObjInterface com_SerializableAttribute; forward;
ObjInterface com_STAThreadAttribute; forward;
ObjInterface com_MTAThreadAttribute; forward;
ObjInterface com_TimeoutException; forward;
ObjInterface com_TypeInitializationException; forward;
ObjInterface com_UnauthorizedAccessException; forward;
ObjInterface com_UnhandledExceptionEventArgs; forward;
ObjInterface com_UnhandledExceptionEventHandler; forward;
ObjInterface com_Version; forward;
ObjInterface com_WeakReference; forward;
ObjInterface com_WaitHandle; forward;
ObjInterface com_EventWaitHandle; forward;
ObjInterface com_AutoResetEvent; forward;
ObjInterface com_ContextCallback; forward;
ObjInterface com_ManualResetEvent; forward;
ObjInterface com_Monitor; forward;
ObjInterface com_Mutex; forward;
ObjInterface com_Overlapped; forward;
ObjInterface com_ReaderWriterLock; forward;
ObjInterface com_SynchronizationLockException; forward;
ObjInterface com_ThreadAbortException; forward;
ObjInterface com_ThreadInterruptedException; forward;
ObjInterface com_RegisteredWaitHandle; forward;
ObjInterface com_WaitCallback; forward;
ObjInterface com_WaitOrTimerCallback; forward;
ObjInterface com_IOCompletionCallback; forward;
ObjInterface com_ThreadStart; forward;
ObjInterface com_ThreadStateException; forward;
ObjInterface com_ThreadStaticAttribute; forward;
ObjInterface com_Timeout; forward;
ObjInterface com_TimerCallback; forward;
ObjInterface com_Timer; forward;
ObjInterface com_CaseInsensitiveComparer; forward;
ObjInterface com_CaseInsensitiveHashCodeProvider; forward;
ObjInterface com_CollectionBase; forward;
ObjInterface com_DictionaryBase; forward;
ObjInterface com_ReadOnlyCollectionBase; forward;
ObjInterface com_Queue; forward;
ObjInterface com_ArrayList; forward;
ObjInterface com_BitArray; forward;
ObjInterface com_Stack; forward;
ObjInterface com_Comparer; forward;
ObjInterface com_Hashtable; forward;
ObjInterface com_SortedList; forward;
ObjInterface com_Nullable; forward;
ObjInterface com_KeyNotFoundException; forward;
ObjInterface com_ConditionalAttribute; forward;
ObjInterface com_Debugger; forward;
ObjInterface com_DebuggerStepThroughAttribute; forward;
ObjInterface com_DebuggerStepperBoundaryAttribute; forward;
ObjInterface com_DebuggerHiddenAttribute; forward;
ObjInterface com_DebuggerNonUserCodeAttribute; forward;
ObjInterface com_DebuggableAttribute; forward;
ObjInterface com_DebuggerBrowsableAttribute; forward;
ObjInterface com_DebuggerTypeProxyAttribute; forward;
ObjInterface com_DebuggerDisplayAttribute; forward;
ObjInterface com_DebuggerVisualizerAttribute; forward;
ObjInterface com_StackTrace; forward;
ObjInterface com_StackFrame; forward;
ObjInterface com_SymDocumentType; forward;
ObjInterface com_SymLanguageType; forward;
ObjInterface com_SymLanguageVendor; forward;
ObjInterface com_AmbiguousMatchException; forward;
ObjInterface com_ModuleResolveEventHandler; forward;
ObjInterface com_AssemblyCopyrightAttribute; forward;
ObjInterface com_AssemblyTrademarkAttribute; forward;
ObjInterface com_AssemblyProductAttribute; forward;
ObjInterface com_AssemblyCompanyAttribute; forward;
ObjInterface com_AssemblyDescriptionAttribute; forward;
ObjInterface com_AssemblyTitleAttribute; forward;
ObjInterface com_AssemblyConfigurationAttribute; forward;
ObjInterface com_AssemblyDefaultAliasAttribute; forward;
ObjInterface com_AssemblyInformationalVersionAttribute; forward;
ObjInterface com_AssemblyFileVersionAttribute; forward;
ObjInterface com_AssemblyCultureAttribute; forward;
ObjInterface com_AssemblyVersionAttribute; forward;
ObjInterface com_AssemblyKeyFileAttribute; forward;
ObjInterface com_AssemblyDelaySignAttribute; forward;
ObjInterface com_AssemblyAlgorithmIdAttribute; forward;
ObjInterface com_AssemblyFlagsAttribute; forward;
ObjInterface com_AssemblyKeyNameAttribute; forward;
ObjInterface com_AssemblyNameProxy; forward;
ObjInterface com_CustomAttributeFormatException; forward;
ObjInterface com_CustomAttributeData; forward;
ObjInterface com_DefaultMemberAttribute; forward;
ObjInterface com_InvalidFilterCriteriaException; forward;
ObjInterface com_ManifestResourceInfo; forward;
ObjInterface com_MemberFilter; forward;
ObjInterface com_Missing; forward;
ObjInterface com_ObfuscateAssemblyAttribute; forward;
ObjInterface com_ObfuscationAttribute; forward;
ObjInterface com_ExceptionHandlingClause; forward;
ObjInterface com_MethodBody; forward;
ObjInterface com_LocalVariableInfo; forward;
ObjInterface com_Pointer; forward;
ObjInterface com_ReflectionTypeLoadException; forward;
ObjInterface com_StrongNameKeyPair; forward;
ObjInterface com_TargetException; forward;
ObjInterface com_TargetInvocationException; forward;
ObjInterface com_TargetParameterCountException; forward;
ObjInterface com_TypeDelegator; forward;
ObjInterface com_TypeFilter; forward;
ObjInterface com_FormatterConverter; forward;
ObjInterface com_FormatterServices; forward;
ObjInterface com_OptionalFieldAttribute; forward;
ObjInterface com_OnSerializingAttribute; forward;
ObjInterface com_OnSerializedAttribute; forward;
ObjInterface com_OnDeserializingAttribute; forward;
ObjInterface com_OnDeserializedAttribute; forward;
ObjInterface com_SerializationBinder; forward;
ObjInterface com_SerializationException; forward;
ObjInterface com_SerializationInfo; forward;
ObjInterface com_SerializationInfoEnumerator; forward;
ObjInterface com_Formatter; forward;
ObjInterface com_ObjectIDGenerator; forward;
ObjInterface com_ObjectManager; forward;
ObjInterface com_SurrogateSelector; forward;
ObjInterface com_Calendar; forward;
ObjInterface com_CompareInfo; forward;
ObjInterface com_CultureInfo; forward;
ObjInterface com_CultureNotFoundException; forward;
ObjInterface com_DateTimeFormatInfo; forward;
ObjInterface com_DaylightTime; forward;
ObjInterface com_GregorianCalendar; forward;
ObjInterface com_HebrewCalendar; forward;
ObjInterface com_HijriCalendar; forward;
ObjInterface com_EastAsianLunisolarCalendar; forward;
ObjInterface com_JulianCalendar; forward;
ObjInterface com_JapaneseCalendar; forward;
ObjInterface com_KoreanCalendar; forward;
ObjInterface com_RegionInfo; forward;
ObjInterface com_SortKey; forward;
ObjInterface com_StringInfo; forward;
ObjInterface com_TaiwanCalendar; forward;
ObjInterface com_TextElementEnumerator; forward;
ObjInterface com_TextInfo; forward;
ObjInterface com_ThaiBuddhistCalendar; forward;
ObjInterface com_NumberFormatInfo; forward;
ObjInterface com_Encoding; forward;
ObjInterface com_Encoder; forward;
ObjInterface com_Decoder; forward;
ObjInterface com_ASCIIEncoding; forward;
ObjInterface com_UnicodeEncoding; forward;
ObjInterface com_UTF7Encoding; forward;
ObjInterface com_UTF8Encoding; forward;
ObjInterface com_MissingManifestResourceException; forward;
ObjInterface com_MissingSatelliteAssemblyException; forward;
ObjInterface com_NeutralResourcesLanguageAttribute; forward;
ObjInterface com_ResourceManager; forward;
ObjInterface com_ResourceReader; forward;
ObjInterface com_ResourceSet; forward;
ObjInterface com_ResourceWriter; forward;
ObjInterface com_SatelliteContractVersionAttribute; forward;
ObjInterface com_Registry; forward;
ObjInterface com_RegistryKey; forward;
ObjInterface com_AllMembershipCondition; forward;
ObjInterface com_ApplicationDirectory; forward;
ObjInterface com_ApplicationDirectoryMembershipCondition; forward;
ObjInterface com_ApplicationSecurityInfo; forward;
ObjInterface com_ApplicationSecurityManager; forward;
ObjInterface com_ApplicationTrust; forward;
ObjInterface com_ApplicationTrustCollection; forward;
ObjInterface com_ApplicationTrustEnumerator; forward;
ObjInterface com_CodeGroup; forward;
ObjInterface com_Evidence; forward;
ObjInterface com_FileCodeGroup; forward;
ObjInterface com_FirstMatchCodeGroup; forward;
ObjInterface com_TrustManagerContext; forward;
ObjInterface com_CodeConnectAccess; forward;
ObjInterface com_NetCodeGroup; forward;
ObjInterface com_PermissionRequestEvidence; forward;
ObjInterface com_PolicyException; forward;
ObjInterface com_PolicyLevel; forward;
ObjInterface com_PolicyStatement; forward;
ObjInterface com_Site; forward;
ObjInterface com_SiteMembershipCondition; forward;
ObjInterface com_StrongName; forward;
ObjInterface com_StrongNameMembershipCondition; forward;
ObjInterface com_UnionCodeGroup; forward;
ObjInterface com_Url; forward;
ObjInterface com_UrlMembershipCondition; forward;
ObjInterface com_Zone; forward;
ObjInterface com_ZoneMembershipCondition; forward;
ObjInterface com_GacInstalled; forward;
ObjInterface com_GacMembershipCondition; forward;
ObjInterface com_Hash; forward;
ObjInterface com_HashMembershipCondition; forward;
ObjInterface com_Publisher; forward;
ObjInterface com_PublisherMembershipCondition; forward;
ObjInterface com_ClaimsIdentity; forward;
ObjInterface com_GenericIdentity; forward;
ObjInterface com_ClaimsPrincipal; forward;
ObjInterface com_GenericPrincipal; forward;
ObjInterface com_WindowsIdentity; forward;
ObjInterface com_WindowsImpersonationContext; forward;
ObjInterface com_WindowsPrincipal; forward;
ObjInterface com_UnmanagedFunctionPointerAttribute; forward;
ObjInterface com_DispIdAttribute; forward;
ObjInterface com_InterfaceTypeAttribute; forward;
ObjInterface com_ComDefaultInterfaceAttribute; forward;
ObjInterface com_ClassInterfaceAttribute; forward;
ObjInterface com_ComVisibleAttribute; forward;
ObjInterface com_TypeLibImportClassAttribute; forward;
ObjInterface com_LCIDConversionAttribute; forward;
ObjInterface com_ComRegisterFunctionAttribute; forward;
ObjInterface com_ComUnregisterFunctionAttribute; forward;
ObjInterface com_ProgIdAttribute; forward;
ObjInterface com_ImportedFromTypeLibAttribute; forward;
ObjInterface com_IDispatchImplAttribute; forward;
ObjInterface com_ComSourceInterfacesAttribute; forward;
ObjInterface com_ComConversionLossAttribute; forward;
ObjInterface com_TypeLibTypeAttribute; forward;
ObjInterface com_TypeLibFuncAttribute; forward;
ObjInterface com_TypeLibVarAttribute; forward;
ObjInterface com_MarshalAsAttribute; forward;
ObjInterface com_ComImportAttribute; forward;
ObjInterface com_GuidAttribute; forward;
ObjInterface com_PreserveSigAttribute; forward;
ObjInterface com_InAttribute; forward;
ObjInterface com_OutAttribute; forward;
ObjInterface com_OptionalAttribute; forward;
ObjInterface com_DllImportAttribute; forward;
ObjInterface com_StructLayoutAttribute; forward;
ObjInterface com_FieldOffsetAttribute; forward;
ObjInterface com_ComAliasNameAttribute; forward;
ObjInterface com_AutomationProxyAttribute; forward;
ObjInterface com_PrimaryInteropAssemblyAttribute; forward;
ObjInterface com_CoClassAttribute; forward;
ObjInterface com_ComEventInterfaceAttribute; forward;
ObjInterface com_TypeLibVersionAttribute; forward;
ObjInterface com_ComCompatibleVersionAttribute; forward;
ObjInterface com_BestFitMappingAttribute; forward;
ObjInterface com_DefaultCharSetAttribute; forward;
ObjInterface com_SetWin32ContextInIDispatchAttribute; forward;
ObjInterface com_ExternalException; forward;
ObjInterface com_COMException; forward;
ObjInterface com_InvalidOleVariantTypeException; forward;
ObjInterface com_MarshalDirectiveException; forward;
ObjInterface com_RuntimeEnvironment; forward;
ObjInterface com_SEHException; forward;
ObjInterface com_BStrWrapper; forward;
ObjInterface com_CurrencyWrapper; forward;
ObjInterface com_DispatchWrapper; forward;
ObjInterface com_ErrorWrapper; forward;
ObjInterface com_ExtensibleClassFactory; forward;
ObjInterface com_InvalidComObjectException; forward;
ObjInterface com_ObjectCreationDelegate; forward;
ObjInterface com_SafeArrayRankMismatchException; forward;
ObjInterface com_SafeArrayTypeMismatchException; forward;
ObjInterface com_UnknownWrapper; forward;
ObjInterface com_TextWriter; forward;
ObjInterface com_Stream; forward;
ObjInterface com_BinaryReader; forward;
ObjInterface com_BinaryWriter; forward;
ObjInterface com_BufferedStream; forward;
ObjInterface com_Directory; forward;
ObjInterface com_FileSystemInfo; forward;
ObjInterface com_DirectoryInfo; forward;
ObjInterface com_IOException; forward;
ObjInterface com_DirectoryNotFoundException; forward;
ObjInterface com_DriveInfo; forward;
ObjInterface com_DriveNotFoundException; forward;
ObjInterface com_EndOfStreamException; forward;
ObjInterface com_File; forward;
ObjInterface com_FileInfo; forward;
ObjInterface com_FileLoadException; forward;
ObjInterface com_FileNotFoundException; forward;
ObjInterface com_FileStream; forward;
ObjInterface com_MemoryStream; forward;
ObjInterface com_Path; forward;
ObjInterface com_PathTooLongException; forward;
ObjInterface com_TextReader; forward;
ObjInterface com_StreamReader; forward;
ObjInterface com_StreamWriter; forward;
ObjInterface com_StringReader; forward;
ObjInterface com_StringWriter; forward;
ObjInterface com_AccessedThroughPropertyAttribute; forward;
ObjInterface com_CallConvCdecl; forward;
ObjInterface com_CallConvStdcall; forward;
ObjInterface com_CallConvThiscall; forward;
ObjInterface com_CallConvFastcall; forward;
ObjInterface com_CustomConstantAttribute; forward;
ObjInterface com_DateTimeConstantAttribute; forward;
ObjInterface com_DiscardableAttribute; forward;
ObjInterface com_DecimalConstantAttribute; forward;
ObjInterface com_CompilationRelaxationsAttribute; forward;
ObjInterface com_CompilerGlobalScopeAttribute; forward;
ObjInterface com_IndexerNameAttribute; forward;
ObjInterface com_IsVolatile; forward;
ObjInterface com_MethodImplAttribute; forward;
ObjInterface com_RequiredAttributeAttribute; forward;
ObjInterface com_IsCopyConstructed; forward;
ObjInterface com_NativeCppClassAttribute; forward;
ObjInterface com_IDispatchConstantAttribute; forward;
ObjInterface com_IUnknownConstantAttribute; forward;
ObjInterface com_SecurityElement; forward;
ObjInterface com_XmlSyntaxException; forward;
ObjInterface com_CodeAccessPermission; forward;
ObjInterface com_EnvironmentPermission; forward;
ObjInterface com_FileDialogPermission; forward;
ObjInterface com_FileIOPermission; forward;
ObjInterface com_SecurityAttribute; forward;
ObjInterface com_CodeAccessSecurityAttribute; forward;
ObjInterface com_HostProtectionAttribute; forward;
ObjInterface com_IsolatedStoragePermission; forward;
ObjInterface com_IsolatedStorageFilePermission; forward;
ObjInterface com_EnvironmentPermissionAttribute; forward;
ObjInterface com_FileDialogPermissionAttribute; forward;
ObjInterface com_FileIOPermissionAttribute; forward;
ObjInterface com_KeyContainerPermissionAttribute; forward;
ObjInterface com_PrincipalPermissionAttribute; forward;
ObjInterface com_ReflectionPermissionAttribute; forward;
ObjInterface com_RegistryPermissionAttribute; forward;
ObjInterface com_SecurityPermissionAttribute; forward;
ObjInterface com_UIPermissionAttribute; forward;
ObjInterface com_ZoneIdentityPermissionAttribute; forward;
ObjInterface com_StrongNameIdentityPermissionAttribute; forward;
ObjInterface com_SiteIdentityPermissionAttribute; forward;
ObjInterface com_UrlIdentityPermissionAttribute; forward;
ObjInterface com_PublisherIdentityPermissionAttribute; forward;
ObjInterface com_IsolatedStoragePermissionAttribute; forward;
ObjInterface com_IsolatedStorageFilePermissionAttribute; forward;
ObjInterface com_PermissionSetAttribute; forward;
ObjInterface com_ReflectionPermission; forward;
ObjInterface com_PrincipalPermission; forward;
ObjInterface com_SecurityPermission; forward;
ObjInterface com_SiteIdentityPermission; forward;
ObjInterface com_StrongNameIdentityPermission; forward;
ObjInterface com_StrongNamePublicKeyBlob; forward;
ObjInterface com_UIPermission; forward;
ObjInterface com_UrlIdentityPermission; forward;
ObjInterface com_ZoneIdentityPermission; forward;
ObjInterface com_GacIdentityPermissionAttribute; forward;
ObjInterface com_GacIdentityPermission; forward;
ObjInterface com_KeyContainerPermissionAccessEntry; forward;
ObjInterface com_KeyContainerPermissionAccessEntryCollection; forward;
ObjInterface com_KeyContainerPermissionAccessEntryEnumerator; forward;
ObjInterface com_KeyContainerPermission; forward;
ObjInterface com_PublisherIdentityPermission; forward;
ObjInterface com_RegistryPermission; forward;
ObjInterface com_SuppressUnmanagedCodeSecurityAttribute; forward;
ObjInterface com_UnverifiableCodeAttribute; forward;
ObjInterface com_AllowPartiallyTrustedCallersAttribute; forward;
ObjInterface com_HostSecurityManager; forward;
ObjInterface com_PermissionSet; forward;
ObjInterface com_NamedPermissionSet; forward;
ObjInterface com_SecurityException; forward;
ObjInterface com_HostProtectionException; forward;
ObjInterface com_SecurityManager; forward;
ObjInterface com_VerificationException; forward;
ObjInterface com_ContextAttribute; forward;
ObjInterface com_AsyncResult; forward;
ObjInterface com_ChannelServices; forward;
ObjInterface com_ClientChannelSinkStack; forward;
ObjInterface com_ServerChannelSinkStack; forward;
ObjInterface com_ClientSponsor; forward;
ObjInterface com_CrossContextDelegate; forward;
ObjInterface com_Context; forward;
ObjInterface com_ContextProperty; forward;
ObjInterface com_EnterpriseServicesHelper; forward;
ObjInterface com_ChannelDataStore; forward;
ObjInterface com_TransportHeaders; forward;
ObjInterface com_SinkProviderData; forward;
ObjInterface com_BaseChannelObjectWithProperties; forward;
ObjInterface com_BaseChannelSinkWithProperties; forward;
ObjInterface com_BaseChannelWithProperties; forward;
ObjInterface com_LifetimeServices; forward;
ObjInterface com_ReturnMessage; forward;
ObjInterface com_MethodCall; forward;
ObjInterface com_ConstructionCall; forward;
ObjInterface com_MethodResponse; forward;
ObjInterface com_ConstructionResponse; forward;
ObjInterface com_InternalMessageWrapper; forward;
ObjInterface com_MethodCallMessageWrapper; forward;
ObjInterface com_MethodReturnMessageWrapper; forward;
ObjInterface com_ObjRef; forward;
ObjInterface com_OneWayAttribute; forward;
ObjInterface com_ProxyAttribute; forward;
ObjInterface com_RealProxy; forward;
ObjInterface com_SoapAttribute; forward;
ObjInterface com_SoapTypeAttribute; forward;
ObjInterface com_SoapMethodAttribute; forward;
ObjInterface com_SoapFieldAttribute; forward;
ObjInterface com_SoapParameterAttribute; forward;
ObjInterface com_RemotingConfiguration; forward;
ObjInterface com_TypeEntry; forward;
ObjInterface com_ActivatedClientTypeEntry; forward;
ObjInterface com_ActivatedServiceTypeEntry; forward;
ObjInterface com_WellKnownClientTypeEntry; forward;
ObjInterface com_WellKnownServiceTypeEntry; forward;
ObjInterface com_RemotingException; forward;
ObjInterface com_ServerException; forward;
ObjInterface com_RemotingTimeoutException; forward;
ObjInterface com_RemotingServices; forward;
ObjInterface com_InternalRemotingServices; forward;
ObjInterface com_MessageSurrogateFilter; forward;
ObjInterface com_RemotingSurrogateSelector; forward;
ObjInterface com_SoapServices; forward;
ObjInterface com_SoapDateTime; forward;
ObjInterface com_SoapDuration; forward;
ObjInterface com_SoapTime; forward;
ObjInterface com_SoapDate; forward;
ObjInterface com_SoapYearMonth; forward;
ObjInterface com_SoapYear; forward;
ObjInterface com_SoapMonthDay; forward;
ObjInterface com_SoapDay; forward;
ObjInterface com_SoapMonth; forward;
ObjInterface com_SoapHexBinary; forward;
ObjInterface com_SoapBase64Binary; forward;
ObjInterface com_SoapInteger; forward;
ObjInterface com_SoapPositiveInteger; forward;
ObjInterface com_SoapNonPositiveInteger; forward;
ObjInterface com_SoapNonNegativeInteger; forward;
ObjInterface com_SoapNegativeInteger; forward;
ObjInterface com_SoapAnyUri; forward;
ObjInterface com_SoapQName; forward;
ObjInterface com_SoapNotation; forward;
ObjInterface com_SoapNormalizedString; forward;
ObjInterface com_SoapToken; forward;
ObjInterface com_SoapLanguage; forward;
ObjInterface com_SoapName; forward;
ObjInterface com_SoapIdrefs; forward;
ObjInterface com_SoapEntities; forward;
ObjInterface com_SoapNmtoken; forward;
ObjInterface com_SoapNmtokens; forward;
ObjInterface com_SoapNcName; forward;
ObjInterface com_SoapId; forward;
ObjInterface com_SoapIdref; forward;
ObjInterface com_SoapEntity; forward;
ObjInterface com_SynchronizationAttribute; forward;
ObjInterface com_TrackingServices; forward;
ObjInterface com_UrlAttribute; forward;
ObjInterface com_Header; forward;
ObjInterface com_HeaderHandler; forward;
ObjInterface com_CallContext; forward;
ObjInterface com_LogicalCallContext; forward;
ObjInterface com_ObjectHandle; forward;
ObjInterface com_IsolatedStorage; forward;
ObjInterface com_IsolatedStorageFileStream; forward;
ObjInterface com_IsolatedStorageException; forward;
ObjInterface com_IsolatedStorageFile; forward;
ObjInterface com_InternalRM; forward;
ObjInterface com_InternalST; forward;
ObjInterface com_SoapMessage; forward;
ObjInterface com_SoapFault; forward;
ObjInterface com_ServerFault; forward;
ObjInterface com_BinaryFormatter; forward;
ObjInterface com_DynamicILInfo; forward;
ObjInterface com_DynamicMethod; forward;
ObjInterface com_OpCodes; forward;
ObjInterface com_GenericTypeParameterBuilder; forward;
ObjInterface com_UnmanagedMarshal; forward;
ObjInterface com_KeySizes; forward;
ObjInterface com_CryptographicException; forward;
ObjInterface com_CryptographicUnexpectedOperationException; forward;
ObjInterface com_RandomNumberGenerator; forward;
ObjInterface com_RNGCryptoServiceProvider; forward;
ObjInterface com_SymmetricAlgorithm; forward;
ObjInterface com_AsymmetricAlgorithm; forward;
ObjInterface com_AsymmetricKeyExchangeDeformatter; forward;
ObjInterface com_AsymmetricKeyExchangeFormatter; forward;
ObjInterface com_AsymmetricSignatureDeformatter; forward;
ObjInterface com_AsymmetricSignatureFormatter; forward;
ObjInterface com_ToBase64Transform; forward;
ObjInterface com_FromBase64Transform; forward;
ObjInterface com_CryptoAPITransform; forward;
ObjInterface com_CspParameters; forward;
ObjInterface com_CryptoConfig; forward;
ObjInterface com_CryptoStream; forward;
ObjInterface com_DES; forward;
ObjInterface com_DESCryptoServiceProvider; forward;
ObjInterface com_DeriveBytes; forward;
ObjInterface com_DSA; forward;
ObjInterface com_DSACryptoServiceProvider; forward;
ObjInterface com_DSASignatureDeformatter; forward;
ObjInterface com_DSASignatureFormatter; forward;
ObjInterface com_HashAlgorithm; forward;
ObjInterface com_KeyedHashAlgorithm; forward;
ObjInterface com_HMAC; forward;
ObjInterface com_HMACMD5; forward;
ObjInterface com_HMACRIPEMD160; forward;
ObjInterface com_HMACSHA1; forward;
ObjInterface com_HMACSHA256; forward;
ObjInterface com_HMACSHA384; forward;
ObjInterface com_HMACSHA512; forward;
ObjInterface com_CspKeyContainerInfo; forward;
ObjInterface com_MACTripleDES; forward;
ObjInterface com_MD5; forward;
ObjInterface com_MD5CryptoServiceProvider; forward;
ObjInterface com_MaskGenerationMethod; forward;
ObjInterface com_PasswordDeriveBytes; forward;
ObjInterface com_PKCS1MaskGenerationMethod; forward;
ObjInterface com_RC2; forward;
ObjInterface com_RC2CryptoServiceProvider; forward;
ObjInterface com_Rfc2898DeriveBytes; forward;
ObjInterface com_RIPEMD160; forward;
ObjInterface com_RIPEMD160Managed; forward;
ObjInterface com_RSA; forward;
ObjInterface com_RSACryptoServiceProvider; forward;
ObjInterface com_RSAOAEPKeyExchangeDeformatter; forward;
ObjInterface com_RSAOAEPKeyExchangeFormatter; forward;
ObjInterface com_RSAPKCS1KeyExchangeDeformatter; forward;
ObjInterface com_RSAPKCS1KeyExchangeFormatter; forward;
ObjInterface com_RSAPKCS1SignatureDeformatter; forward;
ObjInterface com_RSAPKCS1SignatureFormatter; forward;
ObjInterface com_Rijndael; forward;
ObjInterface com_RijndaelManaged; forward;
ObjInterface com_RijndaelManagedTransform; forward;
ObjInterface com_SHA1; forward;
ObjInterface com_SHA1CryptoServiceProvider; forward;
ObjInterface com_SHA1Managed; forward;
ObjInterface com_SHA256; forward;
ObjInterface com_SHA256Managed; forward;
ObjInterface com_SHA384; forward;
ObjInterface com_SHA384Managed; forward;
ObjInterface com_SHA512; forward;
ObjInterface com_SHA512Managed; forward;
ObjInterface com_SignatureDescription; forward;
ObjInterface com_TripleDES; forward;
ObjInterface com_TripleDESCryptoServiceProvider; forward;
ObjInterface com_X509Certificate; forward;


//--- Types definition  ------------------

type StreamingContextStates // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  StreamingContextStates_CrossProcess = 1; 
  StreamingContextStates_CrossMachine = 2; 
  StreamingContextStates_File = 4; 
  StreamingContextStates_Persistence = 8; 
  StreamingContextStates_Remoting = 16; 
  StreamingContextStates_Other = 32; 
  StreamingContextStates_Clone = 64; 
  StreamingContextStates_CrossAppDomain = 128; 
  StreamingContextStates_All = 255; 
end;

type StreamingContext // #docl  Комментарии отсутствуют. </brief> 
                      = record 
  m_additionalContext : comIUnknown; 
  m_state : StreamingContextStates; 
end;

type TypeCode // #docl  Комментарии отсутствуют. </brief> 
              = longint;
const 
  TypeCode_Empty = 0; 
  TypeCode_Object = 1; 
  TypeCode_DBNull = 2; 
  TypeCode_Boolean = 3; 
  TypeCode_Char = 4; 
  TypeCode_SByte = 5; 
  TypeCode_Byte = 6; 
  TypeCode_Int16 = 7; 
  TypeCode_UInt16 = 8; 
  TypeCode_Int32 = 9; 
  TypeCode_UInt32 = 10; 
  TypeCode_Int64 = 11; 
  TypeCode_UInt64 = 12; 
  TypeCode_Single = 13; 
  TypeCode_Double = 14; 
  TypeCode_Decimal = 15; 
  TypeCode_DateTime = 16; 
  TypeCode_String = 18; 
end;

type StringComparison // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  StringComparison_CurrentCulture = 0; 
  StringComparison_CurrentCultureIgnoreCase = 1; 
  StringComparison_InvariantCulture = 2; 
  StringComparison_InvariantCultureIgnoreCase = 3; 
  StringComparison_Ordinal = 4; 
  StringComparison_OrdinalIgnoreCase = 5; 
end;

type DateTimeKind // #docl  Комментарии отсутствуют. </brief> 
                  = longint;
const 
  DateTimeKind_Unspecified = 0; 
  DateTimeKind_Utc = 1; 
  DateTimeKind_Local = 2; 
end;

type AssemblyBuilderAccess // #docl  Комментарии отсутствуют. </brief> 
                           = longint;
const 
  AssemblyBuilderAccess_Run = 1; 
  AssemblyBuilderAccess_Save = 2; 
  AssemblyBuilderAccess_RunAndSave = 3; 
  AssemblyBuilderAccess_ReflectionOnly = 6; 
  AssemblyBuilderAccess_RunAndCollect = 9; 
end;

type ArrayOfVARIANT = array[0..0] of VARIANT;

type BindingFlags // #docl  Комментарии отсутствуют. </brief> 
                  = longint;
const 
  BindingFlags_Default = 0; 
  BindingFlags_IgnoreCase = 1; 
  BindingFlags_DeclaredOnly = 2; 
  BindingFlags_Instance = 4; 
  BindingFlags_Static = 8; 
  BindingFlags_Public = 16; 
  BindingFlags_NonPublic = 32; 
  BindingFlags_FlattenHierarchy = 64; 
  BindingFlags_InvokeMethod = 256; 
  BindingFlags_CreateInstance = 512; 
  BindingFlags_GetField = 1024; 
  BindingFlags_SetField = 2048; 
  BindingFlags_GetProperty = 4096; 
  BindingFlags_SetProperty = 8192; 
  BindingFlags_PutDispProperty = 16384; 
  BindingFlags_PutRefDispProperty = 32768; 
  BindingFlags_ExactBinding = 65536; 
  BindingFlags_SuppressChangeType = 131072; 
  BindingFlags_OptionalParamBinding = 262144; 
  BindingFlags_IgnoreReturn = 16777216; 
end;

type ArrayOfchar = array[0..0] of char;

type ArrayOfstring = array[0..0] of string;

type ArrayOfcom_Assembly = array[0..0] of com_Assembly;

type PrincipalPolicy // #docl  Комментарии отсутствуют. </brief> 
                     = longint;
const 
  PrincipalPolicy_UnauthenticatedPrincipal = 0; 
  PrincipalPolicy_NoPrincipal = 1; 
  PrincipalPolicy_WindowsPrincipal = 2; 
end;

type AppDomainManagerInitializationOptions // #docl  Комментарии отсутствуют. </brief> 
                                           = longint;
const 
  AppDomainManagerInitializationOptions_None = 0; 
  AppDomainManagerInitializationOptions_RegisterWithHost = 1; 
end;

type LoaderOptimization // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  LoaderOptimization_NotSpecified = 0; 
  LoaderOptimization_SingleDomain = 1; 
  LoaderOptimization_MultiDomain = 2; 
  LoaderOptimization_MultiDomainHost = 3; 
  LoaderOptimization_DomainMask = 3; 
  LoaderOptimization_DisallowBindings = 4; 
end;

type AttributeTargets // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  AttributeTargets_Assembly = 1; 
  AttributeTargets_Module = 2; 
  AttributeTargets_Class = 4; 
  AttributeTargets_Struct = 8; 
  AttributeTargets_Enum = 16; 
  AttributeTargets_Constructor = 32; 
  AttributeTargets_Method = 64; 
  AttributeTargets_Property = 128; 
  AttributeTargets_Field = 256; 
  AttributeTargets_Event = 512; 
  AttributeTargets_Interface = 1024; 
  AttributeTargets_Parameter = 2048; 
  AttributeTargets_Delegate = 4096; 
  AttributeTargets_ReturnValue = 8192; 
  AttributeTargets_GenericParameter = 16384; 
  AttributeTargets_All = 32767; 
end;

type TcomBoolean // #docl  Комментарии отсутствуют. </brief> 
                 = record 
  m_value : longint; 
end;

type TcomByte // #docl  Комментарии отсутствуют. </brief> 
              = record 
  m_value : char; 
end;

type TcomChar // #docl  Комментарии отсутствуют. </brief> 
              = record 
  m_value : char; 
end;

type DayOfWeek // #docl  Комментарии отсутствуют. </brief> 
               = longint;
const 
  DayOfWeek_Sunday = 0; 
  DayOfWeek_Monday = 1; 
  DayOfWeek_Tuesday = 2; 
  DayOfWeek_Wednesday = 3; 
  DayOfWeek_Thursday = 4; 
  DayOfWeek_Friday = 5; 
  DayOfWeek_Saturday = 6; 
end;

type TcomDecimal // #docl  Комментарии отсутствуют. </brief> 
                 = record 
  flags : longint; 
  hi : longint; 
  lo : longint; 
  mid : longint; 
end;

type TcomDouble // #docl  Комментарии отсутствуют. </brief> 
                = record 
  m_value : double; 
end;

type EnvironmentVariableTarget // #docl  Комментарии отсутствуют. </brief> 
                               = longint;
const 
  EnvironmentVariableTarget_Process = 0; 
  EnvironmentVariableTarget_User = 1; 
  EnvironmentVariableTarget_Machine = 2; 
end;

type Int16 // #docl  Комментарии отсутствуют. </brief> 
           = record 
  m_value : integer; 
end;

type Int32 // #docl  Комментарии отсутствуют. </brief> 
           = record 
  m_value : longint; 
end;

type Int64 // #docl  Комментарии отсутствуют. </brief> 
           = record 
  m_value : comp; 
end;

type IntPtr // #docl  Комментарии отсутствуют. </brief> 
            = record 
  m_value : pointer /* [void] */; 
end;

type MidpointRounding // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  MidpointRounding_ToEven = 0; 
  MidpointRounding_AwayFromZero = 1; 
end;

type PlatformID // #docl  Комментарии отсутствуют. </brief> 
                = longint;
const 
  PlatformID_Win32S = 0; 
  PlatformID_Win32Windows = 1; 
  PlatformID_Win32NT = 2; 
  PlatformID_WinCE = 3; 
  PlatformID_Unix = 4; 
  PlatformID_Xbox = 5; 
  PlatformID_MacOSX = 6; 
end;

type MemberTypes // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  MemberTypes_Constructor = 1; 
  MemberTypes_Event = 2; 
  MemberTypes_Field = 4; 
  MemberTypes_Method = 8; 
  MemberTypes_Property = 16; 
  MemberTypes_TypeInfo = 32; 
  MemberTypes_Custom = 64; 
  MemberTypes_NestedType = 128; 
  MemberTypes_All = 191; 
end;

type RuntimeTypeHandle // #docl  Комментарии отсутствуют. </brief> 
                       = record 
  m_type : comIUnknown; 
end;

type ArrayOfcom_ConstructorInfo = array[0..0] of com_ConstructorInfo;

type ArrayOfcom_Type = array[0..0] of com_Type;

type ArrayOfcom_EventInfo = array[0..0] of com_EventInfo;

type ArrayOfcom_MemberInfo = array[0..0] of com_MemberInfo;

type ArrayOfcom_MethodInfo = array[0..0] of com_MethodInfo;

type InterfaceMapping // #docl  Комментарии отсутствуют. </brief> 
                      = record 
  TargetType : com_Type; 
  interfaceType : com_Type; 
  TargetMethods : ArrayOfcom_MethodInfo; 
  InterfaceMethods : ArrayOfcom_MethodInfo; 
end;

type ArrayOfboolean = array[0..0] of boolean;

type ParameterModifier // #docl  Комментарии отсутствуют. </brief> 
                       = record 
  _byRef : ArrayOfboolean; 
end;

type ArrayOfParameterModifier = array[0..0] of ParameterModifier;

type ArrayOfcom_FieldInfo = array[0..0] of com_FieldInfo;

type ArrayOfcom_PropertyInfo = array[0..0] of com_PropertyInfo;

type CallingConventions // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  CallingConventions_Standard = 1; 
  CallingConventions_VarArgs = 2; 
  CallingConventions_Any = 3; 
  CallingConventions_HasThis = 32; 
  CallingConventions_ExplicitThis = 64; 
end;

type TypeAttributes // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  TypeAttributes_VisibilityMask = 7; 
  TypeAttributes_NotPublic = 0; 
  TypeAttributes_Public = 1; 
  TypeAttributes_NestedPublic = 2; 
  TypeAttributes_NestedPrivate = 3; 
  TypeAttributes_NestedFamily = 4; 
  TypeAttributes_NestedAssembly = 5; 
  TypeAttributes_NestedFamANDAssem = 6; 
  TypeAttributes_NestedFamORAssem = 7; 
  TypeAttributes_LayoutMask = 24; 
  TypeAttributes_AutoLayout = 0; 
  TypeAttributes_SequentialLayout = 8; 
  TypeAttributes_ExplicitLayout = 16; 
  TypeAttributes_ClassSemanticsMask = 32; 
  TypeAttributes_Class = 0; 
  TypeAttributes_Interface = 32; 
  TypeAttributes_Abstract = 128; 
  TypeAttributes_Sealed = 256; 
  TypeAttributes_SpecialName = 1024; 
  TypeAttributes_Import = 4096; 
  TypeAttributes_Serializable = 8192; 
  TypeAttributes_StringFormatMask = 196608; 
  TypeAttributes_AnsiClass = 0; 
  TypeAttributes_UnicodeClass = 65536; 
  TypeAttributes_AutoClass = 131072; 
  TypeAttributes_CustomFormatClass = 196608; 
  TypeAttributes_CustomFormatMask = 12582912; 
  TypeAttributes_BeforeFieldInit = 1048576; 
  TypeAttributes_ReservedMask = 264192; 
  TypeAttributes_RTSpecialName = 2048; 
  TypeAttributes_HasSecurity = 262144; 
end;

type RuntimeArgumentHandle // #docl  Комментарии отсутствуют. </brief> 
                           = record 
  m_ptr : longint; 
end;

type RuntimeMethodHandle // #docl  Комментарии отсутствуют. </brief> 
                         = record 
  m_value : comIUnknown; 
end;

type RuntimeFieldHandle // #docl  Комментарии отсутствуют. </brief> 
                        = record 
  m_ptr : comIUnknown; 
end;

type ModuleHandle // #docl  Комментарии отсутствуют. </brief> 
                  = record 
  m_ptr : comIUnknown; 
end;

type SByte // #docl  Комментарии отсутствуют. </brief> 
           = record 
  m_value : byte; 
end;

type TcomSingle // #docl  Комментарии отсутствуют. </brief> 
                = record 
  m_value : single; 
end;

type TimeSpan // #docl  Комментарии отсутствуют. </brief> 
              = record 
  _ticks : comp; 
end;

type TypedReference // #docl  Комментарии отсутствуют. </brief> 
                    = record 
  value : longint; 
  Type : longint; 
end;

type UInt16 // #docl  Комментарии отсутствуют. </brief> 
            = record 
  m_value : word; 
end;

type UInt32 // #docl  Комментарии отсутствуют. </brief> 
            = record 
  m_value : longint; 
end;

type UInt64 // #docl  Комментарии отсутствуют. </brief> 
            = record 
  m_value : comp; 
end;

type UIntPtr // #docl  Комментарии отсутствуют. </brief> 
             = record 
  m_value : pointer /* [void] */; 
end;

/*
type TcomVoid // #docl  Комментарии отсутствуют. </brief> 
              = record 
end;
*/

type LockCookie // #docl  Комментарии отсутствуют. </brief> 
                = record 
  _dwFlags : longint; 
  _dwWriterSeqNum : longint; 
  _wReaderAndWriterLevel : longint; 
  _dwThreadID : longint; 
end;

type NativeOverlapped // #docl  Комментарии отсутствуют. </brief> 
                      = record 
  InternalLow : longint; 
  InternalHigh : longint; 
  OffsetLow : longint; 
  OffsetHigh : longint; 
  EventHandle : longint; 
end;

type ThreadPriority // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  ThreadPriority_Lowest = 0; 
  ThreadPriority_BelowNormal = 1; 
  ThreadPriority_Normal = 2; 
  ThreadPriority_AboveNormal = 3; 
  ThreadPriority_Highest = 4; 
end;

type ThreadState // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  ThreadState_Running = 0; 
  ThreadState_StopRequested = 1; 
  ThreadState_SuspendRequested = 2; 
  ThreadState_Background = 4; 
  ThreadState_Unstarted = 8; 
  ThreadState_Stopped = 16; 
  ThreadState_WaitSleepJoin = 32; 
  ThreadState_Suspended = 64; 
  ThreadState_AbortRequested = 128; 
  ThreadState_Aborted = 256; 
end;

type ApartmentState // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  ApartmentState_STA = 0; 
  ApartmentState_MTA = 1; 
  ApartmentState_Unknown = 2; 
end;

type DictionaryEntry // #docl  Комментарии отсутствуют. </brief> 
                     = record 
  _key : comIUnknown; 
  _value : comIUnknown; 
end;

type DebuggerBrowsableState // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  DebuggerBrowsableState_Never = 0; 
  DebuggerBrowsableState_Collapsed = 2; 
  DebuggerBrowsableState_RootHidden = 3; 
end;

type SymbolToken // #docl  Комментарии отсутствуют. </brief> 
                 = record 
  m_token : longint; 
end;

type ArrayOflongint = array[0..0] of longint;

type ArrayOfcomISymbolDocument = array[0..0] of comISymbolDocument;

type ArrayOfcomISymbolVariable = array[0..0] of comISymbolVariable;

type ArrayOfcomISymbolNamespace = array[0..0] of comISymbolNamespace;

type ArrayOfcomISymbolScope = array[0..0] of comISymbolScope;

type SymAddressKind // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  SymAddressKind_ILOffset = 1; 
  SymAddressKind_NativeRVA = 2; 
  SymAddressKind_NativeRegister = 3; 
  SymAddressKind_NativeRegisterRelative = 4; 
  SymAddressKind_NativeOffset = 5; 
  SymAddressKind_NativeRegisterRegister = 6; 
  SymAddressKind_NativeRegisterStack = 7; 
  SymAddressKind_NativeStackRegister = 8; 
  SymAddressKind_BitField = 9; 
  SymAddressKind_NativeSectionOffset = 10; 
end;

type FieldAttributes // #docl  Комментарии отсутствуют. </brief> 
                     = longint;
const 
  FieldAttributes_FieldAccessMask = 7; 
  FieldAttributes_PrivateScope = 0; 
  FieldAttributes_Private = 1; 
  FieldAttributes_FamANDAssem = 2; 
  FieldAttributes_Assembly = 3; 
  FieldAttributes_Family = 4; 
  FieldAttributes_FamORAssem = 5; 
  FieldAttributes_Public = 6; 
  FieldAttributes_Static = 16; 
  FieldAttributes_InitOnly = 32; 
  FieldAttributes_Literal = 64; 
  FieldAttributes_NotSerialized = 128; 
  FieldAttributes_SpecialName = 512; 
  FieldAttributes_PinvokeImpl = 8192; 
  FieldAttributes_ReservedMask = 38144; 
  FieldAttributes_RTSpecialName = 1024; 
  FieldAttributes_HasFieldMarshal = 4096; 
  FieldAttributes_HasDefault = 32768; 
  FieldAttributes_HasFieldRVA = 256; 
end;

type ParameterAttributes // #docl  Комментарии отсутствуют. </brief> 
                         = longint;
const 
  ParameterAttributes_None = 0; 
  ParameterAttributes_In = 1; 
  ParameterAttributes_Out = 2; 
  ParameterAttributes_Lcid = 4; 
  ParameterAttributes_Retval = 8; 
  ParameterAttributes_Optional = 16; 
  ParameterAttributes_ReservedMask = 61440; 
  ParameterAttributes_HasDefault = 4096; 
  ParameterAttributes_HasFieldMarshal = 8192; 
  ParameterAttributes_Reserved3 = 16384; 
  ParameterAttributes_Reserved4 = 32768; 
end;

type ArrayOfcom_FileStream = array[0..0] of com_FileStream;

type ArrayOfcom_Module = array[0..0] of com_Module;

type ArrayOfcom_AssemblyName = array[0..0] of com_AssemblyName;

type AssemblyNameFlags // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  AssemblyNameFlags_None = 0; 
  AssemblyNameFlags_PublicKey = 1; 
  AssemblyNameFlags_EnableJITcompileOptimizer = 16384; 
  AssemblyNameFlags_EnableJITcompileTracking = 32768; 
  AssemblyNameFlags_Retargetable = 256; 
end;

type ProcessorArchitecture // #docl  Комментарии отсутствуют. </brief> 
                           = longint;
const 
  ProcessorArchitecture_None = 0; 
  ProcessorArchitecture_MSIL = 1; 
  ProcessorArchitecture_X86 = 2; 
  ProcessorArchitecture_IA64 = 3; 
  ProcessorArchitecture_Amd64 = 4; 
  ProcessorArchitecture_Arm = 5; 
end;

type ArrayOfcom_ParameterInfo = array[0..0] of com_ParameterInfo;

type MethodImplAttributes // #docl  Комментарии отсутствуют. </brief> 
                          = longint;
const 
  MethodImplAttributes_CodeTypeMask = 3; 
  MethodImplAttributes_IL = 0; 
  MethodImplAttributes_Native = 1; 
  MethodImplAttributes_OPTIL = 2; 
  MethodImplAttributes_Runtime = 3; 
  MethodImplAttributes_ManagedMask = 4; 
  MethodImplAttributes_Unmanaged = 4; 
  MethodImplAttributes_Managed = 0; 
  MethodImplAttributes_ForwardRef = 16; 
  MethodImplAttributes_PreserveSig = 128; 
  MethodImplAttributes_InternalCall = 4096; 
  MethodImplAttributes_Synchronized = 32; 
  MethodImplAttributes_NoInlining = 8; 
  MethodImplAttributes_NoOptimization = 64; 
  MethodImplAttributes_MaxMethodImplVal = 65535; 
end;

type MethodAttributes // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  MethodAttributes_MemberAccessMask = 7; 
  MethodAttributes_PrivateScope = 0; 
  MethodAttributes_Private = 1; 
  MethodAttributes_FamANDAssem = 2; 
  MethodAttributes_Assembly = 3; 
  MethodAttributes_Family = 4; 
  MethodAttributes_FamORAssem = 5; 
  MethodAttributes_Public = 6; 
  MethodAttributes_Static = 16; 
  MethodAttributes_Final = 32; 
  MethodAttributes_Virtual = 64; 
  MethodAttributes_HideBySig = 128; 
  MethodAttributes_CheckAccessOnOverride = 512; 
  MethodAttributes_VtableLayoutMask = 256; 
  MethodAttributes_ReuseSlot = 0; 
  MethodAttributes_NewSlot = 256; 
  MethodAttributes_Abstract = 1024; 
  MethodAttributes_SpecialName = 2048; 
  MethodAttributes_PinvokeImpl = 8192; 
  MethodAttributes_UnmanagedExport = 8; 
  MethodAttributes_RTSpecialName = 4096; 
  MethodAttributes_ReservedMask = 53248; 
  MethodAttributes_HasSecurity = 16384; 
  MethodAttributes_RequireSecObject = 32768; 
end;

type PropertyAttributes // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  PropertyAttributes_None = 0; 
  PropertyAttributes_SpecialName = 512; 
  PropertyAttributes_ReservedMask = 62464; 
  PropertyAttributes_RTSpecialName = 1024; 
  PropertyAttributes_HasDefault = 4096; 
  PropertyAttributes_Reserved2 = 8192; 
  PropertyAttributes_Reserved3 = 16384; 
  PropertyAttributes_Reserved4 = 32768; 
end;

type EventAttributes // #docl  Комментарии отсутствуют. </brief> 
                     = longint;
const 
  EventAttributes_None = 0; 
  EventAttributes_SpecialName = 512; 
  EventAttributes_ReservedMask = 1024; 
  EventAttributes_RTSpecialName = 1024; 
end;

type CustomAttributeTypedArgument // #docl  Комментарии отсутствуют. </brief> 
                                  = record 
  m_value : comIUnknown; 
  m_argumentType : com_Type; 
end;

type CustomAttributeNamedArgument // #docl  Комментарии отсутствуют. </brief> 
                                  = record 
  m_memberInfo : com_MemberInfo; 
  m_value : CustomAttributeTypedArgument; 
end;

type ResourceLocation // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  ResourceLocation_Embedded = 1; 
  ResourceLocation_ContainedInAnotherAssembly = 2; 
  ResourceLocation_ContainedInManifestFile = 4; 
end;

type PortableExecutableKinds // #docl  Комментарии отсутствуют. </brief> 
                             = longint;
const 
  PortableExecutableKinds_NotAPortableExecutableImage = 0; 
  PortableExecutableKinds_ILOnly = 1; 
  PortableExecutableKinds_Required32Bit = 2; 
  PortableExecutableKinds_PE32Plus = 4; 
  PortableExecutableKinds_Unmanaged32Bit = 8; 
end;

type ImageFileMachine // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  ImageFileMachine_I386 = 332; 
  ImageFileMachine_IA64 = 512; 
  ImageFileMachine_AMD64 = 34404; 
  ImageFileMachine_ARM = 452; 
end;

type ExceptionHandlingClauseOptions // #docl  Комментарии отсутствуют. </brief> 
                                    = longint;
const 
  ExceptionHandlingClauseOptions_Clause = 0; 
  ExceptionHandlingClauseOptions_Filter = 1; 
  ExceptionHandlingClauseOptions_Finally = 2; 
  ExceptionHandlingClauseOptions_Fault = 4; 
end;

type ResourceAttributes // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  ResourceAttributes_Public = 1; 
  ResourceAttributes_Private = 2; 
end;

type SerializationEntry // #docl  Комментарии отсутствуют. </brief> 
                        = record 
  m_type : com_Type; 
  m_value : comIUnknown; 
  m_name : string; 
end;

type CalendarAlgorithmType // #docl  Комментарии отсутствуют. </brief> 
                           = longint;
const 
  CalendarAlgorithmType_Unknown = 0; 
  CalendarAlgorithmType_SolarCalendar = 1; 
  CalendarAlgorithmType_LunarCalendar = 2; 
  CalendarAlgorithmType_LunisolarCalendar = 3; 
end;

type CalendarWeekRule // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  CalendarWeekRule_FirstDay = 0; 
  CalendarWeekRule_FirstFullWeek = 1; 
  CalendarWeekRule_FirstFourDayWeek = 2; 
end;

type CompareOptions // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  CompareOptions_None = 0; 
  CompareOptions_IgnoreCase = 1; 
  CompareOptions_IgnoreNonSpace = 2; 
  CompareOptions_IgnoreSymbols = 4; 
  CompareOptions_IgnoreKanaType = 8; 
  CompareOptions_IgnoreWidth = 16; 
  CompareOptions_OrdinalIgnoreCase = 268435456; 
  CompareOptions_StringSort = 536870912; 
  CompareOptions_Ordinal = 1073741824; 
end;

type CultureTypes // #docl  Комментарии отсутствуют. </brief> 
                  = longint;
const 
  CultureTypes_NeutralCultures = 1; 
  CultureTypes_SpecificCultures = 2; 
  CultureTypes_InstalledWin32Cultures = 4; 
  CultureTypes_AllCultures = 7; 
  CultureTypes_UserCustomCulture = 8; 
  CultureTypes_ReplacementCultures = 16; 
  CultureTypes_WindowsOnlyCultures = 32; 
  CultureTypes_FrameworkCultures = 64; 
end;

type DateTimeStyles // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  DateTimeStyles_None = 0; 
  DateTimeStyles_AllowLeadingWhite = 1; 
  DateTimeStyles_AllowTrailingWhite = 2; 
  DateTimeStyles_AllowInnerWhite = 4; 
  DateTimeStyles_AllowWhiteSpaces = 7; 
  DateTimeStyles_NoCurrentDateDefault = 8; 
  DateTimeStyles_AdjustToUniversal = 16; 
  DateTimeStyles_AssumeLocal = 32; 
  DateTimeStyles_AssumeUniversal = 64; 
  DateTimeStyles_RoundTripKind = 128; 
end;

type DigitShapes // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  DigitShapes_Context = 0; 
  DigitShapes_None = 1; 
  DigitShapes_NativeNational = 2; 
end;

type GregorianCalendarTypes // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  GregorianCalendarTypes_Localized = 1; 
  GregorianCalendarTypes_USEnglish = 2; 
  GregorianCalendarTypes_MiddleEastFrench = 9; 
  GregorianCalendarTypes_Arabic = 10; 
  GregorianCalendarTypes_TransliteratedEnglish = 11; 
  GregorianCalendarTypes_TransliteratedFrench = 12; 
end;

type NumberStyles // #docl  Комментарии отсутствуют. </brief> 
                  = longint;
const 
  NumberStyles_None = 0; 
  NumberStyles_AllowLeadingWhite = 1; 
  NumberStyles_AllowTrailingWhite = 2; 
  NumberStyles_AllowLeadingSign = 4; 
  NumberStyles_AllowTrailingSign = 8; 
  NumberStyles_AllowParentheses = 16; 
  NumberStyles_AllowDecimalPoint = 32; 
  NumberStyles_AllowThousands = 64; 
  NumberStyles_AllowExponent = 128; 
  NumberStyles_AllowCurrencySymbol = 256; 
  NumberStyles_AllowHexSpecifier = 512; 
  NumberStyles_Integer = 7; 
  NumberStyles_HexNumber = 515; 
  NumberStyles_Number = 111; 
  NumberStyles_Float = 167; 
  NumberStyles_Currency = 383; 
  NumberStyles_Any = 511; 
end;

type UnicodeCategory // #docl  Комментарии отсутствуют. </brief> 
                     = longint;
const 
  UnicodeCategory_UppercaseLetter = 0; 
  UnicodeCategory_LowercaseLetter = 1; 
  UnicodeCategory_TitlecaseLetter = 2; 
  UnicodeCategory_ModifierLetter = 3; 
  UnicodeCategory_OtherLetter = 4; 
  UnicodeCategory_NonSpacingMark = 5; 
  UnicodeCategory_SpacingCombiningMark = 6; 
  UnicodeCategory_EnclosingMark = 7; 
  UnicodeCategory_DecimalDigitNumber = 8; 
  UnicodeCategory_LetterNumber = 9; 
  UnicodeCategory_OtherNumber = 10; 
  UnicodeCategory_SpaceSeparator = 11; 
  UnicodeCategory_LineSeparator = 12; 
  UnicodeCategory_ParagraphSeparator = 13; 
  UnicodeCategory_Control = 14; 
  UnicodeCategory_Format = 15; 
  UnicodeCategory_Surrogate = 16; 
  UnicodeCategory_PrivateUse = 17; 
  UnicodeCategory_ConnectorPunctuation = 18; 
  UnicodeCategory_DashPunctuation = 19; 
  UnicodeCategory_OpenPunctuation = 20; 
  UnicodeCategory_ClosePunctuation = 21; 
  UnicodeCategory_InitialQuotePunctuation = 22; 
  UnicodeCategory_FinalQuotePunctuation = 23; 
  UnicodeCategory_OtherPunctuation = 24; 
  UnicodeCategory_MathSymbol = 25; 
  UnicodeCategory_CurrencySymbol = 26; 
  UnicodeCategory_ModifierSymbol = 27; 
  UnicodeCategory_OtherSymbol = 28; 
  UnicodeCategory_OtherNotAssigned = 29; 
end;

type NormalizationForm // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  NormalizationForm_FormC = 1; 
  NormalizationForm_FormD = 2; 
  NormalizationForm_FormKC = 5; 
  NormalizationForm_FormKD = 6; 
end;

type UltimateResourceFallbackLocation // #docl  Комментарии отсутствуют. </brief> 
                                      = longint;
const 
  UltimateResourceFallbackLocation_MainAssembly = 0; 
  UltimateResourceFallbackLocation_Satellite = 1; 
end;

type RegistryHive // #docl  Комментарии отсутствуют. </brief> 
                  = longint;
const 
  RegistryHive_ClassesRoot = 0-2147483648; 
  RegistryHive_CurrentUser = 0-2147483647; 
  RegistryHive_LocalMachine = 0-2147483646; 
  RegistryHive_Users = 0-2147483645; 
  RegistryHive_PerformanceData = 0-2147483644; 
  RegistryHive_CurrentConfig = 0-2147483643; 
  RegistryHive_DynData = 0-2147483642; 
end;

type RegistryValueKind // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  RegistryValueKind_String = 1; 
  RegistryValueKind_ExpandString = 2; 
  RegistryValueKind_Binary = 3; 
  RegistryValueKind_DWord = 4; 
  RegistryValueKind_MultiString = 7; 
  RegistryValueKind_QWord = 11; 
  RegistryValueKind_Unknown = 0; 
end;

type ApplicationVersionMatch // #docl  Комментарии отсутствуют. </brief> 
                             = longint;
const 
  ApplicationVersionMatch_MatchExactVersion = 0; 
  ApplicationVersionMatch_MatchAllVersions = 1; 
end;

type TrustManagerUIContext // #docl  Комментарии отсутствуют. </brief> 
                           = longint;
const 
  TrustManagerUIContext_Install = 0; 
  TrustManagerUIContext_Upgrade = 1; 
  TrustManagerUIContext_Run = 2; 
end;

type PolicyStatementAttribute // #docl  Комментарии отсутствуют. </brief> 
                              = longint;
const 
  PolicyStatementAttribute_Nothing = 0; 
  PolicyStatementAttribute_Exclusive = 1; 
  PolicyStatementAttribute_LevelFinal = 2; 
  PolicyStatementAttribute_All = 3; 
end;

type TokenAccessLevels // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  TokenAccessLevels_AssignPrimary = 1; 
  TokenAccessLevels_Duplicate = 2; 
  TokenAccessLevels_Impersonate = 4; 
  TokenAccessLevels_Query = 8; 
  TokenAccessLevels_QuerySource = 16; 
  TokenAccessLevels_AdjustPrivileges = 32; 
  TokenAccessLevels_AdjustGroups = 64; 
  TokenAccessLevels_AdjustDefault = 128; 
  TokenAccessLevels_AdjustSessionId = 256; 
  TokenAccessLevels_Read = 131080; 
  TokenAccessLevels_Write = 131296; 
  TokenAccessLevels_AllAccess = 983551; 
  TokenAccessLevels_MaximumAllowed = 33554432; 
end;

type WindowsAccountType // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  WindowsAccountType_Normal = 0; 
  WindowsAccountType_Guest = 1; 
  WindowsAccountType_System = 2; 
  WindowsAccountType_Anonymous = 3; 
end;

type TokenImpersonationLevel // #docl  Комментарии отсутствуют. </brief> 
                             = longint;
const 
  TokenImpersonationLevel_None = 0; 
  TokenImpersonationLevel_Anonymous = 1; 
  TokenImpersonationLevel_Identification = 2; 
  TokenImpersonationLevel_Impersonation = 3; 
  TokenImpersonationLevel_Delegation = 4; 
end;

type WindowsBuiltInRole // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  WindowsBuiltInRole_Administrator = 544; 
  WindowsBuiltInRole_User = 545; 
  WindowsBuiltInRole_Guest = 546; 
  WindowsBuiltInRole_PowerUser = 547; 
  WindowsBuiltInRole_AccountOperator = 548; 
  WindowsBuiltInRole_SystemOperator = 549; 
  WindowsBuiltInRole_PrintOperator = 550; 
  WindowsBuiltInRole_BackupOperator = 551; 
  WindowsBuiltInRole_Replicator = 552; 
end;

type ArrayWithOffset // #docl  Комментарии отсутствуют. </brief> 
                     = record 
  m_array : comIUnknown; 
  m_offset : longint; 
  m_count : longint; 
end;

type ComInterfaceType // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  ComInterfaceType_InterfaceIsDual = 0; 
  ComInterfaceType_InterfaceIsIUnknown = 1; 
  ComInterfaceType_InterfaceIsIDispatch = 2; 
end;

type ClassInterfaceType // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  ClassInterfaceType_None = 0; 
  ClassInterfaceType_AutoDispatch = 1; 
  ClassInterfaceType_AutoDual = 2; 
end;

type IDispatchImplType // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  IDispatchImplType_SystemDefinedImpl = 0; 
  IDispatchImplType_InternalImpl = 1; 
  IDispatchImplType_CompatibleImpl = 2; 
end;

type TypeLibTypeFlags // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  TypeLibTypeFlags_FAppObject = 1; 
  TypeLibTypeFlags_FCanCreate = 2; 
  TypeLibTypeFlags_FLicensed = 4; 
  TypeLibTypeFlags_FPreDeclId = 8; 
  TypeLibTypeFlags_FHidden = 16; 
  TypeLibTypeFlags_FControl = 32; 
  TypeLibTypeFlags_FDual = 64; 
  TypeLibTypeFlags_FNonExtensible = 128; 
  TypeLibTypeFlags_FOleAutomation = 256; 
  TypeLibTypeFlags_FRestricted = 512; 
  TypeLibTypeFlags_FAggregatable = 1024; 
  TypeLibTypeFlags_FReplaceable = 2048; 
  TypeLibTypeFlags_FDispatchable = 4096; 
  TypeLibTypeFlags_FReverseBind = 8192; 
end;

type TypeLibFuncFlags // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  TypeLibFuncFlags_FRestricted = 1; 
  TypeLibFuncFlags_FSource = 2; 
  TypeLibFuncFlags_FBindable = 4; 
  TypeLibFuncFlags_FRequestEdit = 8; 
  TypeLibFuncFlags_FDisplayBind = 16; 
  TypeLibFuncFlags_FDefaultBind = 32; 
  TypeLibFuncFlags_FHidden = 64; 
  TypeLibFuncFlags_FUsesGetLastError = 128; 
  TypeLibFuncFlags_FDefaultCollelem = 256; 
  TypeLibFuncFlags_FUiDefault = 512; 
  TypeLibFuncFlags_FNonBrowsable = 1024; 
  TypeLibFuncFlags_FReplaceable = 2048; 
  TypeLibFuncFlags_FImmediateBind = 4096; 
end;

type TypeLibVarFlags // #docl  Комментарии отсутствуют. </brief> 
                     = longint;
const 
  TypeLibVarFlags_FReadOnly = 1; 
  TypeLibVarFlags_FSource = 2; 
  TypeLibVarFlags_FBindable = 4; 
  TypeLibVarFlags_FRequestEdit = 8; 
  TypeLibVarFlags_FDisplayBind = 16; 
  TypeLibVarFlags_FDefaultBind = 32; 
  TypeLibVarFlags_FHidden = 64; 
  TypeLibVarFlags_FRestricted = 128; 
  TypeLibVarFlags_FDefaultCollelem = 256; 
  TypeLibVarFlags_FUiDefault = 512; 
  TypeLibVarFlags_FNonBrowsable = 1024; 
  TypeLibVarFlags_FReplaceable = 2048; 
  TypeLibVarFlags_FImmediateBind = 4096; 
end;

type VarEnum // #docl  Комментарии отсутствуют. </brief> 
             = longint;
const 
  VarEnum_VT_EMPTY = 0; 
  VarEnum_VT_NULL = 1; 
  VarEnum_VT_I2 = 2; 
  VarEnum_VT_I4 = 3; 
  VarEnum_VT_R4 = 4; 
  VarEnum_VT_R8 = 5; 
  VarEnum_VT_CY = 6; 
  VarEnum_VT_DATE = 7; 
  VarEnum_VT_BSTR = 8; 
  VarEnum_VT_DISPATCH = 9; 
  VarEnum_VT_ERROR = 10; 
  VarEnum_VT_BOOL = 11; 
  VarEnum_VT_VARIANT = 12; 
  VarEnum_VT_UNKNOWN = 13; 
  VarEnum_VT_DECIMAL = 14; 
  VarEnum_VT_I1 = 16; 
  VarEnum_VT_UI1 = 17; 
  VarEnum_VT_UI2 = 18; 
  VarEnum_VT_UI4 = 19; 
  VarEnum_VT_I8 = 20; 
  VarEnum_VT_UI8 = 21; 
  VarEnum_VT_INT = 22; 
  VarEnum_VT_UINT = 23; 
  VarEnum_VT_VOID = 24; 
  VarEnum_VT_HRESULT = 25; 
  VarEnum_VT_PTR = 26; 
  VarEnum_VT_SAFEARRAY = 27; 
  VarEnum_VT_CARRAY = 28; 
  VarEnum_VT_USERDEFINED = 29; 
  VarEnum_VT_LPSTR = 30; 
  VarEnum_VT_LPWSTR = 31; 
  VarEnum_VT_RECORD = 36; 
  VarEnum_VT_FILETIME = 64; 
  VarEnum_VT_BLOB = 65; 
  VarEnum_VT_STREAM = 66; 
  VarEnum_VT_STORAGE = 67; 
  VarEnum_VT_STREAMED_OBJECT = 68; 
  VarEnum_VT_STORED_OBJECT = 69; 
  VarEnum_VT_BLOB_OBJECT = 70; 
  VarEnum_VT_CF = 71; 
  VarEnum_VT_CLSID = 72; 
  VarEnum_VT_VECTOR = 4096; 
  VarEnum_VT_ARRAY = 8192; 
  VarEnum_VT_BYREF = 16384; 
end;

type UnmanagedType // #docl  Комментарии отсутствуют. </brief> 
                   = longint;
const 
  UnmanagedType_Bool = 2; 
  UnmanagedType_I1 = 3; 
  UnmanagedType_U1 = 4; 
  UnmanagedType_I2 = 5; 
  UnmanagedType_U2 = 6; 
  UnmanagedType_I4 = 7; 
  UnmanagedType_U4 = 8; 
  UnmanagedType_I8 = 9; 
  UnmanagedType_U8 = 10; 
  UnmanagedType_R4 = 11; 
  UnmanagedType_R8 = 12; 
  UnmanagedType_Currency = 15; 
  UnmanagedType_BStr = 19; 
  UnmanagedType_LPStr = 20; 
  UnmanagedType_LPWStr = 21; 
  UnmanagedType_LPTStr = 22; 
  UnmanagedType_ByValTStr = 23; 
  UnmanagedType_IUnknown = 25; 
  UnmanagedType_IDispatch = 26; 
  UnmanagedType_Struct = 27; 
  UnmanagedType_Interface = 28; 
  UnmanagedType_SafeArray = 29; 
  UnmanagedType_ByValArray = 30; 
  UnmanagedType_SysInt = 31; 
  UnmanagedType_SysUInt = 32; 
  UnmanagedType_VBByRefStr = 34; 
  UnmanagedType_AnsiBStr = 35; 
  UnmanagedType_TBStr = 36; 
  UnmanagedType_VariantBool = 37; 
  UnmanagedType_FunctionPtr = 38; 
  UnmanagedType_AsAny = 40; 
  UnmanagedType_LPArray = 42; 
  UnmanagedType_LPStruct = 43; 
  UnmanagedType_CustomMarshaler = 44; 
  UnmanagedType_Error = 45; 
end;

type GCHandleType // #docl  Комментарии отсутствуют. </brief> 
                  = longint;
const 
  GCHandleType_Weak = 0; 
  GCHandleType_WeakTrackResurrection = 1; 
  GCHandleType_Normal = 2; 
  GCHandleType_Pinned = 3; 
end;

type HandleRef // #docl  Комментарии отсутствуют. </brief> 
               = record 
  m_wrapper : comIUnknown; 
  m_handle : longint; 
end;

type LayoutKind // #docl  Комментарии отсутствуют. </brief> 
                = longint;
const 
  LayoutKind_Sequential = 0; 
  LayoutKind_Explicit = 2; 
  LayoutKind_Auto = 3; 
end;

type ImporterEventKind // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  ImporterEventKind_NOTIF_TYPECONVERTED = 0; 
  ImporterEventKind_NOTIF_CONVERTWARNING = 1; 
  ImporterEventKind_ERROR_REFTOINVALIDTYPELIB = 2; 
end;

type ComMemberType // #docl  Комментарии отсутствуют. </brief> 
                   = longint;
const 
  ComMemberType_Method = 0; 
  ComMemberType_PropGet = 1; 
  ComMemberType_PropSet = 2; 
end;

type AssemblyRegistrationFlags // #docl  Комментарии отсутствуют. </brief> 
                               = longint;
const 
  AssemblyRegistrationFlags_None = 0; 
  AssemblyRegistrationFlags_SetCodeBase = 1; 
end;

type TypeLibImporterFlags // #docl  Комментарии отсутствуют. </brief> 
                          = longint;
const 
  TypeLibImporterFlags_None = 0; 
  TypeLibImporterFlags_PrimaryInteropAssembly = 1; 
  TypeLibImporterFlags_UnsafeInterfaces = 2; 
  TypeLibImporterFlags_SafeArrayAsSystemArray = 4; 
  TypeLibImporterFlags_TransformDispRetVals = 8; 
  TypeLibImporterFlags_PreventClassMembers = 16; 
  TypeLibImporterFlags_SerializableValueClasses = 32; 
  TypeLibImporterFlags_ImportAsX86 = 256; 
  TypeLibImporterFlags_ImportAsX64 = 512; 
  TypeLibImporterFlags_ImportAsItanium = 1024; 
  TypeLibImporterFlags_ImportAsAgnostic = 2048; 
  TypeLibImporterFlags_ReflectionOnlyLoading = 4096; 
  TypeLibImporterFlags_NoDefineVersionResource = 8192; 
  TypeLibImporterFlags_ImportAsArm = 16384; 
end;

type TypeLibExporterFlags // #docl  Комментарии отсутствуют. </brief> 
                          = longint;
const 
  TypeLibExporterFlags_None = 0; 
  TypeLibExporterFlags_OnlyReferenceRegistered = 1; 
  TypeLibExporterFlags_CallerResolvedReferences = 2; 
  TypeLibExporterFlags_OldNames = 4; 
  TypeLibExporterFlags_ExportAs32Bit = 16; 
  TypeLibExporterFlags_ExportAs64Bit = 32; 
end;

type ExporterEventKind // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  ExporterEventKind_NOTIF_TYPECONVERTED = 0; 
  ExporterEventKind_NOTIF_CONVERTWARNING = 1; 
  ExporterEventKind_ERROR_REFTOINVALIDASSEMBLY = 2; 
end;

type SearchOption // #docl  Комментарии отсутствуют. </brief> 
                  = longint;
const 
  SearchOption_TopDirectoryOnly = 0; 
  SearchOption_AllDirectories = 1; 
end;

type DriveType // #docl  Комментарии отсутствуют. </brief> 
               = longint;
const 
  DriveType_Unknown = 0; 
  DriveType_NoRootDirectory = 1; 
  DriveType_Removable = 2; 
  DriveType_Fixed = 3; 
  DriveType_Network = 4; 
  DriveType_CDRom = 5; 
  DriveType_Ram = 6; 
end;

type FileAccess // #docl  Комментарии отсутствуют. </brief> 
                = longint;
const 
  FileAccess_Read = 1; 
  FileAccess_Write = 2; 
  FileAccess_ReadWrite = 3; 
end;

type FileMode // #docl  Комментарии отсутствуют. </brief> 
              = longint;
const 
  FileMode_CreateNew = 1; 
  FileMode_Create = 2; 
  FileMode_Open = 3; 
  FileMode_OpenOrCreate = 4; 
  FileMode_Truncate = 5; 
  FileMode_Append = 6; 
end;

type FileOptions // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  FileOptions_None = 0; 
  FileOptions_WriteThrough = 0-2147483648; 
  FileOptions_Asynchronous = 1073741824; 
  FileOptions_RandomAccess = 268435456; 
  FileOptions_DeleteOnClose = 67108864; 
  FileOptions_SequentialScan = 134217728; 
  FileOptions_Encrypted = 16384; 
end;

type FileShare // #docl  Комментарии отсутствуют. </brief> 
               = longint;
const 
  FileShare_None = 0; 
  FileShare_Read = 1; 
  FileShare_Write = 2; 
  FileShare_ReadWrite = 3; 
  FileShare_Delete = 4; 
  FileShare_Inheritable = 16; 
end;

type FileAttributes // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  FileAttributes_ReadOnly = 1; 
  FileAttributes_Hidden = 2; 
  FileAttributes_System = 4; 
  FileAttributes_Directory = 16; 
  FileAttributes_Archive = 32; 
  FileAttributes_Device = 64; 
  FileAttributes_Normal = 128; 
  FileAttributes_Temporary = 256; 
  FileAttributes_SparseFile = 512; 
  FileAttributes_ReparsePoint = 1024; 
  FileAttributes_Compressed = 2048; 
  FileAttributes_Offline = 4096; 
  FileAttributes_NotContentIndexed = 8192; 
  FileAttributes_Encrypted = 16384; 
end;

type SeekOrigin // #docl  Комментарии отсутствуют. </brief> 
                = longint;
const 
  SeekOrigin_Begin = 0; 
  SeekOrigin_Current = 1; 
  SeekOrigin_End = 2; 
end;

type CompilationRelaxations // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  CompilationRelaxations_NoStringInterning = 8; 
end;

type MethodImplOptions // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  MethodImplOptions_Unmanaged = 4; 
  MethodImplOptions_ForwardRef = 16; 
  MethodImplOptions_PreserveSig = 128; 
  MethodImplOptions_InternalCall = 4096; 
  MethodImplOptions_Synchronized = 32; 
  MethodImplOptions_NoInlining = 8; 
  MethodImplOptions_NoOptimization = 64; 
end;

type MethodCodeType // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  MethodCodeType_IL = 0; 
  MethodCodeType_Native = 1; 
  MethodCodeType_OPTIL = 2; 
  MethodCodeType_Runtime = 3; 
end;

type EnvironmentPermissionAccess // #docl  Комментарии отсутствуют. </brief> 
                                 = longint;
const 
  EnvironmentPermissionAccess_NoAccess = 0; 
  EnvironmentPermissionAccess_Read = 1; 
  EnvironmentPermissionAccess_Write = 2; 
  EnvironmentPermissionAccess_AllAccess = 3; 
end;

type FileDialogPermissionAccess // #docl  Комментарии отсутствуют. </brief> 
                                = longint;
const 
  FileDialogPermissionAccess_None = 0; 
  FileDialogPermissionAccess_Open = 1; 
  FileDialogPermissionAccess_Save = 2; 
  FileDialogPermissionAccess_OpenSave = 3; 
end;

type FileIOPermissionAccess // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  FileIOPermissionAccess_NoAccess = 0; 
  FileIOPermissionAccess_Read = 1; 
  FileIOPermissionAccess_Write = 2; 
  FileIOPermissionAccess_Append = 4; 
  FileIOPermissionAccess_PathDiscovery = 8; 
  FileIOPermissionAccess_AllAccess = 15; 
end;

type HostProtectionResource // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  HostProtectionResource_None = 0; 
  HostProtectionResource_Synchronization = 1; 
  HostProtectionResource_SharedState = 2; 
  HostProtectionResource_ExternalProcessMgmt = 4; 
  HostProtectionResource_SelfAffectingProcessMgmt = 8; 
  HostProtectionResource_ExternalThreading = 16; 
  HostProtectionResource_SelfAffectingThreading = 32; 
  HostProtectionResource_SecurityInfrastructure = 64; 
  HostProtectionResource_UI = 128; 
  HostProtectionResource_MayLeakOnAbort = 256; 
  HostProtectionResource_All = 511; 
end;

type IsolatedStorageContainment // #docl  Комментарии отсутствуют. </brief> 
                                = longint;
const 
  IsolatedStorageContainment_None = 0; 
  IsolatedStorageContainment_DomainIsolationByUser = 16; 
  IsolatedStorageContainment_ApplicationIsolationByUser = 21; 
  IsolatedStorageContainment_AssemblyIsolationByUser = 32; 
  IsolatedStorageContainment_DomainIsolationByMachine = 48; 
  IsolatedStorageContainment_AssemblyIsolationByMachine = 64; 
  IsolatedStorageContainment_ApplicationIsolationByMachine = 69; 
  IsolatedStorageContainment_DomainIsolationByRoamingUser = 80; 
  IsolatedStorageContainment_AssemblyIsolationByRoamingUser = 96; 
  IsolatedStorageContainment_ApplicationIsolationByRoamingUser = 101; 
  IsolatedStorageContainment_AdministerIsolatedStorageByUser = 112; 
  IsolatedStorageContainment_UnrestrictedIsolatedStorage = 240; 
end;

type PermissionState // #docl  Комментарии отсутствуют. </brief> 
                     = longint;
const 
  PermissionState_Unrestricted = 1; 
  PermissionState_None = 0; 
end;

type SecurityAction // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  SecurityAction_Demand = 2; 
  SecurityAction_Assert = 3; 
  SecurityAction_Deny = 4; 
  SecurityAction_PermitOnly = 5; 
  SecurityAction_LinkDemand = 6; 
  SecurityAction_InheritanceDemand = 7; 
  SecurityAction_RequestMinimum = 8; 
  SecurityAction_RequestOptional = 9; 
  SecurityAction_RequestRefuse = 10; 
end;

type ReflectionPermissionFlag // #docl  Комментарии отсутствуют. </brief> 
                              = longint;
const 
  ReflectionPermissionFlag_NoFlags = 0; 
  ReflectionPermissionFlag_TypeInformation = 1; 
  ReflectionPermissionFlag_MemberAccess = 2; 
  ReflectionPermissionFlag_ReflectionEmit = 4; 
  ReflectionPermissionFlag_AllFlags = 7; 
end;

type SecurityPermissionFlag // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  SecurityPermissionFlag_NoFlags = 0; 
  SecurityPermissionFlag_Assertion = 1; 
  SecurityPermissionFlag_UnmanagedCode = 2; 
  SecurityPermissionFlag_SkipVerification = 4; 
  SecurityPermissionFlag_Execution = 8; 
  SecurityPermissionFlag_ControlThread = 16; 
  SecurityPermissionFlag_ControlEvidence = 32; 
  SecurityPermissionFlag_ControlPolicy = 64; 
  SecurityPermissionFlag_SerializationFormatter = 128; 
  SecurityPermissionFlag_ControlDomainPolicy = 256; 
  SecurityPermissionFlag_ControlPrincipal = 512; 
  SecurityPermissionFlag_ControlAppDomain = 1024; 
  SecurityPermissionFlag_RemotingConfiguration = 2048; 
  SecurityPermissionFlag_Infrastructure = 4096; 
  SecurityPermissionFlag_BindingRedirects = 8192; 
  SecurityPermissionFlag_AllFlags = 16383; 
end;

type UIPermissionWindow // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  UIPermissionWindow_NoWindows = 0; 
  UIPermissionWindow_SafeSubWindows = 1; 
  UIPermissionWindow_SafeTopLevelWindows = 2; 
  UIPermissionWindow_AllWindows = 3; 
end;

type UIPermissionClipboard // #docl  Комментарии отсутствуют. </brief> 
                           = longint;
const 
  UIPermissionClipboard_NoClipboard = 0; 
  UIPermissionClipboard_OwnClipboard = 1; 
  UIPermissionClipboard_AllClipboard = 2; 
end;

type KeyContainerPermissionFlags // #docl  Комментарии отсутствуют. </brief> 
                                 = longint;
const 
  KeyContainerPermissionFlags_NoFlags = 0; 
  KeyContainerPermissionFlags_Create = 1; 
  KeyContainerPermissionFlags_Open = 2; 
  KeyContainerPermissionFlags_Delete = 4; 
  KeyContainerPermissionFlags_Import = 16; 
  KeyContainerPermissionFlags_Export = 32; 
  KeyContainerPermissionFlags_Sign = 256; 
  KeyContainerPermissionFlags_Decrypt = 512; 
  KeyContainerPermissionFlags_ViewAcl = 4096; 
  KeyContainerPermissionFlags_ChangeAcl = 8192; 
  KeyContainerPermissionFlags_AllFlags = 13111; 
end;

type RegistryPermissionAccess // #docl  Комментарии отсутствуют. </brief> 
                              = longint;
const 
  RegistryPermissionAccess_NoAccess = 0; 
  RegistryPermissionAccess_Read = 1; 
  RegistryPermissionAccess_Write = 2; 
  RegistryPermissionAccess_Create = 4; 
  RegistryPermissionAccess_AllAccess = 7; 
end;

type HostSecurityManagerOptions // #docl  Комментарии отсутствуют. </brief> 
                                = longint;
const 
  HostSecurityManagerOptions_None = 0; 
  HostSecurityManagerOptions_HostAppDomainEvidence = 1; 
  HostSecurityManagerOptions_HostPolicyLevel = 2; 
  HostSecurityManagerOptions_HostAssemblyEvidence = 4; 
  HostSecurityManagerOptions_HostDetermineApplicationTrust = 8; 
  HostSecurityManagerOptions_HostResolvePolicy = 16; 
  HostSecurityManagerOptions_AllFlags = 31; 
end;

type PolicyLevelType // #docl  Комментарии отсутствуют. </brief> 
                     = longint;
const 
  PolicyLevelType_User = 0; 
  PolicyLevelType_Machine = 1; 
  PolicyLevelType_Enterprise = 2; 
  PolicyLevelType_AppDomain = 3; 
end;

type SecurityZone // #docl  Комментарии отсутствуют. </brief> 
                  = longint;
const 
  SecurityZone_MyComputer = 0; 
  SecurityZone_Intranet = 1; 
  SecurityZone_Trusted = 2; 
  SecurityZone_Internet = 3; 
  SecurityZone_Untrusted = 4; 
  SecurityZone_NoZone = 0-1; 
end;

type ActivatorLevel // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  ActivatorLevel_Construction = 4; 
  ActivatorLevel_Context = 8; 
  ActivatorLevel_AppDomain = 12; 
  ActivatorLevel_Process = 16; 
  ActivatorLevel_Machine = 20; 
end;

type WellKnownObjectMode // #docl  Комментарии отсутствуют. </brief> 
                         = longint;
const 
  WellKnownObjectMode_Singleton = 1; 
  WellKnownObjectMode_SingleCall = 2; 
end;

type ServerProcessing // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  ServerProcessing_Complete = 0; 
  ServerProcessing_OneWay = 1; 
  ServerProcessing_Async = 2; 
end;

type LeaseState // #docl  Комментарии отсутствуют. </brief> 
                = longint;
const 
  LeaseState_Null = 0; 
  LeaseState_Initial = 1; 
  LeaseState_Active = 2; 
  LeaseState_Renewing = 3; 
  LeaseState_Expired = 4; 
end;

type ArrayOfcom_Header = array[0..0] of com_Header;

type SoapOption // #docl  Комментарии отсутствуют. </brief> 
                = longint;
const 
  SoapOption_None = 0; 
  SoapOption_AlwaysIncludeTypes = 1; 
  SoapOption_XsdString = 2; 
  SoapOption_EmbedAll = 4; 
  SoapOption_Option1 = 8; 
  SoapOption_Option2 = 16; 
end;

type XmlFieldOrderOption // #docl  Комментарии отсутствуют. </brief> 
                         = longint;
const 
  XmlFieldOrderOption_All = 0; 
  XmlFieldOrderOption_Sequence = 1; 
  XmlFieldOrderOption_Choice = 2; 
end;

type CustomErrorsModes // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  CustomErrorsModes_On = 0; 
  CustomErrorsModes_Off = 1; 
  CustomErrorsModes_RemoteOnly = 2; 
end;

type IsolatedStorageScope // #docl  Комментарии отсутствуют. </brief> 
                          = longint;
const 
  IsolatedStorageScope_None = 0; 
  IsolatedStorageScope_User = 1; 
  IsolatedStorageScope_Domain = 2; 
  IsolatedStorageScope_Assembly = 4; 
  IsolatedStorageScope_Roaming = 8; 
  IsolatedStorageScope_Machine = 16; 
  IsolatedStorageScope_Application = 32; 
end;

type FormatterTypeStyle // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  FormatterTypeStyle_TypesWhenNeeded = 0; 
  FormatterTypeStyle_TypesAlways = 1; 
  FormatterTypeStyle_XsdString = 2; 
end;

type FormatterAssemblyStyle // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  FormatterAssemblyStyle_Simple = 0; 
  FormatterAssemblyStyle_Full = 1; 
end;

type TypeFilterLevel // #docl  Комментарии отсутствуют. </brief> 
                     = longint;
const 
  TypeFilterLevel_Low = 2; 
  TypeFilterLevel_Full = 3; 
end;

type EventToken // #docl  Комментарии отсутствуют. </brief> 
                = record 
  m_event : longint; 
end;

type FieldToken // #docl  Комментарии отсутствуют. </brief> 
                = record 
  m_fieldTok : longint; 
  m_class : comIUnknown; 
end;

type Label // #docl  Комментарии отсутствуют. </brief> 
           = record 
  m_label : longint; 
end;

type MethodToken // #docl  Комментарии отсутствуют. </brief> 
                 = record 
  m_method : longint; 
end;

type PEFileKinds // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  PEFileKinds_Dll = 1; 
  PEFileKinds_ConsoleApplication = 2; 
  PEFileKinds_WindowApplication = 3; 
end;

type OpCodeType // #docl  Комментарии отсутствуют. </brief> 
                = longint;
const 
  OpCodeType_Annotation = 0; 
  OpCodeType_Macro = 1; 
  OpCodeType_Nternal = 2; 
  OpCodeType_Objmodel = 3; 
  OpCodeType_Prefix = 4; 
  OpCodeType_Primitive = 5; 
end;

type StackBehaviour // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  StackBehaviour_Pop0 = 0; 
  StackBehaviour_Pop1 = 1; 
  StackBehaviour_Pop1_pop1 = 2; 
  StackBehaviour_Popi = 3; 
  StackBehaviour_Popi_pop1 = 4; 
  StackBehaviour_Popi_popi = 5; 
  StackBehaviour_Popi_popi8 = 6; 
  StackBehaviour_Popi_popi_popi = 7; 
  StackBehaviour_Popi_popr4 = 8; 
  StackBehaviour_Popi_popr8 = 9; 
  StackBehaviour_Popref = 10; 
  StackBehaviour_Popref_pop1 = 11; 
  StackBehaviour_Popref_popi = 12; 
  StackBehaviour_Popref_popi_popi = 13; 
  StackBehaviour_Popref_popi_popi8 = 14; 
  StackBehaviour_Popref_popi_popr4 = 15; 
  StackBehaviour_Popref_popi_popr8 = 16; 
  StackBehaviour_Popref_popi_popref = 17; 
  StackBehaviour_Push0 = 18; 
  StackBehaviour_Push1 = 19; 
  StackBehaviour_Push1_push1 = 20; 
  StackBehaviour_Pushi = 21; 
  StackBehaviour_Pushi8 = 22; 
  StackBehaviour_Pushr4 = 23; 
  StackBehaviour_Pushr8 = 24; 
  StackBehaviour_Pushref = 25; 
  StackBehaviour_Varpop = 26; 
  StackBehaviour_Varpush = 27; 
  StackBehaviour_Popref_popi_pop1 = 28; 
end;

type OperandType // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  OperandType_InlineBrTarget = 0; 
  OperandType_InlineField = 1; 
  OperandType_InlineI = 2; 
  OperandType_InlineI8 = 3; 
  OperandType_InlineMethod = 4; 
  OperandType_InlineNone = 5; 
  OperandType_InlinePhi = 6; 
  OperandType_InlineR = 7; 
  OperandType_InlineSig = 9; 
  OperandType_InlineString = 10; 
  OperandType_InlineSwitch = 11; 
  OperandType_InlineTok = 12; 
  OperandType_InlineType = 13; 
  OperandType_InlineVar = 14; 
  OperandType_ShortInlineBrTarget = 15; 
  OperandType_ShortInlineI = 16; 
  OperandType_ShortInlineR = 17; 
  OperandType_ShortInlineVar = 18; 
end;

type FlowControl // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  FlowControl_Branch = 0; 
  FlowControl_Break = 1; 
  FlowControl_Call = 2; 
  FlowControl_Cond_Branch = 3; 
  FlowControl_Meta = 4; 
  FlowControl_Next = 5; 
  FlowControl_Phi = 6; 
  FlowControl_Return = 7; 
  FlowControl_Throw = 8; 
end;

type ParameterToken // #docl  Комментарии отсутствуют. </brief> 
                    = record 
  m_tkParameter : longint; 
end;

type PropertyToken // #docl  Комментарии отсутствуют. </brief> 
                   = record 
  m_property : longint; 
end;

type SignatureToken // #docl  Комментарии отсутствуют. </brief> 
                    = record 
  m_signature : longint; 
  m_moduleBuilder : com_ModuleBuilder; 
end;

type StringToken // #docl  Комментарии отсутствуют. </brief> 
                 = record 
  m_string : longint; 
end;

type PackingSize // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  PackingSize_Unspecified = 0; 
  PackingSize_Size1 = 1; 
  PackingSize_Size2 = 2; 
  PackingSize_Size4 = 4; 
  PackingSize_Size8 = 8; 
  PackingSize_Size16 = 16; 
  PackingSize_Size32 = 32; 
  PackingSize_Size64 = 64; 
  PackingSize_Size128 = 128; 
end;

type TypeToken // #docl  Комментарии отсутствуют. </brief> 
               = record 
  m_class : longint; 
end;

type AssemblyHashAlgorithm // #docl  Комментарии отсутствуют. </brief> 
                           = longint;
const 
  AssemblyHashAlgorithm_None = 0; 
  AssemblyHashAlgorithm_MD5 = 32771; 
  AssemblyHashAlgorithm_SHA1 = 32772; 
end;

type AssemblyHash // #docl  Комментарии отсутствуют. </brief> 
                  = record 
  _Algorithm : AssemblyHashAlgorithm; 
  _value : ArrayOfchar; 
end;

type AssemblyVersionCompatibility // #docl  Комментарии отсутствуют. </brief> 
                                  = longint;
const 
  AssemblyVersionCompatibility_SameMachine = 1; 
  AssemblyVersionCompatibility_SameProcess = 2; 
  AssemblyVersionCompatibility_SameDomain = 3; 
end;

type CipherMode // #docl  Комментарии отсутствуют. </brief> 
                = longint;
const 
  CipherMode_CBC = 1; 
  CipherMode_ECB = 2; 
  CipherMode_OFB = 3; 
  CipherMode_CFB = 4; 
  CipherMode_CTS = 5; 
end;

type PaddingMode // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  PaddingMode_None = 1; 
  PaddingMode_PKCS7 = 2; 
  PaddingMode_Zeros = 3; 
  PaddingMode_ANSIX923 = 4; 
  PaddingMode_ISO10126 = 5; 
end;

type FromBase64TransformMode // #docl  Комментарии отсутствуют. </brief> 
                             = longint;
const 
  FromBase64TransformMode_IgnoreWhiteSpaces = 0; 
  FromBase64TransformMode_DoNotIgnoreWhiteSpaces = 1; 
end;

type CspProviderFlags // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  CspProviderFlags_NoFlags = 0; 
  CspProviderFlags_UseMachineKeyStore = 1; 
  CspProviderFlags_UseDefaultKeyContainer = 2; 
  CspProviderFlags_UseNonExportableKey = 4; 
  CspProviderFlags_UseExistingKey = 8; 
  CspProviderFlags_UseArchivableKey = 16; 
  CspProviderFlags_UseUserProtectedKey = 32; 
  CspProviderFlags_NoPrompt = 64; 
  CspProviderFlags_CreateEphemeralKey = 128; 
end;

type CryptoStreamMode // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  CryptoStreamMode_Read = 0; 
  CryptoStreamMode_Write = 1; 
end;

type DSAParameters // #docl  Комментарии отсутствуют. </brief> 
                   = record 
  P : ArrayOfchar; 
  Q : ArrayOfchar; 
  G : ArrayOfchar; 
  y : ArrayOfchar; 
  J : ArrayOfchar; 
  x : ArrayOfchar; 
  Seed : ArrayOfchar; 
  Counter : longint; 
end;

type KeyNumber // #docl  Комментарии отсутствуют. </brief> 
               = longint;
const 
  KeyNumber_Exchange = 1; 
  KeyNumber_Signature = 2; 
end;

type RSAParameters // #docl  Комментарии отсутствуют. </brief> 
                   = record 
  Exponent : ArrayOfchar; 
  Modulus : ArrayOfchar; 
  P : ArrayOfchar; 
  Q : ArrayOfchar; 
  DP : ArrayOfchar; 
  DQ : ArrayOfchar; 
  InverseQ : ArrayOfchar; 
  D : ArrayOfchar; 
end;

type X509ContentType // #docl  Комментарии отсутствуют. </brief> 
                     = longint;
const 
  X509ContentType_Unknown = 0; 
  X509ContentType_Cert = 1; 
  X509ContentType_SerializedCert = 2; 
  X509ContentType_Pfx = 3; 
  X509ContentType_Pkcs12 = 3; 
  X509ContentType_SerializedStore = 4; 
  X509ContentType_Pkcs7 = 5; 
  X509ContentType_Authenticode = 6; 
end;

type X509KeyStorageFlags // #docl  Комментарии отсутствуют. </brief> 
                         = longint;
const 
  X509KeyStorageFlags_DefaultKeySet = 0; 
  X509KeyStorageFlags_UserKeySet = 1; 
  X509KeyStorageFlags_MachineKeySet = 2; 
  X509KeyStorageFlags_Exportable = 4; 
  X509KeyStorageFlags_UserProtected = 8; 
  X509KeyStorageFlags_PersistKeySet = 16; 
end;

type SpecialFolder // #docl  Комментарии отсутствуют. </brief> 
                   = longint;
const 
  SpecialFolder_ApplicationData = 26; 
  SpecialFolder_CommonApplicationData = 35; 
  SpecialFolder_LocalApplicationData = 28; 
  SpecialFolder_Cookies = 33; 
  SpecialFolder_Desktop = 0; 
  SpecialFolder_Favorites = 6; 
  SpecialFolder_History = 34; 
  SpecialFolder_InternetCache = 32; 
  SpecialFolder_Programs = 2; 
  SpecialFolder_MyComputer = 17; 
  SpecialFolder_MyMusic = 13; 
  SpecialFolder_MyPictures = 39; 
  SpecialFolder_MyVideos = 14; 
  SpecialFolder_Recent = 8; 
  SpecialFolder_SendTo = 9; 
  SpecialFolder_StartMenu = 11; 
  SpecialFolder_Startup = 7; 
  SpecialFolder_System = 37; 
  SpecialFolder_Templates = 21; 
  SpecialFolder_DesktopDirectory = 16; 
  SpecialFolder_Personal = 5; 
  SpecialFolder_MyDocuments = 5; 
  SpecialFolder_ProgramFiles = 38; 
  SpecialFolder_CommonProgramFiles = 43; 
  SpecialFolder_AdminTools = 48; 
  SpecialFolder_CDBurning = 59; 
  SpecialFolder_CommonAdminTools = 47; 
  SpecialFolder_CommonDocuments = 46; 
  SpecialFolder_CommonMusic = 53; 
  SpecialFolder_CommonOemLinks = 58; 
  SpecialFolder_CommonPictures = 54; 
  SpecialFolder_CommonStartMenu = 22; 
  SpecialFolder_CommonPrograms = 23; 
  SpecialFolder_CommonStartup = 24; 
  SpecialFolder_CommonDesktopDirectory = 25; 
  SpecialFolder_CommonTemplates = 45; 
  SpecialFolder_CommonVideos = 55; 
  SpecialFolder_Fonts = 20; 
  SpecialFolder_NetworkShortcuts = 19; 
  SpecialFolder_PrinterShortcuts = 27; 
  SpecialFolder_UserProfile = 40; 
  SpecialFolder_CommonProgramFilesX86 = 44; 
  SpecialFolder_ProgramFilesX86 = 42; 
  SpecialFolder_Resources = 56; 
  SpecialFolder_LocalizedResources = 57; 
  SpecialFolder_SystemX86 = 41; 
  SpecialFolder_Windows = 36; 
end;

type DebuggingModes // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  DebuggingModes_None = 0; 
  DebuggingModes_Default = 1; 
  DebuggingModes_DisableOptimizations = 256; 
  DebuggingModes_IgnoreSymbolStoreSequencePoints = 2; 
  DebuggingModes_EnableEditAndContinue = 4; 
end;

type ArrayOfcom_Delegate = array[0..0] of com_Delegate;

type ArrayOfcom_MethodBase = array[0..0] of com_MethodBase;


//--- arrays



//--- Object Interfaces ------------------

ObjInterface comISerializable( comIDispatch );
// #docl Объектный интерфейс comISerializable </brief>
  procedure GetObjectData  // #docl  Комментарии отсутствуют. </brief> 
                            ( info // #docl Тип параметра: входной.
                            : com_SerializationInfo; Context // #docl Тип параметра: входной.
                            : StreamingContext );
end;

VipInterface vcomISerializable( vcomIDispatch ) Implements comISerializable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Exception( comIDispatch );
// #docl Объектный интерфейс com_Exception </brief>
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( obj // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  Message// #docl Дополнительная документация отсутствует. </brief>
                    : string Read;
  function  GetBaseException  // #docl  Комментарии отсутствуют. </brief> 
                               : com_Exception; // #docl Результат типа com_Exception
  property  StackTrace// #docl Дополнительная документация отсутствует. </brief>
                       : string Read;
  property  HelpLink// #docl Дополнительная документация отсутствует. </brief>
                     : string Read Write;
  property  Source// #docl Дополнительная документация отсутствует. </brief>
                   : string Read Write;
  procedure GetObjectData  // #docl  Комментарии отсутствуют. </brief> 
                            ( info // #docl Тип параметра: входной.
                            : com_SerializationInfo; Context // #docl Тип параметра: входной.
                            : StreamingContext );
  property  InnerException// #docl Дополнительная документация отсутствует. </brief>
                           : com_Exception Read;
  property  TargetSite// #docl Дополнительная документация отсутствует. </brief>
                       : com_MethodBase Read;
end;

VipInterface vcom_Exception( vcomIDispatch ) Implements com_Exception (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIComparable( comIDispatch );
// #docl Объектный интерфейс comIComparable </brief>
  function  CompareTo  // #docl  Комментарии отсутствуют. </brief> 
                        ( obj // #docl Тип параметра: входной.
                        : VARIANT ) : longint; // #docl Результат типа longint
end;

VipInterface vcomIComparable( vcomIDispatch ) Implements comIComparable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIFormattable( comIDispatch );
// #docl Объектный интерфейс comIFormattable </brief>
  function  Get_ToString  // #docl  Комментарии отсутствуют. </brief> 
                           ( format // #docl Тип параметра: входной.
                           : string; formatProvider // #docl Тип параметра: входной.
                           : comIFormatProvider ) : string; // #docl Результат типа string
end;

VipInterface vcomIFormattable( vcomIDispatch ) Implements comIFormattable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIConvertible( comIDispatch );
// #docl Объектный интерфейс comIConvertible </brief>
  function  GetTypeCode  // #docl  Комментарии отсутствуют. </brief> 
                          : TypeCode; // #docl Результат типа TypeCode
  function  ToBoolean  // #docl  Комментарии отсутствуют. </brief> 
                        ( provider // #docl Тип параметра: входной.
                        : comIFormatProvider ) : boolean; // #docl Результат типа boolean
  function  ToChar  // #docl  Комментарии отсутствуют. </brief> 
                     ( provider // #docl Тип параметра: входной.
                     : comIFormatProvider ) : word; // #docl Результат типа word
  function  ToSByte  // #docl  Комментарии отсутствуют. </brief> 
                      ( provider // #docl Тип параметра: входной.
                      : comIFormatProvider ) : byte; // #docl Результат типа byte
  function  ToByte  // #docl  Комментарии отсутствуют. </brief> 
                     ( provider // #docl Тип параметра: входной.
                     : comIFormatProvider ) : char; // #docl Результат типа char
  function  ToInt16  // #docl  Комментарии отсутствуют. </brief> 
                      ( provider // #docl Тип параметра: входной.
                      : comIFormatProvider ) : integer; // #docl Результат типа integer
  function  ToUInt16  // #docl  Комментарии отсутствуют. </brief> 
                       ( provider // #docl Тип параметра: входной.
                       : comIFormatProvider ) : word; // #docl Результат типа word
  function  ToInt32  // #docl  Комментарии отсутствуют. </brief> 
                      ( provider // #docl Тип параметра: входной.
                      : comIFormatProvider ) : longint; // #docl Результат типа longint
  function  ToUInt32  // #docl  Комментарии отсутствуют. </brief> 
                       ( provider // #docl Тип параметра: входной.
                       : comIFormatProvider ) : longint; // #docl Результат типа longint
  function  ToInt64  // #docl  Комментарии отсутствуют. </brief> 
                      ( provider // #docl Тип параметра: входной.
                      : comIFormatProvider ) : comp; // #docl Результат типа comp
  function  ToUInt64  // #docl  Комментарии отсутствуют. </brief> 
                       ( provider // #docl Тип параметра: входной.
                       : comIFormatProvider ) : comp; // #docl Результат типа comp
  function  ToSingle  // #docl  Комментарии отсутствуют. </brief> 
                       ( provider // #docl Тип параметра: входной.
                       : comIFormatProvider ) : single; // #docl Результат типа single
  function  ToDouble  // #docl  Комментарии отсутствуют. </brief> 
                       ( provider // #docl Тип параметра: входной.
                       : comIFormatProvider ) : double; // #docl Результат типа double
  function  ToDecimal  // #docl  Комментарии отсутствуют. </brief> 
                        ( provider // #docl Тип параметра: входной.
                        : comIFormatProvider ) : string; // #docl Результат типа string
  function  ToDateTime  // #docl  Комментарии отсутствуют. </brief> 
                         ( provider // #docl Тип параметра: входной.
                         : comIFormatProvider ) : DATE; // #docl Результат типа DATE
  function  Get_ToString  // #docl  Комментарии отсутствуют. </brief> 
                           ( provider // #docl Тип параметра: входной.
                           : comIFormatProvider ) : string; // #docl Результат типа string
  function  ToType  // #docl  Комментарии отсутствуют. </brief> 
                     ( conversionType // #docl Тип параметра: входной.
                     : com_Type; provider // #docl Тип параметра: входной.
                     : comIFormatProvider ) : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcomIConvertible( vcomIDispatch ) Implements comIConvertible (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICloneable( comIDispatch );
// #docl Объектный интерфейс comICloneable </brief>
  function  Clone  // #docl  Комментарии отсутствуют. </brief> 
                    : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcomICloneable( vcomIDispatch ) Implements comICloneable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEnumerable( comIDispatch );
// #docl Объектный интерфейс comIEnumerable </brief>
  function  GetEnumerator  // #docl  Комментарии отсутствуют. </brief> 
                            : comIEnumVARIANT; // #docl Результат типа comIEnumVARIANT
end;

VipInterface vcomIEnumerable( vcomIDispatch ) Implements comIEnumerable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICollection( comIDispatch );
// #docl Объектный интерфейс comICollection </brief>
  procedure CopyTo  // #docl  Комментарии отсутствуют. </brief> 
                     ( aArray // #docl Тип параметра: входной.
                     : com_Array; aindex // #docl Тип параметра: входной.
                     : longint );
  property  Count// #docl Дополнительная документация отсутствует. </brief>
                  : longint Read;
  property  SyncRoot// #docl Дополнительная документация отсутствует. </brief>
                     : VARIANT Read;
  property  IsSynchronized// #docl Дополнительная документация отсутствует. </brief>
                           : boolean Read;
end;

VipInterface vcomICollection( vcomIDispatch ) Implements comICollection (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIList( comIDispatch );
// #docl Объектный интерфейс comIList </brief>
  function  Get_Item  // #docl  Комментарии отсутствуют. </brief> 
                       ( aindex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  procedure Set_Item  // #docl  Комментарии отсутствуют. </brief> 
                       ( aindex // #docl Тип параметра: входной.
                       : longint; pRetVal // #docl Тип параметра: входной.
                       : VARIANT );
  function  Add  // #docl  Комментарии отсутствуют. </brief> 
                  ( value // #docl Тип параметра: входной.
                  : VARIANT ) : longint; // #docl Результат типа longint
  function  Contains  // #docl  Комментарии отсутствуют. </brief> 
                       ( value // #docl Тип параметра: входной.
                       : VARIANT ) : boolean; // #docl Результат типа boolean
  procedure Clear  // #docl  Комментарии отсутствуют. </brief> 
                   ;
  property  IsReadOnly// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsFixedSize// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  function  IndexOf  // #docl  Комментарии отсутствуют. </brief> 
                      ( value // #docl Тип параметра: входной.
                      : VARIANT ) : longint; // #docl Результат типа longint
  procedure Insert  // #docl  Комментарии отсутствуют. </brief> 
                     ( aindex // #docl Тип параметра: входной.
                     : longint; value // #docl Тип параметра: входной.
                     : VARIANT );
  procedure Remove  // #docl  Комментарии отсутствуют. </brief> 
                     ( value // #docl Тип параметра: входной.
                     : VARIANT );
  procedure RemoveAt  // #docl  Комментарии отсутствуют. </brief> 
                       ( aindex // #docl Тип параметра: входной.
                       : longint );
end;

VipInterface vcomIList( vcomIDispatch ) Implements comIList (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEnumerator( comIDispatch );
// #docl Объектный интерфейс comIEnumerator </brief>
  function  MoveNext  // #docl  Комментарии отсутствуют. </brief> 
                       : boolean; // #docl Результат типа boolean
  property  __Current// #docl Дополнительная документация отсутствует. </brief>
                      : VARIANT Read;
  procedure Reset  // #docl  Комментарии отсутствуют. </brief> 
                   ;
end;

VipInterface vcomIEnumerator( vcomIDispatch ) Implements comIEnumerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIDisposable( comIDispatch );
// #docl Объектный интерфейс comIDisposable </brief>
  procedure Dispose  // #docl  Комментарии отсутствуют. </brief> 
                     ;
end;

VipInterface vcomIDisposable( vcomIDispatch ) Implements comIDisposable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIComparer( comIDispatch );
// #docl Объектный интерфейс comIComparer </brief>
  function  Compare  // #docl  Комментарии отсутствуют. </brief> 
                      ( x // #docl Тип параметра: входной.
                      : VARIANT; y // #docl Тип параметра: входной.
                      : VARIANT ) : longint; // #docl Результат типа longint
end;

VipInterface vcomIComparer( vcomIDispatch ) Implements comIComparer (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEqualityComparer( comIDispatch );
// #docl Объектный интерфейс comIEqualityComparer </brief>
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( x // #docl Тип параметра: входной.
                     : VARIANT; y // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          ( obj // #docl Тип параметра: входной.
                          : VARIANT ) : longint; // #docl Результат типа longint
end;

VipInterface vcomIEqualityComparer( vcomIDispatch ) Implements comIEqualityComparer (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIDeserializationCallback( comIDispatch );
// #docl Объектный интерфейс comIDeserializationCallback </brief>
  procedure OnDeserialization  // #docl  Комментарии отсутствуют. </brief> 
                                ( sender // #docl Тип параметра: входной.
                                : VARIANT );
end;

VipInterface vcomIDeserializationCallback( vcomIDispatch ) Implements comIDeserializationCallback (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Activator( comIUnknown );
// #docl Объектный интерфейс com_Activator </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_Activator( vcomIUnknown ) Implements com_Activator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AppDomain( comIUnknown );
// #docl Объектный интерфейс com_AppDomain </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  function  InitializeLifetimeService  // #docl  Комментарии отсутствуют. </brief> 
                                        : VARIANT; // #docl Результат типа VARIANT
  function  GetLifetimeService  // #docl  Комментарии отсутствуют. </brief> 
                                 : VARIANT; // #docl Результат типа VARIANT
  property  Evidence// #docl Дополнительная документация отсутствует. </brief>
                     : com_Evidence Read;
  procedure add_DomainUnload  // #docl  Комментарии отсутствуют. </brief> 
                               ( value // #docl Тип параметра: входной.
                               : com_EventHandler );
  procedure remove_DomainUnload  // #docl  Комментарии отсутствуют. </brief> 
                                  ( value // #docl Тип параметра: входной.
                                  : com_EventHandler );
  procedure add_AssemblyLoad  // #docl  Комментарии отсутствуют. </brief> 
                               ( value // #docl Тип параметра: входной.
                               : com_AssemblyLoadEventHandler );
  procedure remove_AssemblyLoad  // #docl  Комментарии отсутствуют. </brief> 
                                  ( value // #docl Тип параметра: входной.
                                  : com_AssemblyLoadEventHandler );
  procedure add_ProcessExit  // #docl  Комментарии отсутствуют. </brief> 
                              ( value // #docl Тип параметра: входной.
                              : com_EventHandler );
  procedure remove_ProcessExit  // #docl  Комментарии отсутствуют. </brief> 
                                 ( value // #docl Тип параметра: входной.
                                 : com_EventHandler );
  procedure add_TypeResolve  // #docl  Комментарии отсутствуют. </brief> 
                              ( value // #docl Тип параметра: входной.
                              : com_ResolveEventHandler );
  procedure remove_TypeResolve  // #docl  Комментарии отсутствуют. </brief> 
                                 ( value // #docl Тип параметра: входной.
                                 : com_ResolveEventHandler );
  procedure add_ResourceResolve  // #docl  Комментарии отсутствуют. </brief> 
                                  ( value // #docl Тип параметра: входной.
                                  : com_ResolveEventHandler );
  procedure remove_ResourceResolve  // #docl  Комментарии отсутствуют. </brief> 
                                     ( value // #docl Тип параметра: входной.
                                     : com_ResolveEventHandler );
  procedure add_AssemblyResolve  // #docl  Комментарии отсутствуют. </brief> 
                                  ( value // #docl Тип параметра: входной.
                                  : com_ResolveEventHandler );
  procedure remove_AssemblyResolve  // #docl  Комментарии отсутствуют. </brief> 
                                     ( value // #docl Тип параметра: входной.
                                     : com_ResolveEventHandler );
  procedure add_UnhandledException  // #docl  Комментарии отсутствуют. </brief> 
                                     ( value // #docl Тип параметра: входной.
                                     : com_UnhandledExceptionEventHandler );
  procedure remove_UnhandledException  // #docl  Комментарии отсутствуют. </brief> 
                                        ( value // #docl Тип параметра: входной.
                                        : com_UnhandledExceptionEventHandler );
  function  DefineDynamicAssembly  // #docl  Комментарии отсутствуют. </brief> 
                                    ( name // #docl Тип параметра: входной.
                                    : com_AssemblyName; access // #docl Тип параметра: входной.
                                    : AssemblyBuilderAccess ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  DefineDynamicAssembly_2  // #docl  Комментарии отсутствуют. </brief> 
                                      ( name // #docl Тип параметра: входной.
                                      : com_AssemblyName; access // #docl Тип параметра: входной.
                                      : AssemblyBuilderAccess; dir // #docl Тип параметра: входной.
                                      : string ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  DefineDynamicAssembly_3  // #docl  Комментарии отсутствуют. </brief> 
                                      ( name // #docl Тип параметра: входной.
                                      : com_AssemblyName; access // #docl Тип параметра: входной.
                                      : AssemblyBuilderAccess; Evidence // #docl Тип параметра: входной.
                                      : com_Evidence ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  DefineDynamicAssembly_4  // #docl  Комментарии отсутствуют. </brief> 
                                      ( name // #docl Тип параметра: входной.
                                      : com_AssemblyName; access // #docl Тип параметра: входной.
                                      : AssemblyBuilderAccess; requiredPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; optionalPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; refusedPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  DefineDynamicAssembly_5  // #docl  Комментарии отсутствуют. </brief> 
                                      ( name // #docl Тип параметра: входной.
                                      : com_AssemblyName; access // #docl Тип параметра: входной.
                                      : AssemblyBuilderAccess; dir // #docl Тип параметра: входной.
                                      : string; Evidence // #docl Тип параметра: входной.
                                      : com_Evidence ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  DefineDynamicAssembly_6  // #docl  Комментарии отсутствуют. </brief> 
                                      ( name // #docl Тип параметра: входной.
                                      : com_AssemblyName; access // #docl Тип параметра: входной.
                                      : AssemblyBuilderAccess; dir // #docl Тип параметра: входной.
                                      : string; requiredPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; optionalPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; refusedPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  DefineDynamicAssembly_7  // #docl  Комментарии отсутствуют. </brief> 
                                      ( name // #docl Тип параметра: входной.
                                      : com_AssemblyName; access // #docl Тип параметра: входной.
                                      : AssemblyBuilderAccess; Evidence // #docl Тип параметра: входной.
                                      : com_Evidence; requiredPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; optionalPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; refusedPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  DefineDynamicAssembly_8  // #docl  Комментарии отсутствуют. </brief> 
                                      ( name // #docl Тип параметра: входной.
                                      : com_AssemblyName; access // #docl Тип параметра: входной.
                                      : AssemblyBuilderAccess; dir // #docl Тип параметра: входной.
                                      : string; Evidence // #docl Тип параметра: входной.
                                      : com_Evidence; requiredPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; optionalPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; refusedPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  DefineDynamicAssembly_9  // #docl  Комментарии отсутствуют. </brief> 
                                      ( name // #docl Тип параметра: входной.
                                      : com_AssemblyName; access // #docl Тип параметра: входной.
                                      : AssemblyBuilderAccess; dir // #docl Тип параметра: входной.
                                      : string; Evidence // #docl Тип параметра: входной.
                                      : com_Evidence; requiredPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; optionalPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; refusedPermissions // #docl Тип параметра: входной.
                                      : com_PermissionSet; IsSynchronized // #docl Тип параметра: входной.
                                      : boolean ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  CreateInstance  // #docl  Комментарии отсутствуют. </brief> 
                             ( AssemblyName // #docl Тип параметра: входной.
                             : string; typeName // #docl Тип параметра: входной.
                             : string ) : com_ObjectHandle; // #docl Результат типа com_ObjectHandle
  function  CreateInstanceFrom  // #docl  Комментарии отсутствуют. </brief> 
                                 ( assemblyFile // #docl Тип параметра: входной.
                                 : string; typeName // #docl Тип параметра: входной.
                                 : string ) : com_ObjectHandle; // #docl Результат типа com_ObjectHandle
  function  CreateInstance_2  // #docl  Комментарии отсутствуют. </brief> 
                               ( AssemblyName // #docl Тип параметра: входной.
                               : string; typeName // #docl Тип параметра: входной.
                               : string; activationAttributes // #docl Тип параметра: входной.
                               : ArrayOfVARIANT ) : com_ObjectHandle; // #docl Результат типа com_ObjectHandle
  function  CreateInstanceFrom_2  // #docl  Комментарии отсутствуют. </brief> 
                                   ( assemblyFile // #docl Тип параметра: входной.
                                   : string; typeName // #docl Тип параметра: входной.
                                   : string; activationAttributes // #docl Тип параметра: входной.
                                   : ArrayOfVARIANT ) : com_ObjectHandle; // #docl Результат типа com_ObjectHandle
  function  CreateInstance_3  // #docl  Комментарии отсутствуют. </brief> 
                               ( AssemblyName // #docl Тип параметра: входной.
                               : string; typeName // #docl Тип параметра: входной.
                               : string; ignoreCase // #docl Тип параметра: входной.
                               : boolean; bindingAttr // #docl Тип параметра: входной.
                               : BindingFlags; Binder // #docl Тип параметра: входной.
                               : com_Binder; args // #docl Тип параметра: входной.
                               : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                               : com_CultureInfo; activationAttributes // #docl Тип параметра: входной.
                               : ArrayOfVARIANT; securityAttributes // #docl Тип параметра: входной.
                               : com_Evidence ) : com_ObjectHandle; // #docl Результат типа com_ObjectHandle
  function  CreateInstanceFrom_3  // #docl  Комментарии отсутствуют. </brief> 
                                   ( assemblyFile // #docl Тип параметра: входной.
                                   : string; typeName // #docl Тип параметра: входной.
                                   : string; ignoreCase // #docl Тип параметра: входной.
                                   : boolean; bindingAttr // #docl Тип параметра: входной.
                                   : BindingFlags; Binder // #docl Тип параметра: входной.
                                   : com_Binder; args // #docl Тип параметра: входной.
                                   : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                                   : com_CultureInfo; activationAttributes // #docl Тип параметра: входной.
                                   : ArrayOfVARIANT; securityAttributes // #docl Тип параметра: входной.
                                   : com_Evidence ) : com_ObjectHandle; // #docl Результат типа com_ObjectHandle
  function  Load  // #docl  Комментарии отсутствуют. </brief> 
                   ( assemblyRef // #docl Тип параметра: входной.
                   : com_AssemblyName ) : com_Assembly; // #docl Результат типа com_Assembly
  function  Load_2  // #docl  Комментарии отсутствуют. </brief> 
                     ( assemblyString // #docl Тип параметра: входной.
                     : string ) : com_Assembly; // #docl Результат типа com_Assembly
  function  Load_3  // #docl  Комментарии отсутствуют. </brief> 
                     ( rawAssembly // #docl Тип параметра: входной.
                     : ArrayOfchar ) : com_Assembly; // #docl Результат типа com_Assembly
  function  Load_4  // #docl  Комментарии отсутствуют. </brief> 
                     ( rawAssembly // #docl Тип параметра: входной.
                     : ArrayOfchar; rawSymbolStore // #docl Тип параметра: входной.
                     : ArrayOfchar ) : com_Assembly; // #docl Результат типа com_Assembly
  function  Load_5  // #docl  Комментарии отсутствуют. </brief> 
                     ( rawAssembly // #docl Тип параметра: входной.
                     : ArrayOfchar; rawSymbolStore // #docl Тип параметра: входной.
                     : ArrayOfchar; securityEvidence // #docl Тип параметра: входной.
                     : com_Evidence ) : com_Assembly; // #docl Результат типа com_Assembly
  function  Load_6  // #docl  Комментарии отсутствуют. </brief> 
                     ( assemblyRef // #docl Тип параметра: входной.
                     : com_AssemblyName; assemblySecurity // #docl Тип параметра: входной.
                     : com_Evidence ) : com_Assembly; // #docl Результат типа com_Assembly
  function  Load_7  // #docl  Комментарии отсутствуют. </brief> 
                     ( assemblyString // #docl Тип параметра: входной.
                     : string; assemblySecurity // #docl Тип параметра: входной.
                     : com_Evidence ) : com_Assembly; // #docl Результат типа com_Assembly
  function  ExecuteAssembly  // #docl  Комментарии отсутствуют. </brief> 
                              ( assemblyFile // #docl Тип параметра: входной.
                              : string; assemblySecurity // #docl Тип параметра: входной.
                              : com_Evidence ) : longint; // #docl Результат типа longint
  function  ExecuteAssembly_2  // #docl  Комментарии отсутствуют. </brief> 
                                ( assemblyFile // #docl Тип параметра: входной.
                                : string ) : longint; // #docl Результат типа longint
  function  ExecuteAssembly_3  // #docl  Комментарии отсутствуют. </brief> 
                                ( assemblyFile // #docl Тип параметра: входной.
                                : string; assemblySecurity // #docl Тип параметра: входной.
                                : com_Evidence; args // #docl Тип параметра: входной.
                                : ArrayOfstring ) : longint; // #docl Результат типа longint
  property  FriendlyName// #docl Дополнительная документация отсутствует. </brief>
                         : string Read;
  property  BaseDirectory// #docl Дополнительная документация отсутствует. </brief>
                          : string Read;
  property  RelativeSearchPath// #docl Дополнительная документация отсутствует. </brief>
                               : string Read;
  property  ShadowCopyFiles// #docl Дополнительная документация отсутствует. </brief>
                            : boolean Read;
  function  GetAssemblies  // #docl  Комментарии отсутствуют. </brief> 
                            : ArrayOfcom_Assembly; // #docl Результат типа ArrayOfcom_Assembly
  procedure AppendPrivatePath  // #docl  Комментарии отсутствуют. </brief> 
                                ( Path // #docl Тип параметра: входной.
                                : string );
  procedure ClearPrivatePath  // #docl  Комментарии отсутствуют. </brief> 
                              ;
  procedure SetShadowCopyPath  // #docl  Комментарии отсутствуют. </brief> 
                                ( s // #docl Тип параметра: входной.
                                : string );
  procedure ClearShadowCopyPath  // #docl  Комментарии отсутствуют. </brief> 
                                 ;
  procedure SetCachePath  // #docl  Комментарии отсутствуют. </brief> 
                           ( s // #docl Тип параметра: входной.
                           : string );
  procedure SetData  // #docl  Комментарии отсутствуют. </brief> 
                      ( name // #docl Тип параметра: входной.
                      : string; data // #docl Тип параметра: входной.
                      : VARIANT );
  function  GetData  // #docl  Комментарии отсутствуют. </brief> 
                      ( name // #docl Тип параметра: входной.
                      : string ) : VARIANT; // #docl Результат типа VARIANT
  procedure SetAppDomainPolicy  // #docl  Комментарии отсутствуют. </brief> 
                                 ( domainPolicy // #docl Тип параметра: входной.
                                 : com_PolicyLevel );
  procedure SetThreadPrincipal  // #docl  Комментарии отсутствуют. </brief> 
                                 ( principal // #docl Тип параметра: входной.
                                 : comIPrincipal );
  procedure SetPrincipalPolicy  // #docl  Комментарии отсутствуют. </brief> 
                                 ( policy // #docl Тип параметра: входной.
                                 : PrincipalPolicy );
  procedure DoCallBack  // #docl  Комментарии отсутствуют. </brief> 
                         ( theDelegate // #docl Тип параметра: входной.
                         : com_CrossAppDomainDelegate );
  property  DynamicDirectory// #docl Дополнительная документация отсутствует. </brief>
                             : string Read;
end;

VipInterface vcom_AppDomain( vcomIUnknown ) Implements com_AppDomain (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEvidenceFactory( comIDispatch );
// #docl Объектный интерфейс comIEvidenceFactory </brief>
  property  Evidence// #docl Дополнительная документация отсутствует. </brief>
                     : com_Evidence Read;
end;

VipInterface vcomIEvidenceFactory( vcomIDispatch ) Implements comIEvidenceFactory (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIAppDomainSetup( comIUnknown );
// #docl Объектный интерфейс comIAppDomainSetup </brief>
  property  ApplicationBase// #docl Дополнительная документация отсутствует. </brief>
                            : string Read Write;
  property  ApplicationName// #docl Дополнительная документация отсутствует. </brief>
                            : string Read Write;
  property  CachePath// #docl Дополнительная документация отсутствует. </brief>
                      : string Read Write;
  property  ConfigurationFile// #docl Дополнительная документация отсутствует. </brief>
                              : string Read Write;
  property  DynamicBase// #docl Дополнительная документация отсутствует. </brief>
                        : string Read Write;
  property  LicenseFile// #docl Дополнительная документация отсутствует. </brief>
                        : string Read Write;
  property  PrivateBinPath// #docl Дополнительная документация отсутствует. </brief>
                           : string Read Write;
  property  PrivateBinPathProbe// #docl Дополнительная документация отсутствует. </brief>
                                : string Read Write;
  property  ShadowCopyDirectories// #docl Дополнительная документация отсутствует. </brief>
                                  : string Read Write;
  property  ShadowCopyFiles// #docl Дополнительная документация отсутствует. </brief>
                            : string Read Write;
end;

VipInterface vcomIAppDomainSetup( vcomIUnknown ) Implements comIAppDomainSetup (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Attribute( comIUnknown );
// #docl Объектный интерфейс com_Attribute </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_Attribute( vcomIUnknown ) Implements com_Attribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Thread( comIUnknown );
// #docl Объектный интерфейс com_Thread </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_Thread( vcomIUnknown ) Implements com_Thread (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIObjectReference( comIDispatch );
// #docl Объектный интерфейс comIObjectReference </brief>
  function  GetRealObject  // #docl  Комментарии отсутствуют. </brief> 
                            ( Context // #docl Тип параметра: входной.
                            : StreamingContext ) : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcomIObjectReference( vcomIDispatch ) Implements comIObjectReference (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIAsyncResult( comIDispatch );
// #docl Объектный интерфейс comIAsyncResult </brief>
  property  IsCompleted// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  AsyncWaitHandle// #docl Дополнительная документация отсутствует. </brief>
                            : com_WaitHandle Read;
  property  AsyncState// #docl Дополнительная документация отсутствует. </brief>
                       : VARIANT Read;
  property  CompletedSynchronously// #docl Дополнительная документация отсутствует. </brief>
                                   : boolean Read;
end;

VipInterface vcomIAsyncResult( vcomIDispatch ) Implements comIAsyncResult (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICustomFormatter( comIDispatch );
// #docl Объектный интерфейс comICustomFormatter </brief>
  function  format  // #docl  Комментарии отсутствуют. </brief> 
                     ( format // #docl Тип параметра: входной.
                     : string; arg // #docl Тип параметра: входной.
                     : VARIANT; formatProvider // #docl Тип параметра: входной.
                     : comIFormatProvider ) : string; // #docl Результат типа string
end;

VipInterface vcomICustomFormatter( vcomIDispatch ) Implements comICustomFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIFormatProvider( comIDispatch );
// #docl Объектный интерфейс comIFormatProvider </brief>
  function  GetFormat  // #docl  Комментарии отсутствуют. </brief> 
                        ( formatType // #docl Тип параметра: входной.
                        : com_Type ) : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcomIFormatProvider( vcomIDispatch ) Implements comIFormatProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICustomAttributeProvider( comIDispatch );
// #docl Объектный интерфейс comICustomAttributeProvider </brief>
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcomICustomAttributeProvider( vcomIDispatch ) Implements comICustomAttributeProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MemberInfo( comIUnknown );
// #docl Объектный интерфейс com_MemberInfo </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  MemberType// #docl Дополнительная документация отсутствует. </brief>
                       : MemberTypes Read;
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  DeclaringType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  property  ReflectedType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcom_MemberInfo( vcomIUnknown ) Implements com_MemberInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Type( comIUnknown );
// #docl Объектный интерфейс com_Type </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  MemberType// #docl Дополнительная документация отсутствует. </brief>
                       : MemberTypes Read;
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  DeclaringType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  property  ReflectedType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
  property  Guid// #docl Дополнительная документация отсутствует. </brief>
                 : GUID Read;
  property  Module// #docl Дополнительная документация отсутствует. </brief>
                   : com_Module Read;
  property  Assembly// #docl Дополнительная документация отсутствует. </brief>
                     : com_Assembly Read;
  property  TypeHandle// #docl Дополнительная документация отсутствует. </brief>
                       : RuntimeTypeHandle Read;
  property  FullName// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  property  Namespace// #docl Дополнительная документация отсутствует. </brief>
                      : string Read;
  property  AssemblyQualifiedName// #docl Дополнительная документация отсутствует. </brief>
                                  : string Read;
  function  GetArrayRank  // #docl  Комментарии отсутствуют. </brief> 
                           : longint; // #docl Результат типа longint
  property  BaseType// #docl Дополнительная документация отсутствует. </brief>
                     : com_Type Read;
  function  GetConstructors  // #docl  Комментарии отсутствуют. </brief> 
                              ( bindingAttr // #docl Тип параметра: входной.
                              : BindingFlags ) : ArrayOfcom_ConstructorInfo; // #docl Результат типа ArrayOfcom_ConstructorInfo
  function  GetInterface  // #docl  Комментарии отсутствуют. </brief> 
                           ( name // #docl Тип параметра: входной.
                           : string; ignoreCase // #docl Тип параметра: входной.
                           : boolean ) : com_Type; // #docl Результат типа com_Type
  function  GetInterfaces  // #docl  Комментарии отсутствуют. </brief> 
                            : ArrayOfcom_Type; // #docl Результат типа ArrayOfcom_Type
  function  FindInterfaces  // #docl  Комментарии отсутствуют. </brief> 
                             ( filter // #docl Тип параметра: входной.
                             : com_TypeFilter; filterCriteria // #docl Тип параметра: входной.
                             : VARIANT ) : ArrayOfcom_Type; // #docl Результат типа ArrayOfcom_Type
  function  GetEvent  // #docl  Комментарии отсутствуют. </brief> 
                       ( name // #docl Тип параметра: входной.
                       : string; bindingAttr // #docl Тип параметра: входной.
                       : BindingFlags ) : com_EventInfo; // #docl Результат типа com_EventInfo
  function  GetEvents  // #docl  Комментарии отсутствуют. </brief> 
                        : ArrayOfcom_EventInfo; // #docl Результат типа ArrayOfcom_EventInfo
  function  GetEvents_2  // #docl  Комментарии отсутствуют. </brief> 
                          ( bindingAttr // #docl Тип параметра: входной.
                          : BindingFlags ) : ArrayOfcom_EventInfo; // #docl Результат типа ArrayOfcom_EventInfo
  function  GetNestedTypes  // #docl  Комментарии отсутствуют. </brief> 
                             ( bindingAttr // #docl Тип параметра: входной.
                             : BindingFlags ) : ArrayOfcom_Type; // #docl Результат типа ArrayOfcom_Type
  function  GetNestedType  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string; bindingAttr // #docl Тип параметра: входной.
                            : BindingFlags ) : com_Type; // #docl Результат типа com_Type
  function  GetMember  // #docl  Комментарии отсутствуют. </brief> 
                        ( name // #docl Тип параметра: входной.
                        : string; aType // #docl Тип параметра: входной.
                        : MemberTypes; bindingAttr // #docl Тип параметра: входной.
                        : BindingFlags ) : ArrayOfcom_MemberInfo; // #docl Результат типа ArrayOfcom_MemberInfo
  function  GetDefaultMembers  // #docl  Комментарии отсутствуют. </brief> 
                                : ArrayOfcom_MemberInfo; // #docl Результат типа ArrayOfcom_MemberInfo
  function  FindMembers  // #docl  Комментарии отсутствуют. </brief> 
                          ( MemberType // #docl Тип параметра: входной.
                          : MemberTypes; bindingAttr // #docl Тип параметра: входной.
                          : BindingFlags; filter // #docl Тип параметра: входной.
                          : com_MemberFilter; filterCriteria // #docl Тип параметра: входной.
                          : VARIANT ) : ArrayOfcom_MemberInfo; // #docl Результат типа ArrayOfcom_MemberInfo
  function  GetElementType  // #docl  Комментарии отсутствуют. </brief> 
                             : com_Type; // #docl Результат типа com_Type
  function  IsSubclassOf  // #docl  Комментарии отсутствуют. </brief> 
                           ( c // #docl Тип параметра: входной.
                           : com_Type ) : boolean; // #docl Результат типа boolean
  function  IsInstanceOfType  // #docl  Комментарии отсутствуют. </brief> 
                               ( o // #docl Тип параметра: входной.
                               : VARIANT ) : boolean; // #docl Результат типа boolean
  function  IsAssignableFrom  // #docl  Комментарии отсутствуют. </brief> 
                               ( c // #docl Тип параметра: входной.
                               : com_Type ) : boolean; // #docl Результат типа boolean
  function  GetInterfaceMap  // #docl  Комментарии отсутствуют. </brief> 
                              ( interfaceType // #docl Тип параметра: входной.
                              : com_Type ) : InterfaceMapping; // #docl Результат типа InterfaceMapping
  function  GetMethod  // #docl  Комментарии отсутствуют. </brief> 
                        ( name // #docl Тип параметра: входной.
                        : string; bindingAttr // #docl Тип параметра: входной.
                        : BindingFlags; Binder // #docl Тип параметра: входной.
                        : com_Binder; types // #docl Тип параметра: входной.
                        : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                        : ArrayOfParameterModifier ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetMethod_2  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string; bindingAttr // #docl Тип параметра: входной.
                          : BindingFlags ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetMethods  // #docl  Комментарии отсутствуют. </brief> 
                         ( bindingAttr // #docl Тип параметра: входной.
                         : BindingFlags ) : ArrayOfcom_MethodInfo; // #docl Результат типа ArrayOfcom_MethodInfo
  function  GetField  // #docl  Комментарии отсутствуют. </brief> 
                       ( name // #docl Тип параметра: входной.
                       : string; bindingAttr // #docl Тип параметра: входной.
                       : BindingFlags ) : com_FieldInfo; // #docl Результат типа com_FieldInfo
  function  GetFields  // #docl  Комментарии отсутствуют. </brief> 
                        ( bindingAttr // #docl Тип параметра: входной.
                        : BindingFlags ) : ArrayOfcom_FieldInfo; // #docl Результат типа ArrayOfcom_FieldInfo
  function  GetProperty  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string; bindingAttr // #docl Тип параметра: входной.
                          : BindingFlags ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  GetProperty_2  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string; bindingAttr // #docl Тип параметра: входной.
                            : BindingFlags; Binder // #docl Тип параметра: входной.
                            : com_Binder; returnType // #docl Тип параметра: входной.
                            : com_Type; types // #docl Тип параметра: входной.
                            : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                            : ArrayOfParameterModifier ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  GetProperties  // #docl  Комментарии отсутствуют. </brief> 
                            ( bindingAttr // #docl Тип параметра: входной.
                            : BindingFlags ) : ArrayOfcom_PropertyInfo; // #docl Результат типа ArrayOfcom_PropertyInfo
  function  GetMember_2  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string; bindingAttr // #docl Тип параметра: входной.
                          : BindingFlags ) : ArrayOfcom_MemberInfo; // #docl Результат типа ArrayOfcom_MemberInfo
  function  GetMembers  // #docl  Комментарии отсутствуют. </brief> 
                         ( bindingAttr // #docl Тип параметра: входной.
                         : BindingFlags ) : ArrayOfcom_MemberInfo; // #docl Результат типа ArrayOfcom_MemberInfo
  function  InvokeMember  // #docl  Комментарии отсутствуют. </brief> 
                           ( name // #docl Тип параметра: входной.
                           : string; invokeAttr // #docl Тип параметра: входной.
                           : BindingFlags; Binder // #docl Тип параметра: входной.
                           : com_Binder; Target // #docl Тип параметра: входной.
                           : VARIANT; args // #docl Тип параметра: входной.
                           : ArrayOfVARIANT; modifiers // #docl Тип параметра: входной.
                           : ArrayOfParameterModifier; culture // #docl Тип параметра: входной.
                           : com_CultureInfo; namedParameters // #docl Тип параметра: входной.
                           : ArrayOfstring ) : VARIANT; // #docl Результат типа VARIANT
  property  UnderlyingSystemType// #docl Дополнительная документация отсутствует. </brief>
                                 : com_Type Read;
  function  InvokeMember_2  // #docl  Комментарии отсутствуют. </brief> 
                             ( name // #docl Тип параметра: входной.
                             : string; invokeAttr // #docl Тип параметра: входной.
                             : BindingFlags; Binder // #docl Тип параметра: входной.
                             : com_Binder; Target // #docl Тип параметра: входной.
                             : VARIANT; args // #docl Тип параметра: входной.
                             : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                             : com_CultureInfo ) : VARIANT; // #docl Результат типа VARIANT
  function  InvokeMember_3  // #docl  Комментарии отсутствуют. </brief> 
                             ( name // #docl Тип параметра: входной.
                             : string; invokeAttr // #docl Тип параметра: входной.
                             : BindingFlags; Binder // #docl Тип параметра: входной.
                             : com_Binder; Target // #docl Тип параметра: входной.
                             : VARIANT; args // #docl Тип параметра: входной.
                             : ArrayOfVARIANT ) : VARIANT; // #docl Результат типа VARIANT
  function  GetConstructor  // #docl  Комментарии отсутствуют. </brief> 
                             ( bindingAttr // #docl Тип параметра: входной.
                             : BindingFlags; Binder // #docl Тип параметра: входной.
                             : com_Binder; callConvention // #docl Тип параметра: входной.
                             : CallingConventions; types // #docl Тип параметра: входной.
                             : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                             : ArrayOfParameterModifier ) : com_ConstructorInfo; // #docl Результат типа com_ConstructorInfo
  function  GetConstructor_2  // #docl  Комментарии отсутствуют. </brief> 
                               ( bindingAttr // #docl Тип параметра: входной.
                               : BindingFlags; Binder // #docl Тип параметра: входной.
                               : com_Binder; types // #docl Тип параметра: входной.
                               : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                               : ArrayOfParameterModifier ) : com_ConstructorInfo; // #docl Результат типа com_ConstructorInfo
  function  GetConstructor_3  // #docl  Комментарии отсутствуют. </brief> 
                               ( types // #docl Тип параметра: входной.
                               : ArrayOfcom_Type ) : com_ConstructorInfo; // #docl Результат типа com_ConstructorInfo
  function  GetConstructors_2  // #docl  Комментарии отсутствуют. </brief> 
                                : ArrayOfcom_ConstructorInfo; // #docl Результат типа ArrayOfcom_ConstructorInfo
  property  TypeInitializer// #docl Дополнительная документация отсутствует. </brief>
                            : com_ConstructorInfo Read;
  function  GetMethod_3  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string; bindingAttr // #docl Тип параметра: входной.
                          : BindingFlags; Binder // #docl Тип параметра: входной.
                          : com_Binder; callConvention // #docl Тип параметра: входной.
                          : CallingConventions; types // #docl Тип параметра: входной.
                          : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                          : ArrayOfParameterModifier ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetMethod_4  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string; types // #docl Тип параметра: входной.
                          : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                          : ArrayOfParameterModifier ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetMethod_5  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string; types // #docl Тип параметра: входной.
                          : ArrayOfcom_Type ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetMethod_6  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetMethods_2  // #docl  Комментарии отсутствуют. </brief> 
                           : ArrayOfcom_MethodInfo; // #docl Результат типа ArrayOfcom_MethodInfo
  function  GetField_2  // #docl  Комментарии отсутствуют. </brief> 
                         ( name // #docl Тип параметра: входной.
                         : string ) : com_FieldInfo; // #docl Результат типа com_FieldInfo
  function  GetFields_2  // #docl  Комментарии отсутствуют. </brief> 
                          : ArrayOfcom_FieldInfo; // #docl Результат типа ArrayOfcom_FieldInfo
  function  GetInterface_2  // #docl  Комментарии отсутствуют. </brief> 
                             ( name // #docl Тип параметра: входной.
                             : string ) : com_Type; // #docl Результат типа com_Type
  function  GetEvent_2  // #docl  Комментарии отсутствуют. </brief> 
                         ( name // #docl Тип параметра: входной.
                         : string ) : com_EventInfo; // #docl Результат типа com_EventInfo
  function  GetProperty_3  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string; returnType // #docl Тип параметра: входной.
                            : com_Type; types // #docl Тип параметра: входной.
                            : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                            : ArrayOfParameterModifier ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  GetProperty_4  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string; returnType // #docl Тип параметра: входной.
                            : com_Type; types // #docl Тип параметра: входной.
                            : ArrayOfcom_Type ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  GetProperty_5  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string; types // #docl Тип параметра: входной.
                            : ArrayOfcom_Type ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  GetProperty_6  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string; returnType // #docl Тип параметра: входной.
                            : com_Type ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  GetProperty_7  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  GetProperties_2  // #docl  Комментарии отсутствуют. </brief> 
                              : ArrayOfcom_PropertyInfo; // #docl Результат типа ArrayOfcom_PropertyInfo
  function  GetNestedTypes_2  // #docl  Комментарии отсутствуют. </brief> 
                               : ArrayOfcom_Type; // #docl Результат типа ArrayOfcom_Type
  function  GetNestedType_2  // #docl  Комментарии отсутствуют. </brief> 
                              ( name // #docl Тип параметра: входной.
                              : string ) : com_Type; // #docl Результат типа com_Type
  function  GetMember_3  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string ) : ArrayOfcom_MemberInfo; // #docl Результат типа ArrayOfcom_MemberInfo
  function  GetMembers_2  // #docl  Комментарии отсутствуют. </brief> 
                           : ArrayOfcom_MemberInfo; // #docl Результат типа ArrayOfcom_MemberInfo
  property  Attributes// #docl Дополнительная документация отсутствует. </brief>
                       : TypeAttributes Read;
  property  IsNotPublic// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  IsPublic// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsNestedPublic// #docl Дополнительная документация отсутствует. </brief>
                           : boolean Read;
  property  IsNestedPrivate// #docl Дополнительная документация отсутствует. </brief>
                            : boolean Read;
  property  IsNestedFamily// #docl Дополнительная документация отсутствует. </brief>
                           : boolean Read;
  property  IsNestedAssembly// #docl Дополнительная документация отсутствует. </brief>
                             : boolean Read;
  property  IsNestedFamANDAssem// #docl Дополнительная документация отсутствует. </brief>
                                : boolean Read;
  property  IsNestedFamORAssem// #docl Дополнительная документация отсутствует. </brief>
                               : boolean Read;
  property  IsAutoLayout// #docl Дополнительная документация отсутствует. </brief>
                         : boolean Read;
  property  IsLayoutSequential// #docl Дополнительная документация отсутствует. </brief>
                               : boolean Read;
  property  IsExplicitLayout// #docl Дополнительная документация отсутствует. </brief>
                             : boolean Read;
  property  IsClass// #docl Дополнительная документация отсутствует. </brief>
                    : boolean Read;
  property  IsInterface// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  IsValueType// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  IsAbstract// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsSealed// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsEnum// #docl Дополнительная документация отсутствует. </brief>
                   : boolean Read;
  property  IsSpecialName// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  property  IsImport// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsSerializable// #docl Дополнительная документация отсутствует. </brief>
                           : boolean Read;
  property  IsAnsiClass// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  IsUnicodeClass// #docl Дополнительная документация отсутствует. </brief>
                           : boolean Read;
  property  IsAutoClass// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  IsArray// #docl Дополнительная документация отсутствует. </brief>
                    : boolean Read;
  property  IsByRef// #docl Дополнительная документация отсутствует. </brief>
                    : boolean Read;
  property  IsPointer// #docl Дополнительная документация отсутствует. </brief>
                      : boolean Read;
  property  IsPrimitive// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  IsCOMObject// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  HasElementType// #docl Дополнительная документация отсутствует. </brief>
                           : boolean Read;
  property  IsContextful// #docl Дополнительная документация отсутствует. </brief>
                         : boolean Read;
  property  IsMarshalByRef// #docl Дополнительная документация отсутствует. </brief>
                           : boolean Read;
  function  Equals_2  // #docl  Комментарии отсутствуют. </brief> 
                       ( o // #docl Тип параметра: входной.
                       : com_Type ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcom_Type( vcomIUnknown ) Implements com_Type (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIReflect( comIDispatch );
// #docl Объектный интерфейс comIReflect </brief>
  function  GetMethod  // #docl  Комментарии отсутствуют. </brief> 
                        ( name // #docl Тип параметра: входной.
                        : string; bindingAttr // #docl Тип параметра: входной.
                        : BindingFlags; Binder // #docl Тип параметра: входной.
                        : com_Binder; types // #docl Тип параметра: входной.
                        : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                        : ArrayOfParameterModifier ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetMethod_2  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string; bindingAttr // #docl Тип параметра: входной.
                          : BindingFlags ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetMethods  // #docl  Комментарии отсутствуют. </brief> 
                         ( bindingAttr // #docl Тип параметра: входной.
                         : BindingFlags ) : ArrayOfcom_MethodInfo; // #docl Результат типа ArrayOfcom_MethodInfo
  function  GetField  // #docl  Комментарии отсутствуют. </brief> 
                       ( name // #docl Тип параметра: входной.
                       : string; bindingAttr // #docl Тип параметра: входной.
                       : BindingFlags ) : com_FieldInfo; // #docl Результат типа com_FieldInfo
  function  GetFields  // #docl  Комментарии отсутствуют. </brief> 
                        ( bindingAttr // #docl Тип параметра: входной.
                        : BindingFlags ) : ArrayOfcom_FieldInfo; // #docl Результат типа ArrayOfcom_FieldInfo
  function  GetProperty  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string; bindingAttr // #docl Тип параметра: входной.
                          : BindingFlags ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  GetProperty_2  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string; bindingAttr // #docl Тип параметра: входной.
                            : BindingFlags; Binder // #docl Тип параметра: входной.
                            : com_Binder; returnType // #docl Тип параметра: входной.
                            : com_Type; types // #docl Тип параметра: входной.
                            : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                            : ArrayOfParameterModifier ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  GetProperties  // #docl  Комментарии отсутствуют. </brief> 
                            ( bindingAttr // #docl Тип параметра: входной.
                            : BindingFlags ) : ArrayOfcom_PropertyInfo; // #docl Результат типа ArrayOfcom_PropertyInfo
  function  GetMember  // #docl  Комментарии отсутствуют. </brief> 
                        ( name // #docl Тип параметра: входной.
                        : string; bindingAttr // #docl Тип параметра: входной.
                        : BindingFlags ) : ArrayOfcom_MemberInfo; // #docl Результат типа ArrayOfcom_MemberInfo
  function  GetMembers  // #docl  Комментарии отсутствуют. </brief> 
                         ( bindingAttr // #docl Тип параметра: входной.
                         : BindingFlags ) : ArrayOfcom_MemberInfo; // #docl Результат типа ArrayOfcom_MemberInfo
  function  InvokeMember  // #docl  Комментарии отсутствуют. </brief> 
                           ( name // #docl Тип параметра: входной.
                           : string; invokeAttr // #docl Тип параметра: входной.
                           : BindingFlags; Binder // #docl Тип параметра: входной.
                           : com_Binder; Target // #docl Тип параметра: входной.
                           : VARIANT; args // #docl Тип параметра: входной.
                           : ArrayOfVARIANT; modifiers // #docl Тип параметра: входной.
                           : ArrayOfParameterModifier; culture // #docl Тип параметра: входной.
                           : com_CultureInfo; namedParameters // #docl Тип параметра: входной.
                           : ArrayOfstring ) : VARIANT; // #docl Результат типа VARIANT
  property  UnderlyingSystemType// #docl Дополнительная документация отсутствует. </brief>
                                 : com_Type Read;
end;

VipInterface vcomIReflect( vcomIDispatch ) Implements comIReflect (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIObjectHandle( comIUnknown );
// #docl Объектный интерфейс comIObjectHandle </brief>
  function  Unwrap  // #docl  Комментарии отсутствуют. </brief> 
                     : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcomIObjectHandle( vcomIUnknown ) Implements comIObjectHandle (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIHashCodeProvider( comIDispatch );
// #docl Объектный интерфейс comIHashCodeProvider </brief>
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          ( obj // #docl Тип параметра: входной.
                          : VARIANT ) : longint; // #docl Результат типа longint
end;

VipInterface vcomIHashCodeProvider( vcomIDispatch ) Implements comIHashCodeProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIDictionary( comIDispatch );
// #docl Объектный интерфейс comIDictionary </brief>
  function  Get_Item  // #docl  Комментарии отсутствуют. </brief> 
                       ( key // #docl Тип параметра: входной.
                       : VARIANT ) : VARIANT; // #docl Результат типа VARIANT
  procedure Set_Item  // #docl  Комментарии отсутствуют. </brief> 
                       ( key // #docl Тип параметра: входной.
                       : VARIANT; pRetVal // #docl Тип параметра: входной.
                       : VARIANT );
  property  Keys// #docl Дополнительная документация отсутствует. </brief>
                 : comICollection Read;
  property  Values// #docl Дополнительная документация отсутствует. </brief>
                   : comICollection Read;
  function  Contains  // #docl  Комментарии отсутствуют. </brief> 
                       ( key // #docl Тип параметра: входной.
                       : VARIANT ) : boolean; // #docl Результат типа boolean
  procedure Add  // #docl  Комментарии отсутствуют. </brief> 
                  ( key // #docl Тип параметра: входной.
                  : VARIANT; value // #docl Тип параметра: входной.
                  : VARIANT );
  procedure Clear  // #docl  Комментарии отсутствуют. </brief> 
                   ;
  property  IsReadOnly// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsFixedSize// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  function  GetEnumerator  // #docl  Комментарии отсутствуют. </brief> 
                            : comIDictionaryEnumerator; // #docl Результат типа comIDictionaryEnumerator
  procedure Remove  // #docl  Комментарии отсутствуют. </brief> 
                     ( key // #docl Тип параметра: входной.
                     : VARIANT );
end;

VipInterface vcomIDictionary( vcomIDispatch ) Implements comIDictionary (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIDictionaryEnumerator( comIDispatch );
// #docl Объектный интерфейс comIDictionaryEnumerator </brief>
  property  key// #docl Дополнительная документация отсутствует. </brief>
                : VARIANT Read;
  property  value// #docl Дополнительная документация отсутствует. </brief>
                  : VARIANT Read;
  property  Entry// #docl Дополнительная документация отсутствует. </brief>
                  : DictionaryEntry Read;
end;

VipInterface vcomIDictionaryEnumerator( vcomIDispatch ) Implements comIDictionaryEnumerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolBinder( comIDispatch );
// #docl Объектный интерфейс comISymbolBinder </brief>
  function  GetReader  // #docl  Комментарии отсутствуют. </brief> 
                        ( importer // #docl Тип параметра: входной.
                        : longint; filename // #docl Тип параметра: входной.
                        : string; searchPath // #docl Тип параметра: входной.
                        : string ) : comISymbolReader; // #docl Результат типа comISymbolReader
end;

VipInterface vcomISymbolBinder( vcomIDispatch ) Implements comISymbolBinder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolBinder1( comIDispatch );
// #docl Объектный интерфейс comISymbolBinder1 </brief>
  function  GetReader  // #docl  Комментарии отсутствуют. </brief> 
                        ( importer // #docl Тип параметра: входной.
                        : longint; filename // #docl Тип параметра: входной.
                        : string; searchPath // #docl Тип параметра: входной.
                        : string ) : comISymbolReader; // #docl Результат типа comISymbolReader
end;

VipInterface vcomISymbolBinder1( vcomIDispatch ) Implements comISymbolBinder1 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolDocument( comIDispatch );
// #docl Объектный интерфейс comISymbolDocument </brief>
  property  Url// #docl Дополнительная документация отсутствует. </brief>
                : string Read;
  property  DocumentType// #docl Дополнительная документация отсутствует. </brief>
                         : GUID Read;
  property  Language// #docl Дополнительная документация отсутствует. </brief>
                     : GUID Read;
  property  LanguageVendor// #docl Дополнительная документация отсутствует. </brief>
                           : GUID Read;
  property  CheckSumAlgorithmId// #docl Дополнительная документация отсутствует. </brief>
                                : GUID Read;
  function  GetCheckSum  // #docl  Комментарии отсутствуют. </brief> 
                          : ArrayOfchar; // #docl Результат типа ArrayOfchar
  function  FindClosestLine  // #docl  Комментарии отсутствуют. </brief> 
                              ( line // #docl Тип параметра: входной.
                              : longint ) : longint; // #docl Результат типа longint
  property  HasEmbeddedSource// #docl Дополнительная документация отсутствует. </brief>
                              : boolean Read;
  property  SourceLength// #docl Дополнительная документация отсутствует. </brief>
                         : longint Read;
  function  GetSourceRange  // #docl  Комментарии отсутствуют. </brief> 
                             ( startLine // #docl Тип параметра: входной.
                             : longint; startColumn // #docl Тип параметра: входной.
                             : longint; endLine // #docl Тип параметра: входной.
                             : longint; endColumn // #docl Тип параметра: входной.
                             : longint ) : ArrayOfchar; // #docl Результат типа ArrayOfchar
end;

VipInterface vcomISymbolDocument( vcomIDispatch ) Implements comISymbolDocument (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolDocumentWriter( comIDispatch );
// #docl Объектный интерфейс comISymbolDocumentWriter </brief>
  procedure SetSource  // #docl  Комментарии отсутствуют. </brief> 
                        ( Source // #docl Тип параметра: входной.
                        : ArrayOfchar );
  procedure SetCheckSum  // #docl  Комментарии отсутствуют. </brief> 
                          ( algorithmId // #docl Тип параметра: входной.
                          : GUID; checkSum // #docl Тип параметра: входной.
                          : ArrayOfchar );
end;

VipInterface vcomISymbolDocumentWriter( vcomIDispatch ) Implements comISymbolDocumentWriter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolMethod( comIDispatch );
// #docl Объектный интерфейс comISymbolMethod </brief>
  property  Token// #docl Дополнительная документация отсутствует. </brief>
                  : SymbolToken Read;
  property  SequencePointCount// #docl Дополнительная документация отсутствует. </brief>
                               : longint Read;
  procedure GetSequencePoints  // #docl  Комментарии отсутствуют. </brief> 
                                ( offsets // #docl Тип параметра: входной.
                                : ArrayOflongint; documents // #docl Тип параметра: входной.
                                : ArrayOfcomISymbolDocument; lines // #docl Тип параметра: входной.
                                : ArrayOflongint; columns // #docl Тип параметра: входной.
                                : ArrayOflongint; endLines // #docl Тип параметра: входной.
                                : ArrayOflongint; endColumns // #docl Тип параметра: входной.
                                : ArrayOflongint );
  property  RootScope// #docl Дополнительная документация отсутствует. </brief>
                      : comISymbolScope Read;
  function  GetScope  // #docl  Комментарии отсутствуют. </brief> 
                       ( offset // #docl Тип параметра: входной.
                       : longint ) : comISymbolScope; // #docl Результат типа comISymbolScope
  function  GetOffset  // #docl  Комментарии отсутствуют. </brief> 
                        ( document // #docl Тип параметра: входной.
                        : comISymbolDocument; line // #docl Тип параметра: входной.
                        : longint; column // #docl Тип параметра: входной.
                        : longint ) : longint; // #docl Результат типа longint
  function  GetRanges  // #docl  Комментарии отсутствуют. </brief> 
                        ( document // #docl Тип параметра: входной.
                        : comISymbolDocument; line // #docl Тип параметра: входной.
                        : longint; column // #docl Тип параметра: входной.
                        : longint ) : ArrayOflongint; // #docl Результат типа ArrayOflongint
  function  GetParameters  // #docl  Комментарии отсутствуют. </brief> 
                            : ArrayOfcomISymbolVariable; // #docl Результат типа ArrayOfcomISymbolVariable
  function  GetNamespace  // #docl  Комментарии отсутствуют. </brief> 
                           : comISymbolNamespace; // #docl Результат типа comISymbolNamespace
  function  GetSourceStartEnd  // #docl  Комментарии отсутствуют. </brief> 
                                ( docs // #docl Тип параметра: входной.
                                : ArrayOfcomISymbolDocument; lines // #docl Тип параметра: входной.
                                : ArrayOflongint; columns // #docl Тип параметра: входной.
                                : ArrayOflongint ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcomISymbolMethod( vcomIDispatch ) Implements comISymbolMethod (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolNamespace( comIDispatch );
// #docl Объектный интерфейс comISymbolNamespace </brief>
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  function  GetNamespaces  // #docl  Комментарии отсутствуют. </brief> 
                            : ArrayOfcomISymbolNamespace; // #docl Результат типа ArrayOfcomISymbolNamespace
  function  GetVariables  // #docl  Комментарии отсутствуют. </brief> 
                           : ArrayOfcomISymbolVariable; // #docl Результат типа ArrayOfcomISymbolVariable
end;

VipInterface vcomISymbolNamespace( vcomIDispatch ) Implements comISymbolNamespace (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolReader( comIDispatch );
// #docl Объектный интерфейс comISymbolReader </brief>
  function  GetDocument  // #docl  Комментарии отсутствуют. </brief> 
                          ( Url // #docl Тип параметра: входной.
                          : string; Language // #docl Тип параметра: входной.
                          : GUID; LanguageVendor // #docl Тип параметра: входной.
                          : GUID; DocumentType // #docl Тип параметра: входной.
                          : GUID ) : comISymbolDocument; // #docl Результат типа comISymbolDocument
  function  GetDocuments  // #docl  Комментарии отсутствуют. </brief> 
                           : ArrayOfcomISymbolDocument; // #docl Результат типа ArrayOfcomISymbolDocument
  property  UserEntryPoint// #docl Дополнительная документация отсутствует. </brief>
                           : SymbolToken Read;
  function  GetMethod  // #docl  Комментарии отсутствуют. </brief> 
                        ( Method // #docl Тип параметра: входной.
                        : SymbolToken ) : comISymbolMethod; // #docl Результат типа comISymbolMethod
  function  GetMethod_2  // #docl  Комментарии отсутствуют. </brief> 
                          ( Method // #docl Тип параметра: входной.
                          : SymbolToken; Version // #docl Тип параметра: входной.
                          : longint ) : comISymbolMethod; // #docl Результат типа comISymbolMethod
  function  GetVariables  // #docl  Комментарии отсутствуют. </brief> 
                           ( parent // #docl Тип параметра: входной.
                           : SymbolToken ) : ArrayOfcomISymbolVariable; // #docl Результат типа ArrayOfcomISymbolVariable
  function  GetGlobalVariables  // #docl  Комментарии отсутствуют. </brief> 
                                 : ArrayOfcomISymbolVariable; // #docl Результат типа ArrayOfcomISymbolVariable
  function  GetMethodFromDocumentPosition  // #docl  Комментарии отсутствуют. </brief> 
                                            ( document // #docl Тип параметра: входной.
                                            : comISymbolDocument; line // #docl Тип параметра: входной.
                                            : longint; column // #docl Тип параметра: входной.
                                            : longint ) : comISymbolMethod; // #docl Результат типа comISymbolMethod
  function  GetSymAttribute  // #docl  Комментарии отсутствуют. </brief> 
                              ( parent // #docl Тип параметра: входной.
                              : SymbolToken; name // #docl Тип параметра: входной.
                              : string ) : ArrayOfchar; // #docl Результат типа ArrayOfchar
  function  GetNamespaces  // #docl  Комментарии отсутствуют. </brief> 
                            : ArrayOfcomISymbolNamespace; // #docl Результат типа ArrayOfcomISymbolNamespace
end;

VipInterface vcomISymbolReader( vcomIDispatch ) Implements comISymbolReader (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolScope( comIDispatch );
// #docl Объектный интерфейс comISymbolScope </brief>
  property  Method// #docl Дополнительная документация отсутствует. </brief>
                   : comISymbolMethod Read;
  property  parent// #docl Дополнительная документация отсутствует. </brief>
                   : comISymbolScope Read;
  function  GetChildren  // #docl  Комментарии отсутствуют. </brief> 
                          : ArrayOfcomISymbolScope; // #docl Результат типа ArrayOfcomISymbolScope
  property  StartOffset// #docl Дополнительная документация отсутствует. </brief>
                        : longint Read;
  property  EndOffset// #docl Дополнительная документация отсутствует. </brief>
                      : longint Read;
  function  GetLocals  // #docl  Комментарии отсутствуют. </brief> 
                        : ArrayOfcomISymbolVariable; // #docl Результат типа ArrayOfcomISymbolVariable
  function  GetNamespaces  // #docl  Комментарии отсутствуют. </brief> 
                            : ArrayOfcomISymbolNamespace; // #docl Результат типа ArrayOfcomISymbolNamespace
end;

VipInterface vcomISymbolScope( vcomIDispatch ) Implements comISymbolScope (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolVariable( comIDispatch );
// #docl Объектный интерфейс comISymbolVariable </brief>
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  Attributes// #docl Дополнительная документация отсутствует. </brief>
                       : VARIANT Read;
  function  GetSignature  // #docl  Комментарии отсутствуют. </brief> 
                           : ArrayOfchar; // #docl Результат типа ArrayOfchar
  property  AddressKind// #docl Дополнительная документация отсутствует. </brief>
                        : SymAddressKind Read;
  property  AddressField1// #docl Дополнительная документация отсутствует. </brief>
                          : longint Read;
  property  AddressField2// #docl Дополнительная документация отсутствует. </brief>
                          : longint Read;
  property  AddressField3// #docl Дополнительная документация отсутствует. </brief>
                          : longint Read;
  property  StartOffset// #docl Дополнительная документация отсутствует. </brief>
                        : longint Read;
  property  EndOffset// #docl Дополнительная документация отсутствует. </brief>
                      : longint Read;
end;

VipInterface vcomISymbolVariable( vcomIDispatch ) Implements comISymbolVariable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISymbolWriter( comIDispatch );
// #docl Объектный интерфейс comISymbolWriter </brief>
  procedure Initialize  // #docl  Комментарии отсутствуют. </brief> 
                         ( emitter // #docl Тип параметра: входной.
                         : longint; filename // #docl Тип параметра: входной.
                         : string; fFullBuild // #docl Тип параметра: входной.
                         : boolean );
  function  DefineDocument  // #docl  Комментарии отсутствуют. </brief> 
                             ( Url // #docl Тип параметра: входной.
                             : string; Language // #docl Тип параметра: входной.
                             : GUID; LanguageVendor // #docl Тип параметра: входной.
                             : GUID; DocumentType // #docl Тип параметра: входной.
                             : GUID ) : comISymbolDocumentWriter; // #docl Результат типа comISymbolDocumentWriter
  procedure SetUserEntryPoint  // #docl  Комментарии отсутствуют. </brief> 
                                ( entryMethod // #docl Тип параметра: входной.
                                : SymbolToken );
  procedure OpenMethod  // #docl  Комментарии отсутствуют. </brief> 
                         ( Method // #docl Тип параметра: входной.
                         : SymbolToken );
  procedure CloseMethod  // #docl  Комментарии отсутствуют. </brief> 
                         ;
  procedure DefineSequencePoints  // #docl  Комментарии отсутствуют. </brief> 
                                   ( document // #docl Тип параметра: входной.
                                   : comISymbolDocumentWriter; offsets // #docl Тип параметра: входной.
                                   : ArrayOflongint; lines // #docl Тип параметра: входной.
                                   : ArrayOflongint; columns // #docl Тип параметра: входной.
                                   : ArrayOflongint; endLines // #docl Тип параметра: входной.
                                   : ArrayOflongint; endColumns // #docl Тип параметра: входной.
                                   : ArrayOflongint );
  function  OpenScope  // #docl  Комментарии отсутствуют. </brief> 
                        ( StartOffset // #docl Тип параметра: входной.
                        : longint ) : longint; // #docl Результат типа longint
  procedure CloseScope  // #docl  Комментарии отсутствуют. </brief> 
                         ( EndOffset // #docl Тип параметра: входной.
                         : longint );
  procedure SetScopeRange  // #docl  Комментарии отсутствуют. </brief> 
                            ( scopeID // #docl Тип параметра: входной.
                            : longint; StartOffset // #docl Тип параметра: входной.
                            : longint; EndOffset // #docl Тип параметра: входной.
                            : longint );
  procedure DefineLocalVariable  // #docl  Комментарии отсутствуют. </brief> 
                                  ( name // #docl Тип параметра: входной.
                                  : string; Attributes // #docl Тип параметра: входной.
                                  : FieldAttributes; signature // #docl Тип параметра: входной.
                                  : ArrayOfchar; addrKind // #docl Тип параметра: входной.
                                  : SymAddressKind; addr1 // #docl Тип параметра: входной.
                                  : longint; addr2 // #docl Тип параметра: входной.
                                  : longint; addr3 // #docl Тип параметра: входной.
                                  : longint; StartOffset // #docl Тип параметра: входной.
                                  : longint; EndOffset // #docl Тип параметра: входной.
                                  : longint );
  procedure DefineParameter  // #docl  Комментарии отсутствуют. </brief> 
                              ( name // #docl Тип параметра: входной.
                              : string; Attributes // #docl Тип параметра: входной.
                              : ParameterAttributes; sequence // #docl Тип параметра: входной.
                              : longint; addrKind // #docl Тип параметра: входной.
                              : SymAddressKind; addr1 // #docl Тип параметра: входной.
                              : longint; addr2 // #docl Тип параметра: входной.
                              : longint; addr3 // #docl Тип параметра: входной.
                              : longint );
  procedure DefineField  // #docl  Комментарии отсутствуют. </brief> 
                          ( parent // #docl Тип параметра: входной.
                          : SymbolToken; name // #docl Тип параметра: входной.
                          : string; Attributes // #docl Тип параметра: входной.
                          : FieldAttributes; signature // #docl Тип параметра: входной.
                          : ArrayOfchar; addrKind // #docl Тип параметра: входной.
                          : SymAddressKind; addr1 // #docl Тип параметра: входной.
                          : longint; addr2 // #docl Тип параметра: входной.
                          : longint; addr3 // #docl Тип параметра: входной.
                          : longint );
  procedure DefineGlobalVariable  // #docl  Комментарии отсутствуют. </brief> 
                                   ( name // #docl Тип параметра: входной.
                                   : string; Attributes // #docl Тип параметра: входной.
                                   : FieldAttributes; signature // #docl Тип параметра: входной.
                                   : ArrayOfchar; addrKind // #docl Тип параметра: входной.
                                   : SymAddressKind; addr1 // #docl Тип параметра: входной.
                                   : longint; addr2 // #docl Тип параметра: входной.
                                   : longint; addr3 // #docl Тип параметра: входной.
                                   : longint );
  procedure Close  // #docl  Комментарии отсутствуют. </brief> 
                   ;
  procedure SetSymAttribute  // #docl  Комментарии отсутствуют. </brief> 
                              ( parent // #docl Тип параметра: входной.
                              : SymbolToken; name // #docl Тип параметра: входной.
                              : string; data // #docl Тип параметра: входной.
                              : ArrayOfchar );
  procedure OpenNamespace  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string );
  procedure CloseNamespace  // #docl  Комментарии отсутствуют. </brief> 
                            ;
  procedure UsingNamespace  // #docl  Комментарии отсутствуют. </brief> 
                             ( FullName // #docl Тип параметра: входной.
                             : string );
  procedure SetMethodSourceRange  // #docl  Комментарии отсутствуют. </brief> 
                                   ( startDoc // #docl Тип параметра: входной.
                                   : comISymbolDocumentWriter; startLine // #docl Тип параметра: входной.
                                   : longint; startColumn // #docl Тип параметра: входной.
                                   : longint; endDoc // #docl Тип параметра: входной.
                                   : comISymbolDocumentWriter; endLine // #docl Тип параметра: входной.
                                   : longint; endColumn // #docl Тип параметра: входной.
                                   : longint );
  procedure SetUnderlyingWriter  // #docl  Комментарии отсутствуют. </brief> 
                                  ( underlyingWriter // #docl Тип параметра: входной.
                                  : longint );
end;

VipInterface vcomISymbolWriter( vcomIDispatch ) Implements comISymbolWriter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Assembly( comIDispatch );
// #docl Объектный интерфейс com_Assembly </brief>
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  CodeBase// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  property  EscapedCodeBase// #docl Дополнительная документация отсутствует. </brief>
                            : string Read;
  function  GetName  // #docl  Комментарии отсутствуют. </brief> 
                      : com_AssemblyName; // #docl Результат типа com_AssemblyName
  function  GetName_2  // #docl  Комментарии отсутствуют. </brief> 
                        ( copiedName // #docl Тип параметра: входной.
                        : boolean ) : com_AssemblyName; // #docl Результат типа com_AssemblyName
  property  FullName// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  property  EntryPoint// #docl Дополнительная документация отсутствует. </brief>
                       : com_MethodInfo Read;
  function  GetType_2  // #docl  Комментарии отсутствуют. </brief> 
                        ( name // #docl Тип параметра: входной.
                        : string ) : com_Type; // #docl Результат типа com_Type
  function  GetType_3  // #docl  Комментарии отсутствуют. </brief> 
                        ( name // #docl Тип параметра: входной.
                        : string; throwOnError // #docl Тип параметра: входной.
                        : boolean ) : com_Type; // #docl Результат типа com_Type
  function  GetExportedTypes  // #docl  Комментарии отсутствуют. </brief> 
                               : ArrayOfcom_Type; // #docl Результат типа ArrayOfcom_Type
  function  GetTypes  // #docl  Комментарии отсутствуют. </brief> 
                       : ArrayOfcom_Type; // #docl Результат типа ArrayOfcom_Type
  function  GetManifestResourceStream  // #docl  Комментарии отсутствуют. </brief> 
                                        ( aType // #docl Тип параметра: входной.
                                        : com_Type; name // #docl Тип параметра: входной.
                                        : string ) : com_Stream; // #docl Результат типа com_Stream
  function  GetManifestResourceStream_2  // #docl  Комментарии отсутствуют. </brief> 
                                          ( name // #docl Тип параметра: входной.
                                          : string ) : com_Stream; // #docl Результат типа com_Stream
  function  GetFile  // #docl  Комментарии отсутствуют. </brief> 
                      ( name // #docl Тип параметра: входной.
                      : string ) : com_FileStream; // #docl Результат типа com_FileStream
  function  GetFiles  // #docl  Комментарии отсутствуют. </brief> 
                       : ArrayOfcom_FileStream; // #docl Результат типа ArrayOfcom_FileStream
  function  GetFiles_2  // #docl  Комментарии отсутствуют. </brief> 
                         ( getResourceModules // #docl Тип параметра: входной.
                         : boolean ) : ArrayOfcom_FileStream; // #docl Результат типа ArrayOfcom_FileStream
  function  GetManifestResourceNames  // #docl  Комментарии отсутствуют. </brief> 
                                       : ArrayOfstring; // #docl Результат типа ArrayOfstring
  function  GetManifestResourceInfo  // #docl  Комментарии отсутствуют. </brief> 
                                      ( resourceName // #docl Тип параметра: входной.
                                      : string ) : com_ManifestResourceInfo; // #docl Результат типа com_ManifestResourceInfo
  property  Location// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  property  Evidence// #docl Дополнительная документация отсутствует. </brief>
                     : com_Evidence Read;
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
  procedure GetObjectData  // #docl  Комментарии отсутствуют. </brief> 
                            ( info // #docl Тип параметра: входной.
                            : com_SerializationInfo; Context // #docl Тип параметра: входной.
                            : StreamingContext );
  procedure add_ModuleResolve  // #docl  Комментарии отсутствуют. </brief> 
                                ( value // #docl Тип параметра: входной.
                                : com_ModuleResolveEventHandler );
  procedure remove_ModuleResolve  // #docl  Комментарии отсутствуют. </brief> 
                                   ( value // #docl Тип параметра: входной.
                                   : com_ModuleResolveEventHandler );
  function  GetType_4  // #docl  Комментарии отсутствуют. </brief> 
                        ( name // #docl Тип параметра: входной.
                        : string; throwOnError // #docl Тип параметра: входной.
                        : boolean; ignoreCase // #docl Тип параметра: входной.
                        : boolean ) : com_Type; // #docl Результат типа com_Type
  function  GetSatelliteAssembly  // #docl  Комментарии отсутствуют. </brief> 
                                   ( culture // #docl Тип параметра: входной.
                                   : com_CultureInfo ) : com_Assembly; // #docl Результат типа com_Assembly
  function  GetSatelliteAssembly_2  // #docl  Комментарии отсутствуют. </brief> 
                                     ( culture // #docl Тип параметра: входной.
                                     : com_CultureInfo; Version // #docl Тип параметра: входной.
                                     : com_Version ) : com_Assembly; // #docl Результат типа com_Assembly
  function  LoadModule  // #docl  Комментарии отсутствуют. </brief> 
                         ( moduleName // #docl Тип параметра: входной.
                         : string; rawModule // #docl Тип параметра: входной.
                         : ArrayOfchar ) : com_Module; // #docl Результат типа com_Module
  function  LoadModule_2  // #docl  Комментарии отсутствуют. </brief> 
                           ( moduleName // #docl Тип параметра: входной.
                           : string; rawModule // #docl Тип параметра: входной.
                           : ArrayOfchar; rawSymbolStore // #docl Тип параметра: входной.
                           : ArrayOfchar ) : com_Module; // #docl Результат типа com_Module
  function  CreateInstance  // #docl  Комментарии отсутствуют. </brief> 
                             ( typeName // #docl Тип параметра: входной.
                             : string ) : VARIANT; // #docl Результат типа VARIANT
  function  CreateInstance_2  // #docl  Комментарии отсутствуют. </brief> 
                               ( typeName // #docl Тип параметра: входной.
                               : string; ignoreCase // #docl Тип параметра: входной.
                               : boolean ) : VARIANT; // #docl Результат типа VARIANT
  function  CreateInstance_3  // #docl  Комментарии отсутствуют. </brief> 
                               ( typeName // #docl Тип параметра: входной.
                               : string; ignoreCase // #docl Тип параметра: входной.
                               : boolean; bindingAttr // #docl Тип параметра: входной.
                               : BindingFlags; Binder // #docl Тип параметра: входной.
                               : com_Binder; args // #docl Тип параметра: входной.
                               : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                               : com_CultureInfo; activationAttributes // #docl Тип параметра: входной.
                               : ArrayOfVARIANT ) : VARIANT; // #docl Результат типа VARIANT
  function  GetLoadedModules  // #docl  Комментарии отсутствуют. </brief> 
                               : ArrayOfcom_Module; // #docl Результат типа ArrayOfcom_Module
  function  GetLoadedModules_2  // #docl  Комментарии отсутствуют. </brief> 
                                 ( getResourceModules // #docl Тип параметра: входной.
                                 : boolean ) : ArrayOfcom_Module; // #docl Результат типа ArrayOfcom_Module
  function  GetModules  // #docl  Комментарии отсутствуют. </brief> 
                         : ArrayOfcom_Module; // #docl Результат типа ArrayOfcom_Module
  function  GetModules_2  // #docl  Комментарии отсутствуют. </brief> 
                           ( getResourceModules // #docl Тип параметра: входной.
                           : boolean ) : ArrayOfcom_Module; // #docl Результат типа ArrayOfcom_Module
  function  GetModule  // #docl  Комментарии отсутствуют. </brief> 
                        ( name // #docl Тип параметра: входной.
                        : string ) : com_Module; // #docl Результат типа com_Module
  function  GetReferencedAssemblies  // #docl  Комментарии отсутствуют. </brief> 
                                      : ArrayOfcom_AssemblyName; // #docl Результат типа ArrayOfcom_AssemblyName
  property  GlobalAssemblyCache// #docl Дополнительная документация отсутствует. </brief>
                                : boolean Read;
end;

VipInterface vcom_Assembly( vcomIDispatch ) Implements com_Assembly (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyName( comIUnknown );
// #docl Объектный интерфейс com_AssemblyName </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_AssemblyName( vcomIUnknown ) Implements com_AssemblyName (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodBase( comIUnknown );
// #docl Объектный интерфейс com_MethodBase </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  MemberType// #docl Дополнительная документация отсутствует. </brief>
                       : MemberTypes Read;
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  DeclaringType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  property  ReflectedType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
  function  GetParameters  // #docl  Комментарии отсутствуют. </brief> 
                            : ArrayOfcom_ParameterInfo; // #docl Результат типа ArrayOfcom_ParameterInfo
  function  GetMethodImplementationFlags  // #docl  Комментарии отсутствуют. </brief> 
                                           : MethodImplAttributes; // #docl Результат типа MethodImplAttributes
  property  MethodHandle// #docl Дополнительная документация отсутствует. </brief>
                         : RuntimeMethodHandle Read;
  property  Attributes// #docl Дополнительная документация отсутствует. </brief>
                       : MethodAttributes Read;
  property  CallingConvention// #docl Дополнительная документация отсутствует. </brief>
                              : CallingConventions Read;
  function  Invoke_2  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT; invokeAttr // #docl Тип параметра: входной.
                       : BindingFlags; Binder // #docl Тип параметра: входной.
                       : com_Binder; aparameters // #docl Тип параметра: входной.
                       : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                       : com_CultureInfo ) : VARIANT; // #docl Результат типа VARIANT
  property  IsPublic// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsPrivate// #docl Дополнительная документация отсутствует. </brief>
                      : boolean Read;
  property  IsFamily// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsAssembly// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsFamilyAndAssembly// #docl Дополнительная документация отсутствует. </brief>
                                : boolean Read;
  property  IsFamilyOrAssembly// #docl Дополнительная документация отсутствует. </brief>
                               : boolean Read;
  property  IsStatic// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsFinal// #docl Дополнительная документация отсутствует. </brief>
                    : boolean Read;
  property  IsVirtual// #docl Дополнительная документация отсутствует. </brief>
                      : boolean Read;
  property  IsHideBySig// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  IsAbstract// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsSpecialName// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  property  IsConstructor// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  function  Invoke_3  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT; aparameters // #docl Тип параметра: входной.
                       : ArrayOfVARIANT ) : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcom_MethodBase( vcomIUnknown ) Implements com_MethodBase (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodInfo( comIUnknown );
// #docl Объектный интерфейс com_MethodInfo </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  MemberType// #docl Дополнительная документация отсутствует. </brief>
                       : MemberTypes Read;
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  DeclaringType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  property  ReflectedType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
  function  GetParameters  // #docl  Комментарии отсутствуют. </brief> 
                            : ArrayOfcom_ParameterInfo; // #docl Результат типа ArrayOfcom_ParameterInfo
  function  GetMethodImplementationFlags  // #docl  Комментарии отсутствуют. </brief> 
                                           : MethodImplAttributes; // #docl Результат типа MethodImplAttributes
  property  MethodHandle// #docl Дополнительная документация отсутствует. </brief>
                         : RuntimeMethodHandle Read;
  property  Attributes// #docl Дополнительная документация отсутствует. </brief>
                       : MethodAttributes Read;
  property  CallingConvention// #docl Дополнительная документация отсутствует. </brief>
                              : CallingConventions Read;
  function  Invoke_2  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT; invokeAttr // #docl Тип параметра: входной.
                       : BindingFlags; Binder // #docl Тип параметра: входной.
                       : com_Binder; aparameters // #docl Тип параметра: входной.
                       : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                       : com_CultureInfo ) : VARIANT; // #docl Результат типа VARIANT
  property  IsPublic// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsPrivate// #docl Дополнительная документация отсутствует. </brief>
                      : boolean Read;
  property  IsFamily// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsAssembly// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsFamilyAndAssembly// #docl Дополнительная документация отсутствует. </brief>
                                : boolean Read;
  property  IsFamilyOrAssembly// #docl Дополнительная документация отсутствует. </brief>
                               : boolean Read;
  property  IsStatic// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsFinal// #docl Дополнительная документация отсутствует. </brief>
                    : boolean Read;
  property  IsVirtual// #docl Дополнительная документация отсутствует. </brief>
                      : boolean Read;
  property  IsHideBySig// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  IsAbstract// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsSpecialName// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  property  IsConstructor// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  function  Invoke_3  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT; aparameters // #docl Тип параметра: входной.
                       : ArrayOfVARIANT ) : VARIANT; // #docl Результат типа VARIANT
  property  returnType// #docl Дополнительная документация отсутствует. </brief>
                       : com_Type Read;
  property  ReturnTypeCustomAttributes// #docl Дополнительная документация отсутствует. </brief>
                                       : comICustomAttributeProvider Read;
  function  GetBaseDefinition  // #docl  Комментарии отсутствуют. </brief> 
                                : com_MethodInfo; // #docl Результат типа com_MethodInfo
end;

VipInterface vcom_MethodInfo( vcomIUnknown ) Implements com_MethodInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ConstructorInfo( comIUnknown );
// #docl Объектный интерфейс com_ConstructorInfo </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  MemberType// #docl Дополнительная документация отсутствует. </brief>
                       : MemberTypes Read;
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  DeclaringType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  property  ReflectedType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
  function  GetParameters  // #docl  Комментарии отсутствуют. </brief> 
                            : ArrayOfcom_ParameterInfo; // #docl Результат типа ArrayOfcom_ParameterInfo
  function  GetMethodImplementationFlags  // #docl  Комментарии отсутствуют. </brief> 
                                           : MethodImplAttributes; // #docl Результат типа MethodImplAttributes
  property  MethodHandle// #docl Дополнительная документация отсутствует. </brief>
                         : RuntimeMethodHandle Read;
  property  Attributes// #docl Дополнительная документация отсутствует. </brief>
                       : MethodAttributes Read;
  property  CallingConvention// #docl Дополнительная документация отсутствует. </brief>
                              : CallingConventions Read;
  function  Invoke_2  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT; invokeAttr // #docl Тип параметра: входной.
                       : BindingFlags; Binder // #docl Тип параметра: входной.
                       : com_Binder; aparameters // #docl Тип параметра: входной.
                       : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                       : com_CultureInfo ) : VARIANT; // #docl Результат типа VARIANT
  property  IsPublic// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsPrivate// #docl Дополнительная документация отсутствует. </brief>
                      : boolean Read;
  property  IsFamily// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsAssembly// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsFamilyAndAssembly// #docl Дополнительная документация отсутствует. </brief>
                                : boolean Read;
  property  IsFamilyOrAssembly// #docl Дополнительная документация отсутствует. </brief>
                               : boolean Read;
  property  IsStatic// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsFinal// #docl Дополнительная документация отсутствует. </brief>
                    : boolean Read;
  property  IsVirtual// #docl Дополнительная документация отсутствует. </brief>
                      : boolean Read;
  property  IsHideBySig// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
  property  IsAbstract// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsSpecialName// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  property  IsConstructor// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  function  Invoke_3  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT; aparameters // #docl Тип параметра: входной.
                       : ArrayOfVARIANT ) : VARIANT; // #docl Результат типа VARIANT
  function  Invoke_4  // #docl  Комментарии отсутствуют. </brief> 
                       ( invokeAttr // #docl Тип параметра: входной.
                       : BindingFlags; Binder // #docl Тип параметра: входной.
                       : com_Binder; aparameters // #docl Тип параметра: входной.
                       : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                       : com_CultureInfo ) : VARIANT; // #docl Результат типа VARIANT
  function  Invoke_5  // #docl  Комментарии отсутствуют. </brief> 
                       ( aparameters // #docl Тип параметра: входной.
                       : ArrayOfVARIANT ) : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcom_ConstructorInfo( vcomIUnknown ) Implements com_ConstructorInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FieldInfo( comIUnknown );
// #docl Объектный интерфейс com_FieldInfo </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  MemberType// #docl Дополнительная документация отсутствует. </brief>
                       : MemberTypes Read;
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  DeclaringType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  property  ReflectedType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
  property  FieldType// #docl Дополнительная документация отсутствует. </brief>
                      : com_Type Read;
  function  GetValue  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT ) : VARIANT; // #docl Результат типа VARIANT
  function  GetValueDirect  // #docl  Комментарии отсутствуют. </brief> 
                             ( obj // #docl Тип параметра: входной.
                             : VARIANT ) : VARIANT; // #docl Результат типа VARIANT
  procedure SetValue  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT; value // #docl Тип параметра: входной.
                       : VARIANT; invokeAttr // #docl Тип параметра: входной.
                       : BindingFlags; Binder // #docl Тип параметра: входной.
                       : com_Binder; culture // #docl Тип параметра: входной.
                       : com_CultureInfo );
  procedure SetValueDirect  // #docl  Комментарии отсутствуют. </brief> 
                             ( obj // #docl Тип параметра: входной.
                             : VARIANT; value // #docl Тип параметра: входной.
                             : VARIANT );
  property  FieldHandle// #docl Дополнительная документация отсутствует. </brief>
                        : RuntimeFieldHandle Read;
  property  Attributes// #docl Дополнительная документация отсутствует. </brief>
                       : FieldAttributes Read;
  procedure SetValue_2  // #docl  Комментарии отсутствуют. </brief> 
                         ( obj // #docl Тип параметра: входной.
                         : VARIANT; value // #docl Тип параметра: входной.
                         : VARIANT );
  property  IsPublic// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsPrivate// #docl Дополнительная документация отсутствует. </brief>
                      : boolean Read;
  property  IsFamily// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsAssembly// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsFamilyAndAssembly// #docl Дополнительная документация отсутствует. </brief>
                                : boolean Read;
  property  IsFamilyOrAssembly// #docl Дополнительная документация отсутствует. </brief>
                               : boolean Read;
  property  IsStatic// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  property  IsInitOnly// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  IsLiteral// #docl Дополнительная документация отсутствует. </brief>
                      : boolean Read;
  property  IsNotSerialized// #docl Дополнительная документация отсутствует. </brief>
                            : boolean Read;
  property  IsSpecialName// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  property  IsPinvokeImpl// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
end;

VipInterface vcom_FieldInfo( vcomIUnknown ) Implements com_FieldInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PropertyInfo( comIUnknown );
// #docl Объектный интерфейс com_PropertyInfo </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  MemberType// #docl Дополнительная документация отсутствует. </brief>
                       : MemberTypes Read;
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  DeclaringType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  property  ReflectedType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
  property  PropertyType// #docl Дополнительная документация отсутствует. </brief>
                         : com_Type Read;
  function  GetValue  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT; aindex // #docl Тип параметра: входной.
                       : ArrayOfVARIANT ) : VARIANT; // #docl Результат типа VARIANT
  function  GetValue_2  // #docl  Комментарии отсутствуют. </brief> 
                         ( obj // #docl Тип параметра: входной.
                         : VARIANT; invokeAttr // #docl Тип параметра: входной.
                         : BindingFlags; Binder // #docl Тип параметра: входной.
                         : com_Binder; aindex // #docl Тип параметра: входной.
                         : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                         : com_CultureInfo ) : VARIANT; // #docl Результат типа VARIANT
  procedure SetValue  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : VARIANT; value // #docl Тип параметра: входной.
                       : VARIANT; aindex // #docl Тип параметра: входной.
                       : ArrayOfVARIANT );
  procedure SetValue_2  // #docl  Комментарии отсутствуют. </brief> 
                         ( obj // #docl Тип параметра: входной.
                         : VARIANT; value // #docl Тип параметра: входной.
                         : VARIANT; invokeAttr // #docl Тип параметра: входной.
                         : BindingFlags; Binder // #docl Тип параметра: входной.
                         : com_Binder; aindex // #docl Тип параметра: входной.
                         : ArrayOfVARIANT; culture // #docl Тип параметра: входной.
                         : com_CultureInfo );
  function  GetAccessors  // #docl  Комментарии отсутствуют. </brief> 
                           ( nonPublic // #docl Тип параметра: входной.
                           : boolean ) : ArrayOfcom_MethodInfo; // #docl Результат типа ArrayOfcom_MethodInfo
  function  GetGetMethod  // #docl  Комментарии отсутствуют. </brief> 
                           ( nonPublic // #docl Тип параметра: входной.
                           : boolean ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetSetMethod  // #docl  Комментарии отсутствуют. </brief> 
                           ( nonPublic // #docl Тип параметра: входной.
                           : boolean ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetIndexParameters  // #docl  Комментарии отсутствуют. </brief> 
                                 : ArrayOfcom_ParameterInfo; // #docl Результат типа ArrayOfcom_ParameterInfo
  property  Attributes// #docl Дополнительная документация отсутствует. </brief>
                       : PropertyAttributes Read;
  property  CanRead// #docl Дополнительная документация отсутствует. </brief>
                    : boolean Read;
  property  CanWrite// #docl Дополнительная документация отсутствует. </brief>
                     : boolean Read;
  function  GetAccessors_2  // #docl  Комментарии отсутствуют. </brief> 
                             : ArrayOfcom_MethodInfo; // #docl Результат типа ArrayOfcom_MethodInfo
  function  GetGetMethod_2  // #docl  Комментарии отсутствуют. </brief> 
                             : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetSetMethod_2  // #docl  Комментарии отсутствуют. </brief> 
                             : com_MethodInfo; // #docl Результат типа com_MethodInfo
  property  IsSpecialName// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
end;

VipInterface vcom_PropertyInfo( vcomIUnknown ) Implements com_PropertyInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EventInfo( comIUnknown );
// #docl Объектный интерфейс com_EventInfo </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( other // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  property  MemberType// #docl Дополнительная документация отсутствует. </brief>
                       : MemberTypes Read;
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  DeclaringType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  property  ReflectedType// #docl Дополнительная документация отсутствует. </brief>
                          : com_Type Read;
  function  GetCustomAttributes  // #docl  Комментарии отсутствуют. </brief> 
                                  ( attributeType // #docl Тип параметра: входной.
                                  : com_Type; inherit // #docl Тип параметра: входной.
                                  : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  GetCustomAttributes_2  // #docl  Комментарии отсутствуют. </brief> 
                                    ( inherit // #docl Тип параметра: входной.
                                    : boolean ) : ArrayOfVARIANT; // #docl Результат типа ArrayOfVARIANT
  function  IsDefined  // #docl  Комментарии отсутствуют. </brief> 
                        ( attributeType // #docl Тип параметра: входной.
                        : com_Type; inherit // #docl Тип параметра: входной.
                        : boolean ) : boolean; // #docl Результат типа boolean
  function  GetAddMethod  // #docl  Комментарии отсутствуют. </brief> 
                           ( nonPublic // #docl Тип параметра: входной.
                           : boolean ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetRemoveMethod  // #docl  Комментарии отсутствуют. </brief> 
                              ( nonPublic // #docl Тип параметра: входной.
                              : boolean ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetRaiseMethod  // #docl  Комментарии отсутствуют. </brief> 
                             ( nonPublic // #docl Тип параметра: входной.
                             : boolean ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  property  Attributes// #docl Дополнительная документация отсутствует. </brief>
                       : EventAttributes Read;
  function  GetAddMethod_2  // #docl  Комментарии отсутствуют. </brief> 
                             : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetRemoveMethod_2  // #docl  Комментарии отсутствуют. </brief> 
                                : com_MethodInfo; // #docl Результат типа com_MethodInfo
  function  GetRaiseMethod_2  // #docl  Комментарии отсутствуют. </brief> 
                               : com_MethodInfo; // #docl Результат типа com_MethodInfo
  procedure AddEventHandler  // #docl  Комментарии отсутствуют. </brief> 
                              ( Target // #docl Тип параметра: входной.
                              : VARIANT; handler // #docl Тип параметра: входной.
                              : com_Delegate );
  procedure RemoveEventHandler  // #docl  Комментарии отсутствуют. </brief> 
                                 ( Target // #docl Тип параметра: входной.
                                 : VARIANT; handler // #docl Тип параметра: входной.
                                 : com_Delegate );
  property  EventHandlerType// #docl Дополнительная документация отсутствует. </brief>
                             : com_Type Read;
  property  IsSpecialName// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  property  IsMulticast// #docl Дополнительная документация отсутствует. </brief>
                        : boolean Read;
end;

VipInterface vcom_EventInfo( vcomIUnknown ) Implements com_EventInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ParameterInfo( comIUnknown );
// #docl Объектный интерфейс com_ParameterInfo </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_ParameterInfo( vcomIUnknown ) Implements com_ParameterInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Module( comIUnknown );
// #docl Объектный интерфейс com_Module </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_Module( vcomIUnknown ) Implements com_Module (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIFormatterConverter( comIDispatch );
// #docl Объектный интерфейс comIFormatterConverter </brief>
  function  Convert  // #docl  Комментарии отсутствуют. </brief> 
                      ( value // #docl Тип параметра: входной.
                      : VARIANT; aType // #docl Тип параметра: входной.
                      : com_Type ) : VARIANT; // #docl Результат типа VARIANT
  function  Convert_2  // #docl  Комментарии отсутствуют. </brief> 
                        ( value // #docl Тип параметра: входной.
                        : VARIANT; TypeCode // #docl Тип параметра: входной.
                        : TypeCode ) : VARIANT; // #docl Результат типа VARIANT
  function  ToBoolean  // #docl  Комментарии отсутствуют. </brief> 
                        ( value // #docl Тип параметра: входной.
                        : VARIANT ) : boolean; // #docl Результат типа boolean
  function  ToChar  // #docl  Комментарии отсутствуют. </brief> 
                     ( value // #docl Тип параметра: входной.
                     : VARIANT ) : word; // #docl Результат типа word
  function  ToSByte  // #docl  Комментарии отсутствуют. </brief> 
                      ( value // #docl Тип параметра: входной.
                      : VARIANT ) : byte; // #docl Результат типа byte
  function  ToByte  // #docl  Комментарии отсутствуют. </brief> 
                     ( value // #docl Тип параметра: входной.
                     : VARIANT ) : char; // #docl Результат типа char
  function  ToInt16  // #docl  Комментарии отсутствуют. </brief> 
                      ( value // #docl Тип параметра: входной.
                      : VARIANT ) : integer; // #docl Результат типа integer
  function  ToUInt16  // #docl  Комментарии отсутствуют. </brief> 
                       ( value // #docl Тип параметра: входной.
                       : VARIANT ) : word; // #docl Результат типа word
  function  ToInt32  // #docl  Комментарии отсутствуют. </brief> 
                      ( value // #docl Тип параметра: входной.
                      : VARIANT ) : longint; // #docl Результат типа longint
  function  ToUInt32  // #docl  Комментарии отсутствуют. </brief> 
                       ( value // #docl Тип параметра: входной.
                       : VARIANT ) : longint; // #docl Результат типа longint
  function  ToInt64  // #docl  Комментарии отсутствуют. </brief> 
                      ( value // #docl Тип параметра: входной.
                      : VARIANT ) : comp; // #docl Результат типа comp
  function  ToUInt64  // #docl  Комментарии отсутствуют. </brief> 
                       ( value // #docl Тип параметра: входной.
                       : VARIANT ) : comp; // #docl Результат типа comp
  function  ToSingle  // #docl  Комментарии отсутствуют. </brief> 
                       ( value // #docl Тип параметра: входной.
                       : VARIANT ) : single; // #docl Результат типа single
  function  ToDouble  // #docl  Комментарии отсутствуют. </brief> 
                       ( value // #docl Тип параметра: входной.
                       : VARIANT ) : double; // #docl Результат типа double
  function  ToDecimal  // #docl  Комментарии отсутствуют. </brief> 
                        ( value // #docl Тип параметра: входной.
                        : VARIANT ) : string; // #docl Результат типа string
  function  ToDateTime  // #docl  Комментарии отсутствуют. </brief> 
                         ( value // #docl Тип параметра: входной.
                         : VARIANT ) : DATE; // #docl Результат типа DATE
  function  Get_ToString  // #docl  Комментарии отсутствуют. </brief> 
                           ( value // #docl Тип параметра: входной.
                           : VARIANT ) : string; // #docl Результат типа string
end;

VipInterface vcomIFormatterConverter( vcomIDispatch ) Implements comIFormatterConverter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISerializationSurrogate( comIDispatch );
// #docl Объектный интерфейс comISerializationSurrogate </brief>
  procedure GetObjectData  // #docl  Комментарии отсутствуют. </brief> 
                            ( obj // #docl Тип параметра: входной.
                            : VARIANT; info // #docl Тип параметра: входной.
                            : com_SerializationInfo; Context // #docl Тип параметра: входной.
                            : StreamingContext );
  function  SetObjectData  // #docl  Комментарии отсутствуют. </brief> 
                            ( obj // #docl Тип параметра: входной.
                            : VARIANT; info // #docl Тип параметра: входной.
                            : com_SerializationInfo; Context // #docl Тип параметра: входной.
                            : StreamingContext; selector // #docl Тип параметра: входной.
                            : comISurrogateSelector ) : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcomISerializationSurrogate( vcomIDispatch ) Implements comISerializationSurrogate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIFormatter( comIDispatch );
// #docl Объектный интерфейс comIFormatter </brief>
  function  Deserialize  // #docl  Комментарии отсутствуют. </brief> 
                          ( serializationStream // #docl Тип параметра: входной.
                          : com_Stream ) : VARIANT; // #docl Результат типа VARIANT
  procedure Serialize  // #docl  Комментарии отсутствуют. </brief> 
                        ( serializationStream // #docl Тип параметра: входной.
                        : com_Stream; graph // #docl Тип параметра: входной.
                        : VARIANT );
  property  SurrogateSelector// #docl Дополнительная документация отсутствует. </brief>
                              : comISurrogateSelector Read Write;
  property  Binder// #docl Дополнительная документация отсутствует. </brief>
                   : com_SerializationBinder Read Write;
  property  Context// #docl Дополнительная документация отсутствует. </brief>
                    : StreamingContext Read Write;
end;

VipInterface vcomIFormatter( vcomIDispatch ) Implements comIFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISurrogateSelector( comIDispatch );
// #docl Объектный интерфейс comISurrogateSelector </brief>
  procedure ChainSelector  // #docl  Комментарии отсутствуют. </brief> 
                            ( selector // #docl Тип параметра: входной.
                            : comISurrogateSelector );
  function  GetSurrogate  // #docl  Комментарии отсутствуют. </brief> 
                           ( aType // #docl Тип параметра: входной.
                           : com_Type; Context // #docl Тип параметра: входной.
                           : StreamingContext; var selector // #docl Тип параметра: выходной.
                           : comISurrogateSelector ) : comISerializationSurrogate; // #docl Результат типа comISerializationSurrogate
  function  GetNextSelector  // #docl  Комментарии отсутствуют. </brief> 
                              : comISurrogateSelector; // #docl Результат типа comISurrogateSelector
end;

VipInterface vcomISurrogateSelector( vcomIDispatch ) Implements comISurrogateSelector (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIResourceReader( comIDispatch );
// #docl Объектный интерфейс comIResourceReader </brief>
  procedure Close  // #docl  Комментарии отсутствуют. </brief> 
                   ;
  function  GetEnumerator  // #docl  Комментарии отсутствуют. </brief> 
                            : comIDictionaryEnumerator; // #docl Результат типа comIDictionaryEnumerator
end;

VipInterface vcomIResourceReader( vcomIDispatch ) Implements comIResourceReader (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIResourceWriter( comIDispatch );
// #docl Объектный интерфейс comIResourceWriter </brief>
  procedure AddResource  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string; value // #docl Тип параметра: входной.
                          : string );
  procedure AddResource_2  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string; value // #docl Тип параметра: входной.
                            : VARIANT );
  procedure AddResource_3  // #docl  Комментарии отсутствуют. </brief> 
                            ( name // #docl Тип параметра: входной.
                            : string; value // #docl Тип параметра: входной.
                            : ArrayOfchar );
  procedure Close  // #docl  Комментарии отсутствуют. </brief> 
                   ;
  procedure Generate  // #docl  Комментарии отсутствуют. </brief> 
                      ;
end;

VipInterface vcomIResourceWriter( vcomIDispatch ) Implements comIResourceWriter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISecurityEncodable( comIDispatch );
// #docl Объектный интерфейс comISecurityEncodable </brief>
  function  ToXml  // #docl  Комментарии отсутствуют. </brief> 
                    : com_SecurityElement; // #docl Результат типа com_SecurityElement
  procedure FromXml  // #docl  Комментарии отсутствуют. </brief> 
                      ( e // #docl Тип параметра: входной.
                      : com_SecurityElement );
end;

VipInterface vcomISecurityEncodable( vcomIDispatch ) Implements comISecurityEncodable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISecurityPolicyEncodable( comIDispatch );
// #docl Объектный интерфейс comISecurityPolicyEncodable </brief>
  function  ToXml  // #docl  Комментарии отсутствуют. </brief> 
                    ( level // #docl Тип параметра: входной.
                    : com_PolicyLevel ) : com_SecurityElement; // #docl Результат типа com_SecurityElement
  procedure FromXml  // #docl  Комментарии отсутствуют. </brief> 
                      ( e // #docl Тип параметра: входной.
                      : com_SecurityElement; level // #docl Тип параметра: входной.
                      : com_PolicyLevel );
end;

VipInterface vcomISecurityPolicyEncodable( vcomIDispatch ) Implements comISecurityPolicyEncodable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIMembershipCondition( comIDispatch );
// #docl Объектный интерфейс comIMembershipCondition </brief>
  function  Check  // #docl  Комментарии отсутствуют. </brief> 
                    ( Evidence // #docl Тип параметра: входной.
                    : com_Evidence ) : boolean; // #docl Результат типа boolean
  function  Copy  // #docl  Комментарии отсутствуют. </brief> 
                   : comIMembershipCondition; // #docl Результат типа comIMembershipCondition
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( obj // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcomIMembershipCondition( vcomIDispatch ) Implements comIMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIIdentityPermissionFactory( comIDispatch );
// #docl Объектный интерфейс comIIdentityPermissionFactory </brief>
  function  CreateIdentityPermission  // #docl  Комментарии отсутствуют. </brief> 
                                       ( Evidence // #docl Тип параметра: входной.
                                       : com_Evidence ) : comIPermission; // #docl Результат типа comIPermission
end;

VipInterface vcomIIdentityPermissionFactory( vcomIDispatch ) Implements comIIdentityPermissionFactory (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIApplicationTrustManager( comIDispatch );
// #docl Объектный интерфейс comIApplicationTrustManager </brief>
  function  DetermineApplicationTrust  // #docl  Комментарии отсутствуют. </brief> 
                                        ( activationContext // #docl Тип параметра: входной.
                                        : comIUnknown; Context // #docl Тип параметра: входной.
                                        : com_TrustManagerContext ) : com_ApplicationTrust; // #docl Результат типа com_ApplicationTrust
end;

VipInterface vcomIApplicationTrustManager( vcomIDispatch ) Implements comIApplicationTrustManager (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIIdentity( comIDispatch );
// #docl Объектный интерфейс comIIdentity </brief>
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  property  AuthenticationType// #docl Дополнительная документация отсутствует. </brief>
                               : string Read;
  property  IsAuthenticated// #docl Дополнительная документация отсутствует. </brief>
                            : boolean Read;
end;

VipInterface vcomIIdentity( vcomIDispatch ) Implements comIIdentity (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIPrincipal( comIDispatch );
// #docl Объектный интерфейс comIPrincipal </brief>
  property  Identity// #docl Дополнительная документация отсутствует. </brief>
                     : comIIdentity Read;
  function  IsInRole  // #docl  Комментарии отсутствуют. </brief> 
                       ( role // #docl Тип параметра: входной.
                       : string ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcomIPrincipal( vcomIDispatch ) Implements comIPrincipal (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICustomMarshaler( comIDispatch );
// #docl Объектный интерфейс comICustomMarshaler </brief>
  function  MarshalNativeToManaged  // #docl  Комментарии отсутствуют. </brief> 
                                     ( pNativeData // #docl Тип параметра: входной.
                                     : longint ) : VARIANT; // #docl Результат типа VARIANT
  function  MarshalManagedToNative  // #docl  Комментарии отсутствуют. </brief> 
                                     ( ManagedObj // #docl Тип параметра: входной.
                                     : VARIANT ) : longint; // #docl Результат типа longint
  procedure CleanUpNativeData  // #docl  Комментарии отсутствуют. </brief> 
                                ( pNativeData // #docl Тип параметра: входной.
                                : longint );
  procedure CleanUpManagedData  // #docl  Комментарии отсутствуют. </brief> 
                                 ( ManagedObj // #docl Тип параметра: входной.
                                 : VARIANT );
  function  GetNativeDataSize  // #docl  Комментарии отсутствуют. </brief> 
                                : longint; // #docl Результат типа longint
end;

VipInterface vcomICustomMarshaler( vcomIDispatch ) Implements comICustomMarshaler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comITypeLibImporterNotifySink( comIUnknown );
// #docl Объектный интерфейс comITypeLibImporterNotifySink </brief>
  procedure ReportEvent  // #docl  Комментарии отсутствуют. </brief> 
                          ( eventKind // #docl Тип параметра: входной.
                          : ImporterEventKind; eventCode // #docl Тип параметра: входной.
                          : longint; eventMsg // #docl Тип параметра: входной.
                          : string );
  function  ResolveRef  // #docl  Комментарии отсутствуют. </brief> 
                         ( typeLib // #docl Тип параметра: входной.
                         : comIUnknown ) : com_Assembly; // #docl Результат типа com_Assembly
end;

VipInterface vcomITypeLibImporterNotifySink( vcomIUnknown ) Implements comITypeLibImporterNotifySink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICustomAdapter( comIDispatch );
// #docl Объектный интерфейс comICustomAdapter </brief>
  function  GetUnderlyingObject  // #docl  Комментарии отсутствуют. </brief> 
                                  : comIUnknown; // #docl Результат типа comIUnknown
end;

VipInterface vcomICustomAdapter( vcomIDispatch ) Implements comICustomAdapter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICustomFactory( comIDispatch );
// #docl Объектный интерфейс comICustomFactory </brief>
  function  CreateInstance  // #docl  Комментарии отсутствуют. </brief> 
                             ( serverType // #docl Тип параметра: входной.
                             : com_Type ) : com_MarshalByRefObject; // #docl Результат типа com_MarshalByRefObject
end;

VipInterface vcomICustomFactory( vcomIDispatch ) Implements comICustomFactory (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIRegistrationServices( comIDispatch );
// #docl Объектный интерфейс comIRegistrationServices </brief>
  function  RegisterAssembly  // #docl  Комментарии отсутствуют. </brief> 
                               ( Assembly // #docl Тип параметра: входной.
                               : com_Assembly; flags // #docl Тип параметра: входной.
                               : AssemblyRegistrationFlags ) : boolean; // #docl Результат типа boolean
  function  UnregisterAssembly  // #docl  Комментарии отсутствуют. </brief> 
                                 ( Assembly // #docl Тип параметра: входной.
                                 : com_Assembly ) : boolean; // #docl Результат типа boolean
  function  GetRegistrableTypesInAssembly  // #docl  Комментарии отсутствуют. </brief> 
                                            ( Assembly // #docl Тип параметра: входной.
                                            : com_Assembly ) : ArrayOfcom_Type; // #docl Результат типа ArrayOfcom_Type
  function  GetProgIdForType  // #docl  Комментарии отсутствуют. </brief> 
                               ( aType // #docl Тип параметра: входной.
                               : com_Type ) : string; // #docl Результат типа string
  procedure RegisterTypeForComClients  // #docl  Комментарии отсутствуют. </brief> 
                                        ( aType // #docl Тип параметра: входной.
                                        : com_Type; var G // #docl Тип параметра: входной и выходной.
                                        : GUID );
  function  GetManagedCategoryGuid  // #docl  Комментарии отсутствуют. </brief> 
                                     : GUID; // #docl Результат типа GUID
  function  TypeRequiresRegistration  // #docl  Комментарии отсутствуют. </brief> 
                                       ( aType // #docl Тип параметра: входной.
                                       : com_Type ) : boolean; // #docl Результат типа boolean
  function  TypeRepresentsComType  // #docl  Комментарии отсутствуют. </brief> 
                                    ( aType // #docl Тип параметра: входной.
                                    : com_Type ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcomIRegistrationServices( vcomIDispatch ) Implements comIRegistrationServices (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comITypeLibExporterNotifySink( comIUnknown );
// #docl Объектный интерфейс comITypeLibExporterNotifySink </brief>
  procedure ReportEvent  // #docl  Комментарии отсутствуют. </brief> 
                          ( eventKind // #docl Тип параметра: входной.
                          : ExporterEventKind; eventCode // #docl Тип параметра: входной.
                          : longint; eventMsg // #docl Тип параметра: входной.
                          : string );
  function  ResolveRef  // #docl  Комментарии отсутствуют. </brief> 
                         ( Assembly // #docl Тип параметра: входной.
                         : com_Assembly ) : comIUnknown; // #docl Результат типа comIUnknown
end;

VipInterface vcomITypeLibExporterNotifySink( vcomIUnknown ) Implements comITypeLibExporterNotifySink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comITypeLibConverter( comIUnknown );
// #docl Объектный интерфейс comITypeLibConverter </brief>
  function  ConvertTypeLibToAssembly  // #docl  Комментарии отсутствуют. </brief> 
                                       ( typeLib // #docl Тип параметра: входной.
                                       : comIUnknown; asmFileName // #docl Тип параметра: входной.
                                       : string; flags // #docl Тип параметра: входной.
                                       : TypeLibImporterFlags; notifySink // #docl Тип параметра: входной.
                                       : comITypeLibImporterNotifySink; publicKey // #docl Тип параметра: входной.
                                       : ArrayOfchar; keyPair // #docl Тип параметра: входной.
                                       : com_StrongNameKeyPair; asmNamespace // #docl Тип параметра: входной.
                                       : string; asmVersion // #docl Тип параметра: входной.
                                       : com_Version ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
  function  ConvertAssemblyToTypeLib  // #docl  Комментарии отсутствуют. </brief> 
                                       ( Assembly // #docl Тип параметра: входной.
                                       : com_Assembly; typeLibName // #docl Тип параметра: входной.
                                       : string; flags // #docl Тип параметра: входной.
                                       : TypeLibExporterFlags; notifySink // #docl Тип параметра: входной.
                                       : comITypeLibExporterNotifySink ) : comIUnknown; // #docl Результат типа comIUnknown
  function  GetPrimaryInteropAssembly  // #docl  Комментарии отсутствуют. </brief> 
                                        ( G // #docl Тип параметра: входной.
                                        : GUID; major // #docl Тип параметра: входной.
                                        : longint; minor // #docl Тип параметра: входной.
                                        : longint; lcid // #docl Тип параметра: входной.
                                        : longint; var asmName // #docl Тип параметра: выходной.
                                        : string; var asmCodeBase // #docl Тип параметра: выходной.
                                        : string ) : boolean; // #docl Результат типа boolean
  function  ConvertTypeLibToAssembly_2  // #docl  Комментарии отсутствуют. </brief> 
                                         ( typeLib // #docl Тип параметра: входной.
                                         : comIUnknown; asmFileName // #docl Тип параметра: входной.
                                         : string; flags // #docl Тип параметра: входной.
                                         : longint; notifySink // #docl Тип параметра: входной.
                                         : comITypeLibImporterNotifySink; publicKey // #docl Тип параметра: входной.
                                         : ArrayOfchar; keyPair // #docl Тип параметра: входной.
                                         : com_StrongNameKeyPair; unsafeInterfaces // #docl Тип параметра: входной.
                                         : boolean ) : com_AssemblyBuilder; // #docl Результат типа com_AssemblyBuilder
end;

VipInterface vcomITypeLibConverter( vcomIUnknown ) Implements comITypeLibConverter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comITypeLibExporterNameProvider( comIUnknown );
// #docl Объектный интерфейс comITypeLibExporterNameProvider </brief>
  function  GetNames  // #docl  Комментарии отсутствуют. </brief> 
                       : ArrayOfstring; // #docl Результат типа ArrayOfstring
end;

VipInterface vcomITypeLibExporterNameProvider( vcomIUnknown ) Implements comITypeLibExporterNameProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIExpando( comIDispatch );
// #docl Объектный интерфейс comIExpando </brief>
  function  AddField  // #docl  Комментарии отсутствуют. </brief> 
                       ( name // #docl Тип параметра: входной.
                       : string ) : com_FieldInfo; // #docl Результат типа com_FieldInfo
  function  AddProperty  // #docl  Комментарии отсутствуют. </brief> 
                          ( name // #docl Тип параметра: входной.
                          : string ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  AddMethod  // #docl  Комментарии отсутствуют. </brief> 
                        ( name // #docl Тип параметра: входной.
                        : string; Method // #docl Тип параметра: входной.
                        : com_Delegate ) : com_MethodInfo; // #docl Результат типа com_MethodInfo
  procedure RemoveMember  // #docl  Комментарии отсутствуют. </brief> 
                           ( m // #docl Тип параметра: входной.
                           : com_MemberInfo );
end;

VipInterface vcomIExpando( vcomIDispatch ) Implements comIExpando (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIPermission( comIDispatch );
// #docl Объектный интерфейс comIPermission </brief>
  function  Copy  // #docl  Комментарии отсутствуют. </brief> 
                   : comIPermission; // #docl Результат типа comIPermission
  function  Intersect  // #docl  Комментарии отсутствуют. </brief> 
                        ( Target // #docl Тип параметра: входной.
                        : comIPermission ) : comIPermission; // #docl Результат типа comIPermission
  function  Union  // #docl  Комментарии отсутствуют. </brief> 
                    ( Target // #docl Тип параметра: входной.
                    : comIPermission ) : comIPermission; // #docl Результат типа comIPermission
  function  IsSubsetOf  // #docl  Комментарии отсутствуют. </brief> 
                         ( Target // #docl Тип параметра: входной.
                         : comIPermission ) : boolean; // #docl Результат типа boolean
  procedure Demand  // #docl  Комментарии отсутствуют. </brief> 
                    ;
end;

VipInterface vcomIPermission( vcomIDispatch ) Implements comIPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIStackWalk( comIDispatch );
// #docl Объектный интерфейс comIStackWalk </brief>
  procedure Assert  // #docl  Комментарии отсутствуют. </brief> 
                    ;
  procedure Demand  // #docl  Комментарии отсутствуют. </brief> 
                    ;
  procedure Deny  // #docl  Комментарии отсутствуют. </brief> 
                  ;
  procedure PermitOnly  // #docl  Комментарии отсутствуют. </brief> 
                        ;
end;

VipInterface vcomIStackWalk( vcomIDispatch ) Implements comIStackWalk (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIUnrestrictedPermission( comIDispatch );
// #docl Объектный интерфейс comIUnrestrictedPermission </brief>
  function  IsUnrestricted  // #docl  Комментарии отсутствуют. </brief> 
                             : boolean; // #docl Результат типа boolean
end;

VipInterface vcomIUnrestrictedPermission( vcomIDispatch ) Implements comIUnrestrictedPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIContextAttribute( comIDispatch );
// #docl Объектный интерфейс comIContextAttribute </brief>
  function  IsContextOK  // #docl  Комментарии отсутствуют. </brief> 
                          ( ctx // #docl Тип параметра: входной.
                          : com_Context; msg // #docl Тип параметра: входной.
                          : comIConstructionCallMessage ) : boolean; // #docl Результат типа boolean
  procedure GetPropertiesForNewContext  // #docl  Комментарии отсутствуют. </brief> 
                                         ( msg // #docl Тип параметра: входной.
                                         : comIConstructionCallMessage );
end;

VipInterface vcomIContextAttribute( vcomIDispatch ) Implements comIContextAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIContextProperty( comIDispatch );
// #docl Объектный интерфейс comIContextProperty </brief>
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
  function  IsNewContextOK  // #docl  Комментарии отсутствуют. </brief> 
                             ( newCtx // #docl Тип параметра: входной.
                             : com_Context ) : boolean; // #docl Результат типа boolean
  procedure Freeze  // #docl  Комментарии отсутствуют. </brief> 
                     ( newContext // #docl Тип параметра: входной.
                     : com_Context );
end;

VipInterface vcomIContextProperty( vcomIDispatch ) Implements comIContextProperty (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIActivator( comIDispatch );
// #docl Объектный интерфейс comIActivator </brief>
  property  NextActivator// #docl Дополнительная документация отсутствует. </brief>
                          : comIActivator Read Write;
  function  Activate  // #docl  Комментарии отсутствуют. </brief> 
                       ( msg // #docl Тип параметра: входной.
                       : comIConstructionCallMessage ) : comIConstructionReturnMessage; // #docl Результат типа comIConstructionReturnMessage
  property  level// #docl Дополнительная документация отсутствует. </brief>
                  : ActivatorLevel Read;
end;

VipInterface vcomIActivator( vcomIDispatch ) Implements comIActivator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIMessageSink( comIDispatch );
// #docl Объектный интерфейс comIMessageSink </brief>
  function  SyncProcessMessage  // #docl  Комментарии отсутствуют. </brief> 
                                 ( msg // #docl Тип параметра: входной.
                                 : comIMessage ) : comIMessage; // #docl Результат типа comIMessage
  function  AsyncProcessMessage  // #docl  Комментарии отсутствуют. </brief> 
                                  ( msg // #docl Тип параметра: входной.
                                  : comIMessage; replySink // #docl Тип параметра: входной.
                                  : comIMessageSink ) : comIMessageCtrl; // #docl Результат типа comIMessageCtrl
  property  NextSink// #docl Дополнительная документация отсутствует. </brief>
                     : comIMessageSink Read;
end;

VipInterface vcomIMessageSink( vcomIDispatch ) Implements comIMessageSink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIClientResponseChannelSinkStack( comIDispatch );
// #docl Объектный интерфейс comIClientResponseChannelSinkStack </brief>
  procedure AsyncProcessResponse  // #docl  Комментарии отсутствуют. </brief> 
                                   ( headers // #docl Тип параметра: входной.
                                   : comITransportHeaders; Stream // #docl Тип параметра: входной.
                                   : com_Stream );
  procedure DispatchReplyMessage  // #docl  Комментарии отсутствуют. </brief> 
                                   ( msg // #docl Тип параметра: входной.
                                   : comIMessage );
  procedure DispatchException  // #docl  Комментарии отсутствуют. </brief> 
                                ( e // #docl Тип параметра: входной.
                                : com_Exception );
end;

VipInterface vcomIClientResponseChannelSinkStack( vcomIDispatch ) Implements comIClientResponseChannelSinkStack (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIClientChannelSinkStack( comIDispatch );
// #docl Объектный интерфейс comIClientChannelSinkStack </brief>
  procedure Push  // #docl  Комментарии отсутствуют. </brief> 
                   ( sink // #docl Тип параметра: входной.
                   : comIClientChannelSink; state // #docl Тип параметра: входной.
                   : VARIANT );
  function  Pop  // #docl  Комментарии отсутствуют. </brief> 
                  ( sink // #docl Тип параметра: входной.
                  : comIClientChannelSink ) : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcomIClientChannelSinkStack( vcomIDispatch ) Implements comIClientChannelSinkStack (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIServerResponseChannelSinkStack( comIDispatch );
// #docl Объектный интерфейс comIServerResponseChannelSinkStack </brief>
  procedure AsyncProcessResponse  // #docl  Комментарии отсутствуют. </brief> 
                                   ( msg // #docl Тип параметра: входной.
                                   : comIMessage; headers // #docl Тип параметра: входной.
                                   : comITransportHeaders; Stream // #docl Тип параметра: входной.
                                   : com_Stream );
  function  GetResponseStream  // #docl  Комментарии отсутствуют. </brief> 
                                ( msg // #docl Тип параметра: входной.
                                : comIMessage; headers // #docl Тип параметра: входной.
                                : comITransportHeaders ) : com_Stream; // #docl Результат типа com_Stream
end;

VipInterface vcomIServerResponseChannelSinkStack( vcomIDispatch ) Implements comIServerResponseChannelSinkStack (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIServerChannelSinkStack( comIDispatch );
// #docl Объектный интерфейс comIServerChannelSinkStack </brief>
  procedure Push  // #docl  Комментарии отсутствуют. </brief> 
                   ( sink // #docl Тип параметра: входной.
                   : comIServerChannelSink; state // #docl Тип параметра: входной.
                   : VARIANT );
  function  Pop  // #docl  Комментарии отсутствуют. </brief> 
                  ( sink // #docl Тип параметра: входной.
                  : comIServerChannelSink ) : VARIANT; // #docl Результат типа VARIANT
  procedure Store  // #docl  Комментарии отсутствуют. </brief> 
                    ( sink // #docl Тип параметра: входной.
                    : comIServerChannelSink; state // #docl Тип параметра: входной.
                    : VARIANT );
  procedure StoreAndDispatch  // #docl  Комментарии отсутствуют. </brief> 
                               ( sink // #docl Тип параметра: входной.
                               : comIServerChannelSink; state // #docl Тип параметра: входной.
                               : VARIANT );
  procedure ServerCallback  // #docl  Комментарии отсутствуют. </brief> 
                             ( ar // #docl Тип параметра: входной.
                             : comIAsyncResult );
end;

VipInterface vcomIServerChannelSinkStack( vcomIDispatch ) Implements comIServerChannelSinkStack (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISponsor( comIDispatch );
// #docl Объектный интерфейс comISponsor </brief>
  function  Renewal  // #docl  Комментарии отсутствуют. </brief> 
                      ( lease // #docl Тип параметра: входной.
                      : comILease ) : TimeSpan; // #docl Результат типа TimeSpan
end;

VipInterface vcomISponsor( vcomIDispatch ) Implements comISponsor (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIContextPropertyActivator( comIDispatch );
// #docl Объектный интерфейс comIContextPropertyActivator </brief>
  function  IsOKToActivate  // #docl  Комментарии отсутствуют. </brief> 
                             ( msg // #docl Тип параметра: входной.
                             : comIConstructionCallMessage ) : boolean; // #docl Результат типа boolean
  procedure CollectFromClientContext  // #docl  Комментарии отсутствуют. </brief> 
                                       ( msg // #docl Тип параметра: входной.
                                       : comIConstructionCallMessage );
  function  DeliverClientContextToServerContext  // #docl  Комментарии отсутствуют. </brief> 
                                                  ( msg // #docl Тип параметра: входной.
                                                  : comIConstructionCallMessage ) : boolean; // #docl Результат типа boolean
  procedure CollectFromServerContext  // #docl  Комментарии отсутствуют. </brief> 
                                       ( msg // #docl Тип параметра: входной.
                                       : comIConstructionReturnMessage );
  function  DeliverServerContextToClientContext  // #docl  Комментарии отсутствуют. </brief> 
                                                  ( msg // #docl Тип параметра: входной.
                                                  : comIConstructionReturnMessage ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcomIContextPropertyActivator( vcomIDispatch ) Implements comIContextPropertyActivator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChannel( comIDispatch );
// #docl Объектный интерфейс comIChannel </brief>
  property  ChannelPriority// #docl Дополнительная документация отсутствует. </brief>
                            : longint Read;
  property  ChannelName// #docl Дополнительная документация отсутствует. </brief>
                        : string Read;
  function  Parse  // #docl  Комментарии отсутствуют. </brief> 
                    ( Url // #docl Тип параметра: входной.
                    : string; var objectURI // #docl Тип параметра: выходной.
                    : string ) : string; // #docl Результат типа string
end;

VipInterface vcomIChannel( vcomIDispatch ) Implements comIChannel (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChannelSender( comIDispatch );
// #docl Объектный интерфейс comIChannelSender </brief>
  function  CreateMessageSink  // #docl  Комментарии отсутствуют. </brief> 
                                ( Url // #docl Тип параметра: входной.
                                : string; remoteChannelData // #docl Тип параметра: входной.
                                : VARIANT; var objectURI // #docl Тип параметра: выходной.
                                : string ) : comIMessageSink; // #docl Результат типа comIMessageSink
end;

VipInterface vcomIChannelSender( vcomIDispatch ) Implements comIChannelSender (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChannelReceiver( comIDispatch );
// #docl Объектный интерфейс comIChannelReceiver </brief>
  property  ChannelData// #docl Дополнительная документация отсутствует. </brief>
                        : VARIANT Read;
  function  GetUrlsForUri  // #docl  Комментарии отсутствуют. </brief> 
                            ( objectURI // #docl Тип параметра: входной.
                            : string ) : ArrayOfstring; // #docl Результат типа ArrayOfstring
  procedure StartListening  // #docl  Комментарии отсутствуют. </brief> 
                             ( data // #docl Тип параметра: входной.
                             : VARIANT );
  procedure StopListening  // #docl  Комментарии отсутствуют. </brief> 
                            ( data // #docl Тип параметра: входной.
                            : VARIANT );
end;

VipInterface vcomIChannelReceiver( vcomIDispatch ) Implements comIChannelReceiver (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIServerChannelSinkProvider( comIDispatch );
// #docl Объектный интерфейс comIServerChannelSinkProvider </brief>
  procedure GetChannelData  // #docl  Комментарии отсутствуют. </brief> 
                             ( ChannelData // #docl Тип параметра: входной.
                             : comIChannelDataStore );
  function  CreateSink  // #docl  Комментарии отсутствуют. </brief> 
                         ( channel // #docl Тип параметра: входной.
                         : comIChannelReceiver ) : comIServerChannelSink; // #docl Результат типа comIServerChannelSink
  property  Next// #docl Дополнительная документация отсутствует. </brief>
                 : comIServerChannelSinkProvider Read Write;
end;

VipInterface vcomIServerChannelSinkProvider( vcomIDispatch ) Implements comIServerChannelSinkProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChannelSinkBase( comIDispatch );
// #docl Объектный интерфейс comIChannelSinkBase </brief>
  property  Properties// #docl Дополнительная документация отсутствует. </brief>
                       : comIDictionary Read;
end;

VipInterface vcomIChannelSinkBase( vcomIDispatch ) Implements comIChannelSinkBase (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIServerChannelSink( comIDispatch );
// #docl Объектный интерфейс comIServerChannelSink </brief>
  function  ProcessMessage  // #docl  Комментарии отсутствуют. </brief> 
                             ( sinkStack // #docl Тип параметра: входной.
                             : comIServerChannelSinkStack; requestMsg // #docl Тип параметра: входной.
                             : comIMessage; requestHeaders // #docl Тип параметра: входной.
                             : comITransportHeaders; requestStream // #docl Тип параметра: входной.
                             : com_Stream; var responseMsg // #docl Тип параметра: выходной.
                             : comIMessage; var responseHeaders // #docl Тип параметра: выходной.
                             : comITransportHeaders; var responseStream // #docl Тип параметра: выходной.
                             : com_Stream ) : ServerProcessing; // #docl Результат типа ServerProcessing
  procedure AsyncProcessResponse  // #docl  Комментарии отсутствуют. </brief> 
                                   ( sinkStack // #docl Тип параметра: входной.
                                   : comIServerResponseChannelSinkStack; state // #docl Тип параметра: входной.
                                   : VARIANT; msg // #docl Тип параметра: входной.
                                   : comIMessage; headers // #docl Тип параметра: входной.
                                   : comITransportHeaders; Stream // #docl Тип параметра: входной.
                                   : com_Stream );
  function  GetResponseStream  // #docl  Комментарии отсутствуют. </brief> 
                                ( sinkStack // #docl Тип параметра: входной.
                                : comIServerResponseChannelSinkStack; state // #docl Тип параметра: входной.
                                : VARIANT; msg // #docl Тип параметра: входной.
                                : comIMessage; headers // #docl Тип параметра: входной.
                                : comITransportHeaders ) : com_Stream; // #docl Результат типа com_Stream
  property  NextChannelSink// #docl Дополнительная документация отсутствует. </brief>
                            : comIServerChannelSink Read;
end;

VipInterface vcomIServerChannelSink( vcomIDispatch ) Implements comIServerChannelSink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIMessage( comIDispatch );
// #docl Объектный интерфейс comIMessage </brief>
  property  Properties// #docl Дополнительная документация отсутствует. </brief>
                       : comIDictionary Read;
end;

VipInterface vcomIMessage( vcomIDispatch ) Implements comIMessage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIMethodMessage( comIDispatch );
// #docl Объектный интерфейс comIMethodMessage </brief>
  property  Uri// #docl Дополнительная документация отсутствует. </brief>
                : string Read;
  property  MethodName// #docl Дополнительная документация отсутствует. </brief>
                       : string Read;
  property  typeName// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  property  MethodSignature// #docl Дополнительная документация отсутствует. </brief>
                            : VARIANT Read;
  property  ArgCount// #docl Дополнительная документация отсутствует. </brief>
                     : longint Read;
  function  GetArgName  // #docl  Комментарии отсутствуют. </brief> 
                         ( aindex // #docl Тип параметра: входной.
                         : longint ) : string; // #docl Результат типа string
  function  GetArg  // #docl  Комментарии отсутствуют. </brief> 
                     ( argNum // #docl Тип параметра: входной.
                     : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  args// #docl Дополнительная документация отсутствует. </brief>
                 : ArrayOfVARIANT Read;
  property  HasVarArgs// #docl Дополнительная документация отсутствует. </brief>
                       : boolean Read;
  property  LogicalCallContext// #docl Дополнительная документация отсутствует. </brief>
                               : com_LogicalCallContext Read;
  property  MethodBase// #docl Дополнительная документация отсутствует. </brief>
                       : com_MethodBase Read;
end;

VipInterface vcomIMethodMessage( vcomIDispatch ) Implements comIMethodMessage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIMethodCallMessage( comIDispatch );
// #docl Объектный интерфейс comIMethodCallMessage </brief>
  property  InArgCount// #docl Дополнительная документация отсутствует. </brief>
                       : longint Read;
  function  GetInArgName  // #docl  Комментарии отсутствуют. </brief> 
                           ( aindex // #docl Тип параметра: входной.
                           : longint ) : string; // #docl Результат типа string
  function  GetInArg  // #docl  Комментарии отсутствуют. </brief> 
                       ( argNum // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  InArgs// #docl Дополнительная документация отсутствует. </brief>
                   : ArrayOfVARIANT Read;
end;

VipInterface vcomIMethodCallMessage( vcomIDispatch ) Implements comIMethodCallMessage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIConstructionCallMessage( comIDispatch );
// #docl Объектный интерфейс comIConstructionCallMessage </brief>
  property  Activator// #docl Дополнительная документация отсутствует. </brief>
                      : comIActivator Read Write;
  property  CallSiteActivationAttributes// #docl Дополнительная документация отсутствует. </brief>
                                         : ArrayOfVARIANT Read;
  property  ActivationTypeName// #docl Дополнительная документация отсутствует. </brief>
                               : string Read;
  property  ActivationType// #docl Дополнительная документация отсутствует. </brief>
                           : com_Type Read;
  property  ContextProperties// #docl Дополнительная документация отсутствует. </brief>
                              : comIList Read;
end;

VipInterface vcomIConstructionCallMessage( vcomIDispatch ) Implements comIConstructionCallMessage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIMethodReturnMessage( comIDispatch );
// #docl Объектный интерфейс comIMethodReturnMessage </brief>
  property  OutArgCount// #docl Дополнительная документация отсутствует. </brief>
                        : longint Read;
  function  GetOutArgName  // #docl  Комментарии отсутствуют. </brief> 
                            ( aindex // #docl Тип параметра: входной.
                            : longint ) : string; // #docl Результат типа string
  function  GetOutArg  // #docl  Комментарии отсутствуют. </brief> 
                        ( argNum // #docl Тип параметра: входной.
                        : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  OutArgs// #docl Дополнительная документация отсутствует. </brief>
                    : ArrayOfVARIANT Read;
  property  __Exception// #docl Дополнительная документация отсутствует. </brief>
                        : com_Exception Read;
  property  ReturnValue// #docl Дополнительная документация отсутствует. </brief>
                        : VARIANT Read;
end;

VipInterface vcomIMethodReturnMessage( vcomIDispatch ) Implements comIMethodReturnMessage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIConstructionReturnMessage( comIDispatch );
// #docl Объектный интерфейс comIConstructionReturnMessage </brief>
end;

VipInterface vcomIConstructionReturnMessage( vcomIDispatch ) Implements comIConstructionReturnMessage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChannelReceiverHook( comIDispatch );
// #docl Объектный интерфейс comIChannelReceiverHook </brief>
  property  ChannelScheme// #docl Дополнительная документация отсутствует. </brief>
                          : string Read;
  property  WantsToListen// #docl Дополнительная документация отсутствует. </brief>
                          : boolean Read;
  property  ChannelSinkChain// #docl Дополнительная документация отсутствует. </brief>
                             : comIServerChannelSink Read;
  procedure AddHookChannelUri  // #docl  Комментарии отсутствуют. </brief> 
                                ( channelUri // #docl Тип параметра: входной.
                                : string );
end;

VipInterface vcomIChannelReceiverHook( vcomIDispatch ) Implements comIChannelReceiverHook (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIClientChannelSinkProvider( comIDispatch );
// #docl Объектный интерфейс comIClientChannelSinkProvider </brief>
  function  CreateSink  // #docl  Комментарии отсутствуют. </brief> 
                         ( channel // #docl Тип параметра: входной.
                         : comIChannelSender; Url // #docl Тип параметра: входной.
                         : string; remoteChannelData // #docl Тип параметра: входной.
                         : VARIANT ) : comIClientChannelSink; // #docl Результат типа comIClientChannelSink
  property  Next// #docl Дополнительная документация отсутствует. </brief>
                 : comIClientChannelSinkProvider Read Write;
end;

VipInterface vcomIClientChannelSinkProvider( vcomIDispatch ) Implements comIClientChannelSinkProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIClientFormatterSinkProvider( comIDispatch );
// #docl Объектный интерфейс comIClientFormatterSinkProvider </brief>
end;

VipInterface vcomIClientFormatterSinkProvider( vcomIDispatch ) Implements comIClientFormatterSinkProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIServerFormatterSinkProvider( comIDispatch );
// #docl Объектный интерфейс comIServerFormatterSinkProvider </brief>
end;

VipInterface vcomIServerFormatterSinkProvider( vcomIDispatch ) Implements comIServerFormatterSinkProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIClientChannelSink( comIDispatch );
// #docl Объектный интерфейс comIClientChannelSink </brief>
  procedure ProcessMessage  // #docl  Комментарии отсутствуют. </brief> 
                             ( msg // #docl Тип параметра: входной.
                             : comIMessage; requestHeaders // #docl Тип параметра: входной.
                             : comITransportHeaders; requestStream // #docl Тип параметра: входной.
                             : com_Stream; var responseHeaders // #docl Тип параметра: выходной.
                             : comITransportHeaders; var responseStream // #docl Тип параметра: выходной.
                             : com_Stream );
  procedure AsyncProcessRequest  // #docl  Комментарии отсутствуют. </brief> 
                                  ( sinkStack // #docl Тип параметра: входной.
                                  : comIClientChannelSinkStack; msg // #docl Тип параметра: входной.
                                  : comIMessage; headers // #docl Тип параметра: входной.
                                  : comITransportHeaders; Stream // #docl Тип параметра: входной.
                                  : com_Stream );
  procedure AsyncProcessResponse  // #docl  Комментарии отсутствуют. </brief> 
                                   ( sinkStack // #docl Тип параметра: входной.
                                   : comIClientResponseChannelSinkStack; state // #docl Тип параметра: входной.
                                   : VARIANT; headers // #docl Тип параметра: входной.
                                   : comITransportHeaders; Stream // #docl Тип параметра: входной.
                                   : com_Stream );
  function  GetRequestStream  // #docl  Комментарии отсутствуют. </brief> 
                               ( msg // #docl Тип параметра: входной.
                               : comIMessage; headers // #docl Тип параметра: входной.
                               : comITransportHeaders ) : com_Stream; // #docl Результат типа com_Stream
  property  NextChannelSink// #docl Дополнительная документация отсутствует. </brief>
                            : comIClientChannelSink Read;
end;

VipInterface vcomIClientChannelSink( vcomIDispatch ) Implements comIClientChannelSink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIClientFormatterSink( comIDispatch );
// #docl Объектный интерфейс comIClientFormatterSink </brief>
end;

VipInterface vcomIClientFormatterSink( vcomIDispatch ) Implements comIClientFormatterSink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChannelDataStore( comIDispatch );
// #docl Объектный интерфейс comIChannelDataStore </brief>
  property  ChannelUris// #docl Дополнительная документация отсутствует. </brief>
                        : ArrayOfstring Read;
  function  Get_Item  // #docl  Комментарии отсутствуют. </brief> 
                       ( key // #docl Тип параметра: входной.
                       : VARIANT ) : VARIANT; // #docl Результат типа VARIANT
  procedure Set_Item  // #docl  Комментарии отсутствуют. </brief> 
                       ( key // #docl Тип параметра: входной.
                       : VARIANT; pRetVal // #docl Тип параметра: входной.
                       : VARIANT );
end;

VipInterface vcomIChannelDataStore( vcomIDispatch ) Implements comIChannelDataStore (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comITransportHeaders( comIDispatch );
// #docl Объектный интерфейс comITransportHeaders </brief>
  function  Get_Item  // #docl  Комментарии отсутствуют. </brief> 
                       ( key // #docl Тип параметра: входной.
                       : VARIANT ) : VARIANT; // #docl Результат типа VARIANT
  procedure Set_Item  // #docl  Комментарии отсутствуют. </brief> 
                       ( key // #docl Тип параметра: входной.
                       : VARIANT; pRetVal // #docl Тип параметра: входной.
                       : VARIANT );
  function  GetEnumerator  // #docl  Комментарии отсутствуют. </brief> 
                            : comIEnumVARIANT; // #docl Результат типа comIEnumVARIANT
end;

VipInterface vcomITransportHeaders( vcomIDispatch ) Implements comITransportHeaders (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIContributeClientContextSink( comIDispatch );
// #docl Объектный интерфейс comIContributeClientContextSink </brief>
  function  GetClientContextSink  // #docl  Комментарии отсутствуют. </brief> 
                                   ( NextSink // #docl Тип параметра: входной.
                                   : comIMessageSink ) : comIMessageSink; // #docl Результат типа comIMessageSink
end;

VipInterface vcomIContributeClientContextSink( vcomIDispatch ) Implements comIContributeClientContextSink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIContributeDynamicSink( comIDispatch );
// #docl Объектный интерфейс comIContributeDynamicSink </brief>
  function  GetDynamicSink  // #docl  Комментарии отсутствуют. </brief> 
                             : comIDynamicMessageSink; // #docl Результат типа comIDynamicMessageSink
end;

VipInterface vcomIContributeDynamicSink( vcomIDispatch ) Implements comIContributeDynamicSink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIContributeEnvoySink( comIDispatch );
// #docl Объектный интерфейс comIContributeEnvoySink </brief>
  function  GetEnvoySink  // #docl  Комментарии отсутствуют. </brief> 
                           ( obj // #docl Тип параметра: входной.
                           : com_MarshalByRefObject; NextSink // #docl Тип параметра: входной.
                           : comIMessageSink ) : comIMessageSink; // #docl Результат типа comIMessageSink
end;

VipInterface vcomIContributeEnvoySink( vcomIDispatch ) Implements comIContributeEnvoySink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIContributeObjectSink( comIDispatch );
// #docl Объектный интерфейс comIContributeObjectSink </brief>
  function  GetObjectSink  // #docl  Комментарии отсутствуют. </brief> 
                            ( obj // #docl Тип параметра: входной.
                            : com_MarshalByRefObject; NextSink // #docl Тип параметра: входной.
                            : comIMessageSink ) : comIMessageSink; // #docl Результат типа comIMessageSink
end;

VipInterface vcomIContributeObjectSink( vcomIDispatch ) Implements comIContributeObjectSink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIContributeServerContextSink( comIDispatch );
// #docl Объектный интерфейс comIContributeServerContextSink </brief>
  function  GetServerContextSink  // #docl  Комментарии отсутствуют. </brief> 
                                   ( NextSink // #docl Тип параметра: входной.
                                   : comIMessageSink ) : comIMessageSink; // #docl Результат типа comIMessageSink
end;

VipInterface vcomIContributeServerContextSink( vcomIDispatch ) Implements comIContributeServerContextSink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIDynamicProperty( comIDispatch );
// #docl Объектный интерфейс comIDynamicProperty </brief>
  property  name// #docl Дополнительная документация отсутствует. </brief>
                 : string Read;
end;

VipInterface vcomIDynamicProperty( vcomIDispatch ) Implements comIDynamicProperty (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIDynamicMessageSink( comIDispatch );
// #docl Объектный интерфейс comIDynamicMessageSink </brief>
  procedure ProcessMessageStart  // #docl  Комментарии отсутствуют. </brief> 
                                  ( reqMsg // #docl Тип параметра: входной.
                                  : comIMessage; bCliSide // #docl Тип параметра: входной.
                                  : boolean; bAsync // #docl Тип параметра: входной.
                                  : boolean );
  procedure ProcessMessageFinish  // #docl  Комментарии отсутствуют. </brief> 
                                   ( replyMsg // #docl Тип параметра: входной.
                                   : comIMessage; bCliSide // #docl Тип параметра: входной.
                                   : boolean; bAsync // #docl Тип параметра: входной.
                                   : boolean );
end;

VipInterface vcomIDynamicMessageSink( vcomIDispatch ) Implements comIDynamicMessageSink (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comILease( comIDispatch );
// #docl Объектный интерфейс comILease </brief>
  procedure Register  // #docl  Комментарии отсутствуют. </brief> 
                       ( obj // #docl Тип параметра: входной.
                       : comISponsor; renewalTime // #docl Тип параметра: входной.
                       : TimeSpan );
  procedure Register_2  // #docl  Комментарии отсутствуют. </brief> 
                         ( obj // #docl Тип параметра: входной.
                         : comISponsor );
  procedure Unregister  // #docl  Комментарии отсутствуют. </brief> 
                         ( obj // #docl Тип параметра: входной.
                         : comISponsor );
  function  Renew  // #docl  Комментарии отсутствуют. </brief> 
                    ( renewalTime // #docl Тип параметра: входной.
                    : TimeSpan ) : TimeSpan; // #docl Результат типа TimeSpan
  property  RenewOnCallTime// #docl Дополнительная документация отсутствует. </brief>
                            : TimeSpan Read Write;
  property  SponsorshipTimeout// #docl Дополнительная документация отсутствует. </brief>
                               : TimeSpan Read Write;
  property  InitialLeaseTime// #docl Дополнительная документация отсутствует. </brief>
                             : TimeSpan Read Write;
  property  CurrentLeaseTime// #docl Дополнительная документация отсутствует. </brief>
                             : TimeSpan Read;
  property  CurrentState// #docl Дополнительная документация отсутствует. </brief>
                         : LeaseState Read;
end;

VipInterface vcomILease( vcomIDispatch ) Implements comILease (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIMessageCtrl( comIDispatch );
// #docl Объектный интерфейс comIMessageCtrl </brief>
  procedure Cancel  // #docl  Комментарии отсутствуют. </brief> 
                     ( msToCancel // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcomIMessageCtrl( vcomIDispatch ) Implements comIMessageCtrl (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIRemotingFormatter( comIDispatch );
// #docl Объектный интерфейс comIRemotingFormatter </brief>
  function  Deserialize  // #docl  Комментарии отсутствуют. </brief> 
                          ( serializationStream // #docl Тип параметра: входной.
                          : com_Stream; handler // #docl Тип параметра: входной.
                          : com_HeaderHandler ) : VARIANT; // #docl Результат типа VARIANT
  procedure Serialize  // #docl  Комментарии отсутствуют. </brief> 
                        ( serializationStream // #docl Тип параметра: входной.
                        : com_Stream; graph // #docl Тип параметра: входной.
                        : VARIANT; headers // #docl Тип параметра: входной.
                        : ArrayOfcom_Header );
end;

VipInterface vcomIRemotingFormatter( vcomIDispatch ) Implements comIRemotingFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIFieldInfo( comIDispatch );
// #docl Объектный интерфейс comIFieldInfo </brief>
  property  FieldNames// #docl Дополнительная документация отсутствует. </brief>
                       : ArrayOfstring Read Write;
  property  FieldTypes// #docl Дополнительная документация отсутствует. </brief>
                       : ArrayOfcom_Type Read Write;
end;

VipInterface vcomIFieldInfo( vcomIDispatch ) Implements comIFieldInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIRemotingTypeInfo( comIDispatch );
// #docl Объектный интерфейс comIRemotingTypeInfo </brief>
  property  typeName// #docl Дополнительная документация отсутствует. </brief>
                     : string Read Write;
  function  CanCastTo  // #docl  Комментарии отсутствуют. </brief> 
                        ( fromType // #docl Тип параметра: входной.
                        : com_Type; o // #docl Тип параметра: входной.
                        : VARIANT ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcomIRemotingTypeInfo( vcomIDispatch ) Implements comIRemotingTypeInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChannelInfo( comIDispatch );
// #docl Объектный интерфейс comIChannelInfo </brief>
  property  ChannelData// #docl Дополнительная документация отсутствует. </brief>
                        : ArrayOfVARIANT Read Write;
end;

VipInterface vcomIChannelInfo( vcomIDispatch ) Implements comIChannelInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEnvoyInfo( comIDispatch );
// #docl Объектный интерфейс comIEnvoyInfo </brief>
  property  EnvoySinks// #docl Дополнительная документация отсутствует. </brief>
                       : comIMessageSink Read Write;
end;

VipInterface vcomIEnvoyInfo( vcomIDispatch ) Implements comIEnvoyInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISoapXsd( comIDispatch );
// #docl Объектный интерфейс comISoapXsd </brief>
  function  GetXsdType  // #docl  Комментарии отсутствуют. </brief> 
                         : string; // #docl Результат типа string
end;

VipInterface vcomISoapXsd( vcomIDispatch ) Implements comISoapXsd (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comITrackingHandler( comIDispatch );
// #docl Объектный интерфейс comITrackingHandler </brief>
  procedure MarshaledObject  // #docl  Комментарии отсутствуют. </brief> 
                              ( obj // #docl Тип параметра: входной.
                              : VARIANT; aor // #docl Тип параметра: входной.
                              : com_ObjRef );
  procedure UnmarshaledObject  // #docl  Комментарии отсутствуют. </brief> 
                                ( obj // #docl Тип параметра: входной.
                                : VARIANT; aor // #docl Тип параметра: входной.
                                : com_ObjRef );
  procedure DisconnectedObject  // #docl  Комментарии отсутствуют. </brief> 
                                 ( obj // #docl Тип параметра: входной.
                                 : VARIANT );
end;

VipInterface vcomITrackingHandler( vcomIDispatch ) Implements comITrackingHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comILogicalThreadAffinative( comIDispatch );
// #docl Объектный интерфейс comILogicalThreadAffinative </brief>
end;

VipInterface vcomILogicalThreadAffinative( vcomIDispatch ) Implements comILogicalThreadAffinative (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comINormalizeForIsolatedStorage( comIDispatch );
// #docl Объектный интерфейс comINormalizeForIsolatedStorage </brief>
  function  Normalize  // #docl  Комментарии отсутствуют. </brief> 
                        : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcomINormalizeForIsolatedStorage( vcomIDispatch ) Implements comINormalizeForIsolatedStorage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISoapMessage( comIDispatch );
// #docl Объектный интерфейс comISoapMessage </brief>
  property  ParamNames// #docl Дополнительная документация отсутствует. </brief>
                       : ArrayOfstring Read Write;
  property  ParamValues// #docl Дополнительная документация отсутствует. </brief>
                        : ArrayOfVARIANT Read Write;
  property  ParamTypes// #docl Дополнительная документация отсутствует. </brief>
                       : ArrayOfcom_Type Read Write;
  property  MethodName// #docl Дополнительная документация отсутствует. </brief>
                       : string Read Write;
  property  XmlNameSpace// #docl Дополнительная документация отсутствует. </brief>
                         : string Read Write;
  property  headers// #docl Дополнительная документация отсутствует. </brief>
                    : ArrayOfcom_Header Read Write;
end;

VipInterface vcomISoapMessage( vcomIDispatch ) Implements comISoapMessage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyBuilder( comIUnknown );
// #docl Объектный интерфейс com_AssemblyBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_AssemblyBuilder( vcomIUnknown ) Implements com_AssemblyBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ConstructorBuilder( comIUnknown );
// #docl Объектный интерфейс com_ConstructorBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_ConstructorBuilder( vcomIUnknown ) Implements com_ConstructorBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CustomAttributeBuilder( comIUnknown );
// #docl Объектный интерфейс com_CustomAttributeBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_CustomAttributeBuilder( vcomIUnknown ) Implements com_CustomAttributeBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EnumBuilder( comIUnknown );
// #docl Объектный интерфейс com_EnumBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_EnumBuilder( vcomIUnknown ) Implements com_EnumBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EventBuilder( comIUnknown );
// #docl Объектный интерфейс com_EventBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_EventBuilder( vcomIUnknown ) Implements com_EventBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FieldBuilder( comIUnknown );
// #docl Объектный интерфейс com_FieldBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_FieldBuilder( vcomIUnknown ) Implements com_FieldBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ILGenerator( comIUnknown );
// #docl Объектный интерфейс com_ILGenerator </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_ILGenerator( vcomIUnknown ) Implements com_ILGenerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_LocalBuilder( comIUnknown );
// #docl Объектный интерфейс com_LocalBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_LocalBuilder( vcomIUnknown ) Implements com_LocalBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodBuilder( comIUnknown );
// #docl Объектный интерфейс com_MethodBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_MethodBuilder( vcomIUnknown ) Implements com_MethodBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodRental( comIUnknown );
// #docl Объектный интерфейс com_MethodRental </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_MethodRental( vcomIUnknown ) Implements com_MethodRental (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ModuleBuilder( comIUnknown );
// #docl Объектный интерфейс com_ModuleBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_ModuleBuilder( vcomIUnknown ) Implements com_ModuleBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ParameterBuilder( comIUnknown );
// #docl Объектный интерфейс com_ParameterBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_ParameterBuilder( vcomIUnknown ) Implements com_ParameterBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PropertyBuilder( comIUnknown );
// #docl Объектный интерфейс com_PropertyBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_PropertyBuilder( vcomIUnknown ) Implements com_PropertyBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SignatureHelper( comIUnknown );
// #docl Объектный интерфейс com_SignatureHelper </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_SignatureHelper( vcomIUnknown ) Implements com_SignatureHelper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeBuilder( comIUnknown );
// #docl Объектный интерфейс com_TypeBuilder </brief>
  procedure GetTypeInfoCount  // #docl  Комментарии отсутствуют. </brief> 
                               ( var pcTInfo // #docl Тип параметра: выходной.
                               : longint );
  procedure GetTypeInfo  // #docl  Комментарии отсутствуют. </brief> 
                          ( iTInfo // #docl Тип параметра: входной.
                          : longint; lcid // #docl Тип параметра: входной.
                          : longint; ppTInfo // #docl Тип параметра: входной.
                          : longint );
  procedure GetIDsOfNames  // #docl  Комментарии отсутствуют. </brief> 
                            ( riid // #docl Тип параметра: входной.
                            : GUID; rgszNames // #docl Тип параметра: входной.
                            : longint; cNames // #docl Тип параметра: входной.
                            : longint; lcid // #docl Тип параметра: входной.
                            : longint; rgDispId // #docl Тип параметра: входной.
                            : longint );
  procedure Invoke  // #docl  Комментарии отсутствуют. </brief> 
                     ( dispIdMember // #docl Тип параметра: входной.
                     : longint; riid // #docl Тип параметра: входной.
                     : GUID; lcid // #docl Тип параметра: входной.
                     : longint; wFlags // #docl Тип параметра: входной.
                     : integer; pDispParams // #docl Тип параметра: входной.
                     : longint; pVarResult // #docl Тип параметра: входной.
                     : longint; pExcepInfo // #docl Тип параметра: входной.
                     : longint; puArgErr // #docl Тип параметра: входной.
                     : longint );
end;

VipInterface vcom_TypeBuilder( vcomIUnknown ) Implements com_TypeBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICryptoTransform( comIDispatch );
// #docl Объектный интерфейс comICryptoTransform </brief>
  property  InputBlockSize// #docl Дополнительная документация отсутствует. </brief>
                           : longint Read;
  property  OutputBlockSize// #docl Дополнительная документация отсутствует. </brief>
                            : longint Read;
  property  CanTransformMultipleBlocks// #docl Дополнительная документация отсутствует. </brief>
                                       : boolean Read;
  property  CanReuseTransform// #docl Дополнительная документация отсутствует. </brief>
                              : boolean Read;
  function  TransformBlock  // #docl  Комментарии отсутствуют. </brief> 
                             ( inputBuffer // #docl Тип параметра: входной.
                             : ArrayOfchar; inputOffset // #docl Тип параметра: входной.
                             : longint; inputCount // #docl Тип параметра: входной.
                             : longint; outputBuffer // #docl Тип параметра: входной.
                             : ArrayOfchar; outputOffset // #docl Тип параметра: входной.
                             : longint ) : longint; // #docl Результат типа longint
  function  TransformFinalBlock  // #docl  Комментарии отсутствуют. </brief> 
                                  ( inputBuffer // #docl Тип параметра: входной.
                                  : ArrayOfchar; inputOffset // #docl Тип параметра: входной.
                                  : longint; inputCount // #docl Тип параметра: входной.
                                  : longint ) : ArrayOfchar; // #docl Результат типа ArrayOfchar
end;

VipInterface vcomICryptoTransform( vcomIDispatch ) Implements comICryptoTransform (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICspAsymmetricAlgorithm( comIDispatch );
// #docl Объектный интерфейс comICspAsymmetricAlgorithm </brief>
  property  CspKeyContainerInfo// #docl Дополнительная документация отсутствует. </brief>
                                : com_CspKeyContainerInfo Read;
  function  ExportCspBlob  // #docl  Комментарии отсутствуют. </brief> 
                            ( includePrivateParameters // #docl Тип параметра: входной.
                            : boolean ) : ArrayOfchar; // #docl Результат типа ArrayOfchar
  procedure ImportCspBlob  // #docl  Комментарии отсутствуют. </brief> 
                            ( rawData // #docl Тип параметра: входной.
                            : ArrayOfchar );
end;

VipInterface vcomICspAsymmetricAlgorithm( vcomIDispatch ) Implements comICspAsymmetricAlgorithm (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Object( comIDispatch );
// #docl Объектный интерфейс com_Object </brief>
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( obj // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
end;

VipInterface vcom_Object( vcomIDispatch ) Implements com_Object (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ValueType( comIDispatch );
// #docl Объектный интерфейс com_ValueType </brief>
end;

VipInterface vcom_ValueType( vcomIDispatch ) Implements com_ValueType (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Enum( comIDispatch );
// #docl Объектный интерфейс com_Enum </brief>
end;

VipInterface vcom_Enum( vcomIDispatch ) Implements com_Enum (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Delegate( comIDispatch );
// #docl Объектный интерфейс com_Delegate </brief>
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( obj // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  function  GetInvocationList  // #docl  Комментарии отсутствуют. </brief> 
                                : ArrayOfcom_Delegate; // #docl Результат типа ArrayOfcom_Delegate
  function  Clone  // #docl  Комментарии отсутствуют. </brief> 
                    : VARIANT; // #docl Результат типа VARIANT
  procedure GetObjectData  // #docl  Комментарии отсутствуют. </brief> 
                            ( info // #docl Тип параметра: входной.
                            : com_SerializationInfo; Context // #docl Тип параметра: входной.
                            : StreamingContext );
  function  DynamicInvoke  // #docl  Комментарии отсутствуют. </brief> 
                            ( args // #docl Тип параметра: входной.
                            : ArrayOfVARIANT ) : VARIANT; // #docl Результат типа VARIANT
  property  Method// #docl Дополнительная документация отсутствует. </brief>
                   : com_MethodInfo Read;
  property  Target// #docl Дополнительная документация отсутствует. </brief>
                   : VARIANT Read;
end;

VipInterface vcom_Delegate( vcomIDispatch ) Implements com_Delegate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MulticastDelegate( comIDispatch );
// #docl Объектный интерфейс com_MulticastDelegate </brief>
end;

VipInterface vcom_MulticastDelegate( vcomIDispatch ) Implements com_MulticastDelegate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Array( comIDispatch );
// #docl Объектный интерфейс com_Array </brief>
end;

VipInterface vcom_Array( vcomIDispatch ) Implements com_Array (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_String( comIDispatch );
// #docl Объектный интерфейс com_String </brief>
end;

VipInterface vcom_String( vcomIDispatch ) Implements com_String (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StringComparer( comIDispatch );
// #docl Объектный интерфейс com_StringComparer </brief>
end;

VipInterface vcom_StringComparer( vcomIDispatch ) Implements com_StringComparer (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StringBuilder( comIDispatch );
// #docl Объектный интерфейс com_StringBuilder </brief>
end;

VipInterface vcom_StringBuilder( vcomIDispatch ) Implements com_StringBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SystemException( comIDispatch );
// #docl Объектный интерфейс com_SystemException </brief>
end;

VipInterface vcom_SystemException( vcomIDispatch ) Implements com_SystemException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OutOfMemoryException( comIDispatch );
// #docl Объектный интерфейс com_OutOfMemoryException </brief>
end;

VipInterface vcom_OutOfMemoryException( vcomIDispatch ) Implements com_OutOfMemoryException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StackOverflowException( comIDispatch );
// #docl Объектный интерфейс com_StackOverflowException </brief>
end;

VipInterface vcom_StackOverflowException( vcomIDispatch ) Implements com_StackOverflowException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DataMisalignedException( comIDispatch );
// #docl Объектный интерфейс com_DataMisalignedException </brief>
end;

VipInterface vcom_DataMisalignedException( vcomIDispatch ) Implements com_DataMisalignedException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ExecutionEngineException( comIDispatch );
// #docl Объектный интерфейс com_ExecutionEngineException </brief>
end;

VipInterface vcom_ExecutionEngineException( vcomIDispatch ) Implements com_ExecutionEngineException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MemberAccessException( comIDispatch );
// #docl Объектный интерфейс com_MemberAccessException </brief>
end;

VipInterface vcom_MemberAccessException( vcomIDispatch ) Implements com_MemberAccessException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AccessViolationException( comIDispatch );
// #docl Объектный интерфейс com_AccessViolationException </brief>
end;

VipInterface vcom_AccessViolationException( vcomIDispatch ) Implements com_AccessViolationException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationActivator( comIDispatch );
// #docl Объектный интерфейс com_ApplicationActivator </brief>
end;

VipInterface vcom_ApplicationActivator( vcomIDispatch ) Implements com_ApplicationActivator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationException( comIDispatch );
// #docl Объектный интерфейс com_ApplicationException </brief>
end;

VipInterface vcom_ApplicationException( vcomIDispatch ) Implements com_ApplicationException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EventArgs( comIDispatch );
// #docl Объектный интерфейс com_EventArgs </brief>
end;

VipInterface vcom_EventArgs( vcomIDispatch ) Implements com_EventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ResolveEventArgs( comIDispatch );
// #docl Объектный интерфейс com_ResolveEventArgs </brief>
end;

VipInterface vcom_ResolveEventArgs( vcomIDispatch ) Implements com_ResolveEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyLoadEventArgs( comIDispatch );
// #docl Объектный интерфейс com_AssemblyLoadEventArgs </brief>
end;

VipInterface vcom_AssemblyLoadEventArgs( vcomIDispatch ) Implements com_AssemblyLoadEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ResolveEventHandler( comIDispatch );
// #docl Объектный интерфейс com_ResolveEventHandler </brief>
end;

VipInterface vcom_ResolveEventHandler( vcomIDispatch ) Implements com_ResolveEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyLoadEventHandler( comIDispatch );
// #docl Объектный интерфейс com_AssemblyLoadEventHandler </brief>
end;

VipInterface vcom_AssemblyLoadEventHandler( vcomIDispatch ) Implements com_AssemblyLoadEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AppDomainInitializer( comIDispatch );
// #docl Объектный интерфейс com_AppDomainInitializer </brief>
end;

VipInterface vcom_AppDomainInitializer( vcomIDispatch ) Implements com_AppDomainInitializer (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MarshalByRefObject( comIDispatch );
// #docl Объектный интерфейс com_MarshalByRefObject </brief>
end;

VipInterface vcom_MarshalByRefObject( vcomIDispatch ) Implements com_MarshalByRefObject (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CrossAppDomainDelegate( comIDispatch );
// #docl Объектный интерфейс com_CrossAppDomainDelegate </brief>
end;

VipInterface vcom_CrossAppDomainDelegate( vcomIDispatch ) Implements com_CrossAppDomainDelegate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AppDomainManager( comIDispatch );
// #docl Объектный интерфейс com_AppDomainManager </brief>
end;

VipInterface vcom_AppDomainManager( vcomIDispatch ) Implements com_AppDomainManager (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_LoaderOptimizationAttribute( comIDispatch );
// #docl Объектный интерфейс com_LoaderOptimizationAttribute </brief>
end;

VipInterface vcom_LoaderOptimizationAttribute( vcomIDispatch ) Implements com_LoaderOptimizationAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AppDomainUnloadedException( comIDispatch );
// #docl Объектный интерфейс com_AppDomainUnloadedException </brief>
end;

VipInterface vcom_AppDomainUnloadedException( vcomIDispatch ) Implements com_AppDomainUnloadedException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EvidenceBase( comIDispatch );
// #docl Объектный интерфейс com_EvidenceBase </brief>
end;

VipInterface vcom_EvidenceBase( vcomIDispatch ) Implements com_EvidenceBase (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ActivationArguments( comIDispatch );
// #docl Объектный интерфейс com_ActivationArguments </brief>
end;

VipInterface vcom_ActivationArguments( vcomIDispatch ) Implements com_ActivationArguments (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationId( comIDispatch );
// #docl Объектный интерфейс com_ApplicationId </brief>
end;

VipInterface vcom_ApplicationId( vcomIDispatch ) Implements com_ApplicationId (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ArgumentException( comIDispatch );
// #docl Объектный интерфейс com_ArgumentException </brief>
end;

VipInterface vcom_ArgumentException( vcomIDispatch ) Implements com_ArgumentException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ArgumentNullException( comIDispatch );
// #docl Объектный интерфейс com_ArgumentNullException </brief>
end;

VipInterface vcom_ArgumentNullException( vcomIDispatch ) Implements com_ArgumentNullException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ArgumentOutOfRangeException( comIDispatch );
// #docl Объектный интерфейс com_ArgumentOutOfRangeException </brief>
end;

VipInterface vcom_ArgumentOutOfRangeException( vcomIDispatch ) Implements com_ArgumentOutOfRangeException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ArithmeticException( comIDispatch );
// #docl Объектный интерфейс com_ArithmeticException </brief>
end;

VipInterface vcom_ArithmeticException( vcomIDispatch ) Implements com_ArithmeticException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ArrayTypeMismatchException( comIDispatch );
// #docl Объектный интерфейс com_ArrayTypeMismatchException </brief>
end;

VipInterface vcom_ArrayTypeMismatchException( vcomIDispatch ) Implements com_ArrayTypeMismatchException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AsyncCallback( comIDispatch );
// #docl Объектный интерфейс com_AsyncCallback </brief>
end;

VipInterface vcom_AsyncCallback( vcomIDispatch ) Implements com_AsyncCallback (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AttributeUsageAttribute( comIDispatch );
// #docl Объектный интерфейс com_AttributeUsageAttribute </brief>
end;

VipInterface vcom_AttributeUsageAttribute( vcomIDispatch ) Implements com_AttributeUsageAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BadImageFormatException( comIDispatch );
// #docl Объектный интерфейс com_BadImageFormatException </brief>
end;

VipInterface vcom_BadImageFormatException( vcomIDispatch ) Implements com_BadImageFormatException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Buffer( comIDispatch );
// #docl Объектный интерфейс com_Buffer </brief>
end;

VipInterface vcom_Buffer( vcomIDispatch ) Implements com_Buffer (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CannotUnloadAppDomainException( comIDispatch );
// #docl Объектный интерфейс com_CannotUnloadAppDomainException </brief>
end;

VipInterface vcom_CannotUnloadAppDomainException( vcomIDispatch ) Implements com_CannotUnloadAppDomainException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CharEnumerator( comIDispatch );
// #docl Объектный интерфейс com_CharEnumerator </brief>
end;

VipInterface vcom_CharEnumerator( vcomIDispatch ) Implements com_CharEnumerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CLSCompliantAttribute( comIDispatch );
// #docl Объектный интерфейс com_CLSCompliantAttribute </brief>
end;

VipInterface vcom_CLSCompliantAttribute( vcomIDispatch ) Implements com_CLSCompliantAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeUnloadedException( comIDispatch );
// #docl Объектный интерфейс com_TypeUnloadedException </brief>
end;

VipInterface vcom_TypeUnloadedException( vcomIDispatch ) Implements com_TypeUnloadedException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CriticalFinalizerObject( comIDispatch );
// #docl Объектный интерфейс com_CriticalFinalizerObject </brief>
end;

VipInterface vcom_CriticalFinalizerObject( vcomIDispatch ) Implements com_CriticalFinalizerObject (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ContextMarshalException( comIDispatch );
// #docl Объектный интерфейс com_ContextMarshalException </brief>
end;

VipInterface vcom_ContextMarshalException( vcomIDispatch ) Implements com_ContextMarshalException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ContextBoundObject( comIDispatch );
// #docl Объектный интерфейс com_ContextBoundObject </brief>
end;

VipInterface vcom_ContextBoundObject( vcomIDispatch ) Implements com_ContextBoundObject (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ContextStaticAttribute( comIDispatch );
// #docl Объектный интерфейс com_ContextStaticAttribute </brief>
end;

VipInterface vcom_ContextStaticAttribute( vcomIDispatch ) Implements com_ContextStaticAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TimeZone( comIDispatch );
// #docl Объектный интерфейс com_TimeZone </brief>
end;

VipInterface vcom_TimeZone( vcomIDispatch ) Implements com_TimeZone (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DBNull( comIDispatch );
// #docl Объектный интерфейс com_DBNull </brief>
end;

VipInterface vcom_DBNull( vcomIDispatch ) Implements com_DBNull (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Binder( comIDispatch );
// #docl Объектный интерфейс com_Binder </brief>
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( obj // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  function  BindToMethod  // #docl  Комментарии отсутствуют. </brief> 
                           ( bindingAttr // #docl Тип параметра: входной.
                           : BindingFlags; match // #docl Тип параметра: входной.
                           : ArrayOfcom_MethodBase; var args // #docl Тип параметра: входной и выходной.
                           : ArrayOfVARIANT; modifiers // #docl Тип параметра: входной.
                           : ArrayOfParameterModifier; culture // #docl Тип параметра: входной.
                           : com_CultureInfo; names // #docl Тип параметра: входной.
                           : ArrayOfstring; var state // #docl Тип параметра: выходной.
                           : VARIANT ) : com_MethodBase; // #docl Результат типа com_MethodBase
  function  BindToField  // #docl  Комментарии отсутствуют. </brief> 
                          ( bindingAttr // #docl Тип параметра: входной.
                          : BindingFlags; match // #docl Тип параметра: входной.
                          : ArrayOfcom_FieldInfo; value // #docl Тип параметра: входной.
                          : VARIANT; culture // #docl Тип параметра: входной.
                          : com_CultureInfo ) : com_FieldInfo; // #docl Результат типа com_FieldInfo
  function  SelectMethod  // #docl  Комментарии отсутствуют. </brief> 
                           ( bindingAttr // #docl Тип параметра: входной.
                           : BindingFlags; match // #docl Тип параметра: входной.
                           : ArrayOfcom_MethodBase; types // #docl Тип параметра: входной.
                           : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                           : ArrayOfParameterModifier ) : com_MethodBase; // #docl Результат типа com_MethodBase
  function  SelectProperty  // #docl  Комментарии отсутствуют. </brief> 
                             ( bindingAttr // #docl Тип параметра: входной.
                             : BindingFlags; match // #docl Тип параметра: входной.
                             : ArrayOfcom_PropertyInfo; returnType // #docl Тип параметра: входной.
                             : com_Type; indexes // #docl Тип параметра: входной.
                             : ArrayOfcom_Type; modifiers // #docl Тип параметра: входной.
                             : ArrayOfParameterModifier ) : com_PropertyInfo; // #docl Результат типа com_PropertyInfo
  function  ChangeType  // #docl  Комментарии отсутствуют. </brief> 
                         ( value // #docl Тип параметра: входной.
                         : VARIANT; aType // #docl Тип параметра: входной.
                         : com_Type; culture // #docl Тип параметра: входной.
                         : com_CultureInfo ) : VARIANT; // #docl Результат типа VARIANT
  procedure ReorderArgumentArray  // #docl  Комментарии отсутствуют. </brief> 
                                   ( var args // #docl Тип параметра: входной и выходной.
                                   : ArrayOfVARIANT; state // #docl Тип параметра: входной.
                                   : VARIANT );
end;

VipInterface vcom_Binder( vcomIDispatch ) Implements com_Binder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DivideByZeroException( comIDispatch );
// #docl Объектный интерфейс com_DivideByZeroException </brief>
end;

VipInterface vcom_DivideByZeroException( vcomIDispatch ) Implements com_DivideByZeroException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DuplicateWaitObjectException( comIDispatch );
// #docl Объектный интерфейс com_DuplicateWaitObjectException </brief>
end;

VipInterface vcom_DuplicateWaitObjectException( vcomIDispatch ) Implements com_DuplicateWaitObjectException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeLoadException( comIDispatch );
// #docl Объектный интерфейс com_TypeLoadException </brief>
end;

VipInterface vcom_TypeLoadException( vcomIDispatch ) Implements com_TypeLoadException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EntryPointNotFoundException( comIDispatch );
// #docl Объектный интерфейс com_EntryPointNotFoundException </brief>
end;

VipInterface vcom_EntryPointNotFoundException( vcomIDispatch ) Implements com_EntryPointNotFoundException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DllNotFoundException( comIDispatch );
// #docl Объектный интерфейс com_DllNotFoundException </brief>
end;

VipInterface vcom_DllNotFoundException( vcomIDispatch ) Implements com_DllNotFoundException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Environment( comIDispatch );
// #docl Объектный интерфейс com_Environment </brief>
end;

VipInterface vcom_Environment( vcomIDispatch ) Implements com_Environment (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EventHandler( comIDispatch );
// #docl Объектный интерфейс com_EventHandler </brief>
end;

VipInterface vcom_EventHandler( vcomIDispatch ) Implements com_EventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FieldAccessException( comIDispatch );
// #docl Объектный интерфейс com_FieldAccessException </brief>
end;

VipInterface vcom_FieldAccessException( vcomIDispatch ) Implements com_FieldAccessException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FlagsAttribute( comIDispatch );
// #docl Объектный интерфейс com_FlagsAttribute </brief>
end;

VipInterface vcom_FlagsAttribute( vcomIDispatch ) Implements com_FlagsAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FormatException( comIDispatch );
// #docl Объектный интерфейс com_FormatException </brief>
end;

VipInterface vcom_FormatException( vcomIDispatch ) Implements com_FormatException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IndexOutOfRangeException( comIDispatch );
// #docl Объектный интерфейс com_IndexOutOfRangeException </brief>
end;

VipInterface vcom_IndexOutOfRangeException( vcomIDispatch ) Implements com_IndexOutOfRangeException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InvalidCastException( comIDispatch );
// #docl Объектный интерфейс com_InvalidCastException </brief>
end;

VipInterface vcom_InvalidCastException( vcomIDispatch ) Implements com_InvalidCastException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InvalidOperationException( comIDispatch );
// #docl Объектный интерфейс com_InvalidOperationException </brief>
end;

VipInterface vcom_InvalidOperationException( vcomIDispatch ) Implements com_InvalidOperationException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InvalidProgramException( comIDispatch );
// #docl Объектный интерфейс com_InvalidProgramException </brief>
end;

VipInterface vcom_InvalidProgramException( vcomIDispatch ) Implements com_InvalidProgramException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_LocalDataStoreSlot( comIDispatch );
// #docl Объектный интерфейс com_LocalDataStoreSlot </brief>
end;

VipInterface vcom_LocalDataStoreSlot( vcomIDispatch ) Implements com_LocalDataStoreSlot (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodAccessException( comIDispatch );
// #docl Объектный интерфейс com_MethodAccessException </brief>
end;

VipInterface vcom_MethodAccessException( vcomIDispatch ) Implements com_MethodAccessException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MissingMemberException( comIDispatch );
// #docl Объектный интерфейс com_MissingMemberException </brief>
end;

VipInterface vcom_MissingMemberException( vcomIDispatch ) Implements com_MissingMemberException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MissingFieldException( comIDispatch );
// #docl Объектный интерфейс com_MissingFieldException </brief>
end;

VipInterface vcom_MissingFieldException( vcomIDispatch ) Implements com_MissingFieldException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MissingMethodException( comIDispatch );
// #docl Объектный интерфейс com_MissingMethodException </brief>
end;

VipInterface vcom_MissingMethodException( vcomIDispatch ) Implements com_MissingMethodException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MulticastNotSupportedException( comIDispatch );
// #docl Объектный интерфейс com_MulticastNotSupportedException </brief>
end;

VipInterface vcom_MulticastNotSupportedException( vcomIDispatch ) Implements com_MulticastNotSupportedException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NonSerializedAttribute( comIDispatch );
// #docl Объектный интерфейс com_NonSerializedAttribute </brief>
end;

VipInterface vcom_NonSerializedAttribute( vcomIDispatch ) Implements com_NonSerializedAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NotFiniteNumberException( comIDispatch );
// #docl Объектный интерфейс com_NotFiniteNumberException </brief>
end;

VipInterface vcom_NotFiniteNumberException( vcomIDispatch ) Implements com_NotFiniteNumberException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NotImplementedException( comIDispatch );
// #docl Объектный интерфейс com_NotImplementedException </brief>
end;

VipInterface vcom_NotImplementedException( vcomIDispatch ) Implements com_NotImplementedException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NotSupportedException( comIDispatch );
// #docl Объектный интерфейс com_NotSupportedException </brief>
end;

VipInterface vcom_NotSupportedException( vcomIDispatch ) Implements com_NotSupportedException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NullReferenceException( comIDispatch );
// #docl Объектный интерфейс com_NullReferenceException </brief>
end;

VipInterface vcom_NullReferenceException( vcomIDispatch ) Implements com_NullReferenceException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ObjectDisposedException( comIDispatch );
// #docl Объектный интерфейс com_ObjectDisposedException </brief>
end;

VipInterface vcom_ObjectDisposedException( vcomIDispatch ) Implements com_ObjectDisposedException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ObsoleteAttribute( comIDispatch );
// #docl Объектный интерфейс com_ObsoleteAttribute </brief>
end;

VipInterface vcom_ObsoleteAttribute( vcomIDispatch ) Implements com_ObsoleteAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OperatingSystem( comIDispatch );
// #docl Объектный интерфейс com_OperatingSystem </brief>
end;

VipInterface vcom_OperatingSystem( vcomIDispatch ) Implements com_OperatingSystem (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OperationCanceledException( comIDispatch );
// #docl Объектный интерфейс com_OperationCanceledException </brief>
end;

VipInterface vcom_OperationCanceledException( vcomIDispatch ) Implements com_OperationCanceledException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OverflowException( comIDispatch );
// #docl Объектный интерфейс com_OverflowException </brief>
end;

VipInterface vcom_OverflowException( vcomIDispatch ) Implements com_OverflowException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ParamArrayAttribute( comIDispatch );
// #docl Объектный интерфейс com_ParamArrayAttribute </brief>
end;

VipInterface vcom_ParamArrayAttribute( vcomIDispatch ) Implements com_ParamArrayAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PlatformNotSupportedException( comIDispatch );
// #docl Объектный интерфейс com_PlatformNotSupportedException </brief>
end;

VipInterface vcom_PlatformNotSupportedException( vcomIDispatch ) Implements com_PlatformNotSupportedException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Random( comIDispatch );
// #docl Объектный интерфейс com_Random </brief>
end;

VipInterface vcom_Random( vcomIDispatch ) Implements com_Random (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RankException( comIDispatch );
// #docl Объектный интерфейс com_RankException </brief>
end;

VipInterface vcom_RankException( vcomIDispatch ) Implements com_RankException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeInfo( comIDispatch );
// #docl Объектный интерфейс com_TypeInfo </brief>
end;

VipInterface vcom_TypeInfo( vcomIDispatch ) Implements com_TypeInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SerializableAttribute( comIDispatch );
// #docl Объектный интерфейс com_SerializableAttribute </brief>
end;

VipInterface vcom_SerializableAttribute( vcomIDispatch ) Implements com_SerializableAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_STAThreadAttribute( comIDispatch );
// #docl Объектный интерфейс com_STAThreadAttribute </brief>
end;

VipInterface vcom_STAThreadAttribute( vcomIDispatch ) Implements com_STAThreadAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MTAThreadAttribute( comIDispatch );
// #docl Объектный интерфейс com_MTAThreadAttribute </brief>
end;

VipInterface vcom_MTAThreadAttribute( vcomIDispatch ) Implements com_MTAThreadAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TimeoutException( comIDispatch );
// #docl Объектный интерфейс com_TimeoutException </brief>
end;

VipInterface vcom_TimeoutException( vcomIDispatch ) Implements com_TimeoutException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeInitializationException( comIDispatch );
// #docl Объектный интерфейс com_TypeInitializationException </brief>
end;

VipInterface vcom_TypeInitializationException( vcomIDispatch ) Implements com_TypeInitializationException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UnauthorizedAccessException( comIDispatch );
// #docl Объектный интерфейс com_UnauthorizedAccessException </brief>
end;

VipInterface vcom_UnauthorizedAccessException( vcomIDispatch ) Implements com_UnauthorizedAccessException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UnhandledExceptionEventArgs( comIDispatch );
// #docl Объектный интерфейс com_UnhandledExceptionEventArgs </brief>
end;

VipInterface vcom_UnhandledExceptionEventArgs( vcomIDispatch ) Implements com_UnhandledExceptionEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UnhandledExceptionEventHandler( comIDispatch );
// #docl Объектный интерфейс com_UnhandledExceptionEventHandler </brief>
end;

VipInterface vcom_UnhandledExceptionEventHandler( vcomIDispatch ) Implements com_UnhandledExceptionEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Version( comIDispatch );
// #docl Объектный интерфейс com_Version </brief>
end;

VipInterface vcom_Version( vcomIDispatch ) Implements com_Version (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_WeakReference( comIDispatch );
// #docl Объектный интерфейс com_WeakReference </brief>
end;

VipInterface vcom_WeakReference( vcomIDispatch ) Implements com_WeakReference (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_WaitHandle( comIDispatch );
// #docl Объектный интерфейс com_WaitHandle </brief>
end;

VipInterface vcom_WaitHandle( vcomIDispatch ) Implements com_WaitHandle (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EventWaitHandle( comIDispatch );
// #docl Объектный интерфейс com_EventWaitHandle </brief>
end;

VipInterface vcom_EventWaitHandle( vcomIDispatch ) Implements com_EventWaitHandle (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AutoResetEvent( comIDispatch );
// #docl Объектный интерфейс com_AutoResetEvent </brief>
end;

VipInterface vcom_AutoResetEvent( vcomIDispatch ) Implements com_AutoResetEvent (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ContextCallback( comIDispatch );
// #docl Объектный интерфейс com_ContextCallback </brief>
end;

VipInterface vcom_ContextCallback( vcomIDispatch ) Implements com_ContextCallback (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ManualResetEvent( comIDispatch );
// #docl Объектный интерфейс com_ManualResetEvent </brief>
end;

VipInterface vcom_ManualResetEvent( vcomIDispatch ) Implements com_ManualResetEvent (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Monitor( comIDispatch );
// #docl Объектный интерфейс com_Monitor </brief>
end;

VipInterface vcom_Monitor( vcomIDispatch ) Implements com_Monitor (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Mutex( comIDispatch );
// #docl Объектный интерфейс com_Mutex </brief>
end;

VipInterface vcom_Mutex( vcomIDispatch ) Implements com_Mutex (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Overlapped( comIDispatch );
// #docl Объектный интерфейс com_Overlapped </brief>
end;

VipInterface vcom_Overlapped( vcomIDispatch ) Implements com_Overlapped (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ReaderWriterLock( comIDispatch );
// #docl Объектный интерфейс com_ReaderWriterLock </brief>
end;

VipInterface vcom_ReaderWriterLock( vcomIDispatch ) Implements com_ReaderWriterLock (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SynchronizationLockException( comIDispatch );
// #docl Объектный интерфейс com_SynchronizationLockException </brief>
end;

VipInterface vcom_SynchronizationLockException( vcomIDispatch ) Implements com_SynchronizationLockException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ThreadAbortException( comIDispatch );
// #docl Объектный интерфейс com_ThreadAbortException </brief>
end;

VipInterface vcom_ThreadAbortException( vcomIDispatch ) Implements com_ThreadAbortException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ThreadInterruptedException( comIDispatch );
// #docl Объектный интерфейс com_ThreadInterruptedException </brief>
end;

VipInterface vcom_ThreadInterruptedException( vcomIDispatch ) Implements com_ThreadInterruptedException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RegisteredWaitHandle( comIDispatch );
// #docl Объектный интерфейс com_RegisteredWaitHandle </brief>
end;

VipInterface vcom_RegisteredWaitHandle( vcomIDispatch ) Implements com_RegisteredWaitHandle (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_WaitCallback( comIDispatch );
// #docl Объектный интерфейс com_WaitCallback </brief>
end;

VipInterface vcom_WaitCallback( vcomIDispatch ) Implements com_WaitCallback (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_WaitOrTimerCallback( comIDispatch );
// #docl Объектный интерфейс com_WaitOrTimerCallback </brief>
end;

VipInterface vcom_WaitOrTimerCallback( vcomIDispatch ) Implements com_WaitOrTimerCallback (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IOCompletionCallback( comIDispatch );
// #docl Объектный интерфейс com_IOCompletionCallback </brief>
end;

VipInterface vcom_IOCompletionCallback( vcomIDispatch ) Implements com_IOCompletionCallback (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ThreadStart( comIDispatch );
// #docl Объектный интерфейс com_ThreadStart </brief>
end;

VipInterface vcom_ThreadStart( vcomIDispatch ) Implements com_ThreadStart (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ThreadStateException( comIDispatch );
// #docl Объектный интерфейс com_ThreadStateException </brief>
end;

VipInterface vcom_ThreadStateException( vcomIDispatch ) Implements com_ThreadStateException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ThreadStaticAttribute( comIDispatch );
// #docl Объектный интерфейс com_ThreadStaticAttribute </brief>
end;

VipInterface vcom_ThreadStaticAttribute( vcomIDispatch ) Implements com_ThreadStaticAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Timeout( comIDispatch );
// #docl Объектный интерфейс com_Timeout </brief>
end;

VipInterface vcom_Timeout( vcomIDispatch ) Implements com_Timeout (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TimerCallback( comIDispatch );
// #docl Объектный интерфейс com_TimerCallback </brief>
end;

VipInterface vcom_TimerCallback( vcomIDispatch ) Implements com_TimerCallback (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Timer( comIDispatch );
// #docl Объектный интерфейс com_Timer </brief>
end;

VipInterface vcom_Timer( vcomIDispatch ) Implements com_Timer (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CaseInsensitiveComparer( comIDispatch );
// #docl Объектный интерфейс com_CaseInsensitiveComparer </brief>
end;

VipInterface vcom_CaseInsensitiveComparer( vcomIDispatch ) Implements com_CaseInsensitiveComparer (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CaseInsensitiveHashCodeProvider( comIDispatch );
// #docl Объектный интерфейс com_CaseInsensitiveHashCodeProvider </brief>
end;

VipInterface vcom_CaseInsensitiveHashCodeProvider( vcomIDispatch ) Implements com_CaseInsensitiveHashCodeProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CollectionBase( comIDispatch );
// #docl Объектный интерфейс com_CollectionBase </brief>
end;

VipInterface vcom_CollectionBase( vcomIDispatch ) Implements com_CollectionBase (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DictionaryBase( comIDispatch );
// #docl Объектный интерфейс com_DictionaryBase </brief>
end;

VipInterface vcom_DictionaryBase( vcomIDispatch ) Implements com_DictionaryBase (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ReadOnlyCollectionBase( comIDispatch );
// #docl Объектный интерфейс com_ReadOnlyCollectionBase </brief>
end;

VipInterface vcom_ReadOnlyCollectionBase( vcomIDispatch ) Implements com_ReadOnlyCollectionBase (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Queue( comIDispatch );
// #docl Объектный интерфейс com_Queue </brief>
end;

VipInterface vcom_Queue( vcomIDispatch ) Implements com_Queue (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ArrayList( comIDispatch );
// #docl Объектный интерфейс com_ArrayList </brief>
end;

VipInterface vcom_ArrayList( vcomIDispatch ) Implements com_ArrayList (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BitArray( comIDispatch );
// #docl Объектный интерфейс com_BitArray </brief>
end;

VipInterface vcom_BitArray( vcomIDispatch ) Implements com_BitArray (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Stack( comIDispatch );
// #docl Объектный интерфейс com_Stack </brief>
end;

VipInterface vcom_Stack( vcomIDispatch ) Implements com_Stack (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Comparer( comIDispatch );
// #docl Объектный интерфейс com_Comparer </brief>
end;

VipInterface vcom_Comparer( vcomIDispatch ) Implements com_Comparer (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Hashtable( comIDispatch );
// #docl Объектный интерфейс com_Hashtable </brief>
end;

VipInterface vcom_Hashtable( vcomIDispatch ) Implements com_Hashtable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SortedList( comIDispatch );
// #docl Объектный интерфейс com_SortedList </brief>
end;

VipInterface vcom_SortedList( vcomIDispatch ) Implements com_SortedList (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Nullable( comIDispatch );
// #docl Объектный интерфейс com_Nullable </brief>
end;

VipInterface vcom_Nullable( vcomIDispatch ) Implements com_Nullable (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_KeyNotFoundException( comIDispatch );
// #docl Объектный интерфейс com_KeyNotFoundException </brief>
end;

VipInterface vcom_KeyNotFoundException( vcomIDispatch ) Implements com_KeyNotFoundException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ConditionalAttribute( comIDispatch );
// #docl Объектный интерфейс com_ConditionalAttribute </brief>
end;

VipInterface vcom_ConditionalAttribute( vcomIDispatch ) Implements com_ConditionalAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Debugger( comIDispatch );
// #docl Объектный интерфейс com_Debugger </brief>
end;

VipInterface vcom_Debugger( vcomIDispatch ) Implements com_Debugger (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DebuggerStepThroughAttribute( comIDispatch );
// #docl Объектный интерфейс com_DebuggerStepThroughAttribute </brief>
end;

VipInterface vcom_DebuggerStepThroughAttribute( vcomIDispatch ) Implements com_DebuggerStepThroughAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DebuggerStepperBoundaryAttribute( comIDispatch );
// #docl Объектный интерфейс com_DebuggerStepperBoundaryAttribute </brief>
end;

VipInterface vcom_DebuggerStepperBoundaryAttribute( vcomIDispatch ) Implements com_DebuggerStepperBoundaryAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DebuggerHiddenAttribute( comIDispatch );
// #docl Объектный интерфейс com_DebuggerHiddenAttribute </brief>
end;

VipInterface vcom_DebuggerHiddenAttribute( vcomIDispatch ) Implements com_DebuggerHiddenAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DebuggerNonUserCodeAttribute( comIDispatch );
// #docl Объектный интерфейс com_DebuggerNonUserCodeAttribute </brief>
end;

VipInterface vcom_DebuggerNonUserCodeAttribute( vcomIDispatch ) Implements com_DebuggerNonUserCodeAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DebuggableAttribute( comIDispatch );
// #docl Объектный интерфейс com_DebuggableAttribute </brief>
end;

VipInterface vcom_DebuggableAttribute( vcomIDispatch ) Implements com_DebuggableAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DebuggerBrowsableAttribute( comIDispatch );
// #docl Объектный интерфейс com_DebuggerBrowsableAttribute </brief>
end;

VipInterface vcom_DebuggerBrowsableAttribute( vcomIDispatch ) Implements com_DebuggerBrowsableAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DebuggerTypeProxyAttribute( comIDispatch );
// #docl Объектный интерфейс com_DebuggerTypeProxyAttribute </brief>
end;

VipInterface vcom_DebuggerTypeProxyAttribute( vcomIDispatch ) Implements com_DebuggerTypeProxyAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DebuggerDisplayAttribute( comIDispatch );
// #docl Объектный интерфейс com_DebuggerDisplayAttribute </brief>
end;

VipInterface vcom_DebuggerDisplayAttribute( vcomIDispatch ) Implements com_DebuggerDisplayAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DebuggerVisualizerAttribute( comIDispatch );
// #docl Объектный интерфейс com_DebuggerVisualizerAttribute </brief>
end;

VipInterface vcom_DebuggerVisualizerAttribute( vcomIDispatch ) Implements com_DebuggerVisualizerAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StackTrace( comIDispatch );
// #docl Объектный интерфейс com_StackTrace </brief>
end;

VipInterface vcom_StackTrace( vcomIDispatch ) Implements com_StackTrace (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StackFrame( comIDispatch );
// #docl Объектный интерфейс com_StackFrame </brief>
end;

VipInterface vcom_StackFrame( vcomIDispatch ) Implements com_StackFrame (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SymDocumentType( comIDispatch );
// #docl Объектный интерфейс com_SymDocumentType </brief>
end;

VipInterface vcom_SymDocumentType( vcomIDispatch ) Implements com_SymDocumentType (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SymLanguageType( comIDispatch );
// #docl Объектный интерфейс com_SymLanguageType </brief>
end;

VipInterface vcom_SymLanguageType( vcomIDispatch ) Implements com_SymLanguageType (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SymLanguageVendor( comIDispatch );
// #docl Объектный интерфейс com_SymLanguageVendor </brief>
end;

VipInterface vcom_SymLanguageVendor( vcomIDispatch ) Implements com_SymLanguageVendor (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AmbiguousMatchException( comIDispatch );
// #docl Объектный интерфейс com_AmbiguousMatchException </brief>
end;

VipInterface vcom_AmbiguousMatchException( vcomIDispatch ) Implements com_AmbiguousMatchException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ModuleResolveEventHandler( comIDispatch );
// #docl Объектный интерфейс com_ModuleResolveEventHandler </brief>
end;

VipInterface vcom_ModuleResolveEventHandler( vcomIDispatch ) Implements com_ModuleResolveEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyCopyrightAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyCopyrightAttribute </brief>
end;

VipInterface vcom_AssemblyCopyrightAttribute( vcomIDispatch ) Implements com_AssemblyCopyrightAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyTrademarkAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyTrademarkAttribute </brief>
end;

VipInterface vcom_AssemblyTrademarkAttribute( vcomIDispatch ) Implements com_AssemblyTrademarkAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyProductAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyProductAttribute </brief>
end;

VipInterface vcom_AssemblyProductAttribute( vcomIDispatch ) Implements com_AssemblyProductAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyCompanyAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyCompanyAttribute </brief>
end;

VipInterface vcom_AssemblyCompanyAttribute( vcomIDispatch ) Implements com_AssemblyCompanyAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyDescriptionAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyDescriptionAttribute </brief>
end;

VipInterface vcom_AssemblyDescriptionAttribute( vcomIDispatch ) Implements com_AssemblyDescriptionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyTitleAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyTitleAttribute </brief>
end;

VipInterface vcom_AssemblyTitleAttribute( vcomIDispatch ) Implements com_AssemblyTitleAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyConfigurationAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyConfigurationAttribute </brief>
end;

VipInterface vcom_AssemblyConfigurationAttribute( vcomIDispatch ) Implements com_AssemblyConfigurationAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyDefaultAliasAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyDefaultAliasAttribute </brief>
end;

VipInterface vcom_AssemblyDefaultAliasAttribute( vcomIDispatch ) Implements com_AssemblyDefaultAliasAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyInformationalVersionAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyInformationalVersionAttribute </brief>
end;

VipInterface vcom_AssemblyInformationalVersionAttribute( vcomIDispatch ) Implements com_AssemblyInformationalVersionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyFileVersionAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyFileVersionAttribute </brief>
end;

VipInterface vcom_AssemblyFileVersionAttribute( vcomIDispatch ) Implements com_AssemblyFileVersionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyCultureAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyCultureAttribute </brief>
end;

VipInterface vcom_AssemblyCultureAttribute( vcomIDispatch ) Implements com_AssemblyCultureAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyVersionAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyVersionAttribute </brief>
end;

VipInterface vcom_AssemblyVersionAttribute( vcomIDispatch ) Implements com_AssemblyVersionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyKeyFileAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyKeyFileAttribute </brief>
end;

VipInterface vcom_AssemblyKeyFileAttribute( vcomIDispatch ) Implements com_AssemblyKeyFileAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyDelaySignAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyDelaySignAttribute </brief>
end;

VipInterface vcom_AssemblyDelaySignAttribute( vcomIDispatch ) Implements com_AssemblyDelaySignAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyAlgorithmIdAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyAlgorithmIdAttribute </brief>
end;

VipInterface vcom_AssemblyAlgorithmIdAttribute( vcomIDispatch ) Implements com_AssemblyAlgorithmIdAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyFlagsAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyFlagsAttribute </brief>
end;

VipInterface vcom_AssemblyFlagsAttribute( vcomIDispatch ) Implements com_AssemblyFlagsAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyKeyNameAttribute( comIDispatch );
// #docl Объектный интерфейс com_AssemblyKeyNameAttribute </brief>
end;

VipInterface vcom_AssemblyKeyNameAttribute( vcomIDispatch ) Implements com_AssemblyKeyNameAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AssemblyNameProxy( comIDispatch );
// #docl Объектный интерфейс com_AssemblyNameProxy </brief>
end;

VipInterface vcom_AssemblyNameProxy( vcomIDispatch ) Implements com_AssemblyNameProxy (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CustomAttributeFormatException( comIDispatch );
// #docl Объектный интерфейс com_CustomAttributeFormatException </brief>
end;

VipInterface vcom_CustomAttributeFormatException( vcomIDispatch ) Implements com_CustomAttributeFormatException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CustomAttributeData( comIDispatch );
// #docl Объектный интерфейс com_CustomAttributeData </brief>
end;

VipInterface vcom_CustomAttributeData( vcomIDispatch ) Implements com_CustomAttributeData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DefaultMemberAttribute( comIDispatch );
// #docl Объектный интерфейс com_DefaultMemberAttribute </brief>
end;

VipInterface vcom_DefaultMemberAttribute( vcomIDispatch ) Implements com_DefaultMemberAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InvalidFilterCriteriaException( comIDispatch );
// #docl Объектный интерфейс com_InvalidFilterCriteriaException </brief>
end;

VipInterface vcom_InvalidFilterCriteriaException( vcomIDispatch ) Implements com_InvalidFilterCriteriaException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ManifestResourceInfo( comIDispatch );
// #docl Объектный интерфейс com_ManifestResourceInfo </brief>
end;

VipInterface vcom_ManifestResourceInfo( vcomIDispatch ) Implements com_ManifestResourceInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MemberFilter( comIDispatch );
// #docl Объектный интерфейс com_MemberFilter </brief>
end;

VipInterface vcom_MemberFilter( vcomIDispatch ) Implements com_MemberFilter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Missing( comIDispatch );
// #docl Объектный интерфейс com_Missing </brief>
end;

VipInterface vcom_Missing( vcomIDispatch ) Implements com_Missing (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ObfuscateAssemblyAttribute( comIDispatch );
// #docl Объектный интерфейс com_ObfuscateAssemblyAttribute </brief>
end;

VipInterface vcom_ObfuscateAssemblyAttribute( vcomIDispatch ) Implements com_ObfuscateAssemblyAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ObfuscationAttribute( comIDispatch );
// #docl Объектный интерфейс com_ObfuscationAttribute </brief>
end;

VipInterface vcom_ObfuscationAttribute( vcomIDispatch ) Implements com_ObfuscationAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ExceptionHandlingClause( comIDispatch );
// #docl Объектный интерфейс com_ExceptionHandlingClause </brief>
end;

VipInterface vcom_ExceptionHandlingClause( vcomIDispatch ) Implements com_ExceptionHandlingClause (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodBody( comIDispatch );
// #docl Объектный интерфейс com_MethodBody </brief>
end;

VipInterface vcom_MethodBody( vcomIDispatch ) Implements com_MethodBody (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_LocalVariableInfo( comIDispatch );
// #docl Объектный интерфейс com_LocalVariableInfo </brief>
end;

VipInterface vcom_LocalVariableInfo( vcomIDispatch ) Implements com_LocalVariableInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Pointer( comIDispatch );
// #docl Объектный интерфейс com_Pointer </brief>
end;

VipInterface vcom_Pointer( vcomIDispatch ) Implements com_Pointer (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ReflectionTypeLoadException( comIDispatch );
// #docl Объектный интерфейс com_ReflectionTypeLoadException </brief>
end;

VipInterface vcom_ReflectionTypeLoadException( vcomIDispatch ) Implements com_ReflectionTypeLoadException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StrongNameKeyPair( comIDispatch );
// #docl Объектный интерфейс com_StrongNameKeyPair </brief>
end;

VipInterface vcom_StrongNameKeyPair( vcomIDispatch ) Implements com_StrongNameKeyPair (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TargetException( comIDispatch );
// #docl Объектный интерфейс com_TargetException </brief>
end;

VipInterface vcom_TargetException( vcomIDispatch ) Implements com_TargetException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TargetInvocationException( comIDispatch );
// #docl Объектный интерфейс com_TargetInvocationException </brief>
end;

VipInterface vcom_TargetInvocationException( vcomIDispatch ) Implements com_TargetInvocationException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TargetParameterCountException( comIDispatch );
// #docl Объектный интерфейс com_TargetParameterCountException </brief>
end;

VipInterface vcom_TargetParameterCountException( vcomIDispatch ) Implements com_TargetParameterCountException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeDelegator( comIDispatch );
// #docl Объектный интерфейс com_TypeDelegator </brief>
end;

VipInterface vcom_TypeDelegator( vcomIDispatch ) Implements com_TypeDelegator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeFilter( comIDispatch );
// #docl Объектный интерфейс com_TypeFilter </brief>
end;

VipInterface vcom_TypeFilter( vcomIDispatch ) Implements com_TypeFilter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FormatterConverter( comIDispatch );
// #docl Объектный интерфейс com_FormatterConverter </brief>
end;

VipInterface vcom_FormatterConverter( vcomIDispatch ) Implements com_FormatterConverter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FormatterServices( comIDispatch );
// #docl Объектный интерфейс com_FormatterServices </brief>
end;

VipInterface vcom_FormatterServices( vcomIDispatch ) Implements com_FormatterServices (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OptionalFieldAttribute( comIDispatch );
// #docl Объектный интерфейс com_OptionalFieldAttribute </brief>
end;

VipInterface vcom_OptionalFieldAttribute( vcomIDispatch ) Implements com_OptionalFieldAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OnSerializingAttribute( comIDispatch );
// #docl Объектный интерфейс com_OnSerializingAttribute </brief>
end;

VipInterface vcom_OnSerializingAttribute( vcomIDispatch ) Implements com_OnSerializingAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OnSerializedAttribute( comIDispatch );
// #docl Объектный интерфейс com_OnSerializedAttribute </brief>
end;

VipInterface vcom_OnSerializedAttribute( vcomIDispatch ) Implements com_OnSerializedAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OnDeserializingAttribute( comIDispatch );
// #docl Объектный интерфейс com_OnDeserializingAttribute </brief>
end;

VipInterface vcom_OnDeserializingAttribute( vcomIDispatch ) Implements com_OnDeserializingAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OnDeserializedAttribute( comIDispatch );
// #docl Объектный интерфейс com_OnDeserializedAttribute </brief>
end;

VipInterface vcom_OnDeserializedAttribute( vcomIDispatch ) Implements com_OnDeserializedAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SerializationBinder( comIDispatch );
// #docl Объектный интерфейс com_SerializationBinder </brief>
end;

VipInterface vcom_SerializationBinder( vcomIDispatch ) Implements com_SerializationBinder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SerializationException( comIDispatch );
// #docl Объектный интерфейс com_SerializationException </brief>
end;

VipInterface vcom_SerializationException( vcomIDispatch ) Implements com_SerializationException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SerializationInfo( comIDispatch );
// #docl Объектный интерфейс com_SerializationInfo </brief>
end;

VipInterface vcom_SerializationInfo( vcomIDispatch ) Implements com_SerializationInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SerializationInfoEnumerator( comIDispatch );
// #docl Объектный интерфейс com_SerializationInfoEnumerator </brief>
end;

VipInterface vcom_SerializationInfoEnumerator( vcomIDispatch ) Implements com_SerializationInfoEnumerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Formatter( comIDispatch );
// #docl Объектный интерфейс com_Formatter </brief>
end;

VipInterface vcom_Formatter( vcomIDispatch ) Implements com_Formatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ObjectIDGenerator( comIDispatch );
// #docl Объектный интерфейс com_ObjectIDGenerator </brief>
end;

VipInterface vcom_ObjectIDGenerator( vcomIDispatch ) Implements com_ObjectIDGenerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ObjectManager( comIDispatch );
// #docl Объектный интерфейс com_ObjectManager </brief>
end;

VipInterface vcom_ObjectManager( vcomIDispatch ) Implements com_ObjectManager (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SurrogateSelector( comIDispatch );
// #docl Объектный интерфейс com_SurrogateSelector </brief>
end;

VipInterface vcom_SurrogateSelector( vcomIDispatch ) Implements com_SurrogateSelector (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Calendar( comIDispatch );
// #docl Объектный интерфейс com_Calendar </brief>
end;

VipInterface vcom_Calendar( vcomIDispatch ) Implements com_Calendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CompareInfo( comIDispatch );
// #docl Объектный интерфейс com_CompareInfo </brief>
end;

VipInterface vcom_CompareInfo( vcomIDispatch ) Implements com_CompareInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CultureInfo( comIDispatch );
// #docl Объектный интерфейс com_CultureInfo </brief>
end;

VipInterface vcom_CultureInfo( vcomIDispatch ) Implements com_CultureInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CultureNotFoundException( comIDispatch );
// #docl Объектный интерфейс com_CultureNotFoundException </brief>
end;

VipInterface vcom_CultureNotFoundException( vcomIDispatch ) Implements com_CultureNotFoundException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DateTimeFormatInfo( comIDispatch );
// #docl Объектный интерфейс com_DateTimeFormatInfo </brief>
end;

VipInterface vcom_DateTimeFormatInfo( vcomIDispatch ) Implements com_DateTimeFormatInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DaylightTime( comIDispatch );
// #docl Объектный интерфейс com_DaylightTime </brief>
end;

VipInterface vcom_DaylightTime( vcomIDispatch ) Implements com_DaylightTime (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GregorianCalendar( comIDispatch );
// #docl Объектный интерфейс com_GregorianCalendar </brief>
end;

VipInterface vcom_GregorianCalendar( vcomIDispatch ) Implements com_GregorianCalendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HebrewCalendar( comIDispatch );
// #docl Объектный интерфейс com_HebrewCalendar </brief>
end;

VipInterface vcom_HebrewCalendar( vcomIDispatch ) Implements com_HebrewCalendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HijriCalendar( comIDispatch );
// #docl Объектный интерфейс com_HijriCalendar </brief>
end;

VipInterface vcom_HijriCalendar( vcomIDispatch ) Implements com_HijriCalendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EastAsianLunisolarCalendar( comIDispatch );
// #docl Объектный интерфейс com_EastAsianLunisolarCalendar </brief>
end;

VipInterface vcom_EastAsianLunisolarCalendar( vcomIDispatch ) Implements com_EastAsianLunisolarCalendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_JulianCalendar( comIDispatch );
// #docl Объектный интерфейс com_JulianCalendar </brief>
end;

VipInterface vcom_JulianCalendar( vcomIDispatch ) Implements com_JulianCalendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_JapaneseCalendar( comIDispatch );
// #docl Объектный интерфейс com_JapaneseCalendar </brief>
end;

VipInterface vcom_JapaneseCalendar( vcomIDispatch ) Implements com_JapaneseCalendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_KoreanCalendar( comIDispatch );
// #docl Объектный интерфейс com_KoreanCalendar </brief>
end;

VipInterface vcom_KoreanCalendar( vcomIDispatch ) Implements com_KoreanCalendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RegionInfo( comIDispatch );
// #docl Объектный интерфейс com_RegionInfo </brief>
end;

VipInterface vcom_RegionInfo( vcomIDispatch ) Implements com_RegionInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SortKey( comIDispatch );
// #docl Объектный интерфейс com_SortKey </brief>
end;

VipInterface vcom_SortKey( vcomIDispatch ) Implements com_SortKey (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StringInfo( comIDispatch );
// #docl Объектный интерфейс com_StringInfo </brief>
end;

VipInterface vcom_StringInfo( vcomIDispatch ) Implements com_StringInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TaiwanCalendar( comIDispatch );
// #docl Объектный интерфейс com_TaiwanCalendar </brief>
end;

VipInterface vcom_TaiwanCalendar( vcomIDispatch ) Implements com_TaiwanCalendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TextElementEnumerator( comIDispatch );
// #docl Объектный интерфейс com_TextElementEnumerator </brief>
end;

VipInterface vcom_TextElementEnumerator( vcomIDispatch ) Implements com_TextElementEnumerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TextInfo( comIDispatch );
// #docl Объектный интерфейс com_TextInfo </brief>
end;

VipInterface vcom_TextInfo( vcomIDispatch ) Implements com_TextInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ThaiBuddhistCalendar( comIDispatch );
// #docl Объектный интерфейс com_ThaiBuddhistCalendar </brief>
end;

VipInterface vcom_ThaiBuddhistCalendar( vcomIDispatch ) Implements com_ThaiBuddhistCalendar (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NumberFormatInfo( comIDispatch );
// #docl Объектный интерфейс com_NumberFormatInfo </brief>
end;

VipInterface vcom_NumberFormatInfo( vcomIDispatch ) Implements com_NumberFormatInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Encoding( comIDispatch );
// #docl Объектный интерфейс com_Encoding </brief>
end;

VipInterface vcom_Encoding( vcomIDispatch ) Implements com_Encoding (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Encoder( comIDispatch );
// #docl Объектный интерфейс com_Encoder </brief>
end;

VipInterface vcom_Encoder( vcomIDispatch ) Implements com_Encoder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Decoder( comIDispatch );
// #docl Объектный интерфейс com_Decoder </brief>
end;

VipInterface vcom_Decoder( vcomIDispatch ) Implements com_Decoder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ASCIIEncoding( comIDispatch );
// #docl Объектный интерфейс com_ASCIIEncoding </brief>
end;

VipInterface vcom_ASCIIEncoding( vcomIDispatch ) Implements com_ASCIIEncoding (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UnicodeEncoding( comIDispatch );
// #docl Объектный интерфейс com_UnicodeEncoding </brief>
end;

VipInterface vcom_UnicodeEncoding( vcomIDispatch ) Implements com_UnicodeEncoding (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UTF7Encoding( comIDispatch );
// #docl Объектный интерфейс com_UTF7Encoding </brief>
end;

VipInterface vcom_UTF7Encoding( vcomIDispatch ) Implements com_UTF7Encoding (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UTF8Encoding( comIDispatch );
// #docl Объектный интерфейс com_UTF8Encoding </brief>
end;

VipInterface vcom_UTF8Encoding( vcomIDispatch ) Implements com_UTF8Encoding (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MissingManifestResourceException( comIDispatch );
// #docl Объектный интерфейс com_MissingManifestResourceException </brief>
end;

VipInterface vcom_MissingManifestResourceException( vcomIDispatch ) Implements com_MissingManifestResourceException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MissingSatelliteAssemblyException( comIDispatch );
// #docl Объектный интерфейс com_MissingSatelliteAssemblyException </brief>
end;

VipInterface vcom_MissingSatelliteAssemblyException( vcomIDispatch ) Implements com_MissingSatelliteAssemblyException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NeutralResourcesLanguageAttribute( comIDispatch );
// #docl Объектный интерфейс com_NeutralResourcesLanguageAttribute </brief>
end;

VipInterface vcom_NeutralResourcesLanguageAttribute( vcomIDispatch ) Implements com_NeutralResourcesLanguageAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ResourceManager( comIDispatch );
// #docl Объектный интерфейс com_ResourceManager </brief>
end;

VipInterface vcom_ResourceManager( vcomIDispatch ) Implements com_ResourceManager (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ResourceReader( comIDispatch );
// #docl Объектный интерфейс com_ResourceReader </brief>
end;

VipInterface vcom_ResourceReader( vcomIDispatch ) Implements com_ResourceReader (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ResourceSet( comIDispatch );
// #docl Объектный интерфейс com_ResourceSet </brief>
end;

VipInterface vcom_ResourceSet( vcomIDispatch ) Implements com_ResourceSet (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ResourceWriter( comIDispatch );
// #docl Объектный интерфейс com_ResourceWriter </brief>
end;

VipInterface vcom_ResourceWriter( vcomIDispatch ) Implements com_ResourceWriter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SatelliteContractVersionAttribute( comIDispatch );
// #docl Объектный интерфейс com_SatelliteContractVersionAttribute </brief>
end;

VipInterface vcom_SatelliteContractVersionAttribute( vcomIDispatch ) Implements com_SatelliteContractVersionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Registry( comIDispatch );
// #docl Объектный интерфейс com_Registry </brief>
end;

VipInterface vcom_Registry( vcomIDispatch ) Implements com_Registry (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RegistryKey( comIDispatch );
// #docl Объектный интерфейс com_RegistryKey </brief>
end;

VipInterface vcom_RegistryKey( vcomIDispatch ) Implements com_RegistryKey (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AllMembershipCondition( comIDispatch );
// #docl Объектный интерфейс com_AllMembershipCondition </brief>
end;

VipInterface vcom_AllMembershipCondition( vcomIDispatch ) Implements com_AllMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationDirectory( comIDispatch );
// #docl Объектный интерфейс com_ApplicationDirectory </brief>
end;

VipInterface vcom_ApplicationDirectory( vcomIDispatch ) Implements com_ApplicationDirectory (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationDirectoryMembershipCondition( comIDispatch );
// #docl Объектный интерфейс com_ApplicationDirectoryMembershipCondition </brief>
end;

VipInterface vcom_ApplicationDirectoryMembershipCondition( vcomIDispatch ) Implements com_ApplicationDirectoryMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationSecurityInfo( comIDispatch );
// #docl Объектный интерфейс com_ApplicationSecurityInfo </brief>
end;

VipInterface vcom_ApplicationSecurityInfo( vcomIDispatch ) Implements com_ApplicationSecurityInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationSecurityManager( comIDispatch );
// #docl Объектный интерфейс com_ApplicationSecurityManager </brief>
end;

VipInterface vcom_ApplicationSecurityManager( vcomIDispatch ) Implements com_ApplicationSecurityManager (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationTrust( comIDispatch );
// #docl Объектный интерфейс com_ApplicationTrust </brief>
end;

VipInterface vcom_ApplicationTrust( vcomIDispatch ) Implements com_ApplicationTrust (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationTrustCollection( comIDispatch );
// #docl Объектный интерфейс com_ApplicationTrustCollection </brief>
end;

VipInterface vcom_ApplicationTrustCollection( vcomIDispatch ) Implements com_ApplicationTrustCollection (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ApplicationTrustEnumerator( comIDispatch );
// #docl Объектный интерфейс com_ApplicationTrustEnumerator </brief>
end;

VipInterface vcom_ApplicationTrustEnumerator( vcomIDispatch ) Implements com_ApplicationTrustEnumerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CodeGroup( comIDispatch );
// #docl Объектный интерфейс com_CodeGroup </brief>
end;

VipInterface vcom_CodeGroup( vcomIDispatch ) Implements com_CodeGroup (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Evidence( comIDispatch );
// #docl Объектный интерфейс com_Evidence </brief>
end;

VipInterface vcom_Evidence( vcomIDispatch ) Implements com_Evidence (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileCodeGroup( comIDispatch );
// #docl Объектный интерфейс com_FileCodeGroup </brief>
end;

VipInterface vcom_FileCodeGroup( vcomIDispatch ) Implements com_FileCodeGroup (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FirstMatchCodeGroup( comIDispatch );
// #docl Объектный интерфейс com_FirstMatchCodeGroup </brief>
end;

VipInterface vcom_FirstMatchCodeGroup( vcomIDispatch ) Implements com_FirstMatchCodeGroup (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TrustManagerContext( comIDispatch );
// #docl Объектный интерфейс com_TrustManagerContext </brief>
end;

VipInterface vcom_TrustManagerContext( vcomIDispatch ) Implements com_TrustManagerContext (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CodeConnectAccess( comIDispatch );
// #docl Объектный интерфейс com_CodeConnectAccess </brief>
end;

VipInterface vcom_CodeConnectAccess( vcomIDispatch ) Implements com_CodeConnectAccess (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NetCodeGroup( comIDispatch );
// #docl Объектный интерфейс com_NetCodeGroup </brief>
end;

VipInterface vcom_NetCodeGroup( vcomIDispatch ) Implements com_NetCodeGroup (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PermissionRequestEvidence( comIDispatch );
// #docl Объектный интерфейс com_PermissionRequestEvidence </brief>
end;

VipInterface vcom_PermissionRequestEvidence( vcomIDispatch ) Implements com_PermissionRequestEvidence (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PolicyException( comIDispatch );
// #docl Объектный интерфейс com_PolicyException </brief>
end;

VipInterface vcom_PolicyException( vcomIDispatch ) Implements com_PolicyException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PolicyLevel( comIDispatch );
// #docl Объектный интерфейс com_PolicyLevel </brief>
end;

VipInterface vcom_PolicyLevel( vcomIDispatch ) Implements com_PolicyLevel (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PolicyStatement( comIDispatch );
// #docl Объектный интерфейс com_PolicyStatement </brief>
end;

VipInterface vcom_PolicyStatement( vcomIDispatch ) Implements com_PolicyStatement (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Site( comIDispatch );
// #docl Объектный интерфейс com_Site </brief>
end;

VipInterface vcom_Site( vcomIDispatch ) Implements com_Site (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SiteMembershipCondition( comIDispatch );
// #docl Объектный интерфейс com_SiteMembershipCondition </brief>
end;

VipInterface vcom_SiteMembershipCondition( vcomIDispatch ) Implements com_SiteMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StrongName( comIDispatch );
// #docl Объектный интерфейс com_StrongName </brief>
end;

VipInterface vcom_StrongName( vcomIDispatch ) Implements com_StrongName (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StrongNameMembershipCondition( comIDispatch );
// #docl Объектный интерфейс com_StrongNameMembershipCondition </brief>
end;

VipInterface vcom_StrongNameMembershipCondition( vcomIDispatch ) Implements com_StrongNameMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UnionCodeGroup( comIDispatch );
// #docl Объектный интерфейс com_UnionCodeGroup </brief>
end;

VipInterface vcom_UnionCodeGroup( vcomIDispatch ) Implements com_UnionCodeGroup (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Url( comIDispatch );
// #docl Объектный интерфейс com_Url </brief>
end;

VipInterface vcom_Url( vcomIDispatch ) Implements com_Url (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UrlMembershipCondition( comIDispatch );
// #docl Объектный интерфейс com_UrlMembershipCondition </brief>
end;

VipInterface vcom_UrlMembershipCondition( vcomIDispatch ) Implements com_UrlMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Zone( comIDispatch );
// #docl Объектный интерфейс com_Zone </brief>
end;

VipInterface vcom_Zone( vcomIDispatch ) Implements com_Zone (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ZoneMembershipCondition( comIDispatch );
// #docl Объектный интерфейс com_ZoneMembershipCondition </brief>
end;

VipInterface vcom_ZoneMembershipCondition( vcomIDispatch ) Implements com_ZoneMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GacInstalled( comIDispatch );
// #docl Объектный интерфейс com_GacInstalled </brief>
end;

VipInterface vcom_GacInstalled( vcomIDispatch ) Implements com_GacInstalled (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GacMembershipCondition( comIDispatch );
// #docl Объектный интерфейс com_GacMembershipCondition </brief>
end;

VipInterface vcom_GacMembershipCondition( vcomIDispatch ) Implements com_GacMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Hash( comIDispatch );
// #docl Объектный интерфейс com_Hash </brief>
end;

VipInterface vcom_Hash( vcomIDispatch ) Implements com_Hash (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HashMembershipCondition( comIDispatch );
// #docl Объектный интерфейс com_HashMembershipCondition </brief>
end;

VipInterface vcom_HashMembershipCondition( vcomIDispatch ) Implements com_HashMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Publisher( comIDispatch );
// #docl Объектный интерфейс com_Publisher </brief>
end;

VipInterface vcom_Publisher( vcomIDispatch ) Implements com_Publisher (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PublisherMembershipCondition( comIDispatch );
// #docl Объектный интерфейс com_PublisherMembershipCondition </brief>
end;

VipInterface vcom_PublisherMembershipCondition( vcomIDispatch ) Implements com_PublisherMembershipCondition (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ClaimsIdentity( comIDispatch );
// #docl Объектный интерфейс com_ClaimsIdentity </brief>
end;

VipInterface vcom_ClaimsIdentity( vcomIDispatch ) Implements com_ClaimsIdentity (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GenericIdentity( comIDispatch );
// #docl Объектный интерфейс com_GenericIdentity </brief>
end;

VipInterface vcom_GenericIdentity( vcomIDispatch ) Implements com_GenericIdentity (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ClaimsPrincipal( comIDispatch );
// #docl Объектный интерфейс com_ClaimsPrincipal </brief>
end;

VipInterface vcom_ClaimsPrincipal( vcomIDispatch ) Implements com_ClaimsPrincipal (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GenericPrincipal( comIDispatch );
// #docl Объектный интерфейс com_GenericPrincipal </brief>
end;

VipInterface vcom_GenericPrincipal( vcomIDispatch ) Implements com_GenericPrincipal (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_WindowsIdentity( comIDispatch );
// #docl Объектный интерфейс com_WindowsIdentity </brief>
end;

VipInterface vcom_WindowsIdentity( vcomIDispatch ) Implements com_WindowsIdentity (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_WindowsImpersonationContext( comIDispatch );
// #docl Объектный интерфейс com_WindowsImpersonationContext </brief>
end;

VipInterface vcom_WindowsImpersonationContext( vcomIDispatch ) Implements com_WindowsImpersonationContext (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_WindowsPrincipal( comIDispatch );
// #docl Объектный интерфейс com_WindowsPrincipal </brief>
end;

VipInterface vcom_WindowsPrincipal( vcomIDispatch ) Implements com_WindowsPrincipal (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UnmanagedFunctionPointerAttribute( comIDispatch );
// #docl Объектный интерфейс com_UnmanagedFunctionPointerAttribute </brief>
end;

VipInterface vcom_UnmanagedFunctionPointerAttribute( vcomIDispatch ) Implements com_UnmanagedFunctionPointerAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DispIdAttribute( comIDispatch );
// #docl Объектный интерфейс com_DispIdAttribute </brief>
end;

VipInterface vcom_DispIdAttribute( vcomIDispatch ) Implements com_DispIdAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InterfaceTypeAttribute( comIDispatch );
// #docl Объектный интерфейс com_InterfaceTypeAttribute </brief>
end;

VipInterface vcom_InterfaceTypeAttribute( vcomIDispatch ) Implements com_InterfaceTypeAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComDefaultInterfaceAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComDefaultInterfaceAttribute </brief>
end;

VipInterface vcom_ComDefaultInterfaceAttribute( vcomIDispatch ) Implements com_ComDefaultInterfaceAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ClassInterfaceAttribute( comIDispatch );
// #docl Объектный интерфейс com_ClassInterfaceAttribute </brief>
end;

VipInterface vcom_ClassInterfaceAttribute( vcomIDispatch ) Implements com_ClassInterfaceAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComVisibleAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComVisibleAttribute </brief>
end;

VipInterface vcom_ComVisibleAttribute( vcomIDispatch ) Implements com_ComVisibleAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeLibImportClassAttribute( comIDispatch );
// #docl Объектный интерфейс com_TypeLibImportClassAttribute </brief>
end;

VipInterface vcom_TypeLibImportClassAttribute( vcomIDispatch ) Implements com_TypeLibImportClassAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_LCIDConversionAttribute( comIDispatch );
// #docl Объектный интерфейс com_LCIDConversionAttribute </brief>
end;

VipInterface vcom_LCIDConversionAttribute( vcomIDispatch ) Implements com_LCIDConversionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComRegisterFunctionAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComRegisterFunctionAttribute </brief>
end;

VipInterface vcom_ComRegisterFunctionAttribute( vcomIDispatch ) Implements com_ComRegisterFunctionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComUnregisterFunctionAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComUnregisterFunctionAttribute </brief>
end;

VipInterface vcom_ComUnregisterFunctionAttribute( vcomIDispatch ) Implements com_ComUnregisterFunctionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ProgIdAttribute( comIDispatch );
// #docl Объектный интерфейс com_ProgIdAttribute </brief>
end;

VipInterface vcom_ProgIdAttribute( vcomIDispatch ) Implements com_ProgIdAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ImportedFromTypeLibAttribute( comIDispatch );
// #docl Объектный интерфейс com_ImportedFromTypeLibAttribute </brief>
end;

VipInterface vcom_ImportedFromTypeLibAttribute( vcomIDispatch ) Implements com_ImportedFromTypeLibAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IDispatchImplAttribute( comIDispatch );
// #docl Объектный интерфейс com_IDispatchImplAttribute </brief>
end;

VipInterface vcom_IDispatchImplAttribute( vcomIDispatch ) Implements com_IDispatchImplAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComSourceInterfacesAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComSourceInterfacesAttribute </brief>
end;

VipInterface vcom_ComSourceInterfacesAttribute( vcomIDispatch ) Implements com_ComSourceInterfacesAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComConversionLossAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComConversionLossAttribute </brief>
end;

VipInterface vcom_ComConversionLossAttribute( vcomIDispatch ) Implements com_ComConversionLossAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeLibTypeAttribute( comIDispatch );
// #docl Объектный интерфейс com_TypeLibTypeAttribute </brief>
end;

VipInterface vcom_TypeLibTypeAttribute( vcomIDispatch ) Implements com_TypeLibTypeAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeLibFuncAttribute( comIDispatch );
// #docl Объектный интерфейс com_TypeLibFuncAttribute </brief>
end;

VipInterface vcom_TypeLibFuncAttribute( vcomIDispatch ) Implements com_TypeLibFuncAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeLibVarAttribute( comIDispatch );
// #docl Объектный интерфейс com_TypeLibVarAttribute </brief>
end;

VipInterface vcom_TypeLibVarAttribute( vcomIDispatch ) Implements com_TypeLibVarAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MarshalAsAttribute( comIDispatch );
// #docl Объектный интерфейс com_MarshalAsAttribute </brief>
end;

VipInterface vcom_MarshalAsAttribute( vcomIDispatch ) Implements com_MarshalAsAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComImportAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComImportAttribute </brief>
end;

VipInterface vcom_ComImportAttribute( vcomIDispatch ) Implements com_ComImportAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GuidAttribute( comIDispatch );
// #docl Объектный интерфейс com_GuidAttribute </brief>
end;

VipInterface vcom_GuidAttribute( vcomIDispatch ) Implements com_GuidAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PreserveSigAttribute( comIDispatch );
// #docl Объектный интерфейс com_PreserveSigAttribute </brief>
end;

VipInterface vcom_PreserveSigAttribute( vcomIDispatch ) Implements com_PreserveSigAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InAttribute( comIDispatch );
// #docl Объектный интерфейс com_InAttribute </brief>
end;

VipInterface vcom_InAttribute( vcomIDispatch ) Implements com_InAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OutAttribute( comIDispatch );
// #docl Объектный интерфейс com_OutAttribute </brief>
end;

VipInterface vcom_OutAttribute( vcomIDispatch ) Implements com_OutAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OptionalAttribute( comIDispatch );
// #docl Объектный интерфейс com_OptionalAttribute </brief>
end;

VipInterface vcom_OptionalAttribute( vcomIDispatch ) Implements com_OptionalAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DllImportAttribute( comIDispatch );
// #docl Объектный интерфейс com_DllImportAttribute </brief>
end;

VipInterface vcom_DllImportAttribute( vcomIDispatch ) Implements com_DllImportAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StructLayoutAttribute( comIDispatch );
// #docl Объектный интерфейс com_StructLayoutAttribute </brief>
end;

VipInterface vcom_StructLayoutAttribute( vcomIDispatch ) Implements com_StructLayoutAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FieldOffsetAttribute( comIDispatch );
// #docl Объектный интерфейс com_FieldOffsetAttribute </brief>
end;

VipInterface vcom_FieldOffsetAttribute( vcomIDispatch ) Implements com_FieldOffsetAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComAliasNameAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComAliasNameAttribute </brief>
end;

VipInterface vcom_ComAliasNameAttribute( vcomIDispatch ) Implements com_ComAliasNameAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AutomationProxyAttribute( comIDispatch );
// #docl Объектный интерфейс com_AutomationProxyAttribute </brief>
end;

VipInterface vcom_AutomationProxyAttribute( vcomIDispatch ) Implements com_AutomationProxyAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PrimaryInteropAssemblyAttribute( comIDispatch );
// #docl Объектный интерфейс com_PrimaryInteropAssemblyAttribute </brief>
end;

VipInterface vcom_PrimaryInteropAssemblyAttribute( vcomIDispatch ) Implements com_PrimaryInteropAssemblyAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CoClassAttribute( comIDispatch );
// #docl Объектный интерфейс com_CoClassAttribute </brief>
end;

VipInterface vcom_CoClassAttribute( vcomIDispatch ) Implements com_CoClassAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComEventInterfaceAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComEventInterfaceAttribute </brief>
end;

VipInterface vcom_ComEventInterfaceAttribute( vcomIDispatch ) Implements com_ComEventInterfaceAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeLibVersionAttribute( comIDispatch );
// #docl Объектный интерфейс com_TypeLibVersionAttribute </brief>
end;

VipInterface vcom_TypeLibVersionAttribute( vcomIDispatch ) Implements com_TypeLibVersionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ComCompatibleVersionAttribute( comIDispatch );
// #docl Объектный интерфейс com_ComCompatibleVersionAttribute </brief>
end;

VipInterface vcom_ComCompatibleVersionAttribute( vcomIDispatch ) Implements com_ComCompatibleVersionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BestFitMappingAttribute( comIDispatch );
// #docl Объектный интерфейс com_BestFitMappingAttribute </brief>
end;

VipInterface vcom_BestFitMappingAttribute( vcomIDispatch ) Implements com_BestFitMappingAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DefaultCharSetAttribute( comIDispatch );
// #docl Объектный интерфейс com_DefaultCharSetAttribute </brief>
end;

VipInterface vcom_DefaultCharSetAttribute( vcomIDispatch ) Implements com_DefaultCharSetAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SetWin32ContextInIDispatchAttribute( comIDispatch );
// #docl Объектный интерфейс com_SetWin32ContextInIDispatchAttribute </brief>
end;

VipInterface vcom_SetWin32ContextInIDispatchAttribute( vcomIDispatch ) Implements com_SetWin32ContextInIDispatchAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ExternalException( comIDispatch );
// #docl Объектный интерфейс com_ExternalException </brief>
end;

VipInterface vcom_ExternalException( vcomIDispatch ) Implements com_ExternalException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_COMException( comIDispatch );
// #docl Объектный интерфейс com_COMException </brief>
end;

VipInterface vcom_COMException( vcomIDispatch ) Implements com_COMException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InvalidOleVariantTypeException( comIDispatch );
// #docl Объектный интерфейс com_InvalidOleVariantTypeException </brief>
end;

VipInterface vcom_InvalidOleVariantTypeException( vcomIDispatch ) Implements com_InvalidOleVariantTypeException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MarshalDirectiveException( comIDispatch );
// #docl Объектный интерфейс com_MarshalDirectiveException </brief>
end;

VipInterface vcom_MarshalDirectiveException( vcomIDispatch ) Implements com_MarshalDirectiveException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RuntimeEnvironment( comIDispatch );
// #docl Объектный интерфейс com_RuntimeEnvironment </brief>
end;

VipInterface vcom_RuntimeEnvironment( vcomIDispatch ) Implements com_RuntimeEnvironment (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SEHException( comIDispatch );
// #docl Объектный интерфейс com_SEHException </brief>
end;

VipInterface vcom_SEHException( vcomIDispatch ) Implements com_SEHException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BStrWrapper( comIDispatch );
// #docl Объектный интерфейс com_BStrWrapper </brief>
end;

VipInterface vcom_BStrWrapper( vcomIDispatch ) Implements com_BStrWrapper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CurrencyWrapper( comIDispatch );
// #docl Объектный интерфейс com_CurrencyWrapper </brief>
end;

VipInterface vcom_CurrencyWrapper( vcomIDispatch ) Implements com_CurrencyWrapper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DispatchWrapper( comIDispatch );
// #docl Объектный интерфейс com_DispatchWrapper </brief>
end;

VipInterface vcom_DispatchWrapper( vcomIDispatch ) Implements com_DispatchWrapper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ErrorWrapper( comIDispatch );
// #docl Объектный интерфейс com_ErrorWrapper </brief>
end;

VipInterface vcom_ErrorWrapper( vcomIDispatch ) Implements com_ErrorWrapper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ExtensibleClassFactory( comIDispatch );
// #docl Объектный интерфейс com_ExtensibleClassFactory </brief>
end;

VipInterface vcom_ExtensibleClassFactory( vcomIDispatch ) Implements com_ExtensibleClassFactory (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InvalidComObjectException( comIDispatch );
// #docl Объектный интерфейс com_InvalidComObjectException </brief>
end;

VipInterface vcom_InvalidComObjectException( vcomIDispatch ) Implements com_InvalidComObjectException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ObjectCreationDelegate( comIDispatch );
// #docl Объектный интерфейс com_ObjectCreationDelegate </brief>
end;

VipInterface vcom_ObjectCreationDelegate( vcomIDispatch ) Implements com_ObjectCreationDelegate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SafeArrayRankMismatchException( comIDispatch );
// #docl Объектный интерфейс com_SafeArrayRankMismatchException </brief>
end;

VipInterface vcom_SafeArrayRankMismatchException( vcomIDispatch ) Implements com_SafeArrayRankMismatchException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SafeArrayTypeMismatchException( comIDispatch );
// #docl Объектный интерфейс com_SafeArrayTypeMismatchException </brief>
end;

VipInterface vcom_SafeArrayTypeMismatchException( vcomIDispatch ) Implements com_SafeArrayTypeMismatchException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UnknownWrapper( comIDispatch );
// #docl Объектный интерфейс com_UnknownWrapper </brief>
end;

VipInterface vcom_UnknownWrapper( vcomIDispatch ) Implements com_UnknownWrapper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TextWriter( comIDispatch );
// #docl Объектный интерфейс com_TextWriter </brief>
end;

VipInterface vcom_TextWriter( vcomIDispatch ) Implements com_TextWriter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Stream( comIDispatch );
// #docl Объектный интерфейс com_Stream </brief>
end;

VipInterface vcom_Stream( vcomIDispatch ) Implements com_Stream (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BinaryReader( comIDispatch );
// #docl Объектный интерфейс com_BinaryReader </brief>
end;

VipInterface vcom_BinaryReader( vcomIDispatch ) Implements com_BinaryReader (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BinaryWriter( comIDispatch );
// #docl Объектный интерфейс com_BinaryWriter </brief>
end;

VipInterface vcom_BinaryWriter( vcomIDispatch ) Implements com_BinaryWriter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BufferedStream( comIDispatch );
// #docl Объектный интерфейс com_BufferedStream </brief>
end;

VipInterface vcom_BufferedStream( vcomIDispatch ) Implements com_BufferedStream (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Directory( comIDispatch );
// #docl Объектный интерфейс com_Directory </brief>
end;

VipInterface vcom_Directory( vcomIDispatch ) Implements com_Directory (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileSystemInfo( comIDispatch );
// #docl Объектный интерфейс com_FileSystemInfo </brief>
end;

VipInterface vcom_FileSystemInfo( vcomIDispatch ) Implements com_FileSystemInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DirectoryInfo( comIDispatch );
// #docl Объектный интерфейс com_DirectoryInfo </brief>
end;

VipInterface vcom_DirectoryInfo( vcomIDispatch ) Implements com_DirectoryInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IOException( comIDispatch );
// #docl Объектный интерфейс com_IOException </brief>
end;

VipInterface vcom_IOException( vcomIDispatch ) Implements com_IOException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DirectoryNotFoundException( comIDispatch );
// #docl Объектный интерфейс com_DirectoryNotFoundException </brief>
end;

VipInterface vcom_DirectoryNotFoundException( vcomIDispatch ) Implements com_DirectoryNotFoundException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DriveInfo( comIDispatch );
// #docl Объектный интерфейс com_DriveInfo </brief>
end;

VipInterface vcom_DriveInfo( vcomIDispatch ) Implements com_DriveInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DriveNotFoundException( comIDispatch );
// #docl Объектный интерфейс com_DriveNotFoundException </brief>
end;

VipInterface vcom_DriveNotFoundException( vcomIDispatch ) Implements com_DriveNotFoundException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EndOfStreamException( comIDispatch );
// #docl Объектный интерфейс com_EndOfStreamException </brief>
end;

VipInterface vcom_EndOfStreamException( vcomIDispatch ) Implements com_EndOfStreamException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_File( comIDispatch );
// #docl Объектный интерфейс com_File </brief>
end;

VipInterface vcom_File( vcomIDispatch ) Implements com_File (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileInfo( comIDispatch );
// #docl Объектный интерфейс com_FileInfo </brief>
end;

VipInterface vcom_FileInfo( vcomIDispatch ) Implements com_FileInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileLoadException( comIDispatch );
// #docl Объектный интерфейс com_FileLoadException </brief>
end;

VipInterface vcom_FileLoadException( vcomIDispatch ) Implements com_FileLoadException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileNotFoundException( comIDispatch );
// #docl Объектный интерфейс com_FileNotFoundException </brief>
end;

VipInterface vcom_FileNotFoundException( vcomIDispatch ) Implements com_FileNotFoundException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileStream( comIDispatch );
// #docl Объектный интерфейс com_FileStream </brief>
end;

VipInterface vcom_FileStream( vcomIDispatch ) Implements com_FileStream (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MemoryStream( comIDispatch );
// #docl Объектный интерфейс com_MemoryStream </brief>
end;

VipInterface vcom_MemoryStream( vcomIDispatch ) Implements com_MemoryStream (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Path( comIDispatch );
// #docl Объектный интерфейс com_Path </brief>
end;

VipInterface vcom_Path( vcomIDispatch ) Implements com_Path (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PathTooLongException( comIDispatch );
// #docl Объектный интерфейс com_PathTooLongException </brief>
end;

VipInterface vcom_PathTooLongException( vcomIDispatch ) Implements com_PathTooLongException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TextReader( comIDispatch );
// #docl Объектный интерфейс com_TextReader </brief>
end;

VipInterface vcom_TextReader( vcomIDispatch ) Implements com_TextReader (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StreamReader( comIDispatch );
// #docl Объектный интерфейс com_StreamReader </brief>
end;

VipInterface vcom_StreamReader( vcomIDispatch ) Implements com_StreamReader (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StreamWriter( comIDispatch );
// #docl Объектный интерфейс com_StreamWriter </brief>
end;

VipInterface vcom_StreamWriter( vcomIDispatch ) Implements com_StreamWriter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StringReader( comIDispatch );
// #docl Объектный интерфейс com_StringReader </brief>
end;

VipInterface vcom_StringReader( vcomIDispatch ) Implements com_StringReader (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StringWriter( comIDispatch );
// #docl Объектный интерфейс com_StringWriter </brief>
end;

VipInterface vcom_StringWriter( vcomIDispatch ) Implements com_StringWriter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AccessedThroughPropertyAttribute( comIDispatch );
// #docl Объектный интерфейс com_AccessedThroughPropertyAttribute </brief>
end;

VipInterface vcom_AccessedThroughPropertyAttribute( vcomIDispatch ) Implements com_AccessedThroughPropertyAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CallConvCdecl( comIDispatch );
// #docl Объектный интерфейс com_CallConvCdecl </brief>
end;

VipInterface vcom_CallConvCdecl( vcomIDispatch ) Implements com_CallConvCdecl (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CallConvStdcall( comIDispatch );
// #docl Объектный интерфейс com_CallConvStdcall </brief>
end;

VipInterface vcom_CallConvStdcall( vcomIDispatch ) Implements com_CallConvStdcall (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CallConvThiscall( comIDispatch );
// #docl Объектный интерфейс com_CallConvThiscall </brief>
end;

VipInterface vcom_CallConvThiscall( vcomIDispatch ) Implements com_CallConvThiscall (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CallConvFastcall( comIDispatch );
// #docl Объектный интерфейс com_CallConvFastcall </brief>
end;

VipInterface vcom_CallConvFastcall( vcomIDispatch ) Implements com_CallConvFastcall (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CustomConstantAttribute( comIDispatch );
// #docl Объектный интерфейс com_CustomConstantAttribute </brief>
end;

VipInterface vcom_CustomConstantAttribute( vcomIDispatch ) Implements com_CustomConstantAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DateTimeConstantAttribute( comIDispatch );
// #docl Объектный интерфейс com_DateTimeConstantAttribute </brief>
end;

VipInterface vcom_DateTimeConstantAttribute( vcomIDispatch ) Implements com_DateTimeConstantAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DiscardableAttribute( comIDispatch );
// #docl Объектный интерфейс com_DiscardableAttribute </brief>
end;

VipInterface vcom_DiscardableAttribute( vcomIDispatch ) Implements com_DiscardableAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DecimalConstantAttribute( comIDispatch );
// #docl Объектный интерфейс com_DecimalConstantAttribute </brief>
end;

VipInterface vcom_DecimalConstantAttribute( vcomIDispatch ) Implements com_DecimalConstantAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CompilationRelaxationsAttribute( comIDispatch );
// #docl Объектный интерфейс com_CompilationRelaxationsAttribute </brief>
end;

VipInterface vcom_CompilationRelaxationsAttribute( vcomIDispatch ) Implements com_CompilationRelaxationsAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CompilerGlobalScopeAttribute( comIDispatch );
// #docl Объектный интерфейс com_CompilerGlobalScopeAttribute </brief>
end;

VipInterface vcom_CompilerGlobalScopeAttribute( vcomIDispatch ) Implements com_CompilerGlobalScopeAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IndexerNameAttribute( comIDispatch );
// #docl Объектный интерфейс com_IndexerNameAttribute </brief>
end;

VipInterface vcom_IndexerNameAttribute( vcomIDispatch ) Implements com_IndexerNameAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsVolatile( comIDispatch );
// #docl Объектный интерфейс com_IsVolatile </brief>
end;

VipInterface vcom_IsVolatile( vcomIDispatch ) Implements com_IsVolatile (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodImplAttribute( comIDispatch );
// #docl Объектный интерфейс com_MethodImplAttribute </brief>
end;

VipInterface vcom_MethodImplAttribute( vcomIDispatch ) Implements com_MethodImplAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RequiredAttributeAttribute( comIDispatch );
// #docl Объектный интерфейс com_RequiredAttributeAttribute </brief>
end;

VipInterface vcom_RequiredAttributeAttribute( vcomIDispatch ) Implements com_RequiredAttributeAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsCopyConstructed( comIDispatch );
// #docl Объектный интерфейс com_IsCopyConstructed </brief>
end;

VipInterface vcom_IsCopyConstructed( vcomIDispatch ) Implements com_IsCopyConstructed (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NativeCppClassAttribute( comIDispatch );
// #docl Объектный интерфейс com_NativeCppClassAttribute </brief>
end;

VipInterface vcom_NativeCppClassAttribute( vcomIDispatch ) Implements com_NativeCppClassAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IDispatchConstantAttribute( comIDispatch );
// #docl Объектный интерфейс com_IDispatchConstantAttribute </brief>
end;

VipInterface vcom_IDispatchConstantAttribute( vcomIDispatch ) Implements com_IDispatchConstantAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IUnknownConstantAttribute( comIDispatch );
// #docl Объектный интерфейс com_IUnknownConstantAttribute </brief>
end;

VipInterface vcom_IUnknownConstantAttribute( vcomIDispatch ) Implements com_IUnknownConstantAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SecurityElement( comIDispatch );
// #docl Объектный интерфейс com_SecurityElement </brief>
end;

VipInterface vcom_SecurityElement( vcomIDispatch ) Implements com_SecurityElement (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_XmlSyntaxException( comIDispatch );
// #docl Объектный интерфейс com_XmlSyntaxException </brief>
end;

VipInterface vcom_XmlSyntaxException( vcomIDispatch ) Implements com_XmlSyntaxException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CodeAccessPermission( comIDispatch );
// #docl Объектный интерфейс com_CodeAccessPermission </brief>
end;

VipInterface vcom_CodeAccessPermission( vcomIDispatch ) Implements com_CodeAccessPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EnvironmentPermission( comIDispatch );
// #docl Объектный интерфейс com_EnvironmentPermission </brief>
end;

VipInterface vcom_EnvironmentPermission( vcomIDispatch ) Implements com_EnvironmentPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileDialogPermission( comIDispatch );
// #docl Объектный интерфейс com_FileDialogPermission </brief>
end;

VipInterface vcom_FileDialogPermission( vcomIDispatch ) Implements com_FileDialogPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileIOPermission( comIDispatch );
// #docl Объектный интерфейс com_FileIOPermission </brief>
end;

VipInterface vcom_FileIOPermission( vcomIDispatch ) Implements com_FileIOPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SecurityAttribute( comIDispatch );
// #docl Объектный интерфейс com_SecurityAttribute </brief>
end;

VipInterface vcom_SecurityAttribute( vcomIDispatch ) Implements com_SecurityAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CodeAccessSecurityAttribute( comIDispatch );
// #docl Объектный интерфейс com_CodeAccessSecurityAttribute </brief>
end;

VipInterface vcom_CodeAccessSecurityAttribute( vcomIDispatch ) Implements com_CodeAccessSecurityAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HostProtectionAttribute( comIDispatch );
// #docl Объектный интерфейс com_HostProtectionAttribute </brief>
end;

VipInterface vcom_HostProtectionAttribute( vcomIDispatch ) Implements com_HostProtectionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsolatedStoragePermission( comIDispatch );
// #docl Объектный интерфейс com_IsolatedStoragePermission </brief>
end;

VipInterface vcom_IsolatedStoragePermission( vcomIDispatch ) Implements com_IsolatedStoragePermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsolatedStorageFilePermission( comIDispatch );
// #docl Объектный интерфейс com_IsolatedStorageFilePermission </brief>
end;

VipInterface vcom_IsolatedStorageFilePermission( vcomIDispatch ) Implements com_IsolatedStorageFilePermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EnvironmentPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_EnvironmentPermissionAttribute </brief>
end;

VipInterface vcom_EnvironmentPermissionAttribute( vcomIDispatch ) Implements com_EnvironmentPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileDialogPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_FileDialogPermissionAttribute </brief>
end;

VipInterface vcom_FileDialogPermissionAttribute( vcomIDispatch ) Implements com_FileDialogPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FileIOPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_FileIOPermissionAttribute </brief>
end;

VipInterface vcom_FileIOPermissionAttribute( vcomIDispatch ) Implements com_FileIOPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_KeyContainerPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_KeyContainerPermissionAttribute </brief>
end;

VipInterface vcom_KeyContainerPermissionAttribute( vcomIDispatch ) Implements com_KeyContainerPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PrincipalPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_PrincipalPermissionAttribute </brief>
end;

VipInterface vcom_PrincipalPermissionAttribute( vcomIDispatch ) Implements com_PrincipalPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ReflectionPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_ReflectionPermissionAttribute </brief>
end;

VipInterface vcom_ReflectionPermissionAttribute( vcomIDispatch ) Implements com_ReflectionPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RegistryPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_RegistryPermissionAttribute </brief>
end;

VipInterface vcom_RegistryPermissionAttribute( vcomIDispatch ) Implements com_RegistryPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SecurityPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_SecurityPermissionAttribute </brief>
end;

VipInterface vcom_SecurityPermissionAttribute( vcomIDispatch ) Implements com_SecurityPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UIPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_UIPermissionAttribute </brief>
end;

VipInterface vcom_UIPermissionAttribute( vcomIDispatch ) Implements com_UIPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ZoneIdentityPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_ZoneIdentityPermissionAttribute </brief>
end;

VipInterface vcom_ZoneIdentityPermissionAttribute( vcomIDispatch ) Implements com_ZoneIdentityPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StrongNameIdentityPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_StrongNameIdentityPermissionAttribute </brief>
end;

VipInterface vcom_StrongNameIdentityPermissionAttribute( vcomIDispatch ) Implements com_StrongNameIdentityPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SiteIdentityPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_SiteIdentityPermissionAttribute </brief>
end;

VipInterface vcom_SiteIdentityPermissionAttribute( vcomIDispatch ) Implements com_SiteIdentityPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UrlIdentityPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_UrlIdentityPermissionAttribute </brief>
end;

VipInterface vcom_UrlIdentityPermissionAttribute( vcomIDispatch ) Implements com_UrlIdentityPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PublisherIdentityPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_PublisherIdentityPermissionAttribute </brief>
end;

VipInterface vcom_PublisherIdentityPermissionAttribute( vcomIDispatch ) Implements com_PublisherIdentityPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsolatedStoragePermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_IsolatedStoragePermissionAttribute </brief>
end;

VipInterface vcom_IsolatedStoragePermissionAttribute( vcomIDispatch ) Implements com_IsolatedStoragePermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsolatedStorageFilePermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_IsolatedStorageFilePermissionAttribute </brief>
end;

VipInterface vcom_IsolatedStorageFilePermissionAttribute( vcomIDispatch ) Implements com_IsolatedStorageFilePermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PermissionSetAttribute( comIDispatch );
// #docl Объектный интерфейс com_PermissionSetAttribute </brief>
end;

VipInterface vcom_PermissionSetAttribute( vcomIDispatch ) Implements com_PermissionSetAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ReflectionPermission( comIDispatch );
// #docl Объектный интерфейс com_ReflectionPermission </brief>
end;

VipInterface vcom_ReflectionPermission( vcomIDispatch ) Implements com_ReflectionPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PrincipalPermission( comIDispatch );
// #docl Объектный интерфейс com_PrincipalPermission </brief>
end;

VipInterface vcom_PrincipalPermission( vcomIDispatch ) Implements com_PrincipalPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SecurityPermission( comIDispatch );
// #docl Объектный интерфейс com_SecurityPermission </brief>
end;

VipInterface vcom_SecurityPermission( vcomIDispatch ) Implements com_SecurityPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SiteIdentityPermission( comIDispatch );
// #docl Объектный интерфейс com_SiteIdentityPermission </brief>
end;

VipInterface vcom_SiteIdentityPermission( vcomIDispatch ) Implements com_SiteIdentityPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StrongNameIdentityPermission( comIDispatch );
// #docl Объектный интерфейс com_StrongNameIdentityPermission </brief>
end;

VipInterface vcom_StrongNameIdentityPermission( vcomIDispatch ) Implements com_StrongNameIdentityPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_StrongNamePublicKeyBlob( comIDispatch );
// #docl Объектный интерфейс com_StrongNamePublicKeyBlob </brief>
end;

VipInterface vcom_StrongNamePublicKeyBlob( vcomIDispatch ) Implements com_StrongNamePublicKeyBlob (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UIPermission( comIDispatch );
// #docl Объектный интерфейс com_UIPermission </brief>
end;

VipInterface vcom_UIPermission( vcomIDispatch ) Implements com_UIPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UrlIdentityPermission( comIDispatch );
// #docl Объектный интерфейс com_UrlIdentityPermission </brief>
end;

VipInterface vcom_UrlIdentityPermission( vcomIDispatch ) Implements com_UrlIdentityPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ZoneIdentityPermission( comIDispatch );
// #docl Объектный интерфейс com_ZoneIdentityPermission </brief>
end;

VipInterface vcom_ZoneIdentityPermission( vcomIDispatch ) Implements com_ZoneIdentityPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GacIdentityPermissionAttribute( comIDispatch );
// #docl Объектный интерфейс com_GacIdentityPermissionAttribute </brief>
end;

VipInterface vcom_GacIdentityPermissionAttribute( vcomIDispatch ) Implements com_GacIdentityPermissionAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GacIdentityPermission( comIDispatch );
// #docl Объектный интерфейс com_GacIdentityPermission </brief>
end;

VipInterface vcom_GacIdentityPermission( vcomIDispatch ) Implements com_GacIdentityPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_KeyContainerPermissionAccessEntry( comIDispatch );
// #docl Объектный интерфейс com_KeyContainerPermissionAccessEntry </brief>
end;

VipInterface vcom_KeyContainerPermissionAccessEntry( vcomIDispatch ) Implements com_KeyContainerPermissionAccessEntry (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_KeyContainerPermissionAccessEntryCollection( comIDispatch );
// #docl Объектный интерфейс com_KeyContainerPermissionAccessEntryCollection </brief>
end;

VipInterface vcom_KeyContainerPermissionAccessEntryCollection( vcomIDispatch ) Implements com_KeyContainerPermissionAccessEntryCollection (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_KeyContainerPermissionAccessEntryEnumerator( comIDispatch );
// #docl Объектный интерфейс com_KeyContainerPermissionAccessEntryEnumerator </brief>
end;

VipInterface vcom_KeyContainerPermissionAccessEntryEnumerator( vcomIDispatch ) Implements com_KeyContainerPermissionAccessEntryEnumerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_KeyContainerPermission( comIDispatch );
// #docl Объектный интерфейс com_KeyContainerPermission </brief>
end;

VipInterface vcom_KeyContainerPermission( vcomIDispatch ) Implements com_KeyContainerPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PublisherIdentityPermission( comIDispatch );
// #docl Объектный интерфейс com_PublisherIdentityPermission </brief>
end;

VipInterface vcom_PublisherIdentityPermission( vcomIDispatch ) Implements com_PublisherIdentityPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RegistryPermission( comIDispatch );
// #docl Объектный интерфейс com_RegistryPermission </brief>
end;

VipInterface vcom_RegistryPermission( vcomIDispatch ) Implements com_RegistryPermission (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SuppressUnmanagedCodeSecurityAttribute( comIDispatch );
// #docl Объектный интерфейс com_SuppressUnmanagedCodeSecurityAttribute </brief>
end;

VipInterface vcom_SuppressUnmanagedCodeSecurityAttribute( vcomIDispatch ) Implements com_SuppressUnmanagedCodeSecurityAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UnverifiableCodeAttribute( comIDispatch );
// #docl Объектный интерфейс com_UnverifiableCodeAttribute </brief>
end;

VipInterface vcom_UnverifiableCodeAttribute( vcomIDispatch ) Implements com_UnverifiableCodeAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AllowPartiallyTrustedCallersAttribute( comIDispatch );
// #docl Объектный интерфейс com_AllowPartiallyTrustedCallersAttribute </brief>
end;

VipInterface vcom_AllowPartiallyTrustedCallersAttribute( vcomIDispatch ) Implements com_AllowPartiallyTrustedCallersAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HostSecurityManager( comIDispatch );
// #docl Объектный интерфейс com_HostSecurityManager </brief>
end;

VipInterface vcom_HostSecurityManager( vcomIDispatch ) Implements com_HostSecurityManager (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PermissionSet( comIDispatch );
// #docl Объектный интерфейс com_PermissionSet </brief>
end;

VipInterface vcom_PermissionSet( vcomIDispatch ) Implements com_PermissionSet (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NamedPermissionSet( comIDispatch );
// #docl Объектный интерфейс com_NamedPermissionSet </brief>
end;

VipInterface vcom_NamedPermissionSet( vcomIDispatch ) Implements com_NamedPermissionSet (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SecurityException( comIDispatch );
// #docl Объектный интерфейс com_SecurityException </brief>
end;

VipInterface vcom_SecurityException( vcomIDispatch ) Implements com_SecurityException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HostProtectionException( comIDispatch );
// #docl Объектный интерфейс com_HostProtectionException </brief>
end;

VipInterface vcom_HostProtectionException( vcomIDispatch ) Implements com_HostProtectionException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SecurityManager( comIDispatch );
// #docl Объектный интерфейс com_SecurityManager </brief>
end;

VipInterface vcom_SecurityManager( vcomIDispatch ) Implements com_SecurityManager (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_VerificationException( comIDispatch );
// #docl Объектный интерфейс com_VerificationException </brief>
end;

VipInterface vcom_VerificationException( vcomIDispatch ) Implements com_VerificationException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ContextAttribute( comIDispatch );
// #docl Объектный интерфейс com_ContextAttribute </brief>
end;

VipInterface vcom_ContextAttribute( vcomIDispatch ) Implements com_ContextAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AsyncResult( comIDispatch );
// #docl Объектный интерфейс com_AsyncResult </brief>
end;

VipInterface vcom_AsyncResult( vcomIDispatch ) Implements com_AsyncResult (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ChannelServices( comIDispatch );
// #docl Объектный интерфейс com_ChannelServices </brief>
end;

VipInterface vcom_ChannelServices( vcomIDispatch ) Implements com_ChannelServices (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ClientChannelSinkStack( comIDispatch );
// #docl Объектный интерфейс com_ClientChannelSinkStack </brief>
end;

VipInterface vcom_ClientChannelSinkStack( vcomIDispatch ) Implements com_ClientChannelSinkStack (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ServerChannelSinkStack( comIDispatch );
// #docl Объектный интерфейс com_ServerChannelSinkStack </brief>
end;

VipInterface vcom_ServerChannelSinkStack( vcomIDispatch ) Implements com_ServerChannelSinkStack (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ClientSponsor( comIDispatch );
// #docl Объектный интерфейс com_ClientSponsor </brief>
end;

VipInterface vcom_ClientSponsor( vcomIDispatch ) Implements com_ClientSponsor (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CrossContextDelegate( comIDispatch );
// #docl Объектный интерфейс com_CrossContextDelegate </brief>
end;

VipInterface vcom_CrossContextDelegate( vcomIDispatch ) Implements com_CrossContextDelegate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Context( comIDispatch );
// #docl Объектный интерфейс com_Context </brief>
end;

VipInterface vcom_Context( vcomIDispatch ) Implements com_Context (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ContextProperty( comIDispatch );
// #docl Объектный интерфейс com_ContextProperty </brief>
end;

VipInterface vcom_ContextProperty( vcomIDispatch ) Implements com_ContextProperty (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EnterpriseServicesHelper( comIDispatch );
// #docl Объектный интерфейс com_EnterpriseServicesHelper </brief>
end;

VipInterface vcom_EnterpriseServicesHelper( vcomIDispatch ) Implements com_EnterpriseServicesHelper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ChannelDataStore( comIDispatch );
// #docl Объектный интерфейс com_ChannelDataStore </brief>
end;

VipInterface vcom_ChannelDataStore( vcomIDispatch ) Implements com_ChannelDataStore (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TransportHeaders( comIDispatch );
// #docl Объектный интерфейс com_TransportHeaders </brief>
end;

VipInterface vcom_TransportHeaders( vcomIDispatch ) Implements com_TransportHeaders (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SinkProviderData( comIDispatch );
// #docl Объектный интерфейс com_SinkProviderData </brief>
end;

VipInterface vcom_SinkProviderData( vcomIDispatch ) Implements com_SinkProviderData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BaseChannelObjectWithProperties( comIDispatch );
// #docl Объектный интерфейс com_BaseChannelObjectWithProperties </brief>
end;

VipInterface vcom_BaseChannelObjectWithProperties( vcomIDispatch ) Implements com_BaseChannelObjectWithProperties (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BaseChannelSinkWithProperties( comIDispatch );
// #docl Объектный интерфейс com_BaseChannelSinkWithProperties </brief>
end;

VipInterface vcom_BaseChannelSinkWithProperties( vcomIDispatch ) Implements com_BaseChannelSinkWithProperties (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BaseChannelWithProperties( comIDispatch );
// #docl Объектный интерфейс com_BaseChannelWithProperties </brief>
end;

VipInterface vcom_BaseChannelWithProperties( vcomIDispatch ) Implements com_BaseChannelWithProperties (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_LifetimeServices( comIDispatch );
// #docl Объектный интерфейс com_LifetimeServices </brief>
end;

VipInterface vcom_LifetimeServices( vcomIDispatch ) Implements com_LifetimeServices (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ReturnMessage( comIDispatch );
// #docl Объектный интерфейс com_ReturnMessage </brief>
end;

VipInterface vcom_ReturnMessage( vcomIDispatch ) Implements com_ReturnMessage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodCall( comIDispatch );
// #docl Объектный интерфейс com_MethodCall </brief>
end;

VipInterface vcom_MethodCall( vcomIDispatch ) Implements com_MethodCall (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ConstructionCall( comIDispatch );
// #docl Объектный интерфейс com_ConstructionCall </brief>
end;

VipInterface vcom_ConstructionCall( vcomIDispatch ) Implements com_ConstructionCall (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodResponse( comIDispatch );
// #docl Объектный интерфейс com_MethodResponse </brief>
end;

VipInterface vcom_MethodResponse( vcomIDispatch ) Implements com_MethodResponse (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ConstructionResponse( comIDispatch );
// #docl Объектный интерфейс com_ConstructionResponse </brief>
end;

VipInterface vcom_ConstructionResponse( vcomIDispatch ) Implements com_ConstructionResponse (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InternalMessageWrapper( comIDispatch );
// #docl Объектный интерфейс com_InternalMessageWrapper </brief>
end;

VipInterface vcom_InternalMessageWrapper( vcomIDispatch ) Implements com_InternalMessageWrapper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodCallMessageWrapper( comIDispatch );
// #docl Объектный интерфейс com_MethodCallMessageWrapper </brief>
end;

VipInterface vcom_MethodCallMessageWrapper( vcomIDispatch ) Implements com_MethodCallMessageWrapper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MethodReturnMessageWrapper( comIDispatch );
// #docl Объектный интерфейс com_MethodReturnMessageWrapper </brief>
end;

VipInterface vcom_MethodReturnMessageWrapper( vcomIDispatch ) Implements com_MethodReturnMessageWrapper (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ObjRef( comIDispatch );
// #docl Объектный интерфейс com_ObjRef </brief>
end;

VipInterface vcom_ObjRef( vcomIDispatch ) Implements com_ObjRef (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OneWayAttribute( comIDispatch );
// #docl Объектный интерфейс com_OneWayAttribute </brief>
end;

VipInterface vcom_OneWayAttribute( vcomIDispatch ) Implements com_OneWayAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ProxyAttribute( comIDispatch );
// #docl Объектный интерфейс com_ProxyAttribute </brief>
end;

VipInterface vcom_ProxyAttribute( vcomIDispatch ) Implements com_ProxyAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RealProxy( comIDispatch );
// #docl Объектный интерфейс com_RealProxy </brief>
end;

VipInterface vcom_RealProxy( vcomIDispatch ) Implements com_RealProxy (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapAttribute( comIDispatch );
// #docl Объектный интерфейс com_SoapAttribute </brief>
end;

VipInterface vcom_SoapAttribute( vcomIDispatch ) Implements com_SoapAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapTypeAttribute( comIDispatch );
// #docl Объектный интерфейс com_SoapTypeAttribute </brief>
end;

VipInterface vcom_SoapTypeAttribute( vcomIDispatch ) Implements com_SoapTypeAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapMethodAttribute( comIDispatch );
// #docl Объектный интерфейс com_SoapMethodAttribute </brief>
end;

VipInterface vcom_SoapMethodAttribute( vcomIDispatch ) Implements com_SoapMethodAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapFieldAttribute( comIDispatch );
// #docl Объектный интерфейс com_SoapFieldAttribute </brief>
end;

VipInterface vcom_SoapFieldAttribute( vcomIDispatch ) Implements com_SoapFieldAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapParameterAttribute( comIDispatch );
// #docl Объектный интерфейс com_SoapParameterAttribute </brief>
end;

VipInterface vcom_SoapParameterAttribute( vcomIDispatch ) Implements com_SoapParameterAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RemotingConfiguration( comIDispatch );
// #docl Объектный интерфейс com_RemotingConfiguration </brief>
end;

VipInterface vcom_RemotingConfiguration( vcomIDispatch ) Implements com_RemotingConfiguration (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TypeEntry( comIDispatch );
// #docl Объектный интерфейс com_TypeEntry </brief>
end;

VipInterface vcom_TypeEntry( vcomIDispatch ) Implements com_TypeEntry (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ActivatedClientTypeEntry( comIDispatch );
// #docl Объектный интерфейс com_ActivatedClientTypeEntry </brief>
end;

VipInterface vcom_ActivatedClientTypeEntry( vcomIDispatch ) Implements com_ActivatedClientTypeEntry (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ActivatedServiceTypeEntry( comIDispatch );
// #docl Объектный интерфейс com_ActivatedServiceTypeEntry </brief>
end;

VipInterface vcom_ActivatedServiceTypeEntry( vcomIDispatch ) Implements com_ActivatedServiceTypeEntry (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_WellKnownClientTypeEntry( comIDispatch );
// #docl Объектный интерфейс com_WellKnownClientTypeEntry </brief>
end;

VipInterface vcom_WellKnownClientTypeEntry( vcomIDispatch ) Implements com_WellKnownClientTypeEntry (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_WellKnownServiceTypeEntry( comIDispatch );
// #docl Объектный интерфейс com_WellKnownServiceTypeEntry </brief>
end;

VipInterface vcom_WellKnownServiceTypeEntry( vcomIDispatch ) Implements com_WellKnownServiceTypeEntry (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RemotingException( comIDispatch );
// #docl Объектный интерфейс com_RemotingException </brief>
end;

VipInterface vcom_RemotingException( vcomIDispatch ) Implements com_RemotingException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ServerException( comIDispatch );
// #docl Объектный интерфейс com_ServerException </brief>
end;

VipInterface vcom_ServerException( vcomIDispatch ) Implements com_ServerException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RemotingTimeoutException( comIDispatch );
// #docl Объектный интерфейс com_RemotingTimeoutException </brief>
end;

VipInterface vcom_RemotingTimeoutException( vcomIDispatch ) Implements com_RemotingTimeoutException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RemotingServices( comIDispatch );
// #docl Объектный интерфейс com_RemotingServices </brief>
end;

VipInterface vcom_RemotingServices( vcomIDispatch ) Implements com_RemotingServices (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InternalRemotingServices( comIDispatch );
// #docl Объектный интерфейс com_InternalRemotingServices </brief>
end;

VipInterface vcom_InternalRemotingServices( vcomIDispatch ) Implements com_InternalRemotingServices (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MessageSurrogateFilter( comIDispatch );
// #docl Объектный интерфейс com_MessageSurrogateFilter </brief>
end;

VipInterface vcom_MessageSurrogateFilter( vcomIDispatch ) Implements com_MessageSurrogateFilter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RemotingSurrogateSelector( comIDispatch );
// #docl Объектный интерфейс com_RemotingSurrogateSelector </brief>
end;

VipInterface vcom_RemotingSurrogateSelector( vcomIDispatch ) Implements com_RemotingSurrogateSelector (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapServices( comIDispatch );
// #docl Объектный интерфейс com_SoapServices </brief>
end;

VipInterface vcom_SoapServices( vcomIDispatch ) Implements com_SoapServices (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapDateTime( comIDispatch );
// #docl Объектный интерфейс com_SoapDateTime </brief>
end;

VipInterface vcom_SoapDateTime( vcomIDispatch ) Implements com_SoapDateTime (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapDuration( comIDispatch );
// #docl Объектный интерфейс com_SoapDuration </brief>
end;

VipInterface vcom_SoapDuration( vcomIDispatch ) Implements com_SoapDuration (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapTime( comIDispatch );
// #docl Объектный интерфейс com_SoapTime </brief>
end;

VipInterface vcom_SoapTime( vcomIDispatch ) Implements com_SoapTime (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapDate( comIDispatch );
// #docl Объектный интерфейс com_SoapDate </brief>
end;

VipInterface vcom_SoapDate( vcomIDispatch ) Implements com_SoapDate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapYearMonth( comIDispatch );
// #docl Объектный интерфейс com_SoapYearMonth </brief>
end;

VipInterface vcom_SoapYearMonth( vcomIDispatch ) Implements com_SoapYearMonth (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapYear( comIDispatch );
// #docl Объектный интерфейс com_SoapYear </brief>
end;

VipInterface vcom_SoapYear( vcomIDispatch ) Implements com_SoapYear (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapMonthDay( comIDispatch );
// #docl Объектный интерфейс com_SoapMonthDay </brief>
end;

VipInterface vcom_SoapMonthDay( vcomIDispatch ) Implements com_SoapMonthDay (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapDay( comIDispatch );
// #docl Объектный интерфейс com_SoapDay </brief>
end;

VipInterface vcom_SoapDay( vcomIDispatch ) Implements com_SoapDay (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapMonth( comIDispatch );
// #docl Объектный интерфейс com_SoapMonth </brief>
end;

VipInterface vcom_SoapMonth( vcomIDispatch ) Implements com_SoapMonth (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapHexBinary( comIDispatch );
// #docl Объектный интерфейс com_SoapHexBinary </brief>
end;

VipInterface vcom_SoapHexBinary( vcomIDispatch ) Implements com_SoapHexBinary (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapBase64Binary( comIDispatch );
// #docl Объектный интерфейс com_SoapBase64Binary </brief>
end;

VipInterface vcom_SoapBase64Binary( vcomIDispatch ) Implements com_SoapBase64Binary (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapInteger( comIDispatch );
// #docl Объектный интерфейс com_SoapInteger </brief>
end;

VipInterface vcom_SoapInteger( vcomIDispatch ) Implements com_SoapInteger (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapPositiveInteger( comIDispatch );
// #docl Объектный интерфейс com_SoapPositiveInteger </brief>
end;

VipInterface vcom_SoapPositiveInteger( vcomIDispatch ) Implements com_SoapPositiveInteger (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapNonPositiveInteger( comIDispatch );
// #docl Объектный интерфейс com_SoapNonPositiveInteger </brief>
end;

VipInterface vcom_SoapNonPositiveInteger( vcomIDispatch ) Implements com_SoapNonPositiveInteger (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapNonNegativeInteger( comIDispatch );
// #docl Объектный интерфейс com_SoapNonNegativeInteger </brief>
end;

VipInterface vcom_SoapNonNegativeInteger( vcomIDispatch ) Implements com_SoapNonNegativeInteger (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapNegativeInteger( comIDispatch );
// #docl Объектный интерфейс com_SoapNegativeInteger </brief>
end;

VipInterface vcom_SoapNegativeInteger( vcomIDispatch ) Implements com_SoapNegativeInteger (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapAnyUri( comIDispatch );
// #docl Объектный интерфейс com_SoapAnyUri </brief>
end;

VipInterface vcom_SoapAnyUri( vcomIDispatch ) Implements com_SoapAnyUri (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapQName( comIDispatch );
// #docl Объектный интерфейс com_SoapQName </brief>
end;

VipInterface vcom_SoapQName( vcomIDispatch ) Implements com_SoapQName (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapNotation( comIDispatch );
// #docl Объектный интерфейс com_SoapNotation </brief>
end;

VipInterface vcom_SoapNotation( vcomIDispatch ) Implements com_SoapNotation (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapNormalizedString( comIDispatch );
// #docl Объектный интерфейс com_SoapNormalizedString </brief>
end;

VipInterface vcom_SoapNormalizedString( vcomIDispatch ) Implements com_SoapNormalizedString (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapToken( comIDispatch );
// #docl Объектный интерфейс com_SoapToken </brief>
end;

VipInterface vcom_SoapToken( vcomIDispatch ) Implements com_SoapToken (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapLanguage( comIDispatch );
// #docl Объектный интерфейс com_SoapLanguage </brief>
end;

VipInterface vcom_SoapLanguage( vcomIDispatch ) Implements com_SoapLanguage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapName( comIDispatch );
// #docl Объектный интерфейс com_SoapName </brief>
end;

VipInterface vcom_SoapName( vcomIDispatch ) Implements com_SoapName (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapIdrefs( comIDispatch );
// #docl Объектный интерфейс com_SoapIdrefs </brief>
end;

VipInterface vcom_SoapIdrefs( vcomIDispatch ) Implements com_SoapIdrefs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapEntities( comIDispatch );
// #docl Объектный интерфейс com_SoapEntities </brief>
end;

VipInterface vcom_SoapEntities( vcomIDispatch ) Implements com_SoapEntities (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapNmtoken( comIDispatch );
// #docl Объектный интерфейс com_SoapNmtoken </brief>
end;

VipInterface vcom_SoapNmtoken( vcomIDispatch ) Implements com_SoapNmtoken (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapNmtokens( comIDispatch );
// #docl Объектный интерфейс com_SoapNmtokens </brief>
end;

VipInterface vcom_SoapNmtokens( vcomIDispatch ) Implements com_SoapNmtokens (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapNcName( comIDispatch );
// #docl Объектный интерфейс com_SoapNcName </brief>
end;

VipInterface vcom_SoapNcName( vcomIDispatch ) Implements com_SoapNcName (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapId( comIDispatch );
// #docl Объектный интерфейс com_SoapId </brief>
end;

VipInterface vcom_SoapId( vcomIDispatch ) Implements com_SoapId (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapIdref( comIDispatch );
// #docl Объектный интерфейс com_SoapIdref </brief>
end;

VipInterface vcom_SoapIdref( vcomIDispatch ) Implements com_SoapIdref (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapEntity( comIDispatch );
// #docl Объектный интерфейс com_SoapEntity </brief>
end;

VipInterface vcom_SoapEntity( vcomIDispatch ) Implements com_SoapEntity (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SynchronizationAttribute( comIDispatch );
// #docl Объектный интерфейс com_SynchronizationAttribute </brief>
end;

VipInterface vcom_SynchronizationAttribute( vcomIDispatch ) Implements com_SynchronizationAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TrackingServices( comIDispatch );
// #docl Объектный интерфейс com_TrackingServices </brief>
end;

VipInterface vcom_TrackingServices( vcomIDispatch ) Implements com_TrackingServices (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UrlAttribute( comIDispatch );
// #docl Объектный интерфейс com_UrlAttribute </brief>
end;

VipInterface vcom_UrlAttribute( vcomIDispatch ) Implements com_UrlAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Header( comIDispatch );
// #docl Объектный интерфейс com_Header </brief>
end;

VipInterface vcom_Header( vcomIDispatch ) Implements com_Header (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HeaderHandler( comIDispatch );
// #docl Объектный интерфейс com_HeaderHandler </brief>
end;

VipInterface vcom_HeaderHandler( vcomIDispatch ) Implements com_HeaderHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CallContext( comIDispatch );
// #docl Объектный интерфейс com_CallContext </brief>
end;

VipInterface vcom_CallContext( vcomIDispatch ) Implements com_CallContext (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_LogicalCallContext( comIDispatch );
// #docl Объектный интерфейс com_LogicalCallContext </brief>
end;

VipInterface vcom_LogicalCallContext( vcomIDispatch ) Implements com_LogicalCallContext (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ObjectHandle( comIDispatch );
// #docl Объектный интерфейс com_ObjectHandle </brief>
  property  ToString// #docl Дополнительная документация отсутствует. </brief>
                     : string Read;
  function  Equals  // #docl  Комментарии отсутствуют. </brief> 
                     ( obj // #docl Тип параметра: входной.
                     : VARIANT ) : boolean; // #docl Результат типа boolean
  function  GetHashCode  // #docl  Комментарии отсутствуют. </brief> 
                          : longint; // #docl Результат типа longint
  function  GetType  // #docl  Комментарии отсутствуют. </brief> 
                      : com_Type; // #docl Результат типа com_Type
  function  GetLifetimeService  // #docl  Комментарии отсутствуют. </brief> 
                                 : VARIANT; // #docl Результат типа VARIANT
  function  InitializeLifetimeService  // #docl  Комментарии отсутствуют. </brief> 
                                        : VARIANT; // #docl Результат типа VARIANT
  function  CreateObjRef  // #docl  Комментарии отсутствуют. </brief> 
                           ( requestedType // #docl Тип параметра: входной.
                           : com_Type ) : com_ObjRef; // #docl Результат типа com_ObjRef
  function  Unwrap  // #docl  Комментарии отсутствуют. </brief> 
                     : VARIANT; // #docl Результат типа VARIANT
end;

VipInterface vcom_ObjectHandle( vcomIDispatch ) Implements com_ObjectHandle (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsolatedStorage( comIDispatch );
// #docl Объектный интерфейс com_IsolatedStorage </brief>
end;

VipInterface vcom_IsolatedStorage( vcomIDispatch ) Implements com_IsolatedStorage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsolatedStorageFileStream( comIDispatch );
// #docl Объектный интерфейс com_IsolatedStorageFileStream </brief>
end;

VipInterface vcom_IsolatedStorageFileStream( vcomIDispatch ) Implements com_IsolatedStorageFileStream (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsolatedStorageException( comIDispatch );
// #docl Объектный интерфейс com_IsolatedStorageException </brief>
end;

VipInterface vcom_IsolatedStorageException( vcomIDispatch ) Implements com_IsolatedStorageException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_IsolatedStorageFile( comIDispatch );
// #docl Объектный интерфейс com_IsolatedStorageFile </brief>
end;

VipInterface vcom_IsolatedStorageFile( vcomIDispatch ) Implements com_IsolatedStorageFile (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InternalRM( comIDispatch );
// #docl Объектный интерфейс com_InternalRM </brief>
end;

VipInterface vcom_InternalRM( vcomIDispatch ) Implements com_InternalRM (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_InternalST( comIDispatch );
// #docl Объектный интерфейс com_InternalST </brief>
end;

VipInterface vcom_InternalST( vcomIDispatch ) Implements com_InternalST (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapMessage( comIDispatch );
// #docl Объектный интерфейс com_SoapMessage </brief>
end;

VipInterface vcom_SoapMessage( vcomIDispatch ) Implements com_SoapMessage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SoapFault( comIDispatch );
// #docl Объектный интерфейс com_SoapFault </brief>
end;

VipInterface vcom_SoapFault( vcomIDispatch ) Implements com_SoapFault (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ServerFault( comIDispatch );
// #docl Объектный интерфейс com_ServerFault </brief>
end;

VipInterface vcom_ServerFault( vcomIDispatch ) Implements com_ServerFault (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BinaryFormatter( comIDispatch );
// #docl Объектный интерфейс com_BinaryFormatter </brief>
end;

VipInterface vcom_BinaryFormatter( vcomIDispatch ) Implements com_BinaryFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DynamicILInfo( comIDispatch );
// #docl Объектный интерфейс com_DynamicILInfo </brief>
end;

VipInterface vcom_DynamicILInfo( vcomIDispatch ) Implements com_DynamicILInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DynamicMethod( comIDispatch );
// #docl Объектный интерфейс com_DynamicMethod </brief>
end;

VipInterface vcom_DynamicMethod( vcomIDispatch ) Implements com_DynamicMethod (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OpCodes( comIDispatch );
// #docl Объектный интерфейс com_OpCodes </brief>
end;

VipInterface vcom_OpCodes( vcomIDispatch ) Implements com_OpCodes (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GenericTypeParameterBuilder( comIDispatch );
// #docl Объектный интерфейс com_GenericTypeParameterBuilder </brief>
end;

VipInterface vcom_GenericTypeParameterBuilder( vcomIDispatch ) Implements com_GenericTypeParameterBuilder (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_UnmanagedMarshal( comIDispatch );
// #docl Объектный интерфейс com_UnmanagedMarshal </brief>
end;

VipInterface vcom_UnmanagedMarshal( vcomIDispatch ) Implements com_UnmanagedMarshal (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_KeySizes( comIDispatch );
// #docl Объектный интерфейс com_KeySizes </brief>
end;

VipInterface vcom_KeySizes( vcomIDispatch ) Implements com_KeySizes (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CryptographicException( comIDispatch );
// #docl Объектный интерфейс com_CryptographicException </brief>
end;

VipInterface vcom_CryptographicException( vcomIDispatch ) Implements com_CryptographicException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CryptographicUnexpectedOperationException( comIDispatch );
// #docl Объектный интерфейс com_CryptographicUnexpectedOperationException </brief>
end;

VipInterface vcom_CryptographicUnexpectedOperationException( vcomIDispatch ) Implements com_CryptographicUnexpectedOperationException (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RandomNumberGenerator( comIDispatch );
// #docl Объектный интерфейс com_RandomNumberGenerator </brief>
end;

VipInterface vcom_RandomNumberGenerator( vcomIDispatch ) Implements com_RandomNumberGenerator (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RNGCryptoServiceProvider( comIDispatch );
// #docl Объектный интерфейс com_RNGCryptoServiceProvider </brief>
end;

VipInterface vcom_RNGCryptoServiceProvider( vcomIDispatch ) Implements com_RNGCryptoServiceProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SymmetricAlgorithm( comIDispatch );
// #docl Объектный интерфейс com_SymmetricAlgorithm </brief>
end;

VipInterface vcom_SymmetricAlgorithm( vcomIDispatch ) Implements com_SymmetricAlgorithm (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AsymmetricAlgorithm( comIDispatch );
// #docl Объектный интерфейс com_AsymmetricAlgorithm </brief>
end;

VipInterface vcom_AsymmetricAlgorithm( vcomIDispatch ) Implements com_AsymmetricAlgorithm (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AsymmetricKeyExchangeDeformatter( comIDispatch );
// #docl Объектный интерфейс com_AsymmetricKeyExchangeDeformatter </brief>
end;

VipInterface vcom_AsymmetricKeyExchangeDeformatter( vcomIDispatch ) Implements com_AsymmetricKeyExchangeDeformatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AsymmetricKeyExchangeFormatter( comIDispatch );
// #docl Объектный интерфейс com_AsymmetricKeyExchangeFormatter </brief>
end;

VipInterface vcom_AsymmetricKeyExchangeFormatter( vcomIDispatch ) Implements com_AsymmetricKeyExchangeFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AsymmetricSignatureDeformatter( comIDispatch );
// #docl Объектный интерфейс com_AsymmetricSignatureDeformatter </brief>
end;

VipInterface vcom_AsymmetricSignatureDeformatter( vcomIDispatch ) Implements com_AsymmetricSignatureDeformatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AsymmetricSignatureFormatter( comIDispatch );
// #docl Объектный интерфейс com_AsymmetricSignatureFormatter </brief>
end;

VipInterface vcom_AsymmetricSignatureFormatter( vcomIDispatch ) Implements com_AsymmetricSignatureFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ToBase64Transform( comIDispatch );
// #docl Объектный интерфейс com_ToBase64Transform </brief>
end;

VipInterface vcom_ToBase64Transform( vcomIDispatch ) Implements com_ToBase64Transform (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FromBase64Transform( comIDispatch );
// #docl Объектный интерфейс com_FromBase64Transform </brief>
end;

VipInterface vcom_FromBase64Transform( vcomIDispatch ) Implements com_FromBase64Transform (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CryptoAPITransform( comIDispatch );
// #docl Объектный интерфейс com_CryptoAPITransform </brief>
end;

VipInterface vcom_CryptoAPITransform( vcomIDispatch ) Implements com_CryptoAPITransform (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CspParameters( comIDispatch );
// #docl Объектный интерфейс com_CspParameters </brief>
end;

VipInterface vcom_CspParameters( vcomIDispatch ) Implements com_CspParameters (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CryptoConfig( comIDispatch );
// #docl Объектный интерфейс com_CryptoConfig </brief>
end;

VipInterface vcom_CryptoConfig( vcomIDispatch ) Implements com_CryptoConfig (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CryptoStream( comIDispatch );
// #docl Объектный интерфейс com_CryptoStream </brief>
end;

VipInterface vcom_CryptoStream( vcomIDispatch ) Implements com_CryptoStream (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DES( comIDispatch );
// #docl Объектный интерфейс com_DES </brief>
end;

VipInterface vcom_DES( vcomIDispatch ) Implements com_DES (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DESCryptoServiceProvider( comIDispatch );
// #docl Объектный интерфейс com_DESCryptoServiceProvider </brief>
end;

VipInterface vcom_DESCryptoServiceProvider( vcomIDispatch ) Implements com_DESCryptoServiceProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DeriveBytes( comIDispatch );
// #docl Объектный интерфейс com_DeriveBytes </brief>
end;

VipInterface vcom_DeriveBytes( vcomIDispatch ) Implements com_DeriveBytes (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DSA( comIDispatch );
// #docl Объектный интерфейс com_DSA </brief>
end;

VipInterface vcom_DSA( vcomIDispatch ) Implements com_DSA (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DSACryptoServiceProvider( comIDispatch );
// #docl Объектный интерфейс com_DSACryptoServiceProvider </brief>
end;

VipInterface vcom_DSACryptoServiceProvider( vcomIDispatch ) Implements com_DSACryptoServiceProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DSASignatureDeformatter( comIDispatch );
// #docl Объектный интерфейс com_DSASignatureDeformatter </brief>
end;

VipInterface vcom_DSASignatureDeformatter( vcomIDispatch ) Implements com_DSASignatureDeformatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DSASignatureFormatter( comIDispatch );
// #docl Объектный интерфейс com_DSASignatureFormatter </brief>
end;

VipInterface vcom_DSASignatureFormatter( vcomIDispatch ) Implements com_DSASignatureFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HashAlgorithm( comIDispatch );
// #docl Объектный интерфейс com_HashAlgorithm </brief>
end;

VipInterface vcom_HashAlgorithm( vcomIDispatch ) Implements com_HashAlgorithm (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_KeyedHashAlgorithm( comIDispatch );
// #docl Объектный интерфейс com_KeyedHashAlgorithm </brief>
end;

VipInterface vcom_KeyedHashAlgorithm( vcomIDispatch ) Implements com_KeyedHashAlgorithm (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HMAC( comIDispatch );
// #docl Объектный интерфейс com_HMAC </brief>
end;

VipInterface vcom_HMAC( vcomIDispatch ) Implements com_HMAC (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HMACMD5( comIDispatch );
// #docl Объектный интерфейс com_HMACMD5 </brief>
end;

VipInterface vcom_HMACMD5( vcomIDispatch ) Implements com_HMACMD5 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HMACRIPEMD160( comIDispatch );
// #docl Объектный интерфейс com_HMACRIPEMD160 </brief>
end;

VipInterface vcom_HMACRIPEMD160( vcomIDispatch ) Implements com_HMACRIPEMD160 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HMACSHA1( comIDispatch );
// #docl Объектный интерфейс com_HMACSHA1 </brief>
end;

VipInterface vcom_HMACSHA1( vcomIDispatch ) Implements com_HMACSHA1 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HMACSHA256( comIDispatch );
// #docl Объектный интерфейс com_HMACSHA256 </brief>
end;

VipInterface vcom_HMACSHA256( vcomIDispatch ) Implements com_HMACSHA256 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HMACSHA384( comIDispatch );
// #docl Объектный интерфейс com_HMACSHA384 </brief>
end;

VipInterface vcom_HMACSHA384( vcomIDispatch ) Implements com_HMACSHA384 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_HMACSHA512( comIDispatch );
// #docl Объектный интерфейс com_HMACSHA512 </brief>
end;

VipInterface vcom_HMACSHA512( vcomIDispatch ) Implements com_HMACSHA512 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CspKeyContainerInfo( comIDispatch );
// #docl Объектный интерфейс com_CspKeyContainerInfo </brief>
end;

VipInterface vcom_CspKeyContainerInfo( vcomIDispatch ) Implements com_CspKeyContainerInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MACTripleDES( comIDispatch );
// #docl Объектный интерфейс com_MACTripleDES </brief>
end;

VipInterface vcom_MACTripleDES( vcomIDispatch ) Implements com_MACTripleDES (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MD5( comIDispatch );
// #docl Объектный интерфейс com_MD5 </brief>
end;

VipInterface vcom_MD5( vcomIDispatch ) Implements com_MD5 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MD5CryptoServiceProvider( comIDispatch );
// #docl Объектный интерфейс com_MD5CryptoServiceProvider </brief>
end;

VipInterface vcom_MD5CryptoServiceProvider( vcomIDispatch ) Implements com_MD5CryptoServiceProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MaskGenerationMethod( comIDispatch );
// #docl Объектный интерфейс com_MaskGenerationMethod </brief>
end;

VipInterface vcom_MaskGenerationMethod( vcomIDispatch ) Implements com_MaskGenerationMethod (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PasswordDeriveBytes( comIDispatch );
// #docl Объектный интерфейс com_PasswordDeriveBytes </brief>
end;

VipInterface vcom_PasswordDeriveBytes( vcomIDispatch ) Implements com_PasswordDeriveBytes (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_PKCS1MaskGenerationMethod( comIDispatch );
// #docl Объектный интерфейс com_PKCS1MaskGenerationMethod </brief>
end;

VipInterface vcom_PKCS1MaskGenerationMethod( vcomIDispatch ) Implements com_PKCS1MaskGenerationMethod (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RC2( comIDispatch );
// #docl Объектный интерфейс com_RC2 </brief>
end;

VipInterface vcom_RC2( vcomIDispatch ) Implements com_RC2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RC2CryptoServiceProvider( comIDispatch );
// #docl Объектный интерфейс com_RC2CryptoServiceProvider </brief>
end;

VipInterface vcom_RC2CryptoServiceProvider( vcomIDispatch ) Implements com_RC2CryptoServiceProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Rfc2898DeriveBytes( comIDispatch );
// #docl Объектный интерфейс com_Rfc2898DeriveBytes </brief>
end;

VipInterface vcom_Rfc2898DeriveBytes( vcomIDispatch ) Implements com_Rfc2898DeriveBytes (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RIPEMD160( comIDispatch );
// #docl Объектный интерфейс com_RIPEMD160 </brief>
end;

VipInterface vcom_RIPEMD160( vcomIDispatch ) Implements com_RIPEMD160 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RIPEMD160Managed( comIDispatch );
// #docl Объектный интерфейс com_RIPEMD160Managed </brief>
end;

VipInterface vcom_RIPEMD160Managed( vcomIDispatch ) Implements com_RIPEMD160Managed (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RSA( comIDispatch );
// #docl Объектный интерфейс com_RSA </brief>
end;

VipInterface vcom_RSA( vcomIDispatch ) Implements com_RSA (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RSACryptoServiceProvider( comIDispatch );
// #docl Объектный интерфейс com_RSACryptoServiceProvider </brief>
end;

VipInterface vcom_RSACryptoServiceProvider( vcomIDispatch ) Implements com_RSACryptoServiceProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RSAOAEPKeyExchangeDeformatter( comIDispatch );
// #docl Объектный интерфейс com_RSAOAEPKeyExchangeDeformatter </brief>
end;

VipInterface vcom_RSAOAEPKeyExchangeDeformatter( vcomIDispatch ) Implements com_RSAOAEPKeyExchangeDeformatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RSAOAEPKeyExchangeFormatter( comIDispatch );
// #docl Объектный интерфейс com_RSAOAEPKeyExchangeFormatter </brief>
end;

VipInterface vcom_RSAOAEPKeyExchangeFormatter( vcomIDispatch ) Implements com_RSAOAEPKeyExchangeFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RSAPKCS1KeyExchangeDeformatter( comIDispatch );
// #docl Объектный интерфейс com_RSAPKCS1KeyExchangeDeformatter </brief>
end;

VipInterface vcom_RSAPKCS1KeyExchangeDeformatter( vcomIDispatch ) Implements com_RSAPKCS1KeyExchangeDeformatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RSAPKCS1KeyExchangeFormatter( comIDispatch );
// #docl Объектный интерфейс com_RSAPKCS1KeyExchangeFormatter </brief>
end;

VipInterface vcom_RSAPKCS1KeyExchangeFormatter( vcomIDispatch ) Implements com_RSAPKCS1KeyExchangeFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RSAPKCS1SignatureDeformatter( comIDispatch );
// #docl Объектный интерфейс com_RSAPKCS1SignatureDeformatter </brief>
end;

VipInterface vcom_RSAPKCS1SignatureDeformatter( vcomIDispatch ) Implements com_RSAPKCS1SignatureDeformatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RSAPKCS1SignatureFormatter( comIDispatch );
// #docl Объектный интерфейс com_RSAPKCS1SignatureFormatter </brief>
end;

VipInterface vcom_RSAPKCS1SignatureFormatter( vcomIDispatch ) Implements com_RSAPKCS1SignatureFormatter (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Rijndael( comIDispatch );
// #docl Объектный интерфейс com_Rijndael </brief>
end;

VipInterface vcom_Rijndael( vcomIDispatch ) Implements com_Rijndael (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RijndaelManaged( comIDispatch );
// #docl Объектный интерфейс com_RijndaelManaged </brief>
end;

VipInterface vcom_RijndaelManaged( vcomIDispatch ) Implements com_RijndaelManaged (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RijndaelManagedTransform( comIDispatch );
// #docl Объектный интерфейс com_RijndaelManagedTransform </brief>
end;

VipInterface vcom_RijndaelManagedTransform( vcomIDispatch ) Implements com_RijndaelManagedTransform (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SHA1( comIDispatch );
// #docl Объектный интерфейс com_SHA1 </brief>
end;

VipInterface vcom_SHA1( vcomIDispatch ) Implements com_SHA1 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SHA1CryptoServiceProvider( comIDispatch );
// #docl Объектный интерфейс com_SHA1CryptoServiceProvider </brief>
end;

VipInterface vcom_SHA1CryptoServiceProvider( vcomIDispatch ) Implements com_SHA1CryptoServiceProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SHA1Managed( comIDispatch );
// #docl Объектный интерфейс com_SHA1Managed </brief>
end;

VipInterface vcom_SHA1Managed( vcomIDispatch ) Implements com_SHA1Managed (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SHA256( comIDispatch );
// #docl Объектный интерфейс com_SHA256 </brief>
end;

VipInterface vcom_SHA256( vcomIDispatch ) Implements com_SHA256 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SHA256Managed( comIDispatch );
// #docl Объектный интерфейс com_SHA256Managed </brief>
end;

VipInterface vcom_SHA256Managed( vcomIDispatch ) Implements com_SHA256Managed (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SHA384( comIDispatch );
// #docl Объектный интерфейс com_SHA384 </brief>
end;

VipInterface vcom_SHA384( vcomIDispatch ) Implements com_SHA384 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SHA384Managed( comIDispatch );
// #docl Объектный интерфейс com_SHA384Managed </brief>
end;

VipInterface vcom_SHA384Managed( vcomIDispatch ) Implements com_SHA384Managed (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SHA512( comIDispatch );
// #docl Объектный интерфейс com_SHA512 </brief>
end;

VipInterface vcom_SHA512( vcomIDispatch ) Implements com_SHA512 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SHA512Managed( comIDispatch );
// #docl Объектный интерфейс com_SHA512Managed </brief>
end;

VipInterface vcom_SHA512Managed( vcomIDispatch ) Implements com_SHA512Managed (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SignatureDescription( comIDispatch );
// #docl Объектный интерфейс com_SignatureDescription </brief>
end;

VipInterface vcom_SignatureDescription( vcomIDispatch ) Implements com_SignatureDescription (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TripleDES( comIDispatch );
// #docl Объектный интерфейс com_TripleDES </brief>
end;

VipInterface vcom_TripleDES( vcomIDispatch ) Implements com_TripleDES (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_TripleDESCryptoServiceProvider( comIDispatch );
// #docl Объектный интерфейс com_TripleDESCryptoServiceProvider </brief>
end;

VipInterface vcom_TripleDESCryptoServiceProvider( vcomIDispatch ) Implements com_TripleDESCryptoServiceProvider (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_X509Certificate( comIDispatch );
// #docl Объектный интерфейс com_X509Certificate </brief>
end;

VipInterface vcom_X509Certificate( vcomIDispatch ) Implements com_X509Certificate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : TPtr; flags   // #docl Свойства экземпляра.
                      : word );
end;


//--- coClasses---------------------------

VipInterface coObject // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coException // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_Exception );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coValueType // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_ValueType );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnum // #docl  Комментарии отсутствуют. </brief> 
                    ( vcom_Enum );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDelegate // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_Delegate );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMulticastDelegate // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_MulticastDelegate );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coArray // #docl  Комментарии отсутствуют. </brief> 
                     ( vcom_Array );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coString // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_String );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStringComparer // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_StringComparer );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStringBuilder // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_StringBuilder );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSystemException // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_SystemException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOutOfMemoryException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_OutOfMemoryException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStackOverflowException // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_StackOverflowException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDataMisalignedException // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_DataMisalignedException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coExecutionEngineException // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_ExecutionEngineException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMemberAccessException // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_MemberAccessException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coActivator // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAccessViolationException // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_AccessViolationException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationActivator // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ApplicationActivator );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ApplicationException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEventArgs // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_EventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coResolveEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_ResolveEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyLoadEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_AssemblyLoadEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coResolveEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_ResolveEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyLoadEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_AssemblyLoadEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAppDomainInitializer // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_AppDomainInitializer );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMarshalByRefObject // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_MarshalByRefObject );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCrossAppDomainDelegate // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_CrossAppDomainDelegate );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAppDomainManager // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_AppDomainManager );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAppDomainSetup // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAttribute // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coLoaderOptimizationAttribute // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_LoaderOptimizationAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAppDomainUnloadedException // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_AppDomainUnloadedException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEvidenceBase // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_EvidenceBase );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coActivationArguments // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_ActivationArguments );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationId // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_ApplicationId );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coArgumentException // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_ArgumentException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coArgumentNullException // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_ArgumentNullException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coArgumentOutOfRangeException // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_ArgumentOutOfRangeException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coArithmeticException // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_ArithmeticException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coArrayTypeMismatchException // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_ArrayTypeMismatchException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAsyncCallback // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_AsyncCallback );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAttributeUsageAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_AttributeUsageAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBadImageFormatException // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_BadImageFormatException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBuffer // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_Buffer );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCannotUnloadAppDomainException // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_CannotUnloadAppDomainException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCharEnumerator // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_CharEnumerator );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCLSCompliantAttribute // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_CLSCompliantAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeUnloadedException // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_TypeUnloadedException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCriticalFinalizerObject // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_CriticalFinalizerObject );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coContextMarshalException // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_ContextMarshalException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coContextBoundObject // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_ContextBoundObject );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coContextStaticAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_ContextStaticAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTimeZone // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_TimeZone );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDBNull // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_DBNull );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBinder // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_Binder );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDivideByZeroException // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_DivideByZeroException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDuplicateWaitObjectException // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_DuplicateWaitObjectException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeLoadException // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_TypeLoadException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEntryPointNotFoundException // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_EntryPointNotFoundException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDllNotFoundException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_DllNotFoundException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnvironment // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_Environment );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEventHandler // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_EventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFieldAccessException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_FieldAccessException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFlagsAttribute // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_FlagsAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFormatException // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_FormatException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIndexOutOfRangeException // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_IndexOutOfRangeException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInvalidCastException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_InvalidCastException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInvalidOperationException // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_InvalidOperationException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInvalidProgramException // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_InvalidProgramException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coLocalDataStoreSlot // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_LocalDataStoreSlot );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodAccessException // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_MethodAccessException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMissingMemberException // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_MissingMemberException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMissingFieldException // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_MissingFieldException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMissingMethodException // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_MissingMethodException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMulticastNotSupportedException // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_MulticastNotSupportedException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNonSerializedAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_NonSerializedAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNotFiniteNumberException // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_NotFiniteNumberException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNotImplementedException // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_NotImplementedException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNotSupportedException // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_NotSupportedException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNullReferenceException // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_NullReferenceException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coObjectDisposedException // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_ObjectDisposedException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coObsoleteAttribute // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_ObsoleteAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOperatingSystem // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_OperatingSystem );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOperationCanceledException // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_OperationCanceledException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOverflowException // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_OverflowException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coParamArrayAttribute // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_ParamArrayAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPlatformNotSupportedException // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_PlatformNotSupportedException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRandom // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_Random );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRankException // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_RankException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMemberInfo // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeInfo // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_TypeInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSerializableAttribute // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_SerializableAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSTAThreadAttribute // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_STAThreadAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMTAThreadAttribute // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_MTAThreadAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTimeoutException // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_TimeoutException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeInitializationException // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_TypeInitializationException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUnauthorizedAccessException // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_UnauthorizedAccessException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUnhandledExceptionEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_UnhandledExceptionEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUnhandledExceptionEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_UnhandledExceptionEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coVersion // #docl  Комментарии отсутствуют. </brief> 
                       ( vcom_Version );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coWeakReference // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_WeakReference );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coWaitHandle // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_WaitHandle );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEventWaitHandle // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_EventWaitHandle );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAutoResetEvent // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_AutoResetEvent );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coContextCallback // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_ContextCallback );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coManualResetEvent // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_ManualResetEvent );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMonitor // #docl  Комментарии отсутствуют. </brief> 
                       ( vcom_Monitor );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMutex // #docl  Комментарии отсутствуют. </brief> 
                     ( vcom_Mutex );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOverlapped // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_Overlapped );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coReaderWriterLock // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_ReaderWriterLock );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSynchronizationLockException // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_SynchronizationLockException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coThread // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coThreadAbortException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ThreadAbortException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coThreadInterruptedException // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_ThreadInterruptedException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRegisteredWaitHandle // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_RegisteredWaitHandle );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coWaitCallback // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_WaitCallback );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coWaitOrTimerCallback // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_WaitOrTimerCallback );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIOCompletionCallback // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_IOCompletionCallback );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coThreadStart // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_ThreadStart );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coThreadStateException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ThreadStateException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coThreadStaticAttribute // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_ThreadStaticAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTimerCallback // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_TimerCallback );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCaseInsensitiveComparer // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_CaseInsensitiveComparer );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCaseInsensitiveHashCodeProvider // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_CaseInsensitiveHashCodeProvider );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCollectionBase // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_CollectionBase );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDictionaryBase // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_DictionaryBase );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coReadOnlyCollectionBase // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_ReadOnlyCollectionBase );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coQueue // #docl  Комментарии отсутствуют. </brief> 
                     ( vcom_Queue );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coArrayList // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_ArrayList );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBitArray // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_BitArray );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComparer // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_Comparer );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHashtable // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_Hashtable );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSortedList // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_SortedList );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNullable // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_Nullable );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coKeyNotFoundException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_KeyNotFoundException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coConditionalAttribute // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ConditionalAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebugger // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_Debugger );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebuggerStepThroughAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_DebuggerStepThroughAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebuggerStepperBoundaryAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_DebuggerStepperBoundaryAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebuggerHiddenAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_DebuggerHiddenAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebuggerNonUserCodeAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_DebuggerNonUserCodeAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebuggableAttribute // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_DebuggableAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebuggerBrowsableAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_DebuggerBrowsableAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebuggerTypeProxyAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_DebuggerTypeProxyAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebuggerDisplayAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_DebuggerDisplayAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDebuggerVisualizerAttribute // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_DebuggerVisualizerAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStackTrace // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_StackTrace );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStackFrame // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_StackFrame );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSymDocumentType // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_SymDocumentType );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSymLanguageType // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_SymLanguageType );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSymLanguageVendor // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_SymLanguageVendor );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAmbiguousMatchException // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_AmbiguousMatchException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coModuleResolveEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_ModuleResolveEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyCopyrightAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_AssemblyCopyrightAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyTrademarkAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_AssemblyTrademarkAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyProductAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_AssemblyProductAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyCompanyAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_AssemblyCompanyAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyDescriptionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_AssemblyDescriptionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyTitleAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_AssemblyTitleAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyConfigurationAttribute // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_AssemblyConfigurationAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyDefaultAliasAttribute // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_AssemblyDefaultAliasAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyInformationalVersionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                     ( vcom_AssemblyInformationalVersionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyFileVersionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_AssemblyFileVersionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyCultureAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_AssemblyCultureAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyVersionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_AssemblyVersionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyKeyFileAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_AssemblyKeyFileAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyDelaySignAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_AssemblyDelaySignAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyAlgorithmIdAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_AssemblyAlgorithmIdAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyFlagsAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_AssemblyFlagsAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyKeyNameAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_AssemblyKeyNameAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyName // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyNameProxy // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_AssemblyNameProxy );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCustomAttributeFormatException // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_CustomAttributeFormatException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodBase // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coConstructorInfo // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCustomAttributeData // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_CustomAttributeData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDefaultMemberAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_DefaultMemberAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEventInfo // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFieldInfo // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInvalidFilterCriteriaException // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_InvalidFilterCriteriaException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coManifestResourceInfo // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ManifestResourceInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMemberFilter // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_MemberFilter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodInfo // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coObfuscateAssemblyAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_ObfuscateAssemblyAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coObfuscationAttribute // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ObfuscationAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coExceptionHandlingClause // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_ExceptionHandlingClause );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodBody // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_MethodBody );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coLocalVariableInfo // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_LocalVariableInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coParameterInfo // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPointer // #docl  Комментарии отсутствуют. </brief> 
                       ( vcom_Pointer );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPropertyInfo // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coReflectionTypeLoadException // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_ReflectionTypeLoadException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStrongNameKeyPair // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_StrongNameKeyPair );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTargetException // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_TargetException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTargetInvocationException // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_TargetInvocationException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTargetParameterCountException // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_TargetParameterCountException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeDelegator // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_TypeDelegator );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeFilter // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_TypeFilter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFormatterConverter // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_FormatterConverter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFormatterServices // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_FormatterServices );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOptionalFieldAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_OptionalFieldAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOnSerializingAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_OnSerializingAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOnSerializedAttribute // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_OnSerializedAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOnDeserializingAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_OnDeserializingAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOnDeserializedAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_OnDeserializedAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSerializationBinder // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_SerializationBinder );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSerializationException // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_SerializationException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSerializationInfo // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_SerializationInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSerializationInfoEnumerator // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_SerializationInfoEnumerator );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coObjectIDGenerator // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_ObjectIDGenerator );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coObjectManager // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_ObjectManager );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSurrogateSelector // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_SurrogateSelector );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCalendar // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_Calendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCompareInfo // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_CompareInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCultureInfo // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_CultureInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCultureNotFoundException // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_CultureNotFoundException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDateTimeFormatInfo // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_DateTimeFormatInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDaylightTime // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_DaylightTime );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGregorianCalendar // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_GregorianCalendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHebrewCalendar // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_HebrewCalendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHijriCalendar // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_HijriCalendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEastAsianLunisolarCalendar // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_EastAsianLunisolarCalendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coJulianCalendar // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_JulianCalendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coJapaneseCalendar // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_JapaneseCalendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coKoreanCalendar // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_KoreanCalendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRegionInfo // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_RegionInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSortKey // #docl  Комментарии отсутствуют. </brief> 
                       ( vcom_SortKey );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStringInfo // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_StringInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTaiwanCalendar // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_TaiwanCalendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTextElementEnumerator // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_TextElementEnumerator );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTextInfo // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_TextInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coThaiBuddhistCalendar // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ThaiBuddhistCalendar );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNumberFormatInfo // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_NumberFormatInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEncoding // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_Encoding );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEncoder // #docl  Комментарии отсутствуют. </brief> 
                       ( vcom_Encoder );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDecoder // #docl  Комментарии отсутствуют. </brief> 
                       ( vcom_Decoder );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coASCIIEncoding // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_ASCIIEncoding );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUnicodeEncoding // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_UnicodeEncoding );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUTF7Encoding // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_UTF7Encoding );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUTF8Encoding // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_UTF8Encoding );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMissingManifestResourceException // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_MissingManifestResourceException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMissingSatelliteAssemblyException // #docl  Комментарии отсутствуют. </brief> 
                                                 ( vcom_MissingSatelliteAssemblyException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNeutralResourcesLanguageAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                 ( vcom_NeutralResourcesLanguageAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coResourceManager // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_ResourceManager );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coResourceReader // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_ResourceReader );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coResourceSet // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_ResourceSet );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coResourceWriter // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_ResourceWriter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSatelliteContractVersionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                 ( vcom_SatelliteContractVersionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRegistry // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_Registry );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRegistryKey // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_RegistryKey );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAllMembershipCondition // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_AllMembershipCondition );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationDirectory // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ApplicationDirectory );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationDirectoryMembershipCondition // #docl  Комментарии отсутствуют. </brief> 
                                                       ( vcom_ApplicationDirectoryMembershipCondition );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationSecurityInfo // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_ApplicationSecurityInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationSecurityManager // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_ApplicationSecurityManager );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationTrust // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_ApplicationTrust );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationTrustCollection // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_ApplicationTrustCollection );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coApplicationTrustEnumerator // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_ApplicationTrustEnumerator );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCodeGroup // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_CodeGroup );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileCodeGroup // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_FileCodeGroup );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFirstMatchCodeGroup // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_FirstMatchCodeGroup );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTrustManagerContext // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_TrustManagerContext );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCodeConnectAccess // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_CodeConnectAccess );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNetCodeGroup // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_NetCodeGroup );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPermissionRequestEvidence // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_PermissionRequestEvidence );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPolicyException // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_PolicyException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPolicyLevel // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_PolicyLevel );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPolicyStatement // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_PolicyStatement );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSite // #docl  Комментарии отсутствуют. </brief> 
                    ( vcom_Site );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSiteMembershipCondition // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_SiteMembershipCondition );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStrongNameMembershipCondition // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_StrongNameMembershipCondition );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUnionCodeGroup // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_UnionCodeGroup );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUrl // #docl  Комментарии отсутствуют. </brief> 
                   ( vcom_Url );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUrlMembershipCondition // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_UrlMembershipCondition );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coZone // #docl  Комментарии отсутствуют. </brief> 
                    ( vcom_Zone );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coZoneMembershipCondition // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_ZoneMembershipCondition );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGacInstalled // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_GacInstalled );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGacMembershipCondition // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_GacMembershipCondition );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHashMembershipCondition // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_HashMembershipCondition );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPublisher // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_Publisher );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPublisherMembershipCondition // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_PublisherMembershipCondition );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coClaimsIdentity // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_ClaimsIdentity );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGenericIdentity // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_GenericIdentity );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coClaimsPrincipal // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_ClaimsPrincipal );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGenericPrincipal // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_GenericPrincipal );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coWindowsIdentity // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_WindowsIdentity );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coWindowsImpersonationContext // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_WindowsImpersonationContext );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coWindowsPrincipal // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_WindowsPrincipal );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUnmanagedFunctionPointerAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                 ( vcom_UnmanagedFunctionPointerAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDispIdAttribute // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_DispIdAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInterfaceTypeAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_InterfaceTypeAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComDefaultInterfaceAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_ComDefaultInterfaceAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coClassInterfaceAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_ClassInterfaceAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComVisibleAttribute // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_ComVisibleAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeLibImportClassAttribute // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_TypeLibImportClassAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coLCIDConversionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_LCIDConversionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComRegisterFunctionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_ComRegisterFunctionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComUnregisterFunctionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_ComUnregisterFunctionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coProgIdAttribute // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_ProgIdAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coImportedFromTypeLibAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_ImportedFromTypeLibAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIDispatchImplAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_IDispatchImplAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComSourceInterfacesAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_ComSourceInterfacesAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComConversionLossAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_ComConversionLossAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeLibTypeAttribute // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_TypeLibTypeAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeLibFuncAttribute // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_TypeLibFuncAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeLibVarAttribute // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_TypeLibVarAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMarshalAsAttribute // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_MarshalAsAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComImportAttribute // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_ComImportAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGuidAttribute // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_GuidAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPreserveSigAttribute // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_PreserveSigAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInAttribute // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_InAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOutAttribute // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_OutAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOptionalAttribute // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_OptionalAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDllImportAttribute // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_DllImportAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStructLayoutAttribute // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_StructLayoutAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFieldOffsetAttribute // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_FieldOffsetAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComAliasNameAttribute // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_ComAliasNameAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAutomationProxyAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_AutomationProxyAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPrimaryInteropAssemblyAttribute // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_PrimaryInteropAssemblyAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCoClassAttribute // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_CoClassAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComEventInterfaceAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_ComEventInterfaceAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeLibVersionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_TypeLibVersionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coComCompatibleVersionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_ComCompatibleVersionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBestFitMappingAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_BestFitMappingAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDefaultCharSetAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_DefaultCharSetAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSetWin32ContextInIDispatchAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_SetWin32ContextInIDispatchAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coExternalException // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_ExternalException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCOMException // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_COMException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInvalidOleVariantTypeException // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_InvalidOleVariantTypeException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMarshalDirectiveException // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_MarshalDirectiveException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRuntimeEnvironment // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_RuntimeEnvironment );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSEHException // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_SEHException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBStrWrapper // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_BStrWrapper );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCurrencyWrapper // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_CurrencyWrapper );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDispatchWrapper // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_DispatchWrapper );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coErrorWrapper // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_ErrorWrapper );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coExtensibleClassFactory // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_ExtensibleClassFactory );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInvalidComObjectException // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_InvalidComObjectException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coObjectCreationDelegate // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_ObjectCreationDelegate );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRegistrationServices // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcomIRegistrationServices );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSafeArrayRankMismatchException // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_SafeArrayRankMismatchException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSafeArrayTypeMismatchException // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_SafeArrayTypeMismatchException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeLibConverter // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUnknownWrapper // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_UnknownWrapper );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTextWriter // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_TextWriter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStream // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_Stream );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBinaryReader // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_BinaryReader );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBinaryWriter // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_BinaryWriter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBufferedStream // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_BufferedStream );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDirectory // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_Directory );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileSystemInfo // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_FileSystemInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDirectoryInfo // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_DirectoryInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIOException // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_IOException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDirectoryNotFoundException // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_DirectoryNotFoundException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDriveInfo // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_DriveInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDriveNotFoundException // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_DriveNotFoundException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEndOfStreamException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_EndOfStreamException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileInfo // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_FileInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileLoadException // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_FileLoadException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileNotFoundException // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_FileNotFoundException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileStream // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_FileStream );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMemoryStream // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_MemoryStream );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPath // #docl  Комментарии отсутствуют. </brief> 
                    ( vcom_Path );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPathTooLongException // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_PathTooLongException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTextReader // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_TextReader );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStreamReader // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_StreamReader );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStreamWriter // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_StreamWriter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStringReader // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_StringReader );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStringWriter // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_StringWriter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAccessedThroughPropertyAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_AccessedThroughPropertyAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCallConvCdecl // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_CallConvCdecl );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCallConvStdcall // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_CallConvStdcall );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCallConvThiscall // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_CallConvThiscall );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCallConvFastcall // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_CallConvFastcall );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCustomConstantAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_CustomConstantAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDateTimeConstantAttribute // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_DateTimeConstantAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDiscardableAttribute // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_DiscardableAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDecimalConstantAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_DecimalConstantAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCompilationRelaxationsAttribute // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_CompilationRelaxationsAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCompilerGlobalScopeAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_CompilerGlobalScopeAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIndexerNameAttribute // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_IndexerNameAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIsVolatile // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_IsVolatile );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodImplAttribute // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_MethodImplAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRequiredAttributeAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_RequiredAttributeAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIsCopyConstructed // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_IsCopyConstructed );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNativeCppClassAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_NativeCppClassAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIDispatchConstantAttribute // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_IDispatchConstantAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIUnknownConstantAttribute // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_IUnknownConstantAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSecurityElement // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_SecurityElement );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coXmlSyntaxException // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_XmlSyntaxException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCodeAccessPermission // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_CodeAccessPermission );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnvironmentPermission // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_EnvironmentPermission );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileDialogPermission // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_FileDialogPermission );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileIOPermission // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_FileIOPermission );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSecurityAttribute // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_SecurityAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCodeAccessSecurityAttribute // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_CodeAccessSecurityAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHostProtectionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_HostProtectionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIsolatedStoragePermission // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_IsolatedStoragePermission );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIsolatedStorageFilePermission // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_IsolatedStorageFilePermission );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnvironmentPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_EnvironmentPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileDialogPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_FileDialogPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFileIOPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_FileIOPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coKeyContainerPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_KeyContainerPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPrincipalPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_PrincipalPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coReflectionPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_ReflectionPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRegistryPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_RegistryPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSecurityPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_SecurityPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUIPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_UIPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coZoneIdentityPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_ZoneIdentityPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStrongNameIdentityPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                     ( vcom_StrongNameIdentityPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSiteIdentityPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_SiteIdentityPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUrlIdentityPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_UrlIdentityPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPublisherIdentityPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                    ( vcom_PublisherIdentityPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIsolatedStoragePermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                  ( vcom_IsolatedStoragePermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIsolatedStorageFilePermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                      ( vcom_IsolatedStorageFilePermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPermissionSetAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_PermissionSetAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStrongNamePublicKeyBlob // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_StrongNamePublicKeyBlob );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGacIdentityPermissionAttribute // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_GacIdentityPermissionAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coKeyContainerPermissionAccessEntry // #docl  Комментарии отсутствуют. </brief> 
                                                 ( vcom_KeyContainerPermissionAccessEntry );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coKeyContainerPermissionAccessEntryCollection // #docl  Комментарии отсутствуют. </brief> 
                                                           ( vcom_KeyContainerPermissionAccessEntryCollection );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coKeyContainerPermissionAccessEntryEnumerator // #docl  Комментарии отсутствуют. </brief> 
                                                           ( vcom_KeyContainerPermissionAccessEntryEnumerator );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSuppressUnmanagedCodeSecurityAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                      ( vcom_SuppressUnmanagedCodeSecurityAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUnverifiableCodeAttribute // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_UnverifiableCodeAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAllowPartiallyTrustedCallersAttribute // #docl  Комментарии отсутствуют. </brief> 
                                                     ( vcom_AllowPartiallyTrustedCallersAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHostSecurityManager // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_HostSecurityManager );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNamedPermissionSet // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_NamedPermissionSet );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSecurityException // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_SecurityException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHostProtectionException // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_HostProtectionException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSecurityManager // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_SecurityManager );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coVerificationException // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_VerificationException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coContextAttribute // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_ContextAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAsyncResult // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_AsyncResult );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coChannelServices // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_ChannelServices );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coClientChannelSinkStack // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_ClientChannelSinkStack );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coServerChannelSinkStack // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_ServerChannelSinkStack );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coClientSponsor // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_ClientSponsor );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCrossContextDelegate // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_CrossContextDelegate );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coContextProperty // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_ContextProperty );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnterpriseServicesHelper // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_EnterpriseServicesHelper );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coChannelDataStore // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_ChannelDataStore );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTransportHeaders // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_TransportHeaders );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSinkProviderData // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_SinkProviderData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBaseChannelObjectWithProperties // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_BaseChannelObjectWithProperties );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBaseChannelSinkWithProperties // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_BaseChannelSinkWithProperties );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBaseChannelWithProperties // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_BaseChannelWithProperties );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coLifetimeServices // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_LifetimeServices );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coReturnMessage // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_ReturnMessage );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodCall // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_MethodCall );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coConstructionCall // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_ConstructionCall );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodResponse // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_MethodResponse );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coConstructionResponse // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_ConstructionResponse );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInternalMessageWrapper // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_InternalMessageWrapper );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodCallMessageWrapper // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_MethodCallMessageWrapper );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodReturnMessageWrapper // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_MethodReturnMessageWrapper );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coObjRef // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_ObjRef );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOneWayAttribute // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_OneWayAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coProxyAttribute // #docl  Комментарии отсутствуют. </brief> 
                              ( vcom_ProxyAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRealProxy // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_RealProxy );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapAttribute // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_SoapAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapTypeAttribute // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_SoapTypeAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapMethodAttribute // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_SoapMethodAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapFieldAttribute // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_SoapFieldAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapParameterAttribute // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_SoapParameterAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRemotingConfiguration // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_RemotingConfiguration );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeEntry // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_TypeEntry );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coActivatedClientTypeEntry // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_ActivatedClientTypeEntry );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coActivatedServiceTypeEntry // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_ActivatedServiceTypeEntry );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coWellKnownClientTypeEntry // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_WellKnownClientTypeEntry );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coWellKnownServiceTypeEntry // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_WellKnownServiceTypeEntry );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRemotingException // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_RemotingException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coServerException // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_ServerException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRemotingTimeoutException // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_RemotingTimeoutException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRemotingServices // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_RemotingServices );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInternalRemotingServices // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_InternalRemotingServices );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMessageSurrogateFilter // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_MessageSurrogateFilter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRemotingSurrogateSelector // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_RemotingSurrogateSelector );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapServices // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_SoapServices );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapDateTime // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_SoapDateTime );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapDuration // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_SoapDuration );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapTime // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_SoapTime );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapYearMonth // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_SoapYearMonth );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapMonthDay // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_SoapMonthDay );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapDay // #docl  Комментарии отсутствуют. </brief> 
                       ( vcom_SoapDay );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapHexBinary // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_SoapHexBinary );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapBase64Binary // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_SoapBase64Binary );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapInteger // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_SoapInteger );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapPositiveInteger // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_SoapPositiveInteger );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapNonPositiveInteger // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_SoapNonPositiveInteger );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapNonNegativeInteger // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_SoapNonNegativeInteger );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapNegativeInteger // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_SoapNegativeInteger );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapAnyUri // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_SoapAnyUri );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapQName // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_SoapQName );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapNotation // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_SoapNotation );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapNormalizedString // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_SoapNormalizedString );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapToken // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_SoapToken );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapLanguage // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_SoapLanguage );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapName // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_SoapName );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapIdrefs // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_SoapIdrefs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapEntities // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_SoapEntities );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapNmtoken // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_SoapNmtoken );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapNmtokens // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_SoapNmtokens );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapNcName // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_SoapNcName );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapEntity // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_SoapEntity );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSynchronizationAttribute // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_SynchronizationAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTrackingServices // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_TrackingServices );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUrlAttribute // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_UrlAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHeader // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_Header );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHeaderHandler // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_HeaderHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCallContext // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_CallContext );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coLogicalCallContext // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_LogicalCallContext );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coObjectHandle // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_ObjectHandle );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIsolatedStorageFileStream // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_IsolatedStorageFileStream );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coIsolatedStorageException // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_IsolatedStorageException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInternalRM // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_InternalRM );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coInternalST // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_InternalST );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapMessage // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_SoapMessage );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSoapFault // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_SoapFault );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coServerFault // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_ServerFault );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBinaryFormatter // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_BinaryFormatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAssemblyBuilder // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coConstructorBuilder // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coILGenerator // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDynamicILInfo // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_DynamicILInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDynamicMethod // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_DynamicMethod );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEventBuilder // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFieldBuilder // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coLocalBuilder // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodBuilder // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCustomAttributeBuilder // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMethodRental // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coModuleBuilder // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOpCodes // #docl  Комментарии отсутствуют. </brief> 
                       ( vcom_OpCodes );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coParameterBuilder // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPropertyBuilder // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSignatureHelper // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTypeBuilder // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGenericTypeParameterBuilder // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_GenericTypeParameterBuilder );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnumBuilder // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_Object );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUnmanagedMarshal // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_UnmanagedMarshal );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coKeySizes // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_KeySizes );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCryptographicException // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_CryptographicException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCryptographicUnexpectedOperationException // #docl  Комментарии отсутствуют. </brief> 
                                                         ( vcom_CryptographicUnexpectedOperationException );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRandomNumberGenerator // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_RandomNumberGenerator );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRNGCryptoServiceProvider // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_RNGCryptoServiceProvider );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSymmetricAlgorithm // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_SymmetricAlgorithm );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAsymmetricAlgorithm // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_AsymmetricAlgorithm );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAsymmetricKeyExchangeDeformatter // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_AsymmetricKeyExchangeDeformatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAsymmetricKeyExchangeFormatter // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_AsymmetricKeyExchangeFormatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAsymmetricSignatureDeformatter // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_AsymmetricSignatureDeformatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAsymmetricSignatureFormatter // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_AsymmetricSignatureFormatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coToBase64Transform // #docl  Комментарии отсутствуют. </brief> 
                                 ( vcom_ToBase64Transform );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFromBase64Transform // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_FromBase64Transform );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCryptoAPITransform // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_CryptoAPITransform );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCspParameters // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_CspParameters );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCryptoConfig // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_CryptoConfig );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCryptoStream // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_CryptoStream );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDESCryptoServiceProvider // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_DESCryptoServiceProvider );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDeriveBytes // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_DeriveBytes );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDSA // #docl  Комментарии отсутствуют. </brief> 
                   ( vcom_DSA );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDSACryptoServiceProvider // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_DSACryptoServiceProvider );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDSASignatureDeformatter // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_DSASignatureDeformatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDSASignatureFormatter // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_DSASignatureFormatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHashAlgorithm // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_HashAlgorithm );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coKeyedHashAlgorithm // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_KeyedHashAlgorithm );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHMAC // #docl  Комментарии отсутствуют. </brief> 
                    ( vcom_HMAC );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHMACMD5 // #docl  Комментарии отсутствуют. </brief> 
                       ( vcom_HMACMD5 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHMACRIPEMD160 // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_HMACRIPEMD160 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHMACSHA1 // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_HMACSHA1 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHMACSHA256 // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_HMACSHA256 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHMACSHA384 // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_HMACSHA384 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHMACSHA512 // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_HMACSHA512 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCspKeyContainerInfo // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_CspKeyContainerInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMACTripleDES // #docl  Комментарии отсутствуют. </brief> 
                            ( vcom_MACTripleDES );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMD5 // #docl  Комментарии отсутствуют. </brief> 
                   ( vcom_MD5 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMD5CryptoServiceProvider // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_MD5CryptoServiceProvider );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMaskGenerationMethod // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_MaskGenerationMethod );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPasswordDeriveBytes // #docl  Комментарии отсутствуют. </brief> 
                                   ( vcom_PasswordDeriveBytes );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPKCS1MaskGenerationMethod // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_PKCS1MaskGenerationMethod );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRC2 // #docl  Комментарии отсутствуют. </brief> 
                   ( vcom_RC2 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRC2CryptoServiceProvider // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_RC2CryptoServiceProvider );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRfc2898DeriveBytes // #docl  Комментарии отсутствуют. </brief> 
                                  ( vcom_Rfc2898DeriveBytes );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRIPEMD160 // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_RIPEMD160 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRIPEMD160Managed // #docl  Комментарии отсутствуют. </brief> 
                                ( vcom_RIPEMD160Managed );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRSA // #docl  Комментарии отсутствуют. </brief> 
                   ( vcom_RSA );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRSACryptoServiceProvider // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_RSACryptoServiceProvider );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRSAOAEPKeyExchangeDeformatter // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_RSAOAEPKeyExchangeDeformatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRSAOAEPKeyExchangeFormatter // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_RSAOAEPKeyExchangeFormatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRSAPKCS1KeyExchangeDeformatter // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_RSAPKCS1KeyExchangeDeformatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRSAPKCS1KeyExchangeFormatter // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_RSAPKCS1KeyExchangeFormatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRSAPKCS1SignatureDeformatter // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_RSAPKCS1SignatureDeformatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRSAPKCS1SignatureFormatter // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_RSAPKCS1SignatureFormatter );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRijndael // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_Rijndael );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRijndaelManaged // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_RijndaelManaged );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRijndaelManagedTransform // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_RijndaelManagedTransform );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSHA1 // #docl  Комментарии отсутствуют. </brief> 
                    ( vcom_SHA1 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSHA1CryptoServiceProvider // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_SHA1CryptoServiceProvider );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSHA1Managed // #docl  Комментарии отсутствуют. </brief> 
                           ( vcom_SHA1Managed );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSHA256 // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_SHA256 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSHA256Managed // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_SHA256Managed );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSHA384 // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_SHA384 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSHA384Managed // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_SHA384Managed );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSHA512 // #docl  Комментарии отсутствуют. </brief> 
                      ( vcom_SHA512 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSHA512Managed // #docl  Комментарии отсутствуют. </brief> 
                             ( vcom_SHA512Managed );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSignatureDescription // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_SignatureDescription );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTripleDES // #docl  Комментарии отсутствуют. </brief> 
                         ( vcom_TripleDES );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTripleDESCryptoServiceProvider // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_TripleDESCryptoServiceProvider );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coX509Certificate // #docl  Комментарии отсутствуют. </brief> 
                               ( vcom_X509Certificate );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;


#endif
