//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 5.8 - Общая функциональность контура "Управление персоналом"
// obj-интерфейс "Иждивенцы физического лица"
//------------------------------------------------------------------------------

#ifndef _PDEPENDANTS_INCLUDED_
#define _PDEPENDANTS_INCLUDED_

#ifdef ComponentVersion
#component "z_Staff"
#end

#doc
obj-интерфейс "Иждивенцы физического лица"
#end
objinterface IPersonDependants;

#doc
получить количество или сумму вычетов на иждивенцев-инвалидов физического лица Person
#end
#ifdef Gal9_1
function GetInvalidDeductions(Person: comp; OnDate: date; var Deductions: double): boolean;
#else
function GetInvalidDeductions(Person: comp; OnDate: date; var Deductions: word): boolean;
#end

#doc
получить количество или сумму вычетов на иждивенцев физического лица Person
#end
#ifdef Gal9_1
function GetDependantDeductions(Person: comp; OnDate: date; var Deductions: double): boolean;
#else
function GetDependantDeductions(Person: comp; OnDate: date; var Deductions: word): boolean;
#end

#doc
получить количество вычетов на иждивенцев вида T
#end
#ifdef Gal9_1
function GetLgota(Person: comp; T: word): double;
#else
function GetLgota(Person: comp; T: word): word;
#end

#doc
#end
function IsVdovaChild(T : Word ; VdovaDate: Date): boolean;

#doc
установить вычеты в количестве Lgota для иждивенцев вида Т физического лица Person
#end
procedure SetLgota(Person: comp; T: word; Lgota: word; VdovaDate: date);

end;

#doc
obj-интерфейс "Иждивенцы физического лица"
#end
objinterface IPersonDependants1;

#doc
#end
function GetCountIjd(Person: comp): longint;

end;

#doc
obj-интерфейс "Иждивенцы физического лица"
#end
objinterface IPersonDependants2;

#doc
#end
#ifdef Gal9_1
function  GetLgotaNew(PsnLinksNrec: comp): double;
function  GetLgotaNew2(PsnLinksNrec: comp; OnDate: date): double;
#else
function  GetLgotaNew(PsnLinksNrec: comp): word;
function  GetLgotaNew2(PsnLinksNrec: comp; OnDate: date): word;
#end

end;

#doc
obj-интерфейс "Иждивенцы физического лица"
#end
objinterface IPersonDependants3;

#doc
#end
procedure SetLgotaNew(PsnLinksNrec: comp);

end;

#doc
obj-интерфейс "Иждивенцы физического лица"
#end
objinterface IPersonDependants4;

#doc
Получение даты окончания действия льготы для родственника PsnLinksNrec
#end
public function GetDateEndLgota(PsnLinksNrec: comp): date;

#doc
Получение количества всех вычетов на родственников для сотрудника Person
#end
public function GetCountAllLgot(Person: comp): longint;

#doc
Получение количества детей иждивенцев для сотрудника Person
#end
public function GetCountChildIjd(Person: comp): longint;

#doc
Установка льгот на иждивенцев для Беларуси
#end
procedure SetLgotaNew2(Person: comp);

end;

#doc
obj-интерфейс "Иждивенцы физического лица"
#end
objinterface IPersonDependants5;

#doc
#end
public function IsDocPerYear(psnLinksNrec: comp; curYear: word): boolean;

#doc
#end
public function IsDocPerMonth(psnLinksNrec: comp; curYear: word; curMonth: word; typeDoc: word): boolean;

#doc
#end
public function GetCode(curYear: word; mask: word; numChild: word): longInt;

#doc
#end
public function GetCodeDeduction(psnLinksNrec: comp; curYear: word; curMonth: word): longInt;

end;

#doc
obj-интерфейс "Иждивенцы физического лица"
#end
objinterface IPersonDependants6;

#doc
#end
public function GetDateEndStud(PsnLinksNrec: comp): date;

#doc
#end
public procedure SetStatus(PsnLinksNrec: comp);

end;

#doc
obj-интерфейс "Иждивенцы физического лица"
#end
objinterface IPersonDependants7;

#doc
#end
public function IsSpecNum(psnLinksNrec: comp): boolean;

#doc
#end
public function GetNumChild(psnLinksNrec: comp; curMonth: word; curYear: word): longInt;

end;

#doc
obj-интерфейс "Иждивенцы физического лица" (расширение 8)
#end
objinterface IPersonDependants8;

#doc
Установка льгот на иждивенцев для Украины
#end
procedure SetLgotaNew3(Person: comp);

end;

#doc
obj-интерфейс "Иждивенцы физического лица" (расширение 9)
#end
objinterface IPersonDependants9;

#doc
#end
#ifdef Gal9_1
function GetDependantDeductionsExt( Person: comp;
                                    OnDate: date;
                                    var Deductions: double;
                                    AMode: word): boolean;

function GetInvalidDeductionsExt( Person: comp;
                                  OnDate: date;
                                  var Deductions: double;
                                  AMode: word): boolean;
#else
function GetDependantDeductionsExt( Person: comp;
                                    OnDate: date;
                                    var Deductions: word;
                                    AMode: word): boolean;

function GetInvalidDeductionsExt( Person: comp;
                                  OnDate: date;
                                  var Deductions: word;
                                  AMode: word): boolean;
#end
end;

#doc
obj-интерфейс "Иждивенцы физического лица" (расширение 10)
#end
objinterface IPersonDependants10;

#doc
Создание таблицы в памяти по статусам
#end
public procedure CreateTableTmpSys_Uder;

end;

#doc
obj-интерфейс "Иждивенцы физического лица" (расширение 11)
#end
objinterface IPersonDependants11;

#doc
Создание таблицы в памяти по статусам
#end
public procedure CreateTableCatChildren;

end;

#doc
obj-интерфейс "Иждивенцы физического лица" (расширение 12)
#end
objinterface IPersonDependants12;

#doc
#end
public function GetCodeDeduction1(psnLinksNrec: comp; curYear: word; curMonth: word): longInt;

#doc
#end
public function GetCodeDeduction2(psnLinksNrec: comp; curYear: word; curMonth: word): longInt;

public function GetLgotaNewRus1(PsnLinksNrec: comp):
#ifdef Gal9_1
                                                double;
#else
                                                word;
#end

public function GetLgotaNewRus2(PsnLinksNrec: comp):
#ifdef Gal9_1
                                                double;
#else
                                                word;
#end

end;

#doc
obj-интерфейс "Иждивенцы физического лица" (расширение 13)
#end
objinterface IPersonDependants13;

#doc
Функция возвращает количество основных вычетов (по ставке 1400)
#end
public function GetOsnVychet(psnLinksNrec: comp; curYear: word; curMonth: word; code: longInt = 0): double;

#doc
Функция возвращает количество дополнительных вычетов (по ставке 3000)
#end
public function GetDopVychet(psnLinksNrec: comp; curYear: word; curMonth: word; code: longInt = 0): double;

#doc
Функция возвращает количество вычетов по одному основанию
#end
public function GetVychet(psnLinksNrec: comp; curYear: word; curMonth: word; code: longInt = 0): double;

#doc
Функция возвращает количество вычетов по первому основанию
#end
public function GetFirstVychet(psnLinksNrec: comp; curYear: word; curMonth: word; code: longInt = 0): double;

#doc
Функция возвращает количество вычетов по второму основанию
#end
public function GetSecondVychet(psnLinksNrec: comp; curYear: word; curMonth: word; code: longInt = 0): double;

#doc
Функция возвращает количество основных вычетов по первому основанию
#end
public function GetFirstOsnVychet(psnLinksNrec: comp; curYear: word; curMonth: word; code: longInt = 0): double;

#doc
Функция возвращает количество основных вычетов по второму основанию
#end
public function GetSecondOsnVychet(psnLinksNrec: comp; curYear: word; curMonth: word; code: longInt = 0): double;

#doc
Функция возвращает количество дополнительных вычетов по первому основанию
#end
public function GetFirstDopVychet(psnLinksNrec: comp; curYear: word; curMonth: word; code: longInt = 0): double;

#doc
Функция возвращает количество дополнительных вычетов по второму основанию
#end
public function GetSecondDopVychet(psnLinksNrec: comp; curYear: word; curMonth: word; code: longInt = 0): double;

end;

vipinterface PersonDependants implements IPersonDependants, IPersonDependants1, IPersonDependants2, IPersonDependants3, IPersonDependants4, IPersonDependants5, IPersonDependants6,
                                        IPersonDependants7, IPersonDependants8, IPersonDependants9, IPersonDependants10, IPersonDependants11, IPersonDependants12,
                                        IPersonDependants13
#ifdef ATL51
Licensed (free)
#end
;

#end
