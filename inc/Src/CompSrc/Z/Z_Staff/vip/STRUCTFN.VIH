//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика ERP 5.83 - Заработная плата
// Построение отчетов с группировкой по подразделениям
//------------------------------------------------------------------------------

#ifndef _StructFn_vih_Included
#define _StructFn_vih_Included

#ifdef ComponentVersion
#component "z_Staff"
#end

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Table Struct SHierarchyTable
                         (
                           Nrec                : comp,
                           Code                : string[20] ,    // Код пользователя
                           sortKey             : string[254],    // поле для сортировки
                           tempStr             : string[5],      // вспомогательное поле для сортировки
                           levelIer            : integer,        // уровень иерархии
                           Name                : string[254],
                           actual              : boolean,        // актуален ли уровень в отчете
                           cPodr               : comp,           // NRec подразделения
                           cPodrParent         : comp,           // NRec вышестоящего подразделения
                           Post                : comp            // Ссылка на должность
                           )
              with index   (
                           PodrIerIndex0     = Nrec(Unique, Surrogate),
                           PodrIerIndex      = cPodr + tempStr,
                           PodrIerParent     = cPodrParent,
                           PodrIerStsName    = Name,
                           PodrIerStsSortKey = sortKey);
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Table Struct LevelDateTable
                         (
                            level               : integer         // уровень иерархии
                            ,cField              : comp           // поле COMP
                            ,wField              : word           // поле word
                            ,iField              : integer        // поле integer
                            ,dField              : double         // поле double
                            ,sField              : string         // поле string
                           )
              with index   (
                            LevelDateTable     = level
                           );
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Table Struct LevelDateTableEx
                         (
                             level               : integer        // уровень иерархии
                            ,levelMnemonic       : String[30]     // мнемоника уровня
                            ,cField              : comp           // поле COMP
                            ,wField              : word           // поле word
                            ,iField              : integer        // поле integer
                            ,dField              : double         // поле double
                            ,sField              : string         // поле string
                           )
              with index   (
                            LevelDateTable     = level + levelMnemonic
                           );

#doc
расширение параметров функции
#end
objinterface IStructHierarchyExt;

#doc
SortType -- тип сортировки
1 -- по коду
все остальное -- по имени
#end
 function SH_CreateHierarchyExt(_DateHierarchy : date;_SearchMArker : LongInt; _ItogPrizn : boolean; SortType : word): integer;

end;

#doc
Объектный интерфейс для построения иерархии по StaffStruct
для отчетов с группировкой по подразделениям
#end
objinterface IStructHierarchy;

#doc
формирование иерархии подразделений, которые используются на данный
момент пользователем. Для сигнализации какие именно подразделения нужны
используется маркер, ссылка на который передается в функцию.
#end
function SH_CreateHierarchy(_DateHierarchy : date;_SearchMArker : LongInt; _ItogPrizn : boolean): integer;

#doc
проверить является ли текущий уровень иерархии уровнем "ИТОГО ..."
#end
function SH_IsLevel_In_All(_nrec : comp): boolean;

#doc
проверить является ли текущий уровень иерархии уровнем "ВСЕГО ..."
#end
function SH_IsLevel_Total(_nrec : comp): boolean;

#doc
проверить является ли текущий уровень, на котором находится
заданное подразделение  листом
#end
function SH_IsLevel_leaf(_cPodr : comp): boolean;

#doc
добавить заданное занчение в итог заданного уровня
#end
function SH_AddValueOnLevel(_Level : integer; _Value : string; _Type : integer): boolean;

#doc
добавить заданное занчение в итог заданного уровня
#end
function SH_AddValueOnLevelEx(_Level : integer;_LevelMnemonic : string[30]; _Value : string; _Type : integer): boolean;

#doc
очистить конкретноезначение или все значения  на определенном уровне
#end
function SH_ClearValueOnLevel(_Level : integer; _Type : integer): boolean;

#doc
очистить конкретноезначение или все значения  на определенном уровне
#end
function SH_ClearValueOnLevelEx(_Level : integer;_LevelMnemonic : string[30]; _Type : integer): boolean;

#doc
получить  значение  на определенном уровне
#end
function SH_GetValueOnLevel(_Level : integer; _Type : integer): string;

#doc
получить  значение  на определенном уровне
#end
function SH_GetValueOnLevelEx(_Level : integer;_LevelMnemonic : string[30]; _Type : integer): string;

#doc
получить  название подразделения, учитывая уровень вложенности
#end
function SH_GetNameDependingOnHierarchy(_cPodr : comp; _HierarchyLevel : integer): string;

#doc
получить  ссылку на  подразделение, учитывая уровень вложенности
#end
function SH_GetPointerDependingOnHierarchy(_cPodr : comp; _HierarchyLevel : integer): comp;

#doc
переинициализировать актуальность подразделения
#end
procedure SH_ResetActuality(_Marker : LongInt; _actual : boolean);

end;

vipinterface StructHierarchy implements IStructHierarchy, IStructHierarchyExt
#ifdef ATL51
Licensed (free)
#end
;

#endif