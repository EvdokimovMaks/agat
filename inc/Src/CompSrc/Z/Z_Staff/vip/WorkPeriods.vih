//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 5.8 - Общая функциональность контура "Управление персоналом"
// Рабочие периоды
//------------------------------------------------------------------------------

#ifndef _WorkPeriods_INCLUDED_
#define _WorkPeriods_INCLUDED_

#ifdef ComponentVersion
#component "z_Staff"
#end

const
  // Константы значений поля WorkPeriod.wTypePeriod, определяющие тип периода
  cnWP_Work        = word(0);   // обычные рабочий период
  cnWP_Shift       = word(1);   // сдвиг рабочего периода
  cnWP_Hidden      = word(2);   // скрытый внутренний рабочий период
  cnWP_Accounting  = word(3);   // период учета
  cnWP_FuturePVac  = word(4);   // рабочие периоды полагающихся отпусков, выданных авансом
  cnWP_NeedCorrect = word(100); // РП подлежащие корректировке после установки связи совместительств
end;

#doc
#end
objinterface IWorkPeriods;

#doc
Функция для определения года, по который формируются рабочие периоды
#end
public function GetYearForMakeWP: word;

#doc
Функция для выбора флага даты расчета стажа при формировании полагающихся отпусков </br>
Возвращаемые значения: </br>
-1 - была произведена отмена формирования </br>
 0 - расчет стажа на дату начала рабочего периода </br>
 1 - расчет стажа на дату окончания рабочего периода
#end
public function GetFlagForMakeOtp: integer;

#doc
Параметры : </br>
  cPers - ссылка на карточку сотрудника </br>
  cApp  - назначение сотрудника </br>
  wControlYear - год, по который формируются РП (обязательно использовать при заполнении РП в цикле) </br>
  bUseDateFromAppoint - для первого РП будет использоваться не дата приема из карточки, а дата назначения (для перевода в другой филиал с единой отчетностью) </br>
Возвращаемые значения: </br>
0 - создание РП прошло успешно </br>
1 - ошибка ссылки на сотрудника </br>
2 - ошибка ссылки на назначение </br>
3 - функция не может создать новый РП, т.к. дата начала выходит за дату увольнения/ухода с должности </br>
4 - функция не может создать новый РП, т.к. дата начала выходит за заданный год </br>
5 - не прошла вставка записи в таблицу </br>
6 - дата начала РП оказалась пустой
#end
public function MakeNewWPForPers(cPers, cApp : comp; wControlYear : word; bUseDateFromAppoint : boolean): word;

#doc
Замена ссылки на назначение в РП при переводе с одного основного назначения на другое
#end
public procedure ChangeMainAppointForWP(cPers, cOldApp, cNewApp : comp; bWasDel: boolean);

#doc
Формирование или удаление рабочих периодов при переводе из филиала в филиал с раздельной отчетностью </brief>
 <h3>Параметры:</h3>
 <ul>
  <li><code>cOldPers</code> - ссылка на карточку ДО перевода</li>
  <li><code>cNewPers</code> - ссылка на карточку ПОСЛЕ перевода</li>
  <li><code>cOldApp </code> - ссылка на назначение ДО перевода</li>
  <li><code>cNewApp </code> - ссылка на назначение ПОСЛЕ перевода</li>
  <li><code>bWasDel </code> - = false - обработка (создание) перевода; 
                              = true  - удаление перевода</li>
 </ul>
#end
public procedure ChangeSovnAppointForWP(cOldPers, cNewPers, cOldApp, cNewApp : comp; bWasDel: boolean);

#doc
 Процедура корректировки рабочих периодов при увольнении сотрудника
#end
public procedure CorrectWPWithDis(cPers, cApp : comp; dDisDate : date);

#doc
 Процедура корректировки рабочих периодов при внесении сдвига
#end
public procedure CorrectWPByShifts(cWorkPeriod : comp; bGoNextAnyWay : boolean);

#doc
 Процедура создания положенных отпусков для рабочего периода с кодом <code>cWorkPeriod</code></brief>
 <h3>Биты параметра flParam устанавливают параметры формирования</h3>
 <ul>
  <li>0 - расчет количества дней на начало рабочего периода</li>
  <li>1 - расчет количества дней на окончание рабочего периода</li>
  <li>2 - удалить существующие отпуска перед формированием</li>
  <li>3 - удалить существующие остатки отпусков перед формированием</li>
  <li>4 - формировать остатки отпусков</li>
  <li>5 - пересчитать существующие полагающиеся отпуска</li>
  <li>6 - для совместительств дублировать отпуска из осн. назначения</li>
  <li>7 - для совместительств дублировать остатки из осн. назначения</li>
  <li>8 - не добавлять одинаковые полагающиеся отпуска</li>
  <li>9 - запретить формировать отпуска после расчета</li>
  <li>10 - <i>не учитывается</i> - формировать полагающиеся отпуска для текущего рабочего периода</li>
  <li>11 - <i>не учитывается</i> - формировать полагающиеся отпуска для отчетных рабочих периодов</li>
  <li>12 - <i>не учитывается</i> - формировать полагающиеся отпуска для рабочих периодов определенного года</li>
  <li>13 - <i>не учитывается</i> - формировать полагающиеся отпуска для всех рабочих периодов</li>
  <li>14 - удалить существующие полагающиеся по учетным периодам отпуска</li>
  <li>15 - формировать полагающиеся по учетным периодам отпуска</li>
 </ul>

 <p>ОБЯЗАТЕЛЬНО должен быть заполнен ОДИН из битов <code>0-1</code>. Они отвечают за расчет стажа для количества дней отпуска.</p>

  <h3>См. также</h3> <link function Z_Staff::IWorkPeriods10.GetDefaultParam4MakeNewOtp>GetDefaultParam4MakeNewOtp</link>
#end
public procedure MakeNewOtpForOneWP(cWorkPeriod : comp; flParam : word);

#doc
 Процедура создания положенных отпусков для всех рабочих периодов сотрудника
#end
public procedure MakeNewOtpForAllWP(cPers : comp; flParam : word);

#doc
 Функция создания рабочих периодов для одного сотрудника по всем его назначениям до определенного года </br>
 Параметры: cPers        - сотрудник, по которому производится расчет </br>
            wControlYear - последний год создаваемых РП </br>
 Возвращаемое значение: количество созданных РП
#end
public function MakeAllWPForPers(cPers : comp; wControlYear : word): integer;

#doc
 Процедура перерисовки РП в справочнике и позиционирования на первую запись
#end
public procedure prReReadWP;

#doc
 Процедура заполнения параметров интерфейса
#end
public procedure SetInfcParam (cPers, cApp : comp; wFlMode : word);

#doc
 Процедура создания рабочих периодов для всех сотрудника по назначениям до текущей даты - КОНВЕРТЕР
#end
procedure CreateAllWP;

#doc
Функция для выбора полагающегося отпуска для РП </br>
 Параметры: </br>
   cWorkPeriod    - РП для которого отбражаются полагающиеся отпуска </br>
   dParam_GetDate - дата расчета остатка для полагающихся отпусков с типом "пропорционально..."
#end
public function GetVacationForWP(cWorkPeriod : comp; dParam_GetDate: date): comp;

#doc
 Процедура отображения рабочих периодов, привязанных к записи планирования отпусков
#end
public procedure ShowWPForYearPlanOtpusk (cPlOtp : comp);

#doc
 Процедура установки параметром перед использованием MakeNewWPForPers
#end
public procedure SetParamBeforeUseVShedul;
  deprecated 'Использование метода SetParamBeforeUseVShedul не рекомендовано, т.к. перечитывание настроек происходит непосредственно в объекте расчета сдвигов ScheduledLeavesFunctions';

#doc
 Функция получения рабочего периода, содержащего дату dOtchDate, по назначению cApp сотрудника; </br>
 по параметру bFindFirstWP развязка нужен только РП, в который попадает дата, или нужен первый РП на дату
#end
public function GetWPByDateAndApp(cPers,cApp : comp; dOtchDate : date; bFindFirstWP : boolean): comp;

#doc
Процедура отката рабочих периодов после удаления приказа
#end
public procedure prReturnWPforOrder(cContDoc_Appoint: comp);

#doc
Функция определения типа отпуска, основной или дополнительный </br>
 Параметры: </br>
   cPar_nRecKlOtpusk - nRec классификатора отпусков </br>
 Возвращаемое значение: </br>
   true  - основной отпуск </br>
   false - НЕ основной отпуск (дополнительный, прочий, компенсация, целодневная неявка)
#end
public function funIsPrimaryType(cPar_nRecKlOtpusk: comp): boolean;

#doc
Процедура замены даты окончания рабочего периода с помощью искуственного сдвига
#end
public procedure ChangeDateEndForWP (cWorkPeriod : comp);

end;

objinterface IWorkPeriods1;
#doc
Функция для выбора полагающегося отпуска для РП </br>
 Параметры: </br>
   cWorkPeriod    - РП для которого отбражаются полагающиеся отпуска </br>
   cPutVac        - полагающийся отпуск, на котором вызывается окно выбора </br>
   dParam_GetDate - дата расчета остатка для полагающихся отпусков с типом "пропорционально..."
#end
public function GetVacationForWP_WithPosition(cWorkPeriod, cPutVac : comp; dParam_GetDate: date): comp;

#doc
 Процедура корректировки рабочих периодов после изменения даты приема на работу/даты начала совместительства.</brief>
<h3> Параметры: </h3>
<ul>
  <li><code> cPers </code> - ссылка на карточку работника Persons.nRec    </li>
  <li><code> cApp </code>  - ссылка на назначение работника Appointments.nRec </li>
</ul>

 Изменяется дата начала <b>первого</b> рабочего периода <code> WorkPeriod.dPerBeg </code>. </br>
 Для основного назначения дата начала берется из поля <code>Persons.LastDate</code> (начало отсчета РП), <b>если оно заполнено</b>, иначе из <code>Persons.AppDate</code>(дата приема) </br>
 Для совместительства дата начала берется из поля <code>Appointments.AppointDate</code>.</br>
 Дата окончания и следующие РП пересчитываются.</br>
#end
public procedure CorrectAllWPByChangeAppDate(cPers, cApp : comp);

end;

//************************************************************************************************************
objinterface IWorkPeriods2;

#doc
 Процедура установки флага о скрытии некоторых полей параметров формирования полагающихся отпусков
#end
public procedure SetCantUseFlOtp(iMask: integer);

#doc
 Процедура запуска формирования полагающихся отпусков по текущему/отчетному/всем рабочим периодам
#end
public procedure RunCreatePutVacation(cWorkPeriod, cPerson, cAppoint: comp; iFlMakeOtp: integer);

#doc
 Процедура формирования полагающихся отпусков по всем рабочим периодам назначения сотрудника
#end
public procedure MakeNewOtpForAllWPApoint(cPers, cAppoint : comp; flParam : word);

end;

//************************************************************************************************************
objinterface IWorkPeriods3;

#doc
 Функция получения ссылки на лицевой счет из текущей записи WorkPeriods </br>
 возвращаемое значение: </br>
  nRec лицевого счета.
#end
public function fnGetWPLSchet: comp;
end;

//************************************************************************************************************
objinterface IWorkPeriods4;

#doc
установка/снятие протекта
#end
procedure SetProtect(isProtect : boolean = True);
end;

//************************************************************************************************************
objinterface IWorkPeriods5;

#doc
Функция создания одного рабочего периода для назначения работника.</brief>
<h3> Параметры: </h3>
<ul>
<li><code> cPers        </code> - ссылка на карточку сотрудника </li>
<li><code> cApp         </code> - назначение сотрудника </li>
<li><code> wControlYear </code> - год, по который формируются РП (обязательно использовать при заполнении РП в цикле) </li>
<li><code> flParam      </code> - маска: 0й бит - для первого РП будет использоваться не дата приема из карточки (или дата отсчета РП), а дата назначения; 
                                         1й бит - не запускать расчет сдвигов </li>
</ul>
<h3> Возвращаемые значения: </h3>
<ul>
<li><code> 0 </code> - создание РП прошло успешно </li>
<li><code> 1 </code> - ошибка ссылки на сотрудника </li>
<li><code> 2 </code> - ошибка ссылки на назначение </li>
<li><code> 3 </code> - функция не может создать новый РП, т.к. дата начала выходит за дату увольнения/ухода с должности </li>
<li><code> 4 </code> - функция не может создать новый РП, т.к. дата начала выходит за заданный год </li>
<li><code> 5 </code> - не прошла вставка записи в таблицу </li>
<li><code> 6 </code> - дата начала РП оказалась пустой </li>
</ul>

Даты начала первого РП заполняется из <code> Persons.LastDate </code>, <b>если она заполнена</b>, иначе из <code> Persons.AppDate </code>
#end
public function MakeNewWPForPersUseFlag(cPers, cApp : comp; wControlYear, flParam : word): word;
end;

//************************************************************************************************************
objinterface IWorkPeriods6;
#doc
Функция поиска первого по дате РП конкретного назначения </br>
</br>
Параметры: </br>
  cPar_Appointments - назначение, по которому нужен ответ </br>
</br>
Возвращаемые значения: </br>
  nRec найденного РП </br>
  dVARPar_BegPer - дата начала найденного РП </br>
  dVARPar_EndPer - дата окончания найденного РП
#end
public function funFirstWP_byAppAndDate(cPar_Appointments: comp; var dVARPar_BegPer, dVARPar_EndPer: date): comp;

#doc
Функция поиска следующего по дате РП относительно заданного(cPar_nRecWorkPeriod) РП </br>
</br>
Параметры: </br>
  cPar_nRecWorkPeriod - РП для которого нужно найти следующий по дате </br>
</br>
Возвращаемые значения: </br>
  nRec найденного РП </br>
  dVARPar_BegPer - дата начала найденного РП </br>
  dVARPar_EndPer - дата окончания найденного РП
#end
public function funNextWP_byAppAndDate(cPar_nRecWorkPeriod: comp; var dVARPar_BegPer, dVARPar_EndPer: date): comp;


#doc
Функция определяет сформированы ли полагающиеся отпуска по РП </br>
</br>
Параметры: </br>
  cParam_WP - nRec РП </br>
</br>
Возвращаемые значения: </br>
  true  - полагающиеся отпуска сформированы </br>
  false - полагающиеся отпуска не сформированы
#end
public function funIsPut4WP(cParam_WP: comp): boolean;

#doc
Функция определяет сформированы ли остатки полагающихся отпусков РП в других РП </br>
</br>
Параметры: </br>
  cParam_WP - nRec РП </br>
</br>
Возвращаемые значения: </br>
  true  - остатки сформированы </br>
  false - остатки не сформированы
#end
public function funIsRemain4WP(cParam_WP: comp): boolean;

#doc
Функция определяет предоставлены ли фактические отпуска за РП </br>
</br>
Параметры: </br>
  cParam_WP - nRec РП </br>
</br>
Возвращаемые значения:</br>
  true  - предоставлены фактические отпуска </br>
  false - фактические отпуска НЕ предоставлены
#end
public function funIsFact4WP(cParam_WP: comp): boolean;

#doc
 Процедура корректировки рабочих периодов при установке или удалении связи "перевод" между совместительствами
#end
public procedure CorrectWPAfterSetSovmConnect(cNewApp : comp; sPersFIO : string; wFlag :word);

end;

objinterface IWorkPeriods7;

#doc
Процедура проверки остатка по рабочему периоду, если остаток больше или равен
значению настройки "Продолжительность части отпуска" возвращает количества дней остатка отпуска в рабочем периоде
#end

public function CheckResidue(cPWP, cWPVac : comp): double;

end;

objinterface IWorkPeriods8;

#doc
 Процедура корректировки рабочих периодов при пересчете табеля
#end
public procedure CorrectWPByShifts_WT(cLSchet : comp; dBegPer, dEndPer : date; bGoNextAnyWay : boolean);

end;

objinterface IWorkPeriods9;

#doc
 Процедура проставления "Признак того, что рабочий период закрыт для автоматических расчетов"
 для рабочих периодов с УО и УС
#end
public procedure SecRecWPLock(cPers : comp);

end;

objinterface IWorkPeriods10;

#doc
 Процедура возвращает флаг для использования при вызове метода
 <link procedure Z_Staff::IWorkPeriods.MakeNewOtpForOneWP>MakeNewOtpForOneWP</link> для
 автоматического формировании полагающихся отпусков</brief>

 <h3>Возвращаемые параметры запуска</h3>
 <p>
   <ul>
     <li>формировать <b>для текущего рабочего периода</b></li>
     <li>расчет количества дней <b>на дату начала рабочего периода</b></li>
     <li><b>не добавлять одинаковые полагающиеся</b> отпуска</li>
     <li><b>включать полагающиеся по учетным периодам</b> отпуска</li>
     <li>формировать остатки отпусков (если <code>_bFillRest = true</code>)</li>
   </ul>
 </p>
#end
public function GetDefaultParam4MakeNewOtp(_bFillRest: boolean): word;

end;

private objinterface IWorkPeriods11;
#doc
Процедура возвращает true если функция не находит полагающиеся отпуска у рабочего периода
Параметр:
SEcWP -  ссылка на анализируемы рабочий период
#end
  function CheckNPV(SEcWP: comp): boolean;

#doc
Процедура возвращает true если функция находит остаток за предыдущий рабочий период и
если в текущем рабочем периоде нет отпуска с типом остаток
Параметр:
SEcWP -  ссылка на анализируемый рабочий период
#end
  function CheckNOST(SEcWP: comp): boolean;

#doc
Функция ищет рабочий период подходящий по условиям. Если параметры wSEYear и dSEDate
не указаны условие поиска рабочего периода - вхождение в отчетный период. Не стоит использовать
одновременно параметры wSEYear и dSEDate. Если рабочий период подходящий условиям найден
функция возвращает его nRec, иначе 0
Параметры:
SEcPers - ссылка на на сотрудника
SEcApp - ссылка на назначение сотрудника
wSEYear - год, по вхождению в который будут искаться рабочие периоды
dSEDate - дата на которую будет искаться рабочий период.
#end
  function SearchWPOtchPer(SEcPers, SEcApp: comp; wSEYear: word; dSEDate: date): comp;

#doc
Процедура поиска ошибок в рабочих периодах используя функции SearchWPOtchPer, CheckNPV, CheckNOST
найденные ошибки записываются в таблицу в памяти mt_DSWP
Параметры:
SEcPers - ссылка на сотрудника
wSEYEar - год, по вхождению в который будут искаться рабочие периоды. Необязательный параметр.
dSEDate - дата на которую будет искатся рабочий период. Необязательный параметр.
#end
  procedure SearchErrInWPs(SEcPers: comp; wSEYEar: word = 0; dSEDate: date = ZeroDate);

#doc
Процедура запускающая поиск ошибок в рабочих периодах(функцию SearchErrInWPs)
Параметр:
PersMarker - маркер содержащий ссылки на сотрудников, у которых необходимо найти ошибки.
#end
  procedure InsertIntoDSWPByPersons(PersMarker: TPtr);

#doc
Процедура исправления ошибок записанных в таблицу в памяти mt_DSWP, рекомендуется запускать
после запуска процедуры SearchErrInWPs или InsertIntoDSWPByPersons
Параметры:
SEcPers - ссылка на сотрудника
wSEYEar - год, по вхождению в который будут искаться рабочие периоды. Необязательный параметр.
dSEDate - дата на которую будет искатся рабочий период. Необязательный параметр.
#end
  procedure prCorrectErrWP(wSEYear: word = 0; dSEDate: date = ZeroDate);

#doc
Процедура запуска окна "Проверка корректности", а так же копирует маркер по сотрудникам,
прещедщий параметром в маркер SEMarker;
Параметр:
tMarker - маркер содержащий ссылки на сотрудников, у которых необходимо найти ошибки.
#end
  procedure RunSEAndSetParam(tMarker: TPtr);

#doc
Открыть окно параметров формирования импорта/экспорта полагающихся отпусков </br>
</br>
#end
function funSetImportParam(liParam_Marker: TPtr; cParam_Person: comp): word;

end;

objinterface IWorkPeriods12;
#doc
Отсортировать полагающихся отпусков по порядку: остатки, основной, дополнительные </br>
</br>
#end
  public procedure SortPutVacation(cWorkPeriod : comp);
end;

objinterface IWorkPeriods13;
#doc
Выбор рабочего периода </br>
</br>
#end
public function GetWindowWP(var _MarkerWP : TPtr; _cPerson, _cCheckApp, _cCheckNRec : comp; _dCheckDate : date; _wPickParam : word; _wPeriodType: word = cnWP_work): boolean;
end;

objinterface IWorkPeriods14;
#doc
Метод определения ПОЗДНЕГО РП, привязанного к план-графику </br>
</br>
параметр: cPlOtp - ссылка на план-график отпусков (PlanOtpusk.nRec)</br>
возвращаемое значение: ссылка на ПОЗДНИЙ РП, привязанный к план-графику отпусков</br>
</br>
#end
public function GetWPFromPG(cPlOtp: comp): comp;
end;

objinterface IWorkPeriods15;
#doc
Функция определяет, существуют ли рабочие периоды для данного сотрудника в интерфейсе отображения. Должен быть инициализирован SetInfcParam</br>
#end
public function IsExistWP(): boolean;

#doc
Событие, определяющее необходимость обновления вкладки контейнера</br>
#end

event procedure UpdateTabs;
end;


objinterface IWorkPeriods16;

#doc
Ручной пересчет сдвигов
#end
public procedure CorrectWPByShiftsHand(cWorkPeriod : comp; bGoNextAnyWay : boolean);

end;



//************************************************************************************************************
vipinterface WorkPeriods implements IWorkPeriods,   IWorkPeriods1,  IWorkPeriods2,  IWorkPeriods3,  IWorkPeriods4,
                                    IWorkPeriods5,  IWorkPeriods6,  IWorkPeriods7,  IWorkPeriods8,  IWorkPeriods9,
                                    IWorkPeriods10, IWorkPeriods11, IWorkPeriods12, IWorkPeriods13, IWorkPeriods14,
                                    IWorkPeriods15, IWorkPeriods16
#ifdef ATL51
Licensed (free)
parameters (WPNrec : comp; PersNrec : comp; AppNRec: comp; wMode: word; dHarmDate: date = date(0, 0, 0))
#end
;

#end // _WorkPeriods_INCLUDED_
