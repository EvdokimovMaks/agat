//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 5.7 - Заработная плата
// Хранилище параметров формирования постоянных доплат
//------------------------------------------------------------------------------

#ifndef _APFPRMS_INCLUDED_
#define _APFPRMS_INCLUDED_

#include SHPZ.VIH

#component "Z_Zar"

#doc
Хранилище параметров формирования постоянных доплат
#end
ObjInterface oAddPaymentsFormingParameters;

  #doc
  Ссылка на подразделение
  #end
  function GetDepartment: comp;

  #doc
  Установка ссылки на подразделение
  #end
  procedure SetDepartment(Value: comp);

  #doc
  Код вида оплаты
  #end
  function GetPaymentKind: longint;

  #doc
  Установка кода вида оплаты
  #end
  procedure SetPaymentKind(Value: longint);

  #doc
  Режим функционирования
  #end
  function GetOperatingMode:
                            #doc
                            <ul>
                            <li> 0 - сформировать доплаты
                            <li> 1 - переформировать доплаты
                            <li> 2 - удалить доплаты
                            <li> 4 - импортировать суммы из dbf-файла
                            </ul>
                            #end
                            word;

  #doc
  Установка режима функционирования
  #end
  procedure SetOperatingMode(
                             #doc
                             <ul>
                             <li> 0 - сформировать доплаты
                             <li> 1 - переформировать доплаты
                             <li> 2 - удалить доплаты
                             <li> 4 - импортировать суммы из dbf-файла
                             </ul>
                             #end
                             Value: word
                            );

  #doc
  Значение атрибута "Учитывать при расчете"
  #end
  function GetCalcFlag: string;

  #doc
  Установка значения атрибута "Учитывать при расчете"
  #end
  procedure SetCalcFlag(Value: string);

  #doc
  Сумма доплаты
  #end
  function GetSum: double;

  #doc
  Установка режима доплаты
  #end
  procedure SetSum(Value: double);

  #doc
  Процент доплаты
  #end
  function GetPercent: double;

  #doc
  Установка процента доплаты
  #end
  procedure SetPercent(Value: double);

  #doc
  Признак контроля процесса формирования доплат
  #end
  function GetControlOption: word;

  #doc
  Установка признака контроля процесса формирования доплат
  #end
  procedure SetControlOption(Value: word);

  #doc
  Источник сведений о ШПЗ
  #end
  function GetAccountingSource: word;

  #doc
  Установка источника сведений о ШПЗ
  #end
  procedure SetAccountingSource(Value: word);

  #doc
  ШПЗ (счет, субсчет, аналитика, ТХО, параметр выбора)
  #end
  function GetAccounting: oSHPZ;

  #doc
  Установка ШПЗ (счет, субсчет, аналитика, ТХО, параметр выбора)
  #end
  procedure SetAccounting(Value: oSHPZ);

  #doc
  Дата назначения доплаты
  #end
  function GetFixDate: date;

  #doc
  Установка даты назначения доплаты
  #end
  procedure SetFixDate(Value: date);

  #doc
  Дата начала доплаты (дата начала сторнирования)
  #end
  function GetBeginning: date;

  #doc
  Установка даты начала доплаты (даты начала сторнирования)
  #end
  procedure SetBeginning(Value: date);

  #doc
  Дата окончания доплаты
  #end
  function GetEnding: date;

  #doc
  Установка даты окончания доплаты
  #end
  procedure SetEnding(Value: date);

  #doc
  Ссылка на валюту
  #end
  function GetCurrency: comp;

  #doc
  Установка ссылки на валюту
  #end
  procedure SetCurrency(Value: comp);

  #doc
  Имя файла для импорта
  #end
  function GetImportFileName: string;

  #doc
  Установка имени файла для импорта
  #end
  procedure SetImportFileName(Value: string);

  #doc
  Код вида налогового вычета
  #end
  function GetTaxAbatement: comp;

  #doc
  Установка кода вида налогового вычета
  #end
  procedure SetTaxAbatement(Value: comp);

  #doc
  Сумма налогового вычета
  #end
  function GetTaxAbatementSum: double;

  #doc
  Установка суммы налогового вычета
  #end
  procedure SetTaxAbatementSum(Value: double);

  //------------------------------------------------------------------------------
  #doc
  Значение признака необходимости копирования в доплату значения атрибута "Учитывать при расчете"
  #end
  function IsCalcFlagToBeSet: boolean;

  #doc
  Установка значения признака необходимости копирования в доплату значения атрибута "Учитывать при расчете".
  #end
  procedure SetCalcFlagToBeSet(Value: boolean);

  #doc
  Значение признака необходимости заполнения суммы доплаты
  #end
  function IsSumToBeSet: boolean;

  #doc
  Установка значения признака необходимости заполнения суммы доплаты
  #end
  procedure SetSumToBeSet(Value: boolean);

  #doc
  Значение признака необходимости заполнения процента доплаты
  #end
  function IsPercentToBeSet: boolean;

  #doc
  Установка значения признака необходимости заполнения процента доплаты
  #end
  procedure SetPercentToBeSet(Value: boolean);

  #doc
  Значение признака необходимости заполнения даты назначения доплаты
  #end
  function IsFixDateToBeSet: boolean;

  #doc
  Установка значения признака необходимости заполнения даты назначения доплаты
  #end
  procedure SetFixDateToBeSet(Value: boolean);

  #doc
  Значение признака необходимости заполнения даты начала доплаты
  #end
  function IsBeginningToBeSet: boolean;

  #doc
  Установка значения признака необходимости заполнения даты начала доплаты
  #end
  procedure SetBeginningToBeSet(Value: boolean);

  #doc
  Значение признака необходимости заполнения даты окончания доплаты
  #end
  function IsEndingToBeSet: boolean;

  #doc
  Установка значения признака необходимости заполнения даты окончания доплаты
  #end
  procedure SetEndingToBeSet(Value: boolean);

  #doc
  Значение признака необходимости заполнения валюты в доплате
  #end
  function IsCurrencyToBeSet: boolean;

  #doc
  Установка значение признака необходимости заполнения валюты в доплате
  #end
  procedure SetCurrencyToBeSet(Value: boolean);

  #doc
  Значение признака необходимости заполнения в доплате кода налогового вычета
  #end
  function IsTaxAbatementToBeSet: boolean;

  #doc
  Установка значения признака необходимости заполнения в доплате кода налогового вычета
  #end
  procedure SetTaxAbatementToBeSet(Value: boolean);

  #doc
  Значение признака необходимости заполнения суммы налогового вычета в доплате
  #end
  function IsTaxAbatementSumToBeSet: boolean;

  #doc
  Установка значения признака необходимости заполнения суммы налогового вычета в доплате
  #end
  procedure SetTaxAbatementSumToBeSet(Value: boolean);


  #doc
  Установка или сброс признаков необходимости заполнения значений атрибутов доплаты
  #end
  procedure SetToBeSet(Value: boolean);

End;

#component "Z_Basement"

private objinterface oAddPaymentsFormingParametersPriv;

  procedure SetOnlyParticipators(Value: boolean);
  function GetOnlyParticipators: boolean;
  procedure SetKindInsure(_wKau: word; _cKau: comp);
  procedure GetKindInsure(var _wKau: word; var _cKau: comp);
  procedure SetNachPeriodStart(Value: date);
  function GetNachPeriodStart: date;
  procedure SetNachPeriodEnd(Value: date);
  function GetNachPeriodEnd: date;
end;

VipInterface AddPaymentsFormingParameters
  implements oAddPaymentsFormingParameters, oAddPaymentsFormingParametersPriv
  licensed(free);

#end
