//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика ERP 8.10 - Управление персоналом
// Приказы (все РПД)
//------------------------------------------------------------------------------

/*
  RPD_Base (
    RPD_Base_AppCreate (
      RPD_1
      RPD_Base_AppCreate_Transfer (
        RPD_4 RPD_5
        RPD_Base_AppCreate_Transfer_Zam (
          RPD_3 RPD_70
        )
      )
    )
    RPD_Base_AppChange (
      RPD_50 RPD_60 RPD_61 RPD_62 RPD_65
    )
    RPD_Base_Payment (
      RPD_20 RPD_21 RPD_30
    )
    RPD_Base_Otpusk (
      RPD_6 RPD_41
    )
    RPD_Base_Raise (
      RPD_9 RPD_13
    )
    RPD_Base_Education (
      RPD_35 RPD_36
    )
    RPD_Base_WT (
      RPD_Base_SalScale (
        RPD_90 RPD_91
      )
      RPD_92 RPD_93
    )
    RPD_*
  )
*/

#ifndef _RPD_INCLUDED_
#define _RPD_INCLUDED_

#component "Z_StaffOrders"

//------------------------------------------------------------------------------
// Коды ошибок    1
// РПД-9          ошибка даты окончания доплаты
//------------------------------------------------------------------------------
Table struct mt_DopMessError
(
  wRartNum : word,    // раздел с ошибкой
  wTypeRPD : word,    // тип РПД
  wErrCode : word,    // код ошибки
  PersFIO  : string   // фамилии "плохих" сотрудников
)
with index
(
  mt_DopMessError01 = wTypeRPD + wErrCode,
  mt_DopMessError02 = wRartNum + wTypeRPD + wErrCode + PersFIO
);

#doc
Приказы (все РПД)
#end
ObjInterface IRPD;

  #doc
  Установка начальных параметров для формирования логической таблицы содержимого приказа
  #end
  procedure SetRelation(Value: comp);

  #doc
  Установка режима работы с интерфейсом</brief>
  Актуальна при работе из других мест, не "перечня приказов"
  #end
  procedure SetView(ModView: word; cContDoc: comp // #docl Ссылка на сотрудника, если приказ групповой
                   );
  #doc
  Удаление приказа
  #end
  function DeleteOrder: boolean;

  #doc
  Проверка корректности заполнения приказа
  #end
  function CheckOrder: boolean;

  #doc
  Утверждения приказа по текущему работнику
  #end
  Function ConfirmOrder: boolean;

  #doc
  Проверка приказа с последующим вызовом печати
  #end
  procedure PrintOrder(typePrint: TPtr // #docl 0 - печатаем через отдельный интерфейс; что-то другое - ссылка на форму: CommomRep
                     ; fcEnter: word);

  #doc
  Сообщение интерфейсу-владельцу об изменении данных
  #end
  event procedure OnIdle(Sender: comp);

  #doc
  Перерисовка доступных панелей
  #end
  procedure ReDrawPanels;

  #doc
  Безусловная перерисовка всех панелей
  #end
  procedure ReReadRecords;

end;

#doc
Работа с индивидуальными приказами
#end
ObjInterface IRPD1(IRPD);

  #doc
  Проверка корректности заполнения приказа
  #end
  function CheckOneOrder(cNrec : comp = 0): boolean;

  #doc
  Утверждение приказа по текущему работнику
  #end
  Function ConfirmOneOrder(cNrec : comp = 0): boolean;

end;

#doc
Работа с индивидуальными приказами
#end
ObjInterface IRPD2(IRPD1);

  #doc
  Удаление приказа по текущему работнику
  #end
  Function DeleteOneOrder(cNrec : comp = 0): boolean;

end;

ObjInterface IRPD6;

  #doc
  Заполнение таблицы PutVacCon для позиции приказа с <code>ContDoc.NRec = cParam_ContDoc</code>.</brief>
  Перед заполнением имеющиеся записи PutVacCon удаляются.
  #end
  public procedure FillPutVacCon(cParam_ContDoc: comp);

  #doc
  Проверка и исправление количество дней отпуска и даты окончания отпуска
  #end
  public procedure ChangePutVacConAndDuration(cDoc: comp);

end;

ObjInterface IRPD5WP;

  #doc
  Вывести информацию о РП, связанных с переводом между совместительствами
  #end
  public procedure prOutWPInfo(cParam_AppointCur, cParam_AppointPrev: comp);

end;

#doc
Интерфейс для базового класса всех РПД по персоналу
#end
private objinterface IRPD_Base(IRPD2);
  #doc
  Проверка корректности ContDoc перед утверждением одной позиции приказа
  #end
  /*private*/ function ChildCheckOneOrder(cNrec : comp = 0): boolean;

  #doc
  Утверждением одной позиции приказа
  #end
  /*private*/ function ChildConfirmOneOrder(cNrec : comp = 0): boolean;

  #doc
  Открытие/скрытие полей для редактирования в зависимости от того, утвержден ли приказ.
  Метод обязателен для реализации в интерфейсах-наследниках.
  #end
  /*abstract*/ procedure EnableDisable;

  #doc
  Удаление текущей позиции приказа (ContDoc)
  #end
  procedure MyDel;
end;

#doc
Расширение интерфейса для базового класса всех РПД по персоналу
#end
private objinterface IRPD_Base2;

  #doc
  Проверка текущей позиции приказа на возможность удаления. Как правило, вызывается перед удалением <b>утвержденного</b> приказа.<br />
  При создании собственного обработки не забудьте в нем обработать неутвержденный приказ.
  #end
  function CheckAbilityToDelete: boolean;

  #doc
  Функция возвращает co-константу - код сущности для дополнительного соглашения по РПД
  #end
  function GetCo4Agreement: word;

  #doc
  Функция возвращает NRec сущности для дополнительного соглашения по РПД
  #end
  function GetNrec4Agreement: comp;

  #doc
  Функция возвращает идентификатор панели с дополнительным соглашением по РПД (для перерисовки после редактирования)
  #end
  function GetPanel4Agreement: longint;

  #doc
  Функция возвращает код трудового договора по приказу для автоматического создания доп. соглашения
  #end
  function GetContract4Agreement: comp;

  #doc
  Функция возвращает дату для дополнительного соглашения для создания доп. соглашения вручную
  #end
  function GetDate4Agreement: date;

  #doc
  Функция возвращает код договора для РПД, если он известен
  #end
  function GetContract4Pick: comp;
end;

#doc
Печать приказов
#end
private ObjInterface IRPD_Base3;

  #doc
  Печать приказа
  #end
  procedure PrintRPD(typePrint: TPtr; fcEnter: word); // #docl 0 - печатаем через отдельный интерфейс; что-то другое - ссылка на форму: CommomRep
  #doc
  индивидуальная печать вызванная из события cmPrintDoc
  #end
  procedure PrintFromPD;
  #doc
  индивидуальная печать вызванная из события cmSortMC
  #end
  procedure PrintFromSMC;
  #doc
  Проверка группового приказа вынесена в отдельный метод т.к. ее надо запускать не только внутри приказа.
  #end
  function CheckOrderBeforeGroupPrint(wOrderStatus: word): boolean;
  #doc
  Установить признак проверки приказа
  #end
  procedure SetCheckBeforePrint;
  #doc
  снять признак проверки приказа
  #end
  procedure ClearCheckBeforePrint;
  #doc
  Проверка валидности ContDoc для проверки приказа
  #end
  function CheckValidContDocAndMsg: boolean;
end;

#doc
Утверждение всего группового и сводного приказа из самого приказа, используется процедура из OrdersList.vip
#end
private ObjInterface IRPD_Base4;

  #doc
  Утверждение всего группового и сводного приказа из самого приказа, используется процедура из OrdersList.vip
  #end
  event procedure prOnCmLegendConfirm;
end;

#doc
Расширение интерфейса для базового класса всех РПД об изменении атрибутов назначения
#end
private objinterface IRPD_Base_AppChange;

  #doc
  Метод заполнения записи истории по данным из назначения
  #end
  procedure FillHistFromApp;

end;

#doc
Объектный интерфейс для копирования приказов
#end
private objinterface IRPDCopy;

  #doc
  Копировать позицию приказа _cCont в _cContDest и привязать ее к разделу _cPart.
  Если _cContDest нулевая, то создается новая запись ContDoc.
  Метод возвращает идентификатор копии.
  #end
  function CopyOneOrder(_cCont, _cContDest, _cPartDest: comp): comp;

end;

#doc
Объектный интерфейс для отмены утверждения приказов
#end
private objinterface IRPDCancel;

  #doc
  Отменить утверждение позиции приказа.<bief />
  Перед отменой проводится проверка на возможность отмены. В случае успеха возвращает <code>true</code>.
  #end
  function CancelOneOrder(_cCont: comp): boolean;

end;

#doc
Объектный интерфейс для отображения индивидуальной формы приказов
#end
private objinterface IRPDPR;
  #doc
  Установка режима работы с интерфейсом для одного сотрудника</brief>
  Актуальна при работе из других мест, не "перечня приказов"
  #end
  procedure SetNewView(cPersRec: comp);

  #doc
  Процедура синхронизации данных сотрудника из приказа и контейнера, содержащего OrdersList
  #end
  event procedure SynchronizePerson(Sender: comp);
end;

private objinterface OnlyViewRPD;
  #doc
  Установка режима просмотра без возможности редактировать приказ
  #end
  Procedure SetOnltViewMode;
end;

private objinterface IRPDPR2;
  #doc
  Процедура синхронизации состояния приказа
  #end
  event procedure SynchronizeOrderState(Sender: comp);
  #doc
  Процедура синхронизации состояния приказа при частичном утверждении
  #end
  event procedure SynchronizePartOrderState(Sender: comp);
  #doc
  Процедура перечитки записей
  #end
  procedure RereadFromList;
end;

#doc
объектный интерфейс для индивидуальной формы РПД1
#end
private objinterface IRPD_RPD1;
  #doc
    Наполнение РПД - 1 данными в зависимости от варианта оформления,
    для корректной обработки вызывать эту процедуру стоит после SetNewView,
    иначе есть вероятность оставить не прикрепленный Persons в базе
  #end
  procedure FillPersonOnInsIndRPD1(cInsPers:comp; bNeedInsNewPers: boolean);

end;

#doc
  Объектный интерфейс для управлением режима просмотра
#end
private objinterface IRPD_ViewMode;

  property ViewMode: word;

end;

#doc
Базовый класс всех РПД по персоналу
#end
private VipInterface RPD_Base
  implements IRPD_Base, IRPD_Base2, IRPDPR, IRPDPR2, OnlyViewRPD, IRPD_Base3, 
             IRPD_Base4, IRPD_ViewMode
  licensed(free);

#doc
Базовый интерфейс для РПД, создающих назначения
#end
private VipInterface RPD_Base_AppCreate(RPD_Base)
  licensed(free);

#doc
Базовый интерфейс для РПД, создающих дополнительное назначение
#end
private VipInterface RPD_Base_AppCreate_Transfer(RPD_Base_AppCreate)
  implements IRPDCopy
  licensed(free);
public:
  function IRPD_Base2.GetContract4Pick: comp;
  function IRPD_Base2.GetDate4Agreement: date;
end;

#doc
Базовый интерфейс для РПД, создающих дополнительное назначение замещения
#end
private VipInterface RPD_Base_AppCreate_Transfer_Zam(RPD_Base_AppCreate_Transfer)
  licensed(free);
public:
  function IRPD_Base2.GetDate4Agreement: date;
end;

#doc
Базовый интерфейс для РПД, изменяющих существующее назначение
#end
private VipInterface RPD_Base_AppChange(RPD_Base)
  implements IRPD_Base_AppChange, IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  procedure IRPD_Base.MyDel;

  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;

  function IRPD_Base2.GetCo4Agreement: word;
  function IRPD_Base2.GetNrec4Agreement: comp;
  function IRPD_Base2.GetPanel4Agreement: longint;
  function IRPD_Base2.GetContract4Agreement: comp;
  function IRPD_Base2.GetDate4Agreement: date;
end;

#doc
Базовый интерфейс для РПД о выплатах и вознаграждениях
#end
private VipInterface RPD_Base_Payment(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

#doc
Базовый интерфейс для приказов на отпуск
#end
private VipInterface RPD_Base_Otpusk(RPD_Base)
  licensed(free);
public:
  procedure IRPD_Base.SetRelation(Value: comp);
  procedure IRPDPR2.RereadFromList;
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
end;

#doc
Базовый интерфейс для приказов по персоналу о надбавках
#end
private VipInterface RPD_Base_Raise(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base.SetRelation(Value: comp);
  procedure IRPD_Base3.PrintFromPD;

  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
  function IRPD_Base2.GetPanel4Agreement: longint;
end;

#doc
Базовый интерфейс для приказов об обучении
#end
private VipInterface RPD_Base_Education(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
end;

#doc
Базовый интерфейс для "табельных" приказов
#end
private VipInterface RPD_Base_WT(RPD_Base)
  licensed(free);

#doc
Базовый интерфейс для приказов с табельными отклонениями
#end
private VipInterface RPD_Base_SalScale(RPD_Base_WT)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
end;

// Прием на работу
VipInterface RPD_1(RPD_Base_AppCreate)
  implements IRPDCopy, IRPD_RPD1
  licensed(free);
public:
  constructor Init;
  constructor InitParams(_bImFromCat: boolean);
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  procedure IRPD_Base.SetRelation(Value: comp);
  procedure IRPD_Base.SetView(ModView: word; cContDoc: comp);
  procedure IRPDPR.SetNewView(cPersRec: comp);
  procedure IRPD_RPD1.FillPersonOnInsIndRPD1(cInsPers:comp; bNeedInsNewPers: boolean);
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
  function IRPD_Base2.GetContract4Pick: comp;
end;

// Изменение ФИО
VipInterface RPD_2(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.GetPanel4Agreement: longint;
end;

//Временное заместительство\возложение обязанностей
VipInterface RPD_3(RPD_Base_AppCreate_Transfer_Zam)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  procedure IRPD_Base.SetRelation(Value: comp);
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
  function IRPD_Base2.GetPanel4Agreement: longint;
end;

//совмещение\ внутреннее совместительство
VipInterface RPD_4(RPD_Base_AppCreate_Transfer)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.GetPanel4Agreement: longint;
  function IRPD_Base2.GetContract4Agreement: comp;
end;

//Перемещение
VipInterface RPD_5(RPD_Base_AppCreate_Transfer)
  implements IRPD5WP
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  procedure IRPD_Base.SetView(ModView: word; cContDoc: comp);
  procedure IRPDPR.SetNewView(cPersRec: comp);
  procedure IRPDPR2.RereadFromList;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
  function IRPD_Base2.GetPanel4Agreement: longint;
  function IRPD_Base2.GetContract4Agreement: comp;
  function IRPDCopy.CopyOneOrder(_cCont, _cContDest, _cPartDest: comp): comp;
end;

// оформление очередного отпуска
VipInterface RPD_6(RPD_Base_Otpusk)
  implements IRPD6, IRPDCancel
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  procedure IRPD_Base.SetRelation(Value: comp);
  procedure IRPD_Base.SetView(ModView: word; cContDoc: comp);
  procedure IRPDPR.SetNewView(cPersRec: comp);
  function IRPD_Base.CheckOrder: boolean;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ConfirmOrder: boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.DeleteOrder: boolean;
  function IRPD_Base.DeleteOneOrder(cNrec: comp = 0): boolean;
end;

// закрытие совмещения (снятие надбавок за совмещение)
VipInterface RPD_7(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Увольнение
VipInterface RPD_8(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  procedure IRPD_Base.SetView(ModView: word; cContDoc: comp);
  procedure IRPDPR.SetNewView(cPersRec: comp);
  procedure IRPDPR2.RereadFromList;
  function IRPD_Base.CheckOrder: boolean;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
end;

// Назначение персональных надбавок
VipInterface RPD_9(RPD_Base_Raise)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
end;

// Снятие персональных надбавок
VipInterface RPD_10(RPD_Base)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.GetPanel4Agreement: longint;
end;

// Изменение персональных надбавок
VipInterface RPD_12(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Назначение персональных надбавок с днями и часами
VipInterface RPD_13(RPD_Base_Raise)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
end;

//Досрочное завершение отпуска по уходу за ребенком
VipInterface RPD_14(RPD_Base)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Назначение единовременных выплат
VipInterface RPD_20(RPD_Base_Payment)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base.SetRelation(Value: comp);
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
end;

// Назначение единовременных выплат с днями и часами
VipInterface RPD_21(RPD_Base_Payment)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base.SetRelation(Value: comp);
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
end;

// Награждение/поощрение, премирование
VipInterface RPD_30(RPD_Base_Payment)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.SetRelation(Value: comp);
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
end;

// Взыскание
VipInterface RPD_31(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Снятие дисциплинарного взыскания
VipInterface RPD_32(RPD_Base)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Направление на обучение
VipInterface RPD_35(RPD_Base_Education)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Изменение сроков обучения
VipInterface RPD_36(RPD_Base_Education)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Отмена направления на обучение
VipInterface RPD_37(RPD_Base)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Перенос оплачиваемого отпуска
VipInterface RPD_39(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
end;

// оформление отзывов из отпуска
VipInterface RPD_40(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.SetRelation(Value: comp);
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
end;

// оформление прочих отпусков
VipInterface RPD_41(RPD_Base_Otpusk)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base.SetView(ModView: word; cContDoc: comp);
  procedure IRPDPR.SetNewView(cPersRec: comp);
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ConfirmOrder: boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
end;

// перенос отпуска
VipInterface RPD_42(RPD_Base)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
end;

//Проведение аттестации и создание аттестационной комиссии
VipInterface RPD_43(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

//Досрочное завершение временного заместительства/возложения обязанностей
VipInterface RPD_44(RPD_Base)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Изменение оклада
VipInterface RPD_50(RPD_Base_AppChange)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Изменение режима работы
VipInterface RPD_60(RPD_Base_AppChange)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Изменение условий труда на рабочем месте
VipInterface RPD_61(RPD_Base_AppChange)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base.SetRelation(Value: comp);
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Изменение разряда/категории
VipInterface RPD_62(RPD_Base_AppChange)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Заключение/продление контракта
VipInterface RPD_65(RPD_Base_AppChange)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base_AppChange.FillHistFromApp;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.GetContract4Agreement: comp;
  function IRPD_Base2.GetContract4Pick: comp;
end;

// временный перевод
VipInterface RPD_70(RPD_Base_AppCreate_Transfer_Zam)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base3.PrintFromSMC;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  procedure IRPD_Base.SetRelation(Value: comp);
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
  function IRPD_Base2.GetPanel4Agreement: longint;
end;

// дни отдыха и оплачиваемые неявки
VipInterface RPD_71(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
end;

// привлечение сотрудника к сверхурочной работе
VipInterface RPD_72(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  procedure IRPD_Base.ReDrawPanels;
  procedure IRPD_Base.ReReadRecords;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
end;

//Работа в выходные и праздничные дни
VipInterface RPD_90(RPD_Base_SalScale)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

// Почасовые табельные отклонения
VipInterface RPD_91(RPD_Base_SalScale)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base2.CheckAbilityToDelete: boolean;
end;

//Отражение работы во время отпуска по уходу за ребенком
VipInterface RPD_92(RPD_Base_WT)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

//Отмена почасовых табельных отклонений
VipInterface RPD_93(RPD_Base_WT)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.MyDel;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

//Конкурс на занятие вакантной должности
VipInterface RPD_95(RPD_Base)
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base3.PrintRPD(typePrint: TPtr; fcEnter: word);
  procedure IRPD_Base3.PrintFromPD;
  function IRPD_Base.ChildCheckOneOrder(cNrec: comp = 0): boolean;
  function IRPD_Base.ChildConfirmOneOrder(cNrec: comp = 0): boolean;
end;

//Прочие приказы
VipInterface RPD_100(RPD_Base)
  implements IRPDCopy
  licensed(free);
public:
  procedure IRPD_Base.EnableDisable;
  procedure IRPD_Base.PrintOrder(typePrint: TPtr; fcEnter: word);
end;

#doc
Внешняя проверка возможности утверждения приказа. Вызывается до стандартной проверки.
#end
ExtensionPoint epRPD_CheckBefore(cContDoc: comp);

#doc
Внешняя проверка возможности утверждения приказа. Вызывается после стандартной проверки.
#end
ExtensionPoint epRPD_CheckAfter(cContDoc: comp);

#end
