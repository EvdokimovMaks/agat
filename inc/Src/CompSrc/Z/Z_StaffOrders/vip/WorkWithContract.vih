//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
//  Галактика 9.1 - Управление персоналом
//  Объект для работы с трудовыми договорами сотрудника
//------------------------------------------------------------------------------
#ifndef _WorkWithContract_INCLUDED_
#define _WorkWithContract_INCLUDED_

#ifdef ComponentVersion
#component "Z_StaffOrders"
#end

const
  CONTRACT_NONE   = 0000b;
  CONTRACT_NEW    = 0001b;
  CONTRACT_LONG   = 0010b;
  CONTRACT_NEW_EX = 0101b;

  CN_WWC_SHOW = 00000b; //просмотр информации о договоре
  CN_WWC_EDIT = 00001b; //с возможностью редактирования/добавления
  CN_WWC_PICK = 00010b; //выбор договора из перечня
end;

#doc
  Объектный интерфейс работы с контрактом, привязанным к записи истории назначения
#end
objinterface IWorkWithContract;

#doc
Создание очередной записи о контракте на основании полученных параметров.
Возвращает нРек созданной записи таблицы CatArch
#end
Function NewContract(dateF: date; st: string[100]): comp;
deprecated 'Функция устарела. Информация о контрактах не хранится в таблице CatArch.';

#doc
Копирование информации о трудовом договоре из одной записи истории в другую
#end
Function CopyContract(cAppHistOld: comp; cAppHistNew: comp): boolean;

#doc
Получить параметры контракта по ссылке на запись истории
#end
Procedure GetContractInfo(cAppHist: comp; var dateFr: date; var st: string[100]);

#doc
Получить нРек ближайшего контракта на дату WorkDate. Т.е. поиск до первой
записи истории для назначения cApp, к которой существует запись в таблице CatArch
#end
Function GetNearestNRecCatArch(WorkDate: date; cApp: comp): comp;
deprecated 'Функция устарела. Информация о контрактах не хранится в таблице CatArch.';

#doc
Получить параметры ближайшего контракта на дату WorkDate. Т.е. поиск до первой
записи истории по назначению cApp
#end
Procedure GetContractInfoFromNearestHistory(WorkDate: date; cApp: comp; var dateFr: date; var st: string[100]);
deprecated 'Функция устарела. Используейте GetContractOnDate.';

#doc
Получить нРек ближайшего контракта из РПД 1, 4, 5, 65 на дату WorkDate.
Т.е. поиск до первой записи истории с такими РПД, к которой существует запись в таблице CatArch
#end
Function GetNearestSpecNRec(WorkDate: date; cApp: comp): comp;
deprecated 'Функция устарела. Используейте Func_AppHist.AH_GetNRecWithContractOnDate.';

#doc
Получить параметры ближайшего контракта из РПД 1, 4, 5, 65 на дату WorkDate.
Т.е. поиск до первой записи истории по назначению cApp
#end
Procedure GetContractInfoFromSpecHistory(WorkDate: date; cApp: comp; var dateFr: date; var st: string[100]);
deprecated 'Процедура устарела. Используейте GetContractOnDate.';

end;

#doc
  Объектный интерфейс работы с контрактом, привязанным к записи истории назначения
#end
objinterface IWorkWithContract1;

#doc
Создание очередной записи о контракте на основании полученных параметров.
#end
Procedure NewContractNRec(dateF: date; st: string[100]; cAppHist: comp);
deprecated 'Процедура устарела. Информация о контрактах не хранится в таблице CatArch.';

end;

#doc
  Объектный интерфейс работы с контрактом
#end
objinterface IWorkWithContract2;

#doc
Проверка продолжительности контракта
#end
function CheckDateEnd(cPers: comp; ContractNum: s100; ContractDate: date; DateBegin: date; DateEnd: date): boolean;

end;

private objinterface IWorkWithContractPrivate;

#doc
Получить код последней записи истории назначения (<code>AppHist.NRec</code>) о заключении/продлении контракта.</brief>
<p>Функция возвращает код последней по сочетанию полей "изменить с" и "дата и время создания записи"
записи истории с кодом <b>65</b> назначения <code>AppHist.NRec</code>.</p>
<p>Поиск выполняется только для основых назначений и совмещений.</p>
<p>В том случае, если искомая запись в истории назначения не найдена, поиск производится по предыдущим
назначениям того же типа.</p>
#end
function GetLast65ByApp(_cApp: comp): comp;

#doc
Показать окно выбора договора по сотруднику с позиционированием по умолчанию на конкретном договоре.
#end
function PickPsnContract(_cPsn, _cContract: comp): comp;

end;

objinterface IWorkWithContractByNum;

#doc
Получение сведений о трудовых договорах сотрудника <code>_cPsn</code> на дату <code>_dCheck</code></brief>
<p>Функция инициализирует работу с трудовыми договорами сотрудника и возвращает их количество.</p>
<h3>См. также</h3>
<link function Z_StaffOrders::IWorkWithContractByNum.InitByApp>InitByApp</link>,
<link function Z_StaffOrders::IWorkWithContractByNum.GetNmbByNum>GetNmbByNum</link>
<link function Z_StaffOrders::IWorkWithContractByNum.GetTypeByNum>GetTypeByNum</link>,
<link function Z_StaffOrders::IWorkWithContractByNum.GetContractDateByNum>GetContractDateByNum</link>,
<link function Z_StaffOrders::IWorkWithContractByNum.GetContractBeginByNum>GetContractBeginByNum</link>,
<link function Z_StaffOrders::IWorkWithContractByNum.GetContractEndByNum>GetContractEndByNum</link>
#end
function InitByPerson(_cPerson: comp; _dCheck: date): word;

#doc
Получение сведений о трудовых договорах по назначению <code>_cApp</code> на дату <code>_dCheck</code></brief>
<p>Функция инициализирует работу с трудовыми договорами сотрудника и возвращает их количество.</p>
<h3>См. также</h3>
<link function Z_StaffOrders::IWorkWithContractByNum.InitByPerson>InitByPerson</link>,
<link function Z_StaffOrders::IWorkWithContractByNum.GetNmbByNum>GetNmbByNum</link>
<link function Z_StaffOrders::IWorkWithContractByNum.GetTypeByNum>GetTypeByNum</link>,
<link function Z_StaffOrders::IWorkWithContractByNum.GetContractDateByNum>GetContractDateByNum</link>,
<link function Z_StaffOrders::IWorkWithContractByNum.GetContractBeginByNum>GetContractBeginByNum</link>,
<link function Z_StaffOrders::IWorkWithContractByNum.GetContractEndByNum>GetContractEndByNum</link>
#end
function InitByApp(_cApp: comp; _dCheck: date): word;

#doc
Получение номера трудового договора</brief>
<p>Перед использованием необходимо вызвать
<link function Z_StaffOrders::IWorkWithContractByNum.InitByPerson>InitByPerson</link> или
<link function Z_StaffOrders::IWorkWithContractByNum.InitByApp>InitByApp</link>.</p>
#end
function GetNmbByNum(_wNum: word): string;

#doc
Получение ссылки на каталог с видами трудовых договоров</brief>
<p>Перед использованием необходимо вызвать
<link function Z_StaffOrders::IWorkWithContractByNum.InitByPerson>InitByPerson</link> или
<link function Z_StaffOrders::IWorkWithContractByNum.InitByApp>InitByApp</link>.</p>
#end
function GetTypeByNum(_wNum: word): comp;

#doc
Получение даты заключения трудового договора</brief>
<p>Перед использованием необходимо вызвать
<link function Z_StaffOrders::IWorkWithContractByNum.InitByPerson>InitByPerson</link> или
<link function Z_StaffOrders::IWorkWithContractByNum.InitByApp>InitByApp</link>.</p>
#end
function GetContractDateByNum(_wNum: word): date;

#doc
Получение даты начала срока действия трудового договора</brief>
<p>Перед использованием необходимо вызвать
<link function Z_StaffOrders::IWorkWithContractByNum.InitByPerson>InitByPerson</link> или
<link function Z_StaffOrders::IWorkWithContractByNum.InitByApp>InitByApp</link>.</p>
#end
function GetContractBeginByNum(_wNum: word): date;

#doc
Получение даты окончания срока действия трудового договора</brief>
<p>Перед использованием необходимо вызвать
<link function Z_StaffOrders::IWorkWithContractByNum.InitByPerson>InitByPerson</link> или
<link function Z_StaffOrders::IWorkWithContractByNum.InitByApp>InitByApp</link>.</p>
#end
function GetContractEndByNum(_wNum: word): date;

end;

objinterface IWorkWithContractByNum01;
#doc
Получение NRec трудового договора</brief>
<p>Перед использованием необходимо вызвать
<link function Z_StaffOrders::IWorkWithContractByNum.InitByPerson>InitByPerson</link> или
<link function Z_StaffOrders::IWorkWithContractByNum.InitByApp>InitByApp</link>.</p>
#end
function GetContractNRecByNum(_wNum: word): comp;
end;

objinterface IWorkWithContractDogovor;

#doc
Информация о трудовом договоре в строковом виде</brief>
<p>К примеру, "Срочный трудовой договор от 01/06/2015 №123"</p>
#end
public function GetContractString(_cContract: comp): string;

#doc
Получение ссылки на классификатор видов договоров (Catalogs.NRec)</brief>
#end
public function GetContractType(_cContract: comp): comp;

#doc
Получение даты заключения договора</brief>
#end
public function GetContractDate(_cContract: comp): date;

#doc
Получение номера договора</brief>
#end
public function GetContractNmb(_cContract: comp): string;

#doc
Получение даты начала действия договора</brief>
#end
public function GetContractBegin(_cContract: comp): date;

#doc
Получение последней даты окончания действия договора</brief>
#end
public function GetContractEnd(_cContract: comp): date;

#doc
Получение первоначальной даты окончания действия договора</brief>
#end
public function GetContractFirstEnd(_cContract: comp): date;

#doc
Получение сведений о договоре</brief>
<p>В том случае, если удалось найти трудовой договор, функция возвращает <code>true</code> и заполняет var-параметры
значениями из договора, иначе результат функции принимает значение <code>false</code>, а var-параметры заполняются
значениями по умолчанию для типа параметра.</p>
<h3>Возвращаемые параметры</h3>
<ul>
  <li><code>_cContractType</code> - ссылка на классификатор видов договоров (Catalogs.NRec)</li>
  <li><code>_sContractNmb</code> - номер трудового договора</li>
  <li><code>_dContractDate</code> - дата заключения трудового договора</li>
</ul>
#end
public function PutContractInfo(_cContract: comp; var _cContractType: comp; var _sContractNmb: string; var _dContractDate: date): boolean;

#doc
Отображение окна для работы с договорами сотрудника</brief>
<p>Режим работы определяется в зависимости от переданных параметров.</p>
<p>Если передана ссылка на договор (<code>_cContract</code>), будет отображаться конкретный договор, иначе
отобразится перечень договоров, связанных с карточкой сотрудника (<code>_cPsn</code>) с возможностью выбора
имеющегося договора или создания нового.</p>
<p>От передаваемой ссылки на запись истории назначения (<code>_cAppHist</code>) зависит то, в каком режиме
будет отображаться окно работы с договором. В том случае, если он был создан той записью истории, ссылка на
котрую передана, либо не связан ни с одной записью истории с помощью
<link function Z_StaffOrders::IWorkWithContractDogovor.BindContractAndPersonIfNew>BindContractAndPersonIfNew</link>,
договор отобразится в режиме редактирования, иначе - в режиме просмотра.</p>
<p>Для автоматического заполнения дат действия создаваемого договора необходимо передать значения
<code>_dNewBeg</code> и <code>_dNewEnd</code>.</p>
<p>В том случае, если режим работы окна необходимо указать явно, следует передать в <code>_cMode</code>
CN_WWC-константу или их комбинацию.</p>
<p>Возвращаемое значение - ссылка на трудовой договор.</p>
#end
public function ShowContractWinDates(_cContract, _cPsn, _cAppHist: comp; _dNewBeg, _dNewEnd: date; _cMode: comp = rvMaxComp): comp;

#doc
Отображение окна для работы с договорами сотрудника</brief>
Функция аналогична <link function Z_StaffOrders::IWorkWithContractDogovor.ShowContractWinDates>ShowContractWinDates</link>,
за исключением того, что не позволяет передать устанавливаемые новому договору даты действия.
#end
public function ShowContractWin(_cContract, _cPsn, _cAppHist: comp; _cMode: comp = rvMaxComp): comp;

#doc
Связать договор с карточкой сотрудника и записью истории назначения</brief>
<p>См. также:
<link function Z_StaffOrders::IWorkWithContractDogovor.ContractIsNew>ContractIsNew</link>,
<link function Z_StaffOrders::IWorkWithContractDogovor.ShowContractWin>ShowContractWin</link>
<link function Z_StaffOrders::IWorkWithContractDogovor.ShowContractWinDates>ShowContractWinDates</link>
</p>
#end
public procedure BindContractAndPersonIfNew(_cContract, _cPsn, _cAppHist: comp);

#doc
Проверить, является ли контракт новым (создан записью истории _cAppHist)</brief>
<p>Фунцкция возвращает <code>true</code> в том случае, если контракт существует и создан записью истории
<code>_cAppHist</code> или не связан ни с одной записью истории назначения.</p>
<p>См. также: <link function Z_StaffOrders::IWorkWithContractDogovor.BindContractAndPersonIfNew>BindContractAndPersonIfNew</link></p>
#end
public function ContractIsNew(_cContract, _cAppHist: comp): boolean;

#doc
Удалить запись о трудовом договоре, если он является новым. Если договор новый, возвращает true.</brief>
<p>См. также: <link function Z_StaffOrders::IWorkWithContractDogovor.ContractIsNew>ContractIsNew</link></p>
#end
public function DelContractIfNew(_cContract, _cAppHist: comp): boolean;

#doc
Изменить дату окончания трудового договора</brief>
#end
public procedure AddProlongContract(_cContract: comp; _dNewEnd: date);

#doc
Установить дату окончания срока действия договора по данным истории назначений сотрудника</brief>
<p>Функция ищет последнюю по "дате с" запись истории назначений сотрудника о продлении контракта,
игнорируя запись с кодом <code>_cAppHist</code> и обновляет по ней дату окончания трудового договора.</p>
<p>В том случае, если запись не найдена, функция устанавливает датой окончания действия срока
трудового договора первоначальную дату его окончания (указанную при его создании).</p>
<p>Функция возвращает ссылку на запись истории, из которой была всязана дата окончания.</p>
#end
public function UpdateContractProlongInfo(_cContract: comp; _cAppHist: comp = 0): comp;

#doc
Получить ссылку на трудовой договор сотрудника на дату.</brief>
В том случае, если ссылка на назначение (необязательный параметр <code>_cApp</code>) не передана, проверяется
основное назначение сотрудника.
#end
public function GetContractOnDate(_cPsn: comp; _dSearch: date; _cApp: comp = 0): comp;

#doc
Проверка срока действия договора с учетом ограничения максимального строка в зависимости от страны.</brief>
<p>В том случае, если срок действия договора не превышает установленное законодательством значение,
функция возвращает <code>true</code>.</p>
#end
public function CheckConctractTerm(_cContract: comp; _dCheckEnd: date): boolean;

#doc
Отобразить окно с перечнем трудовых договоров сотрудника <code>_cPsn</code>.</brief>
<p>Если будет передан код договора <code>_cContract</code>, курсор установится на нем.</p>
#end
public procedure ShowAllContracts(_cPsn: comp; _cContract: comp = 0);

#doc
Установить дату начала действия договора.</brief>
В том случае, если договор <code>_cContract</code> существует, не связан с историей назначения или связан с записью
<code>_cAppHist</code>, функция изменяет дату начала его действия и возвращает <code>true</code>.
#end
public function SetContractBeginIfNew(_cContract, _cAppHist: comp; _dBegin: date): boolean;

#doc
Установить дату окончания действия договора.</brief>
В том случае, если договор <code>_cContract</code> существует, не связан с историей назначения или связан с записью
<code>_cAppHist</code>, функция изменяет дату окончания его действия и возвращает <code>true</code>.
#end
public function SetContractEndIfNew(_cContract, _cAppHist: comp; _dEnd: date): boolean;

#doc
Вернуть ссылку на вновь созданную копию договора <code>_cContract</code>.</brief>
При копировании ссылки на запись истории и карточку сотрудника затираются.
#end
public function GetContractCopy(_cContract: comp): comp;

end;

objinterface IWorkWithContract3;

#doc
Передача ссылки на доп. соглашение
#end
public procedure SetNRecAgreement(_cAgreement: comp);

end;

objinterface IWorkWithContractEvent;

  #doc
  Установить признак попадания в контроль событий системы
  #end
  public procedure SetEventDone(_cContract: comp; Prizn: boolean);

  #doc
  Получить признак попадания в контроль событий системы
  #end
  public function GetEventDone(_cContract: comp): boolean;

end;

objinterface IWorkWithContract5;

  #doc
  Передача ссылки на приказ для возможности установки параметров приказа в договоре
  #end
  public procedure SetContDoc(cCont: comp);

end;

vipinterface WorkWithContract implements IWorkWithContract, IWorkWithContract1, IWorkWithContract2, IWorkWithContractPrivate,
                                         IWorkWithContractByNum, IWorkWithContractByNum01,
                                         IWorkWithContractDogovor, IWorkWithContract3, IWorkWithContractEvent,
                                         IWorkWithContract5
  licensed (free);

#end
