//-----------------------------------------------------------------------------
//                                                     (c) корпорация ГАЛАКТИКА
// Галактика 8.1 - Заработная плата
// Формирование реестров
//-----------------------------------------------------------------------------
#ifndef _ZarRegister_vih_INCLUDED_
#define _ZarRegister_vih_INCLUDED_

#include PseudoClassifier.vih
#include ReestrParams.vih
#include TablRees.vih

#component "Z_PayRep"

const //[r]egistry [g]roup data
// По группе удержаний
  // реестры по перечислению любых удержаний (все виды реестров входят в эту группу)
  rgDeduction        = 0;
  // реестры по перечислению аванса (из постоянных удержаний или из ЛС)
  rgPrepayment       = 1;
  // реестры по перечислению зарплаты
  rgSalary           = 2;
  // реестры по подоходному налогу
  rgIncomeTax        = 3;
  // реестры по исполнительным листам
  rgWritOfExec       = 5;
  // реестры по алиментам (относятся к группе реестров по исполнительным листам)
  rgAlimony          = 5;

// По виду налога на ФОТ или страховых взносов
  // реестры по перечислению страховых взносов (взносов в пенсионный фонд)
  rgInsurance        = 8;
  // реестры социальных перечислений (налогов на ФОТ)
  rgTaxesFOT         = 9;

  // реестры объединять не нужно
  rgNoUnit           = 100;
end;

//------------------------------------------------------------------------------
// интерфейс формирования реестра
//------------------------------------------------------------------------------
objinterface IZarRegSrcIterator;
  #doc
    Выполнение обхода данных, соответствующих переданному шаблону параметров
  #end
  function Iterate(BO: TYPE$SBBAN): boolean;
  #doc
    получить наборов значений расширенной группировки
  #end
  function GetExtCode: boolean;
  #doc
    получить наборов значений расширенной группировки
  #end
  event procedure ExtCode(Src: word; Val: comp);
  #doc
    Данные из ранее сформированного реестра
  #end
  event function OnCreated(var B: TYPE$ZAROPER): boolean;
  #doc
    Сформированный в результате итерации буфер элемента реестра
    Возврат true используется в случае дополнительной обработки
  #end
  event function OnIterated(var B: TYPE$SPPLBAN): boolean;
  #doc
    Сформированная расширенная информация к элементу реестра
    Возврат true используется в случае дополнительной обработки
  #end
  event function OnExtended(var B: TYPE$ZAROPER): boolean;
  #doc
    Запрос на выполнение обхода данных источника, ассоциированного с кодом Tbl.
    По умолчанию (false) обход не производится.
  #end
  event function OnIterateSrc(Tbl: word): boolean;
  #doc
    Запрос на выполнение обхода данных источника, ассоциированного с кодом Tbl.
    По умолчанию (false) обход не производится.
  #end
  event function CalcTotals(Tbl: word): boolean;
end;
//------------------------------------------------------------------------------
// формирование списков обработки
//------------------------------------------------------------------------------
objinterface IListWorking;
  #doc
    удалает данные
  #end
  procedure Clear;

  #doc
    добавление вида удержания
  #end
  procedure AddDeductionKind(Kind: word);

  #doc
    добавление вида налога на ФОТ
  #end
  procedure AddSocialTaxKind(Kind: longint);

end;

objinterface IViplWorkParams;
  #doc
    Устанавливает параметрам формирования стандартные значения.
  #end
  procedure SetDefaultParameters(P: longint = 0);

  property prAudit: word read write;
  property prDepth: word read write;
  property prByPOZ: word read write;
  property prViewLog: word read write;
  property prDatForm: date read write;
  property prDatVipl: date read write;
  property prDocName: word read write;
  property prSplitTax: word read write;
  property prPrefix: s5 read write;
  property prDefPol: comp read write;
  property prDefBank: comp read write;
  property prProcVipl: double read write;
  property prSumVipl: double read write;
  property prPrMonth: word read write;
  property prUseTabN: word read write;

  #doc
    Установить для итератора код пометок.
  #end
  procedure SetIterateMarks(Code: word = 0);

  #doc
    Установливает период для итератора и запускает процесс обхода пометок.
  #end
  procedure IterateMonth(wMes, wYear: word);

  #doc
    Генерируется в процессе обхода перед обработкой данных лицевого счета.
    Если подписчик вернет false, то данные этого ЛС не будут обработаны.
  #end
  event function OnPersonalAccount(var B: type$Lschet): boolean;
end;
//------------------------------------------------------------------------------
objinterface oPlVedParams;
  #doc
    Устанавливает параметрам формирования стандартные значения.
  #end
  procedure SetDefaultParameters(P: longint = 0);

  property prAudit: word read write;
  property prDepth: word read write;
  property prByPOZ: word read write;
  property prViewLog: word read write;
  property prDatForm: date read write;
  property prDatVipl: date read write;
  property prDocName: word read write;
  property prPrefix: s5 read write;
  property prProcVipl: double read write;
  property prSumVipl: double read write;
  property prFormVipl: word read write;
  property prPrMonth: word read write;
  property prUseNumb: s20 read write;

  #doc
    Установить для итератора код пометок.
  #end
  procedure SetIterateMarks(Code: word = 0);

  #doc
    Установливает период для итератора и запускает процесс обхода пометок.
  #end
  procedure IterateMonth(wMes, wYear: word);
end;

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
VipInterface ReesOtpu
  implements
    oReestrMainParams,
    oReestrParams,
    oReestrParamsDop,
    oFormViewLog
  licensed(free)
parameters(WorkUp: longint; WorkNRec: comp; TiDk: word);

VipInterface ReesBoln
  implements
    oReestrMainParams,
    oReestrParams,
    oReestrParamsDop,
    oFormViewLog
  licensed(free)
parameters(WorkUp: longint; WorkNRec: comp; TiDk: word);

VipInterface ReesAvan
  implements
    oReestrMainParams,
    oReestrParams,
    oReestrParamsDop,
    oFormViewLog
  licensed(free)
parameters(WorkUp: longint; WorkNRec: comp; TiDk: word);

VipInterface ReesVipl
  implements
    oReestrMainParams,
    oReestrParams,
    oReestrMainParams2,
    oReestrMainParamsMarker,
    oReestrParamsDop,
    oFormViewLog
  licensed(free)
parameters(WorkUp: longint; WorkNRec: comp; TiDk, ModeV: word);

VipInterface ZarRegSrcIterator
  implements
    IZarRegSrcIterator
    , IListWorking
  licensed(free)
parameters(BO: TYPE$SBBAN);

VipInterface ZarRegistersMaker
  implements
    IViplWorkParams,
    IListWorking
  licensed(free)
parameters(BO: TYPE$SBBAN);

VipInterface ZarplVed
  implements
    oPlVedParams
  licensed
  (
    #include zarplved.lih
  ) 
  parameters(PereForm: boolean; WorkNRec: comp; Pref: s5);

vipinterface SbBanPrefixPseudoClassifierLoader implements IPseudoClassifierLoader licensed(free);
vipinterface DeductionsGroupsPseudoClassifierLoader implements IPseudoClassifierLoader licensed(free);

#end
