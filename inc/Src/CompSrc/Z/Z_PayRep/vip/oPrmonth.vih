/***************************************************************************
  ╔═════════════════════════════════════════════════════════════════════╗
  ║      Н Т О  "T O P   S O F T"                                       ║
  ║           Проект "ЗАРПЛАТА" (с) 1996                                ║
  ║      Версия : 5.85                                                  ║
  ║      Разработала: Артамонов Д.С.                                    ║
  ║      Назначение:  Объектный интерфейс для работы с PRMONTH          ║
  ║      Изменения:                                                     ║
  ║      Цель: Облегчение работы с получением данных из PRMONTH         ║
  ╚═════════════════════════════════════════════════════════════════════╝
****************************************************************************/
#ifdef ComponentVersion
#component "Z_PayRep"
#end

#doc
Объектный интерфейс для работы с PRMONTH.
Набор функций, для сумм с учетом разбивки по аналитикам
#end
objinterface oPrMonthUpdatingWithAnalitics;
//------------------------------------------------------------------------------
#doc
Очщаем таблицу ZarOper по ссылке на запись источник и типу данных
cParent - ссылка на ZarOper.cPlPor
srType - тип данных(см. money.ccm)
srOrgDebt         = 1;   // долг за предприятием на начало периода
srPrivatDebt      = 2;   // долг за работником на начало периода
srPaymentList     = 3;   // выплаты по платежным ведомостям
srPaymentRegister = 4;   // выплаты по реестрам
srRemainder       = 5;   // остаток за месяц(фактически к выплате)
#end
//------------------------------------------------------------------------------
function ClearZarOperByParentAndType(cParent: comp; srType: word): boolean;

//------------------------------------------------------------------------------
#doc
  Выбрать сумму из таблице ZarOper по ссылке на запись источник, типу и аналитикам
#end
//------------------------------------------------------------------------------
function GetZarOperSumByAnaliticParentAndType(_cParent: comp; srType: word;
                                              cKauD: tGetKau; TblD: tTabKau; cKauK: tGetKau; TblK: tTabKau; param: tParam; cDopAnalitics: comp): double;
//------------------------------------------------------------------------------
#doc
  Сравнивает 2 набора аналитик
#end
//------------------------------------------------------------------------------
function IsTwoAnaliticsSetsEqual(cKauD1: tGetKau; TblD1: tTabKau; cKauK1: tGetKau; TblK1: tTabKau; param1: tParam; cDopAnalitics1: comp;
                                 cKauD2: tGetKau; TblD2: tTabKau; cKauK2: tGetKau; TblK2: tTabKau; param2: tParam; cDopAnalitics2: comp): boolean;

//------------------------------------------------------------------------------
#doc
  Заполнение PaysAnalytic по платежным документам
#end
//------------------------------------------------------------------------------
procedure GetPaysAnalytic(mode: word);

end;

#doc
Объектный интерфейс для работы с PRMONTH
#end
objinterface oPrMonthUpdatingRpVed02;
//-------Долг за предприятием  на начало месяца

#doc
Получить выплаты через кассу за текущий месяц
#end
function GetPaymentByCashBTWDatesEx: double;
#doc
Получить перечисления в банк за текущий месяц
#end
function GetPaymentByBankBTWDatesEx: double;
#doc
Получить перечисления в банк и выплаты через кассу за текущий месяц
#end
function GetPaymentBTWDatesEx: double;

#doc
#end
function GetPaymentByCashMP: double;
#doc
#end
function GetPaymentByBankMP: double;

#doc
подсчет выбранных начислений и удержаний по текущему работнику</brief>
0- начисления
1- удержания
2- выплаты
3- перечисления
#end
function calculateCurrentValuesEx(mode: word; Marker: TPtr): double;

end;

objinterface oPrMonthUpdatingVedPasPlat;
//понадобился объектный интерфейс, когда "дата формирования" и "за период" различные
// к примеру, даты формирования 01,07 , а период 06 месяц  (AD_FirstDate(SBBAN.DFORM) <> AD_FirstDate(SPPLBAN.DATAN) )
#doc
Получить выплаты через кассу за текущий месяц
#end
function GetPaymentByCashBTWDatesExPasPlat: double;
#doc
Получить перечисления в банк за текущий месяц
#end
function GetPaymentByBankBTWDatesExPasPlat: double;
#doc
Получить перечисления в банк и выплаты через кассу за текущий месяц
#end
function GetPaymentBTWDatesExPasPlat: double;
end;

#doc
#end
objinterface oPrMonthUpdatingRpVed01;
#doc
Долг за предприятием  на начало месяца
Получить выплаты через кассу за текущий месяц
#end
function GetPaymentByCashBTWDates(dBegin: date; dEnd: date): double;
#doc
Получить перечисления в банк за текущий месяц
#end
function GetPaymentByBankBTWDates(dBegin: date; dEnd: date): double;
#doc
Получить перечисления в банк и выплаты через кассу за текущий месяц
#end
function GetPaymentBTWDates(dBegin: date; dEnd: date): double;
end;
#doc
#end
objinterface oPrMonthUpdating;

#doc
расстановка bounds для таблиц начислений и удержаний
#end
procedure MonthFlag(mode: word);
#doc
инициализация текущей записи в prMonth
#end
function LoadCurrentPrMonth(cRec: comp; YearR: word; MonthR: word): boolean;
#doc
создание/ уничтожение логической таблицы по платежным ведомостям и по реестрам </brief>
0 - замена
1 - дополнение
#end
procedure OperateTempTable(mode: word);
#doc
подсчет начислений и удержаний по текущему работнику </brief>
0- начисления
1- удержания
2- выплаты
3- перечисления
#end
function calculateCurrentValues(mode: word): double;
#doc
выдано из остатка за текущий месяц в последующих через кассу
#end
function GetPrMonthSUMMA1: double;
#doc
выдано из остатка за текущий месяц в последующих через банк
#end
function GetPrMonthSUMMA2: double;
#doc
начисленная заработная плата за текущий месяц
#end
function GetPrMonthSUMMA3: double;
#doc
удержано за текущий месяц
#end
function GetPrMonthSUMMA4: double;
#doc
выдано через кассу за текущий месяц
#end
function GetPrMonthSUMMA5: double;
#doc
выдано через банк за текущий месяц
#end
function GetPrMonthSUMMA6: double;
#doc
Депозит за текущий месяц
#end
function GetDeposit: double;
#doc
остаток за расчетный месяц
#end
function GetCurrentRemainder: double;
#doc
остаток за расчетный месяц исчисленный в этом месяце
#end
function GetOriginalRemainder: double;
#doc
Долг за работником в отчётном периоде
#end
function GetBeginningDebt: double;
#doc
Долг за предприятием  на начало месяца
#end
function GetBeginningRemainder: double;
#doc
подсчет платежных документов </brief>
платежная ведомость
1 - в текущем месяце  за прошлые
2 - в текущем месяце  за текущие
3 - в будущих месяцах за текущие
реестр
5 - в текущем месяце  за прошлые
6 - в текущем месяце  за текущие
7 - в будущих месяцах за текущие
#end
function CalculatePDoc(mode:word): double;
#doc
Заполнение данных по платежным документам в сальдо </brief>
0 - замена
1 - дополнение
2 - данные получаются из платежных ведомостей и реестров
3 - данные из архива удержаний
#end
function SetNextCash(mode:word; value: double): boolean;
#doc
#end
function SetNextPayment(mode:word; value: double): boolean;
#doc
#end
function SetCharge(mode:word; value: double): boolean;
#doc
#end
function SetDeduction(mode:word; value: double): boolean;
#doc
#end
function SetCurrentCash(mode:word; value: double): boolean;
#doc
#end
function SetCurrentPayment(mode:word; value: double): boolean;
#doc
#end
function SetPastCash(mode:word; value: double): boolean;
#doc
#end
function SetPastPayment(mode:word; value: double): boolean;
#doc
#end
procedure SetDeposit;
#doc
#end
procedure SetCurrentRemainder;
#doc
#end
procedure SetOriginalRemainder;
#doc
#end
function  GetTotalSumma: double;
#doc
Рассчитать сальдо
#end
procedure RefreshSaldo(coCLSCH: comp; wYear: word; wMonth: word);
#doc
Получить выплаты ЗП через кассу за текущий месяц
#end
function GetSalaryPaymentByCashBTWDates(dBegin: date; dEnd: date): double;
#doc
Получить перечисления ЗП в банк за текущий месяц
#end
function GetSalaryPaymentByBankBTWDates(dBegin: date; dEnd: date): double;
#doc
Получить перечисления ЗП в банк и выплаты ЗП через кассу за текущий месяц
#end
function GetSalaryPaymentBTWDates(dBegin: date; dEnd: date): double;
#doc
Получить возврат долгов через кассу за текущий месяц
#end
function GetPastCash: double;
#doc
Получить возврат долгов через банк за текущий месяц
#end
function GetPastPayment: double;

end;

#doc
Объектный интерфейс для работы с PRMONTH (для отчета ОВР)
#end
objinterface oPrMonthUpdatingOVR;

#doc
#end
function  GetTotalSummaOVR: double;

#doc
Подсчет начислений и удержаний по текущему работнику (c учетом исключаемых ВО)
#end
function calculateCurrentValuesOVR(mode: word): double;

end;

#doc
Объектный интерфейс для работы с PRMONTH
(для подсчета и накопления сумм, зарезервированных
в платежных документах аналогично депонированным)
#end
objinterface oPrMonthLikeDeposit;

#doc
Подсчет сумм, аналогичных депонированным
#end
function GetLikeDeposit: double;

#doc
Накопление сумм, аналогичных депонированным, как депонированных
#end
function SetLikeDeposit: boolean;

end;

objinterface oPrMonthUpdatingRL;
#doc
Подсчет начислений и удержаний по текущему работнику с округление данных  как в РЛ
#end
function CalculateCurrentValuesRL(mode: word): double;
end;

objinterface IViewLog;
#doc
  уровень детализации лога при расчете сальдо
#end
property ViewLog: word;

end;

objinterface oPrMonthInsure;
#doc
  установка параметра по категории застрахованного лица
#end
Procedure pSetParamInsure(cRec_Insur: comp);
end;

#doc
Объектный интерфейс для работы с PRMONTH (для отчета ОВР)
#end
objinterface oPrMonthUpdatingOVR2;
#doc
#end
procedure InitUderMarker(AFlag: boolean);
procedure DoneUderMarker;
#doc
#end
function  GetTotalSummaNT: double;
end;

vipinterface PrMonthUpdating implements oPrMonthUpdating, oPrMonthUpdatingRpVed01, oPrMonthUpdatingRpVed02,
                                        oPrMonthUpdatingWithAnalitics,oPrMonthUpdatingOVR, oPrMonthLikeDeposit,
                                        oPrMonthUpdatingVedPasPlat, oPrMonthUpdatingRL, IViewLog, oPrMonthInsure,
                                        oPrMonthUpdatingOVR2
#ifdef ATL51
Licensed(Free)
#end
;
