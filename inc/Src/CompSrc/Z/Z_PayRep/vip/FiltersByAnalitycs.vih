//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------

#ifndef _FiltersByAnalitycs_vih_INCLUDED_
#define _FiltersByAnalitycs_vih_INCLUDED_

#ifdef ComponentVersion
#component "Z_PAYREP"
#end

//------------------------------------------------------------------------------
#doc
  Объектный интерфейс загрузки и сохранения настроек
#end
objinterface ISettingsKeeper;
  #doc
    вызывает окно выбора аналитических фильтров
  #end
  function  Pick: word;
  #doc
    загружает в фильтр настройки, связанные с заданным префиксом
  #end
  procedure Load(Pref: string);
  #doc
    сохраняет текущие настройки фильтра с заданным префиксом
  #end
  procedure Save(Pref: string);

  #doc
    Событие, возникающее при открытии окна для настройки фильтров, в
    обработчике события, например, можно произвести загрузку нужных настроек
    с помощью метода Load или сохранить уже имеющиеся с помощью метода Save
    в параметре передается идентификатор вызвавшего события (cmInit, cmDefault...)
  #end
  event procedure OnBeforeLoad(AEvent: word);
  #doc
    Событие, возникающее при открытии окна для настройки фильтров (после
    события OnBeforeLoad). В обработчике события, например, можно произвести
    загрузку настроек с помощью метода Load или сохранить уже имеющиеся
    с помощью метода Save. В параметре передается идентификатор вызвавшего
    события (cmInit, cmDefault, cmCancel...)
  #end
  event procedure OnAfterLoad(AEvent: word);
  #doc
    Событие, возникающее при закрытии окна настройки фильтров или закрытии интерфейса
    В параметре передается идентификатор вызвавшего события (cmDefault, cmCancel...)
  #end
  event procedure OnBeforeSave(AEvent: word);
  #doc
    Событие, возникающее при закрытии окна настройки фильтров или закрытии интерфейса
    Событие возникает после события OnBeforeSave.
    В параметре передается идентификатор вызвавшего события (cmDefault, cmCancel...)
  #end
  event procedure OnAfterSave(AEvent: word);

  #doc
    установлен ли фильтр
  #end
  function IsFilterSet: boolean;
  #doc
    проверка на возможность использования фильтра
  #end
  function IsApplicable: boolean;
  #doc
    Текстовое описание текущего фильтра
  #end
  function GetFilterName: string;
  #doc
    Текстовое описание фильтра, соответствующее переданному коду среза
  #end
  function GetNameByCode(Code: longint): string;
  #doc
    Соответствует ли переданный код среза текущему загруженному фильтру.
    Проверка на соответствие значений не производится.
  #end
  function IsValidLevel(Layer: longint): boolean;
  #doc
    Проверка на соответствие переданных в параметрах значений загруженному фильтру.
    Проверка на соответствие по коду среза не производится.
  #end
  function IsInclude(Tbl: word; Val: comp): boolean;
end;

//------------------------------------------------------------------------------
#doc
  Объектный интерфейс для проверки соответствия буфера записи условию фильтра
#end
objinterface IBufValid;
  #doc
    Возникает при проверке переданного буфера записи если найдено значение,
    удовлетворяющее фильтру. В параметрах содержит найденное значение.
  #end
  event procedure IsFound(Tbl: word; Val: comp);
  #doc
    Возвращает код среза (тип фильтра) и значения из проверяемого
    источника данных
  #end
  function LastChecked(var TBL: word; var VAL: comp): longint;
end;

objinterface IBKLVIDOPL;
  #doc
    проверяет переданный буфер записи на соответствие фильтрам
  #end
  function Valid(B: TYPE$KLVIDOPL): boolean;
end;

objinterface IBSBBAN;
  #doc
    проверяет переданный буфер записи на соответствие фильтрам
  #end
  function Valid(B: TYPE$SBBAN): boolean;
end;

objinterface IBSPPLBAN;
  #doc
    проверяет переданный буфер записи на соответствие фильтрам
  #end
  function Valid(B: TYPE$SPPLBAN): boolean;
end;

objinterface IBZAROPER;
  #doc
    проверяет переданный буфер записи на соответствие фильтрам
  #end
  function Valid(B: TYPE$ZAROPER): boolean;
end;

objinterface IBUDER;
  #doc
    проверяет переданный буфер записи на соответствие фильтрам
  #end
  function Valid(B: TYPE$UDER): boolean;
end;

objinterface IBPRVIDOPL;
  #doc
    проверяет переданный буфер записи на соответствие фильтрам
  #end
  function Valid(B: TYPE$PRVIDOPL): boolean;
end;

objinterface IBOTPUSK;
  #doc
    проверяет переданный буфер записи на соответствие фильтрам
  #end
  function Valid(B: TYPE$OTPUSK): boolean;
end;

objinterface IBBLISNET;
  #doc
    проверяет переданный буфер записи на соответствие фильтрам
  #end
  function Valid(B: TYPE$BLISNET): boolean;
end;
// набивка и обход составной иерархии
#include CompoundHierarchy.vih

//******************************************************************************
//
//******************************************************************************
objinterface IRegisterSpecificationSum;
  function GetValue: double;
  procedure SetValue(Value: double);
end;

//******************************************************************************
//
//******************************************************************************
vipinterface RegisterSpecificationSum
  implements IRegisterSpecificationSum, ISummable
  licensed(free);

//------------------------------------------------------------------------------
vipinterface FiltersByAnalitycs
  implements
    ISettingsKeeper,
    IBufValid,
    IBKLVIDOPL,
    IBSBBAN,
    IBSPPLBAN,
    IBZAROPER,
    IBUDER,
    IBPRVIDOPL
//    IBOTPUSK,
//    IBBLISNET
  licensed(free);

#end
