/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,2001 корпорация ГАЛАКТИКА                    ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Заработная плата                                          ║
 ║ Версия        : 5.7 - 7.1                                                 ║
 ║ Назначение    : Объектный интерфейс "Функции обработки отпусков"          ║
 ║ Ответственный : Корзюк Виталий Францевич                                  ║
 ║ Параметры     : нет                                                       ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#ifndef _OTPFUNCS_INCLUDED_
#define _OTPFUNCS_INCLUDED_

#include WTREFORMER.VIH

#ifdef ComponentVersion
#component "Z_SREDN"
#end
#ifdef ComponentVersionInDict
#include IOTPUSK.VIH
public type TOtpusk = record as table OTPUSK;
#else
type TOtpusk = record as table OTPUSK;
#end

#doc
Объектный интерфейс "Функции обработки отпусков"
#end
objinterface oVacationFunctions;
  #doc
  проверить наличие пересечений отпуска B с другими отпусками работника;
  вывести список пересеченных отпусков в лог-файл (Silent = true),
  либо выдать соотв. мессагу при обнаружении первого пересечении (Silent =
  false)
  #end
  function CheckIntersections(B: TOtpusk; Silent: boolean): boolean;


  #doc
  модифицирует остаток планового отпуска
  и контролирует общую продолжительность cFact-пакета отпусков;
  #end
  procedure After_Modify_Fact(cFact : comp);


  #doc
  формирует общие сведения по cFact-пакету отпусков
  #end
  procedure Form_Fact_One (cFact: comp);


  #doc
  подсоединить отпуск с Nrec = cOtp к подходящему пакету по алгоритму Algor
  Algor - 0 - один отпуск - один пакет
          1 - попытаться найти подходящий пакет (цех-таб.ном.-месяц_ухода_в_отпуск)
  если при этом создался новый пакет, то возвращает 1, иначе 0
  переформировывается заголовок пакета
  #end
  function Connect_to_Fact(cOtp : comp; Algor: word): word;

  #doc
  формирование недостающих пакетов по существующим отпускам
  пытается самостоятельно определить принадлежность различных отпусков одному пакету
  #end
  procedure Form_Fact(MyChoice : word; Algor: word);

  #doc
  помечает cFact-пакет отпусков (формирует записи Formarks и вставляет
  их в таблицу для каждого отпуска из текущего пакета)
  #end
  procedure Mark_Fact(MyChoice : word; cFact : comp);

  #doc
  заполняет одну запись Vacations, связанную с cOtp-записью Otpusk, но не вставляет
  ее в таблицу
  #end
  procedure Fill_Vac(cOtp: comp);

  #doc
  #end
  function Test_Pack_Create(MyChoice: word): boolean;

  #doc
  автоматически создает или перезаписываетзаписи таблицы ArOtpusk,
  исходя из записи cOtp таблицы Otpusk. Удаляет лишние записи ArOtpusk.
  #end
  procedure ReFresh_ArOtpusk(cOtp : comp);


  #doc
  помечает cOtp-отпуск из таблицы Otpusk (формирует запись Formarks и вставляет
  ее в таблицу)
  #end
  procedure Mark_Otp (MyChoice: word; cOtp: comp);


  #doc
  При FlagDel = true - удаляет cOtp-запись в таблице Otpusk. </brief>
  После удаления заголовок пакета не переформировывается.
  Заголовок пакета удаляется, если нет отпусков в пакете.
  Возвращает число неудаленных записей или 0, если все нормально.
  #end
  function DeleteVacation(cOtp: comp; ForceDelete: boolean; WTR: IWorkingTableReformer): integer;


  #doc
  #end
  function DeletePacketIfEmpty(Packet: comp): boolean;

  #doc
  #end
  function DeletePacket(Packet: comp; ForceDelete: boolean; WTR: IWorkingTableReformer): integer;

  #doc
  Создание пакетов отпусков для л/с внутреннего совместителя
  #end
  function CrAdjacentVac (NrecFact : comp; WTR: WorkingTableReformer; fNeed : boolean) : boolean;


  #doc
  Удаление пакетов отпусков для л/с внутреннего совместителя
  #end
  function DelAdjacentVac (NrecFact : comp; WTR: WorkingTableReformer; fNeed : boolean) : boolean;


  #doc
  Обновление пакетов отпусков для л/с внутреннего совместителя
  #end
  function UpAdjacentVac (NrecFact : comp; WTR: WorkingTableReformer; fNeed : boolean) : boolean;


  #doc
  расчет налогов на ФОТ
  #end
  procedure RasFot(MyChoice: word);


  #doc
  #end
  function AutoReformWorkingTableAll : boolean;

end;

objinterface oVacationFunctions1;

#doc
Процедура установки переменной для позиционирования на лицевой счет
#end
procedure SetLschetNrec(cLshet, cPsn: comp);

end;

#doc
#end
objinterface oOtpFunctions;

  #doc
  Кол-во алгоритмов порядка предоставления отпуска
  #end
  function GetIsRabDnCount: integer;


  #doc
  Название I-го алгоритма порядка предоставления отпуска
  #end
  function GetIsRabDnName(I: integer): string;

end;

#doc
#end
objinterface oOtpFunctions1;

  #doc
  Принадлежность отпуска классу Административных
  #end
  function IsAdminOtpusk(_KOTPUS : word; KodA : word) : boolean;

  #doc
  Принадлежность отпуска классу Детских отпусков
  #end
  function IsChieldOtpusk(_KOTPUS : word; KodO : word) : boolean;

  #doc
  Количество дней отпуска, предоставленного в каледнарном году
  #end
  function GetDurationVac(_KotPus : word; _cPers : comp; _cVacation : comp; _Year : word) : double;

  #doc
  Кол-во дней отпуска, оставшегося относительного планового
  #end
  function GetDurationVacForPlan(
                                  _parentnrec : comp;
                                  _cvacation  : comp;
                                  _duration   : double;
                                  _action     : word;
                                  _kotPus     : word;
                                  _cPerson    : comp;
                                  _Year       : word;
                                  _show       : boolean
                                ) : double;

end;

#doc
#end
objinterface oOtpFunctions2;

  #doc
  Количество оставшихся часов дополнительных выходных дней
  #end
  function GetRemainHoursCount(Account: comp; KotPus : word; KolDn : word; Mon : word; Yea : word): double;

  #doc
  Количество оставшихся дополнительных выходных дней
  #end
  function GetRemainDaysCount(Account: comp; KotPus : word; KolDn : word; Mon : word; Yea : word): word;

  #doc
  Не исчерпан ли лимит часов для дополнительных выходных дней
  #end
  function NoHours(Account: comp; KotPus : word; KolDn : word; Mon : word; Yea : word): boolean;



end;

#doc
#end
objinterface oOtpFunctions3;
#doc
Функция проверяет на наличие реестра по перечислению в банк, 
связанного с таблицей OTPUSK
#end
function FindZaroper(OTP_NREC: comp; LSNrec: comp) : boolean;
end;


vipinterface VacationFunctions implements oVacationFunctions, oVacationFunctions1
#ifdef ATL51
Licensed(Free)
#end
;
vipinterface OtpFunctions implements oOtpFunctions, oOtpFunctions1, oOtpFunctions2, oOtpFunctions3
#ifdef ATL51
Licensed(Free)
#end
;
#end
