/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                                           (c) корпорация ГАЛАКТИКА        ║
 ║ Проект        : Управление персоналом                                     ║
 ║ Версия        : 7.11                                                      ║
 ║ Назначение    : Сервисная функция: Копирование данных сотрудников         ║
 ║                 повторно принимаемых на работу                            ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#ifdef ComponentVersion
#component "z_StaffRepeat"
#end

#doc
Работа с таблицами при повторном трудоустройстве
#end
objinterface IPersonsConnector;

#doc
  Функция перепривязки данных по всем таблицам из одной карточки
  сотрудника в другую. Актуально в первую очередь для СФ "Слияния"
  bNeedCheck - проверять ли на наличие сходных записей
#end
function MergeTwoPersons(cPsnSource, cPsnDestination: comp; bNeedCheck: boolean): boolean;

#doc
  Функция перевода назначений в архив
  iPrizn = -5: обработать все закладки, кроме "предыдущих трудоустройств",
  т.к. они остаются без изменений
  cNotApp - назначение, которое не нужно переводить в архив
#end
function TransferApp(cPsn: comp; iPrizn: integer; cNotApp: comp): boolean;

#doc
  Функция отката из двух карточек в случаях когда удаляют утвержденный приказ
#end
function UndoMergeTwoPersons(cPsnSource, cPsnDestination: comp): boolean;

#doc
  Функция перевода назначений из архива в действующие
  на основании отсечения по дате - это единственный контроль
#end
function UndoTransferApp(cPsn: comp; dWork: date): boolean;

#doc
  Функция создания записи в таблице "История увольнений" (MoveLsc)
#end
function CreateHistoryDissmissing(cOldPsn, cNewPsn, cOldLs, cNewLs, cOrder: comp): boolean;

#doc
  Функция проверки на то, являются ли карточка принятыми на ту же карточку.
  В подобных случаях необходимо анализировать архивные данные по назначениям,
  а также последнюю закладку (lPrizn = 100)
  cPsn - ссылка к проверяемой карточке
  dApp - дата проверки. Необходима для того, чтобы четко проанализировать
  ситуацию, когда одного и того же человека вначале могли принять на ту же
  карточку, а потом на другую (ну или вариации)
#end
function CheckOnRepeating(cPsn: comp; dApp: date): boolean;

end;

vipinterface PersonsConnector implements IPersonsConnector
  Licensed (free)
;
