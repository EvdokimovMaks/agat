/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,2001 корпорация ГАЛАКТИКА                    ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Заработная плата                                          ║
 ║ Версия        : 5.8                                                       ║
 ║ Назначение    : Таблица в памяти для пометки лицевых счетов в             ║
 ║                 подразделениях, бригадах, группах работников,..           ║
 ║ Ответственный : Корзюк Виталий Францевич                                  ║
 ║ Параметры     : нет                                                       ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#ifndef _MARKS_INC
#define _MARKS_INC

#ifdef ComponentVersion
  #component "Z_Lschet"
#end
#ifdef ComponentVersionInDict
  #include ilschet.vih
  public type MarksTLschet = record as table LSCHET;
  #define MarksTLschet MarksTLschet
#else
  #define MarksTLschet type$LSCHET
#end

//******************************************************************************
#doc
  Объектный интерфейс валидатора лицевого счета.
#end
objinterface IPersonalAccountValidator;
  #doc
    Возвращает true, если содержимое буфера лицевого счета соответствует
    описанным в реализации метода условиям.
  #end
  function Valid(B: #MarksTLschet): boolean;
end;

//******************************************************************************
#doc
  Объектный интерфейс составного валидатора лицевого счета.
#end
objinterface ICompoundPersonalAccountValidator;
  #doc
    Добавляет валидатор в список.
  #end
  procedure Add(Validator: IPersonalAccountValidator);

  #doc
    Удаляет валидатор из списка.
  #end
  procedure Del(Validator: IPersonalAccountValidator);

  #doc
    Возвращает true, если валидатор уже есть в списке.
  #end
  function Has(Validator: IPersonalAccountValidator): boolean;

  #doc
    Очищает список валидаторов.
  #end
  procedure Clear;

  #doc
    Возвращает true, если список валидаторов пуст.
  #end
  function IsEmpty: boolean;
end;

objinterface ICompoundPersonalAccountValidator2;
  function getFirstValidator(var ARef: IPersonalAccountValidator): boolean;
  function getNextValidator(var ARef: IPersonalAccountValidator): boolean;
  function GetValidatorByVipName(var ARef: IPersonalAccountValidator; AName: string): boolean;
end;

//******************************************************************************
#doc
  Объектный интерфейс плагина для браузера валидаторов.
#end
objinterface IPersonalAccountValidatorBrowserPlugin;
  #doc
    Возвращает описание плагина.
  #end
  function GetDescription: string;

  #doc
    Возвращает true, если у представляемого плагином валидатора есть параметр[ы].
  #end
  function HasParameters: boolean;

  #doc
    Запускает окно настройки параметров валидатора.
  #end
  function SetupParameters: boolean;

  #doc
    Очищает значения параметров валидатора.
  #end
  procedure ClearParameters;

  #doc
    Возвращает строковое представление значений параметров валидатора.
  #end
  function GetParametersStr: string;

  #doc
    Возвращает валидатор.
  #end
  function GetValidator: IPersonalAccountValidator;
end;

//******************************************************************************
#doc
  Объектный интерфейс ресурсо-ориентированного хранилища.</brief>

  <p>Используется для реализации хранения значений параметров валидаторов
  лицевого счета.</p>
#end
objinterface IResourceBased;
  #doc
    Загружает данные ресурса.</brief>

    <p>В параметре передается префикс наименования ресурса.</p>
  #end
  procedure Load(ResourcePrefix: string);

  #doc
    Сохраняет данные ресурса.</brief>

    <p>В параметре передается префикс наименования ресурса.</p>
  #end
  procedure Store(ResourcePrefix: string);
end;

#doc
  Объектный интерфейс хранилища настроек интерфейса выбора лицевых
  счетов.</brief>

  <p>Абстрактная величина и связанные с ней настройки используются для
  реализации дополнительного ввода суммы, процента, коэффициента и т.п.</p>
#end
objinterface IPickOptions;
  #doc
    Возвращает значение абстрактной величины по умолчанию.
  #end
  function  GetDefaultValue: double;

  #doc
    Устанавливает значение абстрактной величины по умолчанию.
  #end
  procedure SetDefaultValue(ADefaultValue: double);

  #doc
    Возвращает значение признака визуализации абстрактной величины.
  #end
  function  GetShowValue: boolean;

  #doc
    Устанавливает значение признака визуализации абстрактной величины.
  #end
  procedure SetShowValue(AShowValue: boolean);

  #doc
    Возвращает количество знаков после запятой для отображения абстрактной
    величины.
  #end
  function  GetValuePrecision: byte;

  #doc
    Устанавливает количество знаков после запятой для отображения абстрактной
    величины.
  #end
  procedure SetValuePrecision(AValuePrecision: byte);

  #doc
    Возвращает заголовок колонки, в которой отображаются значения абстрактной
    величины.
  #end
  function  GetValueTitle: string;

  #doc
    Устанавливает заголовок колонки, в которой отображаются значения
    абстрактной величины.
  #end
  procedure SetValueTitle(AValueTitle: string);

  #doc
    Возвращает описание абстрактной величины (отображается в строке подсказки.
  #end
  function  GetValueDescr: string;

  #doc
    Устанавливает описание абстрактной величины для формирования содержимого строки подсказки.
  #end
  procedure SetValueDescr(AValueDescr: string);

  #doc
    Возвращает код таблицы, записи которой будут помечаться в интерфейсе выбора
    при его запуске.
  #end
  function  GetCode: word;

  #doc
    Устанавливает код таблицы, записи которой будут помечаться в интерфейсе
    выбора при его запуске.
  #end
  procedure SetCode(ACode: word);

  #doc
    Возвращает nrec группы (подразделения, бригады, группы работников), которая
    должна оказаться активной при запуске интерфейса выбора.
  #end
  function  GetGroup: comp;

  #doc
    Устанавливает nrec группы (подразделения, бригады, группы работников), которая
    должна оказаться активной при запуске интерфейса выбора.
  #end
  procedure SetGroup(AGroup: comp);

  #doc
    Возвращает значение управляющей маски.</brief>

    <p>Управляющая маска представляет собой набор следующих битовых флагов:
    <ul>
    <li>vfCanEditObjects (1) - возможен вызов интерфейса редактирования объектов;
    <li>vfCanEditGroups (2) - возможен вызов интерфейса редактирования групп;
    <li>vfSingleGroupSelection (8) - пометка возможна только в одной группе;
    <li>vfSilentlySelectAll (16) - пометить всё и свернуться;
    <li>vfCanSelect (32) - выбор дозволен;
    <li>vfMultipleSelection (96) - множественный выбор объектов;
    <li>vfKeepMarks (128) - не удалять пометки при переключении закладок;
    <li>vfViewByDepartment (256) - просматривать подразделения и лицевые счета;
    <li>vfViewByBrigade (512) - просматривать бригады и их спецификации;
    <li>vfViewByGroup (1024) - просматривать группы работников и их спецификации;
    <li>vfViewByWhatever (1792) - все возможные варианты просмотра;
    </ul>

    </p>
  #end
  function  GetFlags: word;

  #doc
    Устанавливает значение управляющей маски.
  #end
  procedure SetFlags(AFlags: word);

  #doc
    Возвращает код кассира (для установки фильтра).
  #end
  function GetCashier: word;

  #doc
    Устанавливает код кассира.
  #end
  procedure SetCashier(Value: word);

  #doc
    Устанавливает валидатор "помечаемости" лицевых счетов.</brief>

    <p>Пометить можно только те объекты, которые связаны с лицевыми счетами,
    отвечающими описанным в валидаторе ограничениям.</p>
  #end
  procedure SetMarkValidator(Value: IPersonalAccountValidator);

  #doc
    Возвращает валидатор "помечаемости" лицевых счетов.
  #end
  function GetMarkValidator: IPersonalAccountValidator;

  #doc
    Устанавливает валидатор видимости лицевых счетов.</brief>

    <p>В интерфейсе выбора будут отображаться только те объекты, которые
    связаны с лицевыми счетами, отвечающими описанным в валидаторе
    ограничениям.</p>
  #end
  procedure SetVisibilityValidator(Value: IPersonalAccountValidator);

  #doc
    Возвращает валидатор видимости лицевых счетов.
  #end
  function GetVisibilityValidator: IPersonalAccountValidator;
end;

//******************************************************************************
#doc
  Объектный интерфейс выбора просматриваемого периода
#end
objinterface IPickPeriod;
  #doc
    Установить новые значения границ периода
  #end
  function SetPeriod(ABegDate, AEndDate: date): boolean;

  #doc
    Возвращает границы периода, по которому производится выборка данных
  #end
  procedure GetPeriod(var ABegDate, AEndDate: date);

end;

//******************************************************************************
#doc
  Объектный интерфейс фильтров интерфейса выбора лицевых счетов.</brief>

  <p>Используется для установки сложных фильтров "помечаемости" и видимости
  лицевых счетов в интерфейсе выбора.</p>
#end
objinterface IPickFilters;
  #doc
    Возвращает ссылку на составной валидатор видимости лицевых счетов.</brief>

    <p>В интерфейсе выбора будут отображаться только те объекты, которые
    связаны с лицевыми счетами, отвечающими описанным в валидаторе
    ограничениям.</p>
  #end
  function VisibilityValidator: ICompoundPersonalAccountValidator;

  #doc
    Возвращает ссылку на составной валидатор "помечаемости" лицевых
    счетов.</brief>

    <p>Пометить можно только те объекты, которые связаны с лицевыми счетами,
    отвечающими описанным в валидаторе ограничениям.</p>
  #end
  function MarkValidator: ICompoundPersonalAccountValidator;

  #doc
    Устанавливает стандартное содержимое составного валидатора видимости
    лицевых счетов.
  #end
  procedure SetDefaultVisibilityValidator;

  #doc
    Устанавливает стандартное содержимое составного валидатора "помечаемости"
    лицевых счетов.
  #end
  procedure SetDefaultMarkValidator;
end;

//******************************************************************************
objinterface IPersonalAccountMarks; forward;

objinterface IPersonalAccountFilter; forward;

//******************************************************************************
#doc
  Объектный интерфейс итератора по пометкам лицевых счетов.
#end
objinterface IPersonalAccountMarksIterator;
  #doc
    #doc_internal
    Настраивает итератор на обход данных пометок.
  #end
  function Init(Marks: IPersonalAccountMarks): boolean;

  #doc
    Устанавливает указатель на первую пометку в списке и возвращает true в
    случае успешного завершения.
  #end
  function First: boolean;

  #doc
    Устанавливает указатель на следующую пометку в списке и возвращает true в
    случае успешного завершения.
  #end
  function Next: boolean;

  #doc
    Возвращает nrec группы из текущей пометки.
  #end
  function GetGroup: comp;

  #doc
    Возвращает nrec объекта из текущей пометки.
  #end
  function GetObject: comp;

  #doc
    Возвращает значение абстрактной величины, ассоциированной с текущей пометкой.
  #end
  function GetValue: double;

  #doc
    Возвращает nrec лицевого счета из текущей пометки.
  #end
  function GetPersonalAccount: comp;

  #doc
    Возвращает код таблицы на запись которой ссылается текущая пометка.
  #end
  function GetCode: word;
end;

//******************************************************************************
#doc
  Объектный интерфейс пометок лицевых счетов.
#end
objinterface IPersonalAccountMarks;
  #doc
  вернуть идентификатор пометок
  #end
  function GetCode: word;
  #doc
  установить идентификатор пометок
  #end
  procedure SetCode(Value: word);
  #doc
  количество пометок
  #end
  function GetCount: longint;
  #doc
  есть ли пометки
  #end
  function Available: boolean;
  #doc
  удалить пометки
  #end
  function Clear: boolean;
  #doc
  загрузить пометки
  #end
  function Load: boolean;
  #doc
  выгрузить пометки
  #end
  function Unload: boolean;
  #doc
  вернуть итератор
  #end
  function GetIterator: IPersonalAccountMarksIterator;
  #doc
  вызвать интерфейс пометки лицевых счетов
  #end
  function SelectPersonalAccount(PickOptions: IPickOptions): boolean;
end;

#doc
методы для определения наличия пометок различных типов
#end
objinterface IPersonalAccountMarksExt;
  #doc
  определить наличие пометок группы
  #end
  function HasGroup(Code: word; Value: comp): boolean;
  #doc
  определить наличие пометки объекта
  #end
  function HasObject(Code: word; Value: comp): boolean;
  #doc
  определить наличие пометок лицевого счета
  #end
  function HasPersonalAccount(Code: word; Value: comp): boolean;
end;

#doc
интерфейс управления пометками
#end
objinterface IPersonalAccountMarkManager;
  #doc
  создание пометки
  #end
  function InsertMark(Code: word; Grp: comp; Obj: comp; CLSCHET: comp; Value: double=0): boolean;
  #doc
  удаление пометки
  #end
  function DeleteMark(Code: word; Grp: comp; Obj: comp): boolean;
  #doc
  возвращает True если пометка существует
  #end
  function MarkExists(Code: word; Grp: comp; Obj: comp): boolean;
  #doc
  обновление пометки
  #end
  function MarkUpdate(Code: word; Grp: comp; Obj: comp; CLSCHET: comp; Value: double=0): boolean;
end;

#doc
фильтр по лицевым счетам
#end
objinterface IPersonalAccountFilter;
  #doc
  инициализировать фильтр
  #end
  function Init(Code: word): boolean;
  #doc
  строковое представление
  #end
  function AsString: string;
  #doc
  пуст ли фильтр
  #end
  function Empty: boolean;
  #doc
  очистить фильтр
  #end
  function Clear: boolean;
  #doc
  вернуть пометки
  #end
  function GetMarks: IPersonalAccountMarks;
  #doc
  проверить, установлен ли фильтр и, если нет, попытаться установить его
  в соответствии с пользовательскими настройками
  #end
  function SetDefault(PickOptions: IPickOptions): boolean;
  #doc
  изменить фильтр (запустить инт-с пометки лицевых счетов)
  #end
  function Change(PickOptions: IPickOptions): boolean;
  #doc
  событие "Фильтр изменился"
  #end
  event procedure OnChanged(Sender: IPersonalAccountFilter);
end;

#doc
нотификатор пометок лицевых счетов
#end
objinterface IPersonalAccountMarksNotifier;
  #doc
  просигналить об изменении пометок
  #end
  procedure Changed(Sender: IPersonalAccountMarks);
  #doc
  событие "Пометки изменились"
  #end
  event procedure OnChanged(Sender: IPersonalAccountMarks);
end;

//------------------------------------------------------------------------------
vipinterface VPickOptions implements IPickOptions, IPickFilters, IPickPeriod
Licensed(Free)
;
vipinterface PersonalAccountMarks implements IPersonalAccountMarks, IPersonalAccountMarksExt, IPersonalAccountMarkManager
Licensed(Free)
;
vipinterface PersonalAccountMarksIterator implements IPersonalAccountMarksIterator
Licensed(Free)
;
vipinterface PersonalAccountFilter implements IPersonalAccountFilter
Licensed(Free)
;
vipinterface PersonalAccountMarksNotifier implements IPersonalAccountMarksNotifier
Licensed(Free)
;

#end
