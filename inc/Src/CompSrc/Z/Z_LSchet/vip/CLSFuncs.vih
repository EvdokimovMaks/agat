//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 8.1-9.1 - Лицевые счета
// Объектные интерфейсы функций пересканирования лицевых счетов
//------------------------------------------------------------------------------

#ifndef _CLSFUNCS_INCLUDED_
#define _CLSFUNCS_INCLUDED_

#component "Z_LSchet"

#include DepTree.vih

type
  TModeLS = record
    cPos: comp;
    SortM: string;
  end;

#doc
  Объектный интерфейс для работы со списком текущих лицевых счетов и
  подразделений.
#end
objinterface ICurLSFunctions;
  #doc
    Возвращает маркер со списком текущих подразделений.
  #end
  function LoadCurrentDepartmentList: TPtr;
  #doc
    Возвращает маркер с полным списком текущих подразделений (если фильтр по
    подразделениям не установлен, в маркер будут помещены nrec-и всех доступных
    подразделений).
  #end
  function LoadFullCurrentDepartmentList: TPtr;
  #doc
    Возвращает 32-х битную контрольную сумму содержимого маркера
    (предполагаемый размер элемента = 8 байт).
  #end
  function GetDepartmentsCheckSum(Departments: TPtr): longint;
  #doc
    Обновляет список текущих лицевых счетов. Возвращает true в случае успеха
    или false - в противном случае.
  #end
  function ReScan: boolean;
  #doc
    Устанавливает фильтр по подразделениям, ссылки на которые переданы в
    маркере Departments, и, если необходимо, обновляет список текущих лицевых
    счетов. Возвращает true в случае успеха или false - в противном случае.
  #end
  function ReScanIfNecessary(Departments: TPtr): boolean;
  #doc
    Возвращает строку с информацией о текущем фильтре по подразделениям.
  #end
  function GetDepartmentFilterStr: string;
end;

#doc
  Объектный интерфейс индикатора состояния фильтра по подразделениям.
#end
objinterface IDepartmentFilterStateDetector;
  #doc
    Возвращает true, если установлен фильтр по одному или нескольким (но не по
    всем доступным) подразделениям. В противном случае возвращает false.
  #end
  function IsDepartmentFilterSet: boolean;
end;

#doc
  Объектный интерфейс для управления флагом пересканирования текущих лицевых
  счетов.
#end
objinterface ICurLSFunctions1;
  #doc
    Устанавливает значение флага необходимости пересканирования текущих лицевых
    счетов для всех пользователей.
  #end
  procedure SetRescanNecessary4AllUsers(Value: boolean);
  #doc
    Устанавливает значение флага необходимости пересканирования текущих лицевых
    счетов для текущего пользователя.
  #end
  procedure SetRescanNecessary(Value: boolean);
end;

#doc
  Объектный интерфейс для управления периодом выборки информации о текущих
  лицевых счетах.
#end
objinterface IPeriodForScanFuncs;
  #doc
    Устанавливает месяц для пересканирования (описывается датой dValue).
  #end
  procedure SetPeriodViewBeginning(dValue: date);
  #doc
    Возвращает месяц для пересканирования (описывается датой).
  #end
  function GetPeriodViewBeginning: date;
end;

#doc
  Объектный интерфейс для инициализации фильтра по цеху учета (обычный)
#end
objinterface ICurLSFunctions2;
  #doc
    Инициализирует фильтр по цеху учета (обычный фильтр лицевых счетов по подразделению) </brief>
  #end
  function InitCommonFilter: boolean;
end;

#doc
  Объектный интерфейс настройки фильтра по цеху отнесения затрат
#end
objinterface ICexozFilter;
  #doc
    Инициализирует фильтр по цеху отнесения затрат </brief>
    Метод позволяет задать период сканирования. Под периодом сканирования понимается
    период в который попадают суммы из таблиц SumVidOp, Nachisl, Nenach с указанным
    в фильтре цехом отнесения затрат.
    Параметры:
      yearParam      - год
      monthBeginning - месяц начала периода сканирования
      monthEnding    - месяц конца периода сканирования
  #end
  procedure InitCexozFilter(yearParam: word; monthBeginning: byte; monthEnding: byte);
end;

#doc
  Объектный интерфейс определения доступности подразделения
#end
objinterface IDepartmentAvailability;
  #doc
    Возвращает true, если подразделение доступно
  #end
  function IsAvailable(Department: comp): boolean;
end;

objinterface ICurLSFunctions3;
  #doc
    Получить значение флага необходимости пересканирования текущих лицевых
    счетов для текущего пользователя.
  #end
  function GetRescanNecessary: boolean;
end;

objinterface ICurLSFunctions4;
  #doc
    Получить значение текущих настроек пересканирования - фильтр по цехам отнесения затрат
  #end
  function GetUseFilterCexoz: boolean;
  #doc
    Получить значение текущих настроек пересканирования - дата окончания период для пересканирования лицевых счетов
  #end
  function GetPeriodViewEnding: date;
  #doc
    Очистить таблицу с лицевыми счетами
  #end
  procedure ClearTableCurLS;
  #doc
    Записать данные в таблицу с лицевыми счетами
  #end
  procedure InsInTableCurLS(Pr1: Byte);
  #doc
    Сохранение параметров при пересканировании
  #end
  procedure StoreParams;
  #doc
    Сравнение количества записей в маркере
  #end
  function PodrCompare: boolean;

end;
objinterface ICurLSFunctions5;
  #doc
    Установка параметров при загрузке интерфейса
  #end
  procedure StOnLoad;
  #doc
    Выполнение действий при закрытии интерфейса
  #end
  procedure StOnUnLoad;
  #doc
    Загрузка доступных подразделений и обработка текущих пометок
  #end
  procedure LoadListsExt;
end;

objinterface ICurLSFunctions6;
  #doc
    Пересканирование относительно текущей пометки подразделений
  #end
  function ReScanIfNecessaryDepCurrent: Boolean;
end;

objinterface ICurLSFunctions7;
  #doc
    Установить признак действия пользователя
  #end
  procedure SetMarksCall(AMarks: boolean);
  #doc
    Получить признак действия пользователя
  #end
  function GetMarksCall: boolean;
end;

objinterface ICurParams;
  #doc
    Параметр для хранения текущей позиции
  #end
  property prModeLS: TModeLS read write;
end;

objinterface ICurLSFunctions8;
  #doc
  #end
  procedure FormDataCexOz;
end;

objinterface ICurLSFunctions9;
  #doc
  #end
  procedure MakeSelectPart;
  function GetDestinationTable: integer;
end;

objinterface ICurLSFunctions10;
  #doc
  #end
  procedure SetSubTypeFilter(ASubType: word);
  function SetSubTypeFilterDefault: word;
  function GetSubTypeFilterLast: word;
end;

objinterface ICurLSFunctions11;
  #doc
  Возвращает тип установленного фильтра (обычный, по подразделениям отнесения затрат, ...)
  #end
  function GetFilterMode: word;
  #doc
  Возвращает контрольную сумму текущей выборки подразделений
  #end
  function GetCurrentDepartmentsCheckSum: longint;
end;

objinterface ICurLSFunctions12;
  #doc
  Передача период вручную
  #end
  procedure SetPeriodManual(ABeg, AEnd: date);
  #doc
  Сброс флага установки периода выборки вручную
  #end
  procedure ReSetPeriodManual;
end;

objinterface ICurLSFunctions13;
  #doc
    Инициализирует фильтр по цеху отнесения затрат
    Метод позволяет задать период сканирования.
  #end
  procedure InitCexozFilterExt(ADateB, ADateE: date);
end;

objinterface ICurLSFunctions14;
  #doc
    Занесение select-строк запроса выборки лицевых счетов.
  #end
  procedure MakeSelectPartCommonFields(handleStr: TPtr);
end;

//******************************************************************************
// Декларация стандартной реализации функционала работы со списком текущих
// лицевых счетов и подразделений
//******************************************************************************
vipInterface CurLSFunctions
  implements
    ICurLSFunctions,
    IDepartmentValidatorEquipped,
    IDepartmentFilterStateDetector,
    ICurLSFunctions1,
    IPeriodForScanFuncs,
    ICexozFilter,
    IDepartmentAvailability,
    ICurLSFunctions2,
    ICurLSFunctions3,
    ICurLSFunctions4,
    ICurLSFunctions5,
    ICurParams,
    ICurLSFunctions8,
    ICurLSFunctions9,
    ICurLSFunctions10,
    ICurLSFunctions11,
    ICurLSFunctions12,
    ICurLSFunctions13,
    ICurLSFunctions14
Licensed(Free)
;
    public:
      procedure LoadLists;
      procedure InsertRecord;
    end;

vipInterface CurLSFunctionsChild(CurLSFunctions)
  implements
    ICurLSFunctions6,
    ICurLSFunctions7
Licensed(Free)
;
    public:
      procedure LoadLists;
      function ICurLSFunctions.ReScanIfNecessary(Departments: TPtr): boolean;
      procedure ICurLSFunctions4.ClearTableCurLS;
      procedure ICurLSFunctions4.InsInTableCurLS(Pr1: Byte);
      procedure ICurLSFunctions4.StoreParams;
      function ICurLSFunctions4.PodrCompare: boolean;
      function IDepartmentFilterStateDetector.IsDepartmentFilterSet: boolean;
      //
      procedure SavePodrMarker(Pr1: longint);
      procedure SetReScanMode(Pr1: boolean);
      procedure ICurLSFunctions8.FormDataCexOz;
      procedure ICurLSFunctions9.MakeSelectPart;
      function ICurLSFunctions9.GetDestinationTable: integer;
    end;
#end
