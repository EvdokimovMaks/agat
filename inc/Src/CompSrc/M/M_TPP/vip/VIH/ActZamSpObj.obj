//******************************************************************************
//                                                      (c) корпорация ГАЛАКТИКА
// ГАЛАКТИКА 7.11 Производственный контур/Спецификации продуктов
//                Объектный интерфейс редактирования спецификаций актов замен
//******************************************************************************


#ifndef __ACTZAMSPOBJ_OBJ__
#define __ACTZAMSPOBJ_OBJ__

#include ActZamSrvObj_TPP.vih

#doc
Объект для работы со спецификацией актов замен</brief><br>
#end

ObjInterface oActZamSp;

#doc
Генерация копии существующего акта замен по заданной ссылке.</brief>
#end
  Function CopyBuff_to_NoteBene(prRefNoteBene_Old : comp; var prRefNoteBene_New : comp) : string;

#doc
Выводит окно выбора с перечнем вариантов замен по заданному акту</brief><br>
Разрешается вызов только для актов вида "Комплексные замены"
#end
  Function RunWnd_VarintZam_SelOne(prTitleWindow : string; prRefNoteBene : comp; var prRefObjParam : comp) : longInt;

#doc
Выводит окно выбора с перечнем вариантов замен по заданному акту</brief><br>
Разрешается вызов только для актов вида "Комплексные замены"
#end
  Function RunWnd_VarintZam_SelMlt(prTitleWindow : string; prRefNoteBene : comp; prListPick : word) : longInt;

#doc
Возвращает 0 если вид акта - "Одиночные замены", и 1 если "Комплексные замены"</brief><br>
#end
  Function GetFlagFormat_ActZam_for_Calss : word;

#doc
Возвращает интервал дат (параметры prDateStart, prDateEnd) в течении которого<br>
данный вариант замен может быть задействован</brief><br>
Разрешается вызов только для актов вида "Комплексные замены"
#end
  Function GetDateInterval_from_Filter(prRefNoteBene : comp; prRefObjParam : comp; var prDateStart : date; var prDateEnd : date) : boolean;

#doc
Возвращает интервал дат (параметры prDateStart, prDateEnd) в течении которого<br>
данная операция по акту замен может быть задействована</brief><br>
#end
  Function GetDateInterval_from_NBSIzm(prNBSIzm : type$NBSIzm; var prDateStart : date; var prDateEnd : date) : boolean;

#doc
Анализ возможности использования операции (параметр "prNBSIzm") по акту <br>
замен (параметр "prRefNoteBene") для замены ресурса</brief> - (параметры "prPriznak", <br>
"prRefMCUsl") с заданным распределением (параметры "prPriznak_GP", "prRefMCUsl_GP") <br>
для заданного периода действия спецификации документа<br>
(параметры prDocDate_Start, prDocDate_End)<br>
Возвращает:<br>
 0 - операция не может быть задействована,<br>
 1 - операция может быть задействована,<br>
 2 - оптимальный вариант из перечня приведенных в акте операций<br>
Возвращаемые параметры : <br>
-prRefNBSZam - ссылка на возможный вариант замены;
-prKoefZam - коэфициент замен;
-prKol_Oper - количество по операциям "Добавить", "Удалить"<br>
#end
  Function GetFlagUseNBSIzm_by_AktZam(prOgrGp_VarZam_NoUse : Boolean; prNullOgrGp_VarZam_use_ForAll : Boolean; prNullRspGp_SpDoc_use_ForAll : Boolean;
                                      prDocDate_Start : date; prDocDate_End : date; prNBSIzm : type$NBSIzm;
                                      prPriznak : word; prRefMCUsl : comp; prPriznak_GP : word; prRefMCUsl_GP : comp;
                                      p_wKatMC_wKodGrKau_1 : word; p_cKatMC_cKatRole_1 : comp; p_cKatMC_cAnVal_1 : comp;
                                      var prRefNBSZam : comp; var prKoefZam : double; var prKol_Oper : double; var pl_CodErr_use_NBSIzm : longint) : word;

#doc
Анализ возможности использования акта замен (параметр "prRefNoteBene")<br>
для добавлений ресурсов</brief> - (параметры "prPriznak", "prRefMCUsl") <br>
с заданным распределением (параметры "prPriznak_GP", "prRefMCUsl_GP") <br>
для заданного периода действия спецификации документа<br>
(параметры prDocDate_Start, prDocDate_End)<br>
Возвращает:<br>
 0 - акт не может быть задействован,<br>
 1 - акт может быть задействован,<br>
 2 - оптимальный вариант из перечня утвержденных актов<br>
#end
  Function GetFlagUseNBSIzm_by_AktAdd(prNullOgrGp_VarZam_use_ForAll : Boolean; prNullRspGp_SpDoc_use_ForAll : Boolean;
                                      prDocDate_Start : date; prDocDate_End : date; prNBSIzm : type$NBSIzm; prPriznak_GP : word; prRefMCUsl_GP : comp;
                                      p_wKatMC_wKodGrKau_1 : word; p_cKatMC_cKatRole_1 : comp; p_cKatMC_cAnVal_1 : comp;
                                      var prKol_Oper : double; var pl_CodErr_use_NBSIzm : longint) : word;

end; // oActZamSp


ObjInterface oActZamSp19(oActZamSp);

  Function InsTmpTab_Ext_Full_OutSide(prTypeOwn : word; prcOwner : comp; prTypeTop : word; prcTopTab : comp;
                                      prTypeRes : word; prcRes : comp; prcOtpED_Kol : comp; prKol : double;
                                      prNumber : word; prdtBeg : date; prdtEnd : date; prTypeOper : word) : comp;

  Function CopyVarZam_TmpTab_Ext(prSrc_1_cTmpTab_Ext : comp; prSrc_2_cTmpTab_Ext : comp; prSrc_3_cTmpTab_Ext : comp; prcOtpED_Kol : comp; prKol : double;
                                 var prDst_1_cTmpTab_Ext : comp; var prDst_2_cTmpTab_Ext : comp; var prDst_3_cTmpTab_Ext : comp) : boolean;

  Function Run_WndActZamSp_Ext_OutSide(prTypeOwn_1 : word; prTypeOwn_2 : word; prTitle : string;
                                       var prNoteBene : type$NoteBene; var prRefNBSIzm : comp; var prRefNBSZam : comp; var prRefNBSProd : comp;
                                       var prActZamSrvObj : oActZamSrv_TPP19) : longInt;

end;



ObjInterface oActZamSp20(oActZamSp19);

  Function DelNBSIzm_for_cNoteBene(prcNoteBene : comp) : integer;

  Function SetTmpObjParam(prcNoteBene : comp; prcObjParam : comp; prTop_cSpObjAcc : comp;
                          prwNumber : word; prdtBeg : date; prdtEnd : date; prName : string) : comp;
  Function Find_TmpObjParam(prnwMethodOfPIO_ActZam_IO : word;
                            prTop_cSpObjAcc : comp; prdtBeg : date; prdtEnd : date) : comp;
  Function AddPeriod_to_TmpObjParam(prcTmpObjParam : comp; prdtBeg : date; prdtEnd : date) : Boolean;

  Function SetSortNumber_from_Name : Boolean;

  Function SetTmpNBSIzm(prcNBSIzm : comp;
                        prcTmpObjParam : comp; prTypeOper : word;
                        prwNumber : word; prTypeRes : word; prcRes : comp;
                        prcOtpED_Kol : comp; prdValue : double; prcOtpED_New : comp) : comp;
  Function Find_TmpNBSIzm(prcTmpObjParam : comp; prTypeOper : word; prTypeRes : word; prcRes : comp) : comp;
  Function AddKol_to_TmpNBSIzm(prcTmpNBSIzm : comp;
                               prTypeRes : word; prcRes : comp;
                               prcOtpED_Kol : comp; prdValue : double; prcOtpED_New : comp) : Boolean;

  Function SetTmpNBSProd(prcNBSProd : comp;
                         prcTmpObjParam : comp;
                         prwNumber : word; prTypeRes : word; prcRes : comp) : comp;
  Function Find_TmpNBSProd(prcTmpObjParam : comp; prTypeRes : word; prcRes : comp) : comp;

  Function Run_WndActZamSp_Buff_OutSide(prTitle : string; var prNoteBene : type$NoteBene; prList_VarZam : word;
                                        var prActZamSrvObj : oActZamSrv_TPP19) : longInt;
end;


ObjInterface oActZamSp21(oActZamSp20);

Function GetFlagCorrectPeriod_for_NBSIzm(prDocDate_Start : date; prDocDate_End : date; prNBSIzm : type$NBSIzm) : Boolean;

end;


ObjInterface oActZamSp22(oActZamSp21);

 Function Convert_Format_AktZam_OK_Mess(p_cNoteBene : comp) : String;

end;

ObjInterface oActZamSp23(oActZamSp22);

 Function Run_WndActZamSp_Ext_OutSide_List_VarZam(prTypeOwn_1 : word; prTypeOwn_2 : word; prTitle : string;
                                                  var prNoteBene : type$NoteBene; prList_VarZam : word;
                                                  var prActZamSrvObj : oActZamSrv_TPP19) : longInt;
end;

#endif  // __ACTZAMSPOBJ_OBJ__
