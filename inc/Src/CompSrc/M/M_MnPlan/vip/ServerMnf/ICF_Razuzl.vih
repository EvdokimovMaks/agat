#ifndef __ICF_Razuzl__
#define __ICF_Razuzl__
#include  Query.vih
#include IMnfLog.vih

#ifdef ComponentVersion
#component "M_MNPLAN"
#end

/*
// данные, сформированные в результате расчета
Table STRUCT vtDstDate
(
//  Nrec               : comp,   // идентификатор строки
  cNormas            : comp,   // ссылка на норму, содержащую ссылку на cRes
  wRes               : word,
  cRes               : comp,
  dTrudRes           : double,
  wEdTime            : word,
  wPrUse             : word
)
With Index
(
//  vtDstDate01 = Nrec(Unique, Surrogate),
  vtDstDate01 = wRes + cRes,
  vtDstDate02 = wPrUse
);
*/

Type
  TOperParam = record
    TimeKoef      : double;
    TPZ100        : comp;
    MarshOperT100 : comp;
    HandOperT100  : comp;
    RejectPercent : double;
    PartyCount    : comp;
    PartyLoss     : comp;
    PartyVol      : comp;
    TimeDelay     : comp;
    PercentUse    : double;
    edNorm        : double;
end;

Type
  TOperStruct = record
    Params        : TOperParam;
    TPZ           : comp;
    HandJob       : comp;
    MachineJob    : comp;
    Duration      : comp;
end;
Type
   TGlobNastr = record
   SysNastrNormManual  : word; //0 - источник ресурс, 1 - источник операция
   SysNastrNormMachine : word; //0 - источник ресурс, 1 - источник операция
   JobUseTime          : word; //ручное время по операции считается, как: 0 - ручное, 1 - машинное, 2 - сумма, 3 - большее
   MachineUseTime      : word; //машинное время по операции считается, как: 0 - ручное, 1 - машинное, 2 - сумма, 3 - большее
   TimeCalc            : word;
end;
objInterface iCF_Razuzl;
  property ResultSet : IResultSet read;
  property LogMnf : IMnfLog;
  Function GetOperParamQ(cOper : comp; wFlag : word):IResultSet;
  Function GetOperDuration(cOper: comp):comp;
  Function GetMatNormas(cOper : comp):IResultSet;
  Function GetMatNormasMarsh(cMarsh : comp):IResultSet;

  Function GetOpers(cMarsh : comp):IResultSet;
  Function GetMarsh(cRec : comp):IResultSet;
  Function InitObjFunc : Boolean;
  Function AddToObjFunc(
                         cOper: comp;     // ссылка на позицию маршрутной карты
                         dKolIzd: double; // количество изделия для МК, куда входит cOper
                         cEdIzd: comp;    // единица измерения изделия
                         wEdTime: word    // код единицы измерения времени
                       ): Boolean;        // возвращает true, если все переданные данные корректны и были добавлены во временную таблицу
  Function AddToObjFuncKO(
                           cOper: comp;     // ссылка на позицию маршрутной карты, являющейся КО
                           dKolIzd: double; // количество изделия для МК, куда входит cOper
                           cEdIzd: comp;    // единица измерения изделия
                           wEdTime: word    // код единицы измерения времени
                         ): Boolean;        // возвращает true, если все переданные данные корректны и были добавлены во временную таблицу
  Function AddToObjFuncTable(
                               nametable: string;  // наименование на таблицу, содержащую перечень операций
                               dKolIzd  : double;  // количество изделия для МК, куда входят операции
                               cEdIzd   : comp;    // единица измерения изделия
                               wEdTime  : word     // код единицы измерения времени
                            ): Boolean;            // возвращает true, если все переданные данные корректны и были добавлены во временную таблицу
  Function RunRaschetTrudFunc(
                               wTypeRaschTime: word; // битовый флаг
                                                    // бит 0: какой тип трудоемкости мы хотим получить (0 - время ручное, 1 - время машинное)
                                                    // бит 1: 1/0 - агрегировать/нет трудоемкость в разрезе (цех + ресурс)
                               RaschetDT: string    // дата расчета : если пустая строкаб то без учета дат
                             ): IResultSet;
  Function RaschetTrudFuncSQL(
                               wTypeRaschTime: word; // битовый флаг
                                                    // бит 0: какой тип трудоемкости мы хотим получить (0 - время ручное, 1 - время машинное)
                                                    // бит 1: 1/0 - агрегировать/нет трудоемкость в разрезе (цех + ресурс)
                               RaschetDT: string    // дата расчета : если пустая строкаб то без учета дат
                             ): IResultSet;
  Function RunRaschetTrudOtizFunc(
                                   wTypeRaschTime: word; // битовый флаг
                                                         // бит 0: 1/0 - в качестве времени ручного использоватьнет норму ОТИЗ
                                                         // бит 1: 1/0 - агрегировать/нет трудоемкость в разрезе (цех + ресурс)
                                   wCode : word;          // код параметра для нормы времени
                                   RaschetDT: string    // дата расчета : если пустая строкаб то без учета дат
                                 ): IResultSet;
  Function GetPlanFond(/*nameTable: string;*/ cVarPlan: comp; startDT, endDT: string): IResultSet; // получение планового фонда за период для вар-та план-я
  Function DeleteTmpSqlTables: Boolean;    // удаление временных таблиц (sql + vip)

end;
vipinterface CF_Razuzl implements iCF_Razuzl #Licensed_free;



#endIf

