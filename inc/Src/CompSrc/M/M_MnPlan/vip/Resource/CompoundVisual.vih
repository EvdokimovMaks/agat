/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                   (c) 1994,2001 корпорация ГАЛАКТИКА                      ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Контур планирования производства                          ║
 ║ Версия        : 7.10                                                      ║
 ║ Назначение    : Описание объектного интерфейса состовной визуализации     ║
 ║ Ответственный : Скороход Дмитрий Владимирович                             ║
 ║ Параметры     : нет                                                       ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#ifdef ComponentVersion
#component "M_MnPlan"
#end

#ifndef __CompoundVisualizationObj
#define __CompoundVisualizationObj

ObjInterface CompoundVisualizationObj;
  // Набивка таблицы визуализаций, параметры совпадают с параметрами
  // функции StartNewVisual
  public procedure AddItem(aVisualType: byte; aFlag: byte; aName : string; aParam : longint);
  // Отчистка списка визуализации
  public procedure ClearList;
  // Функция корректирует уже существующие настройки
  public function CorrectItem(nNum: word; aVisualType: byte; aFlag: byte; aName : string; aParam : longint):boolean;
  // Данная фукнция завершает выполнение текущего этапа и переходит
  // к следующему. Результат функции - начало новой визуализации.
  public function CompleteItem:boolean;
  // Начало визуализации
  public procedure StartCompoudVisual;
  // Окончание визуализации (не зависит от текущего этапа)
  public procedure StopCompoudVisual;
  // Функция прокрутки элемента этерации (аналго NextVisual)
  public function NextCompoundVisual:boolean;
End;

VipInterface CompoundVisual implements CompoundVisualizationObj #Licensed_Free;

#endif

/*
  var compVis : CompoundVisual;

  compVis.ClearList;
  compVis.AddItem(vtRotateVisual, vfTimer, 'Visual line 1 with rotation', 1);
  compVis.AddItem(vtIndicatorVisual, vfTimer, 'Visual line 2 with indication', 500000);
  compVis.AddItem(vtRotateVisual, vfTimer, 'Visual line 3 again with rotation', 1);
  compVis.AddItem(vtNumericVisual, vfTimer + vfBreak, 'Visual line 4 and last with Numeric', 500000);
  compVis.StartCompoudVisual;
  var i, j : longint;
  for( i := 1; i <= 4; inc(i))
  {
    // Message('i ' +i);
    for( j := 0; j < 500000; inc(j))
      compVis.NextCompoundVisual;

    compVis.CompleteItem;
  }
  compVis.StopCompoudVisual;
*/
