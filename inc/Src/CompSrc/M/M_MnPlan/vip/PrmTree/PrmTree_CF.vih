// =============================================================================
//                                                     (c)  корпорация Галактика
// Галактика 7.11 - Производственный контур
// Описание интерфейса-объекта "Дерево параметров"
// =============================================================================

#include PrmTreeOwner_CF.vih //
#include oiEvnLog.vih        //

#component "M_MnPlan"

//******************************************************************************
// Таблицы в памяти

//------------------------------------------------------------------------------
// Виртуальный параметр
#ifndef __Def_pvtPrm__
#define __Def_pvtPrm__
Table STRUCT pvtPrm
(
  Nrec     : comp,  // Nrec
  Npp      : word,  // Номер по порядку
  PrmType  : word,  // Тип параметра:
                    //   0 - группа
                    //   1 - простое поле ввода
                    //   2 - поле-ссылка
                    //   3 - поле-список
                    //   4 - простое поле + поле-список
                    //   5 - поле ввода даты
                    //   6 - поле "мульти-ссылка"
  DType    : word,  // Тип значения:
                    //   0 - строка
                    //   1 - число
                    //   2 - дата
  Name     : tName, // Имя параметра
  Caption  : s250,  // Наименование (заголовок) параметра
  ValTmpl  : s250,  // Шаблон ввода значения
  DefValue : s250,  // Значение по умолчанию
  FlRefresh: word,  // Признак обновления дерева при изм.знач-я
  ExprByV  : s250,  // Выражение для LotExpression (True,False)
  TypeDT   : word,  // Вид обозначения класса объектов (для параметра-ссылки):
                    //   0 - не определен
                    //   1 - КАУ
                    //   2 - тип данных для экспорта-импорта
  cRole    : comp,  // Ссылка на роль (для параметра-ссылки)
  cParent  : comp,  // Ссылка на родительскую запись (vtPrm.Nrec)
  FlVisible: word   // Флаг видимости
)
With Index
(
  pvtPrm01 = Nrec(Unique, Surrogate),
  pvtPrm02 = cParent + FlVisible + Npp,
  pvtPrm03 = Name
);
#endif

//------------------------------------------------------------------------------
// Вариант знач-я пар-ра алгоритма расчета
#ifndef __Def_pvtPrmLV__
#define __Def_pvtPrmLV__
Table STRUCT pvtPrmLV
(
  PrmName : tName, // Имя параметра
  Npp     : word,  // Номер по порядку
  Value   : s250,  // Значение (для поля-ссылки - обозначение класса объектов)
  ExprByV : s250   // Выражение для LotExpression (True,False)
)
With Index
(
  pvtPrmLV01 = PrmName + Npp,
  pvtPrmLV02 = PrmName + Value
);
#endif

//------------------------------------------------------------------------------
// Значение виртуального параметра
#ifndef __Def_pvtPrmV__
#define __Def_pvtPrmV__
Table STRUCT pvtPrmV
(
  Nrec   : comp,  // Nrec
  PrmName: tName, // Имя параметра
  cRole  : comp,  // Ссылка на роль (для параметра-ссылки)
  Value  : s250,  // Значение
  DT_Rlt : tName  // Код обозначения класса объекта (для параметра-ссылки)
)
With Index
(
  pvtPrmV01 = Nrec(Unique, Surrogate),
  pvtPrmV02 = PrmName
);
#endif

//------------------------------------------------------------------------------
// Помеченное знач-е для списка знач-й пар-ра при редактировании
#ifndef __Def_pvtPrmVLR__
#define __Def_pvtPrmVLR__
Table STRUCT pvtPrmVLR
(
  PrmName: tName, // Имя параметра
  Value  : s250,  // Значение
  DT_Rlt : tName, // Код обозначения класса объекта (для параметра-ссылки)
  sList  : tName  // Код группы (аналог Marker, Pick.wList)
)
With Index
(
  pvtPrmVLR01 = PrmName + DT_Rlt + Value,
  pvtPrmVLR02 = PrmName + sList + Value
);
#endif

//------------------------------------------------------------------------------
// Подсветка виртуального параметра
#ifndef __Def_pvtPrmCL__
#define __Def_pvtPrmCL__
Table STRUCT pvtPrmCL
(
  PrmName: tName // Имя параметра
)
With Index
(
  pvtPrmCL01 = PrmName(Unique)
);
#endif

//------------------------------------------------------------------------------
// Описание параметра
#ifndef __Def_pvtPrmD__
#define __Def_pvtPrmD__
Table STRUCT pvtPrmD
(
  Nrec     : comp,  // Nrec
  PrmName  : tName, // Имя параметра
  Descript1: s250,  // Строка № 1 описания параметра
  Descript2: s250,  // Строка № 2 описания параметра
  Descript3: s250   // Строка № 3 описания параметра
)
With Index
(
  pvtPrmD01 = Nrec(Unique, Surrogate),
  pvtPrmD02 = PrmName
);
#endif

//******************************************************************************
// Типы данных

//------------------------------------------------------------------------------
// Структура для хранения записи таблицы Prm
#ifndef __Def_TRecPrm__
#define __Def_TRecPrm__
#doc
 Структура для хранения записи таблицы Prm</brief>
#end
Type TRecPrm = record as  table pvtPrm;
#end

//------------------------------------------------------------------------------
// Структура для хранения записи таблицы PrmLV
#ifndef __Def_TRecPrmLV__
#define __Def_TRecPrmLV__
#doc
 Структура для хранения записи таблицы PrmLV</brief>
#end
Type TRecPrmLV = record as  table pvtPrmLV;
#end

//------------------------------------------------------------------------------
// Структура для хранения записи таблицы PrmV
#ifndef __Def_TRecPrmV__
#define __Def_TRecPrmV__
#doc
 Структура для хранения записи таблицы PrmV</brief>
#end
Type TRecPrmV = record as  table pvtPrmV;
#end

//------------------------------------------------------------------------------
// Структура для хранения записи таблицы PrmVLR
#ifndef __Def_TRecPrmVLR__
#define __Def_TRecPrmVLR__
#doc
 Структура для хранения записи таблицы PrmVLR</brief>
#end
Type TRecPrmVLR = record as  table pvtPrmVLR;
#end

//******************************************************************************
// ObjInterface oPrmTree_CF
#ifndef __Def_oPrmTree_CF__
#define __Def_oPrmTree_CF__
#doc
 Описание интерфейса-объекта "Дерево параметров"</brief>
#end
ObjInterface oPrmTree_CF;

//------------------------------------------------------------------------------
#doc
 Установка интерфейса-родителя</brief> <br>
 Параметры: <br>
   aoPrmTreeOwner_CF - Объект типа oPrmTreeOwner_CF <br>
 Результат: <br>
   True - если успешно, иначе - False <br>
#end
Function SetOwner(var aoPrmTreeOwner_CF: oPrmTreeOwner_CF): boolean;

//------------------------------------------------------------------------------
#doc
 Очистка параметров в дереве</brief> <br>
#end
Procedure Clear;

//------------------------------------------------------------------------------
#doc
 Очистка значений параметров в дереве</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра, если пустая строка, то для всех параметров <br>
#end
Procedure ClearValues(asPrmName: string);

//------------------------------------------------------------------------------
#doc
 Признак модификации параметров в дереве</brief> <br>
 Результат: <br>
   True - если данные были модифицированы <br>
#end
Function IsModifiedData: boolean;

//------------------------------------------------------------------------------
#doc
 Установка/сброс признака модификации параметров в дереве</brief> <br>
 Параметры: <br>
   abModified - Признак модификации <br>
#end
Procedure SetModifiedData(abModified: boolean);

//------------------------------------------------------------------------------
#doc
 Чтение состояния узлов в дереве из DSK-файла</brief> <br>
#end
Procedure ReadStateFromDsk;

//------------------------------------------------------------------------------
#doc
 Запись состояния узлов в дереве в DSK-файл</brief> <br>
#end
Procedure SaveStateToDsk;

//------------------------------------------------------------------------------
#doc
 Обновление данных визуализации</brief> <br>
#end
Procedure RefreshViewData;

//------------------------------------------------------------------------------
#doc
 Установка в начало дерева</brief> <br>
#end
Procedure SetTopNote;

//------------------------------------------------------------------------------
#doc
 Просмотр дерева параметров</brief> <br>
 Результат: <br>
   tsOk - если все нормально, иначе - False <br>
#end
Function ViewParams: longint;

//------------------------------------------------------------------------------
#doc
 Поиск параметра в дереве по имени</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра <br>
 Результат: <br>
   tsOk - если все нормально, иначе - False <br>
#end
Function FindPrm(asPrmName: string): longint;

//------------------------------------------------------------------------------
#doc
 Получение значения параметра</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра <br>
 Результат: <br>
   Значение параметра, если не найден - пустая строка <br>
#end
Function GetPrmVal(asPrmName: string): string;

//------------------------------------------------------------------------------
#doc
 Установка значения параметра</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра <br>
   asValue   - Значение <br>
   asDT_Rlt  - Обозначение класса объекта (для параметра-ссылки) <br>
 Результат: <br>
   tsOk - если все нормально, иначе - код ишибки <br>
#end
Function SetPrmVal(asPrmName: string; asValue: string; asDT_Rlt: string): longint;

//------------------------------------------------------------------------------
#doc
 Добавление параметра</brief> <br>
 Параметры: <br>
   awNpp       - Номер по порядку <br>
   asName      - Имя параметра <br>
   asCaption   - Наименование/заголовок параметра <br>
   awPrmType   - Тип параметра: <br>
     0: группа <br>
     1: простое поле ввода <br>
     2: поле-ссылка <br>
     3: поле-список <br>
     4: простое поле + поле-список <br>
     5: поле ввода даты <br>
     6: поле "мульти-ссылка" <br>
   awDType     - Тип значения: <br>
     0: строка <br>
     1: число <br>
     2: дата <br>
   awFlRefresh - Признак обновления дерева при изменении значения в окне параметров (0 - не обновлять, 1 - обновлять) <br>
     0: не обновлять <br>
     1: обновлять только записи, связанные с текущим параметром <br>
     2: обновлять все записи <br>
   asValTmpl   - Шаблон ввода значения <br>
   asDefValue  - Значение по умолчанию <br>
   asExprByV   - Выражение для LotExpressionFunc <br>
   awTypeDT    - Вид обозначения класса (для параметра-ссылки): <br>
     0: не определен <br>
     1: КАУ <br>
     2: тип данных для экспорта-импорта <br>
   acRole      - Ссылка на роль (для параметра-ссылки) <br>
   acParent    - Ссылка на родительскую запись (Prm.Nrec) <br>
 Результат: <br>
   Ссылка на параметр, если успешно, иначе - 0 <br>
#end
Function AddPrm(awNpp: word; asName: string; asCaption: string;
  awPrmType: word; awDType: word; awFlRefresh: word; asValTmpl: string;
  asDefValue: string; asExprByV: string; awTypeDT: word; acRole: comp;
  acParent: comp): comp;

//------------------------------------------------------------------------------
#doc
 Добавление варианта значения для списка значений параметра</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра <br>
   awNpp     - Номер по порядку <br>
   asValue   - Значение <br>
   asExprByV - Выражение для LotExpressionFunc <br>
 Результат: <br>
   tsOk - если все нормально, иначе - код ишибки <br>
#end
Function AddPrmLV(asPrmName: string; awNpp: word; asValue: string;
  asExprByV: string): longint;

//------------------------------------------------------------------------------
#doc
 Добавление значения параметра</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра <br>
   asValue   - Значение <br>
   asDT_Rlt  - Обозначение класса объекта (для параметра-ссылки) <br>
 Результат: <br>
   tsOk - если все нормально, иначе - код ишибки <br>
#end
Function AddPrmV(asPrmName: string; asValue: string; asDT_Rlt: string): longint;

//------------------------------------------------------------------------------
#doc
 Добавление помеченного знач-я для списка знач-й пар-ра при редактировании</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра <br>
   asValue   - Значение <br>
   asDT_Rlt  - Обозначение класса объекта (для параметра-ссылки) <br>
   asList    - Код группы (аналог Marker, Pick.wList) <br>
 Результат: <br>
   tsOk - если все нормально, иначе - код ишибки <br>
#end
Function AddPrmVLR(asPrmName: string; asValue: string; asDT_Rlt: string;
  asList: string): longint;

//------------------------------------------------------------------------------
#doc
 Добавление описания параметра</brief> <br>
 Параметры: <br>
   asPrmName   - Имя параметра <br>
   asDescript1 - Строка № 1 описания параметра <br>
   asDescript2 - Строка № 2 описания параметра <br>
   asDescript3 - Строка № 3 описания параметра <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function AddPrmDescript(asPrmName: string; asDescript1: string; asDescript2: string;
  asDescript3: string): longint;

//------------------------------------------------------------------------------
#doc
 Текущая запись Prm</brief> <br>
 Результат: <br>
   Запись Prm <br>
#end
Function RecPrm: TRecPrm;

//------------------------------------------------------------------------------
#doc
 Текущая запись PrmLV</brief> <br>
 Результат: <br>
   Запись PrmLV <br>
#end
Function RecPrmLV: TRecPrmLV;

//------------------------------------------------------------------------------
#doc
 Текущая запись PrmV</brief> <br>
 Результат: <br>
   Запись PrmV <br>
#end
Function RecPrmV: TRecPrmV;

//------------------------------------------------------------------------------
#doc
 Текущая запись PrmVLR</brief> <br>
 Результат: <br>
   Запись PrmVLR <br>
#end
Function RecPrmVLR: TRecPrmVLR;

//------------------------------------------------------------------------------
#doc
 Получение первой записи для Prm</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function Prm_GetFirst: longint;

//------------------------------------------------------------------------------
#doc
 Получение последней записи для Prm</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function Prm_GetLast: longint;

//------------------------------------------------------------------------------
#doc
 Получение следующей записи относительно текущей позиции для Prm</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function Prm_GetNext: longint;

//------------------------------------------------------------------------------
#doc
 Получение предыдующей записи относительно текущей позиции для Prm</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function Prm_GetPrev: longint;

//------------------------------------------------------------------------------
#doc
 Получение первой записи для PrmLV</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmLV_GetFirst: longint;

//------------------------------------------------------------------------------
#doc
 Получение последней записи для PrmLV</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmLV_GetLast: longint;

//------------------------------------------------------------------------------
#doc
 Получение следующей записи относительно текущей позиции для PrmLV</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmLV_GetNext: longint;

//------------------------------------------------------------------------------
#doc
 Получение предыдующей записи относительно текущей позиции для PrmLV</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmLV_GetPrev: longint;

//------------------------------------------------------------------------------
#doc
 Получение первой записи для PrmV</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmV_GetFirst: longint;

//------------------------------------------------------------------------------
#doc
 Получение последней записи для PrmV</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmV_GetLast: longint;

//------------------------------------------------------------------------------
#doc
 Получение следующей записи относительно текущей позиции для PrmV</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmV_GetNext: longint;

//------------------------------------------------------------------------------
#doc
 Получение предыдующей записи относительно текущей позиции для PrmV</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmV_GetPrev: longint;

//------------------------------------------------------------------------------
#doc
 Получение первой записи для PrmVLR</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmVLR_GetFirst: longint;

//------------------------------------------------------------------------------
#doc
 Получение последней записи для PrmVLR</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmVLR_GetLast: longint;

//------------------------------------------------------------------------------
#doc
 Получение следующей записи относительно текущей позиции для PrmVLR</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmVLR_GetNext: longint;

//------------------------------------------------------------------------------
#doc
 Получение предыдующей записи относительно текущей позиции для PrmVLR</brief> <br>
 Результат: <br>
   tsOk, если усешно, иначе - код ошибки <br>
#end
Function PrmVLR_GetPrev: longint;

//------------------------------------------------------------------------------
#doc
 Установка/снятие использования подсветки параметра</brief> <br>
 Параметры: <br>
   abFlUse - True - установить использование подсветки, False - снять <br>
#end
Procedure SetUseColorLabel(abFlUse: boolean);

//------------------------------------------------------------------------------
#doc
 Установка/снятие подсветки параметра</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра <br>
   abFlSet   - True - установить подсветку, False - снять <br>
 Результат: <br>
   tsOk - если все нормально, иначе - код ишибки <br>
#end
Function SetColorLabel(asPrmName: string; abFlSet: boolean): longint;

//------------------------------------------------------------------------------
#doc
 Определение, установлена ли подсветка для параметра</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра <br>
 Результат: <br>
   True - подсветка установена, False - подсветка не установлена <br>
#end
Function GetColorLabel(asPrmName: string): boolean;

//------------------------------------------------------------------------------
#doc
 Определение, установлена ли флаг отображения панели описания параметров</brief> <br>
 Результат: <br>
   True, если флаг отображения панели описания параметров установен, иначе - False <br>
#end
Function IsVisiblePrmDescription: boolean;

//------------------------------------------------------------------------------
#doc
 Установка флага отображения панели описания параметров</brief> <br>
 Параметры: <br>
   abVisible - значение флага отображения панели описания параметров <br>
#end
Procedure SetVisiblePrmDescription(abVisible: boolean);

//------------------------------------------------------------------------------
#doc
 Получение текстового описания значения параметра, для которого установлен
 список значений, по коду значения</brief> <br>
 Параметры: <br>
   asPrmName - Имя параметра <br>
   awNpp     - Код значения <br>
 Результат: <br>
   Текстовое описание значения параметра, если параметр - список, и код значения найден,
   иначе - пустая строка <br>
#end
Function GetPrmLVCaption(asPrmName: string; awNpp: word): string;

//------------------------------------------------------------------------------
#doc
 Выгрузка видимых параметров и их значений в объект регистрации событий oiEvnLog</brief> <br>
 Параметры: <br>
   aoEvnLog       - Объект для регистрации событий <br>
   awOwner        - Тип обрабатывающего объекта (алгоритм, функция, ...) - константа из MnPlan.inc
   acOwner        - Ссылка на обрабатывающий объект
   awObject       - Тип обрабатываемого объекта (алгоритм, функция, документ, позиция, ...) - константа из MnPlan.inc
   acObject       - Ссылка на обрабатываемый объект
   awEventCode    - Код сообщения для параметров (etInformation, ...) - константа из EvnLog.inc
   asEventText    - Текст сообщения для параметров
   abProcessView  - Признак отображения процесса выгрузки <br>
   asTitleProcess - Название процесса (если пустая строка, то по умолчанию, если 'NULL' - то не изменять) <br>
 Результат: <br>
   True, если успешно, иначе - False <br>
#end
Function UnloadDataInEvnLog(var aoEvnLog: oiEvnLog;
  awOwner: word; acOwner: comp; awObject: word; acObject: comp;
  awEventCode: word; asEventText: string; abProcessView: boolean; asTitleProcess: string): boolean;

//------------------------------------------------------------------------------
//#doc
// Выгрузка строковых значений параметров в объект регистрации событий oiEvnLog</brief> <br>
// Строковые значения параметров настройки выгружаются в виде одного сообщения с записями
// следующего вида: <br>
//   '<имя параметра> --> <строковое значение параметра>' <br>
// Параметры: <br>
//   aoEvnLog       - Объект для регистрации событий <br>
//   awOwner        - Тип обрабатывающего объекта (алгоритм, функция, ...) - константа из MnPlan.inc
//   acOwner        - Ссылка на обрабатывающий объект
//   awObject       - Тип обрабатываемого объекта (алгоритм, функция, документ, позиция, ...) - константа из MnPlan.inc
//   acObject       - Ссылка на обрабатываемый объект
//   awEventCode    - Код сообщения для параметров (etInformation, ...) - константа из EvnLog.inc
//   asEventText    - Текст сообщения для параметров
//   abProcessView  - Признак отображения процесса выгрузки <br>
//   asTitleProcess - Название процесса (если пустая строка, то по умолчанию, если 'NULL' - то не изменять) <br>
// Результат: <br>
//   True, если успешно, иначе - False <br>
//#end
//Function UnloadViewValuesInEvnLog(var aoEvnLog: oiEvnLog;
//  awOwner: word; acOwner: comp; awObject: word; acObject: comp;
//  awEventCode: word; asEventText: string; abProcessView: boolean; asTitleProcess: string): boolean;

End; // ObjInterface oPrmTree_CF
#endif

//******************************************************************************
// ObjInterface oPrmTree_CF_UnloadViewValuesInEvnLog
#ifndef __Def_oPrmTree_CF_UnloadViewValuesInEvnLog__
#define __Def_oPrmTree_CF_UnloadViewValuesInEvnLog__
#doc
 Описание интерфейса-объекта "Дерево параметров: метод UnloadViewValuesInEvnLog"</brief>
#end
ObjInterface oPrmTree_CF_UnloadViewValuesInEvnLog;

//------------------------------------------------------------------------------
#doc
 Выгрузка строковых значений параметров в объект регистрации событий oiEvnLog</brief> <br>
 Строковые значения параметров настройки выгружаются в виде одного сообщения с записями
 следующего вида: <br>
   '<имя параметра> --> <строковое значение параметра>' <br>
 Параметры: <br>
   aoEvnLog       - Объект для регистрации событий <br>
   awOwner        - Тип обрабатывающего объекта (алгоритм, функция, ...) - константа из MnPlan.inc
   acOwner        - Ссылка на обрабатывающий объект
   awObject       - Тип обрабатываемого объекта (алгоритм, функция, документ, позиция, ...) - константа из MnPlan.inc
   acObject       - Ссылка на обрабатываемый объект
   awEventCode    - Код сообщения для параметров (etInformation, ...) - константа из EvnLog.inc
   asEventText    - Текст сообщения для параметров
   abProcessView  - Признак отображения процесса выгрузки <br>
   asTitleProcess - Название процесса (если пустая строка, то по умолчанию, если 'NULL' - то не изменять) <br>
 Результат: <br>
   True, если успешно, иначе - False <br>
#end
Function UnloadViewValuesInEvnLog(var aoEvnLog: oiEvnLog;
  awOwner: word; acOwner: comp; awObject: word; acObject: comp;
  awEventCode: word; asEventText: string; abProcessView: boolean; asTitleProcess: string): boolean;

End; // ObjInterface oPrmTree_CF_UnloadViewValuesInEvnLog

VipInterface iPrmTree_CF implements oPrmTree_CF, oPrmTree_CF_UnloadViewValuesInEvnLog Licensed(Free);
#endif
