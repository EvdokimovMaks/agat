/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,97 корпорация ГАЛАКТИКА                      ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Производственное планирование                             ║
 ║ Версия        : 7.1                                                       ║
 ║ Назначение    :                                                           ║
 ║ Ответственный : Сенькевич Игорь                                           ║
 ║ Параметры     :                                                           ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

//#ifndef GAL8_1

#ifndef __MRPVTBL_VPP
#define __MRPVTBL_VPP


#ifdef VREMTBLMRP

table struct ClMrp
(
  Nrec           : tNrec,
  num            : word,     //  1- 0- изделие
                             //  2  1- второй
                             //  3  3- третий
                             //  4 - аналитика

  wKodGr1        : Word,     // "Код группы аналитики1",
  cAnVal1        : tNrec,    // "Ссылка",
  wKodGr2        : Word,     // "Код группы аналитики2",
  cAnVal2        : tNrec,     // "Ссылка2",
  wKodGr3        : Word,     // "Код группы аналитики1",
  cAnVal3        : tNrec,    // "Ссылка",
  wKodGr4        : Word,     // "Код группы аналитики2",
  cAnVal4        : tNrec,     // "Ссылка2",
  wKodGr5        : Word,     // "Код группы аналитики1",
  cAnVal5        : tNrec,    // "Ссылка",

  wTypeMain      : word,     // тип ссылки на верхний уровень
  cNrecMain      : comp,     // ссылка на верхний уровень

  wTypeIzd       : word,     // код группы КАU
  cNrecIzd       : comp,     // ссылка на изделие

  wTypeS         : word,     // код группы КАU
  cNrecS         : comp,     // ссылка на изделие/сырье

  CloneMain      : comp,
  CloneIzd       : comp,
  CloneS         : comp,

  wTypeNorm      : word,
  cNorm          : comp,

  Zikl           : double,   // Длительность производственого цикла
  Level          : word,     // уровень планирования
  Product        : Word      //"Продукт выхода (1) или норма (0)",
)

with Index
(
 tmClMrp00  =  Nrec(Unique, Surrogate),
 tmClMrp01  =  num + CloneMain +  cloneIzd + cloneS + wKodGr1 + cAnVal1 + wKodGr2 + cAnVal2 + wKodGr3 + cAnVal3 + wKodGr4 + cAnVal4,
 tmClMrp02  =  num + wTypeS + cNrecS + ZIKL + Product
);


table struct tmOut
(
  Nrec         : tNrec,
  ctmInp       : Comp,
  cTNormIzd    : Comp,
  ctmOutKol    : Comp,
  ctmOutKolOP  : Comp,
  ctmOutIzd    : Comp,
  ctmOut       : Comp,
  DataP        : Date,                            // "Дата потребности"
  DataPT       : _DateTime,                       // "Дата потребности"
  DataZT       : _DateTime,                       // "Дата и время заказа"
  DataZ        : Date,                            // "Дата заказа"
  cFpPeriod    : tNrec,                           // Период
  cFpPeriodZ   : tNrec,                           // Период запуска
  cNrecSh      : Comp,                            // ссылка на шаблон плана если по плану
  cNrecMain    : Comp,                            // ссылка на верхний уровень
  wTypeMain    : Word,                            // тип ссылки на верхний уровень
  CloneMain    : Comp,                            // аналог
  cNrecIzd     : Comp,                            // ссылка на изделие
  wTypeIzd     : Word,                            // код группы КАU
  CloneIzd     : Comp,                            // аналог
  SisOpl       : Word       "Код системы оплаты",
  Razr         : Word       "Разряд",
  CodTar       : Word       "Код тарифа",
  cNrecS       : Comp,                            // ссылка на изделие/сырье
  wTypeS       : Word,                            // код группы КАU
  CloneS       : Comp,                            // аналог
  CloneAnal    : Comp,                            // групировка по аналитикам
  Zikl         : Double,                          // Длительность производственого цикла
  Level        : Word,                            // уровень планирования
  Product      : Word,                            // "Продукт выхода (1) или норма (0)",
  kind         : Word,
  prmat        : Word,
  prOut        : Word,                            // отходы
  LevelIzd     : Word,                            // уровень первоначальный
  cOtpEdIzd    : Comp,
  KOlIzd       : Double,
  SummaZ       : Double,
  cOtpEd       : Comp,
  KOl          : Double,                          // количество по документу
  KolPotr      : Double,                          // количество для расчета потребностей
  KolObPotr    : Double,                          // Общая потребность
  KolPostGr    : Double,                          // Поступления по графику
  KolZap       : Double,                          // Наличные запасы
  KolChPotr    : Double,                          // Чистая потребность
  KolPlan      : Double,                          // План  при flagRasp = 3 равно плану
  KolZak       : Double,                          // Заказ - релиз
  flagRasp     : Word,                            // флаг распределения 1 - количество распределено по наличию 2 - количество распределено по плану(к исполеннию) 3 -
  wFlcNrecSh   : Word,                            // 1 - уже производилась привязка
  wFlcNrecPos  : Word,                            // 1 - позиция уже удалялась
  EdZikl       : Word,                            // Единица измерения цикла
  wTypeNorm    : Word,                            // тип нормы
  cNorm        : Comp,                            // ссылка на норму
  tDep         : Word,                            // ссылка на получателя
  cDep         : Comp,                            // код группы КАU получателя
  cDepIzd      : Comp,                            // ссылка на изготовителя
  wDepIzd      : Word,                            // код группы КАU изготовителя /............
  DataN        : Date,                            // возможно убрать
  KolTypeEd    : Double,
  TypeEd       : Word,
  TypeNorm1    : Word,                            // тип нормы см. константы tnRez mnPlan.inc
  Edino        : Comp,                            // ... показывает идентичноть изделий
  cNrecPos     : Comp,                            // ссылка на позицию плана или SpObjAcc (используется для потребностей)
  wTypePos     : Word,                            // константа to...
  cSpObjPar    : Comp,                            // ссылка на параметры /.............
  Price        : Double,                          // цена
  cVal         : Comp,                            // ссылка на валюту
  wKodStZ      : Word,
  stZatr       : Comp,                            // статья затрат
  wKodElem     : Word,
  elemZatr     : Comp,                            // элемент затрат
  wKodGr1      : Word,                            // "Код группы аналитики1",
  cAnVal1      : tNrec,                           // "Ссылка",
  wKodGr2      : Word,                            // "Код группы аналитики2",
  cAnVal2      : tNrec,                           // "Ссылка2",
  wKodGr3      : Word,                            // "Код группы аналитики2",
  cAnVal3      : tNrec,                           // "Ссылка2",
  wKodGr4      : Word,                            // "Код группы аналитики2",
  cAnVal4      : tNrec,                           // "Ссылка2",
  wKodGr5      : Word,                            // "Код группы аналитики2",
  cAnVal5      : tNrec,                           // "Ссылка2",
  wKodGr6      : Word,                            // "Код группы аналитики",
  cAnVal6      : tNrec,                           // "Ссылка",
  wKodGr7      : Word,                            // "Код группы аналитики",
  cAnVal7      : tNrec,                           // "Ссылка",
  fError       : Longint,
  wKodOper     : Word,
  cOper        : tNrec,
  wTypeNorm1   : Word,
  cNorm1       : tNrec,
  KolNorm      : Double,
  RoleAn       : Word_x10
)

with Index
(
 tmOut00     =  Nrec(Unique, Surrogate),
 tmOut01     =  ctmInp  + cNrecPos,
 tmOut02     =  cNrecSh + cNrecPos,
 tmOut03     =  Level,
 tmOut04     =  CloneMain + CloneS + Level,
 tmOut05     =  ctmOutKol,
 tmOut06     =  ctmOutIzd + flagRasp + dataP,
 tmOut07     =  CloneAnal,
 tmOut08     =  CloneMain + CloneIzd,
 tmOut09     =  ctmOut,
 tmOut10     =  flagRasp + dataP,
 tmOut11     =  ctmOutKolOP + wKodGr1+cAnVal1 + wKodGr2+cAnVal2 +
                       wKodGr3+cAnVal3 + wKodGr4+cAnVal4 + wKodGr5+cAnVal5 + wKodGr6+cAnVal6,
 tmOut12     =  ctmInp + TypeNorm1+TypeEd + wTypeNorm,
 tmOut13     =  Edino  + TypeEd,
 tmOut14     =  ctmInp + ctmOut,
 tmOut15     =  fError

);

table struct tmOutKol
(
  Nrec           : tNrec,

  ctmOutIzd      : comp,
  ctmOutKol      : comp,

  cNrecMain      : comp,     // ссылка на верхний уровень
  wTypeMain      : word,     // тип ссылки на верхний уровень
  CloneMain      : comp,     // аналог

  cNrecIzd       : comp,     // ссылка на изделие
  wTypeIzd       : word,     // код группы КАU
  CloneIzd       : comp,     // аналог

  cNrecS         : comp,     // ссылка на изделие/сырье
  wTypeS         : word,     // код группы КАU
  CloneS         : comp,     // аналог

  Level          : word,     // уровень изделия
  Zikl           : double,   // Длительность производственого цикла/

  Product        : Word,     //"Продукт выхода (1) или норма (0)",
  kind           : word,     //
  prmat          : word,     //
  prOut          : word,     // отходы

  SisOpl         : Word     "Код системы оплаты",
  Razr           : Word     "Разряд",
  CodTar         : Word     "Код тарифа",
  SummaZ         : double,

  cOtpEdizd      : comp,        // единица измерения изделия
  KolIzd         : double,      // количество изделий в часах
  DataP          : date,        // "Дата потребности"
  DataPT         : _datetime,   // "Дата потребности"
  DataZT         : _datetime,   // "Дата и время заказа"
  DataZ          : date,        // "Дата заказа"

  cFpPeriod      : TNrec,
  cFpPeriodZ     : TNrec,

  cOtpEd         : comp,     // единица измерения сырья
  KolObPotr      : double,   // Общая потребность
  KolPostGr      : double,   // Поступления по графику
  KolZap         : double,   // Наличные запасы
  KolChPotr      : double,   // Чистая потребность
  KolPlan        : double,   // План
  KolZak         : double,   // Заказ - релиз
  Flag           : word,

  wKodGr1        : Word,     // "Код группы аналитики1",
  cAnVal1        : tNrec,    // "Ссылка",

  wKodGr2        : Word,     // "Код группы аналитики2",
  cAnVal2        : tNrec,    // "Ссылка2",

  wKodGr3        : Word,     // "Код группы аналитики2",
  cAnVal3        : tNrec,     // "Ссылка2",
  fError         : LongInt

)

with Index
(
 tmOutKol00    =  Nrec(Unique, Surrogate),
 tmOutKol01    =  cFpPeriod + CloneS,
 tmOutKol02    =  CloneS    + DataP + Level,
 tmOutKol03    =  ctmOutIzd + DataP,
 tmOutKol04    =  ctmOutKol,
 tmOutKol05    =  fError
);

table struct tmOutIzd
(
  Nrec           : tNrec,
  CloneS         : comp,
  Level          : word,     // уровень изделия
  LevelMin       : word,     // уровень изделия
  flag           : word,     // уровень планирования
  cOtpEd         : comp      // единица измерения выходная
)

with Index
(
 tmOutIzd00  =  Nrec(Unique, Surrogate),
 tmOutIzd01  =  Level + CloneS,
 tmOutIzd02  =  CloneS
);


table struct tmInp
(
  Nrec        : comp,

  cNrecDoc    : comp,       // документ источник
  wTypeDoc    : word,       // тип документа - код аналитики
  nObjAcctT   : word,       // ссылка на ObjAcct

  cNrec       : comp,       // ссылка на шаблон плана  если по плану
  wType       : word,       // 1- шаблон  2 - SpObjAcc

  wFlcNrec    : word,       // 1 - уже производилась привязка

  cNrecPos    : comp,       // ссылка на позицию документа
  wTypePos    : word,       // toSpPl - позиция плана,  toSpZClient - заявка
                            // toSpObjAcc - если по входящим
  wFlcNrecPos : word,       // 1- позиция уже удалялась

  Product     : Word,       //"Продукт выхода (1) или норма (0)",

  cNrecIzd    : comp,       // ссылка на изделие
  wTypeIzd    : word,       // код группы КАU

  cDepIzd     : comp,       // ссылка на изготовителя
  wDepIzd     : word,       // код группы КАU изготовителя

  NumFKol     : word,       // номер поля количества
  Kol         : double,
  cOtpEd      : comp,

  DataN       : date,       //"Дата выпуска"

  Price       : double,     // цена
  cVal        : comp,       // ссылка на валюту
  Summa       : double,     // сумма
  NumFPrice   : word,     // номер поля цена

  cRole1      : comp,
  wKodGr1     : Word,       //"Код группы аналитики1",
  cAnVal1     : tNrec,      //"Ссылка",

  cRole2      : comp,
  wKodGr2     : Word,       //"Код группы аналитики2",
  cAnVal2     : tNrec,      //"Ссылка2",

  cRole3      : comp,
  wKodGr3     : Word,       // "Код группы аналитики2",
  cAnVal3     : tNrec,      // "Ссылка2",

  cRole4      : comp,
  wKodGr4     : Word,       // "Код группы аналитики2",
  cAnVal4     : tNrec,      // "Ссылка2",

  cRole5      : comp,
  wKodGr5     : Word,       // "Код группы аналитики2",
  cAnVal5     : tNrec,      // "Ссылка2",

  cRole6      : comp,
  wKodGr6     : Word,       // "Код группы аналитики",
  cAnVal6     : tNrec,      // "Ссылка",

  cRole7      : comp,
  wKodGr7     : Word,       // "Код группы аналитики",
  cAnVal7     : tNrec,      // "Ссылка"

  cNrecSh     : comp,       // ссылка на шаблон плана  если по плану

  Num         : longint,
  fError      : LongInt

)

with Index
(
 tmInp00  =  Nrec(Unique, Surrogate),
 tmInp01  =  cNrec,
 tmInp02  =  Num,
 tmInp03  =  cNrecSh,
 tmInp04  =  fError

);

table struct TNormIzdOld
  (
    Nrec        : tNrec,
    ctmInp      : comp, // ссылка на изделие
    wTypeNorm   : word,
    cNorm       : comp,
    DataN       : date,
    Kol         : double,
    KolTypeEd   : double,
    TypeEd      : word,
    TypeNorm1   : word,   // тип нормы см. константы tnRez mnPlan.inc
    cOtpEd      : comp,
    Edino       : comp,   //... показывает идентичноть изделий
    cNrecPos    : comp,   // ссылка на позицию плана или SpObjAcc (используется для потребностей)
    wTypePos    : word,   // константа to...
    cDepIzd     : comp,   // ссылка на изготовителя
    wDepIzd     : word,   // код группы КАU изготовителя
    cSpObjPar   : comp    // ссылка на параметры
  )

with Index
(
 TNormIzd01  =  Nrec(Unique, Surrogate),
 TNormIzd02  =  ctmInp + TypeNorm1+TypeEd + wTypeNorm,
 TNormIzd03  =  Edino  + TypeEd
);


table struct tmOutRez
(
  Nrec        : comp,
  ctmInp      : comp,    // ссылка на источник
  cNrecSh     : comp,    // ссылка на шаблон
  cNrecPos    : comp,    // ссылка на позицию документа
  cOtpEd      : comp,    // ссылка на позицию документа
  Kol         : double   // ссылка на позицию документа
)

with Index
(
 tmOutRez01  =  Nrec(Unique, Surrogate),
 tmOutRez02  =  ctmInp,
 tmOutRez03  =  cNrecSh + cNrecPos
);



//........... операции
Table Struct listOper
(
 Nrec         : tNrec,

 ip           : word,        //  флаг операций  1 - ожидаемая 2 -выполняемая 3 - включенная
 ipQue        : longint,     //  операции включенные - очередь от 0 и выше
 cLinkOper    : comp,

 prior        : comp,       //  приоритет
 prior1       : comp,       //  приоритет
 prior2       : comp,       //  приоритет

 cParent      : comp,
 cIzd         : comp,        //  работа

 cTmOut       : comp,        //  ссылка на источник операции

 CloneMain    : comp,
 CloneIzd     : comp,
 cTmInp       : comp,        //  ссылка на позицию документа если найдена
                             //  фактическая операция

 cOborPl      : comp,        //  машина

 cOper        : comp,        //  операция

 cOtpEd       : comp,        //
 kol          : double,      //  количество изделий
 Ostkol       : double,      //  остаток

 sjk          : _datetime,   //  возможный момент начала операции
 Ck           : _datetime,   //  момент завершения операции
 cZikl         : comp,        //  длительность операции
 cZikl_Pz      : comp         //  длительность операции pz

)
With Index
 (
 listOper00 =  Nrec(Unique,Surrogate),
 listOper02 =  cOborPl + ip + ipQue + Ck,
 listOper03 =  ip + cOborPl + prior + prior1+ prior2,
 listOper04 =  cIzd + cLinkOper ,
 listOper07 =  cParent + cLinkOper + ipQue,
 listOper08 =  cLinkOper + prior2
 );


//........... операции
Table Struct LinkOper
(
 Nrec         : tNrec,
 cNext        : comp,
 cPrev        : comp,
 cIzdC        : comp,
 cParC        : comp,
 cOper        : comp,
 Num          : longint,
 Zikl         : double,
 Zikl_Pz      : double
)
With Index
 (
 LinkOper00 =  Nrec(Unique, Surrogate),
 LinkOper01 =  cPrev + cIzdC + Num,
 LinkOper02 =  cNext,
 LinkOper03 =  cOper

 //LinkOper03 =  cPrev + Num
 );


Table Struct ParLinkOp
(
 cLinkOper    : comp,
 NumPar       : word,
 dValue       : Double,
 cValue       : comp,
 lValue       : Longint
)
With Index
 (
 ParLinkOp =  cLinkOper + NumPar
 );

#EndIf


//........... операции
Table Struct VrOper
(
 //Nrec         : tNrec,
 cIzd         : comp,
 cLink        : comp,
 Num          : longint
)
With Index
 (
 VrOper01 =  cIzd + Num
 );



//........... оборудование
Table Struct OborPl
(
 Nrec         : tNrec,
 NumLim       : LongInt,
 NumGraf      : LongInt,
 TypeOborPl   : word,   //  тип ограничения
                        // 0   - не проинициализирован
                        // 1 - 9 автоматически создаваемые типы
                        // 10 и выше пользовательские
                        // 1  - общее ограничение
                        // 10 - ограничение по загрузке оборудования
                        // 11 - ограничение по наличию сырья и комплектующих

 wTypeDoc     : Word,      //  тип документа - код аналитики
 cNrecDoc     : Comp,      //  документ источник

 wTypeS       : word,      //  код группы КАU
 cNrecS       : comp,      //  ссылка на оборудование
 CloneS       : comp,

 cTmOut       : comp,      //  ссылка на позицию потребности ( не обязательное поле )
 cGroup       : comp,      //  группа
 prior        : comp,      //  приоритет
 cFormPl      : comp,      //  ссылка на объект

 istate       : integer,

 WayInfl      : word      // способ влияния - флаг
                          // 1 - время выполнения
                          // 2 - возможность выполнения

)
With Index
 (
 OborPl01    =  Nrec(Unique, Surrogate),
 OborPl02    =  cGroup + prior,
 OborPl03    =  wTypeS + cNrecS,
 OborPl04    =  TypeOborPl,
 OborPl05    =  CloneS
 );


Table Struct IterKol
(
 numIt         : comp,
 cObj          : comp,
 dKoef         : double,
 Prior         : comp
)
With Index
 (
 IterKol00 =  numIt + cObj,
 IterKol01 =  cObj + Prior
 );


Table Struct RezIter
(
 cObj          : comp,
 numIt         : comp,
 cNum          : comp
)

With Index
 (
 RezIter00 =  numIt + cNum
 );

Table Struct PriorRas
(
 cObj          : comp,
 Prior         : comp,
 Prior1        : comp,
 cNum          : comp,
 Prt           : word
)

With Index
 (
 PriorRas00 =  cObj,
 PriorRas01 =  Prior + Prior1,
 PriorRas02 =  cNum
 );

Table Struct tmpAvlInfo
(
 cPriority     : comp,
 dttTime       : _DateTime,
 cCloneS       : comp,
 cCloneZ       : comp,
 cAnal         : comp,
 CountAll      : double,
 CountReserve  : double,
 CountRest     : double,
 State         : word
)

With Index
 (
 tmpAvlInfo01 =  dttTime,
 tmpAvlInfo02 =  cPriority + cCloneS + State + dttTime,
 tmpAvlInfo03 =  cPriority + cCloneZ + State + dttTime,
 tmpAvlInfo04 =  cCloneS + State + dttTime,
 tmpAvlInfo05 =  cCloneZ + State + dttTime
 );

Table Struct LimOst
  (
  Nrec : comp,
  cOborPl : comp,
  CloneS : comp,
  Ost : double
  )

With Index
 (
 LimOst01    =  Nrec(Unique, Surrogate),
 LimOst02    =  cOborPl + CloneS,
 LimOst03    =  CloneS
 );

Table Struct SpLimOst
  (
  Nrec : comp,
  cLimOst : comp,
  data : date,
  Ost : double,
  Rezerv : double,
  CloneAnal : comp,
  wFkPl : word
  )

With Index
 (
 SpLimOst01    =  Nrec(Unique, Surrogate),
 SpLimOst02    =  cLimOst + wFkPl + data + CloneAnal
 );



Table Struct SpSpLimOst
   (
   cSpLimOst   : comp,
   dataT       : _datetime,
   Kol         : double,
   CurOst      : double,
   Flag        : word,
   CloneSPr    : comp,
   toTypeIst   : word,
   cIst        : comp,
   toTypePr    : word,
   cPr         : comp,
   toTypePr1   : word,
   cPr1        : comp,
   fOpt        : word,
   cDlitSh     : comp,
   cDlitPz     : comp,
   NumFldIst   : word,
   NumFldPr    : word
   )

With Index
 (
 SpSpLimOst02    =  cSpLimOst + flag + toTypeIst + cIst + toTypePr  + cPr,
 SpSpLimOst03    =  toTypeIst + cIst + cSpLimOst,
 SpSpLimOst04    =  toTypePr  + cPr  + Flag + cSpLimOst,
 SpSpLimOst05    =  flag + toTypeIst + cIst
 );


Table Struct LimZam
  (
   cLimOst : comp,
   cLimOstZ : comp,
   CloneIzd : comp,
   Koef : double,
   Prior : word
   )

With Index
 (
 LimZam02    =  cLimOst + Prior
 );


Table Struct GroupObPl
  (
  cMain : comp,
  cPrev : comp,
  cNext : comp,
  Prior : comp,
  flLevel : word
  )

With Index
  (
  GroupObPl01 = cMain + cPrev + Prior,
  GroupObPl02 = cNext
  );

Table Struct KolGroup
  (
  cMain   : comp,
  Kol     : double,
  dtStart : _datetime,
  dtEnd   : _datetime
  )

With Index
  (
  KolGroup01  =  cMain + dtStart
  );

Table STRUCT NormInp
(
  ctmInp     : comp,
  ctmInp1    : comp,
  cLinkOper  : comp,
  kol        : double,
  KolPog     : double,
  num        : Longint,
  flag       : word,
  dtStart    : _datetime,
  dtEnd      : _datetime,
  kolPlan2   : double,
  kolPost    : double,
  kolZap     : double,
  KolZak     : Double,
  KolPot1    : Double,
  KolPot2    : Double
)
With Index
 (
 NormInp01 = cLinkOper + ctmInp1,
 NormInp02 = ctmInp1 + ctmInp + cLinkOper
 );

Table Struct CloneLsOp
  (
  cListOper   : comp,
  cOborPl     : comp,
  dtStart     : _datetime,
  dtEnd       : _datetime,
  Zikl        : comp,
  flag        : word,
  cRsvOper    : comp
  )
With Index
 (
 CloneLsOp01 = cOborPl + cListOper,
 CloneLsOp02 = cListOper + flag
 );


Table Struct PotLsOp
  (
  cListOper   : comp,
  KolPot1     : Double,
  KolPot2     : Double,
  ProcentKol  : Double,
  cRsvOper    : comp
  )
With Index
 (
 PotLsOp = cListOper
 );


table struct tmOutNullcNorm
(
  Nrec        : tNrec,
  wTypeS      : word,     // код группы КАU
  cNrecS      : comp,     // ссылка на изделие/сырье
  tDoc        : comp,
  cDoc        : comp,
  tOwner      : word,
  cOwner      : comp,
  KolCompare  : comp,
  Priznak     : word
)

with Index
(
 tmOutNullcNorm01  =  Nrec(Unique, Surrogate),
 tmOutNullcNorm02  =  Priznak,
 tmOutNullcNorm03  =  wTypeS + cNRecS,
 tmOutNullcNorm04  =  cDoc + tDoc + wTypeS + cNRecS
);

table struct tmListTmOut
(
  Nrec             : tNrec,
  cTmOutNullcNorm  : comp,
  cTmpPotr         : comp,
  cTmOut           : comp,
  cDoc             : comp,
  TmOutKol         : double,
  KolCompare       : word,
  Priznak          : word
)

with Index
(
 tmListTmOut01  =  Nrec(Unique, Surrogate),
 tmListTmOut02  =  Priznak + cDoc,
 tmListTmOut03  =  cTmOut,
 tmListTmOut04  =  cTmOutNullcNorm
);




#EndIf



//#endif // GAL8_1
