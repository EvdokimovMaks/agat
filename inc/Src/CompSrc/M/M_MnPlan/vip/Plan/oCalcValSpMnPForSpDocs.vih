#ifndef __oCalcValSpMnPForSpDocs__
#define __oCalcValSpMnPForSpDocs__

#ifdef ComponentVersion
#component "M_MnPlan"
#end

ObjInterface oCalcValSpMnPForSpDocs;

  // Агрегировать количества по всем полям ValSpMnP
  Function CalcValSpMnPForSpDocs (
    RunMode        : word; // Битовая маска
                           //  1 - очистить результат от предыдущего вызова функции
                           //  2 - анализировать статусы
                           //  4 - учитывать родителя и подчиненные статусы KatNotesNRec := KatNotes.Status
                           //  если 4 не включен, то KatNotesNRec := KatNotes.NRec
    KatNotesNRec   : comp;
    SpObjAccNRec   : comp; //  ссылка на SpObjAcc.NRec
    cOtpEdConvert  : comp; //  если 0, то переводим в единицу заданную в SpDocscOtpEd
    KatMCNRec      : comp  //  если не 0, то фильтр по KatMCNRec == SpMnPl.cIzd
                                 ) : Boolean;

  // Агрегировать количества по всем полям ValSpMnP
  Function CalcValSpMnPForSpDocs_ForEx_3 (
    RunMode        : word; // Битовая маска
                           //  1 - очистить результат от предыдущего вызова функции
                           //  2 - анализировать статусы
                           //  4 - учитывать родителя и подчиненные статусы KatNotesNRec := KatNotes.Status
                           //  если 4 не включен, то KatNotesNRec := KatNotes.NRec
                           //  8 - пишем результат в stValSpMnP_2
    toSpDocument   : word; // Тип документа
    SpDocsNRec     : comp; // Позиция документа
    NumAnalitik    : word; // Номер аналитики
    KauAnalitik    : word; // КАУ аналитики
    cAnalitik      : comp; // Аналитика
    KatNotesNRec   : comp; // Статус
    cOtpEdConvert  : comp; // если 0, то переводим в единицу заданную в SpDocscOtpEd
    KatMCNRec      : comp  // если не 0, то фильтр по KatMCNRec == SpMnPl.cIzd
                                 ) : Boolean;

  // Агрегировать количества по всем полям ValSpMnP
  Function CalcValSpMnPForSpDocsEx_1(
       SpObjAccNRec   : comp; // ссылка на SpObjAcc.NRec
       cOtpEdConvert  : comp; // если 0, то переводим в единицу заданную в SpDocscOtpEd
       KatNotesStatus : word  // учитывать родителя и подчиненные статусы
                                     ) : Boolean;

  // Агрегировать количества по всем полям ValSpMnP
  Function CalcValSpMnPForSpDocsEx_2(
       SpObjAccNRec   : comp; // ссылка на SpObjAcc.NRec
       cOtpEdConvert  : comp; // если 0, то переводим в единицу заданную в SpDocscOtpEd
       KatMCNRec      : comp; // если не 0, то фильтр по KatMCNRec == SpMnPl.cIzd
       KatNotesStatus : word  // учитывать родителя и подчиненные статусы
                                     ) : Boolean;

  // Агрегировать количества по всем полям ValSpMnP
  Function CalcValSpMnPForSpDocsEx_3(
        toSpDocument   : word; // Тип документа
        SpDocsNRec     : comp; // Позиция документа
        NumAnalitik    : word; // Номер аналитики
        KauAnalitik    : word; // КАУ аналитики
        cAnalitik      : comp; // Аналитика
        cOtpEdConvert  : comp; // если 0, то переводим в единицу заданную в SpDocscOtpEd
        KatMCNRec      : comp; // если не 0, то фильтр по KatMCNRec == SpMnPl.cIzd
        KatNotesStatus : word  // учитывать родителя и подчиненные статусы
                                     ) : Boolean;

  // Получить количество по константе поля
  Function GetCalcValueForFld ( ConstFld : LongInt ) : Double;
  // Получить количество по номеру поля 1..14
  Function GetCalcValueForFldEx_1 ( ConstFld : word ) : Double;
  // Получить количество по номеру поля 1..14
  Function GetCalcValueForFldEx_2 ( ConstFld : word ) : Double;
  // Получить количество по номеру поля 1..14
  Function GetCalcValueForFldEx_3 ( ConstFld : word ) : Double;

end;
VipInterface iCalcValSpMnPForSpDocs implements oCalcValSpMnPForSpDocs Licensed(Free);
#endif // #ifdef __oCalcValSpMnPForSpDocs__
