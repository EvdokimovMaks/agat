// =============================================================================
//                                                     (c)  корпорация Галактика
// Галактика 7.12 - Производственный контур
// Описание интерфейс-объекта "Функции для работы с журналом резервирования ПФ ПЦ"
// =============================================================================

#ifdef ComponentVersion
#component "M_MnPlan"
#endif

#ifndef OBJINT_ALGORITM
#define OBJINT_ALGORITM
//#define OBJINT_ACCOUNT
#include ObjIntPl.vin
#endif

#include Alg_05.vih
#include oCommonFunAlg.vih


#ifndef __OIEVNLOG__
  #include oiEvnLog.vih
#endif // __OIEVNLOG__
#include Limitation.vih


#ifndef __Def_tmpObjRemPerson__
#define __Def_tmpObjRemPerson__
Table Struct tmpObjRemPerson
(
// nrec    : tNrec,
 Number  : word,
 KodKau  : word,
 cPrEd   : comp
)
With Index
(
 tmObjRemPerson01  =  Number,
 tmObjRemPerson02  =  KodKau + cPrEd
 );

#endif

#ifndef __Def_tmpRsvOperObjG__
#define __Def_tmpRsvOperObjG__
Table Struct tmpRsvOperObjG
(
 Number   : word,
 PuPd     : word,
 KoncVer  : word,
 cRsvOper : comp,
 cMC      : comp,
 cRoleAn3 : comp,
 cRoleAn4 : comp,
 cRoleAn5 : comp,
 cRsvPP   : comp,
 Sort     : comp,
 DStartNew: _DateTime,
 DEndNew  : _DateTime,
 DStart   : _DateTime,
 DEnd     : _DateTime
)
With Index
(
 tmpRsvOper00  =  Sort,
 tmpRsvOper01  =  cRsvOper,
 tmpRsvOper02  =  PuPd,
 tmpRsvOper03  =  KoncVer
 );
#endif

#ifndef __Def_tmpSpTrPotr__
#define __Def_tmpSpTrPotr__
Table Struct tmpSpTrPotrObj
(
 cRsvOper : comp,
 cMC      : comp,
 Num      : word,
 NSmena   : comp,
 DStart   : comp,
 DEnd     : comp
)
With Index
(
 tmpSpTrPotr01  =  cRsvOper + Num,
 tmpSpTrPotr02  =  cMC + DStart
 );
#endif

#ifndef __Def_LinkWithRsvOperObj__
#define __Def_LinkWithRsvOperObj__
Table Struct LinkWithRsvOperObj
(
  cPos : Comp,
  cPrev: Comp,
  cNext: Comp
)
With Index
(
  LinkWithRsvOperObj01 = cPos + cPrev + cNext,
  LinkWithRsvOperObj02 = cPos + cNext + cPrev
)
;
#endif

#ifndef __Def_stModif_RSVObj__
#define __Def_stModif_RSVObj__
Type stModif_RSVObj = Record
  Flag      : Word;
  FlagRun   : Word;
  wValue1   : Word;
  wValue2   : Word;
  wValue3   : Word;
  wValue4   : Word;
  wValue5   : Word;
  wValue6   : Word;
  wUsl      : word;
  wValueDop1: word;
  wValueDop2: word;
  wValueDop3: word;
  cValue1   : Comp;
  cValue2   : Comp;
  cValue3   : Comp;
  cValue4   : Comp;
  cValue5   : comp;
  cValue6   : comp;
  cValueDop1: comp;
  cValueDop2: comp;
  cValueDop3: comp;
  dValue1   : Double;
  dValue2   : Double;
  dValue3   : Double;
  dtTime1   : _DateTime;
  dtTime2   : _DateTime;
  dtTime3   : _DateTime;
End;
#endif


#ifndef __oRsvOperObj
#define __oRsvOperObj

#doc
 Описание интерфейс-объекта "Функции для работы с журналом резервирования планового фонда производственных центров" </brief>: <br>
#end
ObjInterface oRsvOperObj;

function delRsvOper(_cRsvOper: comp): boolean;
function doDelRsvOper(sp: type$p_RsvOper): boolean;

function delSpTrPotr(_cSpTrPotr: comp): boolean;
function delAllToRsvOper(_cRsvOper: comp): boolean;
function DelSpDocToRsvOper(_wType: word; _cSpDoc: comp): boolean;
function DelRsvReg(sp: type$RsvReg): boolean;

function InsertRsvOper(var sp: type$RsvOper): boolean;
function doInsertRsvOper(var sp: type$p_RsvOper):boolean;
function InsertRsvOperWithFl(var sp: type$RsvOper; flagR: word; cValue: comp):boolean;
function doInsertRsvOperWithFl(var sp: type$p_RsvOper; flagR: word; cValue: comp):boolean;

function InsertSpTrPotr(var sp: type$SpTrPotr):boolean;
function doInsertSpTrPotr(var sp: type$p_SpTrPotr):boolean;

function InsertRsvReg(var sp: type$RsvReg):boolean;
function doInsertRsvReg(var sp: type$p_RsvReg):boolean;

function UpdateRsvOper(var sp: type$RsvOper):boolean;
function doUpdateRsvOper(var sp: type$p_RsvOper):boolean;
function doUpdateRsvOperL(var sp: type$p_RsvOper; flagStatus:word):boolean;

function UpdateSpTrPotr(var sp: type$SpTrPotr):boolean;
function doUpdateSpTrPotr(var sp: type$p_SpTrPotr):boolean;

function doUpdateRsvReg(var sp: type$p_RsvReg):boolean;

Function SinhroRsvOper(_cRsvOper_Old, _cRsvOper_New: comp; Flag: word):boolean;

function delRecordStatus(_wTypeD: word; _cSpDoc : comp; wStatus: word):boolean;
function delRsvOperToSpMnPl(stSpMnPl:type$SpMnPl):boolean;
function delRecordStatusAndMC(_cMC : comp; wStatus: word):boolean;
function delRecordAllStatus( wStatus: word):boolean;

function newStatusToRsvOper( _cRsvOper : comp; newStatus:word):boolean;
function newStatusToRecords(_wTypeD: word; _cSpDoc : comp;
                            oldStatus: word; newStatus:word):boolean;

Function GetMaxMinDateTimeDop(ccSpMnPl:comp; ccOper: comp; wStatus: word;
                              var ccMin: comp; var ccMax: comp;
                              var _SDlit: comp; var _SPZ: comp): word;
Function GetMaxMinDateTime(_cSpMnPl:comp; _cOper: comp;
             var _StartDT: _DateTime; var _EndDT: _DateTime;
             var _SumDlit: comp; var _SumPZ: comp):boolean;
Function GetMaxMinDateTimeInComp(wTypeDoc: word; _cSpMnPl:comp;
             var _StartDT: comp; var _EndDT: comp):boolean;

// Установить текущий лог
Function SetWorkLog(GrafLog: oiEvnLog): Boolean;

Function GetGrafikOrg (coOrg: comp): comp;
Function GetGrafikPodr (coPodr: comp): comp;
Function GetGrafikObjRem (var wKodKau: word; coObjRem: comp): comp;
Function GetGrafikPerson (var wKodKau: word; coPersons: comp): comp;
Function GetGrafikPersonOrObjRem (var wKodKau: word; coPObjRem: comp): comp;

Function IGrafic:boolean;
Function InitrtOperMK:boolean;
Function InitrtOperTM:boolean;
Function GetDateEndObj(var  vrGR: ObjGraf; CRsvOperMC: comp; cRsvOper: comp;
                       var _dStartDate: date; var _tStartTime: time; _dDlitel: double;
                       var _DTEnd:DateTime; flag: word; NSmena: word):boolean;
Function GetDateEnd(ccGrafik: comp; CRsvOperMC: comp; cRsvOper: comp;
                    var _dStartDate: date; var _tStartTime: time; _dDlitel: double;
                    var _DTEnd:DateTime; flag: word; NSmena: word):boolean;
Function WriteToSpTrPotrObj(var  vrGR: ObjGraf; CRsvOperMC: comp; cRsvOper: comp;
                           _dStartDateTime: _DateTime;_dEndDateTime: _DateTime;
                           wStatus: word):boolean;
Function WriteToSpTrPotr(ccGrafik: comp; CRsvOperMC: comp; cRsvOper: comp;
                         _dStartDateTime: _DateTime;_dEndDateTime: _DateTime;
                         wStatus: word):boolean;

function GetMarshNrec(_cOper: comp):comp;
function WriteTmpPotrMK(_cOper: comp; doKol: double; cEd:comp; DateSt: date ):boolean;
function KorekciaDataTimeStart(var OldDate: date; var OldTime: Time;
                              wTypeDoc: word; cPosDoc: comp;
                              ccOper: comp; cOtpEd: comp; FlPlan: word): boolean;
function KorekciaOper(NewStDT: comp; NewEDT: comp;
                      wTypeDoc: word; cPosDoc: comp;
                      ccOper: comp; cOtpEd: comp;
                      _dKol: double; var flag: word): boolean;

function InstmpObjRemPerson(_Num: word; wKodKau: word; cNrec: comp):boolean;
function WritetmpObjRemPerson(cOper: comp; _wKodKau: word; _cNrec: comp): boolean;
function GetNrecWrkFndPE_Hdr(KodKau: word; cPrEd: comp): comp;
function GetNrecWrkFndPE_Hdr_Num(Num: word): comp;
Function GetNumtmpObjRemPerson(KodKau: word; cPrEd: comp): word;

Function CreateLinkObjPerson(_cRsvOper: comp; _cWrkFnd: comp;
                              wuslPlan: word; NSmena: word):boolean;

Procedure DoneInt;

Function GetDateEndObjPart(var  vrGR: ObjGraf; CRsvOperMC, cRsvOper: comp;
                       var _dStartDate: date; var _tStartTime: time;
                       _dDlitel, Dlit_PZ, Kol_All, RazPart: double;
                       var _DTEnd: DateTime; flag, flag_PZ, NSmena: word;
                       var Cikl: comp):boolean;
Function WriteToSpTrPotrObjPart(var  vrGR: ObjGraf; CRsvOperMC: comp; cRsvOper: comp;
                                _dStartDateTime: _DateTime;_dEndDateTime: _DateTime;
                                wStatus: word; Cikl: comp):boolean;

#doc
 Получить предыдущие и (или) последущие позиции</brief><br>
 Параметры:<br>
   stm         - структура параметров<br>
               stm.Flag = 1 - заполнение таблицы для последующей работы со связями
   stm.cValue1 - NRec позиции журнала, для которой необходимо получить предыдущие и последующие позиции<br>
   stm.wValue1 - направление (0 - предыдущие; 1 - последующие; 2 - предыдущие и последующие)<br>
   stm.wValue2  - уровень разузлования; 1 - первый уровень, другое значение - полностью разузловывает<br>
 Результат:<br>
   Для Flag = 1 - True, если есть хотя бы одна связь, иначе - False<br>
#end
Function GoLinksRsvOper(var stm: stModif_RSVObj ): Boolean;

#doc
 Получить первую предыдущую позицию</brief><br>
 Параметры:<br>
   cPos  - NRec позиции журнала, для которой ннеобходимо найти предыдущие <br>
   cPrev - возвращается NRec предыдущей позиции журнала <br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function GetFirst_PrevPos( cPos: Comp; Var cPrev: Comp ): Boolean;

#doc
 Получить следующую предыдущую позицию</brief><br>
 Параметры:<br>
   cPos  - NRec позиции журнала, для которой ннеобходимо найти предыдущие <br>
   cPrev - возвращается NRec предыдущей позиции журнала <br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function GetNext_PrevPos( cPos: Comp; Var cPrev: Comp ): Boolean;

#doc
 Получить первую последующую позицию</brief><br>
 Параметры:<br>
   cPos  - NRec позиции журнала, для которой ннеобходимо найти последующую <br>
   cNext - возвращается NRec последующей позиции журнала <br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function GetFirst_NextPos( cPos: Comp; Var cNext: Comp ): Boolean;

#doc
 Получить следующую последующую позицию</brief><br>
 Параметры:<br>
   cPos  - NRec позиции журнала, для которой ннеобходимо найти последующую <br>
   cNext - возвращается NRec последующей позиции журнала <br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function GetNext_NextPos( cPos: Comp; Var cNext: Comp ): Boolean;

#doc
 Чистит таблицу LinkWithRsvOper </brief><br>
 Обязательно запускать после окончания работы со связями<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function ClearLinks: Boolean;


#doc
  Изменение статуса и состояния в записях RsvOper(текущей и последующих операциях)</brief><br>
 Параметры:<br>
   _cRsvOper  - NRec позиции журнала, для которой необходимо найти последующую <br>
   _NewStatus - Новое значение статуса позиции <br>
   _OldStatus - Старое значение статуса позиции <br>
   wSost      - Старое/новое значение состояния <br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function NewPosStatus(_cRsvOper: comp; _NewStatus: word; _OldStatus: word;
                      var wSost: word; var UslFlag: word):boolean;

#doc
   Создание связи позиции журнала с позицией различных документов (накладная, план)</brief><br>
 Параметры:<br>
   wDirect  - Направление связи (приход/расход) <br>
   wDoc     - Тип связанного документа (константа таблицы - coKatSopr, coMnPlan  и т.д.) <br>
   cDoc     - NRec связанного документа <br>
   cPos     - NRec связанной позиции документа <br>
   cRsvOper - NRec позиции журнала, для которой создается связь <br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function CreateLinkRsvReg(wDirect: Word; wDoc, cDoc, cPos, cRsvOper: Comp): Boolean;

#doc
   Перемещение во времени позиций журнала резервирования</brief><br>
 Параметры:<br>
   stm        - структура параметров
 Результат:<br>
   True, если успешно, иначе - False<br>
#end

Function GetSetSdvig(var stm: stModif_RSVObj): boolean;

Function GetSetParam(var vrGR: ObjGraf; var stm: stModif_RSVObj): boolean;

Function VeiwErrorSdvig(var stm: stModif_RSVObj):boolean;

Function GetSetEdit(_cRsvOper: comp; FlagR, FlagUsl: word): word;

Function PermitNewStatus(_cRsvOper: comp; NewStatus, FlagR: word;
                         var FlagError:word; var StartTime: comp ):boolean;

Function RsvEdit(var _cRsvOper: comp; cValue: comp; dValue: double; FlagR, FlagUsl: word):word;

Function RsvInfoEdit(var _cRsvOper: comp; _cRsvOper_New: comp;
                     var cStartTime: comp; var cEndDate: comp;
                     var cDlit: comp; var cDlit_PZ: comp;
                     var cValue1: comp; var dValue: double;
                     var wValue: word; FlagR, FlagUsl: word):word;

end;

VipInterface RsvOperObj implements oRsvOperObj

 #ifdef ATL51
 Licensed (FREE)
 #end
;

#endif


