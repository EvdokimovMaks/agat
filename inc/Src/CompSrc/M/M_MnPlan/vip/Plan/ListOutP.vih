// =============================================================================
//                                                     (c)  корпорация Галактика
// Галактика 7.11 - Производственный контур
// Описание интерфейса-объекта "Список продуктов выхода"
// =============================================================================

#include ListNormDoc.vih //
#include ListAn.vih      //

#component "M_MnPlan"

//******************************************************************************
// Типы данных

//------------------------------------------------------------------------------
// Правило поиска норм
#ifndef __Def_TRecNormFindRule__
#define __Def_TRecNormFindRule__
#doc
 Правило поиска норм</brief> <br>
 Поля: <br>
   cNormFormPl   - Ссылка на правило поиска норм <br>
   FlDefNorm     - Источник получения норм по умолчанию: <br>
     0: Активные производственные спецификации <br>
     1: Активные маршрутные карты <br>
     2: Активные плановые потребности <br>
   FlDirectFindN - Направление поиска норм: <br>
     0: прямое <br>
     1: обратное <br>
   FlRangeFindN  - Диапазон поиска норм: <br>
     0: Объект планирования в заголовке <br>
     1: Объект планирования в спецификации <br>
     2: Объект планирования в заголовке, при отсутствии в спецификации <br>
   FlSelectModeN - Режим выбора норм: <br>
     0: по максимальному значению для одной позиции <br>
     1: по максимальному значению для всех позиций <br>
#end
Type TRecNormFindRule = record
  cNormFormPl: comp;   // Ссылка на правило поиска норм
  FlDefNorm: word;     // Источник получения норм по умолчанию:
                       //   0: Активные производственные спецификации
                       //   1: Активные маршрутные карты
                       //   2: Активные плановые потребности
  FlDirectFindN: word; // Направление поиска норм:
                       //   0: прямое
                       //   1: обратное
  FlRangeFindN: word;  // Диапазон поиска норм:
                       //   0: Объект планирования в заголовке
                       //   1: Объект планирования в спецификации
                       //   2: Объект планирования в заголовке, при отсутствии в спецификации
  FlSelectModeN: word; // Режим выбора норм:
                       //   0: по максимальному значению для одной позиции
                       //   1: по максимальному значению для всех позиций
End; // Type TRecNormFindRule = record
#endif

//------------------------------------------------------------------------------
// Продукт выхода
#ifndef __Def_TRecOutP__
#define __Def_TRecOutP__
#doc
 Продукт выхода</brief> <br>
 Поля: <br>
   CalcGroup        - Код группы расчета <br>
   wState           - Состояние записи <br>
   wPlanLevel       - Уровень планирования <br>
   CalcDate         - Дата для расчета <br>
   KAUOutP          - КАУ продукта выхода <br>
   cOutP            - Ссылка на продукт выхода <br>
   cTmOut           - Ссылка на запись tmOutm <br>
   cTmOutIzd        - Ссылка на изделие <br>
   wProduct         - Вид продукта (0 - норма, 1 -выход) <br>
   wTypeOutP        - Тип продукта выхода (0 - готовая продукция, 1 - полуфабрикаты, 2 - отходы) <br>
   oListAn          - Список аналитик для продукта выхода <br>
   oListND          - Список документов-норм для продукта выхода <br>
   dCount           - Количество <br>
   dCountRes        - Количество (результат) <br>
   dRest            - Количество (остаток) <br>
   cOtpEd           - Ссылка на отпускную единицу измерения <br>
   wPriority        - Приоритет продукта <br>
   dPCtrlFactor     - Коэффициент пропорционального регулирования <br>
   TypeND           - Предпочтительный тип документа-нормы (КАУ: Hdr_PS, KatMarsh, ...) <br>
   cNormDoc         - Ссылка на предпочтительный документ-норму <br>
   dPercentWO_PCost - Процент списания себестоимости <br>
   cOtpEdIzd        - Единица измерения единицы нормирования <br>
   KolIzd           - Единица нормирования <br>
   KoefPer          - Коэффициент пересчета <br>
   wTypeIzd         - КАУ объекта в шапке документа-нормы <br>
   cNrecIzd         - nRec объекта в шапке документа-нормы <br>
   KolRasx          - Количество расхода для единицы нормирования <br>
   FlDefNorm        - Источник получения норм по умолчанию: <br>
     0: Активные производственные спецификации <br>
     1: Активные маршрутные карты <br>
     2: Активные плановые потребности <br>
   FlDirectFindN    - Направление поиска норм: <br>
     0: прямое <br>
     1: обратное <br>
   FlRangeFindN     - Диапазон поиска норм: <br>
     0: Объект планирования в заголовке <br>
     1: Объект планирования в спецификации <br>
     2: Объект планирования в заголовке, при отсутствии в спецификации <br>
   FlSelectModeN    - Режим выбора норм: <br>
     0: по максимальному вхождению ПВ <br>
     1: по максимальному объему для каждого ПВ <br>
   FlPosInNorm      - Признак нахождения объекта в документе-норме <br>
     0: в заголовке <br>
     1: в спецификации <br>
#end
Type TRecOutP = record
  CalcGroup: comp;          // Код группы расчета
  wState: word;             // Состояние записи
  wPlanLevel: word;         // Уровень планирования
  CalcDate: date;           // Дата для расчета
  KAUOutP: word;            // КАУ продукта выхода
  cOutP: comp;              // Ссылка на продукт выхода
  cTmOut: comp;             // Ссылка на запись tmOutm
  cTmOutIzd: comp;          // Ссылка на изделие
  wProduct: word;           // Вид продукта (0 - норма, 1 -выход)
  wTypeOutP: word;          // Тип продукта выхода (0 - готовая продукция, 1 - полуфабрикаты, 2 - отходы)
  oListAn: oiListAn;        // Список аналитик для продукта выхода
  oListND: oiListNormDoc;   // Список документов-норм для продукта выхода
  dCount: double;           // Количество
  dCountRes: double;        // Количество (результат)
  dRest: double;            // Количество (остаток)
  cOtpEd: comp;             // Ссылка на отпускную единицу измерения
  wPriority: word;          // Приоритет продукта
  dPCtrlFactor: double;     // Коэффициент пропорционального регулирования
  TypeND: word;             // Предпочтительный тип документа-нормы (КАУ: Hdr_PS, KatMarsh, ...)
  cNormDoc: comp;           // Ссылка на предпочтительный документ-норму
  dPercentWO_PCost: double; // Процент списания себестоимости
  cOtpEdIzd: comp;          // Единица измерения единицы нормирования
  KolIzd: double;           // Единица нормирования
  KoefPer: double;          // Коэффициент пересчета
  wTypeIzd: word;           // КАУ объекта в шапке документа-нормы
  cNrecIzd: comp;           // nRec объекта в шапке документа-нормы
  KolRasx: double;          // Количество расхода для единицы нормирования
  FlDefNorm: word;          // Источник получения норм по умолчанию:
                            //   0: Активные производственные спецификации
                            //   1: Активные маршрутные карты
                            //   2: Активные плановые потребности
  FlDirectFindN: word;      // Направление поиска норм:
                            //   0: прямое
                            //   1: обратное
  FlRangeFindN: word;       // Диапазон поиска норм:
                            //   0: Объект планирования в заголовке
                            //   1: Объект планирования в спецификации
                            //   2: Объект планирования в заголовке, при отсутствии в спецификации
  FlSelectModeN: word;      // Режим выбора норм:
                            //   0: по максимальному вхождению ПВ
                            //   1: по максимальному объему для каждого ПВ
  FlPosInNorm: word;        // Признак нахождения объекта в документе-норме
                            //   0: в заголовке
                            //   1: в спецификации
End; // Type TRecOutP = record
#endif

//******************************************************************************
// ObjInterface oiListOutP
#ifndef __Def_OI_ListOutP__
#define __Def_OI_ListOutP__
#doc
 Описание интерфейса-объекта "Список продуктов выхода"</brief>
#end
ObjInterface oiListOutP;

//------------------------------------------------------------------------------
#doc
 Просмотр буфера</brief> <br>
 Параметры: <br>
   asWindowTitle - Заголовок окна <br>
#end
Procedure ViewData(asWindowTitle: string);

//------------------------------------------------------------------------------
#doc
 Инициализация структуры типа TRecOutP</brief> <br>
 Параметры: <br>
   ardRecOutP - Структура для хранения продукта выхода <br>
#end
Procedure InitRec(var ardRecOutP: TRecOutP);

//------------------------------------------------------------------------------
#doc
 Получение копии записи</brief> <br>
 Параметры: <br>
   awFlag         - Флаг: <br>
     1: копировать также ListAn <br>
     2: копировать также ListND <br>
   ardRecOutP_Src - Структура-источник для хранения продукта выхода <br>
   ardRecOutP_Dst - Структура-приемник для хранения продукта выхода <br>
 Результат: <br>
   True, если успешно <br>
#end
Function AssignRec(awFlag: word; ardRecOutP_Src: TRecOutP; var ardRecOutP_Dst: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Получение порядкового номера текущей записи</brief> <br>
 Результат: <br>
   Npp записи, 0 - если запись не определена <br>
#end
Function GetCurRecNpp: comp;

//------------------------------------------------------------------------------
#doc
 Чтение текущей записи в списке</brief> <br>
 Параметры: <br>
   ardRecOutP - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если успешно <br>
#end
Function GetCurRec(var ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Обновление текущей записи в списке</brief> <br>
 Параметры: <br>
   ardRecOutP - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если успешно <br>
#end
Function UpdCurRec(ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Поиск в списке</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   Порядковый номер в списке <br>
#end
Function Find(awCalcStage: word; ardRecOutP: TRecOutP): comp;

//------------------------------------------------------------------------------
#doc
 Переход на запись</brief> <br>
 Параметры: <br>
   acNpp - Порядковый номер в списке <br>
 Результат: <br>
   True, если успешно <br>
#end
Function GoToRec(acNpp: comp): boolean;

//------------------------------------------------------------------------------
#doc
 Добавление в список</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   Порядковый номер <br>
#end
Function Add(awCalcStage: word; ardRecOutP: TRecOutP): comp;

//------------------------------------------------------------------------------
#doc
 Очистка списка</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   acCalcGroup - Код группы расчета (0 - на важен) <br>
 Результат: <br>
   True, если успешно <br>
#end
Function Clear(awCalcStage: word; acCalcGroup: comp): boolean;

//------------------------------------------------------------------------------
#doc
 Удаление из списка</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если успешно <br>
#end
Function Del(awCalcStage: word; ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Получение первой записи</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   acCalcGroup - Код группы расчета (0 - не важен) <br>
   adtCalcDate - Дата расчета (date(0, 0, 0) - не учитывается) <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если запись найдена <br>
#end
Function GetFirstOutP(awCalcStage: word; acCalcGroup: comp; adtCalcDate: date;
  var ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Получение последней записи</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   acCalcGroup - Код группы расчета (0 - не важен) <br>
   adtCalcDate - Дата расчета (date(0, 0, 0) - не учитывается) <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если запись найдена <br>
#end
Function GetLastOutP(awCalcStage: word; acCalcGroup: comp; adtCalcDate: date;
  var ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Получение следующей записи относительно текущей позиции</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   acCalcGroup - Код группы расчета (0 - не важен) <br>
   adtCalcDate - Дата расчета (date(0, 0, 0) - не учитывается) <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если запись найдена <br>
#end
Function GetNextOutP(awCalcStage: word; acCalcGroup: comp; adtCalcDate: date;
  var ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Получение предыдующей записи относительно текущей позиции</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   acCalcGroup - Код группы расчета (0 - не важен) <br>
   adtCalcDate - Дата расчета (date(0, 0, 0) - не учитывается) <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если запись найдена <br>
#end
Function GetPrevOutP(awCalcStage: word; acCalcGroup: comp; adtCalcDate: date;
  var ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Получение первой записи (для изделия)</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   acCalcGroup - Код группы расчета (0 - не важен) <br>
   adtCalcDate - Дата расчета (date(0, 0, 0) - не учитывается) <br>
   acTmOutIzd  - Ссылка на изделие <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если запись найдена <br>
#end
Function GetFirstOutP_Izd(awCalcStage: word; acCalcGroup: comp; adtCalcDate: date; acTmOutIzd: comp;
  var ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Получение последней записи (для изделия)</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   acCalcGroup - Код группы расчета (0 - не важен) <br>
   adtCalcDate - Дата расчета (date(0, 0, 0) - не учитывается) <br>
   acTmOutIzd  - Ссылка на изделие <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если запись найдена <br>
#end
Function GetLastOutP_Izd(awCalcStage: word; acCalcGroup: comp; adtCalcDate: date; acTmOutIzd: comp;
  var ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Получение следующей записи (для изделия) относительно текущей позиции</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   acCalcGroup - Код группы расчета (0 - не важен) <br>
   adtCalcDate - Дата расчета (date(0, 0, 0) - не учитывается) <br>
   acTmOutIzd  - Ссылка на изделие <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если запись найдена <br>
#end
Function GetNextOutP_Izd(awCalcStage: word; acCalcGroup: comp; adtCalcDate: date; acTmOutIzd: comp;
  var ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Получение предыдующей записи (для изделия) относительно текущей позиции</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   acCalcGroup - Код группы расчета (0 - не важен) <br>
   adtCalcDate - Дата расчета (date(0, 0, 0) - не учитывается) <br>
   acTmOutIzd  - Ссылка на изделие <br>
   ardRecOutP  - Структура для хранения продукта выхода <br>
 Результат: <br>
   True, если запись найдена <br>
#end
Function GetPrevOutP_Izd(awCalcStage: word; acCalcGroup: comp; adtCalcDate: date; acTmOutIzd: comp;
  var ardRecOutP: TRecOutP): boolean;

//------------------------------------------------------------------------------
#doc
 Обнуление значений полей в записях списка</brief> <br>
 Параметры: <br>
   awCalcStage - Этап расчета (0 - не важен) <br>
   awFlFld     - Флаги для определения обнуляемых полей: <br>
     1: dCount, dCountRes, dRest <br>
     2: TypeND, cNormDoc <br>
     4: CalcGroup <br>
   acCalcGroup - Код группы расчета (0 - не важен) <br>
 Результат: <br>
   True, если успешно <br>
#end
Function ClearFields(awCalcStage: word; awFlFld: word; acCalcGroup: comp): boolean;

//------------------------------------------------------------------------------
#doc
 Установка значения для полей wCalcStage, wPlanLevel по cTmOut</brief> <br>
 Параметры: <br>
   acTmOut     - Значение cTmOut для поиска <br>
   awPlanLevel - Уровень планирования (новое значение) <br>
 Результат: <br>
   True, если успешно <br>
#end
Function SetLevelForTmOut(acTmOut: comp; awPlanLevel: word): boolean;

End; // ObjInterface oiListOutP

VipInterface iListOutP implements oiListOutP Licensed(Free);

#endif
