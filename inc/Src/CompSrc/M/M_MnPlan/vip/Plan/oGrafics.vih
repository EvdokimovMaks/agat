//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 7.11 - Производственный контур
// Описание интерфейс-объекта "Функции для работы с графиками"
//------------------------------------------------------------------------------

#ifndef __OGRAFICS
#define __OGRAFICS

#component "M_MnPlan"

#ifndef __OIEVNLOG__
  #include oiEvnLog.vih
#endif // __OIEVNLOG__

//<b>Внимание!</b> Структура предназначена только для внутреннего использования </brief> <br>
#doc
Структура для хранения интервала рабочего времени </brief> <br>
<b>Параметры:</b> <br>
    dDate       - Дата <br>
    ShiftNumber - Номер смены (0, если смен нет) <br>
    tStart      - Время начала работы <br>
    tEnd        - Время окончания работы <br>
    cObject     - Объект, использующий график (тип интервала) <br>
    cObjectKind - Вид объекта, использующего график (ссылка на объект) <br>
#end
Type
// Тип интервала рабочего времени
  TInterval = record
    dDate      : Date; // Дата
    ShiftNumber: Word; // Номер смены (0, если смен нет)
    tStart     : Time; // Время начала работы
    tEnd       : Time; // Время окончания работы
    cObject    : Comp; // Объект, использующий график (тип интервала)
    cObjectKind: Comp; // Вид объекта, использующего график (ссылка на объект)
  end;


// ВНИМАНИЕ!!!
// Если в теле какой-функции этого объекта встречается обращение к таблице tmpDayInfo,
// значит, в начале работы с графиком нужно вызвать функцию загрузки информации о рабочих
// днях (LoadDayInfo)

#doc
  Описание интерфейс-объекта "Функции для работы с графиками" </brief> <br>
#end
ObjInterface oGrafics;
//----- Функции инициализации

#doc
  Инициализация объекта (для работы с одним графиком) </brief> <br>
  <b>Параметры:</b><br>
  wTuneType (вид настройки):<br>
   0 - общесистемная настройка<br>
   1 - настройка объекта<br>
  wNearWorkDate (режим поиска рабочего дня, имеет смысл если wTuneType = 1):<br>
   0 - ближайший больший<br>
   1 - ближайший меньший<br>
  bUseTime - использовать время<br>
  <b>Результат:</b><br>
  True, если все OK <br>
#end
//  Инициализация объекта (для работы с одним графиком)
Function InitGrafics(wTuneType: Word; wNearWorkDate: Word; bUseTime: Boolean): Boolean;

#doc
 Инициализация графика</brief>: <br>
 (для работы с несколькими графиками одновременно, позволяет задавать для каждого графика свои настройки)<br>
 <b>Параметры:</b><br>
 cGrafikNRec - Grafik.NRec <br>
 wNearWorkDate (режим поиска рабочего дня, имеет смысл если wTuneType = 1):<br>
   0 - ближайший больший <br>
   1 - ближайший меньший <br>
   2 - из настройки <br>
 bUseTime - использовать время <br>
 <b>Результат:</b><br>
  True, если все OK <br>
#end
// Инициализация графика
Function InitGrafik(cGrafikNRec  : Comp;
                    wNearWorkDate: Word;
                    bUseTime     : Boolean): Boolean;

#doc
 Установить текущий лог <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
Function SetWorkLog(GrafLog: oiEvnLog): Boolean;

#doc
 Закончить работу с графиком </brief> <br>
 <b>Параметры:</b><br>
   cGrafikNRec - Grafik.NRec <br>
<b>Результат:</b><br>
  True, если все OK <br>
#end
// Закончить работу с графиком
Function CloseGrafik(cGrafikNRec: Comp): Boolean;


//----- Функции для работы с настройками графика

#doc
Получить настройку режима поиска рабочего дня для графика</brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
#end
// Получить настройку режима поиска рабочего дня для графика
Function GetNearWorkDate(cGrafikNRec: Comp): Word;

#doc
Получить настройку "Использовать время" для графика </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
  <b>Результат:</b><br>
    True, если "Использовать время" <br>
#end
// Получить настройку "Использовать время" для графика
Function GetUseTime(cGrafikNRec: Comp): Boolean;

#doc
Получить начальную дату загрузки для графика </brief> <br>
   <b>Параметры:</b><br>
     cGrafikNRec - Grafik.NRec <br>
   <b>Результат:</b><br>
     начальная дата загрузки для графика<br>
#end
// Получить начальную дату загрузки для графика
Function GetBegDate(cGrafikNRec: Comp): Date;

#doc
Получить конечную дату загрузки для графика </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
  <b>Результат:</b><br>
    конечная дата загрузки для графика<br>
#end
// Получить конечную дату загрузки для графика
Function GetEndDate(cGrafikNRec: Comp): Date;


//----- Функции копирования графиков

#doc
Инициализация параметров копирования (смещения) графиков </brief> <br>
  <b>Параметры:</b><br>
    cGrafik1 - NRec Графика 1 <br>
    cGrafik2 - NRec Графика 2 <br>
    dBegin1  - Начальная дата копируемого интервала Графика1 <br>
    dEnd1    - Конечная дата копируемого интервала Графика1  <br>
    dBegin2  - Начальная дата интервала Графика2 <br>
    dBeginFact - Фактическая начальная дата копируемого интервала Графика1 <br>
                 (первый рабочий день интервала)<br>
    dEndFact   - Фактическая конечная дата копируемого интервала Графика1 <br>
                (последний рабочий день интервала)<br>
  <b>Результат:</b><br>
   True, если все OK; <br>
   dBeginFact - Фактическая начальная дата копируемого интервала Графика1 <br>
                (первый рабочий день интервала);<br>
   dEndFact   - Фактическая конечная дата копируемого интервала Графика1 <br>
                (последний рабочий день интервала)<br>
#end
// Инициализация параметров копирования (смещения) графиков
Function InitCopy(cGrafik1    : Comp; // NRec Графика 1
                  cGrafik2    : Comp; // NRec Графика 2
                  dBegin1     : Date; // Начальная дата копируемого интервала Графика1
                  dEnd1       : Date; // Конечная дата копируемого интервала Графика1
                  dBegin2     : Date; // Начальная дата интервала Графика2
              var dBeginFact  : Date; // Фактическая начальная дата копируемого интервала Графика1
                                      // (первый рабочий день интервала)
              var dEndFact    : Date  // Фактическая конечная дата копируемого интервала Графика1
                  ): Boolean;         // (последний рабочий день интервала)

#doc
Получить дату Графика2 по дате Графика1 </brief> <br>
  <b>Параметры:</b><br>
    dDate1  - Дата Графика1 <br>
    dDate2  - Дата Графика2 <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    dDate2  - Дата Графика2 <br>
#end
// Получить дату Графика2 по дате Графика1
Function GetDate2(dDate1: Date; var dDate2: Date): Boolean;

#doc
Получить запись (стуктуру) позиции Графика2, соответствующую записи позиции Графика1 </brief> <br>
  <b>Параметры:</b><br>
    GrafBuf1  - Структура(type$SpGraf) записи позиции Графика1 <br>
    GrafBuf2  - Структура(type$SpGraf) записи позиции  Графика2 <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    GrafBuf2  - Структура(type$SpGraf) записи позиции  Графика2 <br>
#end
// Получить запись (стуктуру) позиции Графика2, соответствующую записи позиции Графика1
Function GetGraf2(GrafBuf1: type$SpGraf; var GrafBuf2: type$SpGraf): Boolean;


//----- Функции получения параметров графика

#doc
Получить SpGraf.NRec по дате </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
    dDate       - Дата <br>
    SpNRec      - SpGraf.NRec <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    SpNRec - SpGraf.NRec <br>
#end
// Получить SpGraf.NRec по дате
Function GetSpGrafNRecByDate(cGrafikNRec: Comp; // NRec графика
                             dDate1     : Date; // Дата
                         var SpNRec     : Comp  // SpGraf.NRec
                            ): Boolean;

#doc
Получить начальную дату графика </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
    BegDate     - Начальная дата графика <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    BegDate     - Начальная дата графика <br>
#end
// Получить начальную дату графика
Function GetGrafBegDate(cGrafikNRec: Comp; var BegDate: Date): Boolean;

#doc
Получить конечную дату графика </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
    EndDate     - Конечная дата графика <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    EndDate     - Конечная дата графика <br>
#end
// Получить конечную дату графика
Function GetGrafEndDate(cGrafikNRec: Comp; var EndDate: Date): Boolean;

#doc
Получить время начала работы </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
    dDate1      - Дата <br>
    tTime      -  Время начала работы <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    tTime      -  Время начала работы <br>
#end
// Получить время начала работы
Function GetGrafBegDateTime(cGrafikNRec: Comp; // NRec графика
                            dDate1     : Date; // Дата
                        var tTime      : Time  // Время начала работы
                           ): Boolean;

#doc
Получить время окончания работы </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
    dDate1      - Дата <br>
    tTime      -  Время окончания работы <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    tTime      -  Время окончания работы <br>
#end
// Получить время окончания работы
Function GetGrafEndDateTime(cGrafikNRec: Comp; // NRec графика
                            dDate1     : Date; // Дата
                        var tTime      : Time  // Время окончания работы
                           ): Boolean;

#doc
Получить время начала работы (работает по временной таблице) </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
    dDate1      - Дата <br>
    tTime      -  Время начала работы <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    tTime      -  Время начала работы <br>
#end
// Получить время начала работы (работает по временной таблице)
Function GetGrafBegDateTimeFast(cGrafikNRec: Comp; // NRec графика
                                dDate1     : Date; // Дата
                            var tTime      : Time  // Время начала работы
                               ): Boolean;

#doc
Получить время окончания работы (работает по временной таблице) </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
    dDate1      - Дата <br>
    tTime      -  Время окончания работы <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    tTime      -  Время окончания работы <br>
#end
// Получить время окончания работы (работает по временной таблице)
Function GetGrafEndDateTimeFast(cGrafikNRec: Comp; // NRec графика
                                dDate1     : Date; // Дата
                            var tTime      : Time  // Время окончания работы
                               ): Boolean;


//----- Функции работы с рабочими днями

#doc
Загрузить информацию о рабочих днях</brief>. <br>
Эта функция должна вызываться после функции инициализации графика.<br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec <br>
    dBegin      - Начальная дата интервала графика <br>
    dEnd        - Конечная дата интервала графика <br>
    ToClean     - Удалить закаченные ранее данные? <br>
    dBeginFact  - Фактическая начальная дата интервала графика <br>
    dEndFact    - Фактическая конечная дата интервала графика <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    dBeginFact  - Фактическая начальная дата интервала графика <br>
    dEndFact    - Фактическая конечная дата интервала графика <br>
#end
// Загрузить информацию о рабочих днях
// Эта функция должна вызываться после функции инициализации графика и
// перед остальными функциями для работы с графиком
// Если эту функцию не вызвать явно, то она будет вызвана неявно из функций
// работы с графиком (лучше в начале работы вызывать эту функцию и задавать
// предполагаемый интервал использования графика, что повысит скорость работы).
Function LoadDayInfo(cGrafikNRec: Comp;    // NRec Графика
                     dBegin     : Date;    // Начальная дата интервала графика
                     dEnd       : Date;    // Конечная дата интервала графика
                     ToClean    : Boolean; // Удалить закаченные ранее данные?
                 var dBeginFact : Date;    // Фактическая начальная дата интервала графика
                 var dEndFact   : Date     // Фактическая конечная дата интервала графика
                    ): Boolean;

#doc
Рабочий день или выходной? </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec (если 0 - последний загруженный график) <br>
    dDate1      - Дата <br>
  <b>Результат:</b><br>
    True, если все OK  и день рабочий по графику <br>
#end
// Рабочий день или выходной?
Function IsWorkDate(cGrafikNRec: Comp; // Grafik.NRec (если 0 - последний загруженный график)
                    dDate1     : Date  // Дата
                   ): Boolean;

#doc
Рабочее время? </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - Grafik.NRec (если 0 - последний загруженный график) <br>
    dtDateTime1 -  Дата и время <br>
  <b>Результат:</b><br>
    True, если все OK  и время рабочее по графику <br>
#end
// Рабочее время?
Function IsWorkDateTime(cGrafikNRec: Comp;     // Grafik.NRec (если 0 - последний загруженный график)
                        dtDateTime1: _DateTime // Дата и время
                       ): Boolean;

#doc
Получить ближайший рабочий день </brief>. <br>
  <b>Параметры:</b><br>
    ToUseTune - Использовать настройку? <br>
     0 - ближайший больший  <br>
     1 - ближайший меньший  <br>
     2 - использовать настройку <br>
    cGrafikNRec - NRec графика <br>
    dDate1 - Входная дата  <br>
    dDate2 - Выходная дата <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    dDate2 - ближайший рабочий день согласно настройке <br>
#end
// Получить ближайший рабочий день
Function GetWorkDate(ToUseTune  : Word;           // Использовать настройку?
                                                  // 0 - ближайший больший
                                                  // 1 - ближайший меньший
                                                  // 2 - использовать настройку
                     cGrafikNRec: Comp;           // NRec графика
                     dDate1     : Date;           // Входное время
                 var dDate2     : Date            // Выходное время
                    ): Boolean;

#doc
Получить ближайший рабочий день (работает по временной таблице) </brief>. <br>
  <b>Параметры:</b><br>
    ToUseTune - Использовать настройку? <br>
     0 - ближайший больший  <br>
     1 - ближайший меньший  <br>
     2 - использовать настройку <br>
    cGrafikNRec - NRec графика <br>
    dDate1 - Входная дата  <br>
    dDate2 - Выходная дата <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    dDate2 - ближайший рабочий день согласно настройке <br>
#end
// Получить ближайший рабочий день (работает по временной таблице)
Function GetWorkDateFast(ToUseTune  : Word;   // Использовать настройку?
                                              // 0 - ближайший больший
                                              // 1 - ближайший меньший
                                              // 2 - использовать настройку
                         cGrafikNRec: Comp;   // NRec графика
                         dDate1     : Date;   // Входное время
                     var dDate2     : Date    // Выходное время
                        ): Boolean;

#doc
Получить ближайшее рабочее время </brief>. <br>
  <b>Параметры:</b><br>
    ToUseTune - Использовать настройку? <br>
     0 - ближайший больший  <br>
     1 - ближайший меньший  <br>
     2 - использовать настройку <br>
    cGrafikNRec - NRec графика <br>
    dtDateTime1 - Входные дата и время  <br>
    dtDateTime2 - Выходные дата и время <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    dtDateTime2 - Ближайшее рабочее время согласно настройке <br>
#end
// Получить ближайшее рабочее время
Function GetWorkDateTime(ToUseTune  : Word;       // Использовать настройку?
                                                  // 0 - ближайший больший
                                                  // 1 - ближайший меньший
                                                  // 2 - использовать настройку
                         cGrafikNRec: Comp;       // NRec графика
                         dtDateTime1: _DateTime;  // Входные дата и время
                     var dtDateTime2: _DateTime   // Искомые дата и время
                        ): Boolean;

#doc
Получить ближайшее рабочее время (работает по временной таблице) </brief>. <br>
  <b>Параметры:</b><br>
    ToUseTune - Использовать настройку? <br>
     0 - ближайший больший  <br>
     1 - ближайший меньший  <br>
     2 - использовать настройку <br>
    cGrafikNRec - NRec графика <br>
    dtDateTime1 - Входные дата и время  <br>
    dtDateTime2 - Выходные дата и время <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    dtDateTime2 - Ближайшее рабочее время согласно настройке <br>
#end
// Получить ближайшее рабочее время (работает по временной таблице)
Function GetWorkDateTimeFast(ToUseTune  : Word;       // Использовать настройку?
                                                      // 0 - ближайший больший
                                                      // 1 - ближайший меньший
                                                      // 2 - использовать настройку
                             cGrafikNRec: Comp;       // NRec графика
                             dtDateTime1: _DateTime;  // Входные дата и время
                         var dtDateTime2: _DateTime   // Искомые дата и время
                            ): Boolean;

#doc
Получить последний рабочий день периода </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика (если 0 - последний загруженный график) <br>
    dBegin      - Начальная дата периода  <br>
    iDayCount   - Количество рабочих дней <br>
    dEnd        - Конечная дата периода <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    dEnd        - Последний рабочий день периода <br>
#end
// Получить последний рабочий день периода
Function GetLastDay(cGrafikNRec: Comp;    // Grafik.NRec (если 0 - последний загруженный график)
                    dBegin     : Date;    // Начальная дата периода
                    iDayCount  : Integer; // Количество рабочих дней
                var dEnd       : Date     // Конечная дата периода
                   ): Boolean;

#doc
Получить последний рабочий день периода (дату и время) </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика (если 0 - последний загруженный график) <br>
    dtBegin     - Начальная дата и время периода <br>
    wEdIzm      - Единица измерения времени (TppConst.inc) <br>
    EdCount     - Количество интервалов с указанной единицей измерения (> 0 - вперед, < 0 - назад) <br>
    dtEnd       - Конечная дата и время периода <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    dtEnd        - Последний рабочее время периода <br>
#end
// Получить последний рабочий день периода (дату и время)
Function GetLastDateTime(cGrafikNRec: Comp;      // Grafik.NRec (если 0 - последний загруженный график)
                         dtBegin    : _DateTime; // Начальные дата и время периода
                         wEdIzm     : Word;      // Единица измерения времени (TppConst.inc)
                         EdCount    : Double;    // Количество интервалов с указанной единицей
                                                 // измерения (> 0 - вперед, < 0 - назад)
                     var dtEnd      : _DateTime  // Конечные дата и время периода
                         ): Boolean;

#doc
Получить количество рабочих дней между датами </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика (если 0 - последний загруженный график) <br>
    dBegin      - Начальная дата периода <br>
    dEnd        - Конечная дата период <br>
    wDayCount   - Количество рабочих дней <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    wDayCount   - Количество рабочих дней между датами <br>
#end
// Получить количество рабочих дней между датами
Function GetDayCount(cGrafikNRec: Comp; // Grafik.NRec (если 0 - последний загруженный график)
                     dBegin     : Date; // Начальная дата периода
                     dEnd       : Date; // Конечная дата периода
                 var wDayCount   : Word  // Количество рабочих дней
                    ): Boolean;

#doc
Получить количество интервалов между датами </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика (если 0 - последний загруженный график) <br>
    dtBegin     - Начальная дата и время периода <br>
    dtEnd       - Конечная дата и время период <br>
    wEdIzm      - Единица измерения времени (TppConst.inc) <br>
    EdCount     - Количество интервалов с указанной единицей измерения <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    EdCount     - Количество интервалов с указанной единицей измерения <br>
#end
// Получить количество интервалов между датами
Function GetIntervalCount(cGrafikNRec: Comp;       // Grafik.NRec (если 0 - последний загруженный график)
                          dtBegin    : _DateTime;  // Начальные дата и время периода
                          dtEnd      : _DateTime;  // Конечные дата и время периода
                          wEdIzm     : Word;       // Единица измерения времени (TppConst.inc)
                      var EdCount    : TSumma// Количество интервалов с указанной единицей
                                                   // измерения
                         ): Boolean;


//----- Функции работы с рабочим временем (внутри дня)

#doc
Получить суммарное рабочее время за день </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    dDate       - Дата <br>
    tWorkTime   - Cуммарное рабочее время за день <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    tWorkTime   - Cуммарное рабочее время за день <br>
#end
// Получить суммарное рабочее время за день
Function GetWorkTimeForDate(cGrafikNRec : Comp;  // NRec графика
                            dDate1      : Date;  // Дата
                        var tWorkTime   : Time   // Cуммарное рабочее время за день
                           ): Boolean;

#doc
Получить рабочее время за интервал в пределах дня </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    dDate1      - Дата <br>
    tBegTime    - Начальное время <br>
    tEndTime    - Конечное время  <br>
    tWorkTime   - Cуммарное рабочее время за интервал <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    tWorkTime   - Cуммарное рабочее время за интервал <br>
#end
// Получить рабочее время за интервал в пределах дня
Function GetWorkTimeForInterval(cGrafikNRec : Comp;  // NRec графика
                                dDate1      : Date;  // Дата
                                tBegTime    : Time;  // Начальное время
                                tEndTime    : Time;  // Конечное время
                            var tWorkTime   : Time   // Рабочее время за интервал
                               ): Boolean;

#doc
Получить конечное время для интервала(в пределах дня -->) </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    dtDateTime  - Дата и время начала интервала <br>
    tWorkTime   - Суммарное рабочее время   <br>
    tEndTime    - Время конца интервала     <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    tEndTime    - Время конца интервала     <br>
#end
// Получить конечное время для интервала(в пределах дня -->)
Function GetTimeForIntervalBeg(cGrafikNRec : Comp;       // NRec графика
                               dtDateTime  : _DateTime;  // Дата и время начала интервала
                               tWorkTime   : Time;       // Суммарное рабочее время
                           var tEndTime    : Time        // Время конца интервала
                              ): Boolean;

#doc
Получить конечное время для интервала(в пределах дня <--) </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    dtDateTime  - Дата и время начала интервала <br>
    tWorkTime   - Суммарное рабочее время   <br>
    tEndTime    - Время конца интервала     <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    tEndTime    - Время конца интервала     <br>
#end
// Получить конечное время для интервала(в пределах дня <--)
Function GetTimeForIntervalEnd(cGrafikNRec : Comp;       // NRec графика
                               dtDateTime  : _DateTime;  // Дата и время начала интервала
                               tWorkTime   : Time;       // Суммарное рабочее время
                           var tEndTime    : Time        // Время конца интервала
                              ): Boolean;


//----- Функции работы со сменами

#doc
Получить количество смен </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    dDate1      - Дата  <br>
    ShiftCount  - Количество смен  <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    ShiftCount  - Количество смен (если не задан шаблон графика, ShiftCount = 0) <br>
#end
// Получить количество смен
Function GetShiftCount(cGrafikNRec: Comp;        // NRec графика
                       dDate1     : Date;        // Дата
                   var ShiftCount : Word         // Количество смен (если не задан шаблон графика,
                      ): Boolean;                // ShiftCount = 0)

#doc
Получить номер смены </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    tTime       - Дата и время <br>
    ShiftNumber - Номер смены  <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    ShiftNumber  - Номер смены (если не задан шаблон графика, ShiftNumber = 0) <br>
#end
// Получить номер смены
Function GetShiftNumber(cGrafikNRec: Comp;      // NRec графика
                        tTime      : _DateTime; // Дата и время
                    var ShiftNumber: Word       // Номер смены (если не задан шаблон графика,
                       ): Boolean;              // ShiftNumber = 0)

#doc
Получить запись (структуру) смены </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    tTime       - Дата и время <br>
    Shift       - Структура смены  <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    Shift       - Структура смены  <br>
#end
// Получить запись (структуру) смены
Function GetShift(cGrafikNRec: Comp;            // NRec графика
                  tTime      : _DateTime;       // Дата и время
              var Shift      : type$SpWork      // Структура смены
                 ): Boolean;

#doc
Получить запись (структуру) i-й смены </brief>. <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    tTime       - Дата и время <br>
    ShiftNumber - Номер смены  <br>
    Shift       - Структура смены  <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    Shift       - Структура смены  <br>
#end
// Получить запись (структуру) i-й смены
Function GetShiftByNumber(cGrafikNRec: Comp;       // NRec графика
                          dDate1     : Date;       // Дата
                          ShiftNumber: Word;       // Номер смены
                      var Shift      : type$SpWork // Структура смены
                         ): Boolean;


//----- Функции работы с наложением графиков

#doc
Добавить пересечение графиков<br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
  <b>Параметры:</b><br>
    cGrafikMain - Основной график  <br>
    cGrafikFrom - Накладываемый график <br>
  <b>Результат:</b><br>
    True, если все OK <br>
#end
// Добавить пересечение графиков
// Если на момент наложения графиков загруженные интервалы графиков
// не совпадали, то функция вначале выполнит загрузку нужных интервалов,
// а затем выполнит наложение графиков
Function AddGrafikSuperPos(cGrafikMain: Comp; // Основной график
                           cGrafikFrom: Comp  // Накладываемый график (если 0 - добавить пересечение графика cGrafikMain
                                              // c плановым действительным фондом времени его владельца)
                          ): Boolean;

#doc
Восстановить исходные данные (после наложения) из эталонной таблицы <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
  <b>Результат:</b><br>
    True, если все OK <br>
#end
// Восстановить исходные данные (после наложения) из таблицы эталонной
// информации о графике
Function RestoreGrafik(cGrafikNRec: Comp): Boolean;


//----- Функции для работы с объектами, использующими графики

#doc
Получить вдадельца графика <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    wOwner      - КАУ владельца  <br>
    cOwner      - NREC владельца  <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    wOwner      - КАУ владельца  <br>
    cOwner      - NREC владельца  <br>
#end
// Получить вдадельца графика
Function GetOwner(cGrafikNRec: Comp; var wOwner: Word; var cOwner: Comp): Boolean;

#doc
Установить вдадельца графика <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    wOwner      - КАУ владельца  <br>
    cOwner      - NREC владельца  <br>
  <b>Результат:</b><br>
    True, если все OK <br>
#end
// Установить вдадельца графика
Function SetOwner(cGrafikNRec: Comp; wOwner: Word; cOwner: Comp): Boolean;

#doc
Пометить интервал как занятый (используемый) <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Пометить интервал как занятый (используемый)
Function SetDaysUsed(cGrafikNRec: Comp;  // Grafik.NRec
                     cObj       : Comp;  // Новый тип объекта, использующего график (0 - освободить интервал)
                     cObjOld    : Comp;  // Старый тип объекта, использующий график (0 - свободные; (-1) - все)
                     cObjKind   : Comp;  // Новый вид объекта, использующего график (0 - освободить интервал)
                     cObjKindOld: Comp;  // Старый вид объекта, использующий график (0 - свободные; (-1) - все)
                     dBegin     : Date;  // Дата начала использования графика
                     dEnd       : Date   // Дата окончания использования графика
                    ): Boolean;

#doc
Пометить интервал как занятый (используемый) с учетом времени <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Пометить интервал как занятый (используемый) с учетом времени
Function SetDateTimeUsed(cGrafikNRec: Comp;       // Grafik.NRec
                         cObj       : Comp;       // Новый тип объекта, использующего график (0 - освободить интервал)
                         cObjOld    : Comp;       // Старый тип объекта, использующий график (0 - свободные; (-1) - все)
                         cObjKind   : Comp;       // Новый вид объекта, использующего график (0 - освободить интервал)
                         cObjKindOld: Comp;       // Старый вид объекта, использующий график (0 - свободные; (-1) - все)
                         dtBegin    : _DateTime;  // Дата и время начала использования графика
                         dtEnd      : _DateTime   // Дата и время окончания использования графика
                        ): Boolean;

#doc
Пометить интервал как используемый объектом (свободный) <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Пометить интервал как используемый объектом (свободный)
Function SetIntervalUsed(cGrafikNRec   : Comp;      // Grafik.NRec
                         cObj          : Comp;      // Новый тип объекта, использующего график (0 - освободить интервал)
                         cObjOld       : Comp;      // Старый тип объекта, использующий график (0 - свободные; (-1) - все)
                         cObjKind      : Comp;      // Новый вид объекта, использующего график (0 - освободить интервал)
                         cObjKindOld   : Comp;      // Старый вид объекта, использующий график (0 - свободные; (-1) - все)
                         dtBegin       : _DateTime; // Дата и время начала использования графика
                         cWorkTime     : Comp;      // Суммарное требуемое рабочее время в сотых долях секунды
                                                    // (> 0 - вперед; < 0 - назад)
                         ShiftNum      : Word;      // Номер смены, в которой искать интервалы (0 - во всех)
                         wMode         : Word;      // Флаг:  Биты: 1:   0  - любые интервалы;
                                                    //                   1  - непрерывные интервалы;
                                                    //              3,2: 00 - любые интервалы;
                                                    //                   01 - в пределах смены;
                                                    //                   10 - в пределах дня
                     var stLastInterval: TInterval  // Последний помеченный интервал
                        ): Boolean;

#doc
Получить суммарное рабочее время, занятое объектом, за день (смену) <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Получить суммарное рабочее время, занятое объектом, за день (смену)
Function GetWorkTimeForObject(cGrafikNRec: Comp;   // NRec графика
                              cObj       : Comp;   // Тип объекта, использующего график (0 - свободные интервалы;
                                                   // (-1) - все типы интервалов)
                              cObjKind   : Comp;   // Вид объекта, использующего график (0 - свободные интервалы;
                                                   // (-1) - все виды интервалов)
                              dDate1     : Date;   // Дата
                              ShiftNum   : Word;   // Номер смены (если 0 - для всего дня)
                          var cWorkTime  : Comp    // Cуммарное рабочее время за день (смену) в сотых долях секунды
                             ): Boolean;

#doc
Получить первый интервал <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Получить первый интервал
Function GetFirstInterval(cGrafikNRec: Comp;       // NRec графика
                          cObj       : Comp;       // Тип объекта, использующего график (0 - свободные интервалы;
                                                   // (-1) - все типы интервалов)
                          cObjKind   : Comp;       // Вид объекта, использующего график (0 - свободные интервалы;
                                                   // (-1) - все виды интервалов)
                          dtBegin    : _DateTime;  // Дата и время начала
                          dtEnd      : _DateTime;  // Дата и время окончания
                          ShiftNum   : Word;       // Номер смены, в которой искать интервалы (0 - во всех)
                      var stInterval : TInterval   // Интервал
                         ): Longint;

#doc
Получить следующий интервал <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Получить следующий интервал
Function GetNextInterval(cGrafikNRec: Comp;       // NRec графика
                         cObj       : Comp;       // Тип объекта, использующего график (0 - свободные интервалы;
                                                  // (-1) - все типы интервалов)
                         cObjKind   : Comp;       // Вид объекта, использующего график (0 - свободные интервалы;
                                                  // (-1) - все виды интервалов)
                         dtBegin    : _DateTime;  // Дата и время начала
                         dtEnd      : _DateTime;  // Дата и время окончания
                         ShiftNum   : Word;       // Номер смены, в которой искать интервалы (0 - во всех)
                     var stInterval : TInterval   // Интервал
                        ): Longint;

#doc
Получить предыдущий интервал <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Получить предыдующий интервал
Function GetPrevInterval(cGrafikNRec: Comp;       // NRec графика
                         cObj       : Comp;       // Тип объекта, использующего график (0 - свободные интервалы;
                                                  // (-1) - все типы интервалов)
                         cObjKind   : Comp;       // Вид объекта, использующего график (0 - свободные интервалы;
                                                  // (-1) - все виды интервалов)
                         dtBegin    : _DateTime;  // Дата и время начала
                         dtEnd      : _DateTime;  // Дата и время окончания
                         ShiftNum   : Word;       // Номер смены, в которой искать интервалы (0 - во всех)
                     var stInterval : TInterval   // Интервал
                        ): Longint;

#doc
Получить последующий интервал <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Получить последний интервал
Function GetLastInterval(cGrafikNRec: Comp;       // NRec графика
                         cObj       : Comp;       // Тип объекта, использующего график (0 - свободные интервалы;
                                                  // (-1) - все типы интервалов)
                         cObjKind   : Comp;       // Вид объекта, использующего график (0 - свободные интервалы;
                                                  // (-1) - все виды интервалов)
                         dtBegin    : _DateTime;  // Дата и время начала
                         dtEnd      : _DateTime;  // Дата и время окончания
                         ShiftNum   : Word;       // Номер смены, в которой искать интервалы (0 - во всех)
                     var stInterval : TInterval   // Интервал
                        ): Longint;

#doc
Получить первый интервал непрерывного отрезка рабочего времени <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Получить первый интервал непрерывного отрезка рабочего времени
Function GetContinuousInterval(cGrafikNRec: Comp;       // NRec графика
                               cObj       : Comp;       // Тип объекта, использующего график (0 - свободные интервалы;
                                                        // (-1) - все типы интервалов)
                               cObjKind   : Comp;       // Вид объекта, использующего график (0 - свободные интервалы;
                                                        // (-1) - все виды интервалов)
                               dtBegin    : _DateTime;  // Дата и время начала
                               cWorkTime  : Comp;       // Суммарное требуемое рабочее время в сотых долях секунды
                                                        // (> 0 - вперед; < 0 - назад)
                               ShiftNum   : Word;       // Номер смены, в которой искать интервалы (0 - во всех)
                               wMode      : Word;       // Флаг:  Биты: 2,1: 00 - любые интервалы;
                                                        //                   01 - в пределах смены;
                                                        //                   10 - в пределах дня
                           var stInterval : TInterval   // Первый интервал
                              ): boolean;

//----- Другие функции

#doc
Поиск Grafik.NRec по КАУ </brief> <br>
  <b>Параметры:</b><br>
    wKauCode    - КАУ   <br>
    cValKau     - Значение аналитики  <br>
    cGrafikNRec - NRec графика  <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    cGrafikNRec - NRec графика  <br>
#end
// Поиск Grafik.NRec по КАУ
Function GetGrafikNRecByKau(wKauCode   : Word;           // КАУ
                            cValKau    : Comp;           // Значение аналитики
                        var cGrafikNRec: Comp): Boolean; // Grafik.NRec


#doc
Вывести отладочное окно <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
#end
// Вывести отладочное окно
Function ShowTestWindow(cGrafikNRec: Comp;  // Grafik.NRec
                        cObj       : Comp;  // Объект, использующий график (0 - свободные; (-1) - все)
                        dBegin     : Date;  // Дата начала использования графика
                        dEnd       : Date   // Дата окончания использования графика
                        ): Boolean;

#doc
Получить вдадельца графика <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    cVarPlan    - Вариант планирования  <br>
    wOwner      - КАУ владельца  <br>
    cOwner      - NREC владельца  <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    wOwner      - КАУ владельца  <br>
    cOwner      - NREC владельца  <br>
#end
// Получить вдадельца графика
Function GetOwnerExt(cGrafikNRec: Comp; var cVarPlan: comp; var wOwner: Word; var cOwner: Comp): Boolean;

#doc
Установить вдадельца графика <br>
<b>Внимание!</b> Функция предназначена только для внутреннего использования </brief> <br>
  <b>Параметры:</b><br>
    cGrafikNRec - NRec графика  <br>
    cVarPlan    - Вариант планирования  <br>
    wOwner      - КАУ владельца  <br>
    cOwner      - NREC владельца  <br>
  <b>Результат:</b><br>
    True, если все OK <br>
#end
// Установить вдадельца графика
Function SetOwnerExt(cGrafikNRec: Comp; cVarPlan: comp; wOwner: Word; cOwner: Comp): Boolean;

#doc
Поиск Grafik.NRec  </brief> <br>
  <b>Параметры:</b><br>
    cVarPlan    - Вариант планирования  <br>
    wKauCode    - КАУ   <br>
    cValKau     - Значение аналитики  <br>
    cGrafikNRec - NRec графика  <br>
  <b>Результат:</b><br>
    True, если все OK; <br>
    cGrafikNRec - NRec графика  <br>
#end
// Поиск Grafik.NRec
Function GetGrafikNRecByKauExt(cVarPlan   : comp;           // Варианты планирования
                               wKauCode   : Word;           // КАУ
                               cValKau    : Comp;           // Значение аналитики
                           var cGrafikNRec: Comp): Boolean; // Grafik.NRec


end;
ObjInterface oGrafics2(oGrafics);

Function LoadDayInfoDSQL(
                          cGrafikNRec  : comp;   // NRec Графика
                          dBegin       : Date;   // Начальная дата интервала графика
                          dEnd         : Date;   // Конечная дата интервала графика
                          ToClean      : Boolean;// Удалить закаченные ранее данные?
                      var dBeginFact   : Date;   // Фактическая начальная дата интервала графика
                      var dEndFact     : Date;   // Фактическая конечная дата интервала графика
                          cWrkFnd      : Comp;   // ccылка на ПЦ
                          wStatusMask  : Word;   // маска статусов, если 0 - то со всеми статусами
                          wStateMask   : Word;   //маска состояний, 0 - все сосотояния
                          wFlag : Word):boolean;//0 - учитывать резерв, иначе нет

Procedure GetShiftIntervalsDSQL(cWrk, cStart, cEnd : comp; stat, ShiftN : word; var mt : TPtr);

procedure CreateTmpTables(indexType : word);

// cObject     - ссылка на производственный центр
// dtStart     - минимальная датавремя начала (ну или максимальная окончания,
//               в зависимости от направления расчета)
// dtStartFact - фактическая дата начала
// dtStartEnd  - Фактическмая дата окончания
// wlag        - флаг: 1 бит = 1 получить непрырывный интервал, иначе можно прерывный
//                     2 бит = 1 удалять из временной таблички свободных интервалов рассчитанное время
//                     3 бит = 1 создавать записи в SpTrPotr, иначе нет
//                     4 бит = 1 вперед от даты, иначе все равно вперед
//                     5 бит = 1 как можно раньше, иначе все равно как можно раньше
// ShiftNumber - этот параметр игнорируется, можно передать comp(62291);
Function GetIntervalDSQL(
                            cWrkFnd         : Comp;
                            wtoObject       : Word;
                            TypeReserv      : Word;
                            cObject         : Comp;
                            dtStart         : _DateTime;
                            Duration        : comp;
                            var dtStartFact : _DateTime;
                            var dtEndFact   : _DateTime;
                            wFlag           : Word;
                            wParam          : word;
                            ShiftNumber     : Word
                          ) : boolean;
//подготовить запросы
function PrepareQueue : boolean;

Procedure FreeDateTimeDSQL(
                          StartDateTime : _DateTime;
                          EndDateTime   : _DateTime;
                          wtoObject     : Word;
                          TypeReserv    : Word;
                          cObject       : Comp;
                          cWrkFnd       : Comp;
                          ShiftNumber   : Word;
                          wFlag         : word
                          );

Procedure DeleteUsedIntervals(cWrkFnd : comp);
Procedure tmpTableToMemory(cGrafic, cWrkFnd, cStart, cEnd, cObject: comp;
                           typeReserv, wtoObject, wTypeInterval, shiftNumber : word; toClean : boolean);
Procedure ShowTestWindowDSQL;

//пометить интервал как занятый
Procedure SetDateTimeUsedDsql(
                                StartDateTime : _DateTime; //датавремя начала
                                EndDateTime   : _DateTime; //датавремя окончания
                                wtoObject     : Word;      //тип объекта
                                TypeReserv    : Word;      //тип резерва
                                cObject       : Comp;      //ссылка на объект
                                cWrkFnd       : Comp;      //ссылка на ПЦ
                                ShiftNumber   : word;      //маска смен, котопрые помечать, как занятые
                                wFlag         : word       //2 бит = 1 - удалять из таблички свободных интервалов
);                                                         //3 бит = 1 - добавлять в табличку занятых интервалов

//Определить, существуют ли свободные интервалы для данного ПЦ в заданом промежутке времен
Function IsExistFreeTimeDsql(cWrkFnd, cStart, cEnd : comp):boolean;

End;
ObjInterface oGrafics3(oGrafics2);
  Function GetEndWorkDt(cGraf : comp; dDate: date; var EndDt:_DateTime):boolean;
  Function GetBegWorkDt(cGraf : comp; dDate: date; var BegDt:_DateTime):boolean;
End;
VipInterface Grafics implements oGrafics3 Licensed(FREE);
#endif
