//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Версия     : 8.10
// Назначение : API создания настроек
//------------------------------------------------------------------------------

#ifndef __CreateTune__vih__
#define __CreateTune__vih__

#component "C_Tune"

#doc
Функции создания настроек.
</brief>

<p> Начиная с версии 8.10 API создания настроек позволяет делать неограниченное
количество интерфейсов создания настроек. Используется механизм точек расширения.<br>

<p> Настройки реализованы в виде иерархического справочника, с возможностью
динамического пополнения при выпуске релизов и патчей.<br>
<p> Каждая настройка идентифицируется уникальным 60 символьным кодом. Регистр
не имеет значения. Код настройки указывается по правилу aaaa.bb.ccc, где
aaaa и bb - коды вышестоящих разделов (не является обязательным условием и не
определяет положение в иерархии - для этого служит код родительской настройки
при создании).<br>

<p> Настройки могут быть системные и пользовательские. Системная означает, что
значение настройки единое для Галактики. Настройка пользователя - значение
настройки индивидуально для каждого пользователя. Доступны константы
  <ul>
    <li>     ttSYSTUNE  = 0;  // Системная
    <li>    ttUSERTUNE  = 2;  // Пользователя
    <li> ttSYSUSERTUNE  = 1;  // Системная и Пользователя, только для разделов содержащих обе
  </ul>


<p>  Значения настроек могут иметь следующие типы:
  <ul>
     <li> ftBoolean - двоичная (Да/Нет);
     <li> ftChar    - символ
     <li> ftWord    - целое число
     <li> ftLongInt - длинное целое
     <li> ftDate    - дата
     <li> ftTime    - время
     <li> ftDouble  - число с плавающей точкой
     <li> ftString  - строка
     <li> ftComp    - ссылка. Необходим интерфейс выбора
     <li> ftList   -  список. Возвращает тип Word.
     <li> ftCompString - Есть интерфейс выбора(comp) и ручной ввод в строку
  </ul>

<p>  Каждая настройка может иметь пре и пост-методы обработки. Т.е. методы которые
вызываются до и после изменения значения настройки. Разработчик может определить
права доступа к настройке. Сделать ее не редактируемой или невидимой.
Доступны константы:
  <ul>
    <li>     ttMODIF     = 0;  // Модифицировать
    <li>     ttREAD      = 1;  // Только Читать
    <li>     ttInVISIBLE = 2;  // Нет доступа (не отображается)
    <li> ttREADInVISIBLE = 3;  // Только читать и нет доступа
  </ul>

  (см. <link ObjInterface C_TUNE::ObjStartCreateTune>C_TUNE::ObjStartCreateTune</link>). <br>
  (см. <link ExtensionPoint epCreateTuneComponent>epCreateTuneComponent</link>).
#end

ObjInterface ObjCreateTune;
//------------------------------------------------------------------------------
  #doc
   Функция создания раздела настроек. <br>
  </brief>
  Параметры:
  <ul>
    <li> SysType:word      - тип настройки; Системная/Пользователя
    <li> Code:string       - код настройки; Макс. 60 символов и д.б. уникальным
    <li> CodeParent:string - код раздела;
    <li> Name:string       - наименование;
    <li> Help:string       - Help-константа;
  </ul>
  #end
  Function AddPart ( SysType: word;  Code: string; CodeParent: string; Name: string; Help: string ): word;

  #doc
  Следующие 3 функции являются клоном AddPart с явно указанным типом.<br>
  </brief>
  All = Sys+User, имя родителя должно быть установлено SetParent.
  #end
  Function AddPartA(Code: string; Name: string; Help: string ): word;

  #doc
  Sys,  имя родителя должно быть установлено SetParent
  #end
  Function AddPartS(Code: string; Name: string; Help: string ): word;

  #doc
  User, имя родителя должно быть установлено SetParent
  #end
  Function AddPartU(Code: string; Name: string; Help: string ): word;

  //----------------------------------------------------------------------------
  #doc
  Функция создания настройки <br>
  </brief>
  Параметры:
  <ul>
    <li> SysType:word      - тип настройки; Системная/Пользователя
    <li> Code:string       - код настройки;
    <li> CodeParent:string - код раздела родителя;
    <li> Name:string       - наименование;
    <li> ValType:word      - тип значения;
    <li> DefaultValue:string - значение по умолчанию, строка;
    <li> Mask:string[20]     - маска отображения/редактирования;
    <li> Help:string         - Help-константа;
  </ul>

  <p>  Маска отображения (она же действует как маска ограничений). Имеет смысл для настроек типа
  Word,LongInt,Double,String.  Для Word и LongInt маска указывается в виде '9999' (максимальное кол. значащих цифр).
  Для Double - это формат преобразования вещественных чисел в строку, например, '3667.89'.
  Для String - это максимальное кол. символов. <br>
  <p> После создания настойки в следующем релизе допустимо корректировать любые ее параметры, кроме
  типа значения (ValType). Если поменять типа значения, то значение настройки установится в значение
  по умолчанию. <br>
  #end
  Function AddTune ( SysType: word;
                     Code: string; CodeParent: string;
                     Name: string; ValType: word;
                     DefaultValue: string; Mask: string[20]; Help: string  ): word;
//----------------------------------------------------------------------------
  #doc
  Следующие 2 функции являются клоном AddTune с явно указанным типом
  sys, имя родителя должно быть установлено SetParent
  #end
  Function AddTuneS(Code: string;
                    Name: string; ValType: word;
                    DefaultValue: string; Mask: string[20]; Help: string ): word;
  #doc
  user,имя родителя должно быть установлено SetParent
  #end
  Function AddTuneU(Code: string;
                    Name: string; ValType: word;
                    DefaultValue: string; Mask: string[20]; Help: string ): word;
//----------------------------------------------------------------------------

  #doc
  Функция создания списка для настройки <br>
  </brief>
  Параметры:
  <ul>
    <li> Code:string  - код настройки;
    <li> ValueNo:word - номер в списке; Допустимо нумеровать начиная не с нуля 2,4,5,8.
    <li> Value:string - наименование;
  </ul>
  #end
  Function AddListTune (Code: string; ValueNo: word; Value: string): word;

  #doc
  аналогично AddListTune, только для последней созданной настройки
  #end
  Function AddList (ValueNo: word; Value: string): word;

  #doc
  Функция указания интерфейса для настройки <br>
  </brief>
  Параметры:
  <ul>
    <li> Code:string  - код настройки;
    <li> Intr:string  - наименование интерфейса;
  </ul>
  #end
  Function AddIntrTune (Code: string; Intr: string): word;

  #doc
  Аналогично AddIntrTune для последней настройки.
  #end
  Function AddIntr (Intr: string): word;

//----------------------------------------------------------------------------
  #doc
  Функция установки доступа к настройке <br>
  </brief>
  Параметры:
  <ul>
    <li> Code:string - код настройки;
    <li> Rgh : word  - уровень доступа;
  </ul>
  Доступны константы:
  <ul>
    <li>     ttMODIF     = 0;  Модифицировать
    <li>     ttREAD      = 1;  Только Читать
    <li>     ttInVISIBLE = 2;  Нет доступа (не отображается)
  </ul>
  <p> По умолчанию все настройки имеют доступ ttMODIF. Если в code указать раздел, то
  функция отработает для всех настроек раздела. <br>
  #end
  Function SetRghTune  (Code: string; Rgh: word): word;

  #doc
  Аналогично SetRghTune для последней настройки.
  #end
  Function SetRgh (Rgh: word): word;

  #doc
  Сделать последнюю настройку невидимой.
  #end
  Function MakeInvisible: word;

//----------------------------------------------------------------------------
  #doc
  Вызвать отложенный пост-метод для настройки
  #end
  Procedure CallPostMetod (Code: string);

  #doc
  Установить следующий номер настройки
  #end
  Procedure SetNextNumberTune (Num: word);

  #doc
  Установить родителя
  #end
  Procedure SetParent(CodeParent: string);

  #doc
  Установить родителя и номер настройки
  #end
  Procedure SetParentAndNumber(CodeParent: string; Num: word);

  #doc
  Удалить настройку
  #end
  Procedure DeleteTune (Code: string);

  #doc
  Установить имя компонента
  #end
  Procedure SetComponent(CompName: string);

//----------------------------------------------------------------------------
  #doc
  Установить Корпо-тип настройки
  #end
  Function  SetCorpoType  (Code: string; Tip: word): word;

  #doc
  Установить Корпо-тип настройки раздела и подчиненных
  #end
  Procedure SetCorpoTypeRazdel (Code: string; Tip: word);

//----------------------------------------------------------------------------
  #doc
  Получить номер настройки
  #end
  Function  GetNumberTune (Code: string) : word;

  #doc
  Установить номер настройки
  #end
  Procedure SetNumberTune (Code: string; Num: word);

  #doc
  Пересчитать номера в разделе
  #end
  Procedure ReNumberPart  (Code: string; isSubFolder: boolean);

  #doc
  Получить Максимальный номер в реестре настроек
  #end
  Function  GetMaxNumberTune: word;
end;

ObjInterface ObjCreateTuneEx (ObjCreateTune);
  #doc
  Функция создания настройки для запуска интерфейса после установки обновления. Задается версия интерфейса.
  #end
  Procedure AddBatchInterfaceVer (InterfaceName : string; Description: string; Prior : word; Version: word);
  #doc
  Функция создания настройки для запуска интерфейса после установки обновления.
  #end
  Procedure AddBatchInterface (InterfaceName : string; Description: string);
  #doc
  Переименовать настройку.
  #end
  Procedure ReNameTune (Code : string; NewName: string);
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
VipInterface CreateTune implements ObjCreateTuneEx Licensed(Free);

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#doc
Обработка даты модификации реестра настроек.
</brief>
  (см. <link ExtensionPoint epDateModifyTune> epDateModifyTune</link>).
#end
ObjInterface ObjStartCreateTune;
  #doc
  Установка даты модификации реестра настроек
  #end
  Procedure SetLastDateModTune (_Day, _Month, _Year : word);
end;

#doc
Обработка даты модификации реестра настроек для Компонент.
</brief>
  (см. <link ExtensionPoint epDateModifyTune> epDateModifyTune</link>).
#end
ObjInterface ObjStartCreateTuneEx (ObjStartCreateTune);
  #doc
  Установка даты модификации реестра настроек отдельно для каждого Компонента.
  #end
  Procedure SetLastDateModTuneComp (_CompName : string; _Day, _Month, _Year : word);
end;

#doc
Запуск модификации реестра настроек.
</brief>
  (см. <link ExtensionPoint epDateModifyTune> epDateModifyTune</link>).
#end
ObjInterface ObjStartCreateTuneEx2 (ObjStartCreateTuneEx);
  function RunUpdates(lRunFlags : longint) : longint;
  function CheckUpdates(lCheckFlags : longint) : longint;
end;
//------------------------------------------------------------------------------
VipInterface StartCreateTune implements ObjStartCreateTuneEx2 Licensed(Free);

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#doc
Точка расширения для создания настроек в компонентах.
</brief>

 <p> Точка вызывается из интерфейса CreateTune.
 C помощь вызова методов ObjCreateTune (вызовы TR.xxx) необходимо создать
 настройки компоненты. <br>

 <p> Обработчик точки расширения всегда должен возвращать True.
 Порядок выделения приоритета для точки расширения:
  <ul>
  <li> Компоненты C_ - от  11 до  40
  <li> Компоненты L_ - от  41 до  80
  <li> Компоненты F_ - от  81 до 120
  <li> Компоненты M_ - от 121 до 160
  <li> Компоненты Z_ - от 161 до 200
  <li> Для прочих разработок (в том числе для партнеров - разработчиков)  - от 201 до 240
  </ul>
  Диапазоны зарезервированы для системы, не использовать !!!<br>
                - от   0 до  10 <br>
                - от 241 до 255 <br>
#end
ExtensionPoint epCreateTuneComponent (TR : ObjCreateTuneEx);

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#doc
Установить дату модификации реестра настроек.
</brief>
 <p> Точка вызывается из интерфейса StartCrTune.
 C помощью TS.SetLastDateModTune(...) в обработчике точки расширения
 необходимо установить дату модификации реестра настроек.<br>
 <p> Если указанная дата будет больше, чем дата в БД, то автоматически
 запустится интерфейс модификации реестра. Обработчик точки расширения всегда должен возвращать
 True. <br>
#end
ExtensionPoint epDateModifyTune (TS : ObjStartCreateTune);

//------------------------------------------------------------------------------
#doc
Установить дату модификации реестра настроек для компоненты.
</brief>
 <p> Точка вызывается из интерфейса StartCrTune.
 C помощью TS.SetLastDateModTuneComp(...) в обработчике точки расширения
 необходимо установить дату модификации реестра настроек.<br>
 <p> Если указанная дата будет больше, чем дата в БД, то автоматически
 запустится интерфейс модификации реестра. Обработчик точки расширения всегда должен возвращать
 True. <br>
#end
ExtensionPoint epDateModifyTuneEx (TS : ObjStartCreateTuneEx);

//------------------------------------------------------------------------------

// <H5>Описание</H5>
// <PRE class=example>
// </PRE>

#end // __CreateTune__vih__
