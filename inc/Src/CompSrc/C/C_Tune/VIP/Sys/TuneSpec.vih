//------------------------------------------------------------------------------
//                                                        (c) корпорация Галактика
// Галактика 5.85 - настройка
// Назначение : пост-обработка настроек
//------------------------------------------------------------------------------


#ifndef __TuneSpec_vih__
#define __TuneSpec_vih__

#component "C_TUNE"

ObjInterface ObjPostTuneComponent; forward;
ObjInterface TuneFuncObjExt1; forward;

#doc
Методы для пост-обработки настроек.
</brief>
<p> Пост-методы обработки настроек можно делать в неограниченном количестве интерфейсов.
Используется механизм точек расширения. <br>

(см. <link ExtensionPoint epPostTuneComponent>epPostTuneComponent</link>).
#end

ObjInterface TuneFuncObj;
  #doc
  выдать сообщение
  #end
  Function TuneMessage     (Msg: string; Mode: word): word;

  #doc
  Вызвать пост-метод.
  #end
  Function PostUpdateSpec  (TuneCode: string; TuneObj: LongInt; TuneUser: comp): boolean;

  #doc
  Сделать настройку редактируемой
  #end
  Function TuneEditOn      (TuneCode: string;  TuneObj: LongInt; cUser: comp): word;

  #doc
  сделать настройку НЕредактируемой
  #end
  Function TuneEditOff     (TuneCode: string;  TuneObj: LongInt; cUser: comp): word;

  #doc
  если true, вызывается TuneEditOn, иначе TuneEditOff
  #end
  Function TuneEditSetup   (TuneCode: string;  TuneObj: LongInt; cUser: comp; boOn: boolean): word;

  #doc
  Почистить стринг значение настройки
  #end
  Function EraseTuneVal    (TuneCode: string; TuneObj: LongInt; cUser: comp; Val: string): word;

  #doc
  Восстановить почищенное стринг значение настройки
  #end
  Function RestoreTuneVal  (TuneCode: string; TuneObj: LongInt; cUser: comp): word;

  #doc
  RestoreTuneVal + TuneEditOn
  #end
  Function TuneDisplayOn   (TuneCode: string; TuneObj: LongInt; cUser: comp): word;

  #doc
  EraseTuneVal + TuneEditOff
  #end
  Function TuneDisplayOff  (TuneCode: string; TuneObj: LongInt; cUser: comp): word;

  #doc
  если true, TuneDisplayOn, иначе TuneDisplayOff
  #end
  Function TuneDisplaySetup(TuneCode: string; TuneObj: LongInt; cUser: comp; bool: boolean): word;

  #doc
  Модификация строкового значения настройки
  #end
  Function UpdTuneStr(TuneCode: string; TuneObj: LongInt; TuneUser: comp; s: string): word;


//------------------------------------------------------------------------------
  #doc
  Установить в переменной Val бит номер Num в Bit. Num 0-15
  #end
  Function SetBit (var Val: word; Num: word; Bit: boolean) : word;

  #doc
  Получить в переменной Val значение бит номер Num. Num 0-15
  #end
  Function GetBit (Val: word; Num: word) : boolean;

  #doc
  Изменен ли Корпо-тип пользователем
  #end
  Function isIzmCorpoType (cTune: comp) : boolean;

  #doc
  Изменен ли Системный-тип пользователем
  #end
  Function isIzmSysType   (cTune: comp) : boolean;

  #doc
  Установить изменение Корпо-типа
  #end
  Function SetIzmCorpoType (cTune: comp; Izm: boolean) : boolean;

  #doc
  Установить Изменение Системного-типа
  #end
  Function SetIzmSysType   (cTune: comp; Izm: boolean) : boolean;

end;

ObjInterface TuneFuncObjExt1;
  #doc
  Добавить ссылку на объектный интерфейс типа <link ObjPostTuneComponent>ObjPostTuneComponent</link>
  #end
  // метод будет использоваться, чтобы добавлять имена интерфейсов постобработки в коллекцию
  // и инициализировать их будем в момент
  // Создания или обновление реестра настроек или же в момент изменения значения настройки
  procedure AddVipNameObjPostTune(sNameInterface : string);
  // вызов обработчиков точек расширений PostTune
  // вызвращает результат выполнения обрабочиков PostTune.
  // данный метод можно использовать для проверки корректности написания обработчиков точки расширения PostTune
  // если bCheck передать true и sTuneCode не существующую настройку.
  // если какой-то из обработчиков написан не по правилам, то метод выдаст сообщение
   #doc
  Вызвать расширенный пост-метод.
  #end
  Function PostUpdateSpecEx(sTuneCode: string; lTuneObj: LongInt; cTuneUser: comp; bCheck : boolean = false): boolean;
  // режим работы post обработки
  property ModePostTune : word read write;
end;

ObjInterface TuneFuncObjProcessMessages;
  #doc
    Можно ли выводить сообщения
  #end
  property ShowMessage : boolean read write;
end;

//------------------------------------------------------------------------------
VipInterface TuneFunc implements TuneFuncObj, TuneFuncObjExt1, TuneFuncObjProcessMessages licensed(free);

//------------------------------------------------------------------------------
// Интерфейсы для обработки настроек
//------------------------------------------------------------------------------
#doc
Запись таблицы TuneVal.
#end
type TTuneVal = record as table TuneVal;

#doc
Методы для обработки настроек через вызов интерфейсов. <br>
</brief>
Методы обработки настроек можно делать в неограниченном количестве интерфейсов. <br>
Используется механизм точек расширения.

(см. <link ExtensionPoint epIntrTuneComponent>epIntrTuneComponent</link>).
#end

ObjInterface objTuneIntr;
  #doc
  Вызвать интерфейс (не использовать)
  #end
  Function  TuneIntr (const cTuneVal : comp; const Inter : string) :boolean;

  #doc
  Получить код по нреку
  #end
  Function  GetTuneCode (const cTune : comp) : string;

  #doc
  Обновить значение по переданному буферу
  #end
  Procedure UpdateTuneVal (TVal : TTuneVal);
end;

ObjInterface objTuneIntrEx1;
  #doc
  Вызвать интерфейс
  #end
  function TuneRunInterface(var buf : TTuneVal; const sInterfaceName : string; bCheck : boolean = false) :boolean;
end;

ObjInterface objTuneIntrEx2;
  #doc
    Возвращает по lObj кому принадлежит настройка Пользователю 0 или Группе 1
  #end
  function GetTypeObjUserOrGroup(lObj : longint) : word;
end;
//#region - Подключаемые модули копирования настроек

#doc
Параметры функции копирования настроек
#end
type TCopyTunePluginInfo = record
  TuneCode   : string;
  ResName    : string;
  cUserFrom  : comp;
  LoginFrom  : string;
  OfficeFrom : longint; // офисы источник
  cUserTo    : comp;    // нрек X$user приемник
  LoginTo    : string;
  OfficeTo   : longint; // офисы приемник
end;

ObjInterface ObjCopyTunePlugin; forward;

#doc
Сервисный объект функции копирования настроек.
Выполняет регистрацию подключаемых модулей копирования
и управляет самим процессом копирования
#end
ObjInterface ObjCopyTuneServer;
  #doc
  Инициализации подключаемых модулей и активация функции копирования
  #end
  function CopyTuneQueryPlugins(CopyInfo : TCopyTunePluginInfo): boolean;

  #doc
  Регистрация подключаемого модуля копирования
  #end
  procedure CopyTuneAddNewPlugin(CopyPlugin : ObjCopyTunePlugin);
end;

#doc
Точка расширения для регистрация подключаемых модулей копирования настроек
Обработчики должны создать экземпляр объекта ObjCopyTunePlugin
и зарегистрировать его в сервисе копирования через функцию CopyTuneAddNewPlugin
#end
ExtensionPoint epCopyTuneQueryPlugins(CopyServer : ObjCopyTuneServer);

#doc
Интерфейс подключаемого модуля функции копирования настроек
#end
ObjInterface ObjCopyTunePlugin;
  #doc
  Непосредственно функция копирования, которую должен реализовать прикладной подключаемый модуль
  #end
  function CopyTune(CopyServer : ObjCopyTuneServer; CopyInfo : TCopyTunePluginInfo): boolean;
end;

//#endregion

VipInterface iTuneInterface implements objTuneIntr, objTuneIntrEx1, objTuneIntrEx2, ObjCopyTuneServer Licensed(Free);



//------ для компонент---------------------------------------------------------
#doc
Вызовы интерфейсов обработки настроек в компонентах через точку расширения.<br>
</brief>
TuneIntrComponent - должна вызватся из обработчика epIntrTuneComponent.
#end

ObjInterface ObjIntrTuneComponent;
  #doc
  Возвращает False если обработка не производилась, иначе true
  #end
  Function TuneIntrComponent (TR : objTuneIntr; TVal : TTuneVal; Inter : string) : boolean;
end;

#doc
Пост-методы обработки настроек в компонентах через точку расширения.<br>
</brief>
PostUpdateComponent - должна вызватся из обработчика epPostTuneComponent.
#end

ObjInterface ObjPostTuneComponent;
  #doc
  Возвращает False если обработка не производилась, иначе true
  #end
  Function PostUpdateComponent (TR : TuneFuncObj; TuneCode : string; TuneObj: LongInt; TuneUser : comp) : boolean;
end;
//------------------------------------------------------------------------------
// Точки расширения для пост-методов и вызова интерфейсов в компонентах.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
#doc
Точка расширения для пост-методов.<br>
</brief>
epPostTuneComponent - вызвается интерфейсом TuneFunc.<br>
Обработчик точки расширения должен вернуть False, если обработка проводилась. Иначе - True.<br>
#end
ExtensionPoint epPostTuneComponent (TR : TuneFuncObj; TuneCode : string; TuneObj: LongInt; TuneUser : comp);

//------------------------------------------------------------------------------
#doc
Точка расширения для интерфесов в настройках.<br>
</brief>
epIntrTuneComponent - вызывается интерфейсом UserReestrTune при обработке настроек с вызовом интерфейсов.<br>
Обработчик точки расширения должен вернуть False, если обработка проводилась. Иначе - True.<br>
#end
ExtensionPoint epIntrTuneComponent (TR : objTuneIntr; TVal : TTuneVal; Inter : string);

//------------------------------------------------------------------------------
#doc
Точка расширения для получения интерфейсов пост-методов.<br>
</brief>
epPostTuneComponentGetVipName - вызывается для получения названий vip интерфейсов.<br>
Возвращает всегда True.<br>
#end

ExtensionPoint epPostTuneComponentGetVipName(objTuneFunc : TuneFuncObjExt1);

//------------------------------------------------------------------------------
#declare HandlerPointExtPostTuneGetVipName(sComponentName,wPrior)
// Обработчик точки расширения epPostTuneComponentGetVipName
// всегда возвращает TRUE.
handler with replace PostTune#sComponentName on extensionPoint epPostTuneComponentGetVipName(objTuneFunc : TuneFuncObjExt1) [#wPrior]
action
{
   objTuneFunc.AddVipNameObjPostTune('#sComponentName::PostTune_#sComponentName');
   result := true;
}
#end

#declare HandlerPointExtPostTuneGetVipName2(sComponentName,sIntName,wPrior)
// Обработчик точки расширения epPostTuneComponentGetVipName
// всегда возвращает TRUE.
handler with replace PostTune#sComponentName on extensionPoint epPostTuneComponentGetVipName(objTuneFunc : TuneFuncObjExt1) [#wPrior]
action
{
   objTuneFunc.AddVipNameObjPostTune('#sComponentName::#sIntName');
   result := true;
}
#end

#endif
