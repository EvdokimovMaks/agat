/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,2002 корпорация ГАЛАКТИКА                    ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Модуль        : Обмен бизнес-документами                                  ║
 ║ Версия        : 8.0                                                       ║
 ║ Назначение    :                                                           ║
 ║                                                                           ║
 ║ Ответственный : Ярошук Дмитрий Леонидович                                 ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#ifndef __IJobStruct__
#define __IJobStruct__

#component "C_EXPIMP"

table struct tIENastrNode
(
  nRec        : comp,
  cOwner      : comp,
  Number      : word,
  Code        : word,
  Name        : string[20],
  Title       : string[40],
  wNodeType   : word,
  sSynonym    : string[60],
  XMLNodeName : string[40]
)
with index
(
  tIENastrNode01 = nRec(Unique, Surrogate, Journal),
  tIENastrNode02 = Number(unique),
  tIENastrNode03 = Code,
  tIENastrNode04 = cOwner + Number
);

table struct tIENastrRelate   // таблица связей между узлами
(
  nRec      : comp,
  cLNode    : comp,
  sRNodeSyn : string,

  Name      : string[20], // наименование связи
  Title     : string[40], // описание связи
  Formula   : string[250],// формула
  LAttrName : string[20], // имя поля в главной таблице
  RAttrName : string[20]  // имя поля в подцепленной таблице
)
with index
(
  tIENastrRelate01 = nRec(Unique, Surrogate, Journal),
  tIENastrRelate02 = cLNode + sRNodeSyn,
  tIENastrRealte03 = sRNodeSyn + cLNode
);

table struct tIENastrAttr
(
  nRec         : comp,
  cNode        : comp,
  CODE         : word,       // "Код поля"
  NAME         : string[20], // "Наименование аттрибута"
  TITLE        : string[40], // "Заголовок поля"
  DATATYPE     : byte,       // "Тип поля"
  SIZE         : word,       // "Размер поля"
  DEC          : byte,       // "Кол. десятичных знаков после точки"
  _OFFSET      : word,       // "Смещение в записи"
  NUMBER       : word,       // "Номер поля в настройке"
  XMLATTRNAME  : string[40], // "Наименование аттрибута в XML-файле"
  FORMULA      : string[250] // "Формула"
)
with index
(
  tIENastrAttr01 = nRec(Unique, Surrogate, Journal),
  tIENastrAttr02 = cNode + NUMBER(unique)
);

ObjInterface IJobStruct;
  // Свойства
  property m_sDateFromat : string read write;

  property m_bufNodeList : type$tIENastrNode read;
  property m_bufRelateList : type$tIENastrRelate read;
  property m_bufAttrList : type$tIENastrAttr read;

//  property m_Node : word read;
//  property m_Relate : word read;
//  property m_Attr : word read;
 
//  index iByNode = m_Node(unique);
//  index iByAttr = m_Attr;
//  index iByRelate = m_Relate;

  // Методы
  function InsertNode(cOwnerNode : comp; buffer : type$IENastrNode; var cCurRec : comp) : boolean;
  function InsertRelate(cLeftNode : comp; buffer : type$IENastrRelate) : boolean;
  function InsertAttr(cOwnerNode : comp; buffer : type$IENastrAttr) : boolean;

  function GetFirst_NodeChild(cOwnerNode : comp) : boolean;
  function GetNext_NodeChild(cOwnerNode : comp) : boolean;
  procedure PushPos_Node;
  function PopPos_Node : integer;
  function IsExistRelate(cLeftNode : comp; sRightNodeSyn : string) : boolean;

  function GetFirst_NodeList : boolean;
  function GetNext_NodeList : boolean;
  function GetFirst_AttrList : boolean;
  function GetNext_AttrList : boolean;
  function GetFirst_RelateList : boolean;
  function GetNext_RelateList : boolean;
end;

VipInterface vJobStruct implements IJobStruct
#ifdef Atl51
licensed(exp_imp)
#endif
;
public:
 constructor Init;
 destructor Done;
end;

#end