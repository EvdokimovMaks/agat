/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,2002 корпорация ГАЛАКТИКА                    ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Модуль        : Обмен бизнес-документами                                  ║
 ║ Версия        : 8.0                                                       ║
 ║ Назначение    :                                                           ║
 ║                                                                           ║
 ║ Ответственный : Ярошук Дмитрий Леонидович                                 ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#ifndef __IDocStruct__
#define __IDocStruct__

#ifdef ComponentVersion
#component "C_EXPIMP"
#endif

table struct NodeList        // список узлов документа
(
  nRec         : comp,
  cOwner       : comp,       // Код узла-родителя
  Code         : word,
  Number       : longint,    // Номер узла(приоритет импорта)
  Name         : string[20], // Имя таблицы
  Title        : string[40], // Описание узла
  sSynonym     : string[60], // Синоним в логической таблице
  wNodeType    : word,       // Тип узла
  RecordSize   : word        // Полный размер записи
)
with index
(
  NodeByNRec     = NREC(Unique, Surrogate, Journal),
  NodeByParent   = cOwner,
  NodeByName     = Name,
  NodeByTitle    = Title,
  NodeBySynonym  = sSynonym
);

table struct RelateList   // таблица связей между узлами
(
  nRec      : comp,
  cLNode    : comp,       // nRec главной таблицы
  sRNodeSyn : string,       // nRec привязанной таблицы

  Name      : string[20], // наименование связи
  Title     : string[40], // описание связи
  Formula   : string[250],// формула
  LAttrName : string[20], // имя поля в главной таблице
  RAttrName : string[20]  // имя поля в подцепленной таблице
)
with index
(
  RelateByNRec = nRec(Unique, Surrogate, Journal),
  RelateByLNC = cLNode + sRNodeSyn,
  RealteByRNC = sRNodeSyn + cLNode
);

table struct AttrList    // список атрибутов узла
(
  nRec     : comp,
  cNode    : comp,       // nRec узла
  Code     : word,       // код поля из x$fields
  FileCode : word,       // код таблицы из x$fields
  Name     : string[20], // идентификатор поля из x$fields
  Title    : string[40], // заголовок поля из x$fields
  DataType : byte,       // тип поля из x$fields
  _Offset  : word,       // смещение в записи из x$fields
  Size     : word,       // размер поля из x$fields
  Dec      : byte,       // кол. десятичных знаков после точки из x$fields
  Attr     : word,       // атрибуты из x$fields
  Formula  : string      // Формула
)
with index
(
  AttrByNRec        = nRec(Unique, Surrogate, Journal),
  ATTRBYFILEBYCODE  = cNode + Code,
  ATTRBYFILEBYNAME  = cNode + Name,
  ATTRBYFILEBYTITLE = cNode + Title,
  ATTRBYNAME        = Name,
  ATTRBYTITLE       = Title,
  ATTRBYFILECODE    = FileCode
);

ObjInterface IDocStruct;
/////////////////////////////
// СВОЙСТВА
  property m_Direction : byte read write;      // 2 - структура для экспорта; 1 - для импорта
  property m_bufNodeList : type$NodeList read; // Буффер таблицы NodeList инициализируется функцией GetBufNodeList
  property m_bufRelateList : type$RelateList read; // Буффер таблицы связей
  property m_bufAttrList : type$AttrList read; // Буффер таблицы AttrList инициализируется функцией GetBufAttrList

//  property m_Node : word read;
//  property m_Relate : word read;
//  property m_Attr : word read;

/////////////////////////////
// СОБЫТИЯ
  event procedure cmDefault_wNodeList(cNode : comp);
  event procedure cmDefault_wRelateList(hMarker : longint; cLNode : comp);
  event procedure cmDefault_wAttrList(hMarker : longint; cCurNode : comp);

/////////////////////////////
// ОБЪЕКТНЫЕ ИНДЕКСЫ
//  index iByNode = m_Node(unique);
//  index iByAttr = m_Attr;
//  index iByRelate = m_Relate;

/////////////////////////////
// МЕТОДЫ
  function SetParentCode(sNodeSyn : string) : boolean;
  function SetNodeCode(sCurSyn : string; forWhat : byte) : boolean;
  function AddNodeByFileName(cOwnerNode : comp; Name,NameSyn, Title : string; var cCurNode : comp) : boolean;
  function AddRelate(cLeftNode : comp; sRightNodeSyn : string;
                     LAName, RAName : string;
                     Name, Title, Formula : string) : boolean;
  function IsExistRelate(cLeftNode : comp; sRightNodeSyn : string) : boolean;
  function GetBufAttrList(cCurAttr : comp) : boolean;
  function GetBufRelateList(cCurRel : comp) : boolean;

  procedure PushPos_Node;
  function PopPos_Node : integer;
  function GetFirst_NodeChild(cOwnerNode : comp) : boolean;
  function GetNext_NodeChild(cOwnerNode : comp) : boolean;
end;

VipInterface vDocStruct implements IDocStruct
#ifdef Atl51
licensed (exp_imp)
#endif
;
public:
  constructor Init;
  destructor Done;
end;

#end