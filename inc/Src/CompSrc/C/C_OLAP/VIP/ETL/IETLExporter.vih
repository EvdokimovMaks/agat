//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 7.12 - ETL
// IExporterEnvironment - Интерфейс с функциями API для прикладных выгрузок.
// IETLExporter - Интерфейс управления выгрузкой для внешеней компоненты (Ranet.ETL в данном случае)
// IExporterUnit - Интерфейс прикладного модуля выгрузки.
//------------------------------------------------------------------------------


#ifndef __IETLExporter__
#define __IETLExporter__

ObjInterface IExporterUnit; forward;

// Интерфейс с функциями API для прикладных выгрузок.
#doc
  Интерфейс с функциями API для прикладных выгрузок.<br>
#end
ObjInterface IExporterEnvironment;
  // Запись атрибута в выходной поток данных.
  // Параметры :
  // name  - Название атрибута
  // value - Значение атрибута
  #doc
  Запись атрибута в выходной поток данных.<br>
  name  - Название атрибута.<br>
  value - Значение атрибута.<br>
  #end
  procedure WriteAttribute(name, value: string);
  /*
        OleCall2(OleHandle, 'WriteAttribute', name, value);
  */

  // Запись атрибута, который относится только к заданному источнику данных в выходной потока данных.
  // Параметры :
  // streamId - Идентификатор источника данных, с которым был проинициализирован поток
  // name     - Название атрибута
  // value    - Значение атрибута
  #doc
  Запись атрибута, который относится только к заданному источнику данных в выходной потока данных.<br>
  streamId - Идентификатор источника данных, с которым был проинициализирован поток.<br>
  name     - Название атрибута.<br>
  value    - Значение атрибута.<br>
  #end
  procedure WriteStreamAttribute(streamId, name, value: string);
  /*
        OleCall2(OleHandle, 'WriteStreamAttribute', streamId, name, value)
  */

  // Записывает информацию о возникновении нестрандартной ситуации при выгрузке данных в обработчик выходного потока.
  // Параметры :
  // category - Категория сообщения. Например: "Ошибка", "Предупреждение" и т.д.
  // msg      - Содержание сообщения.
  #doc
  Записывает информацию о возникновении нестрандартной ситуации при выгрузке данных в обработчик выходного потока.<br>
  category - Категория сообщения. Например: "Ошибка", "Предупреждение" и т.д.<br>
  msg      - Содержание сообщения.<br>
  #end
  procedure WriteEvent(category, msg: string);
  /*
        OleCall2(OleHandle, 'WriteEvent', category, msg);
  */

  // Записывает значение поля в выходной поток данных.
  // Параметры :
  // xPath - Путь к атрибуту в схеме данных, включая идентификатор схемы данных.
  // value - Значение атрибута
  // Замечание :
  // При выгрузке накладной значение поля xPath может принимать значения
  // Пример :
  // KatSopr\NRec
  // KatSopr\dSopr
  // KatSopr\nSopr
  // KatSopr\SpSopr\cMCUsl
  // KatSopr\SpSopr\KolFact - ftDouble
  #doc
  Записывает значение поля в выходной поток данных.<br>
  xPath - Путь к атрибуту в схеме данных, включая идентификатор схемы данных.<br>
  value - Значение атрибута.<br>
  #end
  procedure WriteField(xPath: string; value: string);
  /*
     OleCall2(OleHandle, 'WriteField', xPath, value);
  */

  // Завершает запись структуированного элемента.
  // Параметры :
  // xPath - Путь к структуированному элементу в схеме данных, включая идентификатор схемы данных.
  // Замечание :
  // При выгрузке накладной значение поля xPath может принимать значения
  // KatSopr
  // KatSopr\SpSopr
  // При вызове этого метода буфер текущей записи структуированного элемента будет закрыт.
  // Последующий вызов WriteField для поля этого элемента автоматически создаст новую запись и все
  // последующие WriteField будут записывать атрибут в этот буфер. Метод должен обязательно
  // вызываться после записи всех полей соотвествующей таблицы.
  #doc
  Завершает запись структуированного элемента.<br>
  xPath - Путь к структуированному элементу в схеме данных, включая идентификатор схемы данных.<br>
  #end
  procedure EndWrite(xPath : string);
  /*
    OleCall1(OleHandle, 'EndWrite', xPath)
  */

  // Возвращает значение параметра по заданному пути интерфейсу прикладной выгрузки.
  // Параметры :
  // xPath - Путь к значению параметра в соотвествии со схемой параметров.
  #doc
  // Возвращает значение параметра по заданному пути интерфейсу прикладной выгрузки.
  // Параметры :
  // xPath - Путь к значению параметра в соотвествии со схемой параметров.
  #end
  function GetParamValue(exporter : IExporterUnit; xPath : string): string;
  /*
     Вернуть значение из массива (таблицы в памяти), которое было ранее установлено IETLExpoter.SetInvokeParam
  */
end;

// Интерфейс управления выгрузкой для внешеней компоненты (Ranet.ETL в данном случае)
#doc
  Интерфейс управления выгрузкой для внешеней компоненты (Ranet.ETL в данном случае).<br>
#end
ObjInterface IETLExporter;

  // Загружает обработчик выходного потока и устанавливает параметры взаимодействия приложения.
  // Параметры:
  // progId        - Идентификатор ProgId обработчика выходного потока.
  #doc
  Загружает обработчик выходного потока и устанавливает параметры взаимодействия приложения.<br>
  progId        - Идентификатор ProgId обработчика выходного потока.<br>
  #end
  procedure LoadHandler(progId: string);

  // Передает параметры доставки обработчику выгрузки.
  // name         - Название параметра
  // value        - Значение параметра
  #doc
  Передает параметры доставки обработчику выгрузки.<br>
  name         - Название параметра.<br>
  value        - Значение параметра.<br>
  #end
  procedure SetTransportParam(name: string; value: string);
  // Загружает обработчик выходного потока с заданными параметрами.
  // Параметры :
  // maxBufferSize - Максимальный размер буфера данных выраженный в количестве выгружаемых объектов.
  // location      - Адрес отправки данных.
  // transportType - Вид транспорта, используемый для отправки данных.
  #doc
  Загружает обработчик выходного потока с заданными параметрами.<br>
  maxBufferSize - Максимальный размер буфера данных выраженный в количестве выгружаемых объектов.<br>
  location      - Адрес отправки данных.<br>
  transportType - Вид транспорта, используемый для отправки данных.<br>
  #end
  procedure OpenHandler(maxBufferSize: longint; transportType: string);
  /*
        OleHandle := CreateObject(progId);
        OleCall3(OleHandle, 'Open', maxBufferSize, location, transportType);
  */

  // Проинициализировать буфера обрабочтика выходного потока.
  // Параметры :
  // id     - Глобальный идентификатор схемы данных.
  // schema - Схема данных.
  #doc
  Проинициализировать буфера обрабочтика выходного потока.<br>
  id     - Глобальный идентификатор схемы данных.<br>
  schema - Схема данных.<br>
  #end
  procedure InitStream(id, schema: string);
  /*
        OleCall2(OleHandle,'InitStream', id, schema)
  */

  // Запись атрибута в выходной поток данных.
  // Параметры :
  // name  - Название атрибута
  // value - Значение атрибута
  #doc
  Запись атрибута в выходной поток данных.<br>
  name  - Название атрибута.<br>
  value - Значение атрибута.<br>
  #end
  procedure SetAttribute(name, value: string);
  /*
        OleCall2(OleHandle, 'WriteAttribute', name, value);
  */

  // Закрывает обработчик выходого потока, записывает все открытые буфера в транспортный уровень.
  procedure Close;

  // Запись атрибута, который относится только к заданному источнику данных в выходной потока данных.
  // Параметры :
  // streamId - Идентификатор источника данных, с которым был проинициализирован поток
  // name     - Название атрибута
  // value    - Значение атрибута
  #doc
  Запись атрибута, который относится только к заданному источнику данных в выходной потока данных.<br>
  streamId - Идентификатор источника данных, с которым был проинициализирован поток.<br>
  name     - Название атрибута.<br>
  value    - Значение атрибута.<br>
  #end
  procedure SetStreamAttribute(streamId, name, value: string);
  /*
        OleCall2(OleHandle, 'WriteStreamAttribute', streamId, name, value)
  */

  // Установка параметра выгрузки данных.
  // Параметры :
  // unitId - Идентификатор модуля для которого задается парметр.
  // name   - Название параметра
  // value  - Значение параметра
  #doc
  Установка параметра выгрузки данных.<br>
  unitId - Идентификатор модуля для которого задается парметр.<br>
  name   - Название параметра.<br>
  value  - Значение параметра.<br>
  #end
  procedure SetInvokeParam(unitId, name, value: string);
  /*
    где то далеко:
    record RecInvokeParams {
      name: string;
      value: string;
    }

    var my_invokeParams: array [x] RecInvokeParams; // или типа таблицы в памяти отсортированной по наименованию...


    а в этом методе собственно добавляем параметр и его значение в этот массив,
    который будет потом доступен прикладной выгрузке через функции API прикладного интерфейса...
  */

  // Запускает на выполнение прикладную выгрузку.
  // Параметры :
  // unitId - идентификатор прикладной выгрузки.
  #doc
  Запускает на выполнение прикладную выгрузку.<br>
  unitId - идентификатор прикладной выгрузки.<br>
  #end
  procedure Execute(unitId: string);
  /*
     IUnitExecutor executor = LoadVipRef(unitId);
     executor.SetEnvironment(self) - ну или типа что то того (есть в VIP-e возможность передать ссылку на себя?).
     executor.Export();
  */
end;

// Vip-интерфейс управления выгрузкой для внешеней компоненты (Ranet.ETL в данном случае)
VipInterface vETLExporter Implements IETLExporter, IExporterEnvironment licensed(FREE);

#include ISchemaRegistrator.vih

// Интерфейс прикладного модуля выгрузки.
#doc
  Интерфейс прикладного модуля выгрузки.<br>
#end
ObjInterface IExporterUnit;
  // Возвращает программное имя интерфейса
  #doc
  Возвращает программное имя интерфейса.<br>
  #end
  function GetIdentifier : string;
  // Возвращает заголовок модуля выгрузки.
  #doc
  Возвращает заголовок модуля выгрузки.<br>
  #end
  function GetTitle : string;
  // Регистрация параметров с схеме данных.
  #doc
  Регистрация параметров с схеме данных.<br>
  registrator - интерфейс регистрации параметров.<br>
  #end
  procedure RegisterParams(registrator: ISchemaRegistrator);
  // Регистрация полей в схеме данных.
  #doc
  Регистрация полей в схеме данных.<br>
  registrator - интерфейс регистрации параметров.<br>
  #end
  procedure RegisterFields(registrator: ISchemaRegistrator);
  // Осуществление выгрузки данных.
  #doc
  Осуществление выгрузки данных.<br>
  environment - интерфейс с функциями API для прикладных выгрузок.<br>
  #end
  procedure Export(environment: IExporterEnvironment);
end;

#endif