#ifndef __ObjExpImp__
#define __ObjExpImp__


#ifdef ComponentVersion
  #component "C_EXPIMP"
#endif

#doc
Используется для прерывания экспорта в спец решениях.
При его использовании сторонний разработчик должен будет не только вызвать данный expection, но и сформировать строку.
#end
exception exExportGroupError;

#doc
Интерфейс встраиваемой вкладки
Пример реализации встраиваемой вкладки:

include iManipulation.vih

handler with replace LoadVkladka on extensionPoint epPostGetVipName(objManipul : Manipulation) [100]
action
{
  //имя передаваемое в AddVipInterfaceName должно совпадать с именем VipInterface
  objManipul.AddVipInterfaceName('Vkladka_Test');
  result := true;
}

VipInterface Vkladka_Test implements objVkladka Licensed(Free);

//реализация вкладки
Interface Vkladka_Test 'Тестовый интерфейс' (, , ) EscClose;
  Show at (,, 110, 12);

Create View

As Select *
from
  IEHead,
  PlPor


Screen s_test  'Встраиваем вкладку'
table ieHead;
  Fields
  ...список дополнительных настроек для экспорта
  end;

// Нужно записывать заголовок или нет
Function isWriteHeader(cDocument : comp) : boolean;
{
  //по умолчанию должна возвращать true.
  //здесь нужно описать варианты, когда не надо вставлять заголовок в файл экспорта
  //Если заголовок не надо вставлять, то функция должна возвращать false
  result := true;
}

Function IsEndDocument(cCurrentDocument : comp) : boolean;
{
  //по умолчанию должна возвращать false.
  //здесь можно описать дополнительные варианты , когда экспорт документ завершен
  //Если экспорт документа завершен, то функция должна возвращать true
  result := false;
}
//наименование вкладки
function GetVkladkaName : string;
{
  //присваиваем вкладке наименование Дополнительные параметры
  result := 'Дополнительные параметры';
}
//инициализация параметров вашей вкладки
Procedure InitParam(_cHead : comp; _MESSTYPE : byte; _reestr : byte);
{
  ...//
}

Function EnableVkladka(wExpOrImp : word; iType : word) : boolean;
{
  //отображаем вкладку только для экспорта платежек
  result := (wExpOrImp = ieExport and iType = iePlPor);
}

Procedure DeleteTuneExpImp(_cHead : comp);
{
  ...//
}

Procedure AfterExport(sFileName : string);
{
  //копируем содержимое в другой файл
  CopyMoveFile(sFileName, 'c:\temp\newFileExp.txt',false)
}

procedure bFirstDocument (var hExportMarkers : TPtr);
{
  // сделаем прерывание экспорта если есть платежки которые уже экспортировались
  i, MarkerCount : longint;
  MarkerCount    := GetMarkerCount( hExportMarkers );
  for(i := 0; i < MarkerCount; i++)
  {
    if (not GetMarker( hExportMarkers, i, cCurrentDoc )) continue;
    if (GetFirst PlPor where (( cCurrentDoc == PlPor.nRec)) = tsOK)
    {
      if (PlPor.StatusSwift = 2)
      {
        // выдаем exception, который завершает экспорт exExportGroupError
        // и пишем сообщение для него
        _raise exExportGroupError ''#3'Экспорт накладных невозможен.'#13 +
              ''#3'В списке есть накладные, отвязанные от договоров.';
      }
}
end.
#end

ObjInterface objVkladka;
  #doc
  Функция установки параметров встраиваемой вкладки
  #end
  Procedure InitParam(
  #doc
  NRec настройки
  #end
  _cHead : comp;
  #doc
  Формат экспорта(DBF, XML ...)
  #end
  _MESSTYPE : byte;
  #doc
  Содержание файла(реестр/одиночный)
  #end
  _reestr : byte);
  #doc
  Функция установки наименования встраиваемой вкладки
  #end
  Function GetVkladkaName  : string;
  #doc
  Функция проверяет надо ли отображать вкладку в основном интерфейсе,
  если вкладка не отображается то и не выполняются действия описанные для вкладки
  #end
  Function EnableVkladka (
  #doc
  Вкладка для экспорта или импорта
  #end
  wExpOrImp : word;
  #doc
  Тип документа
  #end
  iType : word) : boolean;
  #doc
  Процедура вызывается при удалении настройки
  #end
  Procedure DeleteTuneExpImp(
  #doc
  nRec настройки
  #end
  _cHead : comp);
  #doc
  Процедура заполнения документов для экспорта
  #end
  procedure bFirstDocument (
  #doc
  Маркер экспортируемых документов
  #end
  var hExportMarkers : TPtr);
  //Надо ли записывать заголовок
  #doc
  Функция проверяет надо ли записывать заголовок в файл или нет
  #end
  Function isWriteHeader (
  #doc
  nRec экспортируемого документа
  #end
  cCurrentDoc : comp): boolean;
  #doc
  Функция определяет завершен ли экспорт документа
  #end
  Function IsEndDocument (
  #doc
  nRec экспортируемого документа
  #end
  cCurrentDoc : comp): boolean;
  #doc
  Процедура выполняется после экспорта документа
  #end
  //Действие выполняемое после экспорта
  Procedure AfterExport (
  #doc
  Полный путь к файлу
  #end
  sFileName : string);
  #doc
  Функция выполняется перед инициализацией импорта.
  Проверяет значение доп настроек в зависимости от wParam
  #end
  Function GetBPropValue (
  #doc
  Параметр обработки
  #end
   wParam : word) : boolean;
end;

#doc
Интерфейс обеспечивающий связку между основным интерфейсом и встраиваемыми вкладками
#end
ObjInterface objManipulation;
  #doc
  Добавляем имена интерфейсов с вкладками в таблицу
  #end
  Procedure AddVipInterfaceName (
  #doc
  Имя интерфейса
  #end
  sNameInterface : string);
  #doc
  Инициализация вкладок
  #end
  Procedure InitVkladka;
  #doc
  Получение ссылок на встроенные вкладки
  #end
  Function GetObjRef (index : word) : objVkladka;
end;

VipInterface Manipulation implements objManipulation
  licensed (FREE);

ExtensionPoint epPostGetVipName(objManipul : Manipulation);

#endif
