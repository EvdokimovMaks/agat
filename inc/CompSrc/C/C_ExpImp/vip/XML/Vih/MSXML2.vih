//-------------------------------------------------------------------
//--- Copyright(c) 2001 by Galaktika Corporation                  ---
//--- Этот файл автоматически генерируется для использования      ---
//--- COM интерфейсов из Атлантиса. Править этот файл запрещается ---
//--- так как это может привести к неработоспособности системы    ---
//-------------------------------------------------------------------

// Microsoft XML, v2.6

#ifndef __MSXML2__
#define __MSXML2__
#include atlcom.vih

//--- Forwards declarations --------------

ObjInterface comIXMLDOMImplementation; forward;
ObjInterface comIXMLDOMNode; forward;
ObjInterface comIXMLDOMNodeList; forward;
ObjInterface comIXMLDOMNamedNodeMap; forward;
ObjInterface comIXMLDOMDocument; forward;
ObjInterface comIXMLDOMDocumentType; forward;
ObjInterface comIXMLDOMElement; forward;
ObjInterface comIXMLDOMAttribute; forward;
ObjInterface comIXMLDOMDocumentFragment; forward;
ObjInterface comIXMLDOMCharacterData; forward;
ObjInterface comIXMLDOMText; forward;
ObjInterface comIXMLDOMComment; forward;
ObjInterface comIXMLDOMCDATASection; forward;
ObjInterface comIXMLDOMProcessingInstruction; forward;
ObjInterface comIXMLDOMEntityReference; forward;
ObjInterface comIXMLDOMParseError; forward;
ObjInterface comIXMLDOMSchemaCollection; forward;
ObjInterface comIXMLDOMDocument2; forward;
ObjInterface comIXMLDOMNotation; forward;
ObjInterface comIXMLDOMEntity; forward;
ObjInterface comIXTLRuntime; forward;
ObjInterface comIXSLTemplate; forward;
ObjInterface comIXSLProcessor; forward;
ObjInterface comIXMLDOMSelection; forward;
ObjInterface comXMLDOMDocumentEvents; forward;
ObjInterface comIXMLHTTPRequest; forward;
ObjInterface comIDSOControl; forward;
ObjInterface comIXMLElementCollection; forward;
ObjInterface comIXMLDocument; forward;
ObjInterface comIXMLElement; forward;
ObjInterface comIXMLDocument2; forward;
ObjInterface comIXMLElement2; forward;
ObjInterface comIXMLAttribute; forward;

VipInterface coDOMDocument; forward;
VipInterface coDOMDocument26; forward;
VipInterface coFreeThreadedDOMDocument; forward;
VipInterface coFreeThreadedDOMDocument26; forward;
VipInterface coXMLSchemaCache; forward;
VipInterface coXMLSchemaCache26; forward;
VipInterface coXMLHTTP; forward;
VipInterface coXMLHTTP26; forward;
VipInterface coXSLTemplate; forward;
VipInterface coXSLTemplate26; forward;
VipInterface coDSOControl; forward;
VipInterface coDSOControl26; forward;
VipInterface coXMLDocument; forward;
VipInterface coXMLDocument26; forward;

//--- Types definition  ------------------

// Constants that define a node's type
type tagDOMNodeType = longint;
const
  NODE_INVALID = 0; 
  NODE_ELEMENT = 1; 
  NODE_ATTRIBUTE = 2; 
  NODE_TEXT = 3; 
  NODE_CDATA_SECTION = 4; 
  NODE_ENTITY_REFERENCE = 5; 
  NODE_ENTITY = 6; 
  NODE_PROCESSING_INSTRUCTION = 7; 
  NODE_COMMENT = 8; 
  NODE_DOCUMENT = 9; 
  NODE_DOCUMENT_TYPE = 10; 
  NODE_DOCUMENT_FRAGMENT = 11; 
  NODE_NOTATION = 12; 
end;

type _xml_error = record 
  _nLine : longint; 
  _pchBuf : string; 
  _cchBuf : longint; 
  _ich : longint; 
  _pszFound : string; 
  _pszExpected : string; 
  _reserved1 : longint; 
  _reserved2 : longint; 
end;

// Constants that define types for IXMLElement.
type tagXMLEMEM_TYPE = longint;
const
  XMLELEMTYPE_ELEMENT = 0; 
  XMLELEMTYPE_TEXT = 1; 
  XMLELEMTYPE_COMMENT = 2; 
  XMLELEMTYPE_DOCUMENT = 3; 
  XMLELEMTYPE_DTD = 4; 
  XMLELEMTYPE_PI = 5; 
  XMLELEMTYPE_OTHER = 6; 
end;

// Constants that define a node's type
type DOMNodeType = tagDOMNodeType;

// Constants that define types for IXMLElement.
type XMLELEM_TYPE = tagXMLEMEM_TYPE;


//--- Object Interfaces ------------------

ObjInterface comIXMLDOMImplementation( comIDispatch );
  function  hasFeature( /*[in]*/ feature: string; /*[in]*/ version: string ) : boolean;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMImplementation( vcomIDispatch ) Implements comIXMLDOMImplementation (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// Core DOM node interface
ObjInterface comIXMLDOMNode( comIDispatch );
  // name of the node
  property  nodeName : string Read;
  // value stored in the node
  property  nodeValue : VARIANT Read Write;
  // the node's type
  property  nodeType : DOMNodeType Read;
  // parent of the node
  property  parentNode : comIXMLDOMNode Read;
  // the collection of the node's children
  property  childNodes : comIXMLDOMNodeList Read;
  // first child of the node
  property  firstChild : comIXMLDOMNode Read;
  // last child of the node
  property  lastChild : comIXMLDOMNode Read;
  // left sibling of the node
  property  previousSibling : comIXMLDOMNode Read;
  // right sibling of the node
  property  nextSibling : comIXMLDOMNode Read;
  // the collection of the node's attributes
  property  attributes : comIXMLDOMNamedNodeMap Read;
  // insert a child node
  function  insertBefore( /*[in]*/ newChild: comIXMLDOMNode; /*[in]*/ refChild: VARIANT ) : comIXMLDOMNode;
  // replace a child node
  function  replaceChild( /*[in]*/ newChild: comIXMLDOMNode; /*[in]*/ oldChild: comIXMLDOMNode ) : comIXMLDOMNode;
  // remove a child node
  function  removeChild( /*[in]*/ childNode: comIXMLDOMNode ) : comIXMLDOMNode;
  // append a child node
  function  appendChild( /*[in]*/ newChild: comIXMLDOMNode ) : comIXMLDOMNode;
  function  hasChildNodes : boolean;
  // document that contains the node
  property  ownerDocument : comIXMLDOMDocument Read;
  function  cloneNode( /*[in]*/ deep: boolean ) : comIXMLDOMNode;
  // the type of node in string form
  property  nodeTypeString : string Read;
  // text content of the node and subtree
  property  _text : string Read Write;
  // indicates whether node is a default value
  property  specified : boolean Read;
  // pointer to the definition of the node in the DTD or schema
  property  definition : comIXMLDOMNode Read;
  // get the strongly typed value of the node
  property  nodeTypedValue : VARIANT Read Write;
  // the data type of the node
  property  dataType : VARIANT Read Write;
  // return the XML source for the node and each of its descendants
  property  xml : string Read;
  // apply the stylesheet to the subtree
  function  transformNode( /*[in]*/ stylesheet: comIXMLDOMNode ) : string;
  // execute query on the subtree
  function  selectNodes( /*[in]*/ queryString: string ) : comIXMLDOMNodeList;
  // execute query on the subtree
  function  selectSingleNode( /*[in]*/ queryString: string ) : comIXMLDOMNode;
  // has sub-tree been completely parsed
  property  parsed : boolean Read;
  // the URI for the namespace applying to the node
  property  namespaceURI : string Read;
  // the prefix for the namespace applying to the node
  property  prefix : string Read;
  // the base name of the node (nodename with the prefix stripped off)
  property  baseName : string Read;
  // apply the stylesheet to the subtree, returning the result through a document or a stream
  procedure transformNodeToObject( /*[in]*/ stylesheet: comIXMLDOMNode; 
                                   /*[in]*/ outputObject: VARIANT );
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMNode( vcomIDispatch ) Implements comIXMLDOMNode (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMNodeList( comIDispatch );
  // collection of nodes
  function  Get_item( /*[in]*/ aindex: longint ) : comIXMLDOMNode;
  // number of nodes in the collection
  property  length : longint Read;
  // get next node from iterator
  function  nextNode : comIXMLDOMNode;
  // reset the position of iterator
  procedure reset;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMNodeList( vcomIDispatch ) Implements comIXMLDOMNodeList (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMNamedNodeMap( comIDispatch );
  // lookup item by name
  function  getNamedItem( /*[in]*/ name: string ) : comIXMLDOMNode;
  // set item by name
  function  setNamedItem( /*[in]*/ newItem: comIXMLDOMNode ) : comIXMLDOMNode;
  // remove item by name
  function  removeNamedItem( /*[in]*/ name: string ) : comIXMLDOMNode;
  // collection of nodes
  function  Get_item( /*[in]*/ aindex: longint ) : comIXMLDOMNode;
  // number of nodes in the collection
  property  length : longint Read;
  // lookup the item by name and namespace
  function  getQualifiedItem( /*[in]*/ baseName: string; /*[in]*/ namespaceURI: string ) : comIXMLDOMNode;
  // remove the item by name and namespace
  function  removeQualifiedItem( /*[in]*/ baseName: string; /*[in]*/ namespaceURI: string ) : comIXMLDOMNode;
  // get next node from iterator
  function  nextNode : comIXMLDOMNode;
  // reset the position of iterator
  procedure reset;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMNamedNodeMap( vcomIDispatch ) Implements comIXMLDOMNamedNodeMap (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMDocument( comIXMLDOMNode );
  // node corresponding to the DOCTYPE
  property  doctype : comIXMLDOMDocumentType Read;
  // info on this DOM implementation
  property  _implementation : comIXMLDOMImplementation Read;
  // the root of the tree
  property  documentElement : comIXMLDOMElement Read;
  // the root of the tree
  procedure Set_documentElement( /*[in]*/ DOMElement: comIXMLDOMElement );
  // create an Element node
  function  createElement( /*[in]*/ tagName: string ) : comIXMLDOMElement;
  // create a DocumentFragment node
  function  createDocumentFragment : comIXMLDOMDocumentFragment;
  // create a text node
  function  createTextNode( /*[in]*/ data: string ) : comIXMLDOMText;
  // create a comment node
  function  createComment( /*[in]*/ data: string ) : comIXMLDOMComment;
  // create a CDATA section node
  function  createCDATASection( /*[in]*/ data: string ) : comIXMLDOMCDATASection;
  // create a processing instruction node
  function  createProcessingInstruction( /*[in]*/ target: string; /*[in]*/ data: string ) : comIXMLDOMProcessingInstruction;
  // create an attribute node
  function  createAttribute( /*[in]*/ name: string ) : comIXMLDOMAttribute;
  // create an entity reference node
  function  createEntityReference( /*[in]*/ name: string ) : comIXMLDOMEntityReference;
  // build a list of elements by name
  function  getElementsByTagName( /*[in]*/ tagName: string ) : comIXMLDOMNodeList;
  // create a node of the specified node type and name
  function  createNode( /*[in]*/ atype: VARIANT; /*[in]*/ name: string; 
                        /*[in]*/ namespaceURI: string ) : comIXMLDOMNode;
  // retrieve node from it's ID
  function  nodeFromID( /*[in]*/ idString: string ) : comIXMLDOMNode;
  // load document from the specified XML source
  function  load( /*[in]*/ xmlSource: VARIANT ) : boolean;
  // get the state of the XML document
  property  readyState : longint Read;
  // get the last parser error
  property  parseError : comIXMLDOMParseError Read;
  // get the URL for the loaded XML document
  property  url : string Read;
  // flag for asynchronous download
  property  async : boolean Read Write;
  // abort an asynchronous download
  procedure abort;
  // load the document from a string
  function  loadXML( /*[in]*/ bstrXML: string ) : boolean;
  // save the document to a specified destination
  procedure _save( /*[in]*/ destination: VARIANT );
  // indicates whether the parser performs validation
  property  validateOnParse : boolean Read Write;
  // indicates whether the parser resolves references to external DTD/Entities/Schema
  property  resolveExternals : boolean Read Write;
  // indicates whether the parser preserves whitespace
  property  preserveWhiteSpace : boolean Read Write;
  // register a readystatechange event handler
  property  onreadystatechange : VARIANT Write;
  // register an ondataavailable event handler
  property  ondataavailable : VARIANT Write;
  // register an ontransformnode event handler
  property  ontransformnode : VARIANT Write;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMDocument( vcomIXMLDOMNode ) Implements comIXMLDOMDocument (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMDocumentType( comIXMLDOMNode );
  // name of the document type (root of the tree)
  property  name : string Read;
  // a list of entities in the document
  property  entities : comIXMLDOMNamedNodeMap Read;
  // a list of notations in the document
  property  notations : comIXMLDOMNamedNodeMap Read;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMDocumentType( vcomIXMLDOMNode ) Implements comIXMLDOMDocumentType (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMElement( comIXMLDOMNode );
  // get the tagName of the element
  property  tagName : string Read;
  // look up the string value of an attribute by name
  function  getAttribute( /*[in]*/ name: string ) : VARIANT;
  // set the string value of an attribute by name
  procedure setAttribute( /*[in]*/ name: string; /*[in]*/ value: VARIANT );
  // remove an attribute by name
  procedure removeAttribute( /*[in]*/ name: string );
  // look up the attribute node by name
  function  getAttributeNode( /*[in]*/ name: string ) : comIXMLDOMAttribute;
  // set the specified attribute on the element
  function  setAttributeNode( /*[in]*/ DOMAttribute: comIXMLDOMAttribute ) : comIXMLDOMAttribute;
  // remove the specified attribute
  function  removeAttributeNode( /*[in]*/ DOMAttribute: comIXMLDOMAttribute ) : comIXMLDOMAttribute;
  // build a list of elements by name
  function  getElementsByTagName( /*[in]*/ tagName: string ) : comIXMLDOMNodeList;
  // collapse all adjacent text nodes in sub-tree
  procedure normalize;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMElement( vcomIXMLDOMNode ) Implements comIXMLDOMElement (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMAttribute( comIXMLDOMNode );
  // get name of the attribute
  property  name : string Read;
  // string value of the attribute
  property  value : VARIANT Read Write;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMAttribute( vcomIXMLDOMNode ) Implements comIXMLDOMAttribute (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMDocumentFragment( comIXMLDOMNode );
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMDocumentFragment( vcomIXMLDOMNode ) Implements comIXMLDOMDocumentFragment (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMCharacterData( comIXMLDOMNode );
  // value of the node
  property  data : string Read Write;
  // number of characters in value
  property  length : longint Read;
  // retrieve substring of value
  function  substringData( /*[in]*/ offset: longint; /*[in]*/ count: longint ) : string;
  // append string to value
  procedure appendData( /*[in]*/ data: string );
  // insert string into value
  procedure insertData( /*[in]*/ offset: longint; /*[in]*/ data: string );
  // delete string within the value
  procedure deleteData( /*[in]*/ offset: longint; /*[in]*/ count: longint );
  // replace string within the value
  procedure replaceData( /*[in]*/ offset: longint; /*[in]*/ count: longint; 
                         /*[in]*/ data: string );
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMCharacterData( vcomIXMLDOMNode ) Implements comIXMLDOMCharacterData (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMText( comIXMLDOMCharacterData );
  // split the text node into two text nodes at the position specified
  function  splitText( /*[in]*/ offset: longint ) : comIXMLDOMText;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMText( vcomIXMLDOMCharacterData ) Implements comIXMLDOMText (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMComment( comIXMLDOMCharacterData );
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMComment( vcomIXMLDOMCharacterData ) Implements comIXMLDOMComment (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMCDATASection( comIXMLDOMText );
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMCDATASection( vcomIXMLDOMText ) Implements comIXMLDOMCDATASection (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMProcessingInstruction( comIXMLDOMNode );
  // the target
  property  target : string Read;
  // the data
  property  data : string Read Write;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMProcessingInstruction( vcomIXMLDOMNode ) Implements comIXMLDOMProcessingInstruction (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMEntityReference( comIXMLDOMNode );
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMEntityReference( vcomIXMLDOMNode ) Implements comIXMLDOMEntityReference (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// structure for reporting parser errors
ObjInterface comIXMLDOMParseError( comIDispatch );
  // the error code
  property  errorCode : longint Read;
  // the URL of the XML document containing the error
  property  url : string Read;
  // the cause of the error
  property  reason : string Read;
  // the data where the error occurred
  property  srcText : string Read;
  // the line number in the XML document where the error occurred
  property  line : longint Read;
  // the character position in the line containing the error
  property  linepos : longint Read;
  // the absolute file position in the XML document containing the error
  property  filepos : longint Read;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMParseError( vcomIDispatch ) Implements comIXMLDOMParseError (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// XML Schemas Collection
ObjInterface comIXMLDOMSchemaCollection( comIDispatch );
  // add a new schema
  procedure add( /*[in]*/ namespaceURI: string; /*[in]*/ avar: VARIANT );
  // lookup schema by namespaceURI
  function  get( /*[in]*/ namespaceURI: string ) : comIXMLDOMNode;
  // remove schema by namespaceURI
  procedure remove( /*[in]*/ namespaceURI: string );
  // number of schema in collection
  property  length : longint Read;
  // Get namespaceURI for schema by index
  function  Get_namespaceURI( /*[in]*/ aindex: longint ) : string;
  // copye & merge other collection into this one
  procedure addCollection( /*[in]*/ otherCollection: comIXMLDOMSchemaCollection );
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMSchemaCollection( vcomIDispatch ) Implements comIXMLDOMSchemaCollection (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMDocument2( comIXMLDOMDocument );
  // A collection of all namespaces for this document
  property  namespaces : comIXMLDOMSchemaCollection Read;
  // The associated schema cache
  property  schemas : VARIANT Read;
  // The associated schema cache
  procedure Set_schemas( /*[in]*/ otherCollection: VARIANT );
  // perform runtime validation on the currently loaded XML document
  function  validate : comIXMLDOMParseError;
  // set the value of the named property
  procedure setProperty( /*[in]*/ name: string; /*[in]*/ value: VARIANT );
  // get the value of the named property
  function  getProperty( /*[in]*/ name: string ) : VARIANT;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMDocument2( vcomIXMLDOMDocument ) Implements comIXMLDOMDocument2 (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMNotation( comIXMLDOMNode );
  // the public ID
  property  publicId : VARIANT Read;
  // the system ID
  property  systemId : VARIANT Read;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMNotation( vcomIXMLDOMNode ) Implements comIXMLDOMNotation (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMEntity( comIXMLDOMNode );
  // the public ID
  property  publicId : VARIANT Read;
  // the system ID
  property  systemId : VARIANT Read;
  // the name of the notation
  property  notationName : string Read;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMEntity( vcomIXMLDOMNode ) Implements comIXMLDOMEntity (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// XTL runtime object
ObjInterface comIXTLRuntime( comIXMLDOMNode );
  function  uniqueID( /*[in]*/ pNode: comIXMLDOMNode ) : longint;
  function  depth( /*[in]*/ pNode: comIXMLDOMNode ) : longint;
  function  childNumber( /*[in]*/ pNode: comIXMLDOMNode ) : longint;
  function  ancestorChildNumber( /*[in]*/ bstrNodeName: string; /*[in]*/ pNode: comIXMLDOMNode ) : longint;
  function  absoluteChildNumber( /*[in]*/ pNode: comIXMLDOMNode ) : longint;
  function  formatIndex( /*[in]*/ lIndex: longint; /*[in]*/ bstrFormat: string ) : string;
  function  formatNumber( /*[in]*/ dblNumber: double; /*[in]*/ bstrFormat: string ) : string;
  function  formatDate( /*[in]*/ varDate: VARIANT; /*[in]*/ bstrFormat: string; 
                        /*[in]*/ varDestLocale: VARIANT ) : string;
  function  formatTime( /*[in]*/ varTime: VARIANT; /*[in]*/ bstrFormat: string; 
                        /*[in]*/ varDestLocale: VARIANT ) : string;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXTLRuntime( vcomIXMLDOMNode ) Implements comIXTLRuntime (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// IXSLTemplate Interface
ObjInterface comIXSLTemplate( comIDispatch );
  // stylesheet to use with processors
  procedure Set_stylesheet( /*[in]*/ stylesheet: comIXMLDOMNode );
  // stylesheet to use with processors
  property  stylesheet : comIXMLDOMNode Read;
  // create a new processor object
  function  createProcessor : comIXSLProcessor;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXSLTemplate( vcomIDispatch ) Implements comIXSLTemplate (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// IXSLProcessor Interface
ObjInterface comIXSLProcessor( comIDispatch );
  // XML input tree to transform
  property  input : VARIANT Read Write;
  // template object used to create this processor object
  property  ownerTemplate : comIXSLTemplate Read;
  // set XSL mode and it's namespace
  procedure setStartMode( /*[in]*/ mode: string; /*[in]*/ namespaceURI: string );
  // starting XSL mode
  property  startMode : string Read;
  // namespace of starting XSL mode
  property  startModeURI : string Read;
  // custom stream object for transform output
  property  output : VARIANT Read Write;
  // start/resume the XSL transformation process
  function  transform : boolean;
  // reset state of processor and abort current transform
  procedure reset;
  // current state of the processor
  property  readyState : longint Read;
  // set <xsl:param> values
  procedure addParameter( /*[in]*/ baseName: string; /*[in]*/ parameter: VARIANT; 
                          /*[in]*/ namespaceURI: string );
  // pass object to stylesheet
  procedure addObject( /*[in]*/ obj: comIDispatch; /*[in]*/ namespaceURI: string );
  // current stylesheet being used
  property  stylesheet : comIXMLDOMNode Read;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXSLProcessor( vcomIDispatch ) Implements comIXSLProcessor (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDOMSelection( comIXMLDOMNodeList );
  // selection expression
  property  expr : string Read Write;
  // nodes to apply selection expression to
  property  context : comIXMLDOMNode Read;
  // nodes to apply selection expression to
  procedure Set_context( /*[in]*/ ppNode: comIXMLDOMNode );
  // gets the next node without advancing the list position
  function  peekNode : comIXMLDOMNode;
  // checks to see if the node matches the pattern
  function  matches( /*[in]*/ pNode: comIXMLDOMNode ) : comIXMLDOMNode;
  // removes the next node
  function  removeNext : comIXMLDOMNode;
  // removes all the nodes that match the selection
  procedure removeAll;
  // clone this object with the same position and context
  function  clone : comIXMLDOMSelection;
  // get the value of the named property
  function  getProperty( /*[in]*/ name: string ) : VARIANT;
  // set the value of the named property
  procedure setProperty( /*[in]*/ name: string; /*[in]*/ value: VARIANT );
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDOMSelection( vcomIXMLDOMNodeList ) Implements comIXMLDOMSelection (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comXMLDOMDocumentEvents( comIDispatch );
  procedure ondataavailable;
  procedure onreadystatechange;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomXMLDOMDocumentEvents( vcomIDispatch ) Implements comXMLDOMDocumentEvents (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// IXMLHTTPRequest Interface
ObjInterface comIXMLHTTPRequest( comIDispatch );
  // Open HTTP connection
  procedure _open( /*[in]*/ bstrMethod: string; /*[in]*/ bstrUrl: string; 
                   /*[in]*/ varAsync: VARIANT; /*[in]*/ bstrUser: VARIANT; 
                   /*[in]*/ bstrPassword: VARIANT );
  // Add HTTP request header
  procedure setRequestHeader( /*[in]*/ bstrHeader: string; /*[in]*/ bstrValue: string );
  // Get HTTP response header
  function  getResponseHeader( /*[in]*/ bstrHeader: string ) : string;
  // Get all HTTP response headers
  function  getAllResponseHeaders : string;
  // Send HTTP request
  procedure send( /*[in]*/ varBody: VARIANT );
  // Abort HTTP request
  procedure abort;
  // Get HTTP status code
  property  status : longint Read;
  // Get HTTP status text
  property  statusText : string Read;
  // Get response body
  property  responseXML : comIDispatch Read;
  // Get response body
  property  responseText : string Read;
  // Get response body
  property  responseBody : VARIANT Read;
  // Get response body
  property  responseStream : VARIANT Read;
  // Get ready state
  property  readyState : longint Read;
  // Register a complete event handler
  property  onreadystatechange : comIDispatch Write;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLHTTPRequest( vcomIDispatch ) Implements comIXMLHTTPRequest (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// DSO Control
ObjInterface comIDSOControl( comIDispatch );
  property  XMLDocument : comIXMLDOMDocument Read Write;
  property  JavaDSOCompatible : longint Read Write;
  property  readyState : longint Read;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIDSOControl( vcomIDispatch ) Implements comIDSOControl (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// IXMLElementCollection helps to enumerate through a XML document tree.
ObjInterface comIXMLElementCollection( comIDispatch );
  // get current item, or (optional) by index and name.
  function  item( /*[in]*/ var1: VARIANT; /*[in]*/ var2: VARIANT ) : comIDispatch;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLElementCollection( vcomIDispatch ) Implements comIXMLElementCollection (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// IXMLDocument loads and saves XML document. This is obsolete. You should use IDOMDocument or IXMLDOMDocument.
ObjInterface comIXMLDocument( comIDispatch );
  // get root IXMLElement of the XML document.
  property  _root : comIXMLElement Read;
  // set URL to load an XML document from the URL.
  property  url : string Read Write;
  // get ready state.
  property  readyState : longint Read;
  // get encoding.
  property  charset : string Read Write;
  // get XML version number.
  property  version : string Read;
  // get document type.
  property  doctype : string Read;
  // create different types of IXMLElements.
  function  createElement( /*[in]*/ vType: VARIANT; /*[in]*/ var1: VARIANT ) : comIXMLElement;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDocument( vcomIDispatch ) Implements comIXMLDocument (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// IXMLElement represents an element in the XML document tree.
ObjInterface comIXMLElement( comIDispatch );
  // get tag name.
  property  tagName : string Read Write;
  // get parent IXMLElement.
  property  parent : comIXMLElement Read;
  // set attribute.
  procedure setAttribute( /*[in]*/ strPropertyName: string; /*[in]*/ PropertyValue: VARIANT );
  // get attribute.
  function  getAttribute( /*[in]*/ strPropertyName: string ) : VARIANT;
  // remove attribute.
  procedure removeAttribute( /*[in]*/ strPropertyName: string );
  // get a IXMLElementCollection of children.
  property  children : comIXMLElementCollection Read;
  // get type of this IXMLElement.
  property  _type : longint Read;
  // get text.
  property  _text : string Read Write;
  // add a child.
  procedure addChild( /*[in]*/ pChildElem: comIXMLElement; /*[in]*/ lIndex: longint; 
                      /*[in]*/ lReserved: longint );
  // remove a child.
  procedure removeChild( /*[in]*/ pChildElem: comIXMLElement );
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLElement( vcomIDispatch ) Implements comIXMLElement (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

ObjInterface comIXMLDocument2( comIDispatch );
  // get root IXMLElement of the XML document.
  property  _root : comIXMLElement2 Read;
  // set URL to load an XML document from the URL.
  property  url : string Read Write;
  // get ready state.
  property  readyState : longint Read;
  // get encoding.
  property  charset : string Read Write;
  // get XML version number.
  property  version : string Read;
  // get document type.
  property  doctype : string Read;
  // create different types of IXMLElements.
  function  createElement( /*[in]*/ vType: VARIANT; /*[in]*/ var1: VARIANT ) : comIXMLElement2;
  // get asynchronous loading flag.
  property  async : boolean Read Write;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLDocument2( vcomIDispatch ) Implements comIXMLDocument2 (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// IXMLElement2 extends IXMLElement.
ObjInterface comIXMLElement2( comIDispatch );
  // get tag name.
  property  tagName : string Read Write;
  // get parent IXMLElement.
  property  parent : comIXMLElement2 Read;
  // set attribute.
  procedure setAttribute( /*[in]*/ strPropertyName: string; /*[in]*/ PropertyValue: VARIANT );
  // get attribute.
  function  getAttribute( /*[in]*/ strPropertyName: string ) : VARIANT;
  // remove attribute.
  procedure removeAttribute( /*[in]*/ strPropertyName: string );
  // get a IXMLElementCollection of all children.
  property  children : comIXMLElementCollection Read;
  // get type of this IXMLElement.
  property  _type : longint Read;
  // get text.
  property  _text : string Read Write;
  // add a child.
  procedure addChild( /*[in]*/ pChildElem: comIXMLElement2; /*[in]*/ lIndex: longint; 
                      /*[in]*/ lReserved: longint );
  // remove a child.
  procedure removeChild( /*[in]*/ pChildElem: comIXMLElement2 );
  // get a IXMLElementCollection of all attributes.
  property  attributes : comIXMLElementCollection Read;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLElement2( vcomIDispatch ) Implements comIXMLElement2 (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;

// IXMLAttribute allows to get attributes of an IXMLElement.
ObjInterface comIXMLAttribute( comIDispatch );
  // get attribute name.
  property  name : string Read;
  // get attribute value.
  property  value : string Read;
end;

// Служебный объект, создавать запрещается !!!
VipInterface vcomIXMLAttribute( vcomIDispatch ) Implements comIXMLAttribute (virtual);
public:
  constructor CreateQI( iComHandle : longint );
end;


//--- coClases ----------------------------

// W3C-DOM XML Document (Apartment)
VipInterface coDOMDocument( vcomIXMLDOMDocument2 );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// W3C-DOM XML Document (Apartment)
VipInterface coDOMDocument26( vcomIXMLDOMDocument2 );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// W3C-DOM XML Document (Free threaded)
VipInterface coFreeThreadedDOMDocument( vcomIXMLDOMDocument2 );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// W3C-DOM XML Document (Free threaded)
VipInterface coFreeThreadedDOMDocument26( vcomIXMLDOMDocument2 );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// object for caching schemas
VipInterface coXMLSchemaCache( vcomIXMLDOMSchemaCollection );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// object for caching schemas
VipInterface coXMLSchemaCache26( vcomIXMLDOMSchemaCollection );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// XML HTTP Request class.
VipInterface coXMLHTTP( vcomIXMLHTTPRequest );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// XML HTTP Request class.
VipInterface coXMLHTTP26( vcomIXMLHTTPRequest );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// object for caching compiled XSL stylesheets
VipInterface coXSLTemplate( vcomIXSLTemplate );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// object for caching compiled XSL stylesheets
VipInterface coXSLTemplate26( vcomIXSLTemplate );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// XML Data Source Object
VipInterface coDSOControl( vcomIDSOControl );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// XML Data Source Object
VipInterface coDSOControl26( vcomIDSOControl );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// XMLDocument extends IXML Document.  It is obsolete.  You should use DOMDocument.  This object should not be confused with the XMLDocument property on the XML data island.
VipInterface coXMLDocument( vcomIXMLDocument2 );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;

// XMLDocument extends IXML Document.  It is obsolete.  You should use DOMDocument.  This object should not be confused with the XMLDocument property on the XML data island.
VipInterface coXMLDocument26( vcomIXMLDocument2 );
public:
  constructor Init;
  constructor Create( atlFlags : word );
end;


#endif
