//------------------------------------------------------------------------------------------------------------
//                                                                                    (c) корпорация Галактика
// Галактика 9.1
// Группировка и агрегирование данных на стороне сервера в соответствии с пользовательскими настройками
//------------------------------------------------------------------------------------------------------------
#ifdef ComponentVersion
#Component "L_Common"
#endif

#ifndef __DevSQL_VIH
#define __DevSQL_VIH

#include DevSQL.inc
#include Query.vih

table struct structTable
(
  nRec          : comp
, tobotCode     : word       // уникальный номер отчета тобота, чтобы данная таблица открытая в разных интерфейсах не пересекалась
, cXLTField     : comp       // ссылка на данное поле в рамках шаблона (для более удобного позиционирования и поиска)
, fldName       : string     // название поля заданное прикладным программистом (может содержать название таблицы "table.field")
, fldAlias      : string     // "чистое" название поля без указания таблиц и т.д.
, fldCaption    : string[80] // название для данного поля определенное пользователем (или программистом) в рамках шаблона
, fldAgrigation : string     // операция с полем производимая при агрегации записей
, fldType       : byte       // тип поля (Атлантические константы ftDouble, ftWord и т.д.)
, pickNum       : longint    // pick - константа данного поля
, pickInterface : string     // интерфейс открываемый для задания фильтров
, value         : byte       // действия с данным полем, определенные пользователем в представлении
, linkFldName   : string[80] // прилинкованное наименование для поля
, linkFldToTable: string     // подцепка для прилинкованного наименования
, colCode       : longint    // код столбца в котором содержится наименование для cRec-а tobota
, boundsCode    : longint    // подцепка на другую таблицу для этого поля
, idxGroupOrAgr : byte       // индекс полей group и sum тобота для данного поля
)
with index
(
  idxStructTable1 = nRec(unique, surrogate)
, idxStructTable2 = tobotCode + cXLTField
, idxStructTable3 = tobotCode + value + cXLTField
, idxStructTable4 = tobotCode + fldAlias
, idxStructTable5 = tobotCode + value + nRec
, idxStructTable6 = tobotCode + colCode
);

objInterface oDevSQL;

//------------------------------------------------------------------------------------------------------------
#doc
Создание шаблона
#end
function setTempl(_template: string; //#docl наименование шаблона
                  _code: word        //#docl код шаблона для таблицы tobot
                 ): boolean;         //#docl возвращает True если шаблон был создан
#doc
Удаление шаблона из базы
#end
function delTempl(_template: string //#docl наименование удаляемого шаблона
                 ): boolean;        //#docl возвращает True если шаблон был найден и удален
//------------------------------------------------------------------------------------------------------------
#doc
Создание полей группировки
#end
function  setGroupField(_sqlTextSelect: string;   //#docl поле таблицы (SQL)
                        _alias: string;           //#docl уникальный псевдоним в рамках шаблона для поля таблицы
                        _caption: string[80] = '' //#docl пользовательское наименование поля шаблона (Кириллицей)
                       ): boolean;                //#docl возвращает True если поле было создано
#doc
Создание полей агрегации
#end
function  setAgregField(_sqlTextSelect: string;   //#docl поле таблицы (SQL)
                        _alias: string;           //#docl уникальный синоним в рамках шаблона для поля таблицы
                        _caption: string[80] = '' //#docl пользовательское наименование поля шаблона (Кириллицей)
                       ): boolean;                //#docl возвращает True если поле было создано
#doc
Задание операций используемых при агрегации данных
К примеру: не просто складывать значение записей, а умножать при этом на количество и т.п.
#end
procedure setFieldAgrOperation(_alias: string;         //#docl псевдоним поля
                               _agrOperation: string); //#docl операция используемая при агрегации данных (SQL)


#doc
Заполнение колонки "Наименование". Подцепка к nRec-у таблицы из которой будет браться наименование.
#end
procedure setFieldLinkName(_alias: string;           //#docl псевдоним поля
                           _linkFldName: string[80]; //#docl подцепляемое поля
                           _linkFldToTable: string); //#docl подцепляемая таблица в которой хранится поле с наименованием
#doc
Связывание полей отобранных данных с колонками визуального интерфейса
#end
procedure setFieldColumn(_alias: string;        //#docl псевдоним поля
                         _colCode: longint;     //#docl код колонки
                         _bounds: longint = 0); //#docl код баундса для подцепки дополнительных полей
#doc
Задание имен таблиц для выборки from (SQL)
#end
function setFromSql(_sqlTextFrom: string //#docl строка from (SQL)
                   ): boolean;
#doc
Условия отбора данных where (SQL)
#end
function setWhereSql(_sqlTextWhere: string //#docl строка where (SQL)
                    ): boolean;
#doc
Формирование корневой таблицы по заданным условиям
#end
function formRootData: boolean; //#docl возвращает true если таблица была сформирована без ошибок
#doc
Формирование таблиц группировок и агрегации по указанному пользовательскому представлению
#end
function formGroupByView(_cView: comp //#docl nRec представления по которому происходит группировка и агрегация
                        ): boolean;   //#docl возвращает true если таблицы группировок и агрегации были сформированы
#doc
Получить номер поля в таблице tobot по псевдониму
#end
function getIdxNum(_alias: string //#docl псевдоним поля
                  ): byte;        //#docl индекс колонки в табилце tobot
#doc
Проверка: было ли выбрано указанное поле пользователем в сформированном представлении
#end
function fieldInView(_alias: string) //#docl псевдоним поля
: word;                              //#docl возвращает 0 - не выбрано, 1 - поле отчета, 2 - группировка

#doc
Получение последней ошибки возникшей в процессе формирования
#end
function getLastError: string; //#docl текст ошибки

#doc
[ABSTRACT] Обработка обязательных полей агрегации
#end
procedure setRequiredField(_cView: comp); //#docl nRec представления по которому происходит группировка и агрегация

end;
//------------------------------------------------------------------------------
vipInterface DevSQL implements oDevSQL licensed (FREE);

#endif
