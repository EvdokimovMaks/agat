//-------------------------------------------------------------------
//--- Copyright(c) 2001 by Galaktika Corporation                  ---
//--- Этот файл автоматически генерируется для использования      ---
//--- COM интерфейсов из Атлантиса. Править этот файл запрещается ---
//--- так как это может привести к неработоспособности системы    ---
//-------------------------------------------------------------------

// CAPICOM v2.1 Type Library

#ifndef __CAPICOM__
#define __CAPICOM__
#include atlcom.vih

//--- Forwards declarations --------------

ObjInterface comISettings; forward;
ObjInterface comIEKU; forward;
ObjInterface comIEKUs; forward;
ObjInterface comIKeyUsage; forward;
ObjInterface comIExtendedKeyUsage; forward;
ObjInterface comIBasicConstraints; forward;
ObjInterface comICertificateStatus; forward;
ObjInterface comICertificateStatus2; forward;
ObjInterface comICertificateStatus3; forward;
ObjInterface comIOIDs; forward;
ObjInterface comIOID; forward;
ObjInterface comICertificates; forward;
ObjInterface comICertificate; forward;
ObjInterface comICertificate2; forward;
ObjInterface comITemplate; forward;
ObjInterface comIPublicKey; forward;
ObjInterface comIEncodedData; forward;
ObjInterface comIPrivateKey; forward;
ObjInterface comIExtensions; forward;
ObjInterface comIExtendedProperties; forward;
ObjInterface comIExtendedProperty; forward;
ObjInterface comICertContext; forward;
ObjInterface comICertificates2; forward;
ObjInterface comICCertificates; forward;
ObjInterface comIChain; forward;
ObjInterface comIChain2; forward;
ObjInterface comIChainContext; forward;
ObjInterface comIStore; forward;
ObjInterface comIStore2; forward;
ObjInterface comIStore3; forward;
ObjInterface comICertStore; forward;
ObjInterface comIAttribute; forward;
ObjInterface comIAttributes; forward;
ObjInterface comISigner; forward;
ObjInterface comISigner2; forward;
ObjInterface comICSigner; forward;
ObjInterface comISigners; forward;
ObjInterface comISignedData; forward;
ObjInterface comIAlgorithm; forward;
ObjInterface comIRecipients; forward;
ObjInterface comIEnvelopedData; forward;
ObjInterface comIEncryptedData; forward;
ObjInterface comINoticeNumbers; forward;
ObjInterface comIQualifier; forward;
ObjInterface comIQualifiers; forward;
ObjInterface comIPolicyInformation; forward;
ObjInterface comICertificatePolicies; forward;
ObjInterface comIExtension; forward;
ObjInterface comICPrivateKey; forward;
ObjInterface comISignedCode; forward;
ObjInterface comIHashedData; forward;
ObjInterface comIUtilities; forward;


//--- Types definition  ------------------

type CAPICOM_ERROR_CODE // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  CAPICOM_E_ENCODE_INVALID_TYPE = 0-2138570496; 
  CAPICOM_E_EKU_INVALID_OID = 0-2138570240; 
  CAPICOM_E_EKU_OID_NOT_INITIALIZED = 0-2138570239; 
  CAPICOM_E_CERTIFICATE_NOT_INITIALIZED = 0-2138570224; 
  CAPICOM_E_CERTIFICATE_NO_PRIVATE_KEY = 0-2138570223; 
  CAPICOM_E_CHAIN_NOT_BUILT = 0-2138570208; 
  CAPICOM_E_STORE_NOT_OPENED = 0-2138570192; 
  CAPICOM_E_STORE_EMPTY = 0-2138570191; 
  CAPICOM_E_STORE_INVALID_OPEN_MODE = 0-2138570190; 
  CAPICOM_E_STORE_INVALID_SAVE_AS_TYPE = 0-2138570189; 
  CAPICOM_E_ATTRIBUTE_NAME_NOT_INITIALIZED = 0-2138570176; 
  CAPICOM_E_ATTRIBUTE_VALUE_NOT_INITIALIZED = 0-2138570175; 
  CAPICOM_E_ATTRIBUTE_INVALID_NAME = 0-2138570174; 
  CAPICOM_E_ATTRIBUTE_INVALID_VALUE = 0-2138570173; 
  CAPICOM_E_SIGNER_NOT_INITIALIZED = 0-2138570160; 
  CAPICOM_E_SIGNER_NOT_FOUND = 0-2138570159; 
  CAPICOM_E_SIGNER_NO_CHAIN = 0-2138570158; 
  CAPICOM_E_SIGNER_INVALID_USAGE = 0-2138570157; 
  CAPICOM_E_SIGN_NOT_INITIALIZED = 0-2138570144; 
  CAPICOM_E_SIGN_INVALID_TYPE = 0-2138570143; 
  CAPICOM_E_SIGN_NOT_SIGNED = 0-2138570142; 
  CAPICOM_E_INVALID_ALGORITHM = 0-2138570128; 
  CAPICOM_E_INVALID_KEY_LENGTH = 0-2138570127; 
  CAPICOM_E_ENVELOP_NOT_INITIALIZED = 0-2138570112; 
  CAPICOM_E_ENVELOP_INVALID_TYPE = 0-2138570111; 
  CAPICOM_E_ENVELOP_NO_RECIPIENT = 0-2138570110; 
  CAPICOM_E_ENVELOP_RECIPIENT_NOT_FOUND = 0-2138570109; 
  CAPICOM_E_ENCRYPT_NOT_INITIALIZED = 0-2138570096; 
  CAPICOM_E_ENCRYPT_INVALID_TYPE = 0-2138570095; 
  CAPICOM_E_ENCRYPT_NO_SECRET = 0-2138570094; 
  CAPICOM_E_NOT_SUPPORTED = 0-2138568448; 
  CAPICOM_E_UI_DISABLED = 0-2138568447; 
  CAPICOM_E_CANCELLED = 0-2138568446; 
  CAPICOM_E_NOT_ALLOWED = 0-2138568445; 
  CAPICOM_E_OUT_OF_RESOURCE = 0-2138568444; 
  CAPICOM_E_INTERNAL = 0-2138568431; 
  CAPICOM_E_UNKNOWN = 0-2138568295; 
  CAPICOM_E_PRIVATE_KEY_NOT_INITIALIZED = 0-2138569984; 
  CAPICOM_E_PRIVATE_KEY_NOT_EXPORTABLE = 0-2138569983; 
  CAPICOM_E_ENCODE_NOT_INITIALIZED = 0-2138569952; 
  CAPICOM_E_EXTENSION_NOT_INITIALIZED = 0-2138569936; 
  CAPICOM_E_PROPERTY_NOT_INITIALIZED = 0-2138569920; 
  CAPICOM_E_FIND_INVALID_TYPE = 0-2138569904; 
  CAPICOM_E_FIND_INVALID_PREDEFINED_POLICY = 0-2138569903; 
  CAPICOM_E_CODE_NOT_INITIALIZED = 0-2138569888; 
  CAPICOM_E_CODE_NOT_SIGNED = 0-2138569887; 
  CAPICOM_E_CODE_DESCRIPTION_NOT_INITIALIZED = 0-2138569886; 
  CAPICOM_E_CODE_DESCRIPTION_URL_NOT_INITIALIZED = 0-2138569885; 
  CAPICOM_E_CODE_INVALID_TIMESTAMP_URL = 0-2138569884; 
  CAPICOM_E_HASH_NO_DATA = 0-2138569872; 
  CAPICOM_E_INVALID_CONVERT_TYPE = 0-2138569856; 
end;

type CAPICOM_ENCODING_TYPE // #docl  Комментарии отсутствуют. </brief> 
                           = longint;
const 
  CAPICOM_ENCODE_BASE64 = 0; 
  CAPICOM_ENCODE_BINARY = 1; 
  CAPICOM_ENCODE_ANY = 0-1; 
end;

type CAPICOM_EKU // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  CAPICOM_EKU_OTHER = 0; 
  CAPICOM_EKU_SERVER_AUTH = 1; 
  CAPICOM_EKU_CLIENT_AUTH = 2; 
  CAPICOM_EKU_CODE_SIGNING = 3; 
  CAPICOM_EKU_EMAIL_PROTECTION = 4; 
  CAPICOM_EKU_SMARTCARD_LOGON = 5; 
  CAPICOM_EKU_ENCRYPTING_FILE_SYSTEM = 6; 
end;

type CAPICOM_CHECK_FLAG // #docl  Комментарии отсутствуют. </brief> 
                        = longint;
const 
  CAPICOM_CHECK_NONE = 0; 
  CAPICOM_CHECK_TRUSTED_ROOT = 1; 
  CAPICOM_CHECK_TIME_VALIDITY = 2; 
  CAPICOM_CHECK_SIGNATURE_VALIDITY = 4; 
  CAPICOM_CHECK_ONLINE_REVOCATION_STATUS = 8; 
  CAPICOM_CHECK_OFFLINE_REVOCATION_STATUS = 16; 
  CAPICOM_CHECK_COMPLETE_CHAIN = 32; 
  CAPICOM_CHECK_NAME_CONSTRAINTS = 64; 
  CAPICOM_CHECK_BASIC_CONSTRAINTS = 128; 
  CAPICOM_CHECK_NESTED_VALIDITY_PERIOD = 256; 
  CAPICOM_CHECK_ONLINE_ALL = 495; 
  CAPICOM_CHECK_OFFLINE_ALL = 503; 
end;

type CAPICOM_CERT_INFO_TYPE // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME = 0; 
  CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME = 1; 
  CAPICOM_CERT_INFO_SUBJECT_EMAIL_NAME = 2; 
  CAPICOM_CERT_INFO_ISSUER_EMAIL_NAME = 3; 
  CAPICOM_CERT_INFO_SUBJECT_UPN = 4; 
  CAPICOM_CERT_INFO_ISSUER_UPN = 5; 
  CAPICOM_CERT_INFO_SUBJECT_DNS_NAME = 6; 
  CAPICOM_CERT_INFO_ISSUER_DNS_NAME = 7; 
end;

type CAPICOM_STORE_LOCATION // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  CAPICOM_MEMORY_STORE = 0; 
  CAPICOM_LOCAL_MACHINE_STORE = 1; 
  CAPICOM_CURRENT_USER_STORE = 2; 
  CAPICOM_ACTIVE_DIRECTORY_USER_STORE = 3; 
  CAPICOM_SMART_CARD_USER_STORE = 4; 
end;

type CAPICOM_STORE_OPEN_MODE // #docl  Комментарии отсутствуют. </brief> 
                             = longint;
const 
  CAPICOM_STORE_OPEN_READ_ONLY = 0; 
  CAPICOM_STORE_OPEN_READ_WRITE = 1; 
  CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2; 
  CAPICOM_STORE_OPEN_EXISTING_ONLY = 128; 
  CAPICOM_STORE_OPEN_INCLUDE_ARCHIVED = 256; 
end;

type CAPICOM_ACTIVE_DIRECTORY_SEARCH_LOCATION // #docl  Комментарии отсутствуют. </brief> 
                                              = longint;
const 
  CAPICOM_SEARCH_ANY = 0; 
  CAPICOM_SEARCH_GLOBAL_CATALOG = 1; 
  CAPICOM_SEARCH_DEFAULT_DOMAIN = 2; 
end;

type CAPICOM_STORE_SAVE_AS_TYPE // #docl  Комментарии отсутствуют. </brief> 
                                = longint;
const 
  CAPICOM_STORE_SAVE_AS_SERIALIZED = 0; 
  CAPICOM_STORE_SAVE_AS_PKCS7 = 1; 
end;

type CAPICOM_ATTRIBUTE // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0; 
  CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1; 
  CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2; 
end;

type CAPICOM_SIGNED_DATA_VERIFY_FLAG // #docl  Комментарии отсутствуют. </brief> 
                                     = longint;
const 
  CAPICOM_VERIFY_SIGNATURE_ONLY = 0; 
  CAPICOM_VERIFY_SIGNATURE_AND_CERTIFICATE = 1; 
end;

type CAPICOM_ENCRYPTION_ALGORITHM // #docl  Комментарии отсутствуют. </brief> 
                                  = longint;
const 
  CAPICOM_ENCRYPTION_ALGORITHM_RC2 = 0; 
  CAPICOM_ENCRYPTION_ALGORITHM_RC4 = 1; 
  CAPICOM_ENCRYPTION_ALGORITHM_DES = 2; 
  CAPICOM_ENCRYPTION_ALGORITHM_3DES = 3; 
  CAPICOM_ENCRYPTION_ALGORITHM_AES = 4; 
end;

type CAPICOM_ENCRYPTION_KEY_LENGTH // #docl  Комментарии отсутствуют. </brief> 
                                   = longint;
const 
  CAPICOM_ENCRYPTION_KEY_LENGTH_MAXIMUM = 0; 
  CAPICOM_ENCRYPTION_KEY_LENGTH_40_BITS = 1; 
  CAPICOM_ENCRYPTION_KEY_LENGTH_56_BITS = 2; 
  CAPICOM_ENCRYPTION_KEY_LENGTH_128_BITS = 3; 
  CAPICOM_ENCRYPTION_KEY_LENGTH_192_BITS = 4; 
  CAPICOM_ENCRYPTION_KEY_LENGTH_256_BITS = 5; 
end;

type CAPICOM_SECRET_TYPE // #docl  Комментарии отсутствуют. </brief> 
                         = longint;
const 
  CAPICOM_SECRET_PASSWORD = 0; 
end;

type CAPICOM_KEY_ALGORITHM // #docl  Комментарии отсутствуют. </brief> 
                           = longint;
const 
  CAPICOM_KEY_ALGORITHM_OTHER = 0; 
  CAPICOM_KEY_ALGORITHM_RSA = 1; 
  CAPICOM_KEY_ALGORITHM_DSS = 2; 
end;

type CAPICOM_OID // #docl  Комментарии отсутствуют. </brief> 
                 = longint;
const 
  CAPICOM_OID_OTHER = 0; 
  CAPICOM_OID_AUTHORITY_KEY_IDENTIFIER_EXTENSION = 1; 
  CAPICOM_OID_KEY_ATTRIBUTES_EXTENSION = 2; 
  CAPICOM_OID_CERT_POLICIES_95_EXTENSION = 3; 
  CAPICOM_OID_KEY_USAGE_RESTRICTION_EXTENSION = 4; 
  CAPICOM_OID_LEGACY_POLICY_MAPPINGS_EXTENSION = 5; 
  CAPICOM_OID_SUBJECT_ALT_NAME_EXTENSION = 6; 
  CAPICOM_OID_ISSUER_ALT_NAME_EXTENSION = 7; 
  CAPICOM_OID_BASIC_CONSTRAINTS_EXTENSION = 8; 
  CAPICOM_OID_SUBJECT_KEY_IDENTIFIER_EXTENSION = 9; 
  CAPICOM_OID_KEY_USAGE_EXTENSION = 10; 
  CAPICOM_OID_PRIVATEKEY_USAGE_PERIOD_EXTENSION = 11; 
  CAPICOM_OID_SUBJECT_ALT_NAME2_EXTENSION = 12; 
  CAPICOM_OID_ISSUER_ALT_NAME2_EXTENSION = 13; 
  CAPICOM_OID_BASIC_CONSTRAINTS2_EXTENSION = 14; 
  CAPICOM_OID_NAME_CONSTRAINTS_EXTENSION = 15; 
  CAPICOM_OID_CRL_DIST_POINTS_EXTENSION = 16; 
  CAPICOM_OID_CERT_POLICIES_EXTENSION = 17; 
  CAPICOM_OID_POLICY_MAPPINGS_EXTENSION = 18; 
  CAPICOM_OID_AUTHORITY_KEY_IDENTIFIER2_EXTENSION = 19; 
  CAPICOM_OID_POLICY_CONSTRAINTS_EXTENSION = 20; 
  CAPICOM_OID_ENHANCED_KEY_USAGE_EXTENSION = 21; 
  CAPICOM_OID_CERTIFICATE_TEMPLATE_EXTENSION = 22; 
  CAPICOM_OID_APPLICATION_CERT_POLICIES_EXTENSION = 23; 
  CAPICOM_OID_APPLICATION_POLICY_MAPPINGS_EXTENSION = 24; 
  CAPICOM_OID_APPLICATION_POLICY_CONSTRAINTS_EXTENSION = 25; 
  CAPICOM_OID_AUTHORITY_INFO_ACCESS_EXTENSION = 26; 
  CAPICOM_OID_SERVER_AUTH_EKU = 100; 
  CAPICOM_OID_CLIENT_AUTH_EKU = 101; 
  CAPICOM_OID_CODE_SIGNING_EKU = 102; 
  CAPICOM_OID_EMAIL_PROTECTION_EKU = 103; 
  CAPICOM_OID_IPSEC_END_SYSTEM_EKU = 104; 
  CAPICOM_OID_IPSEC_TUNNEL_EKU = 105; 
  CAPICOM_OID_IPSEC_USER_EKU = 106; 
  CAPICOM_OID_TIME_STAMPING_EKU = 107; 
  CAPICOM_OID_CTL_USAGE_SIGNING_EKU = 108; 
  CAPICOM_OID_TIME_STAMP_SIGNING_EKU = 109; 
  CAPICOM_OID_SERVER_GATED_CRYPTO_EKU = 110; 
  CAPICOM_OID_ENCRYPTING_FILE_SYSTEM_EKU = 111; 
  CAPICOM_OID_EFS_RECOVERY_EKU = 112; 
  CAPICOM_OID_WHQL_CRYPTO_EKU = 113; 
  CAPICOM_OID_NT5_CRYPTO_EKU = 114; 
  CAPICOM_OID_OEM_WHQL_CRYPTO_EKU = 115; 
  CAPICOM_OID_EMBEDED_NT_CRYPTO_EKU = 116; 
  CAPICOM_OID_ROOT_LIST_SIGNER_EKU = 117; 
  CAPICOM_OID_QUALIFIED_SUBORDINATION_EKU = 118; 
  CAPICOM_OID_KEY_RECOVERY_EKU = 119; 
  CAPICOM_OID_DIGITAL_RIGHTS_EKU = 120; 
  CAPICOM_OID_LICENSES_EKU = 121; 
  CAPICOM_OID_LICENSE_SERVER_EKU = 122; 
  CAPICOM_OID_SMART_CARD_LOGON_EKU = 123; 
  CAPICOM_OID_PKIX_POLICY_QUALIFIER_CPS = 124; 
  CAPICOM_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = 125; 
end;

type CAPICOM_PROPID // #docl  Комментарии отсутствуют. </brief> 
                    = longint;
const 
  CAPICOM_PROPID_UNKNOWN = 0; 
  CAPICOM_PROPID_KEY_PROV_HANDLE = 1; 
  CAPICOM_PROPID_KEY_PROV_INFO = 2; 
  CAPICOM_PROPID_SHA1_HASH = 3; 
  CAPICOM_PROPID_HASH_PROP = 3; 
  CAPICOM_PROPID_MD5_HASH = 4; 
  CAPICOM_PROPID_KEY_CONTEXT = 5; 
  CAPICOM_PROPID_KEY_SPEC = 6; 
  CAPICOM_PROPID_IE30_RESERVED = 7; 
  CAPICOM_PROPID_PUBKEY_HASH_RESERVED = 8; 
  CAPICOM_PROPID_ENHKEY_USAGE = 9; 
  CAPICOM_PROPID_CTL_USAGE = 9; 
  CAPICOM_PROPID_NEXT_UPDATE_LOCATION = 10; 
  CAPICOM_PROPID_FRIENDLY_NAME = 11; 
  CAPICOM_PROPID_PVK_FILE = 12; 
  CAPICOM_PROPID_DESCRIPTION = 13; 
  CAPICOM_PROPID_ACCESS_STATE = 14; 
  CAPICOM_PROPID_SIGNATURE_HASH = 15; 
  CAPICOM_PROPID_SMART_CARD_DATA = 16; 
  CAPICOM_PROPID_EFS = 17; 
  CAPICOM_PROPID_FORTEZZA_DATA = 18; 
  CAPICOM_PROPID_ARCHIVED = 19; 
  CAPICOM_PROPID_KEY_IDENTIFIER = 20; 
  CAPICOM_PROPID_AUTO_ENROLL = 21; 
  CAPICOM_PROPID_PUBKEY_ALG_PARA = 22; 
  CAPICOM_PROPID_CROSS_CERT_DIST_POINTS = 23; 
  CAPICOM_PROPID_ISSUER_PUBLIC_KEY_MD5_HASH = 24; 
  CAPICOM_PROPID_SUBJECT_PUBLIC_KEY_MD5_HASH = 25; 
  CAPICOM_PROPID_ENROLLMENT = 26; 
  CAPICOM_PROPID_DATE_STAMP = 27; 
  CAPICOM_PROPID_ISSUER_SERIAL_NUMBER_MD5_HASH = 28; 
  CAPICOM_PROPID_SUBJECT_NAME_MD5_HASH = 29; 
  CAPICOM_PROPID_EXTENDED_ERROR_INFO = 30; 
  CAPICOM_PROPID_RENEWAL = 64; 
  CAPICOM_PROPID_ARCHIVED_KEY_HASH = 65; 
  CAPICOM_PROPID_FIRST_RESERVED = 66; 
  CAPICOM_PROPID_LAST_RESERVED = 32767; 
  CAPICOM_PROPID_FIRST_USER = 32768; 
  CAPICOM_PROPID_LAST_USER = 65535; 
end;

type CAPICOM_PROV_TYPE // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  CAPICOM_PROV_RSA_FULL = 1; 
  CAPICOM_PROV_RSA_SIG = 2; 
  CAPICOM_PROV_DSS = 3; 
  CAPICOM_PROV_FORTEZZA = 4; 
  CAPICOM_PROV_MS_EXCHANGE = 5; 
  CAPICOM_PROV_SSL = 6; 
  CAPICOM_PROV_RSA_SCHANNEL = 12; 
  CAPICOM_PROV_DSS_DH = 13; 
  CAPICOM_PROV_EC_ECDSA_SIG = 14; 
  CAPICOM_PROV_EC_ECNRA_SIG = 15; 
  CAPICOM_PROV_EC_ECDSA_FULL = 16; 
  CAPICOM_PROV_EC_ECNRA_FULL = 17; 
  CAPICOM_PROV_DH_SCHANNEL = 18; 
  CAPICOM_PROV_SPYRUS_LYNKS = 20; 
  CAPICOM_PROV_RNG = 21; 
  CAPICOM_PROV_INTEL_SEC = 22; 
  CAPICOM_PROV_REPLACE_OWF = 23; 
  CAPICOM_PROV_RSA_AES = 24; 
end;

type CAPICOM_CERTIFICATE_SAVE_AS_TYPE // #docl  Комментарии отсутствуют. </brief> 
                                      = longint;
const 
  CAPICOM_CERTIFICATE_SAVE_AS_PFX = 0; 
  CAPICOM_CERTIFICATE_SAVE_AS_CER = 1; 
end;

type CAPICOM_CERTIFICATES_SAVE_AS_TYPE // #docl  Комментарии отсутствуют. </brief> 
                                       = longint;
const 
  CAPICOM_CERTIFICATES_SAVE_AS_SERIALIZED = 0; 
  CAPICOM_CERTIFICATES_SAVE_AS_PKCS7 = 1; 
  CAPICOM_CERTIFICATES_SAVE_AS_PFX = 2; 
end;

type CAPICOM_CERTIFICATE_INCLUDE_OPTION // #docl  Комментарии отсутствуют. </brief> 
                                        = longint;
const 
  CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT = 0; 
  CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN = 1; 
  CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY = 2; 
end;

type CAPICOM_KEY_SPEC // #docl  Комментарии отсутствуют. </brief> 
                      = longint;
const 
  CAPICOM_KEY_SPEC_KEYEXCHANGE = 1; 
  CAPICOM_KEY_SPEC_SIGNATURE = 2; 
end;

type CAPICOM_KEY_LOCATION // #docl  Комментарии отсутствуют. </brief> 
                          = longint;
const 
  CAPICOM_CURRENT_USER_KEY = 0; 
  CAPICOM_LOCAL_MACHINE_KEY = 1; 
end;

type CAPICOM_KEY_STORAGE_FLAG // #docl  Комментарии отсутствуют. </brief> 
                              = longint;
const 
  CAPICOM_KEY_STORAGE_DEFAULT = 0; 
  CAPICOM_KEY_STORAGE_EXPORTABLE = 1; 
  CAPICOM_KEY_STORAGE_USER_PROTECTED = 2; 
end;

type CAPICOM_EXPORT_FLAG // #docl  Комментарии отсутствуют. </brief> 
                         = longint;
const 
  CAPICOM_EXPORT_DEFAULT = 0; 
  CAPICOM_EXPORT_IGNORE_PRIVATE_KEY_NOT_EXPORTABLE_ERROR = 1; 
end;

type CAPICOM_KEY_USAGE // #docl  Комментарии отсутствуют. </brief> 
                       = longint;
const 
  CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE = 128; 
  CAPICOM_NON_REPUDIATION_KEY_USAGE = 64; 
  CAPICOM_KEY_ENCIPHERMENT_KEY_USAGE = 32; 
  CAPICOM_DATA_ENCIPHERMENT_KEY_USAGE = 16; 
  CAPICOM_KEY_AGREEMENT_KEY_USAGE = 8; 
  CAPICOM_KEY_CERT_SIGN_KEY_USAGE = 4; 
  CAPICOM_OFFLINE_CRL_SIGN_KEY_USAGE = 2; 
  CAPICOM_CRL_SIGN_KEY_USAGE = 2; 
  CAPICOM_ENCIPHER_ONLY_KEY_USAGE = 1; 
  CAPICOM_DECIPHER_ONLY_KEY_USAGE = 32768; 
end;

type CAPICOM_CERTIFICATE_FIND_TYPE // #docl  Комментарии отсутствуют. </brief> 
                                   = longint;
const 
  CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0; 
  CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1; 
  CAPICOM_CERTIFICATE_FIND_ISSUER_NAME = 2; 
  CAPICOM_CERTIFICATE_FIND_ROOT_NAME = 3; 
  CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME = 4; 
  CAPICOM_CERTIFICATE_FIND_EXTENSION = 5; 
  CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY = 6; 
  CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY = 7; 
  CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY = 8; 
  CAPICOM_CERTIFICATE_FIND_TIME_VALID = 9; 
  CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID = 10; 
  CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED = 11; 
  CAPICOM_CERTIFICATE_FIND_KEY_USAGE = 12; 
end;

type CAPICOM_HASH_ALGORITHM // #docl  Комментарии отсутствуют. </brief> 
                            = longint;
const 
  CAPICOM_HASH_ALGORITHM_SHA1 = 0; 
  CAPICOM_HASH_ALGORITHM_MD2 = 1; 
  CAPICOM_HASH_ALGORITHM_MD4 = 2; 
  CAPICOM_HASH_ALGORITHM_MD5 = 3; 
  CAPICOM_HASH_ALGORITHM_SHA_256 = 4; 
  CAPICOM_HASH_ALGORITHM_SHA_384 = 5; 
  CAPICOM_HASH_ALGORITHM_SHA_512 = 6; 
end;

type _CRYPT_KEY_PROV_PARAM // #docl  Комментарии отсутствуют. </brief> 
                           = record 
  dwParam : longint; 
  pbData : pointer /* [char] */; 
  cbData : longint; 
  dwFlags : longint; 
end;

type _CRYPT_KEY_PROV_INFO // #docl  Комментарии отсутствуют. </brief> 
                          = record 
  pwszContainerName : string; 
  pwszProvName : string; 
  dwProvType : longint; 
  dwFlags : longint; 
  cProvParam : longint; 
  rgProvParam : _CRYPT_KEY_PROV_PARAM; 
  dwKeySpec : longint; 
end;

type _CERT_KEY_CONTEXT // #docl  Комментарии отсутствуют. </brief> 
                       = record 
  cbSize : longint; 
  //__MIDL____MIDL_itf_capicom_0001_00640106 : __MIDL___MIDL_itf_capicom_0001_0064_0024; 
  dwKeySpec : longint; 
end;


//--- arrays



//--- Object Interfaces ------------------

// unsupported type info Module Constants

ObjInterface comISettings( comIDispatch );
// #docl ISettings Interface </brief> 
  property  EnablePromptForCertificateUI // #docl Property to get the current setting to enable/disable dialog box to prompt for certificate used to sign/decrypt a message. </brief> 
                                         : boolean Read Write;
  property  ActiveDirectorySearchLocation // #docl Property to get the current Active Directory search location. </brief> 
                                          : CAPICOM_ACTIVE_DIRECTORY_SEARCH_LOCATION Read Write;
end;

VipInterface vcomISettings( vcomIDispatch ) Implements comISettings (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEKU( comIDispatch );
// #docl IEKU Interface </brief> 
  property  Name // #docl Default property to get EKU name. </brief> 
                 : CAPICOM_EKU Read Write;
  property  OID // #docl Property to get the actual EKU OID string as defined in WinCrypt.h. </brief> 
                : string Read Write;
end;

VipInterface vcomIEKU( vcomIDispatch ) Implements comIEKU (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEKUs( comIDispatch );
// #docl IEKUs Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
end;

VipInterface vcomIEKUs( vcomIDispatch ) Implements comIEKUs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIKeyUsage( comIDispatch );
// #docl IKeyUsage Interface </brief> 
  property  IsPresent // #docl Property to check if the KeyUsage extension is present. </brief> 
                      : boolean Read;
  property  IsCritical // #docl Property to check if the KeyUsage extension is marked critical. </brief> 
                       : boolean Read;
  property  IsDigitalSignatureEnabled // #docl Property to check if the digitalSignature bit is set. </brief> 
                                      : boolean Read;
  property  IsNonRepudiationEnabled // #docl Property to check if the nonRepudiation bit is set. </brief> 
                                    : boolean Read;
  property  IsKeyEnciphermentEnabled // #docl Property to check if the keyEncipherment bit is set. </brief> 
                                     : boolean Read;
  property  IsDataEnciphermentEnabled // #docl Property to check if the dataEncipherment bit is set. </brief> 
                                      : boolean Read;
  property  IsKeyAgreementEnabled // #docl Property to check if the keyAgreement bit is set. </brief> 
                                  : boolean Read;
  property  IsKeyCertSignEnabled // #docl Property to check if the keyCertSign bit is set. </brief> 
                                 : boolean Read;
  property  IsCRLSignEnabled // #docl Property to check if the cRLSign bit is set. </brief> 
                             : boolean Read;
  property  IsEncipherOnlyEnabled // #docl Property to check if the encipherOnly bit is set. </brief> 
                                  : boolean Read;
  property  IsDecipherOnlyEnabled // #docl Property to check if the decipherOnly bit is set. </brief> 
                                  : boolean Read;
end;

VipInterface vcomIKeyUsage( vcomIDispatch ) Implements comIKeyUsage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIExtendedKeyUsage( comIDispatch );
// #docl IExtendedKeyUsage Interface </brief> 
  property  IsPresent // #docl Property to check if the EKU extension is present. </brief> 
                      : boolean Read;
  property  IsCritical // #docl Property to check if the EKU extension is marked critical. </brief> 
                       : boolean Read;
  property  EKUs // #docl Property to return an EKUs collection object. </brief> 
                 : comIEKUs Read;
end;

VipInterface vcomIExtendedKeyUsage( vcomIDispatch ) Implements comIExtendedKeyUsage (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIBasicConstraints( comIDispatch );
// #docl IBasicConstraints Interface </brief> 
  property  IsPresent // #docl Property to check if the BasicConstraints extension is present. </brief> 
                      : boolean Read;
  property  IsCritical // #docl Property to check if the BasicConstraints extension is marked critical. </brief> 
                       : boolean Read;
  property  IsCertificateAuthority // #docl Property to check if it is a certificate authority. </brief> 
                                   : boolean Read;
  property  IsPathLenConstraintPresent // #docl Property to check if the path length constraint value is present. </brief> 
                                       : boolean Read;
  property  PathLenConstraint // #docl Property to get the path length constraint value. </brief> 
                              : longint Read;
end;

VipInterface vcomIBasicConstraints( vcomIDispatch ) Implements comIBasicConstraints (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertificateStatus( comIDispatch );
// #docl ICertificateStatus Interface </brief> 
  property  Result // #docl Default property to get the certificate validity result. </brief> 
                   : boolean Read;
  property  CheckFlag // #docl Property to get validity check flag. </brief> 
                      : CAPICOM_CHECK_FLAG Read Write;
  function  EKU  // #docl Method to return an IEKU object for setting extended key usage to check (default is no EKU check). </brief> 
                  : comIEKU; // #docl Результат типа comIEKU
end;

VipInterface vcomICertificateStatus( vcomIDispatch ) Implements comICertificateStatus (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertificateStatus2( comICertificateStatus );
// #docl ICertificateStatus2 Interface </brief> 
  property  VerificationTime // #docl Property to get verification time. </brief> 
                             : DATE Read Write;
  property  UrlRetrievalTimeout // #docl Property to get the URL retrieval timeout value (in seconds). </brief> 
                                : longint Read Write;
  function  CertificatePolicies  // #docl Method to get the certificate policies OIDs collection. </brief> 
                                  : comIOIDs; // #docl Результат типа comIOIDs
  function  ApplicationPolicies  // #docl Method to get the application policies OIDs collection. </brief> 
                                  : comIOIDs; // #docl Результат типа comIOIDs
end;

VipInterface vcomICertificateStatus2( vcomICertificateStatus ) Implements comICertificateStatus2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertificateStatus3( comICertificateStatus2 );
// #docl ICertificateStatus3 Interface </brief> 
  property  ValidationCertificates // #docl Property to get useful validation certificates. </brief> 
                                   : comICertificates Read;
end;

VipInterface vcomICertificateStatus3( vcomICertificateStatus2 ) Implements comICertificateStatus3 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIOIDs( comIDispatch );
// #docl IOIDs Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : VARIANT ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
  procedure Add  // #docl Method Add. </brief> 
                  ( pVal // #docl Тип параметра: входной.
                  : comIOID );
  procedure Remove  // #docl Method Remove. </brief> 
                     ( aIndex // #docl Тип параметра: входной.
                     : VARIANT );
  procedure Clear  // #docl Method Clear. </brief> 
                   ;
end;

VipInterface vcomIOIDs( vcomIDispatch ) Implements comIOIDs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIOID( comIDispatch );
// #docl IOID Interface </brief> 
  property  Name // #docl Default property to get name. </brief> 
                 : CAPICOM_OID Read Write;
  property  FriendlyName // #docl Default property to get friendly name. </brief> 
                         : string Read Write;
  property  Value // #docl Property to get the OID string value as defined in WinCrypt.h. </brief> 
                  : string Read Write;
end;

VipInterface vcomIOID( vcomIDispatch ) Implements comIOID (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertificates( comIDispatch );
// #docl ICertificates Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
end;

VipInterface vcomICertificates( vcomIDispatch ) Implements comICertificates (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertificate( comIDispatch );
// #docl ICertificate Interface </brief> 
  property  Version // #docl Property to get the version number. </brief> 
                    : longint Read;
  property  SerialNumber // #docl Property to get the serial number. </brief> 
                         : string Read;
  property  SubjectName // #docl Property to get the subject's name. </brief> 
                        : string Read;
  property  IssuerName // #docl Property to get the issuer's name. </brief> 
                       : string Read;
  property  ValidFromDate // #docl Property to get the valid notBefore date. </brief> 
                          : DATE Read;
  property  ValidToDate // #docl Property to get the valid notAfter date. </brief> 
                        : DATE Read;
  property  Thumbprint // #docl Property to get the SHA1 hash. </brief> 
                       : string Read;
  function  HasPrivateKey  // #docl Method to check if private key is available. </brief> 
                            : boolean; // #docl Результат типа boolean
  function  GetInfo  // #docl Method to get other simple information of the certificate. </brief> 
                      ( InfoType // #docl Тип параметра: входной.
                      : CAPICOM_CERT_INFO_TYPE ) : string; // #docl Результат типа string
  function  IsValid  // #docl Method to return the ICertificateStatus object for checking if the certificate is valid. </brief> 
                      : comICertificateStatus; // #docl Результат типа comICertificateStatus
  function  KeyUsage  // #docl Method to return the KeyUsage object. </brief> 
                       : comIKeyUsage; // #docl Результат типа comIKeyUsage
  function  ExtendedKeyUsage  // #docl Method to return the ExtendedKeyUsage object. </brief> 
                               : comIExtendedKeyUsage; // #docl Результат типа comIExtendedKeyUsage
  function  BasicConstraints  // #docl Method to return the BasicConstraints object. </brief> 
                               : comIBasicConstraints; // #docl Результат типа comIBasicConstraints
  function  Export  // #docl Method to export the certificate. </brief> 
                     ( EncodingType // #docl Тип параметра: входной.
                     : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  procedure __Import  // #docl Method to import a certificate. </brief> 
                       ( EncodedCertificate // #docl Тип параметра: входной.
                       : string );
  procedure Display  // #docl Method to display the certificate. </brief> 
                     ;
end;

VipInterface vcomICertificate( vcomIDispatch ) Implements comICertificate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertificate2( comICertificate );
// #docl ICertificate2 Interface </brief> 
  property  Archived // #docl Property to get archived status. </brief> 
                     : boolean Read Write;
  function  Template  // #docl Method to return the Template object. </brief> 
                       : comITemplate; // #docl Результат типа comITemplate
  function  PublicKey  // #docl Method to return the PublicKey object. </brief> 
                        : comIPublicKey; // #docl Результат типа comIPublicKey
  property  PrivateKey // #docl Property to get the PrivateKey object. </brief> 
                       : comIPrivateKey Read Write;
  function  Extensions  // #docl Method to return the Extensions object. </brief> 
                         : comIExtensions; // #docl Результат типа comIExtensions
  function  ExtendedProperties  // #docl Method to return the ExtendedProperties object. </brief> 
                                 : comIExtendedProperties; // #docl Результат типа comIExtendedProperties
  procedure Load  // #docl Method to load a certificate from file. </brief> 
                   ( FileName // #docl Тип параметра: входной.
                   : string; Password // #docl Тип параметра: входной.
                   : string; KeyStorageFlag // #docl Тип параметра: входной.
                   : CAPICOM_KEY_STORAGE_FLAG; KeyLocation // #docl Тип параметра: входной.
                   : CAPICOM_KEY_LOCATION );
  procedure __Save  // #docl Method to save a certificate to file, with option to include the chain for PFX file. </brief> 
                     ( FileName // #docl Тип параметра: входной.
                     : string; Password // #docl Тип параметра: входной.
                     : string; SaveAs // #docl Тип параметра: входной.
                     : CAPICOM_CERTIFICATE_SAVE_AS_TYPE; IncludeOption // #docl Тип параметра: входной.
                     : CAPICOM_CERTIFICATE_INCLUDE_OPTION );
end;

VipInterface vcomICertificate2( vcomICertificate ) Implements comICertificate2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comITemplate( comIDispatch );
// #docl ITemplate Interface </brief> 
  property  IsPresent // #docl Property to check if the CertificateTemplate extension is present. </brief> 
                      : boolean Read;
  property  IsCritical // #docl Property to check if the CertificateTemplate extension is marked critical. </brief> 
                       : boolean Read;
  property  Name // #docl Property to get the name of the CertificateTemplate extension. </brief> 
                 : string Read;
  property  OID // #docl Property to get the OID object. </brief> 
                : comIOID Read;
  property  MajorVersion // #docl Property to get the major version number. </brief> 
                         : longint Read;
  property  MinorVersion // #docl Property to get the minor version number. </brief> 
                         : longint Read;
end;

VipInterface vcomITemplate( vcomIDispatch ) Implements comITemplate (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIPublicKey( comIDispatch );
// #docl IPublicKey Interface </brief> 
  property  Algorithm // #docl Default property to get the algorithm OID object. </brief> 
                      : comIOID Read;
  property  Length_ // #docl Property to get key length. </brief> 
                   : longint Read;
  property  EncodedKey // #docl Property to get the EncodedData object for the key. </brief> 
                       : comIEncodedData Read;
  property  EncodedParameters // #docl Property to get the EncodedData object for the parameters. </brief> 
                              : comIEncodedData Read;
end;

VipInterface vcomIPublicKey( vcomIDispatch ) Implements comIPublicKey (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEncodedData( comIDispatch );
// #docl IEncodedData Interface </brief> 
  function  Get_Value  // #docl Default property to get the encoded data. </brief> 
                        ( EncodingType // #docl Тип параметра: входной.
                        : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  function  Format  // #docl Method to format the encoded data for display purpose. </brief> 
                     ( bMultiLines // #docl Тип параметра: входной.
                     : boolean ) : string; // #docl Результат типа string
  function  Decoder  // #docl Method to return the decoder object (IDispatch), which can be NULL. </brief> 
                      : comIDispatch; // #docl Результат типа comIDispatch
end;

VipInterface vcomIEncodedData( vcomIDispatch ) Implements comIEncodedData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIPrivateKey( comIDispatch );
// #docl IPrivateKey Interface </brief> 
  property  ContainerName // #docl Default property to get the key container name. </brief> 
                          : string Read;
  property  UniqueContainerName // #docl Property to get the unique key container name. </brief> 
                                : string Read;
  property  ProviderName // #docl Property to get the provider name. </brief> 
                         : string Read;
  property  ProviderType // #docl Property to get the provider type. </brief> 
                         : CAPICOM_PROV_TYPE Read;
  property  KeySpec // #docl Property to get the key spec value. </brief> 
                    : CAPICOM_KEY_SPEC Read;
  function  IsAccessible  // #docl Method to check if the key is accessible. </brief> 
                           : boolean; // #docl Результат типа boolean
  function  IsProtected  // #docl Method to check if the key is protected. </brief> 
                          : boolean; // #docl Результат типа boolean
  function  IsExportable  // #docl Method to check if the key is marked exportable. </brief> 
                           : boolean; // #docl Результат типа boolean
  function  IsRemovable  // #docl Method to check if the key is in removable storage. </brief> 
                          : boolean; // #docl Результат типа boolean
  function  IsMachineKeyset  // #docl Method to check if the key is a machine keyset. </brief> 
                              : boolean; // #docl Результат типа boolean
  function  IsHardwareDevice  // #docl Method to check if the key is stored in hardware device. </brief> 
                               : boolean; // #docl Результат типа boolean
  procedure __Open  // #docl Method to open an existing key container. </brief> 
                     ( ContainerName // #docl Тип параметра: входной.
                     : string; ProviderName // #docl Тип параметра: входной.
                     : string; ProviderType // #docl Тип параметра: входной.
                     : CAPICOM_PROV_TYPE; KeySpec // #docl Тип параметра: входной.
                     : CAPICOM_KEY_SPEC; StoreLocation // #docl Тип параметра: входной.
                     : CAPICOM_STORE_LOCATION; bCheckExistence // #docl Тип параметра: входной.
                     : boolean );
  procedure Delete  // #docl Method to delete the existing key container. </brief> 
                    ;
end;

VipInterface vcomIPrivateKey( vcomIDispatch ) Implements comIPrivateKey (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIExtensions( comIDispatch );
// #docl IExtensions Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : VARIANT ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
end;

VipInterface vcomIExtensions( vcomIDispatch ) Implements comIExtensions (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIExtendedProperties( comIDispatch );
// #docl IExtendedProperties Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
  procedure Add  // #docl Method Add. </brief> 
                  ( pVal // #docl Тип параметра: входной.
                  : comIExtendedProperty );
  procedure Remove  // #docl Method Remove. </brief> 
                     ( PropID // #docl Тип параметра: входной.
                     : CAPICOM_PROPID );
end;

VipInterface vcomIExtendedProperties( vcomIDispatch ) Implements comIExtendedProperties (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIExtendedProperty( comIDispatch );
// #docl IExtendedProperty Interface </brief> 
  property  PropID // #docl Default property to get PropID. </brief> 
                   : CAPICOM_PROPID Read Write;
  function  Get_Value  // #docl Property to get the extended property data. </brief> 
                        ( EncodingType // #docl Тип параметра: входной.
                        : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  procedure Put_Value  // #docl Property to get the extended property data. </brief> 
                        ( EncodingType // #docl Тип параметра: входной.
                        : CAPICOM_ENCODING_TYPE; pVal // #docl Тип параметра: входной.
                        : string );
end;

VipInterface vcomIExtendedProperty( vcomIDispatch ) Implements comIExtendedProperty (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertContext( comIDispatch );
// #docl ICertContext Interface </brief> 
  property  CertContext // #docl Poperty to get PCCERT_CONTEXT of the certificate which is represented as a long. Note that you MUST call either the FreeContext method or CAPI's CertFreeCertificateContext() function, to free the context. </brief> 
                        : longint Read Write;
  procedure FreeContext  // #docl Method to free a PCCERT_CONTEXT. Note that this method does not free the PCCERT_CONTEXT contained within the Certificate object. It is intended for freeing context acquired through the CertContext property. </brief> 
                          ( pCertContext // #docl Тип параметра: входной.
                          : longint );
end;

VipInterface vcomICertContext( vcomIDispatch ) Implements comICertContext (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertificates2( comICertificates );
// #docl ICertificates2 Interface </brief> 
  function  Find  // #docl Method to find certificates in the collection. </brief> 
                   ( FindType // #docl Тип параметра: входной.
                   : CAPICOM_CERTIFICATE_FIND_TYPE; varCriteria // #docl Тип параметра: входной.
                   : VARIANT; bFindValidOnly // #docl Тип параметра: входной.
                   : boolean ) : comICertificates2; // #docl Результат типа comICertificates2
  function  __Select  // #docl Method to display the certificate selection dialog box. </brief> 
                     ( Title // #docl Тип параметра: входной.
                     : string; DisplayString // #docl Тип параметра: входной.
                     : string; bMultiSelect // #docl Тип параметра: входной.
                     : boolean ) : comICertificates2; // #docl Результат типа comICertificates2
  procedure Add  // #docl Method to add a certificate to the collection. </brief> 
                  ( pVal // #docl Тип параметра: входной.
                  : comICertificate2 );
  procedure Remove  // #docl Method to remove a certificate in the collection. </brief> 
                     ( aIndex // #docl Тип параметра: входной.
                     : VARIANT );
  procedure Clear  // #docl Method to remove all certificates in the collection. </brief> 
                   ;
  procedure __Save  // #docl Method to save certificate collection to file. </brief> 
                     ( FileName // #docl Тип параметра: входной.
                     : string; Password // #docl Тип параметра: входной.
                     : string; SaveAs // #docl Тип параметра: входной.
                     : CAPICOM_CERTIFICATES_SAVE_AS_TYPE; ExportFlag // #docl Тип параметра: входной.
                     : CAPICOM_EXPORT_FLAG );
end;

VipInterface vcomICertificates2( vcomICertificates ) Implements comICertificates2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICCertificates( comIDispatch );
// #docl ICCertificates Interface </brief> 
end;

VipInterface vcomICCertificates( vcomIDispatch ) Implements comICCertificates (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChain( comIDispatch );
// #docl IChain Interface </brief> 
  property  Certificates // #docl Default property to get an ordered certificates collection object representing the chain, where Item(1) represents the end certificate and Item(Count()) represents the root certificate. </brief> 
                         : comICertificates Read;
  function  Get_Status  // #docl Property to get validity status of the chain or a particular certficate. For overall chain status, specify Index of 0, otherwise specify the 1 for the end certificate, and Certificates.Count() for the root certificate. </brief> 
                         ( aIndex // #docl Тип параметра: входной.
                         : longint ) : longint; // #docl Результат типа longint
  function  __Build  // #docl Method to build the certificate chain and get the overall result of the chain validity. </brief> 
                      ( pICertificate // #docl Тип параметра: входной.
                      : comICertificate ) : boolean; // #docl Результат типа boolean
end;

VipInterface vcomIChain( vcomIDispatch ) Implements comIChain (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChain2( comIChain );
// #docl IChain2 Interface </brief> 
  function  CertificatePolicies  // #docl Method to get the certificate policies OIDs collection. </brief> 
                                  : comIOIDs; // #docl Результат типа comIOIDs
  function  ApplicationPolicies  // #docl Method to get the application policies OIDs collection. </brief> 
                                  : comIOIDs; // #docl Результат типа comIOIDs
  function  ExtendedErrorInfo  // #docl Method to get the extended error information description string. </brief> 
                                ( aIndex // #docl Тип параметра: входной.
                                : longint ) : string; // #docl Результат типа string
end;

VipInterface vcomIChain2( vcomIChain ) Implements comIChain2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIChainContext( comIDispatch );
// #docl IChainContext Interface </brief> 
  property  ChainContext // #docl Property to get PCCERT_CHAIN_CONTEXT of the certificate chain which is represented as a long. Note that you MUST call either the FreeContext method or CAPI's CertFreeCertificateChain() function to free the context. </brief> 
                         : longint Read Write;
  procedure FreeContext  // #docl Method to free a PCCERT_CHAIN_CONTEXT. Note that this method does not free the PCCERT_CHAIN_CONTEXT contained within the Chain object. It is intended for freeing context acquired through the ChainContext property. </brief> 
                          ( pChainContext // #docl Тип параметра: входной.
                          : longint );
end;

VipInterface vcomIChainContext( vcomIDispatch ) Implements comIChainContext (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIStore( comIDispatch );
// #docl IStore Interface </brief> 
  property  Certificates // #docl Default property to get a Certificates collection object. </brief> 
                         : comICertificates Read;
  procedure __Open  // #docl Method to open a store. </brief> 
                     ( StoreLocation // #docl Тип параметра: входной.
                     : CAPICOM_STORE_LOCATION; StoreName // #docl Тип параметра: входной.
                     : string; OpenMode // #docl Тип параметра: входной.
                     : CAPICOM_STORE_OPEN_MODE );
  procedure Add  // #docl Method to add a certificate to the store. </brief> 
                  ( pVal // #docl Тип параметра: входной.
                  : comICertificate );
  procedure Remove  // #docl Method to remove a certificate from the store. </brief> 
                     ( pVal // #docl Тип параметра: входной.
                     : comICertificate );
  function  Export  // #docl Method to export the store. </brief> 
                     ( SaveAs // #docl Тип параметра: входной.
                     : CAPICOM_STORE_SAVE_AS_TYPE; EncodingType // #docl Тип параметра: входной.
                     : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  procedure __Import  // #docl Method to import a store. </brief> 
                       ( EncodedStore // #docl Тип параметра: входной.
                       : string );
end;

VipInterface vcomIStore( vcomIDispatch ) Implements comIStore (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIStore2( comIStore );
// #docl IStore2 Interface </brief> 
  procedure Load  // #docl Method to load certificate(s) from file. </brief> 
                   ( FileName // #docl Тип параметра: входной.
                   : string; Password // #docl Тип параметра: входной.
                   : string; KeyStorageFlag // #docl Тип параметра: входной.
                   : CAPICOM_KEY_STORAGE_FLAG );
end;

VipInterface vcomIStore2( vcomIStore ) Implements comIStore2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIStore3( comIStore2 );
// #docl IStore3 Interface </brief> 
  property  Name // #docl Method to get the name of the store. </brief> 
                 : string Read;
  property  Location // #docl Method to get the location of the store. </brief> 
                     : CAPICOM_STORE_LOCATION Read;
  function  Delete  // #docl Method to delete the store. </brief> 
                     : boolean; // #docl Результат типа boolean
  procedure Close  // #docl Method to close the store. </brief> 
                   ;
end;

VipInterface vcomIStore3( vcomIStore2 ) Implements comIStore3 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertStore( comIDispatch );
// #docl ICertStore Interface </brief> 
  property  StoreHandle // #docl Property to get HCERTSTORE of the certificate store which is represented as a long. Note that you MUST call either the CloseHandle method or CAPI's CertCloseStore() function to close the handle. </brief> 
                        : longint Read Write;
  property  StoreLocation // #docl Property to get CAPICOM_STORE_LOCATION of the certificate store. </brief> 
                          : CAPICOM_STORE_LOCATION Read Write;
  procedure CloseHandle  // #docl Method to close a HCERTSTORE. Note that this method does not close the HCERTSTORE contained within the Store object. It is intended for closing handle acquired through the StoreHandle property. </brief> 
                          ( hCertStore // #docl Тип параметра: входной.
                          : longint );
end;

VipInterface vcomICertStore( vcomIDispatch ) Implements comICertStore (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIAttribute( comIDispatch );
// #docl IAttribute Interface </brief> 
  property  Name // #docl Default property to get attribute name. </brief> 
                 : CAPICOM_ATTRIBUTE Read Write;
  property  Value // #docl Property to get attribute value. </brief> 
                  : VARIANT Read Write;
end;

VipInterface vcomIAttribute( vcomIDispatch ) Implements comIAttribute (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIAttributes( comIDispatch );
// #docl IAttributes Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
  procedure Add  // #docl Method Add. </brief> 
                  ( pVal // #docl Тип параметра: входной.
                  : comIAttribute );
  procedure Remove  // #docl Method Remove. </brief> 
                     ( aIndex // #docl Тип параметра: входной.
                     : longint );
  procedure Clear  // #docl Method Clear. </brief> 
                   ;
end;

VipInterface vcomIAttributes( vcomIDispatch ) Implements comIAttributes (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISigner( comIDispatch );
// #docl ISigner Interface </brief> 
  property  Certificate // #docl Default property to get signer's certificate. </brief> 
                        : comICertificate Read Write;
  property  AuthenticatedAttributes // #docl Property to add/remove authenticated attributes. </brief> 
                                    : comIAttributes Read;
end;

VipInterface vcomISigner( vcomIDispatch ) Implements comISigner (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISigner2( comISigner );
// #docl ISigner2 Interface </brief> 
  property  Chain // #docl Property to get signer's chain. </brief> 
                  : comIChain Read;
  property  Options // #docl Property to get signer options. </brief> 
                    : CAPICOM_CERTIFICATE_INCLUDE_OPTION Read Write;
  procedure Load  // #docl Method to load signing certificate from a PFX file. </brief> 
                   ( FileName // #docl Тип параметра: входной.
                   : string; Password // #docl Тип параметра: входной.
                   : string );
end;

VipInterface vcomISigner2( vcomISigner ) Implements comISigner2 (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICSigner( comIDispatch );
// #docl ICSigner Interface </brief> 
  property  AdditionalStore // #docl Property to get HCERSTORE of the additional certificate store which is represented as a long. </brief> 
                            : longint Read Write;
end;

VipInterface vcomICSigner( vcomIDispatch ) Implements comICSigner (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISigners( comIDispatch );
// #docl ISigners Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
end;

VipInterface vcomISigners( vcomIDispatch ) Implements comISigners (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comISignedData( comIDispatch );
// #docl ISignedData Interface </brief> 
  property  Content // #docl Default property to set content to be signed. </brief> 
                    : string Read Write;
  property  Signers // #docl Property to get all the content signers as an ISigners collection object. </brief> 
                    : comISigners Read;
  property  Certificates // #docl Property to get all certificates in the signed message. </brief> 
                         : comICertificates Read;
  function  Sign  // #docl Method to sign the message. </brief> 
                   ( pSigner // #docl Тип параметра: входной.
                   : comISigner; bDetached // #docl Тип параметра: входной.
                   : boolean; EncodingType // #docl Тип параметра: входной.
                   : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  function  CoSign  // #docl Method to CoSign the message. </brief> 
                     ( pSigner // #docl Тип параметра: входной.
                     : comISigner; EncodingType // #docl Тип параметра: входной.
                     : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  procedure Verify  // #docl Method to verify if signature(s) in the signed message is cryptographically valid. </brief> 
                     ( SignedMessage // #docl Тип параметра: входной.
                     : string; bDetached // #docl Тип параметра: входной.
                     : boolean; VerifyFlag // #docl Тип параметра: входной.
                     : CAPICOM_SIGNED_DATA_VERIFY_FLAG );
end;

VipInterface vcomISignedData( vcomIDispatch ) Implements comISignedData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIAlgorithm( comIDispatch );
// #docl IAlgorithm Interface </brief> 
  property  Name // #docl Default property to get encryption algorithm. </brief> 
                 : CAPICOM_ENCRYPTION_ALGORITHM Read Write;
  property  KeyLength // #docl Property to get encryption key length. This property is ignored for DES or 3DES. </brief> 
                      : CAPICOM_ENCRYPTION_KEY_LENGTH Read Write;
end;

VipInterface vcomIAlgorithm( vcomIDispatch ) Implements comIAlgorithm (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIRecipients( comIDispatch );
// #docl IRecipients Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
  procedure Add  // #docl Method Add. </brief> 
                  ( pVal // #docl Тип параметра: входной.
                  : comICertificate );
  procedure Remove  // #docl Method Remove. </brief> 
                     ( aIndex // #docl Тип параметра: входной.
                     : longint );
  procedure Clear  // #docl Method Clear. </brief> 
                   ;
end;

VipInterface vcomIRecipients( vcomIDispatch ) Implements comIRecipients (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEnvelopedData( comIDispatch );
// #docl IEnvelopedData Interface </brief> 
  property  Content // #docl Default property to set the content to be enveloped. </brief> 
                    : string Read Write;
  property  Algorithm // #docl Property to get/set the encryption algorithm. </brief> 
                      : comIAlgorithm Read;
  property  Recipients // #docl Property to add/remove recipients. </brief> 
                       : comIRecipients Read;
  function  Encrypt  // #docl Method to envelop the content. </brief> 
                      ( EncodingType // #docl Тип параметра: входной.
                      : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  procedure Decrypt  // #docl Method to decrypt the enveloped content. </brief> 
                      ( EnvelopedMessage // #docl Тип параметра: входной.
                      : string );
end;

VipInterface vcomIEnvelopedData( vcomIDispatch ) Implements comIEnvelopedData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIEncryptedData( comIDispatch );
// #docl IEncryptedData Interface </brief> 
  property  Content // #docl Default property to set the content to be encrypted. </brief> 
                    : string Read Write;
  property  Algorithm // #docl Property to get/set the encryption algorithm. </brief> 
                      : comIAlgorithm Read;
  procedure SetSecret  // #docl Method to set the secret used to generate the symmetric key. </brief> 
                        ( newVal // #docl Тип параметра: входной.
                        : string; SecretType // #docl Тип параметра: входной.
                        : CAPICOM_SECRET_TYPE );
  function  Encrypt  // #docl Method to encrypt the content. </brief> 
                      ( EncodingType // #docl Тип параметра: входной.
                      : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  procedure Decrypt  // #docl Method to decrypt the encrypted content. </brief> 
                      ( EncryptedMessage // #docl Тип параметра: входной.
                      : string );
end;

VipInterface vcomIEncryptedData( vcomIDispatch ) Implements comIEncryptedData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comINoticeNumbers( comIDispatch );
// #docl INoticeNumbers Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
end;

VipInterface vcomINoticeNumbers( vcomIDispatch ) Implements comINoticeNumbers (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIQualifier( comIDispatch );
// #docl IQualifier Interface </brief> 
  property  OID // #docl Default property to get the OID. </brief> 
                : comIOID Read;
  property  CPSPointer // #docl Property to get the URI for the Certificate Practice Statement (CPS). </brief> 
                       : string Read;
  property  OrganizationName // #docl Property to get the organization name. </brief> 
                             : string Read;
  property  NoticeNumbers // #docl Property to get the notice numbers. </brief> 
                          : comINoticeNumbers Read;
  property  ExplicitText // #docl Property to get the explicit text. </brief> 
                         : string Read;
end;

VipInterface vcomIQualifier( vcomIDispatch ) Implements comIQualifier (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIQualifiers( comIDispatch );
// #docl IQualifiers Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
end;

VipInterface vcomIQualifiers( vcomIDispatch ) Implements comIQualifiers (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIPolicyInformation( comIDispatch );
// #docl IPolicyInformation Interface </brief> 
  property  OID // #docl Default property to get the OID. </brief> 
                : comIOID Read;
  property  Qualifiers // #docl Property to get the qualifiers collection object. </brief> 
                       : comIQualifiers Read;
end;

VipInterface vcomIPolicyInformation( vcomIDispatch ) Implements comIPolicyInformation (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICertificatePolicies( comIDispatch );
// #docl ICertificatePolicies Interface </brief> 
  function  Get_Item  // #docl Property Item. </brief> 
                       ( aIndex // #docl Тип параметра: входной.
                       : longint ) : VARIANT; // #docl Результат типа VARIANT
  property  Count_ // #docl Property Count. </brief> 
                  : longint Read;
end;

VipInterface vcomICertificatePolicies( vcomIDispatch ) Implements comICertificatePolicies (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIExtension( comIDispatch );
// #docl IExtension Interface </brief> 
  property  OID // #docl Default property to get the IOID object. </brief> 
                : comIOID Read;
  property  IsCritical // #docl Property to get IsCritical setting. </brief> 
                       : boolean Read;
  property  EncodedData // #docl Property to get the EncodedData object. </brief> 
                        : comIEncodedData Read;
end;

VipInterface vcomIExtension( vcomIDispatch ) Implements comIExtension (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comICPrivateKey( comIDispatch );
// #docl ICPrivateKey Interface </brief> 
end;

VipInterface vcomICPrivateKey( vcomIDispatch ) Implements comICPrivateKey (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

// unsupported type info Union __MIDL___MIDL_itf_capicom_0001_0064_0024

ObjInterface comISignedCode( comIDispatch );
// #docl ISignedCode Interface </brief> 
  property  FileName // #docl Default property to get the filename of code to be signed. </brief> 
                     : string Read Write;
  property  Description // #docl Property to get the description text. </brief> 
                        : string Read Write;
  property  DescriptionURL // #docl Property to get the description URL. </brief> 
                           : string Read Write;
  property  Signer // #docl Property to get the signer. </brief> 
                   : comISigner2 Read;
  property  TimeStamper // #docl Property to get the time stamper. </brief> 
                        : comISigner2 Read;
  property  Certificates // #docl Property to get all certificates in the signed code. </brief> 
                         : comICertificates2 Read;
  procedure Sign  // #docl Method to sign the code. </brief> 
                   ( pISigner2 // #docl Тип параметра: входной.
                   : comISigner2 );
  procedure Timestamp  // #docl Method to timestamp the signed code. </brief> 
                        ( URL // #docl Тип параметра: входной.
                        : string );
  procedure Verify  // #docl Method to verify the signed code. </brief> 
                     ( bUIAllowed // #docl Тип параметра: входной.
                     : boolean );
end;

VipInterface vcomISignedCode( vcomIDispatch ) Implements comISignedCode (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIHashedData( comIDispatch );
// #docl IHashedData Interface </brief> 
  property  Value // #docl Default property to get hashed value in hex format. Once the hashed value is obtained, future call to the Hash method starts a new hash. </brief> 
                  : string Read;
  property  Algorithm // #docl Property to get hashing algorithm. </brief> 
                      : CAPICOM_HASH_ALGORITHM Read Write;
  procedure Hash  // #docl Method to hash data. Must repeatedly call this method until all data are hashed, then the hashed value can be obtained through the Value property. </brief> 
                   ( newVal // #docl Тип параметра: входной.
                   : string );
end;

VipInterface vcomIHashedData( vcomIDispatch ) Implements comIHashedData (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIUtilities( comIDispatch );
// #docl IUtilities Interface </brief> 
  function  GetRandom  // #docl Method to get a secure random number. </brief> 
                        ( Length_ // #docl Тип параметра: входной.
                        : longint; EncodingType // #docl Тип параметра: входной.
                        : CAPICOM_ENCODING_TYPE ) : string; // #docl Результат типа string
  function  Base64Encode  // #docl Method to Base64 encode a string. </brief> 
                           ( SrcString // #docl Тип параметра: входной.
                           : string ) : string; // #docl Результат типа string
  function  Base64Decode  // #docl Method to Base64 decode a string. </brief> 
                           ( EncodedString // #docl Тип параметра: входной.
                           : string ) : string; // #docl Результат типа string
  function  BinaryToHex  // #docl Method to convert a binary packed string to hex string. </brief> 
                          ( BinaryString // #docl Тип параметра: входной.
                          : string ) : string; // #docl Результат типа string
  function  HexToBinary  // #docl Method to convert a hex string to binary packed string. </brief> 
                          ( HexString // #docl Тип параметра: входной.
                          : string ) : string; // #docl Результат типа string
  function  BinaryStringToByteArray  // #docl Method to convert binary packed string to an array of bytes (VT_ARRAY | VT_UI1). </brief> 
                                      ( BinaryString // #docl Тип параметра: входной.
                                      : string ) : VARIANT; // #docl Результат типа VARIANT
  function  ByteArrayToBinaryString  // #docl Method to convert an array of bytes (VT_ARRAY | VT_UI1) to binary packed string. </brief> 
                                      ( varByteArray // #docl Тип параметра: входной.
                                      : VARIANT ) : string; // #docl Результат типа string
  function  LocalTimeToUTCTime  // #docl Method to convert local time to UTC time. </brief> 
                                 ( LocalTime // #docl Тип параметра: входной.
                                 : DATE ) : DATE; // #docl Результат типа DATE
  function  UTCTimeToLocalTime  // #docl Method to convert UTC time to local time. </brief> 
                                 ( UTCTime // #docl Тип параметра: входной.
                                 : DATE ) : DATE; // #docl Результат типа DATE
end;

VipInterface vcomIUtilities( vcomIDispatch ) Implements comIUtilities (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;


//--- coClasses---------------------------

VipInterface coSettings // #docl Settings Class </brief> 
                        ( vcomISettings );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEKU // #docl EKU Class </brief> 
                   ( vcomIEKU );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEKUs // #docl EKUs Class </brief> 
                    ( vcomIEKUs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coKeyUsage // #docl KeyUsage Class </brief> 
                        ( vcomIKeyUsage );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coExtendedKeyUsage // #docl ExtendedKeyUsage Class </brief> 
                                ( vcomIExtendedKeyUsage );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBasicConstraints // #docl BasicConstraints Class </brief> 
                                ( vcomIBasicConstraints );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCertificateStatus // #docl CertificateStatus Class </brief> 
                                 ( vcomICertificateStatus3 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coChain // #docl Chain Class </brief> 
                     ( vcomIChain2 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coStore // #docl Store Class </brief> 
                     ( vcomIStore3 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAttribute // #docl Attribute Class </brief> 
                         ( vcomIAttribute );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAttributes // #docl Attributes Class </brief> 
                          ( vcomIAttributes );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSigner // #docl Signer Class </brief> 
                      ( vcomISigner2 );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSigners // #docl Signers Class </brief> 
                       ( vcomISigners );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSignedData // #docl SignedData Class </brief> 
                          ( vcomISignedData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAlgorithm // #docl Algorithm Class </brief> 
                         ( vcomIAlgorithm );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRecipients // #docl Recipients Class </brief> 
                          ( vcomIRecipients );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnvelopedData // #docl EnvelopedData Class </brief> 
                             ( vcomIEnvelopedData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEncryptedData // #docl EncryptedData Class </brief> 
                             ( vcomIEncryptedData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOID // #docl OID Class </brief> 
                   ( vcomIOID );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOIDs // #docl OIDs Class </brief> 
                    ( vcomIOIDs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNoticeNumbers // #docl NoticeNumbers Class </brief> 
                             ( vcomINoticeNumbers );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coQualifier // #docl Qualifier Class </brief> 
                         ( vcomIQualifier );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coQualifiers // #docl Qualifiers Class </brief> 
                          ( vcomIQualifiers );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPolicyInformation // #docl PolicyInformation Class </brief> 
                                 ( vcomIPolicyInformation );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCertificatePolicies // #docl CertificatePolicies Class </brief> 
                                   ( vcomICertificatePolicies );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEncodedData // #docl EncodedData Class </brief> 
                           ( vcomIEncodedData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coExtension // #docl Extension Class </brief> 
                         ( vcomIExtension );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coExtensions // #docl Extensions Class </brief> 
                          ( vcomIExtensions );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coExtendedProperty // #docl ExtendedProperty Class </brief> 
                                ( vcomIExtendedProperty );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coExtendedProperties // #docl ExtendedProperties Class </brief> 
                                  ( vcomIExtendedProperties );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coTemplate // #docl Template Class </brief> 
                        ( vcomITemplate );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPublicKey // #docl PublicKey Class </brief> 
                         ( vcomIPublicKey );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coPrivateKey // #docl PrivateKey Class </brief> 
                          ( vcomIPrivateKey );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSignedCode // #docl SignedCode Class </brief> 
                          ( vcomISignedCode );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coHashedData // #docl HashedData Class </brief> 
                          ( vcomIHashedData );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coUtilities // #docl Utilities Class </brief> 
                         ( vcomIUtilities );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;


#endif
