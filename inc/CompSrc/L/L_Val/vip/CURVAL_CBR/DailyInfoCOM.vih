//-------------------------------------------------------------------
//--- Copyright(c) 2001 by Galaktika Corporation                  ---
//--- Этот файл автоматически генерируется для использования      ---
//--- COM интерфейсов из Атлантиса. Править этот файл запрещается ---
//--- так как это может привести к неработоспособности системы    ---
//-------------------------------------------------------------------

// 

#ifndef __DailyInfoCOM__
#define __DailyInfoCOM__
#include atlcom.vih

//--- Forwards declarations --------------

ObjInterface comIXMLNode; forward;
ObjInterface comIDataSet; forward;
ObjInterface comIDailyInfo; forward;
ObjInterface com_SaldoXMLCompletedEventHandler; forward;
ObjInterface com_SaldoXMLCompletedEventArgs; forward;
ObjInterface com_ROISfixXMLCompletedEventHandler; forward;
ObjInterface com_ROISfixXMLCompletedEventArgs; forward;
ObjInterface com_RuoniaXMLCompletedEventHandler; forward;
ObjInterface com_RuoniaXMLCompletedEventArgs; forward;
ObjInterface com_ROISfixCompletedEventHandler; forward;
ObjInterface com_ROISfixCompletedEventArgs; forward;
ObjInterface com_RuoniaCompletedEventHandler; forward;
ObjInterface com_RuoniaCompletedEventArgs; forward;
ObjInterface com_mrrf7DCompletedEventHandler; forward;
ObjInterface com_mrrf7DCompletedEventArgs; forward;
ObjInterface com_mrrf7DXMLCompletedEventHandler; forward;
ObjInterface com_mrrf7DXMLCompletedEventArgs; forward;
ObjInterface com_mrrfCompletedEventHandler; forward;
ObjInterface com_mrrfCompletedEventArgs; forward;
ObjInterface com_mrrfXMLCompletedEventHandler; forward;
ObjInterface com_mrrfXMLCompletedEventArgs; forward;
ObjInterface com_SaldoCompletedEventHandler; forward;
ObjInterface com_SaldoCompletedEventArgs; forward;
ObjInterface com_NewsInfoXMLCompletedEventHandler; forward;
ObjInterface com_NewsInfoXMLCompletedEventArgs; forward;
ObjInterface com_OmodInfoXMLCompletedEventHandler; forward;
ObjInterface com_OmodInfoXMLCompletedEventArgs; forward;
ObjInterface com_XVolCompletedEventHandler; forward;
ObjInterface com_XVolCompletedEventArgs; forward;
ObjInterface com_XVolXMLCompletedEventHandler; forward;
ObjInterface com_XVolXMLCompletedEventArgs; forward;
ObjInterface com_MainInfoXMLCompletedEventHandler; forward;
ObjInterface com_MainInfoXMLCompletedEventArgs; forward;
ObjInterface com_AllDataInfoXMLCompletedEventHandler; forward;
ObjInterface com_AllDataInfoXMLCompletedEventArgs; forward;
ObjInterface com_NewsInfoCompletedEventHandler; forward;
ObjInterface com_NewsInfoCompletedEventArgs; forward;
ObjInterface com_SwapDynamicXMLCompletedEventHandler; forward;
ObjInterface com_SwapDynamicXMLCompletedEventArgs; forward;
ObjInterface com_SwapDynamicCompletedEventHandler; forward;
ObjInterface com_SwapDynamicCompletedEventArgs; forward;
ObjInterface com_MKRCompletedEventHandler; forward;
ObjInterface com_MKRCompletedEventArgs; forward;
ObjInterface com_MKRXMLCompletedEventHandler; forward;
ObjInterface com_MKRXMLCompletedEventArgs; forward;
ObjInterface com_DVCompletedEventHandler; forward;
ObjInterface com_DVCompletedEventArgs; forward;
ObjInterface com_DVXMLCompletedEventHandler; forward;
ObjInterface com_DVXMLCompletedEventArgs; forward;
ObjInterface com_Repo_debtCompletedEventHandler; forward;
ObjInterface com_Repo_debtCompletedEventArgs; forward;
ObjInterface com_Repo_debtXMLCompletedEventHandler; forward;
ObjInterface com_Repo_debtXMLCompletedEventArgs; forward;
ObjInterface com_Coins_baseCompletedEventHandler; forward;
ObjInterface com_Coins_baseCompletedEventArgs; forward;
ObjInterface com_Coins_baseXMLCompletedEventHandler; forward;
ObjInterface com_Coins_baseXMLCompletedEventArgs; forward;
ObjInterface com_FixingBaseCompletedEventHandler; forward;
ObjInterface com_FixingBaseCompletedEventArgs; forward;
ObjInterface com_FixingBaseXMLCompletedEventHandler; forward;
ObjInterface com_FixingBaseXMLCompletedEventArgs; forward;
ObjInterface com_OvernightCompletedEventHandler; forward;
ObjInterface com_OvernightCompletedEventArgs; forward;
ObjInterface com_OvernightXMLCompletedEventHandler; forward;
ObjInterface com_OvernightXMLCompletedEventArgs; forward;
ObjInterface com_BauctionCompletedEventHandler; forward;
ObjInterface com_BauctionCompletedEventArgs; forward;
ObjInterface com_BauctionXMLCompletedEventHandler; forward;
ObjInterface com_BauctionXMLCompletedEventArgs; forward;
ObjInterface com_DepoDynamicXMLCompletedEventHandler; forward;
ObjInterface com_DepoDynamicXMLCompletedEventArgs; forward;
ObjInterface com_DepoDynamicCompletedEventHandler; forward;
ObjInterface com_DepoDynamicCompletedEventArgs; forward;
ObjInterface com_OstatDynamicXMLCompletedEventHandler; forward;
ObjInterface com_OstatDynamicXMLCompletedEventArgs; forward;
ObjInterface com_OstatDynamicCompletedEventHandler; forward;
ObjInterface com_OstatDynamicCompletedEventArgs; forward;
ObjInterface com_DragMetDynamicXMLCompletedEventHandler; forward;
ObjInterface com_DragMetDynamicXMLCompletedEventArgs; forward;
ObjInterface com_DragMetDynamicCompletedEventHandler; forward;
ObjInterface com_DragMetDynamicCompletedEventArgs; forward;
ObjInterface com_GetLatestDateTimeCompletedEventHandler; forward;
ObjInterface com_GetLatestDateTimeCompletedEventArgs; forward;
ObjInterface com_GetLatestDateCompletedEventHandler; forward;
ObjInterface com_GetLatestDateCompletedEventArgs; forward;
ObjInterface com_GetLatestDateTimeSeldCompletedEventHandler; forward;
ObjInterface com_GetLatestDateTimeSeldCompletedEventArgs; forward;
ObjInterface com_GetLatestDateSeldCompletedEventHandler; forward;
ObjInterface com_GetLatestDateSeldCompletedEventArgs; forward;
ObjInterface com_EnumValutesXMLCompletedEventHandler; forward;
ObjInterface com_EnumValutesXMLCompletedEventArgs; forward;
ObjInterface com_EnumValutesCompletedEventHandler; forward;
ObjInterface com_EnumValutesCompletedEventArgs; forward;
ObjInterface com_GetCursDynamicXMLCompletedEventHandler; forward;
ObjInterface com_GetCursDynamicXMLCompletedEventArgs; forward;
ObjInterface com_GetCursDynamicCompletedEventHandler; forward;
ObjInterface com_GetCursDynamicCompletedEventArgs; forward;
ObjInterface com_GetCursOnDateXMLCompletedEventHandler; forward;
ObjInterface com_GetCursOnDateXMLCompletedEventArgs; forward;
ObjInterface com_GetSeldCursOnDateXMLCompletedEventHandler; forward;
ObjInterface com_GetSeldCursOnDateXMLCompletedEventArgs; forward;
ObjInterface com_GetSeldCursOnDateCompletedEventHandler; forward;
ObjInterface com_GetSeldCursOnDateCompletedEventArgs; forward;
ObjInterface com_GetCursOnDateCompletedEventHandler; forward;
ObjInterface com_GetCursOnDateCompletedEventArgs; forward;
ObjInterface com_CXMLNode; forward;
ObjInterface com_CDataSet; forward;
ObjInterface com_CDailyInfo; forward;

VipInterface coSaldoXMLCompletedEventHandler; forward;
VipInterface coSaldoXMLCompletedEventArgs; forward;
VipInterface coROISfixXMLCompletedEventHandler; forward;
VipInterface coROISfixXMLCompletedEventArgs; forward;
VipInterface coRuoniaXMLCompletedEventHandler; forward;
VipInterface coRuoniaXMLCompletedEventArgs; forward;
VipInterface coROISfixCompletedEventHandler; forward;
VipInterface coROISfixCompletedEventArgs; forward;
VipInterface coRuoniaCompletedEventHandler; forward;
VipInterface coRuoniaCompletedEventArgs; forward;
VipInterface comrrf7DCompletedEventHandler; forward;
VipInterface comrrf7DCompletedEventArgs; forward;
VipInterface comrrf7DXMLCompletedEventHandler; forward;
VipInterface comrrf7DXMLCompletedEventArgs; forward;
VipInterface comrrfCompletedEventHandler; forward;
VipInterface comrrfCompletedEventArgs; forward;
VipInterface comrrfXMLCompletedEventHandler; forward;
VipInterface comrrfXMLCompletedEventArgs; forward;
VipInterface coSaldoCompletedEventHandler; forward;
VipInterface coSaldoCompletedEventArgs; forward;
VipInterface coNewsInfoXMLCompletedEventHandler; forward;
VipInterface coNewsInfoXMLCompletedEventArgs; forward;
VipInterface coOmodInfoXMLCompletedEventHandler; forward;
VipInterface coOmodInfoXMLCompletedEventArgs; forward;
VipInterface coXVolCompletedEventHandler; forward;
VipInterface coXVolCompletedEventArgs; forward;
VipInterface coXVolXMLCompletedEventHandler; forward;
VipInterface coXVolXMLCompletedEventArgs; forward;
VipInterface coMainInfoXMLCompletedEventHandler; forward;
VipInterface coMainInfoXMLCompletedEventArgs; forward;
VipInterface coAllDataInfoXMLCompletedEventHandler; forward;
VipInterface coAllDataInfoXMLCompletedEventArgs; forward;
VipInterface coNewsInfoCompletedEventHandler; forward;
VipInterface coNewsInfoCompletedEventArgs; forward;
VipInterface coSwapDynamicXMLCompletedEventHandler; forward;
VipInterface coSwapDynamicXMLCompletedEventArgs; forward;
VipInterface coSwapDynamicCompletedEventHandler; forward;
VipInterface coSwapDynamicCompletedEventArgs; forward;
VipInterface coMKRCompletedEventHandler; forward;
VipInterface coMKRCompletedEventArgs; forward;
VipInterface coMKRXMLCompletedEventHandler; forward;
VipInterface coMKRXMLCompletedEventArgs; forward;
VipInterface coDVCompletedEventHandler; forward;
VipInterface coDVCompletedEventArgs; forward;
VipInterface coDVXMLCompletedEventHandler; forward;
VipInterface coDVXMLCompletedEventArgs; forward;
VipInterface coRepo_debtCompletedEventHandler; forward;
VipInterface coRepo_debtCompletedEventArgs; forward;
VipInterface coRepo_debtXMLCompletedEventHandler; forward;
VipInterface coRepo_debtXMLCompletedEventArgs; forward;
VipInterface coCoins_baseCompletedEventHandler; forward;
VipInterface coCoins_baseCompletedEventArgs; forward;
VipInterface coCoins_baseXMLCompletedEventHandler; forward;
VipInterface coCoins_baseXMLCompletedEventArgs; forward;
VipInterface coFixingBaseCompletedEventHandler; forward;
VipInterface coFixingBaseCompletedEventArgs; forward;
VipInterface coFixingBaseXMLCompletedEventHandler; forward;
VipInterface coFixingBaseXMLCompletedEventArgs; forward;
VipInterface coOvernightCompletedEventHandler; forward;
VipInterface coOvernightCompletedEventArgs; forward;
VipInterface coOvernightXMLCompletedEventHandler; forward;
VipInterface coOvernightXMLCompletedEventArgs; forward;
VipInterface coBauctionCompletedEventHandler; forward;
VipInterface coBauctionCompletedEventArgs; forward;
VipInterface coBauctionXMLCompletedEventHandler; forward;
VipInterface coBauctionXMLCompletedEventArgs; forward;
VipInterface coDepoDynamicXMLCompletedEventHandler; forward;
VipInterface coDepoDynamicXMLCompletedEventArgs; forward;
VipInterface coDepoDynamicCompletedEventHandler; forward;
VipInterface coDepoDynamicCompletedEventArgs; forward;
VipInterface coOstatDynamicXMLCompletedEventHandler; forward;
VipInterface coOstatDynamicXMLCompletedEventArgs; forward;
VipInterface coOstatDynamicCompletedEventHandler; forward;
VipInterface coOstatDynamicCompletedEventArgs; forward;
VipInterface coDragMetDynamicXMLCompletedEventHandler; forward;
VipInterface coDragMetDynamicXMLCompletedEventArgs; forward;
VipInterface coDragMetDynamicCompletedEventHandler; forward;
VipInterface coDragMetDynamicCompletedEventArgs; forward;
VipInterface coGetLatestDateTimeCompletedEventHandler; forward;
VipInterface coGetLatestDateTimeCompletedEventArgs; forward;
VipInterface coGetLatestDateCompletedEventHandler; forward;
VipInterface coGetLatestDateCompletedEventArgs; forward;
VipInterface coGetLatestDateTimeSeldCompletedEventHandler; forward;
VipInterface coGetLatestDateTimeSeldCompletedEventArgs; forward;
VipInterface coGetLatestDateSeldCompletedEventHandler; forward;
VipInterface coGetLatestDateSeldCompletedEventArgs; forward;
VipInterface coEnumValutesXMLCompletedEventHandler; forward;
VipInterface coEnumValutesXMLCompletedEventArgs; forward;
VipInterface coEnumValutesCompletedEventHandler; forward;
VipInterface coEnumValutesCompletedEventArgs; forward;
VipInterface coGetCursDynamicXMLCompletedEventHandler; forward;
VipInterface coGetCursDynamicXMLCompletedEventArgs; forward;
VipInterface coGetCursDynamicCompletedEventHandler; forward;
VipInterface coGetCursDynamicCompletedEventArgs; forward;
VipInterface coGetCursOnDateXMLCompletedEventHandler; forward;
VipInterface coGetCursOnDateXMLCompletedEventArgs; forward;
VipInterface coGetSeldCursOnDateXMLCompletedEventHandler; forward;
VipInterface coGetSeldCursOnDateXMLCompletedEventArgs; forward;
VipInterface coGetSeldCursOnDateCompletedEventHandler; forward;
VipInterface coGetSeldCursOnDateCompletedEventArgs; forward;
VipInterface coGetCursOnDateCompletedEventHandler; forward;
VipInterface coGetCursOnDateCompletedEventArgs; forward;
VipInterface coCXMLNode; forward;
VipInterface coCDataSet; forward;
VipInterface coCDailyInfo; forward;

//--- Types definition  ------------------


//--- arrays



//--- Object Interfaces ------------------

ObjInterface comIXMLNode( comIDispatch );
// #docl Объектный интерфейс comIXMLNode </brief>
  procedure XmlNode2File  // #docl  Комментарии отсутствуют. </brief> 
                           ( fileName // #docl Тип параметра: входной.
                           : string );
end;

VipInterface vcomIXMLNode( vcomIDispatch ) Implements comIXMLNode (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIDataSet( comIDispatch );
// #docl Объектный интерфейс comIDataSet </brief>
  procedure DataSet2File  // #docl  Комментарии отсутствуют. </brief> 
                           ( fileName // #docl Тип параметра: входной.
                           : string );
end;

VipInterface vcomIDataSet( vcomIDispatch ) Implements comIDataSet (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface comIDailyInfo( comIDispatch );
// #docl Объектный интерфейс comIDailyInfo </brief>
  property  service_Url// #docl Дополнительная документация отсутствует. </brief>
                        : string Read Write;
  procedure service_AuthenticationBasic  // #docl  Комментарии отсутствуют. </brief> 
                                          ( user // #docl Тип параметра: входной.
                                          : string; password // #docl Тип параметра: входной.
                                          : string; domain // #docl Тип параметра: входной.
                                          : string );
  procedure service_AuthenticationX509Certificate  // #docl  Комментарии отсутствуют. </brief> 
                                                    ( certificate // #docl Тип параметра: входной.
                                                    : string );
  function  SaldoXML  // #docl  Комментарии отсутствуют. </brief> 
                       ( fromDate // #docl Тип параметра: входной.
                       : DATE; ToDate // #docl Тип параметра: входной.
                       : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  ROISfixXML  // #docl  Комментарии отсутствуют. </brief> 
                         ( fromDate // #docl Тип параметра: входной.
                         : DATE; ToDate // #docl Тип параметра: входной.
                         : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  RuoniaXML  // #docl  Комментарии отсутствуют. </brief> 
                        ( fromDate // #docl Тип параметра: входной.
                        : DATE; ToDate // #docl Тип параметра: входной.
                        : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  ROISfix  // #docl  Комментарии отсутствуют. </brief> 
                      ( fromDate // #docl Тип параметра: входной.
                      : DATE; ToDate // #docl Тип параметра: входной.
                      : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  Ruonia  // #docl  Комментарии отсутствуют. </brief> 
                     ( fromDate // #docl Тип параметра: входной.
                     : DATE; ToDate // #docl Тип параметра: входной.
                     : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  mrrf7D  // #docl  Комментарии отсутствуют. </brief> 
                     ( fromDate // #docl Тип параметра: входной.
                     : DATE; ToDate // #docl Тип параметра: входной.
                     : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  mrrf7DXML  // #docl  Комментарии отсутствуют. </brief> 
                        ( fromDate // #docl Тип параметра: входной.
                        : DATE; ToDate // #docl Тип параметра: входной.
                        : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  mrrf  // #docl  Комментарии отсутствуют. </brief> 
                   ( fromDate // #docl Тип параметра: входной.
                   : DATE; ToDate // #docl Тип параметра: входной.
                   : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  mrrfXML  // #docl  Комментарии отсутствуют. </brief> 
                      ( fromDate // #docl Тип параметра: входной.
                      : DATE; ToDate // #docl Тип параметра: входной.
                      : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  Saldo  // #docl  Комментарии отсутствуют. </brief> 
                    ( fromDate // #docl Тип параметра: входной.
                    : DATE; ToDate // #docl Тип параметра: входной.
                    : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  NewsInfoXML  // #docl  Комментарии отсутствуют. </brief> 
                          ( fromDate // #docl Тип параметра: входной.
                          : DATE; ToDate // #docl Тип параметра: входной.
                          : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  OmodInfoXML  // #docl  Комментарии отсутствуют. </brief> 
                          : comIXMLNode; // #docl Результат типа comIXMLNode
  function  XVol  // #docl  Комментарии отсутствуют. </brief> 
                   ( fromDate // #docl Тип параметра: входной.
                   : DATE; ToDate // #docl Тип параметра: входной.
                   : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  XVolXML  // #docl  Комментарии отсутствуют. </brief> 
                      ( fromDate // #docl Тип параметра: входной.
                      : DATE; ToDate // #docl Тип параметра: входной.
                      : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  MainInfoXML  // #docl  Комментарии отсутствуют. </brief> 
                          : comIXMLNode; // #docl Результат типа comIXMLNode
  function  AllDataInfoXML  // #docl  Комментарии отсутствуют. </brief> 
                             : comIXMLNode; // #docl Результат типа comIXMLNode
  function  NewsInfo  // #docl  Комментарии отсутствуют. </brief> 
                       ( fromDate // #docl Тип параметра: входной.
                       : DATE; ToDate // #docl Тип параметра: входной.
                       : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  SwapDynamicXML  // #docl  Комментарии отсутствуют. </brief> 
                             ( fromDate // #docl Тип параметра: входной.
                             : DATE; ToDate // #docl Тип параметра: входной.
                             : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  SwapDynamic  // #docl  Комментарии отсутствуют. </brief> 
                          ( fromDate // #docl Тип параметра: входной.
                          : DATE; ToDate // #docl Тип параметра: входной.
                          : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  MKR  // #docl  Комментарии отсутствуют. </brief> 
                  ( fromDate // #docl Тип параметра: входной.
                  : DATE; ToDate // #docl Тип параметра: входной.
                  : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  MKRXML  // #docl  Комментарии отсутствуют. </brief> 
                     ( fromDate // #docl Тип параметра: входной.
                     : DATE; ToDate // #docl Тип параметра: входной.
                     : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  DV  // #docl  Комментарии отсутствуют. </brief> 
                 ( fromDate // #docl Тип параметра: входной.
                 : DATE; ToDate // #docl Тип параметра: входной.
                 : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  DVXML  // #docl  Комментарии отсутствуют. </brief> 
                    ( fromDate // #docl Тип параметра: входной.
                    : DATE; ToDate // #docl Тип параметра: входной.
                    : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  Repo_debt  // #docl  Комментарии отсутствуют. </brief> 
                        ( fromDate // #docl Тип параметра: входной.
                        : DATE; ToDate // #docl Тип параметра: входной.
                        : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  Repo_debtXML  // #docl  Комментарии отсутствуют. </brief> 
                           ( fromDate // #docl Тип параметра: входной.
                           : DATE; ToDate // #docl Тип параметра: входной.
                           : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  Coins_base  // #docl  Комментарии отсутствуют. </brief> 
                         ( fromDate // #docl Тип параметра: входной.
                         : DATE; ToDate // #docl Тип параметра: входной.
                         : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  Coins_baseXML  // #docl  Комментарии отсутствуют. </brief> 
                            ( fromDate // #docl Тип параметра: входной.
                            : DATE; ToDate // #docl Тип параметра: входной.
                            : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  FixingBase  // #docl  Комментарии отсутствуют. </brief> 
                         ( fromDate // #docl Тип параметра: входной.
                         : DATE; ToDate // #docl Тип параметра: входной.
                         : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  FixingBaseXML  // #docl  Комментарии отсутствуют. </brief> 
                            ( fromDate // #docl Тип параметра: входной.
                            : DATE; ToDate // #docl Тип параметра: входной.
                            : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  Overnight  // #docl  Комментарии отсутствуют. </brief> 
                        ( fromDate // #docl Тип параметра: входной.
                        : DATE; ToDate // #docl Тип параметра: входной.
                        : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  OvernightXML  // #docl  Комментарии отсутствуют. </brief> 
                           ( fromDate // #docl Тип параметра: входной.
                           : DATE; ToDate // #docl Тип параметра: входной.
                           : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  Bauction  // #docl  Комментарии отсутствуют. </brief> 
                       ( fromDate // #docl Тип параметра: входной.
                       : DATE; ToDate // #docl Тип параметра: входной.
                       : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  BauctionXML  // #docl  Комментарии отсутствуют. </brief> 
                          ( fromDate // #docl Тип параметра: входной.
                          : DATE; ToDate // #docl Тип параметра: входной.
                          : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  DepoDynamicXML  // #docl  Комментарии отсутствуют. </brief> 
                             ( fromDate // #docl Тип параметра: входной.
                             : DATE; ToDate // #docl Тип параметра: входной.
                             : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  DepoDynamic  // #docl  Комментарии отсутствуют. </brief> 
                          ( fromDate // #docl Тип параметра: входной.
                          : DATE; ToDate // #docl Тип параметра: входной.
                          : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  OstatDynamicXML  // #docl  Комментарии отсутствуют. </brief> 
                              ( fromDate // #docl Тип параметра: входной.
                              : DATE; ToDate // #docl Тип параметра: входной.
                              : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  OstatDynamic  // #docl  Комментарии отсутствуют. </brief> 
                           ( fromDate // #docl Тип параметра: входной.
                           : DATE; ToDate // #docl Тип параметра: входной.
                           : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  DragMetDynamicXML  // #docl  Комментарии отсутствуют. </brief> 
                                ( fromDate // #docl Тип параметра: входной.
                                : DATE; ToDate // #docl Тип параметра: входной.
                                : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  DragMetDynamic  // #docl  Комментарии отсутствуют. </brief> 
                             ( fromDate // #docl Тип параметра: входной.
                             : DATE; ToDate // #docl Тип параметра: входной.
                             : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  GetLatestDateTime  // #docl  Комментарии отсутствуют. </brief> 
                                : DATE; // #docl Результат типа DATE
  function  GetLatestDate  // #docl  Комментарии отсутствуют. </brief> 
                            : string; // #docl Результат типа string
  function  GetLatestDateTimeSeld  // #docl  Комментарии отсутствуют. </brief> 
                                    : DATE; // #docl Результат типа DATE
  function  GetLatestDateSeld  // #docl  Комментарии отсутствуют. </brief> 
                                : string; // #docl Результат типа string
  function  EnumValutesXML  // #docl  Комментарии отсутствуют. </brief> 
                             ( Seld // #docl Тип параметра: входной.
                             : boolean ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  EnumValutes  // #docl  Комментарии отсутствуют. </brief> 
                          ( Seld // #docl Тип параметра: входной.
                          : boolean ) : comIDataSet; // #docl Результат типа comIDataSet
  function  GetCursDynamicXML  // #docl  Комментарии отсутствуют. </brief> 
                                ( fromDate // #docl Тип параметра: входной.
                                : DATE; ToDate // #docl Тип параметра: входной.
                                : DATE; ValutaCode // #docl Тип параметра: входной.
                                : string ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  GetCursDynamic  // #docl  Комментарии отсутствуют. </brief> 
                             ( fromDate // #docl Тип параметра: входной.
                             : DATE; ToDate // #docl Тип параметра: входной.
                             : DATE; ValutaCode // #docl Тип параметра: входной.
                             : string ) : comIDataSet; // #docl Результат типа comIDataSet
  function  GetCursOnDateXML  // #docl  Комментарии отсутствуют. </brief> 
                               ( On_date // #docl Тип параметра: входной.
                               : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  GetSeldCursOnDateXML  // #docl  Комментарии отсутствуют. </brief> 
                                   ( On_date // #docl Тип параметра: входной.
                                   : DATE ) : comIXMLNode; // #docl Результат типа comIXMLNode
  function  GetSeldCursOnDate  // #docl  Комментарии отсутствуют. </brief> 
                                ( On_date // #docl Тип параметра: входной.
                                : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
  function  GetCursOnDate  // #docl  Комментарии отсутствуют. </brief> 
                            ( On_date // #docl Тип параметра: входной.
                            : DATE ) : comIDataSet; // #docl Результат типа comIDataSet
end;

VipInterface vcomIDailyInfo( vcomIDispatch ) Implements comIDailyInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SaldoXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_SaldoXMLCompletedEventHandler </brief>
end;

VipInterface vcom_SaldoXMLCompletedEventHandler( vcomIDispatch ) Implements com_SaldoXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SaldoXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_SaldoXMLCompletedEventArgs </brief>
end;

VipInterface vcom_SaldoXMLCompletedEventArgs( vcomIDispatch ) Implements com_SaldoXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ROISfixXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_ROISfixXMLCompletedEventHandler </brief>
end;

VipInterface vcom_ROISfixXMLCompletedEventHandler( vcomIDispatch ) Implements com_ROISfixXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ROISfixXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_ROISfixXMLCompletedEventArgs </brief>
end;

VipInterface vcom_ROISfixXMLCompletedEventArgs( vcomIDispatch ) Implements com_ROISfixXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RuoniaXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_RuoniaXMLCompletedEventHandler </brief>
end;

VipInterface vcom_RuoniaXMLCompletedEventHandler( vcomIDispatch ) Implements com_RuoniaXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RuoniaXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_RuoniaXMLCompletedEventArgs </brief>
end;

VipInterface vcom_RuoniaXMLCompletedEventArgs( vcomIDispatch ) Implements com_RuoniaXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ROISfixCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_ROISfixCompletedEventHandler </brief>
end;

VipInterface vcom_ROISfixCompletedEventHandler( vcomIDispatch ) Implements com_ROISfixCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_ROISfixCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_ROISfixCompletedEventArgs </brief>
end;

VipInterface vcom_ROISfixCompletedEventArgs( vcomIDispatch ) Implements com_ROISfixCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RuoniaCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_RuoniaCompletedEventHandler </brief>
end;

VipInterface vcom_RuoniaCompletedEventHandler( vcomIDispatch ) Implements com_RuoniaCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_RuoniaCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_RuoniaCompletedEventArgs </brief>
end;

VipInterface vcom_RuoniaCompletedEventArgs( vcomIDispatch ) Implements com_RuoniaCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_mrrf7DCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_mrrf7DCompletedEventHandler </brief>
end;

VipInterface vcom_mrrf7DCompletedEventHandler( vcomIDispatch ) Implements com_mrrf7DCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_mrrf7DCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_mrrf7DCompletedEventArgs </brief>
end;

VipInterface vcom_mrrf7DCompletedEventArgs( vcomIDispatch ) Implements com_mrrf7DCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_mrrf7DXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_mrrf7DXMLCompletedEventHandler </brief>
end;

VipInterface vcom_mrrf7DXMLCompletedEventHandler( vcomIDispatch ) Implements com_mrrf7DXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_mrrf7DXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_mrrf7DXMLCompletedEventArgs </brief>
end;

VipInterface vcom_mrrf7DXMLCompletedEventArgs( vcomIDispatch ) Implements com_mrrf7DXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_mrrfCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_mrrfCompletedEventHandler </brief>
end;

VipInterface vcom_mrrfCompletedEventHandler( vcomIDispatch ) Implements com_mrrfCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_mrrfCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_mrrfCompletedEventArgs </brief>
end;

VipInterface vcom_mrrfCompletedEventArgs( vcomIDispatch ) Implements com_mrrfCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_mrrfXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_mrrfXMLCompletedEventHandler </brief>
end;

VipInterface vcom_mrrfXMLCompletedEventHandler( vcomIDispatch ) Implements com_mrrfXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_mrrfXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_mrrfXMLCompletedEventArgs </brief>
end;

VipInterface vcom_mrrfXMLCompletedEventArgs( vcomIDispatch ) Implements com_mrrfXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SaldoCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_SaldoCompletedEventHandler </brief>
end;

VipInterface vcom_SaldoCompletedEventHandler( vcomIDispatch ) Implements com_SaldoCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SaldoCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_SaldoCompletedEventArgs </brief>
end;

VipInterface vcom_SaldoCompletedEventArgs( vcomIDispatch ) Implements com_SaldoCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NewsInfoXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_NewsInfoXMLCompletedEventHandler </brief>
end;

VipInterface vcom_NewsInfoXMLCompletedEventHandler( vcomIDispatch ) Implements com_NewsInfoXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NewsInfoXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_NewsInfoXMLCompletedEventArgs </brief>
end;

VipInterface vcom_NewsInfoXMLCompletedEventArgs( vcomIDispatch ) Implements com_NewsInfoXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OmodInfoXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_OmodInfoXMLCompletedEventHandler </brief>
end;

VipInterface vcom_OmodInfoXMLCompletedEventHandler( vcomIDispatch ) Implements com_OmodInfoXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OmodInfoXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_OmodInfoXMLCompletedEventArgs </brief>
end;

VipInterface vcom_OmodInfoXMLCompletedEventArgs( vcomIDispatch ) Implements com_OmodInfoXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_XVolCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_XVolCompletedEventHandler </brief>
end;

VipInterface vcom_XVolCompletedEventHandler( vcomIDispatch ) Implements com_XVolCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_XVolCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_XVolCompletedEventArgs </brief>
end;

VipInterface vcom_XVolCompletedEventArgs( vcomIDispatch ) Implements com_XVolCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_XVolXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_XVolXMLCompletedEventHandler </brief>
end;

VipInterface vcom_XVolXMLCompletedEventHandler( vcomIDispatch ) Implements com_XVolXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_XVolXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_XVolXMLCompletedEventArgs </brief>
end;

VipInterface vcom_XVolXMLCompletedEventArgs( vcomIDispatch ) Implements com_XVolXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MainInfoXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_MainInfoXMLCompletedEventHandler </brief>
end;

VipInterface vcom_MainInfoXMLCompletedEventHandler( vcomIDispatch ) Implements com_MainInfoXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MainInfoXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_MainInfoXMLCompletedEventArgs </brief>
end;

VipInterface vcom_MainInfoXMLCompletedEventArgs( vcomIDispatch ) Implements com_MainInfoXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AllDataInfoXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_AllDataInfoXMLCompletedEventHandler </brief>
end;

VipInterface vcom_AllDataInfoXMLCompletedEventHandler( vcomIDispatch ) Implements com_AllDataInfoXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_AllDataInfoXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_AllDataInfoXMLCompletedEventArgs </brief>
end;

VipInterface vcom_AllDataInfoXMLCompletedEventArgs( vcomIDispatch ) Implements com_AllDataInfoXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NewsInfoCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_NewsInfoCompletedEventHandler </brief>
end;

VipInterface vcom_NewsInfoCompletedEventHandler( vcomIDispatch ) Implements com_NewsInfoCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_NewsInfoCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_NewsInfoCompletedEventArgs </brief>
end;

VipInterface vcom_NewsInfoCompletedEventArgs( vcomIDispatch ) Implements com_NewsInfoCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SwapDynamicXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_SwapDynamicXMLCompletedEventHandler </brief>
end;

VipInterface vcom_SwapDynamicXMLCompletedEventHandler( vcomIDispatch ) Implements com_SwapDynamicXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SwapDynamicXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_SwapDynamicXMLCompletedEventArgs </brief>
end;

VipInterface vcom_SwapDynamicXMLCompletedEventArgs( vcomIDispatch ) Implements com_SwapDynamicXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SwapDynamicCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_SwapDynamicCompletedEventHandler </brief>
end;

VipInterface vcom_SwapDynamicCompletedEventHandler( vcomIDispatch ) Implements com_SwapDynamicCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_SwapDynamicCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_SwapDynamicCompletedEventArgs </brief>
end;

VipInterface vcom_SwapDynamicCompletedEventArgs( vcomIDispatch ) Implements com_SwapDynamicCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MKRCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_MKRCompletedEventHandler </brief>
end;

VipInterface vcom_MKRCompletedEventHandler( vcomIDispatch ) Implements com_MKRCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MKRCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_MKRCompletedEventArgs </brief>
end;

VipInterface vcom_MKRCompletedEventArgs( vcomIDispatch ) Implements com_MKRCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MKRXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_MKRXMLCompletedEventHandler </brief>
end;

VipInterface vcom_MKRXMLCompletedEventHandler( vcomIDispatch ) Implements com_MKRXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_MKRXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_MKRXMLCompletedEventArgs </brief>
end;

VipInterface vcom_MKRXMLCompletedEventArgs( vcomIDispatch ) Implements com_MKRXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DVCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_DVCompletedEventHandler </brief>
end;

VipInterface vcom_DVCompletedEventHandler( vcomIDispatch ) Implements com_DVCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DVCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_DVCompletedEventArgs </brief>
end;

VipInterface vcom_DVCompletedEventArgs( vcomIDispatch ) Implements com_DVCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DVXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_DVXMLCompletedEventHandler </brief>
end;

VipInterface vcom_DVXMLCompletedEventHandler( vcomIDispatch ) Implements com_DVXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DVXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_DVXMLCompletedEventArgs </brief>
end;

VipInterface vcom_DVXMLCompletedEventArgs( vcomIDispatch ) Implements com_DVXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Repo_debtCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_Repo_debtCompletedEventHandler </brief>
end;

VipInterface vcom_Repo_debtCompletedEventHandler( vcomIDispatch ) Implements com_Repo_debtCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Repo_debtCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_Repo_debtCompletedEventArgs </brief>
end;

VipInterface vcom_Repo_debtCompletedEventArgs( vcomIDispatch ) Implements com_Repo_debtCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Repo_debtXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_Repo_debtXMLCompletedEventHandler </brief>
end;

VipInterface vcom_Repo_debtXMLCompletedEventHandler( vcomIDispatch ) Implements com_Repo_debtXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Repo_debtXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_Repo_debtXMLCompletedEventArgs </brief>
end;

VipInterface vcom_Repo_debtXMLCompletedEventArgs( vcomIDispatch ) Implements com_Repo_debtXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Coins_baseCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_Coins_baseCompletedEventHandler </brief>
end;

VipInterface vcom_Coins_baseCompletedEventHandler( vcomIDispatch ) Implements com_Coins_baseCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Coins_baseCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_Coins_baseCompletedEventArgs </brief>
end;

VipInterface vcom_Coins_baseCompletedEventArgs( vcomIDispatch ) Implements com_Coins_baseCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Coins_baseXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_Coins_baseXMLCompletedEventHandler </brief>
end;

VipInterface vcom_Coins_baseXMLCompletedEventHandler( vcomIDispatch ) Implements com_Coins_baseXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_Coins_baseXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_Coins_baseXMLCompletedEventArgs </brief>
end;

VipInterface vcom_Coins_baseXMLCompletedEventArgs( vcomIDispatch ) Implements com_Coins_baseXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FixingBaseCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_FixingBaseCompletedEventHandler </brief>
end;

VipInterface vcom_FixingBaseCompletedEventHandler( vcomIDispatch ) Implements com_FixingBaseCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FixingBaseCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_FixingBaseCompletedEventArgs </brief>
end;

VipInterface vcom_FixingBaseCompletedEventArgs( vcomIDispatch ) Implements com_FixingBaseCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FixingBaseXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_FixingBaseXMLCompletedEventHandler </brief>
end;

VipInterface vcom_FixingBaseXMLCompletedEventHandler( vcomIDispatch ) Implements com_FixingBaseXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_FixingBaseXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_FixingBaseXMLCompletedEventArgs </brief>
end;

VipInterface vcom_FixingBaseXMLCompletedEventArgs( vcomIDispatch ) Implements com_FixingBaseXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OvernightCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_OvernightCompletedEventHandler </brief>
end;

VipInterface vcom_OvernightCompletedEventHandler( vcomIDispatch ) Implements com_OvernightCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OvernightCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_OvernightCompletedEventArgs </brief>
end;

VipInterface vcom_OvernightCompletedEventArgs( vcomIDispatch ) Implements com_OvernightCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OvernightXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_OvernightXMLCompletedEventHandler </brief>
end;

VipInterface vcom_OvernightXMLCompletedEventHandler( vcomIDispatch ) Implements com_OvernightXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OvernightXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_OvernightXMLCompletedEventArgs </brief>
end;

VipInterface vcom_OvernightXMLCompletedEventArgs( vcomIDispatch ) Implements com_OvernightXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BauctionCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_BauctionCompletedEventHandler </brief>
end;

VipInterface vcom_BauctionCompletedEventHandler( vcomIDispatch ) Implements com_BauctionCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BauctionCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_BauctionCompletedEventArgs </brief>
end;

VipInterface vcom_BauctionCompletedEventArgs( vcomIDispatch ) Implements com_BauctionCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BauctionXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_BauctionXMLCompletedEventHandler </brief>
end;

VipInterface vcom_BauctionXMLCompletedEventHandler( vcomIDispatch ) Implements com_BauctionXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_BauctionXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_BauctionXMLCompletedEventArgs </brief>
end;

VipInterface vcom_BauctionXMLCompletedEventArgs( vcomIDispatch ) Implements com_BauctionXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DepoDynamicXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_DepoDynamicXMLCompletedEventHandler </brief>
end;

VipInterface vcom_DepoDynamicXMLCompletedEventHandler( vcomIDispatch ) Implements com_DepoDynamicXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DepoDynamicXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_DepoDynamicXMLCompletedEventArgs </brief>
end;

VipInterface vcom_DepoDynamicXMLCompletedEventArgs( vcomIDispatch ) Implements com_DepoDynamicXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DepoDynamicCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_DepoDynamicCompletedEventHandler </brief>
end;

VipInterface vcom_DepoDynamicCompletedEventHandler( vcomIDispatch ) Implements com_DepoDynamicCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DepoDynamicCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_DepoDynamicCompletedEventArgs </brief>
end;

VipInterface vcom_DepoDynamicCompletedEventArgs( vcomIDispatch ) Implements com_DepoDynamicCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OstatDynamicXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_OstatDynamicXMLCompletedEventHandler </brief>
end;

VipInterface vcom_OstatDynamicXMLCompletedEventHandler( vcomIDispatch ) Implements com_OstatDynamicXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OstatDynamicXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_OstatDynamicXMLCompletedEventArgs </brief>
end;

VipInterface vcom_OstatDynamicXMLCompletedEventArgs( vcomIDispatch ) Implements com_OstatDynamicXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OstatDynamicCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_OstatDynamicCompletedEventHandler </brief>
end;

VipInterface vcom_OstatDynamicCompletedEventHandler( vcomIDispatch ) Implements com_OstatDynamicCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_OstatDynamicCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_OstatDynamicCompletedEventArgs </brief>
end;

VipInterface vcom_OstatDynamicCompletedEventArgs( vcomIDispatch ) Implements com_OstatDynamicCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DragMetDynamicXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_DragMetDynamicXMLCompletedEventHandler </brief>
end;

VipInterface vcom_DragMetDynamicXMLCompletedEventHandler( vcomIDispatch ) Implements com_DragMetDynamicXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DragMetDynamicXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_DragMetDynamicXMLCompletedEventArgs </brief>
end;

VipInterface vcom_DragMetDynamicXMLCompletedEventArgs( vcomIDispatch ) Implements com_DragMetDynamicXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DragMetDynamicCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_DragMetDynamicCompletedEventHandler </brief>
end;

VipInterface vcom_DragMetDynamicCompletedEventHandler( vcomIDispatch ) Implements com_DragMetDynamicCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_DragMetDynamicCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_DragMetDynamicCompletedEventArgs </brief>
end;

VipInterface vcom_DragMetDynamicCompletedEventArgs( vcomIDispatch ) Implements com_DragMetDynamicCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetLatestDateTimeCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetLatestDateTimeCompletedEventHandler </brief>
end;

VipInterface vcom_GetLatestDateTimeCompletedEventHandler( vcomIDispatch ) Implements com_GetLatestDateTimeCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetLatestDateTimeCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetLatestDateTimeCompletedEventArgs </brief>
end;

VipInterface vcom_GetLatestDateTimeCompletedEventArgs( vcomIDispatch ) Implements com_GetLatestDateTimeCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetLatestDateCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetLatestDateCompletedEventHandler </brief>
end;

VipInterface vcom_GetLatestDateCompletedEventHandler( vcomIDispatch ) Implements com_GetLatestDateCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetLatestDateCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetLatestDateCompletedEventArgs </brief>
end;

VipInterface vcom_GetLatestDateCompletedEventArgs( vcomIDispatch ) Implements com_GetLatestDateCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetLatestDateTimeSeldCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetLatestDateTimeSeldCompletedEventHandler </brief>
end;

VipInterface vcom_GetLatestDateTimeSeldCompletedEventHandler( vcomIDispatch ) Implements com_GetLatestDateTimeSeldCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetLatestDateTimeSeldCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetLatestDateTimeSeldCompletedEventArgs </brief>
end;

VipInterface vcom_GetLatestDateTimeSeldCompletedEventArgs( vcomIDispatch ) Implements com_GetLatestDateTimeSeldCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetLatestDateSeldCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetLatestDateSeldCompletedEventHandler </brief>
end;

VipInterface vcom_GetLatestDateSeldCompletedEventHandler( vcomIDispatch ) Implements com_GetLatestDateSeldCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetLatestDateSeldCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetLatestDateSeldCompletedEventArgs </brief>
end;

VipInterface vcom_GetLatestDateSeldCompletedEventArgs( vcomIDispatch ) Implements com_GetLatestDateSeldCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EnumValutesXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_EnumValutesXMLCompletedEventHandler </brief>
end;

VipInterface vcom_EnumValutesXMLCompletedEventHandler( vcomIDispatch ) Implements com_EnumValutesXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EnumValutesXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_EnumValutesXMLCompletedEventArgs </brief>
end;

VipInterface vcom_EnumValutesXMLCompletedEventArgs( vcomIDispatch ) Implements com_EnumValutesXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EnumValutesCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_EnumValutesCompletedEventHandler </brief>
end;

VipInterface vcom_EnumValutesCompletedEventHandler( vcomIDispatch ) Implements com_EnumValutesCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_EnumValutesCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_EnumValutesCompletedEventArgs </brief>
end;

VipInterface vcom_EnumValutesCompletedEventArgs( vcomIDispatch ) Implements com_EnumValutesCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetCursDynamicXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetCursDynamicXMLCompletedEventHandler </brief>
end;

VipInterface vcom_GetCursDynamicXMLCompletedEventHandler( vcomIDispatch ) Implements com_GetCursDynamicXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetCursDynamicXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetCursDynamicXMLCompletedEventArgs </brief>
end;

VipInterface vcom_GetCursDynamicXMLCompletedEventArgs( vcomIDispatch ) Implements com_GetCursDynamicXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetCursDynamicCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetCursDynamicCompletedEventHandler </brief>
end;

VipInterface vcom_GetCursDynamicCompletedEventHandler( vcomIDispatch ) Implements com_GetCursDynamicCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetCursDynamicCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetCursDynamicCompletedEventArgs </brief>
end;

VipInterface vcom_GetCursDynamicCompletedEventArgs( vcomIDispatch ) Implements com_GetCursDynamicCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetCursOnDateXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetCursOnDateXMLCompletedEventHandler </brief>
end;

VipInterface vcom_GetCursOnDateXMLCompletedEventHandler( vcomIDispatch ) Implements com_GetCursOnDateXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetCursOnDateXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetCursOnDateXMLCompletedEventArgs </brief>
end;

VipInterface vcom_GetCursOnDateXMLCompletedEventArgs( vcomIDispatch ) Implements com_GetCursOnDateXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetSeldCursOnDateXMLCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetSeldCursOnDateXMLCompletedEventHandler </brief>
end;

VipInterface vcom_GetSeldCursOnDateXMLCompletedEventHandler( vcomIDispatch ) Implements com_GetSeldCursOnDateXMLCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetSeldCursOnDateXMLCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetSeldCursOnDateXMLCompletedEventArgs </brief>
end;

VipInterface vcom_GetSeldCursOnDateXMLCompletedEventArgs( vcomIDispatch ) Implements com_GetSeldCursOnDateXMLCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetSeldCursOnDateCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetSeldCursOnDateCompletedEventHandler </brief>
end;

VipInterface vcom_GetSeldCursOnDateCompletedEventHandler( vcomIDispatch ) Implements com_GetSeldCursOnDateCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetSeldCursOnDateCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetSeldCursOnDateCompletedEventArgs </brief>
end;

VipInterface vcom_GetSeldCursOnDateCompletedEventArgs( vcomIDispatch ) Implements com_GetSeldCursOnDateCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetCursOnDateCompletedEventHandler( comIDispatch );
// #docl Объектный интерфейс com_GetCursOnDateCompletedEventHandler </brief>
end;

VipInterface vcom_GetCursOnDateCompletedEventHandler( vcomIDispatch ) Implements com_GetCursOnDateCompletedEventHandler (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_GetCursOnDateCompletedEventArgs( comIDispatch );
// #docl Объектный интерфейс com_GetCursOnDateCompletedEventArgs </brief>
end;

VipInterface vcom_GetCursOnDateCompletedEventArgs( vcomIDispatch ) Implements com_GetCursOnDateCompletedEventArgs (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CXMLNode( comIDispatch );
// #docl Объектный интерфейс com_CXMLNode </brief>
end;

VipInterface vcom_CXMLNode( vcomIDispatch ) Implements com_CXMLNode (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CDataSet( comIDispatch );
// #docl Объектный интерфейс com_CDataSet </brief>
end;

VipInterface vcom_CDataSet( vcomIDispatch ) Implements com_CDataSet (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;

ObjInterface com_CDailyInfo( comIDispatch );
// #docl Объектный интерфейс com_CDailyInfo </brief>
end;

VipInterface vcom_CDailyInfo( vcomIDispatch ) Implements com_CDailyInfo (virtual);
// #docl Служебный объект, создавать запрещается !!! </brief>
public:
  constructor CreateQI// #docl Создает экземпляр интерфейса. </brief>
                      ( iComHandle       // #docl Код экземпляра.
                      : longint; flags   // #docl Свойства экземпляра.
                      : word );
end;


//--- coClasses---------------------------

VipInterface coSaldoXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_SaldoXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSaldoXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_SaldoXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coROISfixXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_ROISfixXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coROISfixXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_ROISfixXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRuoniaXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_RuoniaXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRuoniaXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_RuoniaXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coROISfixCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_ROISfixCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coROISfixCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_ROISfixCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRuoniaCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_RuoniaCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRuoniaCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_RuoniaCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface comrrf7DCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_mrrf7DCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface comrrf7DCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_mrrf7DCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface comrrf7DXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_mrrf7DXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface comrrf7DXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_mrrf7DXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface comrrfCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_mrrfCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface comrrfCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_mrrfCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface comrrfXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_mrrfXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface comrrfXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_mrrfXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSaldoCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_SaldoCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSaldoCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_SaldoCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNewsInfoXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_NewsInfoXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNewsInfoXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_NewsInfoXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOmodInfoXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_OmodInfoXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOmodInfoXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_OmodInfoXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coXVolCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_XVolCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coXVolCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                      ( vcom_XVolCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coXVolXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_XVolXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coXVolXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                         ( vcom_XVolXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMainInfoXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_MainInfoXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMainInfoXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_MainInfoXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAllDataInfoXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_AllDataInfoXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coAllDataInfoXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_AllDataInfoXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNewsInfoCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_NewsInfoCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coNewsInfoCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_NewsInfoCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSwapDynamicXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_SwapDynamicXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSwapDynamicXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_SwapDynamicXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSwapDynamicCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_SwapDynamicCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coSwapDynamicCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_SwapDynamicCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMKRCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_MKRCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMKRCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                     ( vcom_MKRCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMKRXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_MKRXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coMKRXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                        ( vcom_MKRXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDVCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_DVCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDVCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                    ( vcom_DVCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDVXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_DVXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDVXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                       ( vcom_DVXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRepo_debtCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_Repo_debtCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRepo_debtCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_Repo_debtCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRepo_debtXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                 ( vcom_Repo_debtXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coRepo_debtXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_Repo_debtXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCoins_baseCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_Coins_baseCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCoins_baseCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_Coins_baseCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCoins_baseXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                  ( vcom_Coins_baseXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCoins_baseXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_Coins_baseXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFixingBaseCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_FixingBaseCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFixingBaseCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                            ( vcom_FixingBaseCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFixingBaseXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                  ( vcom_FixingBaseXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coFixingBaseXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_FixingBaseXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOvernightCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_OvernightCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOvernightCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                           ( vcom_OvernightCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOvernightXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                 ( vcom_OvernightXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOvernightXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_OvernightXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBauctionCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_BauctionCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBauctionCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                          ( vcom_BauctionCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBauctionXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_BauctionXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coBauctionXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_BauctionXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDepoDynamicXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_DepoDynamicXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDepoDynamicXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_DepoDynamicXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDepoDynamicCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_DepoDynamicCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDepoDynamicCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_DepoDynamicCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOstatDynamicXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                    ( vcom_OstatDynamicXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOstatDynamicXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                 ( vcom_OstatDynamicXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOstatDynamicCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                 ( vcom_OstatDynamicCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coOstatDynamicCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                              ( vcom_OstatDynamicCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDragMetDynamicXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                      ( vcom_DragMetDynamicXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDragMetDynamicXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_DragMetDynamicXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDragMetDynamicCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_DragMetDynamicCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coDragMetDynamicCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_DragMetDynamicCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetLatestDateTimeCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                      ( vcom_GetLatestDateTimeCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetLatestDateTimeCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_GetLatestDateTimeCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetLatestDateCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                  ( vcom_GetLatestDateCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetLatestDateCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_GetLatestDateCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetLatestDateTimeSeldCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                          ( vcom_GetLatestDateTimeSeldCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetLatestDateTimeSeldCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                       ( vcom_GetLatestDateTimeSeldCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetLatestDateSeldCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                      ( vcom_GetLatestDateSeldCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetLatestDateSeldCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_GetLatestDateSeldCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnumValutesXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_EnumValutesXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnumValutesXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_EnumValutesXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnumValutesCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_EnumValutesCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coEnumValutesCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                             ( vcom_EnumValutesCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetCursDynamicXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                      ( vcom_GetCursDynamicXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetCursDynamicXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_GetCursDynamicXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetCursDynamicCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_GetCursDynamicCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetCursDynamicCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                ( vcom_GetCursDynamicCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetCursOnDateXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                     ( vcom_GetCursOnDateXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetCursOnDateXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                  ( vcom_GetCursOnDateXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetSeldCursOnDateXMLCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                         ( vcom_GetSeldCursOnDateXMLCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetSeldCursOnDateXMLCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                      ( vcom_GetSeldCursOnDateXMLCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetSeldCursOnDateCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                      ( vcom_GetSeldCursOnDateCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetSeldCursOnDateCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                                   ( vcom_GetSeldCursOnDateCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetCursOnDateCompletedEventHandler // #docl  Комментарии отсутствуют. </brief> 
                                                  ( vcom_GetCursOnDateCompletedEventHandler );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coGetCursOnDateCompletedEventArgs // #docl  Комментарии отсутствуют. </brief> 
                                               ( vcom_GetCursOnDateCompletedEventArgs );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCXMLNode // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_CXMLNode );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCDataSet // #docl  Комментарии отсутствуют. </brief> 
                        ( vcom_CDataSet );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;

VipInterface coCDailyInfo // #docl  Комментарии отсутствуют. </brief> 
                          ( vcom_CDailyInfo );
public:
  constructor Init // #docl Инициализация экземпляра интерфейса. </brief>
                   ;
  constructor Create // #docl Инициализация экземпляра интерфейса с флагами. </brief>
                     ( atlFlags // #docl Флаги интерфейса. </brief>
                               : word );
end;


#endif
