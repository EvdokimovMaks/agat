/*
 ╔══════════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 2004 корпорация ГАЛАКТИКА                            ║
 ║ Проект        : ГАЛАКТИКА                                                    ║
 ║ Система       : Контур Логистика. Управление недвижимостью                   ║
 ║ Версия        : 5.8х                                                         ║
 ║ Назначение    : Стандартные обработчики "деревянных" и других событий        ║
 ║ Ответственный : Жданович Юрий Геннадьевич                                    ║
 ╚══════════════════════════════════════════════════════════════════════════════╝
*/

#declare rltTreeTypeFuncs
function GetTreeType: byte;
{
  if (RecordExists rltObjChild <> tsOK)
    GetTreeType := ntfText
  else
    GetTreeType := if(TreeNodeIsOpen(trRltObjects), ntfOpen, ntfClose);
}

function GetTreeIcon(TreeType: byte) : string;
var tmpS : string;
{
  GetTreeIcon := '';

  case rltObjTree.VidObj of
    roBuilding,
    roBuildings : tmpS := 'Building';
    roZemCompl  : tmpS := 'ZemCompl';
    roPlace,
    roPlaces    : tmpS := 'Place';
    roRoom,
    roRooms     : tmpS := 'Room';
    roHouse,
    roHouses    : tmpS := 'House';
    roFloor     : tmpS := 'Floor';
  else
    Exit;
  end;

  case TreeType of
    ntfText : GetTreeIcon := 'L_Realting::Bmp' + tmpS;
    ntfClose: GetTreeIcon := 'L_Realting::Bmp' + tmpS + 'FolderClosed';
    ntfOpen : GetTreeIcon := 'L_Realting::Bmp' + tmpS + 'FolderOpened';
  end;
}
#end

#declare trlTreeCmdHandler
  cmTreeTop :
  {
    CurGroup := UpCurGroup;
  }

  cmTreeUp :
  {
    CurGroup := rltObjTree.cOwner;
  }

  cmTreeDown :
  {
    CurGroup := rltObjTree.nRec;
  }

  cmTreeNeedOwner :
  {
    TreeJumpToRecord(trRltObjects, rltObjTree.cOwner);
  }

  cmTreeNodeType:
  {
    var TreeType : byte;
    TreeType := GetTreeType;
    TreeSetNodeType(trRltObjects, TreeType, GetTreeIcon(TreeType));
  }
#end

#declare cmShowHideAllHandler
  cmShowAll : // Раскрыть все ветки
  {
    StartNewVisual(vtRotateVisual, vfTimer, ''#3'Раскрытие всех веток...'#13#3,1);
    TreePushPos(trRltObjects);

    if TreeGetFirst(trRltObjects)
    do
      {
        NextVisual;
        TreeOpenNode(trRltObjects);
      }
    while TreeGetNext(trRltObjects);
    StopVisual('', 0);
    TreePopPos(trRltObjects);
    RereadRecord(#rltObjTree);
  }

  cmHideAll : // Свернуть все ветки
  {
    var Flag : boolean; Flag := rltObjTree.cOwner = 0;
    if Flag
      TreePushPos(trRltObjects);
    TreeGetFirst(trRltObjects);
    TreeCloseAllOpenedNode(trRltObjects);
    if Flag
      TreePopPos(trRltObjects);
    RereadRecord(#rltObjTree);
  }
#end

#declare mnuShowHideAll
- 'Раскрыть все ветки',cmShowAll,'Разворачивает все дерево документов', hcGkatalSHier,'Ctrl+''+''',kbCtrlGrayPlus ,sci1Esc,,,,bmpOpenFolders ;
- 'Свернуть все ветки',cmHideAll,'Сворачивает все дерево документов'  , hcGkatalSHier,'Ctrl+''-''',kbCtrlGrayMinus,sci1Esc,,,,bmpCloseFolders;
#end
