//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 8.1 - Логистика
// Модуль НИОКР
// Функции для работы со сметой
//******************************************************************************

#ifndef __SpSmeta_obj__
#define __SpSmeta_obj__

#ifdef ComponentVersion
#component "L_NIOKR"
#end

ObjInterface SpSmetaObj;
  Procedure mtInitSmeta;
  Procedure mtClearSmeta(pTheme: comp);
  Procedure mtSetSpSmetaSum(pTheme, pSmeta, pStZatr, pFpCO: comp; sFld: string; aInd: word; Sum: double);
  Procedure mtAddSpSmetaSum(pTheme, pSmeta, pStZatr, pFpCO: comp; sFld: string; aInd: word; Sum: double);
  Procedure mtAddSpSmetaSum2UpStages(pTheme: comp);
  Procedure mtFlashSmeta;
  Function  GetActiveSmeta(pTheme: comp; var pSmeta: comp): boolean;
  Function  GetActiveModel(pTheme: comp): comp;
/*
pThere - ссылка на заказ/этап
pSmeta - ссылка на смету
pStZatr - ссылка на стать затрат
pFpCO - ссылка на исполнителя (Executor.cFpCO)
sFld - имя поля
aInd - индекс

если pStZatr = 0, то результатом будет сумма по исполнителю
если pFpCO = 0, то результатом будет сумма по статье
если pStZatr = 0 и pFpCO = 0, то результатом будет сумма по заказу/этапу

sFld. Возможные значения:
'SUMMA' - сумма затрат
'PRICE'  - цена
'NALOGS' - налоги
'FIXSUM' - зафиксированная сумма
'SUMS'  - нужно передавать параметр aInd

Требует пояснения только по параметру SUMS
SUMS[1] - Корректировка прибыли по исполнителю (используется при расчетах в алгоритмах)
SUMS[2] - фактические затраты (факт)
SUMS[3] - ФОТ по смете
SUMS[4] - фактический ФОТ (pSmeta должен быть передан = 0, т.к. факт по ФОТ не зависит от сметы и хранится с cSmeta = 0)
SUMS[5] - трудоемкость по исполнителю
SUMS[6] - распределенные входящие платежи (Цена-Факт)
*/
  Function  GetSpSmetaSum(pTheme, pSmeta, pStZatr, pFpCO: comp; sFld: string; aInd: word): double;
  Procedure SetSpSmetaSum(pTheme, pSmeta, pStZatr, pFpCO: comp; sFld: string; aInd: word; Sum: double);
  Procedure AddSpSmetaSum(pTheme, pSmeta, pStZatr, pFpCO: comp; sFld: string; aInd: word; Sum: double);
  Function  GetSpSmetaLook(pTheme, pSmeta, pStZatr, pFpCO: comp): word;
  Procedure SetSpSmetaLook(pTheme, pSmeta, pStZatr, pFpCO: comp; aValue: word);
  Procedure DeleteFactSmeta(pTheme: comp);
  Procedure DeleteSmeta(pSmeta: comp);
  Procedure DeleteSmetaExecutor(pTheme, pFpCO: comp);
  Function  GetRasprPlatS(pTheme, pStage, pFpCO, pVal: comp; dCalc: date): double;
  Function  GetRasprPlatK(pTheme, pStage, pFpCO, pStZatr, pCalPlan, pVal: comp; dCalc: date): double;
  Function  GetPlatKontr(pTheme, pStage, pVal: comp): double;
  Procedure RasprConverter;
  Procedure ReCalcNalog(pTheme, pSmeta, pFpCO, pExecutor : comp; Price : double);
  Procedure ReCalcNalogForTheme(pTheme: comp);
  Procedure SetManualTax(pTheme, pSmeta, pFpCO : comp; bIsManualTax : boolean);
  Function  IsManualTax(pTheme, pSmeta, pFpCO, pExecutor : comp) : boolean;
  Procedure ReCalcSumNalogs(pTheme : comp);
end;

VipInterface iSpSmeta implements SpSmetaObj Licensed(FREE);


#end // __SpSmeta_obj__
