//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 9.1
// Строитель локальных смет.
//------------------------------------------------------------------------------

#ifndef _SmetaBuilder_vih_
#define _SmetaBuilder_vih_

#ifdef ComponentVersion
 #component "L_Smeta"
#endif

Type TZatr = record
  volume    : double;
  KPrZatr   : tSumma; // "Прямые затраты, итог"
  KOsnZP    : tSumma; // "Основная ЗП, итог"
  KExpMash  : tSumma; // "Эксплуатация машин, итог"
  KZPMash   : tSumma; // "ЗП машинистов, итог"
  KStoimMC  : tSumma; // "Стоимость материалов, итог"
  KVozvMC   : tSumma; // "Возврат материалов, итог"
  KTranspMC : tSumma; // "Транспорт материалов, итог"
  KShefMont : tSumma; // "Шефмонтаж, итог"
  KTrudOsn  : tSumma; // "Трудозатраты осн.рабочих, итог"
  KTrudMash : tSumma; // "Трудозатраты машинистов, итог"
  SmetPrib  : tSumma; // "Сметная прибыль"
  NaklRash  : tSumma; // "Накладные расходы"
  LimitZatr : tSumma; // "Сумма лимитированных затрат"
end;

objinterface ISmetaBuilder;
  procedure BuildSmeta(
    _docNum: tDocNumber;
    _docName: string;
    _buildObject: comp;
    _customer: comp;
    _customerType: word;
    _contractor: comp;
    _contractorType: word
  );

  function BuildSmetaFactZero: comp;

  function BuildSmetaZatr(_zatr: TZatr): comp;

  function BuildPart(_node: comp; _catalogue: comp; _name: string): comp;

  function GetSmeta: comp;
  function GetNormBase(_smetaSpec: comp): comp;

  function BuildJob(
    _node: comp;
    _name: string;
    _code: string;
    _unit: comp;
    _npp: tNpp;
    _rate: double;
    _volume: double;
    _prmc: word;
    _mcusl: comp;
    _normJob: comp
  ): comp;

  function BuildJobZatr(_smetaJob: comp; _zatr: TZatr): comp;

  function BuildRes(
    _node: comp;
    _name: string;
    _code: string;
    _unit: comp;
    _npp: tNpp;
    _rate: double;
    _volume: double;
    _price: double;
    _resType: word;
    _prmc: word;
    _mcusl: comp;
    _normRes: comp
  ): comp;

  procedure BuildMtr(_smetaSpec: comp; _stZatr: comp);
end;

vipinterface SmetaBuilder implements ISmetaBuilder licensed(free);

#endif
