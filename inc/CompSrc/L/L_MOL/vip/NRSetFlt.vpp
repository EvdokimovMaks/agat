/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 2002 корпорация ГАЛАКТИКА                         ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Каталоги выбора                                           ║
 ║ Версия        : 5.8                                                       ║
 ║ Назначение    : Реализация функций универсальной фильтрации каталогов     ║
 ║ Ответственный : Какареко Сергей Александрович                             ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/
/*
 Здесь описаны макроопределения для быстрой реализации в каталогах выбора
 функций объектного интерфейса oNRSetFilter, предназначенного для определения
 набора отображаемых записей. Если набор пуст, то фильтрация по набору записей
 в каталоге не запускается.
 А также описаны макроопределения для включения функциональности фильтрации
 при запуске интерфейса выбора.

==============================================================================

ОСОБЕННОСТИ ИСПОЛЬЗОВАНИЯ

1. Количество записей в каталоге не должно быть слишком большим и не должно
   быть слишком большой разбежки между количеством записей в каталоге и
   в наборе отображаемых записей. Это обусловлено использованием жесткой
   подцепки по таблице в памяти.
   При прореживании каталога из 85 записей до 5 тормоза в навигации по
   записям замечены не были.
2. Набор отображаемых записей надо накачивать перед каждым запуском
   интерфейса выбора.
3. Фильтр накладывается дополнительно к уже существующим и может получиться
   так, что отображаются не все накачанные записи.

МЕТОДЫ ИСПОЛЬЗОВАНИЯ:

В каталоге выбора:

  Создем vih для интерфеса каталога выбора.
  В него вставляем #include NRSetFlt.obj
  и описываем имплементацию:
  VipInterface <имя интерфейса> implements oNRSetFilter;

  В исходнике интерфейса используем макродекларации:

    NRSET_TABLESTRUCT(VipIntName) <*>      используется до определения интерфейса.

    NRSET_BOUNDS(VipIntName,TableName) <*> используется в секции описания bounds
                                           основной логической таблицы интерефйса.

    NRSET_IMPLEMENTATION(VipIntName) <*>   используется в разделе описания процедур
                                           и функций интерфейса.

  Вызвать процедуры инициализации NRSetInit в cmInit и финальной обработки
  NRSetDone в cmDone.

  Макроопределения, помеченные значком <*> должны быть опязательно
  использованы в интерфейсе в котором делается фильтрация по набору записей.

  Процедуры NRSetEnable и NRSetDisable используются при необходимости
  временного отключения и включения фильтрации, например в случае, когда
  интерфейс используется и для добавления записей.

  Для того, чтобы пользователь мог включать/выключать фильтр по своему
  усмотрению во время работы с запущенным каталогом выбора, предназначены
  методы:
    NRSetAddMenuItem - добавление пункта меню по переключению фильтрации
    NRSetSwitch      - переключение фильтрации: вкл/выкл.
  В параметрах функции NRSetAddMenuItem задается cm-комманда, в обработчике
  которой и делается переключение фильтрации процедурой NRSetSwitch, ну и,
  конечно, надо спозиционироваться на валидной записи и перечитать запись.

Накачка набора отображаемых записей:

  Накачка набора отображаемых записей в интерфейсе вызывающем каталог выбора
  делается при помощи методов объектного интерфейса oNRSetFilter.
  Описание методов см. в NRSetFlt.obj

==============================================================================

#declare NRSET_IMPLEMENTATION(VipIntName)

  Описывает для интерфейса с именем VipIntName реализацию методов объектного
  интерфейса oNRSetFilter для управления наборами отображаемых записей
  каталога выбора из вне (см. также NRSetFlt.obj).

  Наборы отображения хранятся в таблице в памяти, определяемой при помощи
  #declare NRSET_TABLESTRUCT(VipIntName).
  
  Описан также набор функций для использования его исключительно внутри
  интерфейса выбора:

    procedure NRSetInit         - инициализация фильтрации (с включением)
    procedure NRSetDone         - финальная обработка по фильтрации

    function NRSetFilterEnabled - проверка: фильтр включен или выключен

    procedure NRSetEnable       - включение фильтрации по набору записей
    procedure NRSetDisable      - отключение фильтрации
    procedure NRSetSwitch       - переключение фильтрации: вкл/выкл.


    function NRSetAddMenuItem   - добавляет в существующее меню свой пункт
                                  по переключению режима фильтрации: вкл/выкл.

------------------------------------------------------------------------------
#declare NRSET_TABLESTRUCT(VipIntName)

  Описывает для интерфейса с именем VipIntName таблицу в памяти для хранения
  наборов номеров записей, которые будут отображаться в каталоге выбора.
  Работа с таблицей осуществляется через методы описанные в
  #declare NRSET_IMPLEMENTATION(VipIntName).
------------------------------------------------------------------------------
#declare NRSET_BOUNDS(VipIntName,TableName)

  Описывает для интерфейса с именем VipIntName баундс на таблицу с именем
  TableName, который будет устанавливаться при включении фильтрации
  по набору записей, соответствующими функциями описанными в #declare
  NRSET_IMPLEMENTATION(VipIntName).
*/

// ---------------------------------------------------------------------------

#declare NRSET_TABLESTRUCT(VipIntName)
table struct tNRS#VipIntName
(
  cRec : comp
)
with index
(
  iNRS#VipIntName = cRec (Unique)
);
#end

// ---------------------------------------------------------------------------

#declare NRSET_BOUNDS(VipIntName,TableName)
Bounds byNRSet =
    #TableName.NRec /== tNRS#VipIntName.cRec
#end

// ---------------------------------------------------------------------------

#declare NRSET_IMPLEMENTATION(VipIntName)

// ----------------------------------------------------------------------
// Установка имени фильтра
// Имя должно отвечать на вопрос: Фильтр установлен по чем?
// Например: "по цвету объекта"
// ----------------------------------------------------------------------
procedure NRSetFilterName( psFilterName : string );
{
  SaveMyDsk(psFilterName, 'NRSetFilterName#VipIntName');
}
// ----------------------------------------------------------------------
// Чтение имени фильтра
// ----------------------------------------------------------------------
function NRSetGetFilterName : string;
{
  var sRes : string;
  var bDateChanged : boolean;
  ReadMyDsk(sRes, 'NRSetFilterName#VipIntName', bDateChanged);
  sRes := if(bDateChanged, '', sRes); // на случай вывалов, когда имя не сбрасывается
  NRSetGetFilterName := sRes;
}
// ----------------------------------------------------------------------
// Добавление NRec записи в набор отображаемых записей в каталоге выбора.
// ----------------------------------------------------------------------
// Возвращает false в случае ошибки.
// ----------------------------------------------------------------------
function NRSetAdd(pcNRec : comp) : boolean;
{
  ClearBuffer(tnTNRS#VipIntName);
  tNRS#VipIntName.cRec := pcNRec;
  case ( insert current tNRS#VipIntName ) of
    tsOk, tsDuplicateKey : NRSetAdd := true;
  else
    NRSetAdd := false;
  end;
}
// ----------------------------------------------------------------------
// Удаление NRec записи из набора отображаемых записей каталога выбора.
// ----------------------------------------------------------------------
// Возвращает false в случае ошибки.
// ----------------------------------------------------------------------
function NRSetDelete(pcNRec : comp) : boolean;
{
  NRSetDelete :=
    (delete tNRS#VipIntName where
            (( pcNRec == tNRS#VipIntName.cRec )) = tsOk);
}
// ----------------------------------------------------------------------
// Очистка набора отображаемых записей каталога выбора.
// ----------------------------------------------------------------------
procedure NRSetClear;
{
  NRSetFilterName('');
  MTClear(tnTNRS#VipIntName,mfNormal);
}
// ----------------------------------------------------------------------
// Количество записей в наборе
// ----------------------------------------------------------------------
function NRSetCount : longint;
{
  NRSetCount := RecordsInTable(tnTNRS#VipIntName);
}

// ===========================================================================
// ===========================================================================

// включение фильтрации по набору записей
procedure NRSetEnable;
{
  if NRSetCount() > 0
    if not BoundActive(tbByNRSet)
      AddBounds(tbByNRSet);
}
// отключение фильтрации
procedure NRSetDisable;
{
  if BoundActive(tbByNRSet)
    SubBounds(tbByNRSet);
}
// переключение фильтрации: вкл/выкл.
procedure NRSetSwitch;
{
  if BoundActive(tbByNRSet)
  {
    SubBounds(tbByNRSet);
  }
  else
  {
    if NRSetCount() > 0
      AddBounds(tbByNRSet);
  }  
}
// инициализация фильтрации
procedure NRSetInit;
{
  NRSetEnable;
}
// финальная обработка фильтрации
procedure NRSetDone;
{
  NRSetClear;
}
// проверка: фильтр включен или выключен
function NRSetFilterEnabled : boolean;
{
  NRSetFilterEnabled := BoundActive(tbByNRSet);
}
// ---------------------------------------------------------------------------
// Добавление пункта меню по установке/снятию фильтрации по набору.
// При формировании названия пункта меню используется наименование фильтра.
// Добавление происходит толко в случае наличия набора для фильтрации.
// ---------------------------------------------------------------------------
// Передаваемые параметры:
//     pliMenuID  - идентификатор Меню полученный функцией LoadMenu
//     pliCommand - команда которая будет вызываться по этому пункту меню
// ---------------------------------------------------------------------------
// Возвращаемые значения:
//     идентификатор Меню полученный функцией LoadMenu
// ---------------------------------------------------------------------------
function NRSetAddMenuItem(pliMenuID : longint; pliCommand : longint) : longint;
  {
  NRSetAddMenuItem := pliMenuID;
  if NRsetCount() > 0
    {
    var sFltName  : string;
    var sMenuItem : string;
    sFltName  := NRSetGetFilterName();
    sMenuItem := FormatStr_2( '%s дополнительный фильтр %s',
                              if( NRSetFilterEnabled(), 'Снять', 'Установить'),
                              sFltName );
    if #__TOOLVERSION__ >= 3003.013
      { AddMenuItem(pliMenuID,'separator',0); }
    AddMenuItem(pliMenuID,sMenuItem,pliCommand);
    }
  }
#end
