//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 8.1 - Логистика
// Общее для интерфейсов прайс-листов
//******************************************************************************

#declare TreeFuncsDeclare
  Function  GetViewName : string; Forward;
  Function  IsGrPriceNow: boolean; Forward;
  Procedure Jump2Record(pKlPrice, pGrPrice: comp); Forward;
#end

#declare TreeVarsExec
, ( GetViewName )
    ( FieldName = ViewName )

, if(IsGrPriceNow, '', if(KlPrice.dPrice = ZeroDate, '', DateToStr(KlPrice.dPrice, 'DD/MM/YYYY')))
    ( FieldName = VdPrice )

, if(IsGrPriceNow, '', if(KlPrice.dBeg = ZeroDate, '', DateToStr(KlPrice.dBeg, 'DD/MM/YYYY')))
    ( FieldName = VdBeg )

, if(IsGrPriceNow, '', if(KlPrice.dEnd = ZeroDate, '', DateToStr(KlPrice.dEnd, 'DD/MM/YYYY')))
    ( FieldName = VdEnd )

, if(IsGrPriceNow, '', if (KlPrice.cVal = 0, 'ВАЛ', oValFunc.GetValSymbol(KlPrice.cVal)))
    ( FieldName = VVAL )

, if(IsGrPriceNow, '', if (KlPrice.TipMoney = 0, sGetTune('NDE.SimvRub')
                                               , if(KlPrice.TipMoney = 1, VVAL + '+' + sGetTune('NDE.SimvRub'), VVAL)))
    ( FieldName = VtipMon )

, if(IsGrPriceNow, '', if (KlPrice.Tip = 0, 'МЦ', 'Усл'))
    ( FieldName = Vtip )

, if(IsGrPriceNow, '', if (KlPrice.VhodNal = 1, 'Входят', 'Не входят'))
    ( FieldName = VvhodNal )
#end

#declare TreeTables
, KlPrice KlPrice2
, GrPrice TreeGrPrice(GrPrice02)
, GrPrice GrPrice2
#end

#declare TreeView
Tree trKlPrice ('Выберите прайс-лист', hcAllVPick, sci14EnEscTree);
Fields
  ViewName #3'Наименование прайс-листа': [34], Protect;
  VdPrice  #3'Дата цен' : [10], Protect, NoAutoSize, Centered;
  VTip     #3'?'        : [ 3], Skip   , NoAutoSize, Centered;
  VvhodNal #3'Налоги'   : [ 9], Skip   , NoAutoSize, Centered;
  VtipMon  #3'Тип вал'  : [ 8], Skip   , NoAutoSize, Centered, { Font = { Italic = TRUE } };
end;
#end

#declare TreeViewWithStatus
Tree trKlPrice ('Выберите прайс-лист', hcAllVPick, sci14EnEscTree);
Fields
  ViewName #3'Наименование прайс-листа': [34], Protect;
  VdPrice  #3'Дата цен' : [10], Protect, NoAutoSize, Centered;
  VdBeg    #3'С'        : [10], Protect, NoAutoSize, Centered;
  VdEnd    #3'По'       : [10], Protect, NoAutoSize, Centered;
  VTip     #3'?'        : [ 3], Skip   , NoAutoSize, Centered;
  VvhodNal #3'Налоги'   : [ 9], Skip   , NoAutoSize, Centered;
  VtipMon  #3'Тип вал'  : [ 8], Skip   , NoAutoSize, Centered, { Font = { Italic = TRUE } };
end;
#end

#declare TreeFuncs
Function IsGrPriceNow: boolean;
{
  if IsTree
    Result := (TreeLevel(TrKlPrice) = 0)
  else
    Result := FALSE;
}

Function GetViewName: string;
{
  Result := if(GetScreenTable(TrKlPrice) = #KlPrice
             , KlPrice.Name
             , if(TreeGrPrice.Name = '', ' Прайс-листы без группы', TreeGrPrice.Name));
}

Procedure SetMyFormat;
{
  if IsTree
    SetFormat(TrKlPrice)
  else
    {
      SetFormat(BrKlPrice);
      SelectField(#KlPrice.Name);
    }
}

Procedure Jump2Record(pKlPrice, pGrPrice: comp);
{
  TreeGetFirst(TrKlPrice);

  if ( GetFirst FastFirstRow TreeGrPrice where (( pGrPrice == TreeGrPrice.nRec )) = tsOk )
    {}

  RereadRecord(#TreeGrPrice);

  TreeOpenNode(TrKlPrice);
  TreeGetNext(TrKlPrice);

  if ( GetFirst FastFirstRow KlPrice where (( pKlPrice == KlPrice.nRec )) = tsOk )
    {}

  RereadRecord(#KlPrice);
}

Procedure KlPriceSetBounds(FieldSorting, Name_DateBnd: word);
var wBnd: word;
{
  wBnd := if(BoundActive(tbOnDPrice1), 1, 0);
  wBnd += if(BoundActive(tbOnDPrice2), 2, 0);
  
  case FieldSorting of
  //******************
    2: // #KlPrice.Name
      {
        if BoundActive(tbOnStatusByDPrice     ) OR BoundActive(tbOnGrStatusByDPrice     )
            OR
           BoundActive(tbOnStatusByTipDPrice  ) OR BoundActive(tbOnGrStatusByTipDPrice  )
            OR
           BoundActive(tbOnStatusByTipName    ) OR BoundActive(tbOnGrStatusByTipName    )
            OR
           BoundActive(tbOnStatusByVhDPrice   ) OR BoundActive(tbOnGrStatusByVhDPrice   )
            OR
           BoundActive(tbOnStatusByVhName     ) OR BoundActive(tbOnGrStatusByVhName     )
          PushBounds(if(IsTree, tbOnGrStatusByName, tbOnStatusByName));

        if BoundActive(tbOnStatusTipByDPrice  ) OR BoundActive(tbOnGrStatusTipByDPrice  )
            OR
           BoundActive(tbOnStatusTipByVhDPrice) OR BoundActive(tbOnGrStatusTipByVhDPrice)
            OR
           BoundActive(tbOnStatusTipByVhName  ) OR BoundActive(tbOnGrStatusTipByVhName  )
          PushBounds(if(IsTree, tbOnGrStatusTipByName, tbOnStatusTipByName));

        if BoundActive(tbOnStatusVhByDPrice   ) OR BoundActive(tbOnGrStatusVhByDPrice   )
            OR
           BoundActive(tbOnStatusVhByTipDPrice) OR BoundActive(tbOnGrStatusVhByTipDPrice)
            OR
           BoundActive(tbOnStatusVhByTipName  ) OR BoundActive(tbOnGrStatusVhByTipName  )
          PushBounds(if(IsTree, tbOnGrStatusVhByName, tbOnStatusVhByName));

        if BoundActive(tbOnStatusVhTipByDPrice) OR BoundActive(tbOnGrStatusVhTipByDPrice)
          PushBounds(if(IsTree, tbOnGrStatusVhTipByName, tbOnStatusVhTipByName));
      }
  //******************
    3: // #Tip
      {
        case Name_DateBnd of
          1:
            {
              if (
                  BoundActive(tbOnStatusByName)      OR BoundActive(tbOnGrStatusByName)
                   OR
                  BoundActive(tbOnStatusByDPrice)    OR BoundActive(tbOnGrStatusByDPrice)
                   OR
                  BoundActive(tbOnStatusByTipDPrice) OR BoundActive(tbOnGrStatusByTipDPrice)
                   OR
                  BoundActive(tbOnStatusByVhName)    OR BoundActive(tbOnGrStatusByVhName)
                   OR
                  BoundActive(tbOnStatusByVhDPrice)  OR BoundActive(tbOnGrStatusByVhDPrice)
                 )
                PushBounds(if(IsTree, tbOnGrStatusByTipName, tbOnStatusByTipName));

              if (
                  BoundActive(tbOnStatusTipByDPrice)   OR BoundActive(tbOnGrStatusTipByDPrice)
                   OR
                  BoundActive(tbOnStatusTipByVhDPrice) OR BoundActive(tbOnGrStatusTipByVhDPrice)
                   OR
                  BoundActive(tbOnStatusTipByVhName)   OR BoundActive(tbOnGrStatusTipByVhName)
                 )
                PushBounds(if(IsTree, tbOnGrStatusTipByName, tbOnStatusTipByName));

              if (
                  BoundActive(tbOnStatusVhByName)      OR BoundActive(tbOnGrStatusVhByName)
                   OR
                  BoundActive(tbOnStatusVhByDPrice)    OR BoundActive(tbOnGrStatusVhByDPrice)
                   OR
                  BoundActive(tbOnStatusVhByTipDPrice) OR BoundActive(tbOnGrStatusVhByTipDPrice)
                 )
                PushBounds(if(IsTree, tbOnGrStatusVhByTipName, tbOnStatusVhByTipName));

              if (
                  BoundActive(tbOnStatusVhTipByDPrice) OR BoundActive(tbOnGrStatusVhTipByDPrice)
                 )
                PushBounds(if(IsTree, tbOnGrStatusVhTipByName, tbOnStatusVhTipByName));
            }
          2:
            {
              if (
                  BoundActive(tbOnStatusByName)     OR BoundActive(tbOnGrStatusByName)
                   OR
                  BoundActive(tbOnStatusByDPrice)   OR BoundActive(tbOnGrStatusByDPrice)
                   OR
                  BoundActive(tbOnStatusByTipName)  OR BoundActive(tbOnGrStatusByTipName)
                   OR
                  BoundActive(tbOnStatusByVhName)   OR BoundActive(tbOnGrStatusByVhName)
                   OR
                  BoundActive(tbOnStatusByVhDPrice) OR BoundActive(tbOnGrStatusByVhDPrice)
                 )
                PushBounds(if(IsTree, tbOnGrStatusByTipDPrice, tbOnStatusByTipDPrice));

              if (
                  BoundActive(tbOnStatusTipByName)     OR BoundActive(tbOnGrStatusTipByName)
                   OR
                  BoundActive(tbOnStatusTipByVhDPrice) OR BoundActive(tbOnGrStatusTipByVhDPrice)
                   OR
                  BoundActive(tbOnStatusTipByVhName)   OR BoundActive(tbOnGrStatusTipByVhName)
                 )
                PushBounds(if(IsTree, tbOnGrStatusTipByDPrice, tbOnStatusTipByDPrice));

              if (
                  BoundActive(tbOnStatusVhByName)    OR BoundActive(tbOnGrStatusVhByName)
                   OR
                  BoundActive(tbOnStatusVhByDPrice)  OR BoundActive(tbOnGrStatusVhByDPrice)
                   OR
                  BoundActive(tbOnStatusVhByTipName) OR BoundActive(tbOnGrStatusVhByTipName)
                 )
                PushBounds(if(IsTree, tbOnGrStatusVhByTipDPrice, tbOnStatusVhByTipDPrice));

              if (
                  BoundActive(tbOnStatusVhTipByName) OR BoundActive(tbOnGrStatusVhTipByName)
                 )
                PushBounds(if(IsTree, tbOnGrStatusVhTipByDPrice, tbOnStatusVhTipByDPrice));
            }
        end;
      }
  //******************
    4: // VhodNal
      {
        case Name_DateBnd of
          1:
            {
              if (
                  BoundActive(tbOnStatusByName)      OR BoundActive(tbOnGrStatusByName)
                   OR
                  BoundActive(tbOnStatusByDPrice)    OR BoundActive(tbOnGrStatusByDPrice)
                   OR
                  BoundActive(tbOnStatusByVhDPrice) OR BoundActive(tbOnGrStatusByVhDPrice)
                   OR
                  BoundActive(tbOnStatusByTipName)    OR BoundActive(tbOnGrStatusByTipName)
                   OR
                  BoundActive(tbOnStatusByTipDPrice)  OR BoundActive(tbOnGrStatusByTipDPrice)
                 )
                PushBounds(if(IsTree, tbOnGrStatusByVhName, tbOnStatusByVhName));

              if (
                  BoundActive(tbOnStatusVhByDPrice)   OR BoundActive(tbOnGrStatusVhByDPrice)
                   OR
                  BoundActive(tbOnStatusVhByTipDPrice) OR BoundActive(tbOnGrStatusVhByTipDPrice)
                   OR
                  BoundActive(tbOnStatusVhByTipName)   OR BoundActive(tbOnGrStatusVhByTipName)
                 )
                PushBounds(if(IsTree, tbOnGrStatusVhByName, tbOnStatusVhByName));

              if (
                  BoundActive(tbOnStatusTipByName)      OR BoundActive(tbOnGrStatusTipByName)
                   OR
                  BoundActive(tbOnStatusTipByDPrice)    OR BoundActive(tbOnGrStatusTipByDPrice)
                   OR
                  BoundActive(tbOnStatusTipByVhDPrice) OR BoundActive(tbOnGrStatusTipByVhDPrice)
                 )
                PushBounds(if(IsTree, tbOnGrStatusTipByVhName, tbOnStatusTipByVhName));

              if (
                  BoundActive(tbOnStatusVhTipByDPrice) OR BoundActive(tbOnGrStatusVhTipByDPrice)
                 )
                PushBounds(if(IsTree, tbOnGrStatusVhTipByName, tbOnStatusVhTipByName));
            }
          2:
            {
              if (
                  BoundActive(tbOnStatusByName)     OR BoundActive(tbOnGrStatusByName)
                   OR
                  BoundActive(tbOnStatusByDPrice)   OR BoundActive(tbOnGrStatusByDPrice)
                   OR
                  BoundActive(tbOnStatusByVhName)  OR BoundActive(tbOnGrStatusByVhName)
                   OR
                  BoundActive(tbOnStatusByTipName)   OR BoundActive(tbOnGrStatusByTipName)
                   OR
                  BoundActive(tbOnStatusByTipDPrice) OR BoundActive(tbOnGrStatusByTipDPrice)
                 )
                PushBounds(if(IsTree, tbOnGrStatusByVhDPrice, tbOnStatusByVhDPrice));

              if (
                  BoundActive(tbOnStatusVhByName)     OR BoundActive(tbOnGrStatusVhByName)
                   OR
                  BoundActive(tbOnStatusVhByTipDPrice) OR BoundActive(tbOnGrStatusVhByTipDPrice)
                   OR
                  BoundActive(tbOnStatusVhByTipName)   OR BoundActive(tbOnGrStatusVhByTipName)
                 )
                PushBounds(if(IsTree, tbOnGrStatusVhByDPrice, tbOnStatusVhByDPrice));

              if (
                  BoundActive(tbOnStatusTipByName)    OR BoundActive(tbOnGrStatusTipByName)
                   OR
                  BoundActive(tbOnStatusTipByDPrice)  OR BoundActive(tbOnGrStatusTipByDPrice)
                   OR
                  BoundActive(tbOnStatusTipByVhName) OR BoundActive(tbOnGrStatusTipByVhName)
                 )
                PushBounds(if(IsTree, tbOnGrStatusTipByVhDPrice, tbOnStatusTipByVhDPrice));

              if (
                  BoundActive(tbOnStatusVhTipByName) OR BoundActive(tbOnGrStatusVhTipByName)
                 )
                PushBounds(if(IsTree, tbOnGrStatusVhTipByDPrice, tbOnStatusVhTipByDPrice));
            }
        end;
      }
  //******************
    else // dPrice
      {
        if BoundActive(tbOnStatusByName       ) OR BoundActive(tbOnGrStatusByName       )
            OR
           BoundActive(tbOnStatusByTipName    ) OR BoundActive(tbOnGrStatusByTipName    )
            OR
           BoundActive(tbOnStatusByTipDPrice  ) OR BoundActive(tbOnGrStatusByTipDPrice  )
            OR
           BoundActive(tbOnStatusByVhName     ) OR BoundActive(tbOnGrStatusByVhName     )
            OR
           BoundActive(tbOnStatusByVhDPrice   ) OR BoundActive(tbOnGrStatusByVhDPrice   )
          PushBounds(if(IsTree, tbOnGrStatusByDPrice, tbOnStatusByDPrice));

        if BoundActive(tbOnStatusTipByName    ) OR BoundActive(tbOnGrStatusTipByName    )
            OR
           BoundActive(tbOnStatusTipByVhName  ) OR BoundActive(tbOnGrStatusTipByVhName  )
            OR
           BoundActive(tbOnStatusTipByVhDPrice) OR BoundActive(tbOnGrStatusTipByVhDPrice)
          PushBounds(if(IsTree, tbOnGrStatusTipByDPrice, tbOnStatusTipByDPrice));

        if BoundActive(tbOnStatusVhByName     ) OR BoundActive(tbOnGrStatusVhByName     )
            OR
           BoundActive(tbOnStatusVhByTipName  ) OR BoundActive(tbOnGrStatusVhByTipName  )
            OR
           BoundActive(tbOnStatusVhByTipDPrice) OR BoundActive(tbOnGrStatusVhByTipDPrice)
          PushBounds(if(IsTree, tbOnGrStatusVhByDPrice, tbOnStatusVhByDPrice));

        if BoundActive(tbOnStatusVhTipByName) OR BoundActive(tbOnGrStatusVhTipByName)
          PushBounds(if(IsTree, tbOnGrStatusVhTipByDPrice, tbOnStatusVhTipByDPrice));
      }
  //******************
  end;

  if ( (wBnd and 1) <> 0 ) AND not BoundActive(tbOnDPrice1)
    AddBounds(tbOnDPrice1);

  if ( (wBnd and 2) <> 0 ) AND not BoundActive(tbOnDPrice2)
    AddBounds(tbOnDPrice2);
}

Procedure KlPriceSetTreeBounds;
var wBnd: word;
{
  wBnd := if(BoundActive(tbOnDPrice1), 1, 0);
  wBnd += if(BoundActive(tbOnDPrice2), 2, 0);

  if IsTree
    {
      if BoundActive(tbOnStatusByName       ) PushBounds(tbOnGrStatusByName       );
      if BoundActive(tbOnStatusByDPrice     ) PushBounds(tbOnGrStatusByDPrice     );
      if BoundActive(tbOnStatusByTipName    ) PushBounds(tbOnGrStatusByTipName    );
      if BoundActive(tbOnStatusByTipDPrice  ) PushBounds(tbOnGrStatusByTipDPrice  );
      if BoundActive(tbOnStatusByVhName     ) PushBounds(tbOnGrStatusByVhName     );
      if BoundActive(tbOnStatusByVhDPrice   ) PushBounds(tbOnGrStatusByVhDPrice   );
      if BoundActive(tbOnStatusTipByName    ) PushBounds(tbOnGrStatusTipByName    );
      if BoundActive(tbOnStatusTipByDPrice  ) PushBounds(tbOnGrStatusTipByDPrice  );
      if BoundActive(tbOnStatusTipByVhName  ) PushBounds(tbOnGrStatusTipByVhName  );
      if BoundActive(tbOnStatusTipByVhDPrice) PushBounds(tbOnGrStatusTipByVhDPrice);
      if BoundActive(tbOnStatusVhByName     ) PushBounds(tbOnGrStatusVhByName     );
      if BoundActive(tbOnStatusVhByDPrice   ) PushBounds(tbOnGrStatusVhByDPrice   );
      if BoundActive(tbOnStatusVhByTipName  ) PushBounds(tbOnGrStatusVhByTipName  );
      if BoundActive(tbOnStatusVhByTipDPrice) PushBounds(tbOnGrStatusVhByTipDPrice);
      if BoundActive(tbOnStatusVhTipByName  ) PushBounds(tbOnGrStatusVhTipByName  ); 
      if BoundActive(tbOnStatusVhTipByDPrice) PushBounds(tbOnGrStatusVhTipByDPrice);
    }
  else
    {
      if BoundActive(tbOnGrStatusByName       ) PushBounds(tbOnStatusByName       );
      if BoundActive(tbOnGrStatusByDPrice     ) PushBounds(tbOnStatusByDPrice     );
      if BoundActive(tbOnGrStatusByTipName    ) PushBounds(tbOnStatusByTipName    );
      if BoundActive(tbOnGrStatusByTipDPrice  ) PushBounds(tbOnStatusByTipDPrice  );
      if BoundActive(tbOnGrStatusByVhName     ) PushBounds(tbOnStatusByVhName     );
      if BoundActive(tbOnGrStatusByVhDPrice   ) PushBounds(tbOnStatusByVhDPrice   );
      if BoundActive(tbOnGrStatusTipByName    ) PushBounds(tbOnStatusTipByName    );
      if BoundActive(tbOnGrStatusTipByDPrice  ) PushBounds(tbOnStatusTipByDPrice  );
      if BoundActive(tbOnGrStatusTipByVhName  ) PushBounds(tbOnStatusTipByVhName  );
      if BoundActive(tbOnGrStatusTipByVhDPrice) PushBounds(tbOnStatusTipByVhDPrice);
      if BoundActive(tbOnGrStatusVhByName     ) PushBounds(tbOnStatusVhByName     );
      if BoundActive(tbOnGrStatusVhByDPrice   ) PushBounds(tbOnStatusVhByDPrice   );
      if BoundActive(tbOnGrStatusVhByTipName  ) PushBounds(tbOnStatusVhByTipName  );
      if BoundActive(tbOnGrStatusVhByTipDPrice) PushBounds(tbOnStatusVhByTipDPrice);
      if BoundActive(tbOnGrStatusVhTipByName  ) PushBounds(tbOnStatusVhTipByName  ); 
      if BoundActive(tbOnGrStatusVhTipByDPrice) PushBounds(tbOnStatusVhTipByDPrice);
    }

  if ( (wBnd and 1) <> 0 ) AND not BoundActive(tbOnDPrice1)
    AddBounds(tbOnDPrice1);

  if ( (wBnd and 2) <> 0 ) AND not BoundActive(tbOnDPrice2)
    AddBounds(tbOnDPrice2);
}

#end

#declare TreeOnHotKeys(MenuName)
  PutHotCommand(RunMenu(#MenuName));
#end

#declare TreeHandler

HandleEvent

cmAccording:
{
  if Not UpdateTable
    Exit;

  #OnBeforeAccording

  var c, c2: comp;
  c := 0;

  IsTree := Not IsTree;

  if not IsTree
    {
      if ( GetScreenTable(TrKlPrice) = #KlPrice )
        c := KlPrice.nRec;

      KlPriceSetTreeBounds;

      if ( GetFirst KlPrice where (( c == KlPrice.nRec )) <> tsOk)
        if ( GetFirst KlPrice = tsOk )
          {}

      RereadRecord(#KlPrice);

      if ( GetColumnSorting(TrKlPrice, #VdPrice) <> 0 )
        SetColumnSorting(BrKlPrice, #KlPrice.dPrice, GetColumnSorting(TrKlPrice, #VdPrice));

      if ( GetColumnSorting(TrKlPrice, #ViewName) <> 0 )
        SetColumnSorting(BrKlPrice, #KlPrice.Name  , GetColumnSorting(TrKlPrice, #ViewName));
    }
  else
    {
      if not IsValid(#KlPrice)
        TreeGetFirst(TrKlPrice)
      else
        {
          c  := KlPrice.nRec;
          c2 := KlPrice.cGrPrice;

          KlPriceSetTreeBounds;

          Jump2Record(c, c2);
        }

      if ( GetColumnSorting(BrKlPrice, #KlPrice.dPrice) <> 0 )
        SetColumnSorting(TrKlPrice, #VdPrice , GetColumnSorting(BrKlPrice, #KlPrice.dPrice));

      if ( GetColumnSorting(BrKlPrice, #KlPrice.Name) <> 0 )
        SetColumnSorting(TrKlPrice, #ViewName, GetColumnSorting(BrKlPrice, #KlPrice.Name));
    }

  AfterAccording(c);
  SetMyFormat;

  SetCommandEnabled(cmShowAll, IsTree);
  SetCommandEnabled(cmHideAll, IsTree);
}

cmShowAll: // Раскрыть все ветки
{
  if Not IsTree
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer, 'Раскрытие всех веток...', 1);

  if TreeGetFirst(TrKlPrice)
    do
      {
        NextVisual;
        TreeOpenNode(TrKlPrice);
      }
    While TreeGetNext(TrKlPrice);

  StopVisual('', 0);

  TreeGetFirst(TrKlPrice);
  RereadRecord;
}

cmHideAll: // Свернуть все ветки
{
  if Not IsTree
    Exit;

  StartNewVisual(vtRotateVisual, vfTimer, 'Сворачивание всех веток...', 1);

  if TreeGetFirst(TrKlPrice)
    do
      {
        NextVisual;
        TreeCloseNode(TrKlPrice);
      }
    While TreeGetNext(TrKlPrice);

  StopVisual('', 0);

  TreeGetFirst(TrKlPrice);
  RereadRecord(#TreeGrPrice);
  RereadRecord;
}

cmTreeTop:
  SetScreenTable(TrKlPrice, #TreeGrPrice);

cmTreeUp:
  SetScreenTable(TrKlPrice, #TreeGrPrice);

cmTreeDown:
  SetScreenTable(TrKlPrice, #KlPrice);

cmTreeNeedOwner:
  if ( GetScreenTable(TrKlPrice) = #KlPrice )
    TreeJumpToRecord(TrKlPrice, KlPrice.cGrPrice);

end;
#end

#declare TreeNodeTypeHandler
HandleEvent

cmTreeNodeType:
  if ( GetScreenTable(TrKlPrice) = #KlPrice )
    TreeSetNodeType(TrKlPrice, 2)
  else
    if ( GetFirst FastFirstRow KlPrice <> tsOk )
      TreeSetNodeType(TrKlPrice, 2)
   else
     if Not IsValidNew(#KlPrice)
       TreeSetNodeType(TrKlPrice, 2);
end;

#end

#declare TreeOnDefault
  if ( IsTree AND ( GetScreenTable(TrKlPrice) = #TreeGrPrice ) )
    {
      Message('Выберите прайс-лист, а не группу!', InFormation);
      Stop;
      Exit;
    }
#end

#declare TreeOnAddNewRec
  if ( ( GetScreenTable(TrKlPrice) = #TreeGrPrice ) AND IsTree )
    {
      RunInterface(GetGrPrice, TreeGrPrice.nRec);
      RereadRecord;
      Exit;
    }
#end

#declare TreeOnDoEdit
  if IsTree
    {
      if ( GetScreenTable(TrKlPrice) = #TreeGrPrice )
        {
          if ( TreeGrPrice.nRec = -1 )
            if ( Message('Данная группа не является редактируемой.'#13
                       + 'Редактировать каталог групп прайс-листов?',
                         YesNo + CancelButton + Confirmation) <> cmYes )
              Exit;

          PutCommand(cmEdit);
          RunInterface('GetGrPrice', TreeGrPrice.nRec);
        }
      else
        {
          var c: comp; c := KlPrice.nRec;
          PutCommand(cmDefault);

          RunInterface('PriceL', KlPrice.nRec, KlPrice.Tip, word(0), word(5));

          if ( GetFirst KlPrice2 where (( c == KlPrice2.nRec )) = tsOk )
            Jump2Record(KlPrice2.nRec, KlPrice2.cGrPrice);
        }

      RereadRecord;
      Exit;
    }
#end

#declare TreeOnInit
  IsTree := Not (boGetTune('Pick.IerPrice'));
  SetMyFormat;
  IsTree := Not IsTree;

  SetMyFormat;

  SetCommandEnabled(cmShowAll, IsTree);
  SetCommandEnabled(cmHideAll, IsTree);
#end

#declare TreeOpenSearchWindow
Window wSearch 'Окно поиска' DoAccept, EscClose, Gray;
  Show at (,, 50, 3)

Screen ScrGrPrice;
  Table TreeGrPrice
Fields
  TreeGrPrice.Name: Protect, QuickChoice;
<<

`Группа`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;

Screen ScrKlPrice;
  Table KlPrice
Fields
  KlPrice.Name: Protect;
<<

`Прайс-лист`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;

HandleEvent

cmOpenSearch:
{
  case CurField of
  //**************
    #TreeGrPrice.Name:
      {
        var pGrPrice: comp;
        QuickChoiceName := 'qcGrPriceName';

        if ( RunInterface('GetGrPrice', pGrPrice) <> cmCancel )
          {
            TreeGetFirst(TrKlPrice);

            if ( GetFirst TreeGrPrice where (( pGrPrice == TreeGrPrice.nRec )) = tsOk )
              {}

            RereadRecord(#TreeGrPrice);
          }

        PutCommand(cmDefault);
        Abort;
      }
  //**************
    #KlPrice.Name:
      {
        var pKlPrice: comp;
        QuickChoiceName := 'qcPriceLName';

        if IsValid(#KlPrice)
          pKlPrice := KlPrice.nRec
        else
          pKlPrice := 0;

        SaveMyDsk(FALSE, '__PRICEL_NeedTree__');

        if ( RunInterface('PriceL', pKlPrice, 0, 0, 0) <> cmCancel )
          if ( GetFirst KlPrice2 where (( pKlPrice == KlPrice2.nRec )) = tsOk )
            Jump2Record(KlPrice2.nRec, KlPrice2.cGrPrice);

        SaveMyDsk(TRUE, '__PRICEL_NeedTree__');

        PutCommand(cmDefault);
        Abort;
      }
  //**************
  end;
}

end;

end;
#end

#declare TreeOnOpenSearch
cmOpenSearch:
{
  if Not ( IsTree AND ( CurField = #ViewName))
    Exit;

  if ( GetScreenTable(TrKlPrice) = #TreeGrPrice )
    SetFormat(ScrGrPrice)
  else
    SetFormat(ScrKlPrice);

  RunWindowModal(wSearch);

  Abort;
}
#end

#declare TreeCheckGrPrice
  if ( (insert GrPrice2 set GrPrice2.nRec := -1, GrPrice2.Name := '') <> tsOk )
    {}

  if ( (update KlPrice where (( comp(0) == KlPrice.cGrPrice )) set KlPrice.cGrPrice := -1) <> tsOk )
    {}
#end

#declare SaveSortParamPricesInDsk(Prefix,ExtraFld)
  SaveMyDsk(GetTableBackOrder(tnKlPrice), '#(Prefix)_BackOrder');
  SaveMyDsk(Name_DateBnd, '#(Prefix)_Name_DateBnd');

  var FieldSorting : word;
  var ColumnSorting: integer;

  if Not IsTree
    {
      ColumnSorting := GetColumnSorting(BrKlPrice, #KlPrice.dPrice);

      if ( ColumnSorting <> 0 )
        FieldSorting := 1
      else
        {
          ColumnSorting := GetColumnSorting(BrKlPrice, #KlPrice.Name);

          if ( ColumnSorting <> 0 )
            FieldSorting := 2
          else
            {
              ColumnSorting := GetColumnSorting(BrKlPrice, #Vtip);

              if ( ColumnSorting <> 0 )
                FieldSorting := 3
              else
                {
                  ColumnSorting := GetColumnSorting(BrKlPrice, #ExtraFld);

                  if ( ColumnSorting <> 0 )
                    FieldSorting := 4;
                }
            }
        }
    }
  else
    {
      ColumnSorting := GetColumnSorting(TrKlPrice, #VdPrice);

      if ( ColumnSorting <> 0 )
        FieldSorting := 1
      else
        {
          ColumnSorting := GetColumnSorting(TrKlPrice, #ViewName);

          if ( ColumnSorting <> 0 )
            FieldSorting := 2
          else
            {
              ColumnSorting := GetColumnSorting(TrKlPrice, #Vtip);

              if ( ColumnSorting <> 0 )
                FieldSorting := 3
              else
                {
                  ColumnSorting := GetColumnSorting(TrKlPrice, #ExtraFld);

                  if ( ColumnSorting <> 0 )
                    FieldSorting := 4;
                }
            }
        }
    }

  SaveMyDsk(FieldSorting , '#(Prefix)_FieldSorting');
  SaveMyDsk(ColumnSorting, '#(Prefix)_ColumnSorting');
#end

#declare RestoreSortParamPricesInDsk(Prefix,ExtraFld)
  var NeedBackOrder: boolean;
  var FieldSorting : word;
  var ColumnSorting: integer;

  if (
      ReadMyDsk(FieldSorting , '#(Prefix)_FieldSorting' , TRUE)
       AND
      ReadMyDsk(ColumnSorting, '#(Prefix)_ColumnSorting', TRUE)
       AND
      ReadMyDsk(Name_DateBnd , '#(Prefix)_Name_DateBnd' , TRUE)
       AND
      ReadMyDsk(NeedBackOrder, '#(Prefix)_BackOrder'    , TRUE)
     )
    {
      if ( ( Name_DateBnd = 0 ) OR ( Name_DateBnd > 2 ) )
        Name_DateBnd := 2;

      case FieldSorting of
      //******************
        2:
          {
            if IsTree
              SetColumnSorting(TrKlPrice, #ViewName, ColumnSorting)
            else
              SetColumnSorting(BrKlPrice, #KlPrice.Name, ColumnSorting);
          }
      //******************
        3:
          {
            SetColumnSorting(-1, #Vtip, ColumnSorting);
          }
      //******************
        4:
          {
            SetColumnSorting(-1, #ExtraFld, ColumnSorting);
          }
      //******************
        else // 0 OR ELSE
          {
            if IsTree
              SetColumnSorting(TrKlPrice, #VdPrice       , if(ColumnSorting = 0, 1, ColumnSorting))
            else
              SetColumnSorting(BrKlPrice, #KlPrice.dPrice, if(ColumnSorting = 0, 1, ColumnSorting));
          }
      //******************
      end;

      KlPriceSetBounds(FieldSorting, Name_DateBnd);

      SetTableBackOrderIn(tnKlPrice, NeedBackOrder);
    }
  else
    {
      if IsTree
        SetColumnSorting(TrKlPrice, #VdPrice       , -1)
      else
        SetColumnSorting(BrKlPrice, #KlPrice.dPrice, -1);

      KlPriceSetBounds(0, 0);
    }

  KlPriceSetBounds(FieldSorting, Name_DateBnd);

  if IsTree
    {
      TreeGetFirst(TrKlPrice);
      RereadRecord(#TreeGrPrice);
    }

  RereadRecord(#KlPrice);
#end
