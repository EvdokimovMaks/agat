//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Заработная плата
// "Составная иерархия"
//------------------------------------------------------------------------------

/*
Наскучило раз за разом писать громоздкий код для группировки данных при
построении различного рода отчетов? Воспользуйтесь механизмом "составной
иерархии", позволяющим хранить и обходить (с сортировкой по определенному
пользователем ключу) иерархию зависимостей между различными уровнями
группировки исходных данных, а так же накапливать связанные с узлами иерархии
определяемую пользователем информацию (итоги).
*/

#ifndef _ICOMPOUNDHIERARCHY_OBJ_INCLUDED_
#define _ICOMPOUNDHIERARCHY_OBJ_INCLUDED_

#include ISummable.obj

#component "Z_Zar"

#doc
  Объектный интерфейс для накопления и обхода информации об иерархических
  зависимостях разнородных сущностей, связанных с ними данных и итогах.</brief>

  <p>Группы однородных сущностей идентифицируются своим кодом (Code), сущности
  в группе - nrec-ом (Entity). Сущности фактически являются аналитическими
  признаками, характеризующими некие исходные данные. Организация упорядоченных
  наборов таких признаков в иерархическую структуру позволяет выполнять
  группировки описываемых этими наборами данных.</p>
#end
objinterface ICompoundHierarchy;
  // на этапе обхода иерархии

  #doc
    Генерируется для каждого узла иерархии во время ее обхода.</brief>

    <p>Уровень сущности в стеке обхода передаётся в параметре Depth.</p>
  #end
  event procedure ProcessEntity(Entity: comp; Code: word; Depth: integer);

  #doc
    Генерируется для каждой строки данных, ассоциированных с текущим узлом иерархии.</brief>

    <p>Уровень сущности в стеке обхода передаётся в параметре Depth, ссылка на
    данные - в Data. Событие возникает только если выгрузка сущностей
    сопровождалась выгрузкой описываемых ими данных, после обработки всех
    нижестоящих по отношению к данному узлов, их данных и ассоциированных с
    узлами итогов.</p>
  #end
  event procedure ProcessData(Entity: comp; Code: word; Depth: integer; Data: comp);

  #doc
    Генерируется для обработки ассоциированных с узлом иерархии итогов.</brief>

    <p>Уровень сущности в стеке обхода передаётся в параметре Depth. Событие
    возникает после обработки нижестоящих по отношению к данному узлов, их
    данных и итогов.</p>
  #end
  event procedure ProcessTotal(Entity: comp; Code: word; Depth: integer; Total: ISummable);

  // построение иерархии

  #doc
    Вставляет сущность в иерархию.</brief>

    <p>Сущность подчиняется узлу ParentNode. Метод возвращает nrec узла,
    описывающего положение сущности в иерархии.</p>
  #end
  function Ins(ParentNode: comp; Entity: comp; Code: word): comp;

  #doc
    Генерируется во время построения иерархии для определения естественного
    родителя сущности.</brief>

    <p>Подписка на этот метод должна осуществляться, если сущности в группе
    организованы в древовидную структуру и это нужно отразить при построении
    составной иерархии.</p>
  #end
  event function ParentOf(Entity: comp; Code: word): comp;

  #doc
    Генерируется во время построения иерархии для получения ключа сущности.</brief>

    <p>По умолчанию сущности на одном уровне иерархии сортируются в порядке
    возрастания кодов групп и nrec-ов. Подписка на этот метод осуществляется в
    случаях, когда нужно изменить порядок сортировки сущностей в группах.</p>
  #end
  event function KeyOf(Entity: comp; Code: word): string;

  #doc
    Ассоциирует ссылку на данные Data с узлом иерархии Node. Данные сортируются
    в порядке возрастания значений ключей Key.
  #end
  procedure InsData(Node: comp; Data: comp; Key: string);

  #doc
    Связывает итоги с узлом иерархии, соответствующим последней вставленой
    сущности. Одновременно производится подсуммирование итогов.
  #end
  procedure Accumulate(Sum: ISummable);

  #doc
    Выполняет обход иерархии в глубину. Обход сопровождается визуализацией с
    заголовком VisualHeader. Если заголовок не задан, визуализация процесса не
    осуществляется.
  #end
  procedure LoopHierarchy(VisualHeader: string);

  #doc
    Возвращает nrec текущего узла иерархии во время ее обхода.
  #end
  function GetCurrentNode: comp;

  #doc
    Во время обхода иерархии возвращает ссылку на ассоциированные с текущим
    узлом итоги.
  #end
  function GetCurrentTotal: ISummable;

  #doc
    Очищает иерархию.
  #end
  procedure Clear;
end;

//------------------------------------------------------------------------------
#doc
  Объектный интерфейс стека обхода составной иерархии.
#end
objinterface ICompoundHierarchyStack;

  #doc
    Возвращает true и nrec сущности на уровне Depth или false в случае, если
    процедура обхода составной иерархии не достигла глубины Depth.
  #end
  function GetEntity(Depth: integer; var Value: comp): boolean;

  #doc
    Возвращает true и код группы сущности на уровне Depth или false в случае,
    если процедура обхода составной иерархии не достигла глубины Depth.
  #end
  function GetCode(Depth: integer; var Value: word): boolean;

  #doc
    Возвращает true и ссылку на итоги, ассоциированные с узлом на уровне Depth
    или false в случае, если процедура обхода составной иерархии не достигла
    глубины Depth.
  #end
  function GetTotal(Depth: integer; var Value: ISummable): boolean;

  #doc
    Возвращает true и nrec узла иерархии на уровне Depth или false в случае,
    если процедура обхода составной иерархии не достигла глубины Depth.
  #end
  function GetNode(Depth: integer; var Value: comp): boolean;
end;

//------------------------------------------------------------------------------
#doc
  Объектный интерфейс сумматора итогов для составной иерархии.</brief>

  <p>Применяется в случаях, когда используются внешние механизмы хранения
  ассоциированных с узлами составной иерархии итогов.</p>
#end
objinterface ICompoundHierarchyTotals;

  #doc
    Производит подсуммирование итогов от листьев к вышестоящим узлам и далее
    вверх по иерархии, но не выше глубины MinDepth.
  #end
  function GatherTotals(MinDepth: integer): boolean;

  #doc
    При обходе иерархии генерируется для подсуммирования итогов узла,
    находящегося в стеке обхода на уровне Depth, к итогам узла на уровне
    Depth-1.</brief>

    <p>Подразумеваеся, что реализация данного объектного интерфейса
    поддерживает также и объектный интерфейс
    <link objinterface Z_ZAR::ICompoundHIerarchyStack>Z_ZAR::ICompoundHIerarchyStack</link>.</p>
  #end
  event procedure OnSumUp(Depth: integer);
end;


//******************************************************************************
#doc
  Объектный интерфейс итератора по узлам составной иерархии.
#end
objinterface ICompoundHierarchyIterator;
  #doc
    Устанавливает указатель на первый элемент списка.
  #end
  function First: boolean;

  #doc
    Устанавливает указатель на следующий элемент списка.
  #end
  function Next: boolean;

  #doc
    Возвращает идентификатор текущего узла.
  #end
  function GetNode: comp;

  #doc
    Возвращает описываемую текущим узлом сущность.
  #end
  function GetEntity: comp;

  #doc
    Возвращает код описываемой текущим узлом сущности.
  #end
  function GetCode: comp;
end;

//******************************************************************************
#doc
  Объектный интерфейс управляемого сущностью объекта
#end
objinterface IEntityDriven;
  procedure Bind(Entity: comp; Code: word);
end;

//******************************************************************************
#doc
  Объектный интефрейс управляемого узлом объекта
#end
objinterface INodeDriven;
  procedure Bind(Node: comp);
end;

//******************************************************************************
#doc
  Объектный интерфейс с для доступа к информации об отношениях вида
  "вышестоящий-подчиненный" узлов составной иерархии и сущностей в ней.
#end
objinterface ICompoundHierarchyFiliations;
  #doc
    Возвращает true, если данный узел является вышестоящим для какого-либо
    другого узла.
  #end
  function IsParentNode(Node: comp): boolean;

  #doc
    Возвращает true, если данный узел является подчинен какому-либо другому
    узлу.
  #end
  function IsChildNode(Node: comp): boolean;

  #doc
    Возвращает итератор по списку подчиненных узлов.
  #end
  function GetNodeChildren(Node: comp): ICompoundHierarchyIterator;

  #doc
    Возвращает идентификатор вышестоящего узла.
  #end
  function GetNodeParent(Node: comp): comp;

  #doc
    Возвращает true, если данная сущность является вышестоящей для какой-либо
    сущности.
  #end
  function IsParentEntity(Entity: comp; Code: word): boolean;

  #doc
    Возвращает true, если данная сущность подчинена какой-либо сущности.
  #end
  function IsChildEntity(Entity: comp; Code: word): boolean;

  #doc
    Возвращает итератор по списку подчиненных сущностей.
  #end
  function GetEntityChildren(Entity: comp; Code: word): ICompoundHierarchyIterator;

  #doc
    Возвращает итератор по списку вышестоящих сущностей.
  #end
  function GetEntityParents(Entity: comp; Code: word): ICompoundHierarchyIterator;
end;

#end
