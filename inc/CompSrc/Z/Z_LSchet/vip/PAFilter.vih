//******************************************************************************
//                                                      (с) корпорация Галактика
// Галактика 7.12 - Заработная плата
// Описания объектных интерфейсов для работы с традиционными фильтрами по
// подразделениям и лицевым счетам
//******************************************************************************

#ifndef _PAFILTER_INCLUDED_
#define _PAFILTER_INCLUDED_

#ifdef ComponentVersion
#component "z_lschet"
#end

#include IDepartmentValidator.obj
#include SalaryDepartmentsSelector.obj
#include CLSFuncs.vih
#doc
  Объектный интерфейс для управления традиционными фильтрами по подразделениям
  и лицевым счетам.
#end
objinterface ITraditionalPersonalAccountFilter;
  #doc
    Инициирует работу с фильтрами.</brief>

    <p>Если ReReadAccounts = true, будет предпринята попытка обновления списка
    текущих лицевых счетов. Если PreserveMarks = true, пометки лицевых счетов
    не будут удалены даже при включенной настройке "удалять пометки при входе
    в интерфейсы выбора".</p>
  #end
  procedure InitFilter(ReReadAccounts: boolean; PreserveMarks: boolean);

  #doc
    Возвращает строку с описанием фильтра по подразделениям.
  #end
  function GetDepartmentFilterStr: string;

  #doc
    Возвращает строку с описанием фильтра по лицевым счетам.
  #end
  function GetPersonalAccountFilterStr: string;

  #doc
    Возвращает true, если установлен фильтр по подразделениям (выбраны одно или
    несколько подразделений, но не все доступные).
  #end
  function IsDepartmentFilterSet: boolean;

  #doc
    Возвращает true, если установлен фильтр по лицевым счетам (помечены один
    или несколько лицевых счетов).
  #end
  function IsPersonalAccountFilterSet: boolean;

  #doc
    Возвращает битовую маску состояний фильтров по подразделению/лицевым
    счетам.</brief>

    <p>Биты:
    <ul>
    <li> 0 - фильтр по подразделениям;
    <li> 1 - фильтр по лицевым счетам.
    </ul>
    </p>
  #end
  function GetFilterState: word;

  #doc
    Обновляет состояние фильтра по лицевым счетам.
  #end
  procedure UpdatePersonalAccountFilterState;

  #doc
    Запускает интерфейс выбора текущих подразделений и возвращает команду, с
    которой завершилось его выполнение. Если MultipleSelection = true,
    допускается множественная пометка подразделений, иначе - только
    одиночная.</brief>

    <p>Если фильтр изменен, список текущих лицевых счетов обновляется.</p>
  #end
  function ChangeDepartmentFilter(MultipleSelection: boolean): word;

  #doc
    Очищает фильтр по подразделениям и обновляет список текущих лицевых счетов.
  #end
  procedure ClearDepartmentFilter;

  #doc
    Запускает интерфейс выбора лицевых счетов и возвращает команду, с
    которой завершилось его выполнение.
  #end
  function ChangePersonalAccountFilter(choiced: word): word;

  #doc
    Очищает фильтр по работникам.
  #end
  procedure ClearPersonalAccountFilter;

  #doc
    Устанавливает фильтр по одиночному лицевому счету с данным nrec-ом.
    Возвращает true в случае успешного завершения.
  #end
  function SelectPersonalAccount(PersonalAccount: comp): boolean;

  #doc
    Проверяет фильтр по работникам (и при необходимости автоматически
    устанавливает его).
  #end
  function CheckPersonalAccountFilter(choiced:word): boolean;
end;

#doc
  Дополнение к объектному интерфейсу для управления традиционными фильтрами по
  подразделениям и лицевым счетам.
#end
objinterface ITraditionalPersonalAccountFilterExt;
  #doc
    Инициирует работу с фильтрами.</brief>

    <p>Если ReReadAccounts = true, будет предпринята попытка обновления текущих
    лицевых счетов по состоянию на дату DepFilterDate. Если DepFilterDate
    нулевая, то принимается текущий расчетный период. Если PreserveMarks =
    true, пометки лицевых счетов не будут удалены даже при включенной настройке
    "удалять пометки при входе в интерфейсы выбора".</p>
  #end
  procedure InitFilterExt(ReReadAccounts: boolean; PreserveMarks: boolean; DepFilterDate: date);

  #doc
    Запускает интерфейс выбора текущих подразделений и возвращает команду, с
    которой завершилось его выполнение. Если MultipleSelection = true,
    допускается множественная пометка подразделений, иначе - только
    одиночная.</brief>

    <p>Если фильтр изменен, список текущих лицевых счетов обновляется по
    состоянию на дату DepFilterDate.</p>
  #end
  function ChangeDepartmentFilterExt(MultipleSelection: boolean; DepFilterDate: date): word;

  #doc
    Очищает фильтр по подразделениям и обновляет список текущих лицевых счетов
    по состоянию на дату DepFilterDate.
  #end
  procedure ClearDepartmentFilterExt(DepFilterDate: date);
end;

//------------------------------------------------------------------------------
#doc
  Общий объектный интерфейс, с расширенной возможностью выбора режимов работы
  традиционных фильтров по подразделениям и лицевым счетам.
#end
objinterface IPAFilterExtOption;
  #doc
    Инициирует работу с фильтрами.</brief>

    <p>Если ReReadAccounts = true будет предпринята попытка обновления текущих
    лицевых счетов.
    Если PreserveMarks = true, пометки лицевых счетов не будут удалены даже при
    включенной настройке "удалять пометки при входе в интерфейсы выбора".

    Выбор режима работы с помощью extOption:
    pafoCommon и ReReadAccounts = true - произойдет обновление текущих лицевых
    счетов за текущий расчетный период.
    pafoLastPeriod и ReReadAccounts = true - обновление текущих лицевых счетов
    по состоянию на дату date1.
    pafoCexozFilter и ReReadAccounts = true - режим работы фильтров по подразделению
    и лицевым счетам в котором происходит следующее:
    После выбора подразделений в текущие заносятся те лицевые счета у которых
    имеются суммы в таблицах SumVidOp, Nenach, Nachisl с цехом отнесения затрат
    который присутствует в только что помеченных подразделениях фильтра по подразделению,
    причем суммы рассматриваются начисленные в(/за - в зависимости от настройки) период,
    задаваемый датой data1 и data2.
    </p>
  #end
  procedure InitFilterExtOptions(ReReadAccounts: boolean; PreserveMarks: boolean; DepartmentValidator: IDepartmentValidator; date1: date; date2: date; extOption: longint);

  #doc
    Запускает интерфейс выбора текущих подразделений и возвращает команду, с
    которой завершилось его выполнение. Если MultipleSelection = true,
    допускается множественная пометка подразделений, иначе - только
    одиночная.</brief>

    <p>Если фильтр изменен, список текущих лицевых счетов обновляется в режиме
    заданном в extOption. date1 и date2 получают смысл в зависимости от extOption</p>
  #end
  function ChangeDepartmentFilterExtOptions(MultipleSelection: boolean; DepartmentValidator: IDepartmentValidator; date1: date; date2: date; extOption:longint): word;

  #doc
    Очищает фильтр по подразделениям и обновляет список текущих лицевых счетов </brief>
    при extOption = pafoCommon
    по состоянию на дату date1 - при настройке extOption = pafoLastPeriod
    с учетом фильтра по цеху отнесения затрат - при настройке extOption = pafoCexozFilter
    (для фильтра по цеху отнесения затрат дополнительно задается диапазон времени date1..date2.
    Этот период используется для выборки сумм(с определенным цехом отнесения затрат) из таблиц.
  #end
  procedure ClearDepartmentFilterExtOptions(DepartmentValidator: IDepartmentValidator; date1: date; date2: date; extOption: longint);
end;

objinterface IPAFVitrualMethods;
  #doc
    Загрузка интерфейса
  #end
  function LoadSalaryDep: ISalaryDepartmentsSelector;
end;

objinterface IPAFVitrualMethods2;
  #doc
    Инициализация объектного интерфейса функций пересканирования лицевых счетов  
  #end
  function InitCLSF: ICurLSFunctions;
  #doc
    Пометить записи при отсутствии пометок отобранных лицевых счетов
  #end
  procedure FillForMarksData;
  #doc
    Получить ссылку на подразделение в лицевом счете
  #end
  function GetValueByCex: comp;
  #doc
    Получить ФИО сотрудника
  #end
  function GetValueByFIO: string;
  #doc
    Получить количество записей в таблице
  #end
  function GetRecordCount: longint;
  #doc
    Получить текстовую информацию о пометках лицевых счетов
  #end
  function GetEmptyText: string;
  #doc
    Очистить пометки отобранных лицевых счетов
  #end
  procedure ClearPersonalAccountFilterFull;
  #doc
    Сохранить пометки в отдельный буфер
  #end
  procedure TempStoreCurrentMarks;
  #doc
    Установить признака действия пользователя
  #end
  procedure SetMarksCall;
  #doc
    Сбросить признак действия пользователя
  #end
  procedure ReSetMarksCall;
end;

objinterface IPAFilterExtOption2;
  #doc
    Выбрать подразделения и при необходимости пересканировать лицевые счета
  #end
  procedure PickDepartments(DepartmentValidator: IDepartmentValidator;
                            ADate1, ADate2: date; AFilterMode: longint);
  #doc
    пересканировать при необходимости лицевые счета и
    вызвать интерфейса пометки лицевых счетов 
  #end
  procedure PickPersonalAccount(AFilterMode: longint; ADate1, ADate2: date);
  #doc
    Инициализировать фильтр и пересканировать лицевых счетов
  #end
  procedure PersonalAccountsReScan(AFilterMode: longint; ADate1, ADate2: date; ARefresh: boolean);
  #doc
    Инициализировать фильтр по лицевым счетам
  #end
  procedure InitPAFilterMode(DepValidator: IDepartmentValidator; ADate1, ADate2: date; AFilterMode: longint);
  #doc
    Сбросить фильтр по подразделений с анализом пересканирования лицевых счетов
  #end
  procedure ClearDepFilterByMode(DepValidator: IDepartmentValidator; ADate1, ADate2: date; AFilterMode: longint);
  #doc
    Обработать измененные параметры фильтра
  #end
  procedure ChangeFilterParameters;
end;

//------------------------------------------------------------------------------

vipinterface TraditionalPersonalAccountFilter
  implements
    ITraditionalPersonalAccountFilter,
    ITraditionalPersonalAccountFilterExt,
    IPAFilterExtOption,
    IPAFVitrualMethods,
    IPAFVitrualMethods2
Licensed(Free)
;

vipinterface TraditionalPersonalAccountFilterChild(TraditionalPersonalAccountFilter)
  implements
    IPAFilterExtOption2
Licensed(Free)
;
    public:
    //дополнительные методы
      procedure SetPAFMode(vipMode: word);
    //новая реализация
      function ITraditionalPersonalAccountFilter.GetDepartmentFilterStr: string;
      function ITraditionalPersonalAccountFilter.CheckPersonalAccountFilter(choiced:word): boolean;
      function ITraditionalPersonalAccountFilter.GetPersonalAccountFilterStr: string;
      procedure ITraditionalPersonalAccountFilter.UpdatePersonalAccountFilterState;
      function ITraditionalPersonalAccountFilter.ChangePersonalAccountFilter(choiced:word): word;
      function IPAFVitrualMethods.LoadSalaryDep: ISalaryDepartmentsSelector;
      function IPAFVitrualMethods2.InitCLSF: ICurLSFunctions;

      procedure IPAFVitrualMethods2.FillForMarksData;
      function IPAFVitrualMethods2.GetValueByCex: comp;
      function IPAFVitrualMethods2.GetValueByFIO: string;
      function IPAFVitrualMethods2.GetRecordCount: longint;
      function IPAFVitrualMethods2.GetEmptyText: string;
      procedure IPAFVitrualMethods2.ClearPersonalAccountFilterFull;
      procedure IPAFVitrualMethods2.TempStoreCurrentMarks;
      procedure IPAFVitrualMethods2.SetMarksCall;
      procedure IPAFVitrualMethods2.ReSetMarksCall;
    end;

#end
