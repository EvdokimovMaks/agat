/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,2003 корпорация ГАЛАКТИКА                    ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Заработная плата                                          ║
 ║ Версия        : 7.12                                                      ║
 ║ Назначение    : Об`ектный интерфейс для формирования реестра в банк       ║
 ║ Ответственный : Артамонов Дмитрий Сергеевич                               ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/
#ifdef ComponentVersion
  #component "Z_PayRep"
#end

#doc
Объектный интерфейс для формирования реестра в банк </brief>
  Механизм формирования реестра:
  наполняем таблицу в памяти, с помощью методов : Set*
  Далее с помощью методов:
                          SetSBBANNAME(stName: string);
                          SetSBBANMNEM(stNMnem: string);
                          SetFORMINGDATE(Formdate: date);
                          SetDATAZA(dZA: date);
                          SetDATAV(dV: date);
                          SetPREFIX(PR: string);
  устанавливаем параметры, общие для всего реестра.
  Затем с помощью процедуры CreatePayRoll создаем реестр(ы)
  Данные из таблицы в памяти группируются по организации получателю и банку- получателю
#end
objinterface IFormPayRoll;


#doc
Подразделение с учетом глубины иерархии
#end
procedure SetCEXAKT(coValue: comp);
#doc
Ссылка на организацию-получателя
#end
procedure SetCPOL(coValue: comp);
#doc
Ссылка на банк получателя
#end
procedure SetCBANKPOL(coValue: comp);
#doc
Ссылка на лицевой счет
#end
procedure SetCLSCH(coValue: comp);
#doc
Ссылка на персону
#end
procedure SetTPERSON(coValue: comp);
#doc
Ссылка на подразделение работника
#end
procedure SetCEX(coValue: comp);
#doc
Номер лицевого счета работника
#end
procedure SetNOMLSH(stValue : string);
#doc
Номер карты работника
#end
procedure SetNOMCARD(stValue : string);

#doc
ФИО работника
#end
procedure SetFIO(stValue:  string[60]);
//------------------------------------------------------------------------------
// Табельный номер работника
//------------------------------------------------------------------------------
#ifdef Gal8_1
#doc
#end
procedure SetTabN(vValue: variant);
#else
#doc
#end
procedure SetTabN(lValue: longint);
#end
#doc
Строка с адресом
#end
procedure SetADRES(stValue: string);
#doc
Сумма перечисления
#end
procedure SetSUMMA(doValue: double);
#doc
Сумма сбора
#end
procedure SetSBOR(doValue: double);
#doc
Вид удержания для реестра
#end
procedure SetVIDUD(wValue: word);
#doc
Имя ребенка
#end
procedure SetFAMCH(stFIO: string);
#doc
Дата рождения ребенка
#end
procedure SetDATROG(dRog: date);
#doc
Вставилась ли запись таблицу для формирования реестра
#end
function insertRMONEY: word;
#doc
Наименование реестра
#end
procedure SetSBBANNAME(stName: string);
#doc
Наименование реестра старое (можно не заполнять)
#end
procedure SetSBBANMNEM(stNMnem: string);
#doc
Дата формирования реестра
#end
procedure SetFORMINGDATE(Formdate: date);
#doc
Месяц, за который создается реестр
#end
procedure SetDATAZA(dZA: date);
#doc
Месяц, в котором создается реестр
#end
procedure SetDATAV(dV: date);
#doc
Префикс реестра
#end
procedure SetPREFIX(PR: string);
#doc
Функция создания реестров </brief>
FiltrPodr - строка для отображения варианта формирования реестра
nazva     - параметры формирования
            cgFormPR_NazvaPol  = 0 - наименование реестра по получателям
            cgFormPR_NazvaBank = 1 - наименование реестра по банкам
            cgFormPR_NoMess    = 2 - не выдавать сообщения в процессе формирования (для пакетных режимов)
NomReestr - номер реестра, который надо сформировать
PereForm  - что мы делаем, переформриовываем или нет реестр
ProcVipl  - процент к выплате от исходной суммы
SumVipl   - сумма к выплате
#end
function CreatePayRoll(FiltrPodr: string; nazva: word; NomReestr: string[20]; PereForm: boolean; ProcVipl: double; sumVipl : double) :  comp;
#doc
Получить данные из текущей записи таблицы для формирования реестра
#end
function GetCPOL : comp;
#doc
#end
function GetCBANKPOL : comp;
#doc
#end
function GetSUMMA : double;
#doc
Удалить текущий реестр
#end
function DeletePayRoll(coValue: comp): boolean;
end;

objinterface IFormPayRollExt;
#doc
Событие вставки нового реестра и получения ссылка на него.
#end
Event procedure Event_GetInsertedSbBan(wTable : word; cRec : comp);
end;

vipinterface FormPayRoll implements IFormPayRoll, IFormPayRollExt
#ifdef ATL51
Licensed (free)
#end
;
