//------------------------------------------------------------------------------
//                                                      (с) корпорация Галактика
// Галактика 8.1 - Заработная плата
// Нумератор документов
//------------------------------------------------------------------------------

#ifndef _IEnumerator_obj_INCLUDED_
#define _IEnumerator_obj_INCLUDED_

#ifdef ComponentVersion
  #component "Z_PAYREP"
#end

//------------------------------------------------------------------------------
#doc
  Описывает нумератор для типа документа
#end
objinterface IEnumerator;
  #doc
    Возвращает очередной незанятый номер (при BackUp = true - с резервированием)
  #end
  function GetNextFree(BackUp: boolean = false): string;
  #doc
    проверка допустимости переданного номера (введенного пользователем)
    в текущем контексте
  #end
  function CheckNumDoc(var Value: string): boolean;
  #doc
    Возвращает true если ведется раздельная нумерация (в параметре возвращается
    код таблицы или идентификатор, по которому осуществляется раздельная нумерация)
  #end
  function IsPartiteNumeral(var Code: longint): boolean;
  #doc
    выставить дополнительный параметр с кодом Code и обозначением sSign в значение Value
  #end
  function Change(Code: longint; sSign: s20; var Value: variant): boolean;
  #doc
    возникает при ошибках или наличии уточняющей информации
  #end
  event function OnMessage(const Msg: string; Flags: word): word;
  #doc
    генерируется в методах, для корректной работы которых требуется настройка
    контекста из дополнительных параметров
  #end
  event procedure OnChange(Sender: ObjRef);
  #doc
    генерируется после модификаций параметров и данных
  #end
  event procedure OnChanged(Sender: ObjRef);
  #doc
    генерируется при инициализации и загрузке
  #end
  event procedure OnLoaded(Sender: ObjRef);
end;

//------------------------------------------------------------------------------
#doc
  Описатель свойств
#end
objinterface ICellProperty;
  #doc
    текущее значение элемента
  #end
  property Value: string read write;
  #doc
    флаги текущего статус элемента
  #end
  property State: word read write;
  #doc
    флаги типа данных в элементе
  #end
  property TypeV: word read write;
  #doc
    возникает если данные в отправителе были изменены
  #end
  event procedure OnChanged(Sender: ICellProperty);
end;

//------------------------------------------------------------------------------
#doc
  Описатель выбора нумератора документа
#end
objinterface INumSelector;
  #doc
    инициализация на работу по источнику, связанному с кодом таблицы Code
  #end
  function Init(Code: word): boolean;
  #doc
    код текущего источника
  #end
  function GetCode: word;
  #doc
    текущее значение префиксной части номера документа
  #end
  property Prefix:  string read write;
  #doc
    текущее значение числовой части номера документа
  #end
  property Numeral: string read write;
  #doc
    текущее значение суффиксной части номера документа
  #end
  property Suffix:  string read write;
  #doc
    возвращает ссылку на префиксный элемент номера
  #end
  function GetPrefElement: ICellProperty;
  #doc
    возвращает ссылку на цифровой элемент номера
  #end
  function GetNumbElement: ICellProperty;
  #doc
    возвращает ссылку на суффиксный элемент номера
  #end
  function GetSuffElement: ICellProperty;
  #doc
    проверка всех частей текущего номера
  #end
  function CheckCurrent: boolean;
  #doc
    переключение между автонумерацией и пользовательской нумерацией
  #end
  procedure SetAutoMap(Value: boolean);
  #doc
    текущее состояние автонумерации
  #end
  function IsAutoMap: boolean;
  #doc
    производит поэлементный разбор переданной строки
  #end
  procedure Dissection(Value: string);
  #doc
    текущий статус доступности для префиксной части номера
  #end
  function GetPrefixState: word;
  #doc
    текущий статус доступности для цифровой части номера
  #end
  function GetNumeralState: word;
  #doc
    текущий статус доступности для суффиксной части номера
  #end
  function GetSuffixState: word;
  #doc
    возникает при изменении флагов статуса обновить отображение полей
  #end
  event procedure OnChangedElement;
  #doc
    возвращает количество частей в переданной строке
  #end
  function GetCountParts(Value: string): byte;
  #doc
    возвращает длину префиксной части
  #end
  function GetSizePrefix(Value: string): byte;
  #doc
    возвращает длину цифровой части
  #end
  function GetSizeNumeral(Value: string): byte;
  #doc
    возвращает длину суффиксной части
  #end
  function GetSizeSuffix(Value: string): byte;
  #doc
    проверка корректности префиксной части номера
  #end
  function CheckPrefix(Value: string; var Position: byte): boolean;
  #doc
    проверка корректности цифровой части номера
  #end
  function CheckNumeral(Value: string; var Position: byte): boolean;
  #doc
    проверка корректности суффиксной части номера
  #end
  function CheckSuffix(Value: string; var Position: byte): boolean;
  #doc
    генерация очередного незанятого номера (по умолчанию - без резервирования)
  #end
  function GetNextFree(BackUp: boolean = false): string;
  #doc
    выбор значения параметра по коду источника
  #end
  function Pick(Code: longint): boolean;
  #doc
    выставляет параметр sSign для кода Code в значение Value
  #end
  function Change(Code: longint; sSign: s20; var Value: variant): boolean;
  #doc
    возникает при ошибках или наличии уточняющей информации
  #end
  event function OnMessage(const Msg: string; Flags: word): word;
  #doc
    возникает при инициализации
  #end
  event procedure OnLoaded(Sender: ObjRef);
  #doc
    возникает если данные изменились
  #end
  event procedure OnChanged(Sender: ObjRef);
end;
//------------------------------------------------------------------------------
// обрабатываемость кода
//------------------------------------------------------------------------------
objinterface ICodeHandler;
  #doc
    проверка на возможность обработки реализацией переданного кода
  #end
  function IsAbility(Code: word): boolean;
end;

#end
