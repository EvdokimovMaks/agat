// =============================================================================
//                                                     (c)  корпорация Галактика
// Галактика 7.12 - Производственный контур
// Описание интерфейс-объекта "Максимизация партий запуска."
// =============================================================================

#ifdef ComponentVersion
#component "M_MnPlan"
#endif

// Структура для передачи параметров
#ifndef __Def_Sched__
#define __Def_Sched__
Type
  Sched = record
    coIzd: comp;      // Изделие
    doKol: double;    // Количество
    doDlit: double;   // Длительность обработки
    doDirS: double;   // Директивный срок
    doSI: double;     // Длительность переналадки
  End; // record Sched
#endif

ObjInterface oSchedule;

// Инициализация всех массивов
Procedure InitSchedule(flag: word);

// Деинициализация всех массивов
Procedure DoneSchedule;

// Просмотр результата
Procedure ViewRez;

// Заполнение таблицы данных
Procedure WritetmpDocZn(coIzd:comp; doKol:double; doDlit:double; doDirS:double);

// Значение [i,j]-го элемента MasAIJ
Function GetMasAIJ(i: word; j: word):double;

// Удаление [i,j]-го элемента MasAIJ
Procedure DelMasAIJ(i: word; j: word);

// Удаление i-х элементов MasAIJ
Procedure DelIMasAIJ(i: word);

// Присваивает значение [i,j]-го элемента MasAIJ, если flag=0, то добавление
Procedure PutMasAIJ(i:word; j:word; mas:double; flag: word);

// Заполнение массива MasMCAI
Procedure WriteMasMCAI(coDet: comp; doZnach: double; doSI: double);

// Заполнение массива tmpPer
Procedure WritetmpPerJ(doDlitAll: double);

// Возвращает индекс J PerJ
Function GetIndJPerJ(doPer: double):word;

// Возвращает значение j-го элемента PerJ (длительность периода)
Function GetPerJ(j: word):double;

// Изменяет значение j-го элемента PerJ (длительность периода)
Procedure PutPerJ(j: word; dlit: double);

// Заполнение массива PerJ
Procedure WritePerJ;

// Возвращает индекс I MasMCAI
Function GetIndIMasMCAI(coIzd: comp):word;

// Значение i-го элемента MasMCAI
Function GetMasMCAI(i: word):double;

// Индекс элемента MasMCAI
Function GetMasMCAIindI(coIzd: comp):word;

// Значение элемента MasMCAI
Function GetMasMCAIcIzd(coIzd: comp):double;

// Максимальное значение MasMCAI
Function MaxMasMCAI(N: word):double;

// Изменение значения i-го элемента MasMCAI
Procedure PutMasMCAI(i: word; Znach:double);

// Значение SI i-го элемента MasMCAI
Function GetMasMCAISI(i: word):double;

// Максимальное время обработки из всех значений MasMCAI
Function MaxMasMCAISi(N: word):double;

// Значение cIzd i-го элемента MasMCAI
Function GetMasMCAIizd(i: word):comp;

// Значение длительности i-го элемента MasMCAI
Function GetMasMCAIDlit(i: word):double;

// Удаление i-го элемента MasMCAI
Procedure DelMasMCAI(i: word);

// Заполнение таблиц MasMCAI, PerJ, MasAIJ
Procedure WrireAllMas;

// Значение j-го элемента MasZJ
Function GetMasZJ(j: word):double;

// Рассчитывает и присваивает значение j-го элемента MasZJ
Procedure PutMasZJ( j:word; dotPer: double);

// Заполнение массива MasZJ
Procedure WriteMasZJ( leftup:word; rightup:word; dotPer: double);

// Рассчитывает значение Vj
Function ReturnVJ( j:word; dotPer: double; I0: word): double;

// Присваивает значение [i,j]-го элемента MasWIJ
Procedure PutMasWIJ(i:word; j:word; mas:word);

// Присваивает значение [i,j]-го элемента MasBIJ
Procedure PutMasBIJ(i:word; j:word; mas:double);

// Значение [i,j]-го элемента MasWIJ
Function GetMasWIJ(i: word; j: word):word;

// Значение [i,j]-го элемента MasBIJ
Function GetMasBIJ(i: word; j: word):double;

// Значение [i]-го элемента BIJPlus
Function GetBIJPlus(i: word):double;

//Заполнение множеств KPlus и KMinus. Возвращает кол-во элементов в множ. KMinus
Function KolKMinus(leftJ: word):word;

//Возвращает индекс J первой записи KMinus
Function GetFirstKMinusJ:word;

//Заполнение множеств IJAIJPlus и IJAIJMinus.
//Возвращает кол-во элементов в множ. IJAIJPlus
Function KolIJAIJPlus(J: word):word;

// Заполнение множеств IjVjBSi, IjVjMSi, IjVjBSiPt, IjVjMSiPt
Procedure WriteIjVjBMSi(Vj: double; doDlitPer: double; j: word);

// Добавление записи в ManyPTwo
Procedure PutManyPTwo(i:word);

// Добавление записи в ManyPMuch
Procedure PutManyPMuch(i:word);

// Расчет w[i,j] и b[i,j]
Procedure ReturnWB(j: word; dotPer: double);

// Критерий поиска индекса I0 по условию минимальных остатков изделий
Function KriterMinOst(i:word; j:word; flag:word):word;

// Критерий поиска индекса I0 по условию минимальной длительности обработки
Function KriterMinDlit(i:word; j:word; flag:word):word;

// Критерий поиска индекса I0 по условию минимальной длительности и мин. остатков
//обработки
Function KriterMinDlitOst(i:word; j:word; flag:word):word;

// Заполнение BIJPlus, BIJMinPlus, BIJMinMin. Возв. кол. записей где b[i,j] < 0
Function WriteBIJMinPlus(j: word): word;

// Заполнение BIJMinPlus, BIJMinMin. Возв. кол. записей в BIJMinPlus
Function KolBIJMinPlus(j: word; j1:word; woFlag: word): word;

// Заполнение BIJPlus
Procedure KolBIJPlus;

// Перенос записей из AIJTemp в tmpDocZn  с очисткой множеств индексов
Procedure RenameAIJTempinDoc(Per: word);

// Переход на следующий период с пересчетом остатков и т.д.(очисткой, переносом)
Procedure EraseWriteBig(var i:word; j: word; i0: word; doPer: double;
                          Flag: word; Flagdop: word);

// Очистка последнего периода с пересчетом остатков и т.д.
Procedure EraseWriteEnd(i:word; j: word);

// Добавление в AIJTemp с пересчетом a[i,j] и A[i]
Procedure PutAIJTempPer(i: word; j: word; j1: word;
                        Num: word; flag: word; doPeren: double);

// Получить первую запись
Function GetFirstRecord(var coIzd: Comp; var doKol: double;
                        var NPer: word; var Num: word): Boolean;

// Получить следующую запись
Function GetNextRecord(var coIzd: comp; var doKol: double;
                       var NPer: word; var Num: word): Boolean;

// Получить запись по порядку следования
Function GetRecordNum( Num: word; var coIzd: comp;
                       var doKol: double; var NPer: word): Boolean;

// Получить количество записей после переналадки
Function RecordsKol: word;

// Получить количество переналадок
Function RecordsPer: word;

// Заполнение ManyPMuch & ManyPTwo
Function WriteManyP(j:word; j1: word; i0: word; woFlag: word): word;

// Проверка периода на 0
Function UslIndJ (j: word): word;

// Минимизация переналадки
Function MinPer(dotPer: double; woKritF: word):word;


end;

VipInterface Schedule implements oSchedule

 #ifdef ATL51
 Licensed (FREE)
 #end
;


