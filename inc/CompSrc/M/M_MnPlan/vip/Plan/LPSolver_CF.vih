// ===========================  ==================================================
//                                                     (c)  корпорация Галактика
// Галактика 7.11
// Описание интерфейса-объекта "Решатель для задач линейного программирования (ЛП)"
// =============================================================================
// Содержит реализацию следующих методов:
//   1) Симплекс-метод
//   2) Метод "ветвей и границ"

#component "M_MnPlan"

//******************************************************************************
// Типы данных

//------------------------------------------------------------------------------
// Структура для хранения этапа расчета (BBM)
#ifndef __Def_TBBMStage__
#define __Def_TBBMStage__
#doc
 Структура для хранения этапа расчета (BBM)</brief> <br>
 Поля: <br>
   Nmb        - Номер этапа расчета <br>
   dGoalFunc  - Значение целевой функции <br>
   StatusRes  - Статус этапа расчета <br>
     0: Найдено оптимальное подходящее решение <br>
     1: Задача не имеет допустимых решений <br>
     2: Целевая функция задачи неограничена на множестве допустимых значений <br>
     3: Решение задачи не закончено <br>
     4: Разбиение на составляющие <br>
   ClnNameDiv - Имя столбца, для которого формировать подмножества <br>
   ValueLO    - Ближайшее меньшее кратное значение <br>
   ValueUP    - Ближайшее большее кратное значение <br>
#end
Type TBBMStage = record
  Nmb: longint;       // Номер этапа расчета
  dGoalFunc: double;  // Значение целевой функции
  StatusRes: word;    // Статус этапа расчета
                      //   0 - Найдено оптимальное подходящее решение
                      //   1 - Задача не имеет допустимых решений
                      //   2 - Целевая функция задачи неограничена
                      //       на множестве допустимых значений
                      //   3 - Решение задачи не закончено
                      //   4 - Разбиение на составляющие
  ClnNameDiv: string; // Имя столбца, для которого формировать подмножества
  ValueLO: double;    // Ближайшее меньшее кратное значение
  ValueUP: double;    // Ближайшее большее кратное значение
end; // type TBBMStage
#endif

//------------------------------------------------------------------------------
// Структура для хранения ограничения на столбец
#ifndef __Def_TColumnBND__
#define __Def_TColumnBND__
#doc
 Структура для хранения ограничения на столбец</brief> <br>
 Поля: <br>
   ClnName - Имя столбца, для которого определяется граница (<= 40 символов) <br>
   BNDCode - Код вида границы (один из вариантов): <br>
     'LO': нижняя граница <br>
     'UP': верхняя граница <br>
     'FX': фиксированное значение (нижняя граница равна верхней) <br>
     'FR': свободная переменная (минус бесконечность, плюс бесконечность) <br>
     'MI': отрицательная переменная (минус бесконечность, нуль) <br>
     'PL': положительная переменная (плюс бесконечность, нуль) <br>
   Value   - Значение границы (для asBNDCode = 'LO', 'UP' или 'FX') <br>
#end
Type TColumnBND = record
  ClnName: string; // Имя столбца, для которого определяется граница (<= 40 символов)
  BNDCode: string; // Код вида границы (один из вариантов):
                   //   'LO' - нижняя граница
                   //   'UP' - верхняя граница
                   //   'FX' - фиксированное значение (нижняя граница равна верхней)
                   //   'FR' - свободная переменная (минус бесконечность, плюс бесконечность)
                   //   'MI' - отрицательная переменная (минус бесконечность, нуль)
                   //   'PL' - положительная переменная (плюс бесконечность, нуль)
  Value: double;   // Значение границы (для asBNDCode = 'LO', 'UP' или 'FX')
end; // type TColumnBND
#endif

//------------------------------------------------------------------------------
// Структура для хранения строки-результата в MPS-файле
#ifndef __Def_TLPResultStr__
#define __Def_TLPResultStr__
#doc
 Структура для хранения строки-результата в MPS-файле</brief> <br>
 Поля: <br>
   TypeVal     - Тип переменной (0-столбец, 1-строка) <br>
   N           - Номер столбца/строки <br>
   Name        - Имя столбца/строки <br>
   Code        - Код статуса столбца/строки (одно из значений): <br>
     '--': меньше нижней границы <br>
     '++': больше верхней границы <br>
     'LB': равно нижней границе <br>
     'UB': равно верхней границе <br>
     'EQ': значение фиксировано <br>
   dActivity   - Значение столбца/строки <br>
   dLowerBound - Значение нижней границы столбца/строки <br>
   dUpperBound - Значение верхней границы столбца/строки <br>
   dDual       - Значение двойственной переменной столбца/строки <br>
   dError      - Величина ошибки столбца/строки <br>
#end
Type TLPResultStr = record
  TypeVal: word;       // Тип переменной (0-столбец, 1-строка)
  N: word;             // Номер столбца/строки
  Name: string;        // Имя столбца/строки
  Code: string;        // Код статуса столбца/строки (одно из значений):
                       //   '--' - меньше нижней границы
                       //   '++' - больше верхней границы
                       //   'LB' - равно нижней границе
                       //   'UB' - равно верхней границе
                       //   'EQ' - значение фиксировано
  dActivity: double;   // Значение столбца/строки
  dLowerBound: double; // Значение нижней границы столбца/строки
  dUpperBound: double; // Значение верхней границы столбца/строки
  dDual: double;       // Значение двойственной переменной столбца/строки
  dError: double;      // Величина ошибки столбца/строки
end;
#endif

//******************************************************************************
// ObjInterface oLPSolver_CF
#ifndef __Def_oLPSolver_CF__
#define __Def_oLPSolver_CF__
#doc
 Описание интерфейса-алгоритма "MPS-алгоритм: Решение систем уравнений (симплекс-метод)"</brief> <br>
   Общие функции для работы с MPS-форматом <br>
   Используется DLL lps.dll <br>
   Решение систем уравнений (симплекс-метод) <br>
   Метод "ветвей и границ" <br>
#end
ObjInterface oLPSolver_CF;

//------------------------------------------------------------------------------
#doc
 Добавление столбца-переменной</brief> <br>
 Параметры: <br>
   asName      - Наименование столбца-переменной <br>
   awValueType - Вариант диапазона значений столбца-переменной: <br>
     0: фиксированное значение (= LowBound = UpBound) <br>
     1: переменная из диапазона [LowBound, UpBound] <br>
     2: положительная переменная [0, +бесконечность] <br>
     3: отрицательная переменная [-бесконечность, 0] <br>
     4: свободная переменная [-бесконечность, +бесконечность] <br>
   adLowBound  - Нижняя граница для значения столбца-переменной <br>
   adUpBound   - Верхняя граница для значения столбца-переменной <br>
   adUnit      - Единица кратности <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function AddCln(asName: string; awValueType: word;
  adLowBound: double; adUpBound: double; adUnit: double): longint;

//------------------------------------------------------------------------------
#doc
 Добавление коэфициента для столбца-переменной в строке-ограничении</brief> <br>
 Параметры: <br>
   asRowName  - Наименование строки-ограничения <br>
   asClnName  - Наименование стобца-переменной <br>
   adKoef     - Коэффициент для столбца-переменной в строке-ограничении <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function AddClnKoef(asRowName: string; asClnName: string; adKoef: double): longint;

//------------------------------------------------------------------------------
#doc
 Добавление столбца-переменной</brief> <br>
 Параметры: <br>
   asName     - Наименование строки-ограничения <br>
   awRowType  - Тип ограничения: <br>
     0: =
     1: <=
     2: >=
     3: нет ограничений
   adRowValue - Значение ограничения справа <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function AddRow(asName: string; awRowType: word; adRowValue: double): longint;

//------------------------------------------------------------------------------
#doc
 Генерация MPS-файла</brief> <br>
 (<имя_файла> = <имя_задачи>.mps) <br>
 Параметры: <br>
   asPath - Путь, куда записывать файл <br>
 Результат: <br>
   True, если успешно, иначе - False <br>
#end
Function GenerateMPSFile(asPath: string): boolean;

//------------------------------------------------------------------------------
#doc
 Генерация MPS-файла (расширенная функция)</brief> <br>
 Параметры: <br>
   asPath     - Путь, куда записывать файл <br>
   asFileName - Имя MPS-файла (без пути) <br>
 Результат: <br>
   True, если успешно, иначе - False <br>
#end
Function GenerateMPSFileEx(asPath: string; asFileName: string): boolean;

//------------------------------------------------------------------------------
#doc
 Генерация OUT-файла</brief> <br>
 (<имя_файла> = <имя_задачи>.out) <br>
 Параметры: <br>
   asPath - Путь, куда записывать файл <br>
 Результат: <br>
   True, если успешно, иначе - False <br>
#end
Function GenerateOUTFile(asPath: string): boolean;

//------------------------------------------------------------------------------
#doc
 Генерация OUT-файла (расширенная функция)</brief> <br>
 Параметры: <br>
   asPath     - Путь, куда записывать файл <br>
   asFileName - Имя OUT-файла (без пути) <br>
 Результат: <br>
   True, если успешно, иначе - False <br>
#end
Function GenerateOUTFileEx(asPath: string; asFileName: string): boolean;

//------------------------------------------------------------------------------
#doc
 Получение результатов последнего расчета</brief> <br>
 Параметры: <br>
   adGoalFunc   - Значение целевой функции (возвращается) <br>
   awStatusRes  - Статус решения (возвращается): <br>
     0: Оптимальное решение найдено <br>
     1: Задача не имеет допустимых решений <br>
     2: Целевая функция задачи неограничена <br>
        на множестве допустимых значений <br>
     3: Решение задачи не закончено <br>
 Результат: <br>
   True, если успешно, иначе - False <br>
#end
Function GetResults(var adGoalFunc: double; var awStatusRes: word): boolean;

//------------------------------------------------------------------------------
#doc
 Инициализация задачи ЛП </brief> <br>
 Параметры: <br>
   asTaskName  - Наименование задачи ЛП <br>
   awGFType    - Тип целевой функции: <br>
     0: MINIMIZE <br>
     1: MAXIMIZE <br>
   asGFRowName - Наименование строки-ограничения для целевой функции <br>
   adZero      - Машинный ноль (по умолчанию - 1.0E-8) <br>
   adInfinity  - Машинная бесконечность (по умолчанию - 1.0E+15) <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function InitTask(asTaskName: string; awGFType: word; asGFRowName: string;
  adZero: double; adInfinity: double): longint;

//------------------------------------------------------------------------------
#doc
 Запуск расчета для получения целочисленных решений с использованием "метода ветвей и границ"</brief> <br>
 Branch&Bound Method <br>
 Параметры: <br>
   abViewErrMsg - Флаг "Выводить сообщения об ошибках" <br>
 Результат: <br>
   tsOk, если все нормально, иначе - код ошибки <br>
#end
Function LPSolvingByBranchAndBoundMethod(abViewErrMsg: boolean): longint;

//------------------------------------------------------------------------------
#doc
 Запуск расчета с использовванием "симплекс-метода"</brief> <br>
 Параметры: <br>
   abViewErrMsg - Флаг "Выводить сообщения об ошибках" <br>
 Результат: <br>
   tsOk, если все нормально, иначе - код ошибки <br>
#end
Function LPSolvingBySimplexMethod(abViewErrMsg: boolean): longint;

//------------------------------------------------------------------------------
#doc
 Установка числового формата DOUBLE (для вывода в файл)</brief> <br>
 Параметры: <br>
   asDblFormat - Строка формата, если пусто, то ='[|-]3666666666666666.8888888' <br>
#end
Procedure SetDoubleFormat(asDblFormat: string);

End; // ObjInterface oLPSolver_CF

VipInterface iLPSolver_CF implements oLPSolver_CF Licensed(Free);

#endif
