// =============================================================================
//                                                     (c)  корпорация Галактика
// Галактика 7.11 - Производственный контур
// Описание интерфейса-объекта "Общие функции для протоколов расчета"
// =============================================================================

#include oiEvnLog.vih

//******************************************************************************
// Типы данных

//------------------------------------------------------------------------------
// Структура для хранения фильтра для событий при выгрузке
#ifndef __Def_EvnFilter__
#define __Def_TEvnFilter__
#doc
 Структура для хранения фильтра для событий при выгрузке</brief> <br>
 Поля: <br>
   bFatalError  - Признак учета событий типа etFatalError <br>
   bError       - Признак учета событий типа etError <br>
   bWarrning    - Признак учета событий типа etWarrning <br>
   bInformation - Признак учета событий типа etInformation <br>
#end
Type TEvnFilter = record
  bFatalError: boolean;  // Признак учета событий типа etFatalError
  bError: boolean;       // Признак учета событий типа etError
  bWarrning: boolean;    // Признак учета событий типа etWarrning
  bInformation: boolean; // Признак учета событий типа etInformation
End; // type TEvnFilter
#endif

#component "M_MnPlan"

//******************************************************************************
// ObjInterface oProtPlan_CF
#ifndef __Def_oProtPlan_CF__
#define __Def_oProtPlan_CF__
#doc
 Описание интерфейса-объекта "Общие функции для протоколов расчета"</brief>
#end
ObjInterface oProtPlan_CF;

//------------------------------------------------------------------------------
#doc
 Контроль данных перед созданием новой записи ProtPlan</brief> <br>
 Параметры: <br>
   ar_ProtPlan - Запись ProtPlan <br>
 Результат: <br>
   tsOk - если все нормально, иначе код ошибки <br>
#end
Function ProtPlan_ChkBIns(ar_ProtPlan: type$ProtPlan): longint;

//------------------------------------------------------------------------------
#doc
 Создание новой записи ProtPlan</brief> <br>
 Параметры: <br>
  ar_ProtPlan - Запись ProtPlan <br>
 Результат: <br>
   tsOk, если все нормально, иначе - код ошибки <br>
#end
Function ProtPlan_Ins(var ar_ProtPlan: type$ProtPlan): longint;

//------------------------------------------------------------------------------
#doc
 Контроль данных перед модификацией записи ProtPlan</brief> <br>
 Параметры: <br>
  ar_ProtPlan - Запись ProtPlan <br>
  asFldName   - Имя поля, для которого проявляется ошибка <br>
 Результат: <br>
   tsOk, если все нормально, иначе - код ошибки <br>
#end
Function ProtPlan_ChkBUpd(ar_ProtPlan: type$ProtPlan; var asFldName: string): longint;

//------------------------------------------------------------------------------
#doc
 Модификация существующей записи ProtPlan</brief> <br>
 Параметры: <br>
   ar_ProtPlan - Запись ProtPlan <br>
 Результат: <br>
   tsOk, если все нормально, иначе - код ошибки <br>
#end
Function ProtPlan_Upd(ar_ProtPlan: type$ProtPlan): longint;

//------------------------------------------------------------------------------
#doc
 Контроль данных перед удалением записи ProtPlan</brief> <br>
 Параметры: <br>
   acRec - Ссылка на запись ProtPlan <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function ProtPlan_ChkBDel(acRec: comp): longint;

//------------------------------------------------------------------------------
#doc
 Удаление записи ProtPlan</brief> <br>
 Параметры: <br>
   acRec - Ссылка на запись ProtPlan <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function ProtPlan_Del(acRec: comp): longint;

//------------------------------------------------------------------------------
#doc
 Очистка мемо-поля для записи ProtPlan</brief> <br>
 Параметры: <br>
   acProtPlan - Ссылка на запись ProtPlan <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function ProtPlan_Clear(acProtPlan: comp): longint;

//------------------------------------------------------------------------------
#doc
 Добавление строки в конец мемо-поля записи ProtPlan</brief> <br>
 Параметры: <br>
   acProtPlan - Ссылка на запись ProtPlan <br>
   asStr      - Строка <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function ProtPlan_AddStr(acProtPlan: comp; asStr: string): longint;

//------------------------------------------------------------------------------
#doc
 Выгрузка событий из объекта EvnLog в конец мемо-поля записи ProtPlan</brief> <br>
 Параметры: <br>
   acProtPlan     - Ссылка на запись ProtPlan <br>
   aoEvnLog       - Объект для регистрации ситуаций <br>
   ardEvnFilter   - Фильтр на события <br>
   abProcessView  - Признак отображения процесса выгрузки <br>
   asTitleProcess - Название процесса (если пустая строка, то по умолчанию) <br>
 Результат: <br>
   tsOk, если успешно, иначе - код ошибки <br>
#end
Function ProtPlan_UnloadEvnLog(acProtPlan: comp; var aoEvnLog: oiEvnLog;
  ardEvnFilter: TEvnFilter; abProcessView: boolean; asTitleProcess: string): longint;

//------------------------------------------------------------------------------
#doc
 Получение наименования типа владельца для протокола расчета</brief> <br>
 Параметры: <br>
   awTypeOwn - Константа типа владельца (константы to... из MnPlan.inc) <br>
 Результат: <br>
   Наименование типа владельца для протокола расчета <br>
#end
Function GetOwnTypeName(awTypeOwn: word): string;

//------------------------------------------------------------------------------
#doc
 Получение наименования владельца для протокола расчета</brief> <br>
 Параметры: <br>
   awTypeOwn - Константа типа владельца (константы to... из MnPlan.inc) <br>
   acOwner   - Ссылка на запись владельца <br>
 Результат: <br>
   Наименование владельца для протокола расчета <br>
#end
Function GetOwnerName(awTypeOwn: word; acOwner: comp): string;

End; // ObjInterface oProtPlan_CF

VipInterface iProtPlan_CF implements oProtPlan_CF Licensed(Free);
VipInterface iProtPlan_CF_Norm implements oProtPlan_CF Licensed(Free);

#endif
