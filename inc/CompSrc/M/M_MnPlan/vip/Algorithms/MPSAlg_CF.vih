// =============================================================================
//                                                     (c)  корпорация Галактика
// Галактика 7.11
// Описание интерфейса-алгоритма "MPS-алгоритм: Решение систем уравнений (симплекс-метод)"
// =============================================================================
//   Общие функции для работы с MPS-форматом
//   Используется DLL lps.dll
//   Решение систем уравнений (симплекс-метод)
//   Метод "ветвей и границ"

#component "M_MnPlan"

//******************************************************************************
// Таблицы в памяти

//------------------------------------------------------------------------------
// Параметр секции ROWS
#ifndef __Def_pvtMPSRow__
#define __Def_pvtMPSRow__
Table STRUCT pvtMPSRow
(
  RHCode: string, // Код ограничения (один из вариантов):
                  //   'E' - равно
                  //   'L' - меньше-либо-равно
                  //   'G' - больше-либо-равно
                  //   'N' - нет ограничений
  Name  : string  // Имя строки (<= 8 символов)
)
With Index
(
  pvtMPSRow01 = Name
);
#endif

//------------------------------------------------------------------------------
// Параметр секции COLUMNS
#ifndef __Def_pvtMPSColumn__
#define __Def_pvtMPSColumn__
Table STRUCT pvtMPSColumn
(
  Name   : string, // Имя столбца (<= 8 символов)
  StrName: string, // Имя строки (<= 8 символов)
  Value  : double  // Число - значение элемента в ячейке матрицы
)
With Index
(
  pvtMPSColumn01 = Name + StrName,
  pvtMPSColumn02 = StrName + Name
);
#endif

//------------------------------------------------------------------------------
// Параметр секции RHS
#ifndef __Def_pvtMPSRh__
#define __Def_pvtMPSRh__
Table STRUCT pvtMPSRh
(
  StrName: string, // Имя строки (<= 8 символов)
  Value  : double  // Число - значение константы, стоящей в данной строке (справа от "=")
)
With Index
(
  pvtMPSRh01 = StrName
);
#endif

//------------------------------------------------------------------------------
// Параметр секции RANGES
#ifndef __Def_pvtMPSRange__
#define __Def_pvtMPSRange__
Table STRUCT pvtMPSRange
(
  StrName: string, // Имя строки (<= 8 символов)
  Value  : double  // Число - значение интервала, разность между верхней и нижней границей
)
With Index
(
  pvtMPSRange01 = StrName
);
#endif

//------------------------------------------------------------------------------
// Параметр секции BOUNDS
#ifndef __Def_pvtMPSBound__
#define __Def_pvtMPSBound__
Table STRUCT pvtMPSBound
(
  BNDCode: string, // Код вида границы (один из вариантов):
                   //   'LO' - нижняя граница
                   //   'UP' - верхняя граница
                   //   'FX' - фиксированное значение (нижняя граница равна верхней)
                   //   'FR' - свободная переменная (минус бесконечность, плюс бесконечность)
                   //   'MI' - отрицательная переменная (минус бесконечность, нуль)
                   //   'PL' - положительная переменная (плюс бесконечность, нуль)
  ClnName: string, // Имя столбца, для которого определяется граница (<= 8 символов)
  Value  : double  // Значение границы (для asBNDCode = 'LO', 'UP' или 'FX')
)
With Index
(
  pvtMPSBound01 = ClnName + BNDCode
);
#endif

//------------------------------------------------------------------------------
// Признак округляемого значения для столбца (если величина неделимая)
// Наличие записи с именем столбца свидетельствует о том, что итоговое значение
// должно быть кратно указанной величине (если dUnit = 0, то округления нет)
// Данная информация используется при расчете "методом ветвей и границ"
// (Branch&Bound Method)
#ifndef __Def_pvtMPSColumnRnd__
#define __Def_pvtMPSColumnRnd__
Table STRUCT pvtMPSColumnRnd
(
  ClnName: string, // Имя столбца (<= 8 символов)
  dUnit  : double  // Единица кратности
)
With Index
(
  pvtMPSColumnRnd01 = ClnName
);
#endif

//------------------------------------------------------------------------------
// Строка результата
#ifndef __Def_pvtMPSRes__
#define __Def_pvtMPSRes__
Table STRUCT pvtMPSRes
(
  TypeVal    : word,   // Тип переменной (0-столбец, 1-строка)
  N          : word,   // Номер столбца/строки
  Name       : string, // Имя столбца/строки
  Code       : string, // Код статуса столбца/строки (одно из значений):
                       //   '--' - меньше нижней границы
                       //   '++' - больше верхней границы
                       //   'LB' - равно нижней границе
                       //   'UB' - равно верхней границе
                       //   'EQ' - значение фиксировано
  dActivity  : double, // Значение столбца/строки
  dLowerBound: double, // Значение нижней границы столбца/строки
  dUpperBound: double, // Значение верхней границы столбца/строки
  dDual      : double, // Значение двойственной переменной столбца/строки
  dError     : double  // Величина ошибки столбца/строки
)
With Index
(
  pvtMPSRes01 = TypeVal + N + Name,
  pvtMPSRes02 = TypeVal + Name
);
#endif

//******************************************************************************
// Типы данных

//------------------------------------------------------------------------------
// Параметр секции ROWS
#ifndef __Def_pvtMPSRow__
#define __Def_pvtMPSRow__
#doc
 Параметр секции ROWS</brief>
#end
Type TRecMPSRow = record as table pvtMPSRow;
#endif

//------------------------------------------------------------------------------
// Параметр секции COLUMNS
#ifndef __Def_pvtMPSColumn__
#define __Def_pvtMPSColumn__
#doc
 Параметр секции COLUMNS</brief>
#end
Type TRecMPSColumn = record as table pvtMPSColumn;
#endif

//------------------------------------------------------------------------------
// Параметр секции RHS
#ifndef __Def_pvtMPSRh__
#define __Def_pvtMPSRh__
#doc
 Параметр секции RHS</brief>
#end
Type TRecMPSRh = record as table pvtMPSRh;
#endif

//------------------------------------------------------------------------------
// Параметр секции RANGES
#ifndef __Def_pvtMPSRange__
#define __Def_pvtMPSRange__
#doc
 Параметр секции RANGES</brief>
#end
Type TRecMPSRange = record as table pvtMPSRange;
#endif

//------------------------------------------------------------------------------
// Параметр секции BOUNDS
#ifndef __Def_pvtMPSBound__
#define __Def_pvtMPSBound__
#doc
 Параметр секции BOUNDS</brief>
#end
Type TRecMPSBound = record as table pvtMPSBound;
#endif

//------------------------------------------------------------------------------
// Признак округляемого значения для столбца (если величина неделимая)
// Наличие записи с именем столбца свидетельствует о том, что итоговое значение
// должно быть кратно указанной величине (если dUnit = 0, то округления нет)
// Данная информация используется при расчете "методом ветвей и границ"
// (Branch&Bound Method)
#ifndef __Def_pvtMPSColumnRnd__
#define __Def_pvtMPSColumnRnd__
#doc
 Признак округляемого значения для столбца (если величина неделимая)</brief><br>
 Наличие записи с именем столбца свидетельствует о том, что итоговое значение
 должно быть кратно указанной величине (если dUnit = 0, то округления нет)
 Данная информация используется при расчете "методом ветвей и границ"
 (Branch&Bound Method)<br>
#end
Type TRecMPSColumnRnd = record as table pvtMPSColumnRnd;
#endif

//------------------------------------------------------------------------------
// Строка результата
#ifndef __Def_pvtMPSRes__
#define __Def_pvtMPSRes__
#doc
 Строка результата</brief>
#end
Type TRecMPSRes = record as table pvtMPSRes;
#endif

//------------------------------------------------------------------------------
// Структура для хранения этапа расчета (BBM)
#ifndef __Def_TBBMStage__
#define __Def_TBBMStage__
#doc
 Структура для хранения этапа расчета (BBM)</brief><br>
 Поля:<br>
   Nmb        - Номер этапа расчета<br>
   dGoalFunc  - Значение целевой функции<br>
   StatusRes  - Статус этапа расчета<br>
     0: Найдено оптимальное подходящее решение<br>
     1: Задача не имеет допустимых решений<br>
     2: Целевая функция задачи неограничена на множестве допустимых значений<br>
     3: Решение задачи не закончено<br>
     4: Разбиение на составляющие<br>
   ClnNameDiv - Имя столбца, для которого формировать подмножества<br>
   ValueLO    - Ближайшее меньшее кратное значение<br>
   ValueUP    - Ближайшее большее кратное значение<br>
#end
Type TBBMStage = record
  Nmb: longint;       // Номер этапа расчета
  dGoalFunc: double;  // Значение целевой функции
  StatusRes: word;    // Статус этапа расчета
                      //   0 - Найдено оптимальное подходящее решение
                      //   1 - Задача не имеет допустимых решений
                      //   2 - Целевая функция задачи неограничена
                      //       на множестве допустимых значений
                      //   3 - Решение задачи не закончено
                      //   4 - Разбиение на составляющие
  ClnNameDiv: string; // Имя столбца, для которого формировать подмножества
  ValueLO: double;    // Ближайшее меньшее кратное значение
  ValueUP: double;    // Ближайшее большее кратное значение
end; // type TBBMStage
#endif

//------------------------------------------------------------------------------
// Структура для хранения ограничения на столбец
#ifndef __Def_TColumnBND__
#define __Def_TColumnBND__
#doc
 Структура для хранения ограничения на столбец</brief><br>
 Поля:<br>
   ClnName - Имя столбца, для которого определяется граница (<= 8 символов)<br>
   BNDCode - Код вида границы (один из вариантов):<br>
     'LO': нижняя граница<br>
     'UP': верхняя граница<br>
     'FX': фиксированное значение (нижняя граница равна верхней)<br>
     'FR': свободная переменная (минус бесконечность, плюс бесконечность)<br>
     'MI': отрицательная переменная (минус бесконечность, нуль)<br>
     'PL': положительная переменная (плюс бесконечность, нуль)<br>
   Value   - Значение границы (для asBNDCode = 'LO', 'UP' или 'FX')<br>
#end
Type TColumnBND = record
  ClnName: string; // Имя столбца, для которого определяется граница (<= 8 символов)
  BNDCode: string; // Код вида границы (один из вариантов):
                   //   'LO' - нижняя граница
                   //   'UP' - верхняя граница
                   //   'FX' - фиксированное значение (нижняя граница равна верхней)
                   //   'FR' - свободная переменная (минус бесконечность, плюс бесконечность)
                   //   'MI' - отрицательная переменная (минус бесконечность, нуль)
                   //   'PL' - положительная переменная (плюс бесконечность, нуль)
  Value: double;   // Значение границы (для asBNDCode = 'LO', 'UP' или 'FX')
end; // type TColumnBND
#endif

//------------------------------------------------------------------------------
// Структура для хранения ссылки на документ-норму
#ifndef __Def_TRecMPSVal__
#define __Def_TRecMPSVal__
#doc
 Структура для хранения ссылки на документ-норму</brief><br>
 Поля:<br>
   TypeVal     - Тип переменной (0-столбец, 1-строка)<br>
   N           - Номер столбца/строки<br>
   Name        - Имя столбца/строки<br>
   Code        - Код статуса столбца/строки (одно из значений):<br>
     '--': меньше нижней границы<br>
     '++': больше верхней границы<br>
     'LB': равно нижней границе<br>
     'UB': равно верхней границе<br>
     'EQ': значение фиксировано<br>
   dActivity   - Значение столбца/строки<br>
   dLowerBound - Значение нижней границы столбца/строки<br>
   dUpperBound - Значение верхней границы столбца/строки<br>
   dDual       - Значение двойственной переменной столбца/строки<br>
   dError      - Величина ошибки столбца/строки<br>
#end
Type TRecMPSVal = record
  TypeVal: word;       // Тип переменной (0-столбец, 1-строка)
  N: word;             // Номер столбца/строки
  Name: string;        // Имя столбца/строки
  Code: string;        // Код статуса столбца/строки (одно из значений):
                       //   '--' - меньше нижней границы
                       //   '++' - больше верхней границы
                       //   'LB' - равно нижней границе
                       //   'UB' - равно верхней границе
                       //   'EQ' - значение фиксировано
  dActivity: double;   // Значение столбца/строки
  dLowerBound: double; // Значение нижней границы столбца/строки
  dUpperBound: double; // Значение верхней границы столбца/строки
  dDual: double;       // Значение двойственной переменной столбца/строки
  dError: double;      // Величина ошибки столбца/строки
end;
#endif

//******************************************************************************
// ObjInterface oMPSAlg_CF
#ifndef __Def_oMPSAlg_CF__
#define __Def_oMPSAlg_CF__
#doc
 Описание интерфейса-алгоритма "MPS-алгоритм: Решение систем уравнений (симплекс-метод)"</brief><br>
   Общие функции для работы с MPS-форматом<br>
   Используется DLL lps.dll<br>
   Решение систем уравнений (симплекс-метод)<br>
   Метод "ветвей и границ"<br>
#end
ObjInterface oMPSAlg_CF;

//------------------------------------------------------------------------------
#doc
 Очистка данных в заданной секции</brief><br>
 Параметры:<br>
  asSection - Имя секции:<br>
    ''       : все секции<br>
    'NAME'   : секция заглавия<br>
    'ROWS'   : секция строк<br>
    'COLUMNS': секция столбцов<br>
    'RHS'    : секция столбца констант основных огранияений<br>
    'RANGES' : секция столбца интервалов<br>
    'BOUNDS' : секция строки границ<br>
    'OPTGOAL': секция цели оптимизации<br>
#end
Procedure Clear(asSection: string);

//------------------------------------------------------------------------------
#doc
 Установка имени задачи</brief><br>
 Параметры:<br>
   asName - Имя задачи (<= 8 символов), если пустая строка, то = 'test'<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function Set_NAME(asName: string): boolean;

//------------------------------------------------------------------------------
#doc
 Добавление элемента в секцию ROWS (секция строк)</brief><br>
 Параметры:<br>
   asRHCode - Код ограничения (один из вариантов):<br>
     'E': равно<br>
     'L': меньше-либо-равно<br>
     'G': больше-либо-равно<br>
     'N': нет ограничений<br>
   asName   - Имя строки (<= 8 символов)<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function Add_ROW(asRHCode: string; asName: string): boolean;

//------------------------------------------------------------------------------
#doc
 Добавление элемента в секцию COLUMNS (секция столбцов)</brief><br>
 Параметры:<br>
   asName    - Имя столбца (<= 8 символов)<br>
   asStrName - Имя строки (<= 8 символов)<br>
   adValue   - Число - значение элемента в ячейке матрицы<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function Add_COLUMN(asName: string; asStrName: string; adValue: double): boolean;

//------------------------------------------------------------------------------
#doc
 Добавление элемента в секцию RHS (секция столбца констант основных ограничения)</brief><br>
 Параметры:<br>
   asStrName - Имя строки (<= 8 символов)<br>
   adValue   - Число - значение константы, стоящей в данной строке (справа от "=")<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function Add_RH(asStrName: string; adValue: double): boolean;

//------------------------------------------------------------------------------
#doc
 Добавление элемента в секцию RANGES (секйия столбца интервалов)</brief><br>
 Параметры:<br>
   asStrName - Имя строки (<= 8 символов)<br>
   adValue   - Число - значение интервала, разность между верхней и нижней границей<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function Add_RANGE(asStrName: string; adValue: double): boolean;

//------------------------------------------------------------------------------
#doc
 Добавление элемента в секцию BOUNDS (секция строки границ)</brief><br>
 Параметры:<br>
  asBNDCode - Код вида границы (один из вариантов):<br>
    'LO': нижняя граница<br>
    'UP': верхняя граница<br>
    'FX': фиксированное значение (нижняя граница равна верхней)<br>
    'FR': свободная переменная (минус бесконечность, плюс бесконечность)<br>
    'MI': отрицательная переменная (минус бесконечность, нуль)<br>
    'PL': положительная переменная (плюс бесконечность, нуль)<br>
  asClnName - Имя столбца, для которого определяется граница (<= 8 символов)<br>
  adValue   - Значение границы (для asBNDCode = 'LO', 'UP' или 'FX')<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function Add_BOUND(asBNDCode: string; asClnName: string; adValue: double): boolean;

//------------------------------------------------------------------------------
#doc
 Установка цели оптимизации</brief><br>
 Параметры:<br>
   asOptGoal   - Цель оптимизации (один из вариантов):<br>
     'MINIMIZE'<br>
     'MAXIMIZE'<br>
   asGFStrName - Имя строки целевой функции (<= 8 символов)<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function Set_OPTGOAL(asOptGoal: string; asGFStrName: string): boolean;

//------------------------------------------------------------------------------
#doc
 Добавление элемента в таблицу vtCOLUMN_RND</brief><br>
 Параметры:<br>
   asClnName - Имя столбца (<= 8 символов)<br>
   adUnit    - Единица кратности<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function Add_COLUMN_RND(asClnName: string; adUnit: double): boolean;

//------------------------------------------------------------------------------
#doc
 Удаление элемента из таблицы vtCOLUMN_RND</brief><br>
 Параметры:<br>
   asClnName - Имя столбца (<= 8 символов)<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function Del_COLUMN_RND(asClnName: string): boolean;

//------------------------------------------------------------------------------
#doc
 Установка числового формата DOUBLE (для вывода в файл)</brief><br>
 Параметры:<br>
   asDblFormat - Строка формата, если пусто, то ='[|-]3666666666666666.8888888'<br>
#end
Procedure SetDoubleFormat(asDblFormat: string);

//------------------------------------------------------------------------------
#doc
 Генерация MPS-файла (расширенная функция)</brief><br>
 Параметры:<br>
   asPath     - Путь, куда записывать файл<br>
   asFileName - Имя MPS-файла (без пути)<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function GenerateMPSFileEx(asPath: string; asFileName: string): boolean;

//------------------------------------------------------------------------------
#doc
 Генерация MPS-файла</brief><br>
 (<имя_файла> = <имя_задачи>.mps)<br>
 Параметры:<br>
   asPath - Путь, куда записывать файл<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function GenerateMPSFile(asPath: string): boolean;

//------------------------------------------------------------------------------
#doc
 Чтение результатов расчета из OUT-файла (расширенная функция)</brief><br>
 Параметры:<br>
  asOUTFile    - Имя OUT-файла, включая путь<br>
  abViewErrMsg - Флаг "Выводить сообщения об ошибках"<br>
  adGoalFunc   - Значение целевой функции<br>
  awStatusRes  - Статус решения:<br>
    0: Оптимальное решение найдено<br>
    1: Задача не имеет допустимых решений<br>
    2: Целевая функция задачи неограничена<br>
       на множестве допустимых значений<br>
    3: Решение задачи не закончено<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function GetResultsEx(asOUTFile: string; abViewErrMsg: boolean;
  var adGoalFunc: double; var awStatusRes: word): boolean;

//------------------------------------------------------------------------------
#doc
 Чтение результатов расчета из OUT-файла</brief><br>
 Запуск расчета<br>
   (<имя_OUT-файла> = <имя_задачи>.out)<br>
 Параметры:<br>
  abViewErrMsg - Флаг "Выводить сообщения об ошибках"<br>
  adGoalFunc   - Значение целевой функции<br>
  awStatusRes  - Статус решения:<br>
    0: Оптимальное решение найдено<br>
    1: Задача не имеет допустимых решений<br>
    2: Целевая функция задачи неограничена<br>
       на множестве допустимых значений<br>
    3: Решение задачи не закончено<br>
 Результат:<br>
   True, если успешно, иначе - False<br>
#end
Function GetResults(abViewErrMsg: boolean;
  var adGoalFunc: double; var awStatusRes: word): boolean;

//------------------------------------------------------------------------------
#doc
 Чтение текущей записи в списке значений столбцов/строк (vtRes)</brief><br>
 Параметры:<br>
   ardRecMPSVal - Структура для хранения MPS-значения<br>
 Результат:<br>
   True, если успешно<br>
#end
Function GetCurMPSVal(var ardRecMPSVal: TRecMPSVal): boolean;

//------------------------------------------------------------------------------
#doc
 Получение первой записи значений для столбцов</brief><br>
 Параметры:<br>
   ardRecMPSVal - Структура для хранения MPS-значения<br>
 Результат:<br>
   True, если запись найдена<br>
#end
Function GetFirstColVal(var ardRecMPSVal: TRecMPSVal): boolean;

//------------------------------------------------------------------------------
#doc
 Получение последней записи значений для столбцов</brief><br>
 Параметры:<br>
   ardRecMPSVal - Структура для хранения MPS-значения<br>
 Результат:<br>
   True, если запись найдена<br>
#end
Function GetLastColVal(var ardRecMPSVal: TRecMPSVal): boolean;

//------------------------------------------------------------------------------
#doc
 Получение следующей записи значений для столбцов относительно текущей позиции</brief><br>
 Параметры:<br>
   ardRecMPSVal - Структура для хранения MPS-значения<br>
 Результат:<br>
   True, если запись найдена<br>
#end
Function GetNextColVal(var ardRecMPSVal: TRecMPSVal): boolean;

//------------------------------------------------------------------------------
#doc
 Получение предыдующей записи значений для столбцов относительно текущей позиции</brief><br>
 Параметры:<br>
   ardRecMPSVal - Структура для хранения MPS-значения<br>
 Результат:<br>
   True, если запись найдена<br>
#end
Function GetPrevColVal(var ardRecMPSVal: TRecMPSVal): boolean;

//------------------------------------------------------------------------------
#doc
 Получение первой записи значений для строк</brief><br>
 Параметры:<br>
   ardRecMPSVal - Структура для хранения MPS-значения<br>
 Результат:<br>
   True, если запись найдена<br>
#end
Function GetFirstRowVal(var ardRecMPSVal: TRecMPSVal): boolean;

//------------------------------------------------------------------------------
#doc
 Получение последней записи значений для строк</brief><br>
 Параметры:<br>
   ardRecMPSVal - Структура для хранения MPS-значения<br>
 Результат:<br>
   True, если запись найдена<br>
#end
Function GetLastRowVal(var ardRecMPSVal: TRecMPSVal): boolean;

//------------------------------------------------------------------------------
#doc
 Получение следующей записи значений для строк относительно текущей позиции</brief><br>
 Параметры:<br>
   ardRecMPSVal - Структура для хранения MPS-значения<br>
 Результат:<br>
   True, если запись найдена<br>
#end
Function GetNextRowVal(var ardRecMPSVal: TRecMPSVal): boolean;

//------------------------------------------------------------------------------
#doc
 Получение предыдующей записи значений для строк относительно текущей позиции</brief><br>
 Параметры:<br>
   ardRecMPSVal - Структура для хранения MPS-значения<br>
 Результат:<br>
   True, если запись найдена<br>
#end
Function GetPrevRowVal(var ardRecMPSVal: TRecMPSVal): boolean;

//------------------------------------------------------------------------------
#doc
 Запуск расчета с использовванием "симплекс-метода" (расширенная функция)</brief><br>
 Параметры:<br>
   asMPSFile    - Имя MPS-файла, включая путь<br>
   asOUTFile    - Имя OUT-файла, включая путь<br>
   asLPPFile    - Имя LPP-файла, включая путь<br>
   abViewErrMsg - Флаг "Выводить сообщения об ошибках"<br>
 Результат:<br>
   0, если все нормально, иначе - код ошибки<br>
#end
Function RunCalcEx(asMPSFile: string; asOUTFile: string; asLPPFile: string;
  abViewErrMsg: boolean): longint;

//------------------------------------------------------------------------------
#doc
 Запуск расчета с использовванием "симплекс-метода"</brief><br>
   (<имя_MPS-файла> = <имя_задачи>.mps)<br>
   (<имя_OUT-файла> = <имя_задачи>.out)<br>
   (<имя_LPP-файла> = <имя_задачи>.lpp)<br>
 Параметры:<br>
   abViewErrMsg - Флаг "Выводить сообщения об ошибках"<br>
 Результат:<br>
   0, если все нормально, иначе - код ошибки<br>
#end
Function RunCalc(abViewErrMsg: boolean): longint;

//------------------------------------------------------------------------------
#doc
 Запуск расчета для получения целочисленных решений с использованием "метода ветвей и границ"</brief><br>
 Branch&Bound Method<br>
 (расширенная функция)<br>
 Параметры:<br>
   asMPSFile    - Имя MPS-файла, включая путь<br>
   asOUTFile    - Имя OUT-файла, включая путь<br>
   asLPPFile    - Имя LPP-файла, включая путь<br>
   abViewErrMsg - Флаг "Выводить сообщения об ошибках"<br>
 Результат:<br>
   0, если все нормально, иначе - код ошибки<br>
#end
Function RunCalcBBMEx(asMPSFile: string; asOUTFile: string; asLPPFile: string;
  abViewErrMsg: boolean): longint;

//------------------------------------------------------------------------------
#doc
 Запуск расчета для получения целочисленных решений с использованием "метода ветвей и границ"</brief><br>
 Branch&Bound Method<br>
   (<имя_MPS-файла> = <имя_задачи>.mps)<br>
   (<имя_OUT-файла> = <имя_задачи>.out)<br>
   (<имя_LPP-файла> = <имя_задачи>.lpp)<br>
 Параметры:<br>
   abViewErrMsg - Флаг "Выводить сообщения об ошибках"<br>
 Результат:<br>
   0, если все нормально, иначе - код ошибки<br>
#end
Function RunCalcBBM(abViewErrMsg: boolean): longint;

End; // ObjInterface oMPSAlg_CF

VipInterface iMPSAlg_CF implements oMPSAlg_CF Licensed(Free);

#endif
