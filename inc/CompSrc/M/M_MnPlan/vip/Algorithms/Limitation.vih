// =============================================================================
//                                                     (c)  корпорация Галактика
// Галактика 7.11 - Производственный контур
// Описание интерфейсов для работы с ограничениями
// =============================================================================

#ifndef __OGRAFICS
#include oGrafics.vih
#endif

#ifndef __CompoundVisualizationObj
#include CompoundVisual.vih
#endif

#include mrpvtbl.vpp

//ObjInterface oAlg_05;Forward;

//******************************************************************************
// Типы данных

//------------------------------------------------------------------------------
// Структура для хранения данных ограничения
#ifndef __Def_TRecLimitInfo__
#define __Def_TRecLimitInfo__
Type TRecLimitInfo = Record
  wMode: word;                // Режим:
                              //   Для функции GetLimitInfo:
                              //     0 - Заполнение данных о наличии (в таблицу tmOutm) для записей таблицы tmOutIzm (tmOutIzd)
                              //     1 - Получение данных о наличии из tmOut для параметра ardLimitInfo.r_tmOut
                              //   Для функции SetLimitInfo:
                              //     0 - резервирование данных о наличии в tmOut для параметра ardLimitInfo.r_tmOut
  dtActualDate: date;         //
  cFpTPer: comp;              // (учитывается для wMode = 0 в GetLimitInfo)
  wFlSrcAvlManufacture: word; // (учитывается для wMode = 0 в GetLimitInfo)
  wFlSrcAvlPurchased: word;   // (учитывается для wMode = 0 в GetLimitInfo)
  r_TmOut: type$tmOutm;       //
  cMnPlan: comp;              // Ссылка на документ-приемник
  NumAlgVid: word;            // Номер алгоритма представления для приемника
  cRoleAn1: comp;             // Ссылка на роль аналитики № 1 спецификации приемника
  wKodGr1: word;              // КАУ аналитики № 1 спецификации приемника
  cRoleAn2: comp;             // Ссылка на роль аналитики № 2 спецификации приемника
  wKodGr2: word;              // КАУ аналитики № 2 спецификации приемника
  cRoleAn3: comp;             // Ссылка на роль аналитики № 3 спецификации приемника
  wKodGr3: word;              // КАУ аналитики № 3 спецификации приемника
  CountAnForID: word;         // Кол-во аналитик для идентификации строк спецификации приемника
  dAvl: double;               // Кол-во "Наличие"
  dReserve: double;           // Кол-во "Резерв"
  dRest: double;              // Кол-во "Остаток"
End; // Type TRecLimitInfo
#endif

//------------------------------------------------------------------------------
// Информационная структура для  расчетных функций
#include trecacc.rec

#ifndef __Limitation
#define __Limitation




//******************************************************************************
// Константы

//------------------------------------------------------------------------------
//
Const
  sfInitLim   = 1;  // Объект иницилизирован
  sfActive    = 2;  // Активный
  sfClearLim  = 4;  // Объект освобожден
  sfLoadinAll = 8;  // Загрузка всего из ограничений
  sfErrorLim  = 16; // Были ошибки
  sfNoSaveRez = 32; // Были ошибки. Результаты не записывать
  sfCreateAllLink = 64;
  sfSetTmInpDate  = 128;
  sfSetLinkRsvOper  = 256;
  sfSaveMat         = 512;
  sfSetQuery        = 1024;
  sfGlobalBreak     = 2048;
  sfFondInit        = 4096; // инициализация ограничений в режиме расчета по фондам
  sfCalcOfPlat      = 8192; // использование платформозависимое решение

End;

//------------------------------------------------------------------------------
//
Const
  prlObor      = 1;
  prlParty     = 2;
  prlDep       = 3;
  prlWrkDetQnt = 4;
  prlKontrOp   = 5;
  prlDepFlt    = 6;
  prlDopObor   = 7;
  prlDopOborPl = 8;
  prlPTrash    = 9;
  prlToolQnt   = 10;
  prlProfess   = 11;
  prlTimeofDelay = 12; // время пролеживания
End;

Const
  pzSameObor = 1;
  pzLimited  = 2;
End;


//------------------------------------------------------------------------------
//
Const
  sInWork   = 1;
  sApproved = 2;
  sPlanned  = 3;
End;


#ifdef ComponentVersion
#component "M_MnPlan"
#end

//******************************************************************************
// ObjInterface oLimitation
ObjInterface oLimitation;

//------------------------------------------------------------------------------
// Инициализация интерфейса
// Результат:
//   True, если успешно, иначе - False
Function InitInter: boolean;

//------------------------------------------------------------------------------
// Выгрузка ресурсов
// Результат:
//   True, если успешно, иначе - False
Function DoneInter: boolean;

//------------------------------------------------------------------------------
// Установить ссылку на объект регистрации ситуаций
// Параметры:
//   aoEvnLog - Ссылка на объект регистрации ситуаций
// Результат:
//   tsOk, если успешно, иначе - код ошибки
Function SetEvnLog(var aoEvnLog: oiEvnLog): longint;

//------------------------------------------------------------------------------
// Получить ссылку на объект регистрации ситуаций
// Результат:
//   Ссылка на объект регистрации ситуаций
Function GetEvnLog: oiEvnLog;

//------------------------------------------------------------------------------
// Получение наименования объекта типа "Ограничение"
// Результат:
//   Наименование объекта
Function GetName: string;

//------------------------------------------------------------------------------
// Установка флага состояния
// Параметры:
//   flag  - Флаг состояния
//   OnOff - Признак включения/выключения
// Результат:
//   True, если успешно, иначе - False
Function SetState(flag: integer; OnOff: boolean): boolean;

//------------------------------------------------------------------------------
// Чтение флага состояния
// Параметры:
//   flag  - Флаг состояния
// Результат:
//   True, если включен иначе - False
Function GetState(flag: integer): boolean;

//------------------------------------------------------------------------------
// Установка текущей записи FormPl
// Параметры:
//   cFormPl - Ссылка на запись FormPl
// Результат:
//   True, если успешно, иначе - False
Function SetFormPl(cFormPl: comp): boolean;

//------------------------------------------------------------------------------
// Получение ссылки на текущее ограничение (FormPl.Nrec)
// Результат:
//   Ссылка на текущее ограничение (FormPl.Nrec)
Function GetFormPl: comp;

//------------------------------------------------------------------------------
// Чтение Nrec'а текущей записи таблицы OborPl
// Результат:
//   Nrec'а текущей записи таблицы OborPl, если запись не найдена - 0
//Function GetOborPl: comp;

//------------------------------------------------------------------------------
// Чтение типа ограничения
// Результат:
//   Тип ограничения
Function GetType: word;

//------------------------------------------------------------------------------
// Чтение способа влияния ограничения
// Результат:
//   Способ влияния ограничения
Function GetWay: word;

//------------------------------------------------------------------------------
// Определение, подходит ли ОАУ для ограничения
// Параметры:
//   wKodKau - КАУ объекта
//   cKau    - Ссылка на ОАУ
// Результат:
//   True, если успешно, иначе - False
Function IsObjectKau(wKodKau: word; cKau: comp): boolean;

//------------------------------------------------------------------------------
// Чтение значения параметра ограничения
// Параметры:
//   asPrmName - Имя параметра
// Результат:
//   Значение параметра, если параметр не найден - пустая строка
Function GetPrmVal(asPrmName: string): string;

//------------------------------------------------------------------------------
// Установка значения параметра
// Параметры:
//   asPrmName - Имя параметра
//   asValue   - Значение параметра
// Результат:
//   True, если успешно, иначе - False
Function SetPrmVal(asPrmName: string; asValue: string): boolean;

//------------------------------------------------------------------------------
// Чтение текущего значения из списка значений для заданного параметра-мультиссылки
// Параметры:
//   asPrmName - Имя параметра
// Результат:
//   Значение, если не найдено - пустая строка
Function PrmVLR_Value(asPrmName: string): string;

//------------------------------------------------------------------------------
// Поиск первого значения в списке значений для заданного параметра-мультиссылки
// Параметры:
//   asPrmName - Имя параметра
// Результат:
//   tsOk, если успешно, иначе - код ошибки
Function PrmVLR_GetFirst(asPrmName: string): longint;

//------------------------------------------------------------------------------
// Поиск последнего значения в списке значений для заданного параметра-мультиссылки
// Параметры:
//   asPrmName - Имя параметра
// Результат:
//   tsOk, если успешно, иначе - код ошибки
Function PrmVLR_GetLast(asPrmName: string): longint;

//------------------------------------------------------------------------------
// Поиск следующего значения в списке значений для заданного параметра-мультиссылки
// Параметры:
//   asPrmName - Имя параметра
// Результат:
//   tsOk, если успешно, иначе - код ошибки
Function PrmVLR_GetNext(asPrmName: string): longint;

//------------------------------------------------------------------------------
// Поиск предыдущего значения в списке значений для заданного параметра-мультиссылки
// Параметры:
//   asPrmName - Имя параметра
// Результат:
//   tsOk, если успешно, иначе - код ошибки
Function PrmVLR_GetPrev(asPrmName: string): longint;

//------------------------------------------------------------------------------
// Получение информации по ограничению
// Параметры:
//   ardLimitInfo - Структура дополнительных параметров (передаваемых/возвращаемых)
// Результат:
//   True, если успешно, иначе - False
Function GetLimitInfo(var ardLimitInfo: TRecLimitInfo): boolean;

//------------------------------------------------------------------------------
// Установка информации по ограничению
// Параметры:
//   ardLimitInfo - Структура дополнительных параметров (передаваемых/возвращаемых)
// Результат:
//   True, если успешно, иначе - False
Function SetLimitInfo(var ardLimitInfo: TRecLimitInfo): boolean;

//------------------------------------------------------------------------------
// Установка ссылки на объект oAlg_05
// Параметры:
//   ia5 - Объект oAlg_05
// Результат:
//   True, если успешно, иначе - False
Function SetAlg_05(ia5: oAlg_05): boolean;

//------------------------------------------------------------------------------
// Получение ссылки на объект oAlg_05
// Результат:
//   Объект oAlg_05
Function GetAlg_05: oAlg_05;

//------------------------------------------------------------------------------
// Получение ссылки на объект oCommonFunAlg
// Результат:
Function GetiCommonFunAlg: oCommonFunAlg;

//------------------------------------------------------------------------------
// Установка номера ограничения
// Параметры:
//   ppNumLim - Номер ограничения
// Результат:
//   True, если успешно, иначе - False
Function SetNum(ppNumLim: LongInt): boolean;

//------------------------------------------------------------------------------
// Чтение номера ограничения
// Результат:
//   Номер ограничения
Function GetNum: longint;

//------------------------------------------------------------------------------
// Установка опциональных флагов
// Параметры:
//   flag - Опциональные флаги
// Результат:
//   True, если успешно, иначе - False
Function SetOptions(flag: integer): boolean;

//------------------------------------------------------------------------------
// Чтение опциональных флагов
// Результат:
//   Опциональные флаги
Function GetOptions: integer;

//------------------------------------------------------------------------------
// Передача буфера записи таблицы FormPl алгоритма-владельца
// Результат:
//   ar_AlgFormPl - Буфер записи таблицы FormPl алгоритма-владельца
// Результат:
//   True, если успешно, иначе - False
Function SetAlgFormPl(ar_AlgFormPl: type$FormPl): boolean;

//------------------------------------------------------------------------------
// Чтение буфера записи таблицы FormPl алгоритма-владельца
// Результат:
//   Буфер записи таблицы FormPl алгоритма-владельца
Function GetAlgFormPl: type$FormPl;

End; // ObjInterface oLimitation

//******************************************************************************
// Индексированны объект "Ограничение"
Type ObjLim = Record
  num : word;
  iLim: oLimitation;
End; // Type ObjLim

//******************************************************************************
// Индексированный объект "График"
Type ObjGraf = Record
  Nrec   : comp;
  iGrafic: oGrafics;
End; // Type ObjGraf

//******************************************************************************
// ObjInterface oLimitIter
ObjInterface oLimitIter;

//------------------------------------------------------------------------------
// Функции работы со стеком
// Параметры:
//   cFormPl - Ссылка на запись-ограничение FormPl.Nrec
// Результат:
//   tsOk, если успешно, иначе - код ошибки
Function newPos(cFormPl: comp): longint;

//------------------------------------------------------------------------------
// Чтение объекта-ограничения по индексу
// Параметры:
//   i       - Индекс
//   vriLimG - Ссылка на объект-ограничение
// Результат:
//   True, если успешно, иначе - False
Function GetPos(i: longint; var vriLimG: oLimitation): boolean;

//------------------------------------------------------------------------------
// Чтение количества объектов-ограничений
// Результат:
//   Количество объектов-ограничений
Function GetKolPos: longint;

//------------------------------------------------------------------------------
// Установка флага состояния объекта-ограничения по индексу
// Параметры:
//   i     - Индекс
//   flag  - Флаг
//   OnOff - Признак включения/выключения
// Результат:
//   True, если успешно, иначе - False
Function SetStatePos(i: longint; flag: integer; OnOff: boolean): boolean;

//------------------------------------------------------------------------------
// Чтение флага состояния объекта-ограничения по индексу
// Параметры:
//   i    - Индекс
//   flag - Флаг
// Результат:
//   Признак "Включен/Выключен"
Function GetStatePos(i: longint; flag: integer): boolean;

//------------------------------------------------------------------------------
// Чтение флага состояния списка ограничений
// Параметры:
//   flag - Флаг состояния
// Результат:
//   Признак "Включен/Выключен"
Function GetState(flag: integer): boolean;

//------------------------------------------------------------------------------
// Установка флага состояния списка ограничений
// Параметры:
//   flag  - Флаг состояния
//   OnOff - Признак "Включен/Выключен"
// Результат:
//   True, если успешно, иначе - False
Function SetState(flag: integer; OnOff: boolean): boolean;

//------------------------------------------------------------------------------
// Получение ссылки на объект-ограничение по ссылке на запись OborPl
// Параметры:
//   cOborPl - ссылка на запись FormPl
// Результат:
//   Ссылка на объект-ограничение
Function GetLimitation(cOborPl: comp): oLimitation;

//------------------------------------------------------------------------------
// Получение ссылка на объект-график по индексу
// Параметры:
//   i         - Индекс
//   vriGrafic - Ссылка на объект-график
// Результат:
//   True, если успешно, иначе - False
Function GetStGrafic(i: longint; var vriGrafic: ObjGraf): boolean;

//------------------------------------------------------------------------------
// Создание записи OborPl по КАУ
// Параметры:
//   wKodKau - КАУ
// Результат:
//   True, если успешно, иначе - False
Function SetOborPlClone(wKodKau: word): boolean;

//------------------------------------------------------------------------------
// Чтение записи OborPl для ОАУ
// Параметры:
//   wKodKau - КАУ
//   cKodKau - Ссылка на ОАУ
//   stOb    - Буфер записи OborPl
//   flag    - Флаги состояния
// Результат:
//   True, если успешно, иначе - False
Function GetOborPl(wKodKau: word; cKodKau: comp;
                   wKodKauDep : word; cKodKauDep : comp; var stOb: type$OborPl; flag: word): boolean;

Function GetOborPlExt(_cWrk : comp; wKodKauDep : word; cKodKauDep : comp;
                      var stOb : type$OborPl;  flag : Word ):boolean;

//------------------------------------------------------------------------------
// Определение входимости временного интервала в общий период для ограничений
// Параметры:
//   dtStart - Начальная дата временного интервала
//   dtEnd   - Конечная дата временного интервала
// Результат:
//   True, если успешно, иначе - False
Function GetDateGr(dtStart: date; dtEnd: date): boolean;

//------------------------------------------------------------------------------
// Чтение буфера текущей записи таблицы OborPl
// Результат:
//   Буфер текущей записи таблицы OborPl
Function GetCurOborPl: type$OborPl;

//------------------------------------------------------------------------------
// Получение записи ClMrp для заполнения
// tZikl - если 0 - сокращенный поиск по четырем сегментам
Function GetCloneEx (   pnum     : word;
                        pwTypeS  : word;
                        pcNrecS  : comp;
                        pProduct : word;
                        tZikl    : word;
                        pZikl    : comp;
                        flag     : word  // 1-создавать
                  ): Comp;

//------------------------------------------------------------------------------
// Получение записи ClMrp для заполнения CloneAnal в SpSpLimOst
// Параметры:
//  awNum       - Номер для ClMrp, которая ищется (= 5)
//  acCloneMain - ссылка на головную запись ClMrp
//  acPodr      - Ссылка на подразделение (KatPodr.Nrec)
//  acMOL       - Ссылка на МОЛ (KatMOL.Nrec)
//  acParty     - Ссылка на партию (KatParty.Nrec)
Function GetClone5(awNum: word; acCloneMain: comp; acPodr: comp; acMOL: comp; acParty: comp): comp;

//------------------------------------------------------------------------------
// Передача буфера записи таблицы FormPl алгоритма-владельца
// Результат:
//   ar_AlgFormPl - Буфер записи таблицы FormPl алгоритма-владельца
// Результат:
//   True, если успешно, иначе - False
Function SetAlgFormPl(ar_AlgFormPl: type$FormPl): boolean;

//------------------------------------------------------------------------------
// Чтение буфера записи таблицы FormPl алгоритма-владельца
// Результат:
//   Буфер записи таблицы FormPl алгоритма-владельца
Function GetAlgFormPl: type$FormPl;

//------------------------------------------------------------------------------
// Установка ссылки на объект oAlg_05
// Параметры:
//   ia5 - Объект oAlg_05
// Результат:
//   True, если успешно, иначе - False
Function SetAlg_05(ia5: oAlg_05): boolean;

//------------------------------------------------------------------------------
// Получение ссылки на объект oAlg_05
// Результат:
//   Объект oAlg_05
Function GetAlg_05: oAlg_05;

//------------------------------------------------------------------------------
// Установка ссылки на объект oAlg_05
// Параметры:
//   ia5 - Объект oAlg_05
// Результат:
//   True, если успешно, иначе - False
Function SetAlg_05Visual(ia5Vis: CompoundVisualizationObj): boolean;

//------------------------------------------------------------------------------
// Получение ссылки на объект oAlg_05
// Результат:
//   Объект oAlg_05
Function GetAlg_05Visual: CompoundVisualizationObj;


End; // ObjInterface oLimitIter

ObjInterface oLimitIter1(oLimitIter);
//------------------------------------------------------------------------------
Function GetFaktDateFoURR(cRsvOper, cAnVal2, cRoleAn3: Comp; startDateT, endDateT: _DateTime;
                         var startDateTFakt: _DateTime; var endDateTFakt: _DateTime; flag: word): longint;

Function DelFaktFondForRsvOper(_cRsvOper: comp; wFlag: word): longint;


End;

//******************************************************************************
// ObjInterface oTestInfMnf
ObjInterface oTestInfMnf;

//------------------------------------------------------------------------------
// Установка начальной и конечной дат временного интервала
// Параметры:
//   dtStart - Начальная дата временного интервала
//   dtEnd   - Конечная дата временного интервала
// Результат:
//   True, если успешно, иначе - False
Function SetDateGr(dtStart: date; dtEnd: date): boolean;

//------------------------------------------------------------------------------
// Чтение начальной и конечной дат временного интервала
// Параметры:
//   dtStart - Начальная дата временного интервала
//   dtEnd   - Конечная дата временного интервала
// Результат:
//   True, если успешно, иначе - False
Function GetDateGr(var dtStart: date; var dtEnd: date): boolean;

//------------------------------------------------------------------------------
// Установка ссылки на объект oAlg_05
// Параметры:
//   ia5 - Объект oAlg_05
// Результат:
//   True, если успешно, иначе - False
Function SetAlg_05(ia5: oAlg_05): boolean;

//------------------------------------------------------------------------------
//
// Параметры:
// Результат:
//   True, если успешно, иначе - False
Function SetLimItt(piLim: oLimitIter): boolean;

//------------------------------------------------------------------------------
// Получение ссылки на объект "Список ограничений"
// Результат:
//   Ссылка на объект "Список ограничений"
Function GetoLimIt: oLimitIter;

//------------------------------------------------------------------------------
// Получение ссылки на объект oAlg_05
// Результат:
//   Объект oAlg_05
Function GetAlg_05: oAlg_05;


//------------------------------------------------------------------------------
//
// Параметры:
// Результат:
//   True, если успешно, иначе - False
Function SetParStr(num: word; pstr : string): boolean;
Function GetParStr(num: word): string;

End; // ObjInterface oTestInfMnf

//******************************************************************************
// Объявления VipInterface
VipInterface Limit01 implements oLimitation #Licensed_Free;
VipInterface LimitIter implements oLimitIter1 #Licensed_Free;
VipInterface TestInfMnf implements oTestInfMnf #Licensed_Free;

#endif







