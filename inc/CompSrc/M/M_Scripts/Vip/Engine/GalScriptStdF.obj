 /*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                   (c) 1994,2001 корпорация ГАЛАКТИКА                      ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Контур управления ресурсами - заявками                    ║
 ║ Версия        : 7.10                                                      ║
 ║ Назначение    : Описание   обьекта - враппера для создония-заполнения-    ║
 ║                            стандартной функции JAVA-Script-a              ║
 ║ Ответственный : Подобед Илья Эдуардович <PODOBED>                         ║
 ║ Параметры     :                                                           ║
 ╚═══════════════════════════════════════════════════════════════════════════╝

*/
#ifndef __oGalScriptStdF__
#define __oGalScriptStdF__

#ifdef ComponentVersion
#component "M_Scripts"
#endif

#include GalScriptStdF.vih

#declare JSWorkLink(JSLocalLink)
// передать ссылку на механизм работы с JavaScript
// в реализации необходимо перед установкой обязательно освобождать
public procedure SetJSWork(JSLink: oiJSWork);
  {
  if (#JSLocalLink = JSLink)
    exit;
  if (not NullVIPRef(#JSLocalLink))
    FreeVIPInterface(#JSLocalLink);
  #JSLocalLink:= JSLink;
  }

// освободить ссылку на механизм работы с JavaScript
public procedure FreeJSWork;
  {
  if (not NullVIPRef(#JSLocalLink))
    FreeVIPInterface(#JSLocalLink);
  }

function GetArg(Num : word):string;
{
  GetArg := #JSLocalLink.GetVipArg(num, False)
}

procedure SetArg(Num : word; Val : string);
{
  #JSLocalLink.SetVipArg(num, Val, False)
}


// немного для word
function GetArgWord(Num : word):word;
{
  GetArgWord := word(#JSLocalLink.GetVipArg(num, False))
}

procedure SetArgWord(Num : word; Val : word);
{
  #JSLocalLink.SetVipArg(num, string(Val), False)
}

function CallEx: string;
{
  CallEx := '  VIP.CallMethodEx();'
}

// script primetives
function VipArg(Num : word): string;
{
  VipArg := 'VIP.ArgValue('+string(Num)+')'
}


// String
function GetArgString(Num : word):string;
{
  GetArgString := #JSLocalLink.GetVipArg(num, False)
}

procedure SetArgString(Num : word; Val : string);
{
  #JSLocalLink.SetVipArg(num, Val, False)
}

function ScriptFaceString(primitive : string):string;
{
  ScriptFaceString := primitive;
}

function ScriptFaceString_(primitive : string):string;
{
  ScriptFaceString_ := primitive;
}

function VJString(Num : word; Nam : string): string;
{
  VJString := '  ' + VipArg(Num) + ' = ' + ScriptFaceString_(Nam)
}

function JVString(Num : word; Nam : string): string;
{
  JVString := '  ' + Nam + ' = ' + ScriptFaceString(VipArg(Num))
}

function RetString(Num : word): string;
{
  RetString := '  return ' + ScriptFaceString(VipArg(Num))
}

// Variant
function GetArgVariant(Num : word):variant;
{
  GetArgVariant := #JSLocalLink.GetVipArg(num, False)
}

procedure SetArgVariant(Num : word; Val : variant);
{
  #JSLocalLink.SetVipArg(num, Val, False)
}

function ScriptFaceVariant(primitive : string):string;
{
  ScriptFaceVariant := primitive;
}

function ScriptFaceVariant_(primitive : string):string;
{
  ScriptFaceVariant_ := primitive;
}

function VJVariant(Num : word; Nam : string): string;
{
  VJVariant := '  ' + VipArg(Num) + ' = ' + ScriptFaceVariant_(Nam)
}

function JVVariant(Num : word; Nam : string): string;
{
  JVVariant := '  ' + Nam + ' = ' + ScriptFaceVariant(VipArg(Num))
}

function RetVariant(Num : word): string;
{
  RetVariant := '  return ' + ScriptFaceVariant(VipArg(Num))
}

// Double
function GetArgDouble(Num : word):double;
{
  GetArgDouble := Double(#JSLocalLink.GetVipArg(num, True))
}

procedure SetArgDouble(Num : word; Val : double);
{
  #JSLocalLink.SetVipArg(num, string(Val, 0, 15), False)
}

function ScriptFaceDouble(primitive : string):string;
{
  ScriptFaceDouble := 'Number('+primitive+')'
}

function ScriptFaceDouble_(primitive : string):string;
{
  ScriptFaceDouble_ := primitive;
}

function VJDouble(Num : word; Nam : string): string;
{
  VJDouble := '  ' + VipArg(Num) + ' = ' + ScriptFaceDouble_(Nam)
}

function JVDouble(Num : word; Nam : string): string;
{
  JVDouble := '  ' + Nam + ' = ' + ScriptFaceDouble(VipArg(Num))
}

function RetDouble(Num : word): string;
{
  RetDouble := '  return ' + ScriptFaceDouble(VipArg(Num))
}


// Date
function GetArgDate(Num : word):date;
{
  GetArgDate := StrToDate(#JSLocalLink.GetVipArg(num, False), 'YYYY/MM/DD')
}

procedure SetArgDate(Num : word; Val : date);
{
  #JSLocalLink.SetVipArg(num, DateToStr(Val, 'YYYY/MM/DD'), False)
}

function ScriptFaceDate(primitive : string):string;
{
  ScriptFaceDate := primitive
}

function ScriptFaceDate_(primitive : string):string;
{
  ScriptFaceDate_ := primitive
}

function VJDate(Num : word; Nam : string): string;
{
  VJDate := '  ' + VipArg(Num) + ' = ' + ScriptFaceDate_(Nam)
}

function JVDate(Num : word; Nam : string): string;
{
  JVDate := '  ' + Nam + ' = ' + ScriptFaceDate(VipArg(Num))
}

function RetDate(Num : word): string;
{
  RetDate := '  return ' + ScriptFaceDate(VipArg(Num))
}

// Time
function GetArgTime(Num : word):time;
{
  GetArgTime := StrToTime(#JSLocalLink.GetVipArg(num, False), 'HH:MM:SS:SSS')
}

procedure SetArgTime(Num : word; Val : time);
{
  #JSLocalLink.SetVipArg(num, TimeToStr(Val, 'HH:MM:SS:SSS'), False)
}

function ScriptFaceTime(primitive : string):string;
{
  ScriptFaceTime := primitive
}

function ScriptFaceTime_(primitive : string):string;
{
  ScriptFaceTime_ := primitive
}

function VJTime(Num : word; Nam : string): string;
{
  VJTime := '  ' + VipArg(Num) + ' = ' + ScriptFaceTime_(Nam)
}

function JVTime(Num : word; Nam : string): string;
{
  JVTime := '  ' + Nam + ' = ' + ScriptFaceTime(VipArg(Num))
}

function RetTime(Num : word): string;
{
  RetTime := '  return ' + ScriptFaceTime(VipArg(Num))
}


// Comp
function GetArgComp(Num : word):comp;
{
  GetArgComp := comp(#JSLocalLink.GetVipArg(num, False))
}

procedure SetArgComp(Num : word; Val : comp);
{
  #JSLocalLink.SetVipArg(num, string(Val), False)
}

function ScriptFaceComp(primitive : string):string;
{
  ScriptFaceComp := primitive
}

function ScriptFaceComp_(primitive : string):string;
{
  ScriptFaceComp_ := primitive;
}

function VJComp(Num : word; Nam : string): string;
{
  VJComp := '  ' + VipArg(Num) + ' = ' + ScriptFaceComp_(Nam)
}

function JVComp(Num : word; Nam : string): string;
{
  JVComp := '  ' + Nam + ' = ' + ScriptFaceComp(VipArg(Num))
}

function RetComp(Num : word): string;
{
  RetComp := '  return ' + ScriptFaceComp(VipArg(Num))
}


// Boolean
function GetArgBoolean(Num : word):boolean;
{
  GetArgBoolean := (#JSLocalLink.GetVipArg(num, False) != '0')
}

procedure SetArgBoolean(Num : word; Val : boolean);
{
  #JSLocalLink.SetVipArg(num, if(Val, ' ', ''), False)
}

function ScriptFaceBoolean(primitive : string):string;
{
  ScriptFaceBoolean := 'Boolean('+primitive+')'
}

function ScriptFaceBoolean_(primitive : string):string;
{
  ScriptFaceBoolean_ := primitive;
}

function VJBoolean(Num : word; Nam : string): string;
{
  VJBoolean := '  ' + VipArg(Num) + ' = ' + ScriptFaceBoolean_(Nam)
}

function JVBoolean(Num : word; Nam : string): string;
{
  JVBoolean := '  ' + Nam + ' = ' + ScriptFaceBoolean(VipArg(Num))
}

function RetBoolean(Num : word): string;
{
  RetBoolean := '  return ' + ScriptFaceBoolean(VipArg(Num))
}



// Integer
function GetArgInteger(Num : word):longInt;
{
  GetArgInteger := longint(trunc(#JSLocalLink.GetVipArg(num, False)))
}

procedure SetArgInteger(Num : word; Val : longInt);
{
  #JSLocalLink.SetVipArg(num, string(Val), False)
}

function ScriptFaceInteger(primitive : string):string;
{
  ScriptFaceInteger := 'Number('+primitive+')'
}

function ScriptFaceInteger_(primitive : string):string;
{
  ScriptFaceInteger_ := primitive;
}

function VJInteger(Num : word; Nam : string): string;
{
  VJInteger := '  ' + VipArg(Num) + ' = ' + ScriptFaceInteger_(Nam)
}

function JVInteger(Num : word; Nam : string): string;
{
  JVInteger := '  ' + Nam + ' = ' + ScriptFaceInteger(VipArg(Num))
}

function RetInteger(Num : word): string;
{
  RetInteger := '  return ' + ScriptFaceInteger(VipArg(Num))
}


// DateTime
function GetArgDateTime(Num : word):_datetime;
{
  GetArgDateTime := _StrToDateTime(#JSLocalLink.GetVipArg(num, False), 'YYYY/MM/DD HH:NN:SS')
}

procedure SetArgDateTime(Num : word; Val : _datetime);
{
  #JSLocalLink.SetVipArg(num, _DateTimeToStr(Val, 'YYYY/MM/DD HH:NN:SS'), False)
}

function ScriptFaceDateTime(primitive : string):string;
{
  ScriptFaceDateTime := primitive
}

function ScriptFaceDateTime_(primitive : string):string;
{
  ScriptFaceDateTime_ := primitive
}

function VJDateTime(Num : word; Nam : string): string;
{
  VJDateTime := '  ' + VipArg(Num) + ' = ' + ScriptFaceDateTime_(Nam)
}

function JVDateTime(Num : word; Nam : string): string;
{
  JVDateTime := '  ' + Nam + ' = ' + ScriptFaceDateTime(VipArg(Num))
}

function RetDateTime(Num : word): string;
{
  RetDateTime := '  return ' + ScriptFaceDateTime(VipArg(Num))
}

#end

VipInterface AnalyticsAndRole                implements oGalScriptStdF #Licensed_Free;
VipInterface AvansMCJS                       implements oGalScriptStdF #Licensed_Free;
VipInterface BaseDocDebtsJS                  implements oGalScriptStdF #Licensed_Free;
VipInterface CheckPlanMoveOperationFromDocJS implements oGalScriptStdF #Licensed_Free;
VipInterface CurRestAndReserv                implements oGalScriptStdF #Licensed_Free;
VipInterface DialogsJS                       implements oGalScriptStdF #Licensed_Free;
VipInterface EnvironmentJS                   implements oGalScriptStdF #Licensed_Free;
VipInterface FactViaOper                     implements oGalScriptStdF #Licensed_Free;
VipInterface gKonBalJS                       implements oGalScriptStdF #Licensed_Free;
VipInterface iFuncSpMnPl                     implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_AlgFldSys                   implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_DescrScript                 implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_EIXML                       implements oGalScriptStdF #Licensed_Free;
#ifndef Gal8_1
VipInterface iJS_ExpImpXML                   implements oGalScriptStdF #Licensed_Free;
#endif
VipInterface iJS_Katalog                     implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_KitFuncs                    implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_Marker                      implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_MarshKart                   implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_Plan                        implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_ProtokolXML                 implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_RsvOper                     implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_RunAlg                      implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_WOMove                      implements oGalScriptStdF #Licensed_Free;
VipInterface iSFMONEY                        implements oGalScriptStdF #Licensed_Free;
VipInterface JS_Budget                       implements oGalScriptStdF #Licensed_Free;
VipInterface JS_SaldoOborot                  implements oGalScriptStdF #Licensed_Free;
VipInterface JS_ExClass                      implements oGalScriptStdF #Licensed_Free;
VipInterface JS_DeleteSpObjAcc               implements oGalScriptStdF #Licensed_Free;
VipInterface JS_KatOrgDescr                  implements oGalScriptStdF #Licensed_Free;
VipInterface JS_ObjRem                       implements oGalScriptStdF #Licensed_Free;
VipInterface JS_Quality                      implements oGalScriptStdF #Licensed_Free;
#ifdef __TranspGPS__
VipInterface JS_GPSTransp                    implements oGalScriptStdF #Licensed_Free;
#endif
VipInterface JS_VarNameMCU                   implements oGalScriptStdF #Licensed_Free;
VipInterface LastSklOrderPriceJS             implements oGalScriptStdF #Licensed_Free;
VipInterface MCMoveJS                        implements oGalScriptStdF #Licensed_Free;
VipInterface MCPlanMoveJS                    implements oGalScriptStdF #Licensed_Free;
VipInterface MessageAndVisual                implements oGalScriptStdF #Licensed_Free;
VipInterface PlanPeriodFilterJS              implements oGalScriptStdF #Licensed_Free;
VipInterface ReklFuncJS                      implements oGalScriptStdF #Licensed_Free;
VipInterface RemainOnHand                    implements oGalScriptStdF #Licensed_Free;
VipInterface RltTmpJS                        implements oGalScriptStdF #Licensed_Free;
VipInterface ScriptRunJS                     implements oGalScriptStdF #Licensed_Free;
VipInterface StdGalDateJS                    implements oGalScriptStdF #Licensed_Free;
VipInterface StdGalDateTimeJS                implements oGalScriptStdF #Licensed_Free;
VipInterface StdGalTimeJS                    implements oGalScriptStdF #Licensed_Free;
VipInterface StdObjectConst                  implements oGalScriptStdF #Licensed_Free;
VipInterface UnitsOfMeasure                  implements oGalScriptStdF #Licensed_Free;
VipInterface ValuteJS                        implements oGalScriptStdF #Licensed_Free;
VipInterface WorkWithDsk                     implements oGalScriptStdF #Licensed_Free;
VipInterface WorkWihtTrZak                   implements oGalScriptStdF #Licensed_Free;
VipInterface iEnvironmentExJS                implements oGalScriptStdF #Licensed_Free;
VipInterface JS_UKSPlan                      implements oGalScriptStdF #Licensed_Free;
VipInterface JS_Reglament                    Implements oGalScriptStdF #Licensed_Free;
VipInterface JS_XLTRepBuild                  Implements oGalScriptStdF #Licensed_Free;
VipInterface JS_Graf                         implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_KPN                         implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_DEI                         implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_TCVReCalc                   implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_Tune                        implements oGalScriptStdF #Licensed_Free;
VipInterface JS_DirectSQL                    implements oGalScriptStdF #Licensed_Free;
VipInterface JS_Atl                          implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_LinkSpSoprWithSpMnPl        implements oGalScriptStdF #Licensed_Free;
VipInterface JS_CreateOrders                 implements oGalScriptStdF #Licensed_Free;
VipInterface JS_Sopr                         implements oGalScriptStdF #Licensed_Free;
VipInterface JS_UksStore                     implements oGalScriptStdF #Licensed_Free;
VipInterface JS_ActICN                       implements oGalScriptStdF #Licensed_Free;
VipInterface JS_OstCU                        implements oGalScriptStdF #Licensed_Free;
VipInterface JS_WrkFond                      implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_DO                          implements oGalScriptStdF #Licensed_Free;
VipInterface iJS_SendMail                    implements oGalScriptStdF #Licensed_Free;

#include JS_NIOKR.vih
#include JS_Realting.vih

#endif  // __oGalScriptStdF__
