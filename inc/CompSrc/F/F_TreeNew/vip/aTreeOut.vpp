//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 5.80 - модуль "Платежный календарь"
// Описание элементов для построителя деревьев
//------------------------------------------------------------------------------

#ifndef __aTreeOut__
#define __aTreeOut__

#ifdef ComponentVersion
#component "F_TreeNEW"
#end

//******************************************************************************
#include ofpdef.vpp //__OFP_-defines

//******************************************************************************
// таблица для хранения всех названий уровней
Table struct sTreeNames
(
  nRec    : comp,
  Code    : word, // номер отчета
  Name    : s250, //string[80]   // название уровня
  wFlags  : word, // флаги cgTreeFlag_ - костанты
  isKau   : word, // для поиска перед тем, как добавить
  wTable  : word, //
  cTable  : comp  //
)
with index
(
  byNRec = nRec(unique, surrogate),
  byName = Code + Name,
  byTable = Code + isKau + wTable + cTable
);
//******************************************************************************
// суммы дерева
Table struct sTreeSums
(
  cRec     : comp,       // cTempDescr
  Npp      : word,       // N сумм
  cVal     : comp,       // для aTreeSee.vip
  Sum      : array [0..25] of double // cgTreeNew_SumBeg..cgTreeNew_SumMax
)
with index
(
  byGroup = cRec + Npp
);
//******************************************************************************
// структура дерева
Table struct sTempDescr
(
  nRec     : comp,      // nRec
  RecType  : word,      // пока не помню
  cRec     : comp,      // запись, которую привязываем
  Param    : longint,   // для дополнительной подцепки
  dDoc     : date,      // хранить что-нибудь, напр. дату
  Code     : word,      // номер иерархии (м б несколько одновременно)
  cGroup   : comp,      // вышестоящий
  isLeaf   : word,      // 1 - лист, 0 - узел
  Level    : word,      // номер уровня (подряд)
  Level1   : word,      // номер группировки (=номер нераскрытого уровня)
  Level11  : word,      // уровень = 0 (для раскрытого КАУ =0..numKauLevels
                        // 0-нижний, 1-его группа, 2-ее группа и т.д.)
  TipSch   : word,      // активный/пассивный/активно-пассивный
  wTable   : word,      // код таблицы
  cTable   : comp,      // ссылка на таблицу
  isKau    : word,      // таблица - КАУ (имя - GetAnyKau)
  isIer    : word,      // таблица иерархически раскрыв-мая
  isOpened : word,      // (открытый уровень КАУ)
  wFlags   : word,      // флаги cgTreeFlag_ - костанты
  cName    : comp,      // ссылка на название уровня
  SortName : TName      // 72 + 81 = 153 байта
)
with index
(
  byNRec     = nRec (Unique, Surrogate),          //   8
  bySortName = Code + cGroup + isLeaf + SortName, // 104
  byLevel    = Code + isLeaf + Level,             //  12
!  byNGroup   = Code + isLeaf + Level1 + Level11,
!  byNGroup   = Code + isOpened + Level1,
  byNGroup   = Code + Level11 + Level1,
!!!!!                  !!!
  bycRec     = Code + RecType + cRec + isLeaf,              //  16 для перехода на новую ветку

  byName     = Code + cGroup + cName,             //  20
  byTable    = Code + isOpened + isKau + wTable + cTable, // 24
  byParam    = Code + isOpened + Param            //  12
  , byParamLevel   = Code + Param + Level           //  12
// cGroup + cTable
);                                                // 196 + 153 = 349
//******************************************************************************
// привязка к документам
Table struct sTempIer
(
  Code     : word, // для удаления
  RecType  : word,
  cRec     : comp,
  cRecDs   : comp,
  cGroup   : comp,
  Level    : word,      // номер уровня
  SortName : TName //string[80] // 28 + 81 = 109
)
with index
(
  byCode  = Code,
  byRecDs = cGroup + cRecDs,
  byRecDs1 = cRecDs+ Level,  // 28 + 109 = 137
  bySort  = cGroup + SortName,
  byCRec = cGroup + cRec
);

//******************************************************************************
// описание текущей записи, по кот. строится дерево
type TStructOut = record
  RecType  : word;                      // тип записи
  cRec     : comp;                      // описание записи (доп.поля)
  SortName : TName; //string[80];                // строка для сортировки
  NameLeaf : TName; //string[80];
  Param    : longint;                   // произвольный параметр отчета
  dDoc     : date;                      // хранить что-нибудь, напр. дату
  NumLevels: word;                      // число уровней
  NoLeaf   : word;                      // показывать лист
  SumsNpp  : word;                      // N сумм (sTreeSums)
//  cSums    : comp;                      // суммы записи
//  NumSums  : word;                      // число сумм
  TipSch   : word;                      // тип счета (для аналитических отчетов)
end;

type TPTreeSums = record as Table sTreeSums with x$position;

//******************************************************************************
#end //__aTreeOut__
