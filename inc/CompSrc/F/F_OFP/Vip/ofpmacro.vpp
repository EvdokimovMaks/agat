//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 5.80 - модуль "Платежный календарь"
// макросы компилятора
// включен в ofptypes.vpp
//------------------------------------------------------------------------------

#ifndef __ofpmacro_vpp__
#define __ofpmacro_vpp__

//------------------------------------------------------------------------------
// LOG
//------------------------------------------------------------------------------
#undef Var
#declare Var(_Var)
''#13''+' #_Var='+string(#_Var)
#end //Var
//------------------------------------------------------------------------------
#declare mNRec(_nRec)
  '(nRec = '+string(#_nRec)+')'
#end

// для каталогов
#declare mPickShowAt
  Show at (,,90,22)
#end

// для выбора алгоритмов
#declare mPickBrShowAt
  Show at (,,,13)
#end

// для документов
#declare mDocShowAt
  Show at (,,115,31)
#end

#declare mDocBrowseShowAt
  Show at (,,,22);
#end

#declare mDocTabbedSheetShowAt
  Show at (,23,,);
#end

#declare mDocScreenShowAtFix
  Show at (,,,22) Fixed_Y;
#end

// для интерфейсов настроек
#declare mNastrShowAt
  Show at (,,120,28)
#end

// для параметров настроек алгоритмов
#declare mParNastrShowAt
  Show at (,,75,6)
#end

#UnDef mMasterWindow
#declare mMasterWindow
#end

#declare mBindEmbeddedInterface(_scrName,_piVar,_winName)
{
  if (not NullVipRef(#_piVar))
  {
    if not BindEmbeddedInterface(#_scrName, #_piVar, #_winName)
      message(''#3'Окно' + #_winName + ' не встроилось в интерфейс');
  }
  else
    message('BindInterface NullVipRef!!! #_piVar');
}
#end

#ifdef __Ofp_TestUnLoad__
// для cmOnVipLoad
#declare mOnVipLoad(_interf,_step=0)
{
  if (#_step = 0)
    fplog('    загружена библиотека '+#_interf+' (cmOnVipLoad)')
  else
    fplog('  загружается библиотека '+#_interf+' (cmOnVipLoad)'
          + ', шаг '+string(#_step));
}
#end
#declare mOnVipUnLoad(_interf,_step=0)
{
  if (#_step = 0)
    fplog('    выгружена библиотека '+#_interf+' (cmOnVipUnLoad)')
  else
    fplog('  выгружается библиотека '+#_interf+' (cmOnVipUnLoad)'
          + ', шаг '+string(#_step));
}
#end
#else//__Ofp_TestUnLoad__
#declare mOnVipLoad(_interf,_step=0)
{
}
#end

#declare mOnVipUnLoad(_interf,_step=0)
{
}
#end
#end //__Ofp_TestUnLoad__

#declare mLoadVipRef(_var,_interf)
{
  if (NullVipRef(#_var))
   if not LoadVipRef(#_var, #_interf)
   {
     Message(''#3'Ошибка загрузки библиотеки '+#_interf+'!',CancelButton);
     Exit;
   }
!   else
!    fplog('Загружена библиотека '+#_interf+' (LoadVipRef)');
}
#end

#declare mGetVipRef(_var,_interf)
{
  if (NullVipRef(#_var))
   if not GetVipRef(#_var, #_interf)
   {
     Message(''#3'Ошибка загрузки библиотеки '+#_interf+'!',CancelButton);
     Exit;
   }
!   else
!     fplog('Загружена библиотека '+#_interf+' (GetVipRef)');
}
#end

#declare mGetVipRefA(_var,_interf)
{
  if (NullVipRef(#_var))
   if not GetVipRef(#_var, #_interf)
   {
     Message(''#3'Ошибка загрузки библиотеки '#_interf'!',CancelButton);
     Abort;
     Exit;
   }
!   else
!     fplog('Загружена библиотека '+#_interf+' (GetVipRefA)');
}
#end

// -----------------------------------------------------------------------------
// то же, но через переменную
#declare mGetVipRefVar(_var,_interfStr)
{
  if (NullVipRef(#_var))
   if not GetVipRef(#_var, #_interfStr)
   { Message(''#3'Ошибка загрузки библиотеки #_interfStr !',CancelButton);
     Exit;
   }
!   else
!     fplog('Загружена библиотека #_interf'+ ' (GetVipRefVar)');
}
#end

#declare mGetVipRefVarA(_var,_interfStr)
{
  if (NullVipRef(#_var))
   if not GetVipRef(#_var, #_interfStr)
   {
     Message(''#3'Ошибка загрузки библиотеки #_interfStr !',CancelButton);
     Abort;
     Exit;
   }
!   else
!     fplog('Загружена библиотека #_interf'+ ' (GetVipRefVarA)');
}
#end
//!!DEL - заменить на mFreeVipRef <- использовать
#declare mFreeVipInterface(_var)
{
  if (not NullVipRef(#_var))
  {
    FreeVipInterface(#_var);
!    ('Выгружена библиотека #_var'+ ' (FreeVipInterface)');
  }
!  else
!    fplog('Библиотека #_var уже была выгружена'+ ' (FreeVipInterface)');
}
#end

#declare mFreeVipRef(_var)
{
  if (not NullVipRef(#_var))
  {
    FreeVipInterface(#_var);
!    fplog('Выгружена библиотека #_var'+ ' (FreeVipInterface)');
  }
!  else
!    fplog('Библиотека #_var уже была выгружена'+ ' (FreeVipInterface)');
}
#end

//------------------------------------------------------------------------------
#undef mUnBindInterface
#declare mUnBindInterface(_IDPanel,_var)
{
  if (not NullVipRef(#_var))
  {
    UnBindEmbeddedInterface(#_IDPanel);
  }
  else
  {
    //FpLog('UnBindInterface NullVipRef!!! #_var');
  }
}
#end //mUnBindInterface

//------------------------------------------------------------------------------
#undef mBindEvent
#declare mBindEvent(_MainFun,_SlaveFun,_var)
{
  if (not NullVipRef(#_var))
  {
    BindEvent(#_MainFun, #_var.#_SlaveFun);
  }
  else
  {
    Message('BindEvent NullVipRef!!! #_var');
  }
}
#end //mBindEvent

//------------------------------------------------------------------------------
#undef mUnBindEvent
#declare mUnBindEvent(_MainFun,_SlaveFun,_var)
{
  if (not NullVipRef(#_var))
  {
    UnBindEvent(#_MainFun, #_var.#_SlaveFun);
  }
  else
  {
    //FpLog('UnBindEvent NullVipRef!!! #_var');
  }
}
#end //mUnBindEvent

// -----------------------------------------------------------------------------
#undef mFreeCrossVipRef
#declare mFreeCrossVipRef(_var)
  {
    if (not NullVipRef(#_var))
    {
      #(_var).FreeCrossVipRef;
      FreeVipInterface(#_var);
    }
  }
#end

// -----------------------------------------------------------------------------
// не использовать!!! - см.ниже - новые
#declare mes_insert(_Table)
   message(''#3'Ошибка при добавлении записи '+
               'в таблицу '+ #_Table+'.', error)
#end

#declare mes_update(_Table)
   message(''#3'Ошибка при обновлении записи '+
               'в таблице '+ #_Table+'.', error)
#end

#declare mes_delete(_Table)
   message(''#3'Ошибка при удалении записи '+
               'в таблице '+ #_Table+'.', error)
#end

#declare mes_GetFirst(_Table)
   message(''#3'Ошибка при позиционировании '+
               'в таблице '+ #_Table+'.', error)
#end

// -----------------------------------------------------------------------------
// новые
#declare mInsertMessage(_Table)
   message(''#3'Ошибка при добавлении записи '+
               'в таблицу '+ #_Table+'.', error)
#end

#declare mUpdateMessage(_Table,_nrec)
   message(''#3'Ошибка при обновлении записи '+
        ''#3#13'в таблице '+ #_Table +
        ''#3#13'(nRec = '+string(#_nrec)+').', error)
#end

#declare mDeleteMessage(_Table,_nrec)
   message(''#3'Ошибка при удалении записи '+
        ''#3#13'в таблице '+ #_Table +
        ''#3#13'(nRec = '+string(#_nrec)+').', error)
#end

#declare mMesGetFirst(_Table,_nrec)
   message(''#3'Ошибка при позиционировании '+
        ''#3#13'в таблице '+ #_Table +
        ''#3#13'(nRec = '+string(#_nrec)+').', error)
#end

// -----------------------------------------------------------------------------
// чтение настройки (надо объявить isError)
#declare mReadMyDsk(_Value,_ValueStr,_ValueDef)
{
  var isError: boolean;
  if (not ReadMyDsk(#_Value,#_ValueStr,isError))
    #_Value := #_ValueDef;
}
#end

#declare mSaveMyDsk(_Value,_ValueStr)
{
  SaveMyDsk(#_Value, #_ValueStr);
}
#end

//////////////////////// РАБОТА С ВАЛЮТОЙ //////////////////////////////////////
// симол валюты
#declare mSimvolV(_Table,_SimvolV)
  if (isValid(#_Table), #_SimvolV, sGetTune('NDE.SIMVRUB'))
#end

// символ НДЕ или валюты
#declare mValSimV(_TiDkGal, _cVal, _SimvolV)
  if (isPlatDoc(#_TiDkGal),
    if (isValutDoc(#_TiDkGal), #_SimvolV, sGetTune('NDE.SIMVRUB')),
      if (#_cVal = 0, sGetTune('NDE.SIMVRUB'), #_SimvolV))
#end

// сумма в НДЕ или валюте
#declare mSummaByVal(_TiDkGal, _cVal, _sumNDE, _sumVal)
  if (isPlatDoc(#_TiDkGal),
    if (isValutDoc(#_TiDkGal), #_sumVal, #_sumNDE),
      if (#_cVal = 0, #_sumNDE, #_sumVal))
#end

// валюта операции
#declare mValutDoc(_TiDkGal, _cVal)
  if (isPlatDoc(#_TiDkGal), if(isValutDoc(#_TiDkGal), #_cVal, 0), #_cVal)
#end

// операция в НДЕ или валюте
#declare mIsValutDoc(_TiDkGal, _cVal)
  if (isPlatDoc(#_TiDkGal), isValutDoc(#_TiDkGal), #_cVal <> 0)
#end

// пометка выбранных записей
#declare mPickRecord(_marker,_found,_error)
    if (SearchMarker(#_marker,#_found,#_error) = True, ccMARK,''),
#end

////////////////////////////////////////////////////////////////////////////////
// поле-маска, N бита, поле для отображения
#declare mFieldViewFilter(_maska,_bitN,_field)
{
  if isBit( #_maska, #_bitN - 1 )
     SetFieldState  (#_field, sfVisible);
  else
     ClearFieldState(#_field, sfVisible);
}
#end

// -----------------------------------------------------------------------------
#declare mFieldViewFilterLong(_maska,_bitN,_field)
{
  if LisBit( #_maska, #_bitN - 1 )
     SetFieldState  (#_field, sfVisible);
  else
     ClearFieldState(#_field, sfVisible);
}
#end

// -----------------------------------------------------------------------------
// то же, но _Field - номер поля, а не название
#declare mFieldViewFilterF(_maska,_bitN,_field)
{
  if isBit(#_maska, #_bitN)
     SetFieldState  (#_field, sfVisible);
  else
     ClearFieldState(#_field, sfVisible);
}
#end

// -----------------------------------------------------------------------------
#declare mFieldViewFilterFLong(_maska,_bitN,_field)
{
  if LisBit(#_maska, #_bitN)
     SetFieldState  (#_field, sfVisible);
  else
     ClearFieldState(#_field, sfVisible);
}
#end

// -----------------------------------------------------------------------------
#declare mFieldSelFilter(_maska,_bitN,_field)
{
  if isFlagWord( #_maska, #_bitN)
    SetFieldOption( fn#_field, ofSelectAble);
  else
    ClearFieldOption( fn#_field, ofSelectAble);
}
#end

// -----------------------------------------------------------------------------
#declare mFieldSelFilterLong(_maska,_bitN,_field)
{
  if isFlagLong( #_maska, #_bitN)
    SetFieldOption( fn#_field, ofSelectAble);
  else
    ClearFieldOption( fn#_field, ofSelectAble);
}
#end

// -----------------------------------------------------------------------------
#declare mFieldSelFilterF(_maska,_bitN,_field)
{
  if isBit( #_maska, #_bitN)
    SetFieldOption( #_field, ofSelectAble);
  else
    ClearFieldOption( #_field, ofSelectAble);
}
#end

// -----------------------------------------------------------------------------
#declare mFieldSelFilterFLong(_maska,_bitN,_field)
{
  if LisBit( #_maska, #_bitN)
    SetFieldOption( #_field, ofSelectAble);
  else
    ClearFieldOption( #_field, ofSelectAble);
}
#end

// -----------------------------------------------------------------------------
#declare mFieldViewFilterDual(_maska,_bitN,_maska_1,_bitN_1,_field)
{
  if   isBit(#_maska, #_bitN)
    or isBit(#_maska_1, #_bitN_1)
     SetFieldState  (#_field, sfVisible);
  else
     ClearFieldState(#_field, sfVisible);
}
#end

// -----------------------------------------------------------------------------
// инвертировать в маске num бит n1  (не тестировано)
#declare mFieldInvert( _maska, _bitN)
{
  #_maska := #_maska xor ( Word(1) shl #_bitN);
}
#end

// -----------------------------------------------------------------------------
// изменившиеся только
#declare mFieldViewChange(_maska,_maskaOld,_bitN,_field)
{
  if isBit(#_maska, #_bitN) xor isBit(#_maskaOld, #_bitN)
   if isBit(#_maska, #_bitN)
      SetFieldState(fn#_field, sfVisible);
   else
      ClearFieldState(fn#_field, sfVisible);
}
#end

// изменилась маска или условие
#declare mFieldViewChangeIf(_maska,_maskaOld,_bitN,_field,_condition,_conditionOld)
{
  if (isBit(#_maska, #_bitN) and (#_condition)) xor
     (isBit(#_maskaOld, #_bitN) and (#_conditionOld))

   if isBit(#_maska, #_bitN) and #_condition
      SetFieldState(fn#_field, sfVisible);
   else
      ClearFieldState(fn#_field, sfVisible);
}
#end

// отображение поля
#declare mFieldView(_field,_view)
{
  if #_view
     SetFieldState  (#_field, sfVisible);
  else
     ClearFieldState(#_field, sfVisible);
}
#end

// то же самое
#declare mFieldVisible(_field,_view)
{
  if #_view
     SetFieldState  (#_field, sfVisible);
  else
     ClearFieldState(#_field, sfVisible);
}
#end

#declare mFieldSelecTable(_field,_view)
{
  if #_view
     SetFieldOption(#_field, ofSelecTable);
  else
     ClearFieldOption(#_field, ofSelecTable);
}
#end

#declare mFieldProtected(_field,_protected)
{
  if #_Protected
     SetFieldOption(#_field, ofProtected);
  else
     ClearFieldOption(#_field, ofProtected);
}
#end

#declare mProtectedPos(_maska,_bitN,_wTarget,_Pos)
{
  if isFlagWord( #_maska, #_bitN)
    ClusterDisabledField(#_wTarget,#_Pos)
}
#end

#declare mCheckError(_FieldOld,_FieldNew,_wasAnyError,_wasError)
{
  if (#_FieldOld <> #_FieldNew)
  {
     #_wasAnyError := True;
     #_wasError := True;
  }
  else
     #_wasError := False;
}
#end

////////////////////////////////////////////////////////////////////////////////
#declare mAddBounds(_bound)
{
  if not BoundActive(#_bound)
    AddBounds(#_bound);
}
#end

#declare mSubBounds(_bound)
{
  if BoundActive(#_bound)
    SubBounds(#_bound);
}
#end

//>>
#declare mConditionsByCond( _Condi, _ActCond)  // Активация фильтра по условию
{
  if not ConditionActive( #_Condi)             // Фильтр не активирован
  {
    if #_ActCond                           // .. но надо активировать
    {
      PushCondition( #_Condi);
    }
  }
  else
  {                                     // Фильтр активирован
    if not #_ActCond                    // .. а нужно снять
    {
      PopCondition( #_Condi);
    }
  }
}
#end
//<<

#declare mBoundsByCond( _bound, _ActCond)  // Активация фильтра по условию
{
  if not BoundActive( #_bound)             // Фильтр не активирован
  {
    if #_ActCond                           // .. но надо активировать
    {
      AddBounds( #_bound);
    }
  }
  else
  {                                     // Фильтр активирован
    if not #_ActCond                    // .. а нужно снять
    {
      SubBounds( #_bound);
    }
  }
}
#end

#declare mFilterCheckBound(_maska,_bitN,_bound)
{
  if isBit(#_maska, #_bitN)
  {
    if not BoundActive(#_bound)
      AddBounds(#_bound);
  }
  else
  {
    if BoundActive(#_bound)
      SubBounds(#_bound);
  }
}
#end

#declare mFilterCheckBoundLong(_maska,_bitN,_bound)
{
  if LisBit(#_maska, #_bitN)
  {
    if not BoundActive(#_bound)
      AddBounds(#_bound);
  }
  else
  {
    if BoundActive(#_bound)
      SubBounds(#_bound);
  }
}
#end

#declare mFilterCheckBoundCond(_maska,_bitN,_bound,_cond)
{
  if (isBit(#_maska, #_bitN) and #_cond)
  {
    if not BoundActive(#_bound)
      AddBounds(#_bound);
  }
  else
  {
    if BoundActive(#_bound)
      SubBounds(#_bound);
  }
}
#end

#declare mFilterCheckBoundCondLong(_maska,_bitN,_bound,_cond)
{
  if (LisBit(#_maska, #_bitN) and #_cond)
  {
    if not BoundActive(#_bound)
      AddBounds(#_bound);
  }
  else
  {
    if BoundActive(#_bound)
      SubBounds(#_bound);
  }
}
#end

#declare mFilterCheckCondn( _maska, _bitN, _condn)
{
  if isBit( #_maska, #_bitN)
  {
    if not ConditionActive( #_condn)
      PushCondition( #_condn);
  }
  else
  {
    if ConditionActive( #_condn)
      PopCondition( #_condn);
  }
}
#end

#declare mFilterCheckCondnLong( _maska, _bitN, _condn)
{
  if LisBit( #_maska, #_bitN)
  {
    if not ConditionActive( #_condn)
      PushCondition( #_condn);
  }
  else
  {
    if ConditionActive( #_condn)
      PopCondition( #_condn);
  }
}
#end

#declare mFilterCheckCondnForLeave( _maska, _bitN, _condn, _Table)
{
  if isBit( #_maska, #_bitN)
  {
    if not ConditionActiveInLeave( #_condn, #_Table )
      PushConditionForLeave( #_condn, #_Table );
  }
  else
  {
    if ConditionActiveInLeave( #_condn, #_Table )
      PopConditionForLeave( #_condn, #_Table );
  }
}
#end

#declare mFilterCheckCondnForLeaveLong( _maska, _bitN, _condn, _Table)
{
  if LisBit( #_maska, #_bitN)
  {
    if not ConditionActiveInLeave( #_condn, #_Table )
      PushConditionForLeave( #_condn, #_Table );
  }
  else
  {
    if ConditionActiveInLeave( #_condn, #_Table )
      PopConditionForLeave( #_condn, #_Table );
  }
}
#end

// -----------------------------------------------------------------------------
// соответствие моих команд и системных (для cmHotKeys)
#declare mCommandCheck(_comMy,_comSys)
{
  if #_comMy
    EnableCommand( #_comSys);
  else
    DisableCommand( #_comSys);
}
#end

////////////////////////////////////////////////////////////////////////////////
// позиция перед множ.удалением записи
#declare mPosGetForDelete(_Table,_curRec,_newRec)
{
  #_curRec := #_Table.nRec;
  if getnext #_Table = tsOk
  {
     #_newRec := #_Table.nRec;
     if getprev #_Table <> tsOk {} // вернемся
  }
  else
    #_newRec := 0;
}
#end

// спозиционируемся на следующую запись
#declare mPosSetForDelete(_Table,_curRec,_newRec)
{
  if getfirst #_Table where ((#_curRec == #_table.nRec)) <> tsOk
   if getfirst #_Table where ((#_newRec == #_table.nRec)) <> tsOk
    if getlast #_Table <> tsOk {};
}
#end

// позиция перед множ.удалением записи
#declare mPosGetForDeleteTree(_tree,_Table,_curRec,_newRec,_cGroup)
{
  #_curRec := #_Table.cRecDs;
  #_cGroup := #_Table.cGroup;
  if getnext #_Table = tsOk
//  if TreeGetNext(_tree)
  {
     #_newRec := #_Table.cRecDs;
     if getprev #_Table <> tsOk {}
//     if not TreeGetNext(_tree) {} // вернемся
  }
  else
    #_newRec := 0;
}
#end

// спозиционируемся на следующую запись
#declare mPosSetForDeleteTree(_tree,_Table,_curRec,_newRec,_cGroup)
{
  if getfirst #_Table where ((
        #_cGroup == #_Table.cGroup and
        #_curRec == #_Table.cRecDs
                            )) <> tsOk
   if getfirst #_Table where ((
        #_cGroup == #_Table.cGroup and
        #_newRec == #_Table.cRecDs
                            )) <> tsOk
    if getlast #_Table <> tsOk
      // значит, всю группу удалили были - перейдем на другую
      if TreeGetNext(#_tree)
        if getfirst #_Table <> tsOk
        {};
}
#end

////////////////////////////////////////////////////////////////////////////////
// для панелей основного окна
#declare mSetStatus(_Browser,_status)
  SetHelpAndStatusContext(#_Browser,-1,#_status, hcKeepCurrent)
#end

#declare mSetHelp(_Browser,_help)
  SetHelpAndStatusContext(#_Browser,-1,-1,#_help)
#end

// то же для полей
#declare mFieldSetStatus(_Browser,_field,_status)
  SetHelpAndStatusContext(#_Browser,#_Field,#_status, hcKeepCurrent)
#end

#declare mFieldSetHelp(_Browser,_field,_help)
  SetHelpAndStatusContext(#_Browser,#_Field,-1,#_help)
#end

// -----------------------------------------------------------------------------
#declare mToFile(s)
{
  LogStrToFile('MyLog.txt', '====================== Дата: '+Cur_Date+' время: '+Cur_Time);
  LogStrToFile('MyLog.txt', #s)
}
#end

#declare mSetFilter(_cFilter,_bound)
{
  if BoundActive(#_bound) SubBounds(#_bound);
  if #_cFilter <> 0       AddBounds(#_bound);
}
#end

#declare mResetFilter(_bound)
{
  SubBounds(#_bound);
}
#end

#declare mFontName(_Name)
{Font = {BackColor = if(trim(#_Name)='',ColorNeed,0)}}
#end

#declare mFontRec(_Rec)
{Font = {BackColor = if(#_Rec=0,ColorNeed,0)}}
#end

#declare mFontDate(_date)
{Font = {BackColor = if(longint(#_date)=0,ColorNeed,0)}}
#end

// _canZero2 - вторая дата м б нулевой
#declare mFontPeriod(_date1,_date2,_canZero2=True)
{Font = {BackColor = if((((longint(#_date2) <> 0) or (not #_canZero2)) and (#_date1 > #_date2)),ColorError,0)}}
#end

// _canZero2 - вторая строка м б нулевой
#declare mFontDiapasonStr(Str_Beg,Str_End,_canZero2=True)
{Font = {BackColor = if((((trim(#Str_End) <> '') or (not #_canZero2)) and (#Str_Beg > #Str_End)),ColorError,0)}}
#end

#declare mFontSumma(_Summa)
{Font = {BackColor = if(#_Summa=0,ColorNeed,0)}}
#end

// _canZero2 - вторая сумма м б нулевой
#declare mFontDiapasonSum(Sum_Begin,Sum_End,_canZero2=True)
{Font = {BackColor = if((((abs(#Sum_End) > cgDefPrecision) or (not #_canZero2)) and (#Sum_Begin-#Sum_End) >= cgDefPrecision),ColorError,0)}}
#end

// '=' для double
#declare mIsDoubleZero(_sum1)
  (abs(#_sum1) < cgDefPrecision)
#end
// '=' для double
#declare mAreDoubleEqual(_sum1,_sum2)
  (abs(#_sum1 - #_sum2) < cgDefPrecision)
#end
// '>' для double
#declare mIsDoubleGreater(_sum1,_sum2)
  ((#_sum1 - #_sum2) >= cgDefPrecision)
#end
// '<' для double
#declare mIsDoubleLess(_sum1,_sum2)
  ((#_sum1 - #_sum2) <= (-cgDefPrecision))
#end
// '<=' для double
#declare mIsDoubleLorE(_sum1,_sum2)
  ((#_sum1 - #_sum2) < cgDefPrecision)
#end
// '>=' для double
#declare mIsDoubleGorE(_sum1,_sum2)
  ((#_sum1 - #_sum2) > (-cgDefPrecision))
#end
// _sum in [_min.._max]
#declare mIsDoubleInDiapason(_sum,_min,_max)
  ((#_sum > (#_min - cgDefPrecision)) and (#_sum < (#_max + cgDefPrecision)))
#end

// возвращает минимальное из чисел
#declare mMin(_sum1,_sum2)
  if (#_sum1 <= #_sum2, #_sum1, #_sum2)
#end
#declare mMax(_sum1,_sum2)
  if (#_sum1 >= #_sum2, #_sum1, #_sum2)
#end

// -----------------------------------------------------------------------------
// для логов

// выводим строчку только в режиме тестирования
#ifdef __TEST__
#declare mTest(_str)
{
  fplog(#_str);
}
#end
#else
#declare mTest(_str)
{
}
#end
#end //__TEST__

#declare dlog(_str)
  fplog('#__FILE__(#__LINE__) - ' + #_str);
#end


#Declare mListMarker(_lAdr,_tType)
Var _wasBreak_ : Boolean;
_wasBreak_  := False;

Var _tRec : #_tType;

Var _Max: word;
_Max    := GetMarkerCount( #_lAdr);

StartNewVisual( vtIndicatorVisual
              , vfTimer+vfBreak+vfConfirm
              , 'Идет разгрузка маркера'
              , _Max);

while GetMarker( #_lAdr, _Max - 1, _tRec)
{
  if (not nNextVisual( _Max))
  {
    _wasBreak_ := True;
    break;
  }
  FpLog('N '+String(_Max)+' - '+String(_tRec)+' ; ');
  // ..
   Dec( _Max);
}

StopVisual('',0);
#end //'mListMarker

// сумма в соответствии с направлением
#declare mSumByDir(_Summa,_direct)
  if (#_direct = dirPRIHOD, #_Summa, -(#_Summa))
#end
// то же - в виде строки
#declare mStrSumByDir(_Summa,_direct)
  if (#_direct = cgDirPrihod,'+','-') + string(abs(#_Summa))
#end
// если сумма меньше 0, возвращает 0 (чтобы была не меньше 0)
#declare mSumAboveZero(_summa)
  if (#_summa < 0, 0, #_summa)
#end
// направление по знаку суммы
#declare mDirBySumma(_summa)
  if (#_summa < 0, cgDirRashod, cgDirPrihod)
#end
// противоположное направление
#declare mDirOpposite(_dir)
  if (#_dir=cgDirPrihod, cgDirRashod, if (#_dir=cgDirRashod, cgDirPrihod, #_dir))
#end

// установлен ли флаг (1..n) 0 - хотя бы один (ofpflag.vpp - то же)
#declare mIsFlag(_flags,_n)
  if (#_n = 0, (#_flags <> 0), (((#_flags shr (#_n - 1)) and word(1)) = 1))
#end


#declare mTableFieldFill(_retValue,_crec,_table,_field,_default)
{
  if getfirst #_Table where ((#_crec == #_table.nRec)) = tsOk
    #_retValue := #_Table.#_Field;
  else
    #_retValue := #_default;
}
#end

#declare mTableField(_cRec,_table,_field,_default)
  if (getfirst #_Table where ((#_crec == #_table.nRec)) = tsOk,
   #_Table.#_Field, #_default)
#end

// первую букву строки - заглавной
#declare mStrFirstUpper(_s)
  upcase(substr(#_s,1,1))+locase(substr(#_s,2,254))
#end

#declare mTSummaNdeSign
   '\2p[|-]36`666`666`666`667.88'
#end

// стандартизация - статус-линия дескриптора
#declare mDesCr_stat_line
'Дескриптор(идентификатор) пользователя'
#end

// стандартизация - статус-линия дескриптора
#declare mDes_stat_line
'Дескриптор(идентификатор)/код группы пользователей'
#end

// стандартизация - статус-линия дескриптора
#declare mDesGr_stat_line
'Код группы пользователей'
#end

// процент от общей суммы
#declare mPercent(_sum,_sumFull)
  if(#_sumFull=0,0,#_sum/#_sumFull*100)
#end

// сумма, как процент (1..100) от общей суммы
#declare mSummaByPercent(_sumFull,_percent)
  (#_sumFull*(#_percent*0.01))
#end

// форматирование суммы перед выводом на экран
#declare mTSumma(_summa)
  Round(#_summa, 8)
#end

// округление до сотых, если погрешность мала
#declare mTSummaR(_summa)
  if(abs(Round(#_summa, 2) - Round(#_summa, 8)) < 0.0001,
  Round(#_summa, 2),
  Round(#_summa, 8))
#end

#declare NoDocFOp
 CourseFrom
#end
#end //__ofpmacro_vpp__
