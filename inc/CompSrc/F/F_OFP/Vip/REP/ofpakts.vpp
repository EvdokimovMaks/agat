//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 5.80 - модуль "Платежный календарь"
// Реестр фин.обязательств - настройка
//------------------------------------------------------------------------------

#include ofptypes.vpp

//!!D убрать отсюда построение
#ifndef _OFPJSET_
  #include aAktTrTmp.vih // iAktTrTmp
#end //_OFPJSET_

#ifdef  ComponentVersion
#include fptodo.vih // Run интерфейсов из fptodo.vpp
#end

#include aFunOFP.vih
#include aAktSum.vih
#include aClearin.vih
#include aTuneIer.vih
#include PicKDoc.vih   // для выбора для фильтра типов Плат.доков
#ifdef Gal9_1
#include pMarkFun.vih
#else
#include pMarkFun1.vih
#end
#include GetKau.vih    // Обьектный интерфес выбора КАУ
#include Showkau.vpp   // Declare для отображения и выбора КАУ
#include GtKauTbl.vih
#include FpPickAnMean.Vih
#include aOFPPrd.vih
#ifdef  ComponentVersion
// для вызовов ч/з RunInterface
#include xlSetUp.Vih
#endif//ComponentVersion

// -----------------------------------------------------------------------------
#ifdef _OFPJSET_
Interface OFPIerJournalSet 'Реестры финансовых обязательств' ('',hcOfpIAktReester,) EscClose, Cyan;
#else
Interface ReeAktOFP 'Реестры финансовых обязательств' ('',hcOfpIAktReester,) EscClose, Cyan;
#end

  #include  aFunOfp.var // piFunOfp
  var piTuneIer   : iTuneIer;   // функции для настройки иерархии
  #ifndef _OFPJSET_
  var piMakeAkt   : iAktTrTmp;  // построение дерева
  #end
  #include aAktSum.var
  #include aClearin.var // piClearing
  #include GetKau.var   // iGetKau
  #include pMarkFun.var // Mark2PicksFuncs

  #ifdef _OFPJSET_
  //ПАРАМЕТРЫ
  parTuneFO: TTuneFO;    // возвращаем - настройку
  #end
  rTuneFO   : TTuneFO;
  piPickDoc : ObjPickDoc;
  piOfpPrd  : iOfpPrd;

  Var isBuild : Boolean;
  _mrkFObType : LongInt;

#include FObconst.inc
Var _cRec : TnRec;
Var _wRec : Word;
Var ak_Mrk: array [1..20] of mrkRec;
Var _wTiDk: word;
Var _cUserDeskRep: TnRec;

Function UserDeskRep_GetChosenVal(_nVal: word; _cDefinedVal: comp): comp; forward;
Function UserDeskRep_GetColumnName: string; forward;

Create View vwOFPAktSet
Var
  #ifdef _OFPJSET_
  //ПАРАМЕТРЫ
  parModel : comp;       // принимаем - модель
  #end
  //ВНУТРЕННИЕ
  nReport   : word;      // номер отчета
  savUserDeskRep : comp; // сохраненный UserDeskRep

  nDateLevel: word;     // уровень, на котором дата

  fPeriodName : string; // 'Фильтр'

  ParFiltr1,
  ParFiltr2 : word;

As select
    UserDeskRep.ResComp[8] <> 0
    (FieldName = isPeriods)
  , UserDeskRep.ResName[1]
    (FieldName = GroupContent)

    #ifdef _OFPJSET_
  , if (parModel <> 0
    #else
  , if (UserDeskRep.ResComp[6] <> 0
    #end
  , if(isValid(tnOFPModel),
        OFPModel.Name + ' (за период с '+ string(OFPModel.dStart)+
        ' по '+string(OFPModel.dEnd) + ')',
        '< модель удалена >'),
        '< основное рабочее поле >')
    (FieldName = ModelName)
  , if (isValid(tnAllIndexDS), AllIndexDS.Name, '< не проведена настройка >')
    (FieldName = DiapasonSumm)
  , if (isValid(tnAllIndexCD), AllIndexCD.Name, '< не проведена настройка >')
    (FieldName = CatZadolj)
  , if (isValid(tnAllIndexPZ), AllIndexPZ.Name, '< не проведена настройка >')
    (FieldName = prcZadolj)
    // валюта
  , UserDeskRep_GetChosenVal(UserDeskRep.ResWord[6], UserDeskRep.ResComp[12])
    (FieldName = fRecValuta)
  , if (fRecValuta = 0, sGetTune('NDE.NameRublAH'), if(isValid(tnKlValTree), KlValTree.DOLLARAH, ''))
    (FieldName = fValuta)
    // фильтры
  , if (UserDeskRep.ResComp[14] <> 0, fpTPerCur.Name, '< по датам >')
    (FieldName = fPeriodT)
  , if (UserDeskRep.ResComp[8] <> 0, FpPeriodCur.Name, '< по всем периодам >')
    (FieldName = fPeriod)
  , fPeriodT + if (UserDeskRep.ResComp[8] <> 0, ' (' + fPeriod +')', '')
    (FieldName = fPeriodNameBrws)
    // ПС
  , if (UserDeskRep.ResComp[3] = 0
         , '< все платежные средства >'
         , if(UserDeskRep.ResWord[8]  = cgLicv_High
            , CashBank.Name
            , if(UserDeskRep.ResWord[4] = mtAVISO
                 , '' // вообще не отображаем
                 , if(UserDeskRep.ResWord[4] <> mtNOTDEFINED
                      , Veksl.SrDoc+'/'+Veksl.NoDoc
                      , '< все платежные средства >'))))
    (FieldName = fPlatMean)
, UserDeskRep_GetColumnName()
    (FieldName = fFieldVisible)
from
    UserDeskRep
    // фильтры
  , FpPeriod   (readonly)
  , OFPModel   (readonly)
  , CashBank   (readonly)
  , Veksl      (readonly)

  , AllIndex AllIndexDS (readonly)
  , AllIndex AllIndexCD (readonly)
  , AllIndex AllIndexPZ (readonly)
  , KlVal    KlValTree
  , fpTPer   fpTPerCur  (readonly)
  , FpPeriod FpPeriodCur(readonly)

  , RepGrLst
  , RepGrLst   RepGrLst2 // для выбора сортировки
  , PickRep
  , fpTPer

where
((
// настройка отчета
    UserName                == UserDeskRep.OwnName
and nReport                 == UserDeskRep.nRep
and UserDeskRep.ResComp[9]  == RepGrLst.nRec
and RepGrLst.nRec           == RepGrOne.cRepGrLst
and RepGrOne.cRec           == RepGroup.nRec
and RepGroup.nRec           == RepGrSrt.cRepGroup
and UserDeskRep.ResComp[19] == RepGrLst2.nRec // сортировка листьев
// фильтры
and UserDeskRep.ResComp[3]  == CashBank.NRec
and UserDeskRep.ResComp[3]  == Veksl.NRec
and UserDeskRep.ResComp[8]  == FpPeriodCur.NRec // периоды планирования
and UserDeskRep.ResComp[14] == fpTPerCur.NRec
#ifdef _OFPJSET_
and parModel                == OFPModel.NRec
#else
and UserDeskRep.ResComp[6]  == OFPModel.NRec
#end
// диапазоны сумм
and UserDeskRep.ResComp[11] == AllIndexDS.NRec
// категории задолженности
and UserDeskRep.ResComp[13] == AllIndexCD.NRec
// диапазоны задолженности
and UserDeskRep.ResComp[15] == AllIndexPZ.NRec
// валюта
and fRecValuta              == KlValTree.nRec
))
;
#ifdef _OFPJSET_
Parameters
    parModel          // принимаем - модель
  , parTuneFO         // возвращаем - настройку
;
#end

// -----------------------------------------------------------------------------
ToolBar
  F_Common::tbSaveRestoreDoc
;

// -----------------------------------------------------------------------------
#include ofpvalfunc.vpp  // функции для работы с валютой
#include ofpflag.vpp     // Function isFlag
#include ofprep.vpp      // UserDeskRep_GetChosenVal
#include getplatm.vpp    // выбор ПС
#include xlSetUp.Inc     // cgxlRepSetupRunMode_-константы

/////////////////////// РАБОТА С ФИЛЬТРАМИ /////////////////////////////////////
//******************************************************************************
#include fpMName.vpp     // GetFPMarkerName
#include filter_udr.vpp  // Filter_-функции по текущей UserDeskRep.nRec
#include filter_rep.vpp  // Filter_GetName, Filter_Find

var arrMTs_High: array [1..1] of string; // высокая ликвидность
var arrMTw_High: array [1..1] of word;   // высокая ликвидность
var arrMTs_Low : array [1..1] of string; // низкая
var arrMTw_Low : array [1..1] of word;   // низкая

//------------------------------------------------------------------------------
Window wTuning 'Отображать колонки' (,,) EscClose, DoAccept, Gray;
  Show at (,,60,9);
Screen scrTuneBase 'Интерфейс'('',hcOfpIAktReester,sci1Esc);
Fields
  UserDeskRep.ResWord[14]: NoProtect;
  UserDeskRep.ResName[10]: NoProtect;
  UserDeskRep.ResName[2] : NoProtect;
  UserDeskRep.ResName[3] : NoProtect;
  UserDeskRep.ResName[4] : NoProtect;
  UserDeskRep.ResName[5] : NoProtect;
  UserDeskRep.ResName[6] : NoProtect;
  UserDeskRep.ResName[7] : NoProtect;
<<
                            Наименование
  [.] План (приход)      `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] План (расход)      `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Исполнение (приход)`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Исполнение (расход)`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Факт (приход)      `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Факт (расход)      `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Отклонение         `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

HandleEvent
cmInit:
{
  UpdateTable;

  if (UserDeskRep.ResWord[14] = 0)
  {
    set UserDeskRep.ResWord[14] := 1111111b;
    ReScanPanel(#UserDeskRep);
  }
}
cmDefault:
{
  if (UserDeskRep.ResWord[14] = 0)
  {
    message(''#3'Установить видимость колонок!');
    abort;
    exit;
  }

  set UserDeskRep.ResWord[14] := UserDeskRep.ResWord[14];
  ReScanPanel(#UserDeskRep);
}
cmCancel:
{
  ReReadrecord(#UserDeskRep);
}
end; // HandleEvent
end; // Window

//------------------------------------------------------------------------------
Function UserDeskRep_GetColumnName: string;
var res: string;
{
  res := '';

  if IsFlagWord(UserDeskRep.ResWord[14], 1) res += if(trim(UserDeskRep.ResName[10])<> '', UserDeskRep.ResName[10],'План (приход)') + ' / ';
  if IsFlagWord(UserDeskRep.ResWord[14], 2) res += if(trim(UserDeskRep.ResName[2]) <> '', UserDeskRep.ResName[2], 'План (расход)') + ' / ';
  if IsFlagWord(UserDeskRep.ResWord[14], 3) res += if(trim(UserDeskRep.ResName[3]) <> '', UserDeskRep.ResName[3], 'Исполнение (приход)') + ' / ';
  if IsFlagWord(UserDeskRep.ResWord[14], 4) res += if(trim(UserDeskRep.ResName[4]) <> '', UserDeskRep.ResName[4], 'Исполнение (расход)') + ' / ';
  if IsFlagWord(UserDeskRep.ResWord[14], 5) res += if(trim(UserDeskRep.ResName[5]) <> '', UserDeskRep.ResName[5], 'Факт (приход)') + ' / ';
  if IsFlagWord(UserDeskRep.ResWord[14], 6) res += if(trim(UserDeskRep.ResName[6]) <> '', UserDeskRep.ResName[6], 'Факт (расход)') + ' / ';
  if IsFlagWord(UserDeskRep.ResWord[14], 7) res += if(trim(UserDeskRep.ResName[7]) <> '', UserDeskRep.ResName[7], 'Отклонение') + ' / ';

  Result := SubStr(res, 1, length(res)-3);
}

//------------------------------------------------------------------------------
// получение имени поля по аналитике (нет/одиночный выбор/множественный)
Function Field_SetName(_FltPos: word; _wKau: word): string;
{
  var numRecords : word;
  // кол-во выбранных записей в фильтре
  numRecords := Filter_GetWord(_FltPos);

  case _wKau of
    cFld_KatNotes
    , cFld_AktSum
    , wFld_Prior
    , wFld_KatDoc:
    {
      Field_SetName := Filter_GetName(numRecords, piFunOFP.GetName(_wKau, Filter_GetComp(_FltPos)));
    }
  else
      Field_SetName := Filter_GetName(numRecords, #ShowKau(_wKau, UserDeskRep.ResComp[20 + _FltPos]));
  end;
}

//------------------------------------------------------------------------------
// Фильтр по аналитике бюджетирования
Function Report_KauBudFirst: string;
var retStr: string;
{
  var curRec: comp;
  curRec := Filter_GetComp(cgFilter_KauBud);
  retStr := '';
  // флажок "объект АУ не определен"
  if (curRec = cKauNRecNotDefine) // =0
    retStr := '< значение не определено >';
  else
    retStr := if(curRec = 1,'< Прочие '+ GetAnalitikName(UserDeskRep.ResWord[5])+' >',ShowKau(UserDeskRep.ResWord[5], curRec));

  Report_KauBudFirst := retStr;
}

#include fpMName.Vpp

//------------------------------------------------------------------------------
Window wndEditKauFilter 'Фильтр на аналитику' Blue, DoAccept, EscClose;
  show at (,,80,4);
Screen scEditKauFilter (,,sci178EnEsc);
  show at (,,,3);
Fields
  [FilterWkau] GetAnalitikName(UserDeskRep.ResWord[5]) (,,sci1378EnEsc) : Protect,
               {Font = {BackColor = if(UserDeskRep.ResWord[5] = 0, ColorNeed, 0)}};
  [FilterCkauS] Filter_GetName(Filter_GetWord(cgFilter_KauBud), Report_KauBudFirst) (,,sci1378EnEsc): Protect;

<<
  Каталог аналитики  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  Значение аналитики .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;

HandleEvent
cmPick:
{
  case CurField of
    #FilterWkau:
    {
      if (RunInterface('GetKauTable', cgiPick, cgKatKau_FPDisabled, UserDeskRep.ResWord[5], comp(0)) <> cmCancel)
      {
        MyMarker2PickRep('', cgFilter_KauBud);//пустой выбор
        set UserDeskRep.ResWord[5] := UserDeskRep.ResWord[5];//обновим WKAU
      }
    }
    #FilterCkauS:
    {
      if (UserDeskRep.ResWord[5] <> 0)
      {
        MyPickRep2Marker(GetFPMarkerName(cofpMeanTF), cgFilter_KauBud);

        if (RunInterface('PickFpAnMean', word(cgiPickMult or cgiNotClear), UserDeskRep.ResWord[5], 0) <> cmCancel)
          MyMarker2PickRep(GetFPMarkerName(cofpMeanTF), cgFilter_KauBud);

        set UserDeskRep.ResWord[5] := UserDeskRep.ResWord[5];
      }
      else
        Message('Необходимо выбрать Каталог аналитики.', Warning + cancelButton);
    }
    end;
}

end;
end; // window

//------------------------------------------------------------------------------
Window winSetTree 'Настройка реестра финансовых обязательств' ('',hcOfpIAktReester,) EscClose, Gray;
TabbedSheet TOP tabSetTree;
  Table UserDeskRep;
//------------------------------------------------------------------------------
Screen scrSetTreeTune 'Настройка' (,,sci1378Esc);
  bevel b1 {0,  0, 112,  7, bsRaised, bsFrame};
  bevel b2 {0,  7, 112, 13, bsRaised, bsFrame};
  bevel b3 {0, 13, 112, 18, bsRaised, bsFrame};
  bevel b4 {0, 18, 112, 22, bsRaised, bsFrame};
Fields
  ModelName                ('Выберите модель')          : Protect;
  UserDeskRep.RepName      ('Наименование отчета',,sci178Esc) : NoProtect, {Font = {BackColor = if(trim(UserDeskRep.RepName) = '',ColorNeed,0)}};
  RepGrLst.Name            ('Наименование группировки') : Protect, {Font = {BackColor = if(not IsValid(#RepGrLst),ColorNeed,0)}};
  GroupContent             ('Содержание группировки')   : Protect, Skip;
  RepGrLst2.Name           ('Наименование сортировки')  : Protect;
  UserDeskRep.ResName[19]  ('Содержание сортировки')    : Protect, Skip;
  fFieldVisible            ('Колонки отчета')           : Protect;

  fPeriodT                 ('Тип периода')              : Protect;
  fPeriodName              : skip;
  fPeriod                  ('Период')                   : Protect;
  DiapasonSumm             ('Выберите диапазоны сумм')  : Protect;
  CatZadolj                ('Выберите категории задолженности') : Protect;
  PrcZadolj                ('Выберите диапазоны оплаченности (процент оплаченности)') : Protect;

  UserDeskRep.ResWord[6]   ('Формирование сумм')        : [ List cgOfpRepVal_Nde 'НДЕ'
                                                               , cgOfpRepVal_Tar 'валюте отчетов'
                                                               , cgOfpRepVal_Def 'выбранной валюте' ], Protect;
  fValuta                  ('Выбранная валюта')         : Protect;
  UserDeskRep.ResWord[9]   ('Дополнительные параметры',,sci178Esc) : NoProtect;
  UserDeskRep.ResName[9]   ('Название дополнительного уровня',,sci178Esc) : NoProtect;

  [sXLT] piFunOfp.GetTune_Excel_RepAkt()
                           ('Текущий Excel-шаблон')     : Protect;
  UserDeskRep.ResWord[11]  ('Уровни группировки будут выведены в отдельные столбцы',,sci178Esc) : NoProtect;
<<
                                                                                                            
 `Модель      `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Группировка `.@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Сортировка  `.@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Колонки     `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  Настройка группировки
    `по дате погашения:                  `.@@@@@@@@@@@@ .@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `по диапазонам сумм:                 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `по категориям задолженности:        `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `по диапазонам оплаченности:         `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  Дополнительные параметры
    `отображать суммы в папках в:        `.@@@@@@@@@@@@@@@@@@@-.@@@@@@@@@@@@@@
     [.] формировать доп.нулевой уровень:`.@@@@@@@@@@@@@@@@@@@
     [.] выводить аналитику по статьям   `

  Excel-отчет
    `Текущий шаблон:`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
     [.] разделять уровни группировки при печати`
>>
end; // Screen

//------------------------------------------------------------------------------
Screen scrSetTreeFilter 'Фильтры' (,,sci1378Esc);
  bevel b2 {0,  0, 112, 13, bsRaised, bsFrame};
Fields
  ParFiltr1              ('Установите фильтры',,sci178Esc)  : NoProtect;
  UserDeskRep.ResDate[5] ('Дата (начало периода)')    : [,'DD/MM/YYYY'],NoProtect,
                         #mFontPeriod(UserDeskRep.ResDate[5],UserDeskRep.ResDate[6]);
  UserDeskRep.ResDate[6] ('Дата (окончание периода)') : [,'DD/MM/YYYY'],NoProtect,
                         #mFontPeriod(UserDeskRep.ResDate[5],UserDeskRep.ResDate[6]);
  ParFiltr2              ('Установите фильтры',,sci178Esc) : NoProtect;
  [Filter_sKatOrg]       Field_SetName(cgFilter_KatOrg, cgKau_KatOrg)
                         ('Фильтр по контрагенту')    : Protect;
  UserDeskRep.ResDate[1] ('Дата (начало периода)')    : [,'DD/MM/YYYY'],NoProtect,
                         #mFontPeriod(UserDeskRep.ResDate[1],UserDeskRep.ResDate[2]);
  UserDeskRep.ResDate[2] ('Дата (окончание периода)') : [,'DD/MM/YYYY'],NoProtect,
                         #mFontPeriod(UserDeskRep.ResDate[1],UserDeskRep.ResDate[2]);
  [Filter_sBaseDoc]      Field_SetName(cgFilter_BaseDoc, cgKau_BaseDoc)
                         ('Фильтр по ДО')             : Protect;
  UserDeskRep.ResDate[3] ('Дата (начало периода)')    : [,'DD/MM/YYYY'],NoProtect,
                         #mFontPeriod(UserDeskRep.ResDate[3],UserDeskRep.ResDate[4]);
  UserDeskRep.ResDate[4] ('Дата (окончание периода)') : [,'DD/MM/YYYY'],NoProtect,
                         #mFontPeriod(UserDeskRep.ResDate[3],UserDeskRep.ResDate[4]);
  [Filter_sDogovor]      Field_SetName(cgFilter_Dogovor, cgKau_Dogovor)
                         ('Фильтр по Договору')       : Protect;
  [Filter_sKatDoc]       Field_SetName(cgFilter_KatDoc, wFld_KatDoc)
                         ('Фильтр по типу документа') : Protect;
  [Filter_sKatStroy]     Field_SetName(cgFilter_ObjBuild, cgKau_ObjBuild)
                         ('Фильтр по Объекту строительства') : Protect;
  [Filter_sKatNotes]     Field_SetName(cgFilter_cKatNotes, cFld_KatNotes)
                         ('Фильтр по статусу')        : Protect;
  [Filter_sFpCO]         Field_SetName(cgFilter_FpCO, cgKau_FpCO)
                         ('Фильтр по ЦО')             : Protect;
  [Filter_sPriority]     Field_SetName(cgFilter_Prior, wFld_Prior)
                         ('Фильтр по приоритету')     : Protect;
  [Filter_sFpStBud]      Field_SetName(cgFilter_FpStBud, cgKau_FpStBud)
                         ('Фильтр по статье бюджета') : Protect;
  UserDeskRep.ResWord[22]('Фильтр по виду платежа')   : [LIST cgOfpTP_Reglament 'регламентный',
                                                              cgOfpTP_Avans     'авансовый',
                                                              cgOfpTP_Shtraf    'штрафные санкции',
                                                              cgOfpTP_Convert   'конвертация'], Protect;
  [Filter_sKauBud]       Filter_GetName(Filter_GetWord(cgFilter_KauBud), Report_KauBudFirst)
                         ('Фильтр по аналитике бюджетирования') : Protect;
  [Filter_sGroupOfp]     Field_SetName(cgFilter_GroupOfp, cgKau_GroupOfp)
                         ('Фильтр по группе ФОБ')     : Protect;
  UserDeskRep.ResWord[8] ('Степень ликвидности платежного средства') : [List cgLicv_High 'высокой ликвидности',
                                                                             cgLicv_Low  'низкой  ликвидности'], Protect;
  [Filter_sAktSum]       Field_SetName(cgFilter_cAktSum, cFld_AktSum)
                         ('Фильтр по сводному ФОБ')   : Protect;
  UserDeskRep.ResWord[4] ('Тип платежного средства')  : [List ''], Protect;
  [Filter_sPersons]      Field_SetName(cgFilter_Persons, cgKau_Persons)
                         ('Фильтр по ответственному куратору') : Protect;
  fPlatMean              ('Выберите платежное средство') : Protect;
  [Filter_sArchive]      if(IsBit(UserDeskRep.ResWord[15], cgFlViewPos_Archive), 'учитывается', '')
                         ('Учитывать архивный период',,sci178Esc): Protect;
<<
      Ограничения на реестр
  [.] Дата формирования  `с.@@@@@@@@@@@ по.@@@@@@@@@@@@  [.] Контрагент          `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] План.дата погашения`с.@@@@@@@@@@@ по.@@@@@@@@@@@@  [.] ДО                  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Факт.дата погашения`с.@@@@@@@@@@@ по.@@@@@@@@@@@@  [.] Договор             `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Тип                ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@  [.] Объект строительства`.@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Статус             ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@  [.] ЦО                  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Приоритет          ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@  [.] Статья бюджета      `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Вид платежа        ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@  [.] Аналитика           `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Группа  ФОБ        ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@  [.] Платежное средство  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Сводное ФОБ        ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@                           .@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Куратор            ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@                           .@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Архивный период    ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@

>>
end; // Screen

end; // TabbedSheet
end; // Window

//------------------------------------------------------------------------------
// Выбор настройки
Panel panCaseSet Table UserDeskRep;
Browse brCaseSet (, hcOfpIAktReester, sci1478EnEscA);
  Show at (,,,20);
Fields
   UserDeskRep.RepName ''#3'Наименование настройки', ''('Enter - сформировать отчет '):[35], Protect;
   fPeriodNameBrws     ''#3'Период'                    ('Enter - сформировать отчет '):[20], Protect;
   if( UserDeskRep.ResWord[40]=0,'','V'):[1], Protect, Skip, NoAutoSize;
end;

#include aBtnScr.pan // Эргономика. Панель управления отчетами
end; // panel

//------------------------------------------------------------------------------
// получение имени поля по константе
Function wKau_By_FltPos(_FltPos: word): word;
var ret: word;
{
  case _FltPos of
    cgFilter_KatOrg    : ret := cgKau_KatOrg;
    cgFilter_FpStBud   : ret := cgKau_FpStBud;
    cgFilter_FpCO      : ret := cgKau_FpCO;
    cgFilter_Persons   : ret := cgKau_Persons;
    cgFilter_Dogovor   : ret := cgKau_Dogovor;
    cgFilter_BaseDoc   : ret := cgKau_BaseDoc;
    cgFilter_GroupOfp  : ret := cgKau_GroupOfp;
    cgFilter_ObjBuild  : ret := cgKau_ObjBuild;
    cgFilter_cAktSum   : ret := cFld_AktSum;
    cgFilter_cKatNotes : ret := cFld_KatNotes;
    cgFilter_KatDoc    : ret := wFld_KatDoc;
    cgFilter_Prior     : ret := wFld_Prior;
  else
    ret := 0;
  end;

  wKau_By_FltPos := ret;
}

//------------------------------------------------------------------------------
Function FltPos_By_Fld(_Fld: longint): word;
var ret: word;
{
  case _Fld of
    // фильтры с множ.выбором
    #Filter_sKatOrg   : ret := cgFilter_KatOrg;
    #Filter_sFpStBud  : ret := cgFilter_FpStBud;
    #Filter_sFpCO     : ret := cgFilter_FpCO;
    #Filter_sPersons  : ret := cgFilter_Persons;
    #Filter_sDogovor  : ret := cgFilter_Dogovor;
    #Filter_sBaseDoc  : ret := cgFilter_BaseDoc;
    #Filter_sGroupOfp : ret := cgFilter_GroupOfp;
    #Filter_sKatStroy : ret := cgFilter_ObjBuild;
    #Filter_sAktSum   : ret := cgFilter_cAktSum;
    #Filter_sKatDoc   : ret := cgFilter_KatDoc;
    #Filter_sKatNotes : ret := cgFilter_cKatNotes;
    #Filter_sPriority : ret := cgFilter_Prior;
    #Filter_sKauBud   : ret := cgFilter_KauBud;
  else
    ret := 0;
  end;

  FltPos_By_Fld := ret;
}

// -----------------------------------------------------------------------------
// on DelOnProtect
Procedure Report_ClearPole(_Fld: longint);
{
  // очистим PickRep, кол-во выбранных записей и ссылку на запись
  Filter_Clear(FltPos_By_Fld(_Fld));
}

// -----------------------------------------------------------------------------
// получение параметров фильтра
Procedure GetParFiltr(w1, w2 : word; var pF1, pF2 : word);
{
  pF1 := 0;
  pF2 := 0;

  if IsBit(w2, cgFlViewPos_DateForm  ) BitOn(pF1, cgFlPos_DateForm); // дата формирования
  if IsBit(w1, cgFlViewPos_PlanDate  ) BitOn(pF1, cgFlPos_PlanDate); // план. дата погашения
  if IsBit(w1, cgFlViewPos_FactIspoln) BitOn(pF1, cgFlPos_FactIsp ); // факт. дата погашения
  if IsBit(w1, cgFlViewPos_KatDoc    ) BitOn(pF1, cgFlPos_KatDoc  ); // тип
  if IsBit(w1, cgFlViewPos_FObStatus ) BitOn(pF1, cgFlPos_Status  ); // статус
  if IsBit(w1, cgFlViewPos_Prior     ) BitOn(pF1, cgFlPos_Prior   ); // приоритет
  if IsBit(w1, cgFlViewPos_TypePlat  ) BitOn(pF1, cgFlPos_TypePlat); // вид платежа
  if IsBit(w1, cgFlViewPos_GroupOfp  ) BitOn(pF1, cgFlPos_GroupOfp); // группа  ФОБ
  if IsBit(w1, cgFlViewPos_AktSum    ) BitOn(pF1, cgFlPos_AktSum  ); // сводное ФОБ
  if IsBit(w1, cgFlViewPos_Persons   ) BitOn(pF1, cgFlPos_Persons ); // куратор
  if IsBit(w2, cgFlViewPos_Archive   ) BitOn(pF1, cgFlPos_Archive ); // учитывать архивный период
  if IsBit(w1, cgFlViewPos_KatOrg    ) BitOn(pF2, cgFlPos_KatOrg  ); // контрагент
  if IsBit(w1, cgFlViewPos_BaseDoc   ) BitOn(pF2, cgFlPos_BaseDoc ); // ДО
  if IsBit(w1, cgFlViewPos_Dogovor   ) BitOn(pF2, cgFlPos_Dogovor ); // договор
  if IsBit(w2, cgFlViewPos_KatStroy  ) BitOn(pF2, cgFlPos_KatStroy); // объект строительства
  if IsBit(w1, cgFlViewPos_FpCO      ) BitOn(pF2, cgFlPos_FpCO    ); // ЦО
  if IsBit(w1, cgFlViewPos_FpStBud   ) BitOn(pF2, cgFlPos_FpStBud ); // статья бюджета
  if IsBit(w1, cgFlViewPos_FpBudAn   ) BitOn(pF2, cgFlPos_FpBudAn ); // аналитика
  if IsBit(w1, cgFlViewPos_PlatMain  ) BitOn(pF2, cgFlPos_PlatMain); // платежное средство
}

// -----------------------------------------------------------------------------
// установка параметров фильтра
Procedure SetParFiltr(pF1, pF2 : word; var w1, w2 : word);
{
  w1 := 0;
  w2 := 0;

  if IsBit(pF1, cgFlPos_DateForm) BitOn(w2, cgFlViewPos_DateForm  ); // дата формирования
  if IsBit(pF1, cgFlPos_PlanDate) BitOn(w1, cgFlViewPos_PlanDate  ); // план. дата погашения
  if IsBit(pF1, cgFlPos_FactIsp ) BitOn(w1, cgFlViewPos_FactIspoln); // факт. дата погашения
  if IsBit(pF1, cgFlPos_KatDoc  ) BitOn(w1, cgFlViewPos_KatDoc    ); // тип
  if IsBit(pF1, cgFlPos_Status  ) BitOn(w1, cgFlViewPos_FObStatus ); // статус
  if IsBit(pF1, cgFlPos_Prior   ) BitOn(w1, cgFlViewPos_Prior     ); // приоритет
  if IsBit(pF1, cgFlPos_TypePlat) BitOn(w1, cgFlViewPos_TypePlat  ); // вид платежа
  if IsBit(pF1, cgFlPos_GroupOfp) BitOn(w1, cgFlViewPos_GroupOfp  ); // группа  ФОБ
  if IsBit(pF1, cgFlPos_AktSum  ) BitOn(w1, cgFlViewPos_AktSum    ); // сводное ФОБ
  if IsBit(pF1, cgFlPos_Persons ) BitOn(w1, cgFlViewPos_Persons   ); // куратор
  if IsBit(pF1, cgFlPos_Archive ) BitOn(w2, cgFlViewPos_Archive   ); // учитывать архивный период
  if IsBit(pF2, cgFlPos_KatOrg  ) BitOn(w1, cgFlViewPos_KatOrg    ); // контрагент
  if IsBit(pF2, cgFlPos_BaseDoc ) BitOn(w1, cgFlViewPos_BaseDoc   ); // ДО
  if IsBit(pF2, cgFlPos_Dogovor ) BitOn(w1, cgFlViewPos_Dogovor   ); // договор
  if IsBit(pF2, cgFlPos_KatStroy) BitOn(w2, cgFlViewPos_KatStroy  ); // объект строительства
  if IsBit(pF2, cgFlPos_FpCO    ) BitOn(w1, cgFlViewPos_FpCO      ); // ЦО
  if IsBit(pF2, cgFlPos_FpStBud ) BitOn(w1, cgFlViewPos_FpStBud   ); // статья бюджета
  if IsBit(pF2, cgFlPos_FpBudAn ) BitOn(w1, cgFlViewPos_FpBudAn   ); // аналитика
  if IsBit(pF2, cgFlPos_PlatMain) BitOn(w1, cgFlViewPos_PlatMain  ); // платежное средство
}

// -----------------------------------------------------------------------------
// Проверить возможно ли выводить архивный период
Function CheckIfCanUseArchive(w1, w2 : word): boolean;
{
  Result := true;

  if (IsBit(w2, cgFlViewPos_DateForm  ) and
      IsBit(w1, cgFlViewPos_PlanDate  ) and
      IsBit(w1, cgFlViewPos_FactIspoln)    )
  {
    var archiveDate: date; archiveDate := piOfpPrd.TunePeriod_GetArchivedDay;

    // Если установлены фильтры по датам и они не попадают в архивный период
    // то архивный период выводиться не будет
    if (archiveDate < UserDeskRep.ResDate[5] and
        archiveDate < UserDeskRep.ResDate[1] and
        archiveDate < UserDeskRep.ResDate[3]    )
    {
      Result := false;
    }
  }
}

// -----------------------------------------------------------------------------
Procedure SetViewFields;
{
  //-------------------------------------------------------
  // ЗАКЛАДКА "ФИЛЬТРЫ"

  GetParFiltr(UserDeskRep.ResWord[1], UserDeskRep.ResWord[15], ParFiltr1, ParFiltr2);

  #mFieldViewFilterF(ParFiltr1, cgFlPos_DateForm, #UserDeskRep.ResDate[5]);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_DateForm, #UserDeskRep.ResDate[6]);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_PlanDate, #UserDeskRep.ResDate[1]);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_PlanDate, #UserDeskRep.ResDate[2]);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_FactIsp,  #UserDeskRep.ResDate[3]);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_FactIsp,  #UserDeskRep.ResDate[4]);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_KatDoc,   #Filter_sKatDoc);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_Status,   #Filter_sKatNotes);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_Prior,    #Filter_sPriority);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_TypePlat, #UserDeskRep.ResWord[22]);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_GroupOfp, #Filter_sGroupOfp);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_AktSum,   #Filter_sAktSum);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_Persons,  #Filter_sPersons);
  #mFieldViewFilterF(ParFiltr1, cgFlPos_Archive,  #Filter_sArchive);

  #mFieldViewFilterF(ParFiltr2, cgFlPos_KatOrg,   #Filter_sKatOrg);
  #mFieldViewFilterF(ParFiltr2, cgFlPos_BaseDoc,  #Filter_sBaseDoc);
  #mFieldViewFilterF(ParFiltr2, cgFlPos_Dogovor,  #Filter_sDogovor);
  #mFieldViewFilterF(ParFiltr2, cgFlPos_KatStroy, #Filter_sKatStroy);
  #mFieldViewFilterF(ParFiltr2, cgFlPos_FpCO,     #Filter_sFpCO);
  #mFieldViewFilterF(ParFiltr2, cgFlPos_FpStBud,  #Filter_sFpStBud);
  #mFieldViewFilterF(ParFiltr2, cgFlPos_FpBudAn,  #Filter_sKauBud);
  #mFieldViewFilterF(ParFiltr2, cgFlPos_PlatMain, #UserDeskRep.ResWord[8]);
  #mFieldViewFilterF(ParFiltr2, cgFlPos_PlatMain, #UserDeskRep.ResWord[4]);
  #mFieldViewFilterF(ParFiltr2, cgFlPos_PlatMain, #fPlatMean);

  // неопределен или задолженность - спрячем ПС
  if ((UserDeskRep.ResWord[4] = mtNOTDEFINED) or
      (UserDeskRep.ResWord[4] = mtZADOLJ) or
      (UserDeskRep.ResWord[4] = mtAVISO))
    ClearFieldState(#fPlatMean, sfVisible);

  // ликвидность
  if (UserDeskRep.ResWord[8] = cgLicv_High)
    SetEnumList(scrSetTreeFilter, #UserDeskRep.ResWord[4], arrMTs_High, arrMTw_High);
  else
    SetEnumList(scrSetTreeFilter, #UserDeskRep.ResWord[4], arrMTs_Low, arrMTw_Low);

  //-------------------------------------------------------
  // ЗАКЛАДКА "НАСТРОЙКА"

  // диапазоны сумм
  if piTuneIer.isGroupInTree(UserDeskRep.ResComp[9], lDIAPASON)
    SetFieldOption(#DiapasonSumm, ofSelecTable);
  else
    ClearFieldOption(#DiapasonSumm, ofSelecTable);
  // категории задолженности
  if piTuneIer.isGroupInTree(UserDeskRep.ResComp[9], lCATZADOLJ)
    SetFieldOption(#CatZadolj, ofSelecTable);
  else
    ClearFieldOption(#CatZadolj, ofSelecTable);
  // диапазоны задолженности
  if piTuneIer.isGroupInTree(UserDeskRep.ResComp[9], lPRCZADOLJ)
    SetFieldOption(#prcZadolj, ofSelecTable);
  else
    ClearFieldOption(#prcZadolj, ofSelecTable);
  // аналитика по статьям бюджета
  var wCluster: word;
  wCluster := cgBitNo;
  if (not piTuneIer.RepGrOne_isLastLevel(UserDeskRep.ResComp[9], lSTBUD))
    wCluster := 2;
  ClusterDisabledField(#UserDeskRep.ResWord[9], wCluster);
  // другая валюта
  if (UserDeskRep.ResWord[6] = cgOfpRepVal_Def)
    SetFieldOption(#fValuta, ofSelecTable);
  else
    ClearFieldOption(#fValuta, ofSelecTable);
  // доп.уровень в Дополнительных параметрах
  #mFieldViewFilterF(UserDeskRep.ResWord[9],0,#UserDeskRep.ResName[9]);

  // есть уровень Очередность платежа - можно выбрать Тип периода
  if piTuneIer.isGroupInTree(UserDeskRep.ResComp[9], lDATE)
  {
    SetFieldOption(#fPeriodT, ofSelecTable);
    // выбран тип периода - можно выбрать Период
    if (UserDeskRep.ResComp[14] <> 0)
    {
      SetFieldState(#fPeriod, sfVisible);
      SetFieldState(#fPeriodName, sfVisible);
    }
    else
    {
      ClearFieldState(#fPeriod, sfVisible);
      ClearFieldState(#fPeriodName, sfVisible);
    }
  }
  else
  {
    ClearFieldOption(#fPeriodT, ofSelecTable);
    ClearFieldState(#fPeriod, sfVisible);
    ClearFieldState(#fPeriodName, sfVisible);
  }
}

// -----------------------------------------------------------------------------
// настройки, которые зависят от настройки группировки (вызывается при изменении настройки группировки)
Procedure SetViewParams;
{
  // период
  if (not piTuneIer.isGroupInTree(UserDeskRep.ResComp[9], lDATE))
  {
    set UserDeskRep.ResComp[8]  := 0;
    set UserDeskRep.ResComp[14] := 0;
  }
  // диапазоны сумм
  if (not piTuneIer.isGroupInTree(UserDeskRep.ResComp[9], lDIAPASON))
    set UserDeskRep.ResComp[11] := 0;
  // категории задолженности
  if (not piTuneIer.isGroupInTree(UserDeskRep.ResComp[9], lCATZADOLJ))
    set UserDeskRep.ResComp[13] := 0;
  // диапазоны задолженности
  if (not piTuneIer.isGroupInTree(UserDeskRep.ResComp[9], lPRCZADOLJ))
    set UserDeskRep.ResComp[15] := 0;
  // аналитика по статьям бюджета - если статьи на последнем уровне
  if (not piTuneIer.RepGrOne_isLastLevel(UserDeskRep.ResComp[9], lSTBUD))
    BitOff(UserDeskRep.ResWord[9], 1);
}

// -----------------------------------------------------------------------------
#include MrkByFld.vpp // - Обработка фильтроов
#include fptodo.vpp   // GetFpPeriodT, GetFpPeriod

// -----------------------------------------------------------------------------
// заполнение rTuneFO
Procedure rTuneFO_Fill;
{
  ClearAdvRecord(rTuneFO);
  // настройка
  rTuneFO.cTune   := UserDeskRep.nRec;
  rTuneFO.nReport := UserDeskRep.nRep;

  if (IsBit(UserDeskRep.ResWord[15], cgFlViewPos_Archive) and CheckIfCanUseArchive(UserDeskRep.ResWord[1], UserDeskRep.ResWord[15]))
    rTuneFO.IsArchived := cgArchFl_AllPeriod;
  else
    rTuneFO.IsArchived := cgArchFl_WorkPeriod;

  rTuneFO.cModel      :=
  #ifdef _OFPJSET_
                         parModel;
  #else
                         UserDeskRep.ResComp[6];
  #end
  rTuneFO.ColumnVisible := if(UserDeskRep.ResWord[14] = 0, 11111111b, UserDeskRep.ResWord[14]);
  rTuneFO.ResName[1] := if(trim(UserDeskRep.ResName[10])<> '', UserDeskRep.ResName[10],'План (приход)');
  rTuneFO.ResName[2] := if(trim(UserDeskRep.ResName[2]) <> '', UserDeskRep.ResName[2], 'План (расход)');
  rTuneFO.ResName[3] := if(trim(UserDeskRep.ResName[3]) <> '', UserDeskRep.ResName[3], 'Исполнение (приход)');
  rTuneFO.ResName[4] := if(trim(UserDeskRep.ResName[4]) <> '', UserDeskRep.ResName[4], 'Исполнение (расход)');
  rTuneFO.ResName[5] := if(trim(UserDeskRep.ResName[5]) <> '', UserDeskRep.ResName[5], 'Факт (приход)');
  rTuneFO.ResName[6] := if(trim(UserDeskRep.ResName[6]) <> '', UserDeskRep.ResName[6], 'Факт (расход)');
  rTuneFO.ResName[7] := if(trim(UserDeskRep.ResName[7]) <> '', UserDeskRep.ResName[7], 'Отклонение');

  rTuneFO.cFpPeriodT  := UserDeskRep.ResComp[14];
  rTuneFO.cFpPeriodTU := fpTPer_GetUpper(rTuneFO.cFpPeriodT);
  rTuneFO.cFpPeriod   := UserDeskRep.ResComp[8];
  rTuneFO.cSortLeafs  := UserDeskRep.ResComp[19];
  rTuneFO.cTuneLevels := UserDeskRep.ResComp[9];
  rTuneFO.cDiapSum    := UserDeskRep.ResComp[11];
  rTuneFO.cCatZadolj  := UserDeskRep.ResComp[13];
  rTuneFO.cPrcZadolj  := UserDeskRep.ResComp[15];
  rTuneFO.HasStBudAn  := IsBit(UserDeskRep.ResWord[9], 1);
  rTuneFO.isDivideGr  := UserDeskRep.ResWord[11] = 1;
  rTuneFO.ItogoExists := IsBit(UserDeskRep.ResWord[9], 0);
  rTuneFO.ItogoName   := UserDeskRep.ResName[9];
  rTuneFO.cTreeVal    := UserDeskRep_GetChosenVal(UserDeskRep.ResWord[6], UserDeskRep.ResComp[12]);
  // установленный фильтр
  rTuneFO.Filter      := UserDeskRep.ResWord[1];
  rTuneFO.Filter2     := UserDeskRep.ResWord[15];
  rTuneFO.DateBeg     := UserDeskRep.ResDate[1];
  rTuneFO.DateEnd     := UserDeskRep.ResDate[2];
  rTuneFO.FactBeg     := UserDeskRep.ResDate[3];
  rTuneFO.FactEnd     := UserDeskRep.ResDate[4];
  rTuneFO.DateFormBeg := UserDeskRep.ResDate[5];
  rTuneFO.DateFormEnd := UserDeskRep.ResDate[6];
  rTuneFO.AktDirect   := UserDeskRep.ResWord[2];
  rTuneFO.AktTypePlat := UserDeskRep.ResWord[22];
  // множественные фильтры
  rTuneFO.AktKatDoc   := Filter_GetComp(cgFilter_KatDoc);
  rTuneFO.AktKatDocN  := Filter_GetWord(cgFilter_KatDoc);
  rTuneFO.AktKatNotes := Filter_GetComp(cgFilter_cKatNotes);
  rTuneFO.AktKatNotesN:= Filter_GetWord(cgFilter_cKatNotes);
  rTuneFO.AktPrior    := Filter_GetComp(cgFilter_Prior);
  rTuneFO.AktPriorN   := Filter_GetWord(cgFilter_Prior);
  rTuneFO.AktKontr    := Filter_GetComp(cgFilter_KatOrg);
  rTuneFO.AktKontrN   := Filter_GetWord(cgFilter_KatOrg);
  rTuneFO.AktStBud    := Filter_GetComp(cgFilter_FpStBud);
  rTuneFO.AktStBudN   := Filter_GetWord(cgFilter_FpStBud);
  rTuneFO.AktCO       := Filter_GetComp(cgFilter_FpCO);
  rTuneFO.AktCON      := Filter_GetWord(cgFilter_FpCO);
  rTuneFO.AktCurator  := Filter_GetComp(cgFilter_Persons);
  rTuneFO.AktCuratorN := Filter_GetWord(cgFilter_Persons);
  rTuneFO.AktDogovor  := Filter_GetComp(cgFilter_Dogovor);
  rTuneFO.AktDogovorN := Filter_GetWord(cgFilter_Dogovor);
  rTuneFO.AktBaseDoc  := Filter_GetComp(cgFilter_BaseDoc);
  rTuneFO.AktBaseDocN := Filter_GetWord(cgFilter_BaseDoc);
  rTuneFO.AktGroupOfp := Filter_GetComp(cgFilter_GroupOfp);
  rTuneFO.AktGroupOfpN:= Filter_GetWord(cgFilter_GroupOfp);
  rTuneFO.AktcAktSum  := Filter_GetComp(cgFilter_cAktSum);
  rTuneFO.AktcAktSumN := Filter_GetWord(cgFilter_cAktSum);
  rTuneFO.AktKatStroy := Filter_GetComp(cgFilter_ObjBuild);
  rTuneFO.AktKatStroyN:= Filter_GetWord(cgFilter_ObjBuild);
  rTuneFO.AktKauBudW  := UserDeskRep.ResWord[5];
  rTuneFO.AktKauBud   := Filter_GetComp(cgFilter_KauBud);
  rTuneFO.AktKauBudN  := Filter_GetWord(cgFilter_KauBud);

  rTuneFO.FopPsLikv   := UserDeskRep.ResWord[8];
  rTuneFO.FopMeanType := UserDeskRep.ResWord[4];
  rTuneFO.FopPlatMean := UserDeskRep.ResComp[3];
}

#ifndef _OFPJSET_
// -----------------------------------------------------------------------------
// построение дерева
Function BuildNewTree: boolean;
{
  // заполнение rTuneFO
  rTuneFO_Fill;
  BuildNewTree := piMakeAkt.BuildNewTree(rTuneFO, 1, rTuneFO.IsArchived, 0);
  isBuild  := true;
}

// -----------------------------------------------------------------------------
// запуск интерфейса просмотра дерева
Procedure RunTreeSeeInterface;
{
  RunInterface('RepFO', rTuneFO);
}
#end

#include fPeriods.vpp // Period_Check

// -----------------------------------------------------------------------------
// проверка корректности записи настройки
Function UserDeskRep_CheckRecord(_isLevelItogo: boolean; _GroupContent: string): boolean;
{
  UserDeskRep_CheckRecord := true;

  // проверяем диапазон дат
  if IsBit(parFiltr1, cgFlPos_DateForm)
    if not Period_Check(UserDeskRep.ResDate[5], UserDeskRep.ResDate[6], false, false)
    {
      UserDeskRep_CheckRecord := false;
      exit;
    }

  if IsBit(parFiltr1, cgFlPos_PlanDate)
    if not Period_Check(UserDeskRep.ResDate[1], UserDeskRep.ResDate[2], false, false)
    {
      UserDeskRep_CheckRecord := false;
      exit;
    }

  if IsBit(parFiltr1, cgFlPos_FactIsp)
    if not Period_Check(UserDeskRep.ResDate[3], UserDeskRep.ResDate[4], false, false)
    {
      UserDeskRep_CheckRecord := false;
      exit;
    }

  // нет флажка Формировать доп.уровень - нужно чтобы был уровень в настройке
  if not _isLevelItogo
  {
    var wasError: boolean;
    wasError := false;

    if (not isValid(#RepGrLst))
    {
      wasError := true;
      message(''#3'Выберите значение в поле "Группировка" или'+
           ''#13#3'поставьте флажок "Формировать доп.нулевой уровень"!', warning);
    }
    else
      if (trim(_GroupContent) = '')
      {
        wasError := true;
        message(''#3'У выбранной настройки отсутствуют уровни группировки.'+
             ''#13#3'Задайте параметры группировки в отчете или'+
             ''#13#3'поставьте флажок "Формировать доп.нулевой уровень"!', warning);
      }

    if wasError
    {
      SelectField(#RepGrLst.Name);
      UserDeskRep_CheckRecord := false;
      exit;
    }
  }

  if (trim(UserDeskRep.RepName) = '')
  {
    message(''#3'Укажите наименование настройки!', warning);
    SelectField(#UserDeskRep.RepName);
    UserDeskRep_CheckRecord := false; exit;
  }
}

Panel procUserDeskRep Table UserDeskRep;

HandleEvent
cmSetDefault:
{
  // откроем окно редактирования
  PutCommand(cmValue1);

  UserDeskRep.nRep        := nReport;
  UserDeskRep.OwnName     := UserName;
  UserDeskRep.RepName     := 'Без имени';
  UserDeskRep.dRep        := Cur_Date;

  UserDeskRep.ResWord[2]  := 1; // Тип основания
  UserDeskRep.ResWord[21] := 0; // Статус
  UserDeskRep.ResWord[22] := cgOfpTP_Reglament;  // Вид платежа
  UserDeskRep.ResComp[14] := 0;
  UserDeskRep.ResComp[8]  := 0;
  UserDeskRep.ResWord[9]  := 0;
  UserDeskRep.ResName[9]  := cgTreeNew_ItogoDef; // Итого по отчету
  UserDeskRep.ResWord[5]  := 0;
  UserDeskRep.ResWord[14] := 11111111b; // видимость колонок

  SetViewFields;
}
cmCheckField:
{
  case CurField of
    #ParFiltr1,
    #ParFiltr2:
    {
      SetParFiltr(ParFiltr1, ParFiltr2, UserDeskRep.ResWord[1], UserDeskRep.ResWord[15]);
      SetModified(true);
      SetViewFields;
    }
    #UserDeskRep.ResWord[9]:
    {
      SetViewFields;
    }
    // настройка Формирование сумм
    #UserDeskRep.ResWord[6]:
    {
      // для перерисовки fValuta
      ReReadRecord(#KlValTree);
      SetViewFields;
    }
    // фильтр Ликвидность
    #UserDeskRep.ResWord[8] :
    {
      UserDeskRep.ResWord[4] := mtNOTDEFINED; // тип  ПС
      UserDeskRep.ResComp[3] := 0; // само ПС
      SetViewFields;
    }
    // фильтр Тип ПС
    #UserDeskRep.ResWord[4] :
    {
      if (UserDeskRep.ResWord[4] <> word(OldFieldValue)) // изменилось
      {
        UserDeskRep.ResComp[3] := 0; // само ПС
        SetViewFields;
      }
    }
  end;

  ReScanPanel(#UserDeskRep);
}
cmCheckRecord:
{
  // проверим настройку
  if not UserDeskRep_CheckRecord(IsBit(UserDeskRep.ResWord[9], 0), GroupContent)
  {
    abort;
    exit;
  }
}
cmPositionChanged:
{
  SetViewFields;
}
cmInsertRecord:
{
  insert current UserDeskRep;
}
cmUpdateRecord:
{
  update current UserDeskRep;
}
cmDeleteRecord:
{
  piTuneIer.DeleteUserDeskRep(UserDeskRep.nRec);
}
end; // HandleEvent
end; // panel

#ifndef _OFPJSET_
#include ofpset1.vpp // OnDefault, OnAttrib
#end
#include ofpset2.vpp // OnEdit, OnSaveDoc, OnRestoreDoc, OnAddNewRec, OnValue1

// -----------------------------------------------------------------------------
// Закрытие интерфейса
Procedure DoneGlobal;
{
   #mFreeCrossVipRef (piFunOfp);
   #mFreeCrossVipRef (piAktSum);
   #mFreeCrossVipRef (piClearing);

   #mFreeVipInterface(piFunOFP);
   #mFreeVipInterface(piAktSum);
   #mFreeVipInterface(piClearing);

   #mFreeVipInterface(piPickDoc);
   #ifndef _OFPJSET_
   #mFreeVipInterface(piMakeAkt);
   #end
   #mFreeVipInterface(piTuneIer);
   #mFreeVipInterface(iGetKau);
   #mFreeVipInterface(piOfpPrd);
}

///////////////////// ОБРАБОТКА СОБЫТИЙ ИНТЕРФЕЙСА /////////////////////////////
//******************************************************************************
HandleEvent
cmInit:
{
  // загрузка библиотеки
  SetViewFields;
  savUserDeskRep := 0;
  nReport := nrepFIN_REGISTER; // номер отчета для журнала фин.обязательств
  isBuild := false;

  #mFill_MeanType(cgOfpMT_LicvHigh, arrMTs_High, arrMTw_High);
  #mFill_MeanType(cgOfpMT_LicvLow, arrMTs_Low, arrMTw_Low);

  #ifdef _OFPJSET_
  // запретим выбор
  ClearFieldOption( #ModelName, ofSelecTable);
  // правда, могли уже удалить эту настройку и создать у др.пользователя
  #end
  // попробуем найти последнюю настройку, по которой строили отчет
  var rec: comp;
  rec := piTuneIer.GetLastFlagok( nReport);

  if (GetFirst UserDeskRep where ((rec == UserDeskRep.nRec)) <> tsOk)
   // нет записей - создадим
    if (Getfirst UserDeskRep <> tsOk)
    { /*PutCommand(cmAddNewRec);*/ }
  fPeriodName   := 'фильтр';
}
cmDone:
{
  DoneGlobal;
}
cmPick:
{
  case CurField of
    //-----------------------------------------------------
    // НАСТРОЙКИ
    #RepGrLst.Name:  //'группировка договоров
    {
      if (RunInterface('RGroupEditorPK', NReport, 10, UserDeskRep.ResComp[9]) = cmDefault)
      {
        // изменим наз.настройки, если оно не менялось
        if (UserDeskRep.RepName = 'Без имени') or
           (trim(UserDeskRep.RepName) = '')
          set UserDeskRep.RepName = RepGrLst.name;
      }

      // Пир 102.42831 - обновлять настройку группировки (сортировки) сразу
      set UserDeskRep.ResComp[9] := UserDeskRep.ResComp[9];
      ReReadRecord(#RepGrLst);
      // название группировки на экране
      set UserDeskRep.ResName[1] := piTuneIer.GetGroupLstName(UserDeskRep.ResComp[9]);
      // настройки, которые зависят от настройки группировки
      SetViewFields;
      SetViewParams;
    }
    #RepGrLst2.Name:  // сортировка листьев
    {
      // 1 - код сортировки в пределах отчета
      if (RunInterface('GetRepSort', nReport, 1, UserDeskRep.ResComp[19]) <> cmCancel)
      {}
      // Пир 102.42831 - обновлять настройку группировки (сортировки) сразу
      set UserDeskRep.ResComp[19] := UserDeskRep.ResComp[19];
      ReReadRecord(#RepGrLst2);
      // название сортировки на экране
      set UserDeskRep.ResName[19] := piTuneIer.GetSortLstName(UserDeskRep.ResComp[19]);
    }
    #fFieldVisible:
    {
      RunWindowModal(wTuning);
    }
    #fPeriodT:
    {
      // выбор типа периода
      if GetFpPeriodT(UserDeskRep.ResComp[14], UserDeskRep.ResComp[8], piFunOFP.GetTune_TekTPP)
      {
        set UserDeskRep.ResComp[14] := UserDeskRep.ResComp[14];
        set UserDeskRep.ResComp[8]  := UserDeskRep.ResComp[8];
        // перерисуем поля Тип периода и Период
        SetViewFields;
      }
    }
    #fPeriod:
    {
      // выбор типа периода
      if GetFpPeriod(UserDeskRep.ResComp[14], UserDeskRep.ResComp[8], cgSetOFPTuneDefault)
      {
        set UserDeskRep.ResComp[14] := UserDeskRep.ResComp[14];
        set UserDeskRep.ResComp[8]  := UserDeskRep.ResComp[8];
      }
    }
    #ModelName:
    {
      if (RunInterface('GetOFPModel', cgiPick, UserDeskRep.ResComp[6], comp(0)) <> cmCancel)
        set UserDeskRep.ResComp[6] := UserDeskRep.ResComp[6];
    }
    #DiapasonSumm: // диапазоны сумм
    {
      if (RunInterface('GalIndexAll', cgiPick, 90, 0, 0, UserDeskRep.ResComp[11]) <> cmCancel)
        set UserDeskRep.ResComp[11] := UserDeskRep.ResComp[11];
    }
    #CatZadolj: // категории задолженности
    {
      if (RunInterface('GalIndexAll', cgiPick, 91, 0, 0, UserDeskRep.ResComp[13]) <> cmCancel)
        set UserDeskRep.ResComp[13] := UserDeskRep.ResComp[13];
    }
    #PrcZadolj: // диапазоны задолженности
    {
      if (RunInterface('GalIndexAll', cgiPick, 92, 0, 0, UserDeskRep.ResComp[15]) <> cmCancel)
        set UserDeskRep.ResComp[15] := UserDeskRep.ResComp[15];
    }
    #fValuta: // валюта
    {
      if (RunInterface('GetValKod', UserDeskRep.ResComp[12]) <> cmCancel)
      {
        ReReadRecord(#KlValTree); // для перерисовки fValuta
        set UserDeskRep.ResComp[12] := UserDeskRep.ResComp[12];
      }
    }

    #sXLT : // Excel-шаблон
    {
      var sXLTID, sXLTFileName: string;

      sXLTID       := 'F_OFP\ofpaktse';
      sXLTFileName := piFunOfp.GetTune_Excel_RepAkt;

      RunInterface('xlRepSetup', cgxlRepSetupRunMode_ErrMessage, sXLTID, sXLTFileName);
    }

    // -------------------------------------------------------------------------
    // ФИЛЬТРЫ
    // множественные
    #Filter_sPersons,
    #Filter_sKatOrg,
    #Filter_sFpStBud,
    #Filter_sFpCO,
    #Filter_sDogovor,
    #Filter_sBaseDoc,
    #Filter_sGroupOfp,
    #Filter_sKatStroy:
    {
      var _wKau, _FltPos : word;
      _FltPos := FltPos_By_Fld(CurField);
      _wKau   := wKau_By_FltPos(_FltPos);

      MyPickRep2Marker(iGetKau.GetMarkerName(_wKau), _FltPos);

      if (iGetKau.GetCodeKau(cgiPickMult or cgiNotClear, _wKau, comp(0)) <> 0)
        MyMarker2PickRep(iGetKau.GetMarkerName(_wKau), _FltPos);
    }
    #Filter_sKatDoc
    , #Filter_sPriority
    , #Filter_sAktSum:
    {
      var _wFld, _FltPos : word;
      _FltPos := FltPos_By_Fld(CurField);
      _wFld   := wKau_By_FltPos(_FltPos);

      On_wPick(CurField, ak_Mrk[_FltPos].lAdr);
    }
    #Filter_sKatNotes:
    {
      var _wFld, _FltPos : word;
      _FltPos := FltPos_By_Fld(CurField);
      _wFld   := wKau_By_FltPos(_FltPos);

      if GetMrkByFld(ak_Mrk[_FltPos].lAdr, ak_Mrk[_FltPos].sName, _wFld)
        if InitMrkByFld(ak_Mrk[_FltPos].lAdr, ak_Mrk[_FltPos].sName, _wFld)
        {}

      Mark2PicksFuncs.PickRep2Marker(ak_Mrk[_FltPos].sName, _FltPos, cgNrec0, UserDeskRep.nRec);

      StoreMarker(ak_Mrk[_FltPos].lAdr, ak_Mrk[_FltPos].sName);

      ak_Mrk[_FltPos].wCount := PickMulti_cFld(_wFld, _FltPos, ak_Mrk[_FltPos].lAdr);
      Filter_SetWord(_FltPos, ak_Mrk[_FltPos].wCount);

      if (ak_Mrk[_FltPos].wCount > 1)
      {
        Mark2PicksFuncs.DelPickRep(_FltPos,UserDeskRep.nRec);
        Mark2PicksFuncs.Marker2PickRep( ak_Mrk[_FltPos].sName, _FltPos, cgNrec0, ak_Mrk[_FltPos].wCount, UserDeskRep.nRec);
        Filter_SetComp(_FltPos, 0);
      }
      else
      {
        GetMarker(ak_Mrk[_FltPos].lAdr, 0, _cRec);
        Filter_SetComp(_FltPos, _cRec);
      }

      SetViewFields;
    }
    #Filter_sKauBud:  // Фильтр по аналитике бюджетирования
    {
      RunWindowModal(wndEditKauFilter);
    }
    #fPlatMean:
    {
      if piClearing.Clearing_PickPlatMean(UserDeskRep.ResWord[4], UserDeskRep.ResComp[3], cgMessage)
        set UserDeskRep.ResComp[3] := UserDeskRep.ResComp[3];
    }
  end;
}
cmSetCurField: // перешли на желтое поле (ColorNeed)
{
  case Target of
    #RepGrLst.Name:
      if not IsValid(#RepGrLst)
        PutCommand(cmPick);
  end;
}
cmDelOnProtect:
{
  case CurField of
    #ModelName:
    {
      set UserDeskRep.ResComp[6] := 0; // модель
    }
    #RepGrLst.Name:
    {
      set UserDeskRep.ResComp[9] := 0;
      set UserDeskRep.ResName[1] := '';

      // настройки, которые зависят от настройки группировки
      SetViewFields;
      SetViewParams;
    }
    #RepGrLst2.Name:
    {
      set UserDeskRep.ResComp[19] := 0;
      set UserDeskRep.ResName[19] := '';
    }
    #fPeriodT:
    {
      // период и тип периода
      set UserDeskRep.ResComp[14] := 0;  // по умолчанию - не определен
      set UserDeskRep.ResComp[8]  := 0;
      // перерисуем поля Тип периода и Период
      SetViewFields;
    }
    #fPeriod:
    {
      // период
      set UserDeskRep.ResComp[8] := 0;
    }
    #DiapasonSumm:
    {
      set UserDeskRep.ResComp[11] := 0;
    }
    #Filter_sKatOrg,
    #Filter_sFpStBud,
    #Filter_sFpCO,
    #Filter_sPersons,
    #Filter_sDogovor,
    #Filter_sBaseDoc,
    #Filter_sGroupOfp,
    #Filter_sAktSum,
    #Filter_sPriority,
    #Filter_sKatDoc,
    #Filter_sKatNotes,
    #Filter_sKatStroy:
    {
      Report_ClearPole(CurField);
    }
    #Filter_sKauBud:
    {
      Report_ClearPole(CurField);
      set UserDeskRep.ResWord[5] := 0;
    }
    #FilterWkau:
    {
      Filter_Clear(cgFilter_KauBud);
      set UserDeskRep.ResWord[5] := 0;
    }
    #UserDeskRep.ResWord[4]:
    {
      set UserDeskRep.ResWord[4] := 0;
    }
    #fPlatMean:
    {
      set UserDeskRep.ResComp[3] := 0; // само ПС
    }
    #FilterCkauS:
    {
      Filter_Clear(cgFilter_KauBud);
    }
  end;
}
cmHotKeys :
{
  PutHotCommand(RunMenu('mnuAktS'));
}
#ifndef _OFPJSET_
cmDefault:
{
  if (isNew and not isModified)
    PutCommand(cmEdit);
  else
    OnDefault;
  Abort;
}
cmAttrib:
{
  OnAttrib;
}
#else // _OFPJSET_
cmDefault:
{
  if UpdateTable
    // флажок последнего отчета
    if piTuneIer.SetLastFlagok(UserDeskRep.nRec)
    {
      rTuneFO_Fill; // заполнение rTuneFO
      parTuneFO := rTuneFO; // вернем параметр в вызывающий интерфейс
      CloseInterface( cmDefault);
    }

  Abort;
}
#end
//-------------------------
cmEdit      : OnEdit;
cmSaveDoc   : OnSaveDoc;    // сохранить настройку    << Ctrl+F2 >>
cmRestoreDoc: OnRestoreDoc; // восстановить настройку << Ctrl+F3 >>
cmAddNewRec : OnAddNewRec;  // добавление настройки
cmValue1    : OnValue1;
// -----------------------------------------------------------------------------
end; // HandleEvent
End. // interface

//------------------------------------------------------------------------------
#ifndef __OFPAKTS_MNU__
#define __OFPAKTS_MNU__
mnuAktS Menu
{
  - 'Просмотр последнего отчета', cmAttrib, 'Просмотр последнего отчета', hcBudgetLFProsotrPoslednegoOtcheta, 'Ctrl+Enter', kbCtrlEnter, sci1Esc;
-----------;
  - 'Сохранение настройки',  cmSaveDoc,    'Сохранение настройки',  hcHotKeySaveDoc,    'Ctrl+F2', kbCtrlF2, sci1Esc,,,, bmpCopyDoc;
  - 'Копирование настройки', cmRestoreDoc, 'Копирование настройки', hcHotKeyRestoreDoc, 'Ctrl+F3', kbCtrlF3, sci1Esc,,,, bmpPasteDoc;
}
#end
