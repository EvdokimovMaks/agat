#component "AGAT"
interface MWRowFieldCommon;
  var
    fLevel    : integer;
    fEnabled  : boolean;
    fTreeField: longint;
    iGetKau   : GetKau;
  function oMWRowField.GetName: string;
  {
    result := '';
  }
  function oMWRowField.GetNumber: word;
  {
    result := -1;
  }
  function oMWRowField.Pick(var buffer: ttRow_p): boolean;
  {
    result := false;
    if (buffer.nrec > 0)
      result := true;
  }
  function oMWRowField.GetValue(buffer: ttRow): string;
  {
    if (buffer = buffer) { }
    result := '';
  }
  function oMWRowField.GetColumnWidth: integer;
  {
    result := 50;
  }
  function GetValueNRec(buffer: ttRow): comp;
  {
    result := buffer.nrec;
  }
  procedure SetValueNRec(_nrec: comp; var buffer: ttRow);
  {
    buffer.nrec := _nrec;
  }
  procedure SetValueString(_Value: string; var buffer: ttRow_p);
  {
    if (buffer = buffer) { };
    _value := _value;
  }
  procedure CopyValue(srcBuffer: ttRow; var destBuffer: ttRow);
  {
    SetValueNRec(GetValueNRec(srcBuffer), destBuffer);
  }
  function GetKodGroup: word;
  {
    result := 0;
  }
  function isProtected: boolean;
  {
    result := true;
  }
  property Level: integer absolute fLevel;
  property Enabled : boolean absolute fEnabled;
  property TreeField: longint absolute fTreeField;
  property KodGroup: word read GetKodGroup;
end.

interface MWRowField_Person;

  create view
  as select p.Nrec
  from persons p, appointments app;

  function oMWRowField.GetName: string;
  {
    result := 'Сотрудник';
  }
  function oMWRowField.GetNumber: word;
  {
    result := 0;
  }
  function oMWRowField.Pick(var buffer: ttRow_p): boolean;
  {
    var _c: comp;
    _c := buffer.cPerson;
    if iGetKau.GetCodeKau(0, 3, _c) > 0
    {
      buffer.cPerson := _c;
      if getfirst p where ((_c == p.nrec)) = tsOk
        if getfirst app where ((p.appointcur == app.nrec)) = tsOk
          if app.post <> 0
            buffer.cPost := app.post;
      result := true;
    }
    else
    {
      result := false;
    }
  }
  function oMWRowField.GetValue(buffer: ttRow): string;
  {
    result := if(getanykau(0, 3, buffer.cPerson),givenanname(1),'');
  }
  function oMWRowField.GetColumnWidth: integer;
  {
    result := 30;
  }
  function oMWRowField.GetValueNRec(buffer: ttRow): comp;
  {
    result := buffer.cPerson;
  }
  procedure oMWRowField.SetValueNRec(_nrec: comp; var buffer: ttRow);
  {
    buffer.cPerson := _nrec;
  }
  function oMWRowField.GetKodGroup: word;
  {
    result := 3;
  }
end.

interface MWRowField_Post;
  function oMWRowField.GetName: string;
  {
    result := 'Должность';
  }
  function oMWRowField.GetNumber: word;
  {
    result := 1;
  }
  function oMWRowField.Pick(var buffer: ttRow_p): boolean;
  {
    var _c: comp;
    _c := buffer.cPost;
    if iGetKau.GetCodeKau(0, 36, _c) > 0
    {
      buffer.cPost := _c;
      result := true;
    }
    else
    {
      result := false;
    }
  }
  function oMWRowField.GetValue(buffer: ttRow): string;
  {
    result := if(getanykau(0, 36, buffer.cPost),givenanname(1),'');
  }
  function oMWRowField.GetColumnWidth: integer;
  {
    result := 20;
  }
  function oMWRowField.GetValueNRec(buffer: ttRow): comp;
  {
    result := buffer.cPost;
  }
  procedure oMWRowField.SetValueNRec(_nrec: comp; var buffer: ttRow);
  {
    buffer.cPost := _nrec;
  }
  function oMWRowField.GetKodGroup: word;
  {
    result := 36;
  }
end.

interface MWRowField_KatStroy;
  create view v
  var
    _ckatstroy: comp;
  as select katkau.Nrec
  from katkau, spsetan, katmarsh
  where ((
    0               /== katkau.isactive  and
    40              /== katkau.upgroup   and
    katkau.kodgroup /== spsetan.kodgrkau and
    _ckatstroy      /== spsetan.ckau     and
    2               /== katmarsh.tobject and
    katkau.kodgroup /== katmarsh.cobject and
    1               /== katmarsh.active
  ));
  create view v1
  var
    _ckatmarsh: comp;
  as select msp.Nrec
  from marsh_sp msp
  where ((
    _ckatmarsh == msp.cmarsh
  ));
  create view v2
  var
    _ckatstroy: comp;
  as select sm.Nrec
  from specmtr sm, spdocs spd, dogovor d, dogovor d1
  where ((
    0001000000000001h /== sm.csaldtune and
    1723              /== sm.cotable and
    _ckatstroy        /== sm.cobj and
    sm.cspec          /== spd.nrec and (spd.tidk = 401 or spd.tidk = 400) and
    spd.cdoc          /== d.nrec and (d.direct = 1) and
    d.cdogovor         == d1.nrec
  )) and d.direct=1;
  function oMWRowField.GetName: string;
  {
    result := 'Заказ';
  }
  function oMWRowField.GetNumber: word;
  {
    result := 2;
  }
  function oMWRowField.Pick(var buffer: ttRow_p): boolean;
  {
    var _c, _c1: comp;
    _c := buffer.cKatStroy;
    if iGetKau.GetCodeKau(0, 40, _c) > 0
    {
      buffer.cKatStroy := _c;
      v._ckatstroy := _c;
      if v.getfirst viewtable = tsOk
      {
        buffer.cKatMarsh := v.katmarsh.nrec;
        v1._ckatmarsh := v.katmarsh.nrec;
        if v1.getfirst msp = tsOk
        {
          _c1 := v1.msp.nrec;
          if (v1.getnext msp <> tsOk) buffer.cMarshSp := _c1;
        }
      }
      else
      {
        buffer.cKatMarsh := 0;
        buffer.cMarshSp := 0;
      }
      v2._ckatstroy := _c;
      if v2.getfirst viewtable = tsOk
      {
        if v2.d.tidk = 401
          buffer.sBase := 'Договор №'+v2.d1.nodoc+' от '+DateToStr(v2.d1.ddoc,'DD.MM.YYYY');
        else
          buffer.sBase := 'Договор №'+v2.d.nodoc+' от '+DateToStr(v2.d.ddoc,'DD.MM.YYYY');
      }
      result := true;
    }
    else
    {
      result := false;
    }
  }
  function oMWRowField.GetValue(buffer: ttRow): string;
  {
    result := if(getanykau(0, 40, buffer.cKatStroy),givenanname(1),'');
  }
  function oMWRowField.GetColumnWidth: integer;
  {
    result := 10;
  }
  function oMWRowField.GetValueNRec(buffer: ttRow): comp;
  {
    result := buffer.cKatStroy;
  }
  procedure oMWRowField.SetValueNRec(_nrec: comp; var buffer: ttRow);
  {
    buffer.cKatStroy := _nrec;
  }
  function oMWRowField.GetKodGroup: word;
  {
    result := 40;
  }
end.

interface MWRowField_KatMarsh;

  table struct tt (
    cRec: comp,
    KatStroyName: string,
    KatMarshName: string,
    KatMarshShifr: string,
    KatMarshActive: word
  ) with index (
    i01 = KatStroyName + KatMarshName + KatMarshActive
  );

  create view
  as select tt.cRec
  from tt;

  function oMWRowField.GetName: string;
  {
    result := 'РКМ';
  }
  function oMWRowField.GetNumber: word;
  {
    result := 3;
  }

  window wGetKatMarsh 'Выбор маршрутной карты', doaccept, escclose;
    browse brKatMarsh;
    table tt;
    fields
      if(tt.KatMarshActive=1,'+','') '+': [2], protect, noautosize;
      tt.KatStroyName  'Заказ' : [10], protect;
      tt.KatMarshName  'МК'    : [20], protect;
      tt.KatMarshShifr 'Код'   : [10], protect;
    end;
  end;

  function oMWRowField.Pick(var buffer: ttRow_p): boolean;
  {
    var _c : comp;
    _c := buffer.cKatStroy;
    delete all tt;

    if buffer.cKatStroy <> 0
    {
      insert tt (cRec,KatStroyName,KatMarshName,KatMarshShifr,KatMarshActive)
      select katmarsh.nrec, katkau.name, katmarsh.name, katmarsh.shifr, katmarsh.active
      from katkau, katmarsh, spsetan
      where ((
        0               /== katkau.isactive  and
        40              /== katkau.upgroup   and
        2               /== katmarsh.tobject and
        katkau.kodgroup /== katmarsh.cobject and
        katkau.kodgroup /== spsetan.kodgrkau and
        _c              /== spsetan.ckau
      ));
    }

    if recordsintable(#tt) = 0
    {
      insert tt (cRec,KatStroyName,KatMarshName,KatMarshShifr,KatMarshActive)
      select katmarsh.nrec, katkau.name, katmarsh.name, katmarsh.shifr, katmarsh.active
      from katkau, katmarsh
      where ((
        0               /== katkau.isactive  and
        40              /== katkau.upgroup   and
        2               /== katmarsh.tobject and
        katkau.kodgroup /== katmarsh.cobject
      ));
    }

    if runwindowmodal(wGetKatMarsh) = cmDefault
    {
      buffer.cKatMarsh := tt.crec;
      buffer.cMarshSp := 0;
      result := true;
    }
    else
    {
      result := false;
    }
  }

  function oMWRowField.GetValue(buffer: ttRow): string;
  {
    result := if(getanykau(0, 24, buffer.cKatMarsh),givenanname(1),'');
  }
  function oMWRowField.GetColumnWidth: integer;
  {
    result := 10;
  }
  function oMWRowField.GetValueNRec(buffer: ttRow): comp;
  {
    result := buffer.cKatMarsh;
  }
  procedure oMWRowField.SetValueNRec(_nrec: comp; var buffer: ttRow);
  {
    buffer.cKatMarsh := _nrec;
  }
  function oMWRowField.GetKodGroup: word;
  {
    result := 24;
  }
end.

interface MWRowField_MarshSp;
  table struct tm (
    nrec: comp,
    cparent: comp,
    cOpe: comp,
    wOpe: word,
    lvl: byte
  ) with index (
    i01 = cparent,
    i02 = lvl + wOpe,
    i03 = nrec
  );
  create view
  var
    _cKatMarsh: comp;
    aParent: comp;
  as select tm.nrec
  from tm, tm brtm
  where ((
    aParent == brtm.cparent
  ));
  function oMWRowField.GetName: string;
  {
    result := 'Работы';
  }
  function oMWRowField.GetNumber: word;
  {
    result := 4;
  }
  window wGetMarshSp 'Выбор операции МК', doaccept, escclose;
    tree trMarshSp;
    table brtm;
    fields
      if(getanykau(0, 61, brtm.nrec),givenanname(1),'') 'Операция': protect;
    end;
  end;
  tableevent table brtm;
    cmTreeTop           : aParent := 0;
    cmTreeDown          : aParent := brtm.nrec;
    cmTreeUp            : aParent := brtm.cParent;
    cmTreeNodeType      : if (TreeIsTerminal(trMarshSp)) TreeSetNodeType(trMarshSp, ntfText);
    cmTreeNeedOwner     : TreeJumpToRecord(trMarshSp, brtm.cParent);
  end;
  procedure filltm(_lvl: byte);
  {
    if getfirst tm where ((_lvl /== tm.lvl and 24 /== tm.wOpe)) <> tsOk
      exit;
    insert tm (nrec, cparent, cOpe, wOpe, lvl)
    select msp.nrec, tm1.nrec, msp.nOpe, msp.wope, _lvl+1
    from tm tm1, marsh_sp msp
    where ((
      _lvl /== tm1.lvl and
      24   /== tm1.wOpe and
      tm1.cOpe /== msp.cmarsh
    ));
    filltm(_lvl+1);
  }
  function oMWRowField.Pick(var buffer: ttRow_p): boolean;
  {
    result := false;
    _cKatMarsh := buffer.cKatMarsh;
    if _cKatMarsh > 0
    {
      delete all tm;
      insert tm set tm.nrec := 0, tm.cOpe := _cKatMarsh, tm.wOpe := 24, tm.lvl := 0;
      filltm(0);
      delete all tm where ((0 == tm.nrec));
      aParent := 0;
      rereadrecord;
      if runwindowmodal(wGetMarshSp) = cmDefault
      {
        buffer.cMarshSp := brtm.nrec;
        result := true;
      }
    }
    else
    {
      message('Укажите маршрутную карту');
    }
  }
  function oMWRowField.GetValue(buffer: ttRow): string;
  {
    result := if(getanykau(0, 61, buffer.cMarshSp),givenanname(1),'');
  }
  function oMWRowField.GetColumnWidth: integer;
  {
    result := 20;
  }
  function oMWRowField.GetValueNRec(buffer: ttRow): comp;
  {
    result := buffer.cMarshSp;
  }
  procedure oMWRowField.SetValueNRec(_nrec: comp; var buffer: ttRow);
  {
    buffer.cMarshSp := _nrec;
  }
  function oMWRowField.GetKodGroup: word;
  {
    result := 61;
  }
end.

interface MWRowField_Base;
  table struct tBases (
    Value: string
  ) with index (
    i01 = Value (unique)
  );
  file f;
  create view
  as select tBases.Value
  from tBases;
  window wSelectBase 'Выбор основания' escclose doaccept;
    browse brmain;
    table tBases;
    fields
      tBases.Value 'Основание': protect;
    end;
  end;
  function oMWRowField.GetName: string;
  {
    result := 'Основание';
  }
  function oMWRowField.GetNumber: word;
  {
    result := 0;
  }
  Function GetMemoText: string;
  {
    var s: string;
    f.readln(s);
    f.Close;
    result := s;
  }
  function oMWRowField.Pick(var buffer: ttRow_p): boolean;
  {
    result := false;
    delete all tBases;
    insert tBases (Value)
    select if(f.OpenMemo(AM.Mem), GetMemoText, '')
    from SpMnPlan MainSMP, MnPlan, SpMnPlan SMP, AllMemo AM
    where ((
      buffer.cSpMnPlan /== MainSMP.nRec and
      MainSMP.cMnPlan  /== MnPlan.nRec and
      MnPlan.nRec      /== SMP.cMnPlan and
      11038            /== AM.wTable and
      SMP.nRec         /== AM.cRec
    )) ignore_errors (tsDuplicateKey);
    if runwindowmodal(wSelectBase) = cmDefault
    {
      buffer.sBase := tBases.Value;
    }
  }
  function oMWRowField.GetValue(buffer: ttRow): string;
  {
    result := buffer.sBase;
  }
  function oMWRowField.GetColumnWidth: integer;
  {
    result := 10;
  }
  function oMWRowField.GetValueNRec(buffer: ttRow): comp;
  {
    if (buffer = buffer) {};
    result := 0;
  }
  procedure oMWRowField.SetValueNRec(_nrec: comp; var buffer: ttRow);
  {
    if (_nrec = 0) { buffer.nRec := buffer.nRec; }
  }
  function oMWRowField.GetKodGroup: word;
  {
    result := 0;
  }
  function oMWRowField.isProtected: boolean;
  {
    result := false;
  }
  procedure oMWRowField.SetValueString(_Value: string; var buffer: ttRow_p);
  {
    buffer.sBase := _Value;
  }
end.
