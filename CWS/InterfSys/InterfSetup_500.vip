#component "M_MNPLAN"
VipInterface iInterfSetup_500 Implements oInterfSetup licensed(free);
Interface iInterfSetup_500 'Настройка' (, hcNoContext,) EscClose, doAccept;
show at (,,76,21);

table struct tFields (Number: word, Name: string[80], IName: string[80]) with index ( i01 = Number (unique) );

var
  iGetKau: GetKAU;

Create View
Var
  cFormPl: Comp;
As Select *
From
  FormPl, tFields, tFields tBrFields, KatKAU KatKAUSt
Where
((
  cFormPl            == FormPl.NRec and
  FormPl.ResWord[10] == KatKAUSt.KodGroup
));

Parameters
  cFormPl;

window wGetField 'Доступные поля', escClose, DoAccept;
  browse BrFields;
  table tBrFields;
  fields
    tBrFields.Name 'Наименование';
  end;
end;

//=======================================================================
//'ИНИЦИАЛИЗАЦИЯ ИНТЕРФЕЙСА
//-----------------------------------------------------------------------
Function asInitInter(p_cFormPl: Comp): Boolean;
{
  if (p_cFormPl = 0)
  {
  }
  asInitInter := True;
}

//=======================================================================
//'ЗАВЕРШЕНИЕ РАБОТЫ С ИНТЕРФЕЙСОМ
//-----------------------------------------------------------------------
Function asDoneInter: Boolean;
{
  asDoneInter := True;
}

//=======================================================================
//'ПО КОМАНДЕ CMSETDEFAULT
//-----------------------------------------------------------------------
Procedure asOnCmSetDefault;
{
 //
}

//=======================================================================
//'ПРИ ВСТАВКЕ НАСТРОЙКИ В ШАБЛОН
//-----------------------------------------------------------------------
Procedure asOnSetWayAccou(p_cWayAccou: Comp);
{
  if (p_cWayAccou = 0)
  {
  }
 //'
}

//=======================================================================
//'Получить установить параметр
//-----------------------------------------------------------------------
Function SetGetParam (Var  FlagParam: LongInt;
Var  Direction: word;
Var  cValue: Comp;
Var  dValue: Double;
Var  lValue: LongInt;
Var  wValue: Word;
Var  dtValue: Date;
Var  dttValue: DateTime;
Var  sValue: string[250]): Boolean;
{
  if (cValue = 0) or (dValue = 0) or (lValue = 0) or (wValue = 0)  or (dtValue = date(0, 0, 0)) or (dttValue = _FromSec100(0)) or (sValue = '') or (flagParam = 0) or(Direction = 0)
  {
  }
  SetGetParam := True;
}
//-----------------------------------------------------------------------
function GetFieldName(FieldNumber: word): string;
{
  result := '';
  if getfirst tFields where ((FieldNumber == tFields.Number)) = tsOk
    result := tFields.Name;
}

Panel PanelSetup;
  Table FormPl;

  Screen OtchPrm  'Настройка'(,, sci1Esc);
    fields
      [sField1] GetFieldName(FormPl.ResWord[1]) ('Поле 1',, sci1Esc): Protect, PickButton;
      FormPl.ResLngInt[1] ('Выполнять группировку по этому полю',, sci1Esc): noProtect;
      FormPl.ResLngInt[2] ('Поле доступно для редактирования',, sci1Esc): noProtect;
      [sField2] GetFieldName(FormPl.ResWord[2]) ('Поле 2',, sci13Esc): Protect, PickButton;
      [sField3] GetFieldName(FormPl.ResWord[3]) ('Поле 3',, sci13Esc): Protect, PickButton;
      [sField4] GetFieldName(FormPl.ResWord[4]) ('Поле 4',, sci13Esc): Protect, PickButton;
      [sField5] GetFieldName(FormPl.ResWord[5]) ('Поле 5',, sci13Esc): Protect, PickButton;
      [sField6] GetFieldName(FormPl.ResWord[6]) ('Поле 6',, sci13Esc): Protect, PickButton;

      KatKAUSt.Name ('КАУ пользовательской аналитики для отражения в колонках',, sci13Esc) : protect, pickbutton;
      [sKAUPr]  if(getanykau(0, FormPl.ResWord[10], FormPl.ResComp[1]),givenanname(1),'')  : protect, pickbutton;
      [sKAUOtr] if(getanykau(0, FormPl.ResWord[10], FormPl.ResComp[2]),givenanname(1),'')  : protect, pickbutton;
      [sKAUZar] if(getanykau(0, FormPl.ResWord[10], FormPl.ResComp[3]),givenanname(1),'')  : protect, pickbutton;
      [sKAUNObsh] if(getanykau(0, FormPl.ResWord[10], FormPl.ResComp[4]),givenanname(1),''): protect, pickbutton;
      [sKAUNObj]  if(getanykau(0, FormPl.ResWord[10], FormPl.ResComp[5]),givenanname(1),''): protect, pickbutton;
      [sKAUNPrem] if(getanykau(0, FormPl.ResWord[10], FormPl.ResComp[6]),givenanname(1),''): protect, pickbutton;
      [sKAUNOth]  if(getanykau(0, FormPl.ResWord[10], FormPl.ResComp[7]),givenanname(1),''): protect, pickbutton;
    buttons
      cmValue1, Default,, 'Сохранить',, sci1Esc;
      cmCancel,,, 'Отмена',, sci1Esc;

<<

  Настройки колонок:                 Группа Доступно
  Поле 1: .@@@@@@@@@@@@@@@@@@@@@@@@@@@ [.] ` [.] `
  Поле 2: .@@@@@@@@@@@@@@@@@@@@@@@@@@@ [.] ` [.] `
  Поле 3: .@@@@@@@@@@@@@@@@@@@@@@@@@@@ [.] ` [.] `
  Поле 4: .@@@@@@@@@@@@@@@@@@@@@@@@@@@ [.] ` [.] `
  Поле 5: .@@@@@@@@@@@@@@@@@@@@@@@@@@@ [.] ` [.] `
  Поле 6: .@@@@@@@@@@@@@@@@@@@@@@@@@@@ [.] ` [.] `

  Статьи сводного наряда:
 `Каталог пользовательской аналитики` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Статья "% выполнения работы по РКМ"`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Статья "Отработано часов по заказу"`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Группа статей "Зарплата"`           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Группа статей "Нач. общие"`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Группа статей "Нач. по объектам"`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Группа статей "Нач. премиальные"`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Группа статей "Нач. прочие"`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <.Сохранить .>         <. Отмена .>

>>
  end;
end;

Panel pnFormPl;
  Table FormPl;
  HandleEvent  //'panel

    cmUpdateRecord:
    {
      Update Current FormPl;
    }

  End;  //'he panel
End;  //'panel

//=======================================================================
HandleEvent  //'he interface
//-----------------------------------------------------------------------
  cmPick:
  {
    var i: integer;
    i := -1;
    case curfield of
      #sField1: i := 1;
      #sField2: i := 2;
      #sField3: i := 3;
      #sField4: i := 4;
      #sField5: i := 5;
      #sField6: i := 6;
      #KatKAUSt.Name:
        if runinterface(F_AN::GetKauTable, 1, 1, FormPl.ResWord[10], 0) = cmDefault
          rescanpanel(#FormPl);
      #sKAUPr:
      {
        var _c: comp;
        _c := FormPl.ResComp[1];
        if iGetKau.GetCodeKAU(0, FormPl.ResWord[10], _c) > 0
          FormPl.ResComp[1] := _c;
        rescanpanel(#FormPl);
      }
      #sKAUOtr:
      {
        var _c: comp;
        _c := FormPl.ResComp[2];
        if iGetKau.GetCodeKAU(0, FormPl.ResWord[10], _c) > 0
          FormPl.ResComp[2] := _c;
        rescanpanel(#FormPl);
      }
      #sKAUZar:
      {
        var _c: comp;
        _c := FormPl.ResComp[3];
        if iGetKau.GetCodeKAU(0, FormPl.ResWord[10], _c) > 0
          FormPl.ResComp[3] := _c;
        rescanpanel(#FormPl);
      }
      #sKAUNObsh:
      {
        var _c: comp;
        _c := FormPl.ResComp[4];
        if iGetKau.GetCodeKAU(0, FormPl.ResWord[10], _c) > 0
          FormPl.ResComp[4] := _c;
        rescanpanel(#FormPl);
      }
      #sKAUNObj:
      {
        var _c: comp;
        _c := FormPl.ResComp[5];
        if iGetKau.GetCodeKAU(0, FormPl.ResWord[10], _c) > 0
          FormPl.ResComp[5] := _c;
        rescanpanel(#FormPl);
      }
      #sKAUNPrem:
      {
        var _c: comp;
        _c := FormPl.ResComp[6];
        if iGetKau.GetCodeKAU(0, FormPl.ResWord[10], _c) > 0
          FormPl.ResComp[6] := _c;
        rescanpanel(#FormPl);
      }
      #sKAUNOth:
      {
        var _c: comp;
        _c := FormPl.ResComp[7];
        if iGetKau.GetCodeKAU(0, FormPl.ResWord[10], _c) > 0
          FormPl.ResComp[7] := _c;
        rescanpanel(#FormPl);
      }
    end;
    if i > 0
    {
      if runwindowmodal(wGetField) = cmDefault
      {
        FormPl.ResWord[i] := tBrFields.Number;
        FormPl.ResName[i] := tBrFields.IName;
      }
      rescanpanel(#FormPl);
    }
  }

  cmDelOnProtect:
  {
    var i: integer;
    i := -1;
    case curfield of
      #sField1: i := 1;
      #sField2: i := 2;
      #sField3: i := 3;
      #sField4: i := 4;
      #sField5: i := 5;
      #sField6: i := 6;
    end;
    if i > 0
    {
      FormPl.ResWord[i] := -1;
      FormPl.ResName[i] := '';
      rescanpanel(#FormPl);
    }
  }

  cmInit:
  {
    if (GetFirst FormPl <> tsOk)
    {
      Message(''#3'Ошибка поиска в таблице FormPl:'#13#3 +
      'Записи FormPl.NRec = ' + Trim(String(cFormPl)) + ' не существует'
      , Error + CancelButton);
      Abort;
      Exit;
    }
    if( LoadImplementationList('AGAT::oMWRowField', 'MWRowField_') )
    {
      delete all tFields;
      var fld: oMWRowField;
      var ifcName :string;
      var i, cnt: integer;
      cnt := GetImplementationCount;
      for( i := 0; i < cnt; i := i + 1 ) {
        clearbuffer(#tFields);
        tFields.IName :=  GetImplementationName(i);
        GetVipRef(fld,tFields.IName);
        tFields.Number := fld.GetNumber;
        tFields.Name := fld.GetName;
        insert current tFields;
      };
    };
    UnLoadImplementationList;
  }

  cmCancel:
  {
    setModified(False);
  }

  cmValue1:
  {
    update current FormPl;
    CloseInterface(cmDefault);
  }

End;  //'he interface
End.  //'interface
