#component "M_MNPLAN"

const
  cmInsertCurrentLevel = 9931;
  cmInsertChildLevel   = 9932;
end;

vipinterface iInterfSys_500 implements Util_ScrSp licensed(free);

interface iInterfSys_500;

var
  isg             : SetGetVid;
  gldt            : GlobData;
  iom             : oMainVid;
  insTbl          : InsertTblMnpl;
  iSetPl          : SetupMnf;
  stFormPlSetup   : TFormPl;
  MWMainController: iMWMainController;

create View
var
  cCurMnPlan: Comp;

as select *
from
  mnplan, FormPl,
  trow, tval
where ((
  cCurMnPlan == mnplan.nrec
));

embedded scMain interface MWMainController;
end;

Function InitInter (pGldt: GLOBDATA; piOm: oMainVid): Boolean;
{
  gldt   := pGldt;
  iom    := piOm;
  insTbl := gldt.GetInsertTblMnpl;
  iSetPl := gldt.GetSetupMnf;
  result := true;
}

Function DoneInter: Boolean;
{
  if (Not NullVipRef(gldt))
    FreeVipInterface(gldt);
  if (Not NullVipRef(insTbl))
    FreeVipInterface(insTbl);
  if (Not NullVipRef(iSetPl))
    FreeVipInterface(iSetPl);
  result := true;
}

Function SetOwner (ccMnPlan: Comp): Boolean;
{
  cCurMnPlan := ccMnPlan;
  if (getfirst  mnplan <> tsOk)
  {
    message(''#3'iInterfSys_500.SetOwner: Ошибка установки курсора на документ', Error);
    Result := false;
    exit;
  }
  if (Not iSetPl.InitAll(MnPlan.cWayAccou))
  {
    Message(''#3'Ошибка инициализации шаблона', Error);
    Result := false;
    Exit;
  }

  delete all trow;
  delete all tval;

  MWMainController.CurrentMnPlan := cCurMnPlan;
  MWMainController.CurrentSetupFormPl := stFormPlSetup.nRec;
  rereadrecord;
  result := true;
}

Procedure EventSetParVid (wFlag: Word);
{
  if wFlag = 0 { };
}

Function SetWindowVid (sp: String): Boolean;
{
  if (sp = '') { };
  result := true;
}

Function GetCurPos (var pWlist: Word): Comp;
{
  if (pWlist = 0) { }
  result := 0;
}

Procedure MySetColumnTitle;
{
}

Procedure FillHaveInReserv (Date2Q: Date);
{
  if (Date2Q <> Date2Q) { }
}

Function CheckEnableUseInterface (SysNumVid: Word; WayAccouNRec: Comp; NumVid_WayAccou: Comp; Flag: Word): Boolean;
{
  if ((SysNumVid = 0) and (WayAccouNRec = 0) and (NumVid_WayAccou = 0) and (Flag = 0)) { }
  result := true;
}

Function GetNameInter: String;
{
  result := 'iInterfSys_500';
}

Function GetNameInterPr: String;
{
  result := 'iInterfSetup_500';
}

Function GetNum: Word;
{
  result := 10500;
}

Function GetName: String;
{
  result := 'Агат. Интерфейс редактирование производственного заказа-наряда';
}

Function GetMemo (st: oSteckCommonString): Boolean;
{
  st.push('Интерфейс редактирование производственного заказа-наряда');
  st.push('Плоское представление');
  result := true;
}

Function SetGetParam (var FlagParam: LongInt; var Direction: Word; var cValue: Comp; var dValue: Double; var lValue: LongInt; var wValue: Word; var dtValue: Date; var dttValue: DateTime; var sValue: s250): Boolean;
{
  result := false;
  if ((cValue > 0) and (dValue > 0) and (lValue > 0) and (wValue > 0) and (sValue = '') and (dtValue = dttValue)) { }
  if (( Direction and 1) > 0)
  {
    case FlagParam of
      1:
      {
        if ( GetFirst Formpl where (( cValue == FormPl.NRec )) = tsOk )
        {
          stFormPlSetup := TFormPl(FormPl.buffer);
          result := true;
        }
      }
    end;
  }
}
end.
