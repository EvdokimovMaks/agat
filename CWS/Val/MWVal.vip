#component "AGAT"
interface iMWVal;

var
  fNumberOfShowedFields: byte;
  GroupDeltas: array[1..255] of byte;
  MWValFieldsManager: iMWValFieldsManager new;
  MWRow: oMWRow(iMWRow) new;
  CurMnPlan: comp;
  CurPeriod: comp;
  PeriodDBeg, PeriodDEnd: date;
  CostItemKodGr: word;
  AllVidOpl: array[1..1] of string;
create view
var
  fActiveGroupIndex: byte;
as select *
from tValFields tVF,
     tValFields tVF1, SpKAU, mnplan, fpperiod, td
where ((
  fActiveGroupIndex == tVF.GroupIndex
))
;

create view v
var _kodgr: word;
as select *
from spkau
where ((
  _kodgr == spkau.kodgrkau
));

procedure SetActiveGroup(_GroupIndex: byte);
{
  fActiveGroupIndex := _GroupIndex;
}

function GetNumberOfFieldsInGroup(_GroupIndex: byte):byte;
{
  var NumberOfFields: byte;
  NumberOfFields := 0;
  _loop tVf1 where ((_GroupIndex == tVf1.GroupIndex))
     NumberOfFields += 1;
  result := NumberOfFields;
}

function GetShowedFieldTitle(_ShowedFieldIndex: byte): string;
{
  var _ind: byte;
  _ind := GroupDeltas[fActiveGroupIndex]+_ShowedFieldIndex;
  if (getfirst tVF1 where ((fActiveGroupIndex == tVF1.GroupIndex and _ind == tVF1.FieldIndex)) = tsOk )
    result := tVF1.FieldTitle
  else
    result := '';
}

function GetShowedFieldValue(_ShowedFieldIndex: byte; Row: oMWRow): string;
{
  var _ind: byte;
  _ind := GroupDeltas[fActiveGroupIndex]+_ShowedFieldIndex;
  if (getfirst tVF1 where ((fActiveGroupIndex == tVF1.GroupIndex and _ind == tVF1.FieldIndex)) = tsOk )
    result := MWValFieldsManager.GetFieldValue(Row, tVF1.nRec)
  else
    result := '';
}

function GetShowedFieldDistribute(_ShowedFieldIndex: byte; Row: oMWRow): double;
{
  var _ind: byte;
  _ind := GroupDeltas[fActiveGroupIndex]+_ShowedFieldIndex;
  if (getfirst tVF1 where ((fActiveGroupIndex == tVF1.GroupIndex and _ind == tVF1.FieldIndex)) = tsOk )
    result := MWValFieldsManager.GetFieldDistribute(Row, tVF1.nRec)
  else
    result := 0;
}

function GetShowedFieldFontBackColor(_ShowedFieldIndex: byte; Row: oMWRow): integer;
{
  var _ind: byte;
  _ind := GroupDeltas[fActiveGroupIndex]+_ShowedFieldIndex;
  if (getfirst tVF1 where ((fActiveGroupIndex == tVF1.GroupIndex and _ind == tVF1.FieldIndex)) = tsOk )
    result := MWValFieldsManager.GetFieldFontBackColor(Row, tVF1.nRec)
  else
    result := 0;
}

function mySqlAddStr(var l: longint; s: string): longint;
{
  LogStrToFile('d:\q.txt', s);
  result := sqlAddStr(l, s);
}

procedure PrepareSqlStrCostItems(var ls: longint);
{
  var y : word = year(PeriodDBeg);
  var m : word = month(PeriodDBeg);
  var i : integer = 0;

  //отработано часов всего - по табелю
  mySqlAddStr(ls, '  select #comp(-1) as cCostItem, lstab.chasf as Summa');
  mySqlAddStr(ls, '  from LsTab');
  mySqlAddStr(ls, '  where LsTab.cLSchet = ls.Nrec and LsTab.YearN = '+y+' and LsTab.MesN = '+m);

  //отработано часов всего - по отклонениям табеля
  mySqlAddStr(ls, '  union all');
  mySqlAddStr(ls, '  select #comp(-1), variance.WorkingHours * (variance.ending - variance.beginning + 1)');
  mySqlAddStr(ls, '  from LsTab');
  mySqlAddStr(ls, '  join variance on variance.clstab = lstab.nrec');
  mySqlAddStr(ls, '  join UOWRKTABEL on UOWRKTABEL.nrec = variance.cuo');
  mySqlAddStr(ls, '  where LsTab.cLSchet = ls.Nrec and LsTab.YearN = '+y+' and LsTab.MesN = '+m);
  mySqlAddStr(ls, '    and UOWRKTABEL.num in (''ВЧ'', ''Н'', ''ОБЩ'', ''ОВ'', ''РП'', ''С'', ''Я'')');

  //отработано часов всего - ОВ по начислениям
  mySqlAddStr(ls, '  union all');
  mySqlAddStr(ls, '  select #comp(-1), so.ChasF');
  mySqlAddStr(ls, '  from sumvidop so');
  mySqlAddStr(ls, '  where so.cLSch = ls.Nrec and so.YearK = '+y+' and so.Mes = '+m+' and so.VidOpl = 204'); //518 Оплат доп. дней уход за реб. инвалид.тек

  mySqlAddStr(ls, '  union all');
  mySqlAddStr(ls, '  select #comp(-1), n.ChasF');
  mySqlAddStr(ls, '  from nachisl n');
  mySqlAddStr(ls, '  where n.cLSch = ls.Nrec and n.YearK ='+y+' and n.Mes = '+m+' and n.VidOpl = 518'); //518 Оплат доп. дней уход за реб. инвалид.тек

  //часы в командировке
  mySqlAddStr(ls, '  union all');
  mySqlAddStr(ls, '  select #comp(-2) as cCostItem, n.chasf * case when n.vidopl = 135 then 0.5 else 1 end as Summa');
  mySqlAddStr(ls, '  from nachisl n');
  mySqlAddStr(ls, '  where n.clsch = ls.Nrec and n.yearn = '+y+' and n.mesn = '+m+' and n.vidopl in (106,135) and n.cschetd=''20''');

  mySqlAddStr(ls, '  union all');
  mySqlAddStr(ls, '  select #comp(-2), so.chasf * case when so.vidoplp = 135 then 0.5 else 1 end');
  mySqlAddStr(ls, '  from sumvidop so');
  mySqlAddStr(ls, '  where so.clsch = ls.Nrec and so.yearn = '+y+' and so.mesn = '+m+' and so.vidoplp in (106,135) and so.cschetd=''20''');

  //начисления по статьям наряда
  v._kodgr := CostItemKodGr;
  v._loop spkau
  {
    if v.spkau.cNode = 00010000000008FAh continue; //Исключаем последнюю вкладку с группой статей "Начисления прочие" - от нее отказались
    var sVidOpl: string = sGetAttrId(coSpKau, v.spkau.Nrec, 0001000000000115h);
    if (sVidOpl='') continue;
    mySqlAddStr(ls, '  union all');
    mySqlAddStr(ls, '  select #comp('+v.spkau.nrec+'), n.summa');
    mySqlAddStr(ls, '  from nachisl n');
    mySqlAddStr(ls, '  where n.clsch = ls.Nrec and n.yearn = '+y+' and n.mesn = '+m+' and n.vidopl in ('+sVidOpl+') and n.cschetd=''20''');

    mySqlAddStr(ls, '  union all');
    mySqlAddStr(ls, '  select #comp('+v.spkau.nrec+'), so.summa');
    mySqlAddStr(ls, '  from sumvidop so');
    mySqlAddStr(ls, '  where so.clsch = ls.Nrec and so.yearn = '+y+' and so.mesn = '+m+' and so.vidoplp in ('+sVidOpl+') and so.cschetd=''20''');
  }

  //зарплата всего
  if count(AllVidOpl) > 0
  {
    mySqlAddStr(ls, '  union all');
    mySqlAddStr(ls, '  select #comp(0), n.summa');
    mySqlAddStr(ls, '  from nachisl n');
    mySqlAddStr(ls, '  where n.clsch = ls.Nrec and n.yearn = '+y+' and n.mesn = '+m+' and n.vidopl in (');
    for (i:=1;i<=count(AllVidOpl);i++)
      mySqlAddStr(ls, if(i>1,',','')+AllVidOpl[i]);
    mySqlAddStr(ls, '  ) and n.cschetd=''20''');

    mySqlAddStr(ls, '  union all');
    mySqlAddStr(ls, '  select #comp(0), so.summa');
    mySqlAddStr(ls, '  from sumvidop so');
    mySqlAddStr(ls, '  where so.clsch = ls.Nrec and so.yearn = '+y+' and so.mesn = '+m+' and so.vidoplp in (');
    for (i:=1;i<=count(AllVidOpl);i++)
      mySqlAddStr(ls, if(i>1,',','')+AllVidOpl[i]);
    mySqlAddStr(ls, '  ) and so.cschetd=''20''');
  }
}

procedure LoadRowValues(Row:  oMWRow);
{
  if (getfirst td where ((Row.cPerson == td.cPerson)) <> tsOk)
  {
    var ls: longint = 0;
    mySqlAddStr(ls, 'select t.cCostItem, #comp('+Row.cPerson+'), sum(t.Summa)');
    mySqlAddStr(ls, 'from LSchet ls');
    mySqlAddStr(ls, 'outer apply (');
    PrepareSqlStrCostItems(ls);
    mySqlAddStr(ls, ') t');
    mySqlAddStr(ls, 'where ls.tperson=#comp('+Row.cPerson+') and (ls.datuv=#date(0,0,0) or ls.datuv >= #date('+datetostr(PeriodDBeg,'DD,MM,YYYY')+') )');
    mySqlAddStr(ls, 'group by t.cCostItem');
    sqlSelectInto(ls, #td);
  }

  MWValFieldsManager.LoadRowValues(Row);
}

procedure DeleteRowValues(Row:  oMWRow);
{
  MWValFieldsManager.DeleteRowValues(Row);
}

function ShowedFieldIsEditable(_ShowedFieldIndex: byte; Row: oMWRow): boolean;
{
  var _ind: byte;
  _ind := GroupDeltas[fActiveGroupIndex]+_ShowedFieldIndex;
  if (getfirst tVF1 where ((fActiveGroupIndex == tVF1.GroupIndex and _ind == tVF1.FieldIndex)) = tsOk )
    result := MWValFieldsManager.FieldIsEditable(Row, tVF1.nRec)
  else
    result := false;
}

function ShowedFieldValueIsCorrect(_ShowedFieldIndex: byte; Row: oMWRow; _Value: double): boolean;
{
  var _ind: byte;
  _ind := GroupDeltas[fActiveGroupIndex]+_ShowedFieldIndex;
  if (getfirst tVF1 where ((fActiveGroupIndex == tVF1.GroupIndex and _ind == tVF1.FieldIndex)) = tsOk )
    result := MWValFieldsManager.FieldValueIsCorrect(Row, tVF1.nRec, _Value)
  else
    result := false;
}

function SetShowedFieldValue(_ShowedFieldIndex: byte; Row: oMWRow; _Value: double): boolean;
{
  var _ind: byte;
  _ind := GroupDeltas[fActiveGroupIndex]+_ShowedFieldIndex;
  if (getfirst tVF1 where ((fActiveGroupIndex == tVF1.GroupIndex and _ind == tVF1.FieldIndex)) = tsOk )
    result := MWValFieldsManager.SetFieldValue(Row, tVF1.nRec, _Value)
  else
    result := false;
}

function AddValField(_GroupIndex: byte; _FieldTitle: string; _cCostItem: comp): comp;
{
  var _FieldIndex: byte;
  if (getlast tVF1 where ((_GroupIndex == tVF1.GroupIndex)) = tsOk)
    _FieldIndex := tVF1.FieldIndex + 1
  else
    _FieldIndex := 1;
  clearbuffer(#tVF1);
  tVF1.GroupIndex := _GroupIndex;
  tVF1.FieldIndex := _FieldIndex;
  tVF1.FieldTitle := _FieldTitle;
  tVF1.cCostItem  := _cCostItem;
  insert current tVF1;
  result := tVF1.nRec;
}

window winfo;
browse br1;
table td;
fields
  td.cperson 'cperson';
  td.ccostitem 'ccostitem';
  td.summa 'summa';
end;
end;

procedure InitFields(_FormPl: TFormPl; _cMnPlan: comp);
{
  delete all tVF1;
  MWValFieldsManager.InitValFieldInterfaces;
  var _c: comp;
  _c := AddValField(1, 'Плановая'#13'трудоемкость', _FormPl.ResComp[1]);
  MWValFieldsManager.CreateMWValFieldPlanTrud(_c, _FormPl.ResComp[1], _cMnPlan);
  _c := AddValField(1, 'Процент'#13'выполнения', _FormPl.ResComp[1]);
  MWValFieldsManager.CreateMWValFieldProcTrud(_c, _FormPl.ResComp[1], _cMnPlan);
  _c := AddValField(1, 'Выраб. трудоемкость'#13'за месяц', _FormPl.ResComp[1]);
  MWValFieldsManager.CreateMWValFieldFactTrud(_c, _FormPl.ResComp[1], _cMnPlan);
  _c := AddValField(1, 'Выраб. трудоемкость'#13'за пред. месяцы', _FormPl.ResComp[1]);
  MWValFieldsManager.CreateMWValFieldPrevTrud(_c, _FormPl.ResComp[1], _cMnPlan);
  _c := AddValField(1, 'Выраб. трудоемкость'#13'полная', _FormPl.ResComp[1]);
  MWValFieldsManager.CreateMWValFieldFullTrud(_c, _FormPl.ResComp[1], _cMnPlan);
  _c := AddValField(2, 'Отработано'#13'часов', _FormPl.ResComp[2]);
  MWValFieldsManager.CreateMWValFieldHoursWorked(_c, _FormPl.ResComp[2], _cMnPlan);
  _c := AddValField(2, 'Заработная'#13'плата', _FormPl.ResComp[3]);
  MWValFieldsManager.CreateMWValFieldSalary(_c, _FormPl.ResComp[3], _cMnPlan);
  _loop SpKAU where ((_FormPl.ResWord[10] == SpKAU.kodgrkau and _FormPl.ResComp[4] == SpKAU.cnode))
  {
    _c := AddValField(2, replace(SpKAU.Name,'|',''#13''), SpKAU.nRec);
    MWValFieldsManager.CreateMWValFieldAccrual(_c, SpKAU.nRec, _cMnPlan);
  }

  _c := AddValField(3, 'Часов в'#13'командировке', _FormPl.ResComp[2]);
  MWValFieldsManager.CreateMWValFieldHoursKom(_c, _FormPl.ResComp[2], _cMnPlan);

  _loop SpKAU where ((_FormPl.ResWord[10] == SpKAU.kodgrkau and _FormPl.ResComp[5] == SpKAU.cnode))
  {
    _c := AddValField(3, replace(SpKAU.Name,'|',''#13''), SpKAU.nRec);
    case SpKAU.nRec of
      SPKAU_NREC_CWS_TRAVEL_HOURS:
        MWValFieldsManager.CreateMWValField(_c, 1, SpKAU.nRec, _cMnPlan, 'AGAT::iMWValFieldTravelHours');
      SPKAU_NREC_CWS_TRAVEL_SUM:
        MWValFieldsManager.CreateMWValField(_c, 1, SpKAU.nRec, _cMnPlan, 'AGAT::iMWValFieldTravelSum');
      else
        MWValFieldsManager.CreateMWValFieldAccrual(_c, SpKAU.nRec, _cMnPlan);
    end;
  }
  _loop SpKAU where ((_FormPl.ResWord[10] == SpKAU.kodgrkau and _FormPl.ResComp[6] == SpKAU.cnode))
  {
    _c := AddValField(4, replace(SpKAU.Name,'|',''#13''), SpKAU.nRec);
    MWValFieldsManager.CreateMWValFieldAccrual(_c, SpKAU.nRec, _cMnPlan);
  }

  var s: longint;
  var s1: string;
  var _ccostitem: comp;
  var _vidoplp: word;
  var i: integer;

  delete all td;
  if (getfirst mnplan where ((_cMnPlan == mnplan.nrec)) = tsOk)
    if (getfirst fpperiod where ((mnplan.canval1 == fpperiod.nrec)) = tsOk)
    {
      CurMnPlan     := mnplan.nrec;
      CurPeriod     := fpperiod.nrec;
      PeriodDBeg    := fpperiod.dbeg;
      PeriodDEnd    := fpperiod.dend;
      CostItemKodGr := _FormPl.ResWord[10];

      setlimit(AllVidOpl, 0);
      v._kodgr := CostItemKodGr;
      v._loop spkau
      {
        var sVidOpl: string = sGetAttrId(coSpKau, v.spkau.Nrec, 0001000000000115h);
        if (v.spkau.cnode=_formpl.rescomp[4] or v.spkau.cnode=_formpl.rescomp[5] or v.spkau.cnode=_formpl.rescomp[6]) and trim(sVidOpl) != ''
        {
          SetLimit(AllVidOpl, Count(AllVidOpl)+1);
          AllVidOpl[Count(AllVidOpl)] := sVidOpl;
        }
      }

      var ls: longint = 0;
      mySqlAddStr(ls, 'select t.cCostItem, pers.cPerson, sum(t.Summa)');
      mySqlAddStr(ls, 'from (select distinct spmnplan.cizd as cperson from spmnplan where spmnplan.cMnPlan = #comp('+mnplan.Nrec+')) pers');
      mySqlAddStr(ls, 'join LSchet ls on ls.tperson=pers.cperson and (ls.datuv=#date(0,0,0) or ls.datuv >= #date('+datetostr(PeriodDBeg,'DD,MM,YYYY')+') )');
      mySqlAddStr(ls, 'outer apply (');
      PrepareSqlStrCostItems(ls);
      mySqlAddStr(ls, ') t');
      mySqlAddStr(ls, 'group by t.cCostItem, pers.cPerson');
      sqlSelectInto(ls, #td);
    }
  //runwindowmodal(winfo);
}

property ActiveGroupIndex: byte read fActiveGroupIndex write SetActiveGroup(result);
property NumberOfFieldsInActiveGroup: byte read GetNumberOfFieldsInGroup(ActiveGroupIndex);
property NumberOfShowedFields: byte absolute fNumberOfShowedFields;
end.
