#component "AGAT"
interface iMWValFieldsManager;
table struct tValFieldInterfaces (
  cValField:  comp,
  ArrayIndex: integer
) with index (
  i01 = cValField (unique)
);

var
  MWValFields: array [1..1] of oMWValField;
  MWValFieldsCnt: integer;
  MWValFieldPlanTrud: oMWValField;
  MWValFieldProcTrud: oMWValField;
  MWValFieldFactTrud: oMWValField;
  MWValFieldPrevTrud: oMWValField;
  MWValFieldFullTrud: oMWValField;
  MWValFieldSalary: oMWValField;
  MWValFieldHoursWorked: oMWValField;
  MWValFieldHoursKom: oMWValField;

create view
as select *
from tValFieldInterfaces, tVal;

function GetFieldValue(Row: oMWRow; _cValField: comp): string;
{
  if getfirst tValFieldInterfaces where ((_cValField == tValFieldInterfaces.cValField)) = tsOk
    result := MWValFields[tValFieldInterfaces.ArrayIndex].GetValue(Row)
  else
    result := '';
}

function GetFieldDistribute(Row: oMWRow; _cValField: comp): double;
{
  if getfirst tValFieldInterfaces where ((_cValField == tValFieldInterfaces.cValField)) = tsOk
    result := MWValFields[tValFieldInterfaces.ArrayIndex].GetDistribute(Row)
  else
    result := 0;
}


function GetFieldFontBackColor(Row: oMWRow; _cValField: comp): integer;
{
  if getfirst tValFieldInterfaces where ((_cValField == tValFieldInterfaces.cValField)) = tsOk
    result := MWValFields[tValFieldInterfaces.ArrayIndex].GetFontBackColor(Row)
  else
    result := 0;
}

function FieldIsEditable(Row: oMWRow; _cValField: comp): boolean;
{
  if getfirst tValFieldInterfaces where ((_cValField == tValFieldInterfaces.cValField)) = tsOk
    result := MWValFields[tValFieldInterfaces.ArrayIndex].Editable(Row)
  else
    result := false;
}

function FieldValueIsCorrect(Row: oMWRow; _cValField: comp; _Value: double): boolean;
{
  if getfirst tValFieldInterfaces where ((_cValField == tValFieldInterfaces.cValField)) = tsOk
    result := MWValFields[tValFieldInterfaces.ArrayIndex].CheckValue(Row, _Value)
  else
    result := false;
}

function SetFieldValue(Row: oMWRow; _cValField: comp; _Value: double; bSync: boolean = true):boolean;
{
  if getfirst tValFieldInterfaces where ((_cValField == tValFieldInterfaces.cValField)) = tsOk
    result := MWValFields[tValFieldInterfaces.ArrayIndex].SetValue(Row, _Value, bSync)
  else
    result := false;
}

procedure LoadRowValues(Row: oMWRow);
{
  _loop tValFieldInterfaces
    if (MWValFields[tValFieldInterfaces.ArrayIndex].Editable(Row))
    {
      MWValFields[tValFieldInterfaces.ArrayIndex].LoadValue(Row);
    }
  _loop tValFieldInterfaces
    if (not MWValFields[tValFieldInterfaces.ArrayIndex].Editable(Row))
    {
      MWValFields[tValFieldInterfaces.ArrayIndex].LoadValue(Row);
    }
}

procedure DeleteRowValues(Row: oMWRow);
{
  /*
  _loop tValFieldInterfaces
  {
    if (MWValFields[tValFieldInterfaces.ArrayIndex].Editable(Row))
    {
      MWValFields[tValFieldInterfaces.ArrayIndex].SetValue(Row,0);
    }
    MWValFields[tValFieldInterfaces.ArrayIndex].SetDistribute(Row,0);
  }
  _loop tValFieldInterfaces
  {
    if (not MWValFields[tValFieldInterfaces.ArrayIndex].Editable(Row))
    {
      MWValFields[tValFieldInterfaces.ArrayIndex].SetValue(Row,0);
    }
  } */
  Delete All tVal where ((Row.nRec == tVal.cRow));
}

function AddMWValField(aMWValField: oMWValField; _cValField: comp): boolean;
{
  inc(MWValFieldsCnt);
  _try
    insert tValFieldInterfaces set tValFieldInterfaces.cValField  := _cValField,
                                   tValFieldInterfaces.ArrayIndex := MWValFieldsCnt;
  _except
    on ExDataBase:
    {
      dec(MWValFieldsCnt);
      result := false;
      exit;
    }
  MWValFields[MWValFieldsCnt] := aMWValField;
  aMWValField.MWValFieldsManager := oMWValFieldsManager(Self);
  result := true;
}

function CreateMWValField(_cValField: comp; _IndexOfFieldInCell: byte; _cCostItem: comp; _cMnPlan: comp; InterfName: string): oMWValField;
{
  var _MWValField: oMWValField;
  LoadVipRef(_MWValField, InterfName);
  _MWValField.cValField          := _cValField;
  _MWValField.IndexOfFieldInCell := _IndexOfFieldInCell;
  _MWValField.cCostItem          := _cCostItem;
  _MWValField.cMnPlan            := _cMnPlan;
  AddMWValField(_MWValField, _cValField);
  result := _MWValField;
}

function CreateMWValFieldCommon(_cValField: comp; _IndexOfFieldInCell: byte; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  result := CreateMWValField (_cValField,_IndexOfFieldInCell,_cCostItem,_cMnPlan,'AGAT::iMWValFieldCommon')
}

function CreateMWValFieldProcTrud(_cValField: comp; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  MWValFieldProcTrud := CreateMWValField(_cValField, 1, _cCostItem, _cMnPlan, 'AGAT::iMWValFieldProcTrud');
  result := MWValFieldProcTrud;
}

function CreateMWValFieldPlanTrud(_cValField: comp; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  MWValFieldPlanTrud := CreateMWValField(_cValField, 2, _cCostItem, _cMnPlan, 'AGAT::iMWValFieldPlanTrud');
  result := MWValFieldPlanTrud;
}

function CreateMWValFieldFactTrud(_cValField: comp; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  MWValFieldFactTrud := CreateMWValField(_cValField, 3, _cCostItem, _cMnPlan, 'AGAT::iMWValFieldFactTrud');
  result := MWValFieldFactTrud;
}

function CreateMWValFieldPrevTrud(_cValField: comp; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  MWValFieldPrevTrud := CreateMWValField(_cValField, 4, _cCostItem, _cMnPlan, 'AGAT::iMWValFieldPrevTrud');
  result := MWValFieldPrevTrud;
}

function CreateMWValFieldFullTrud(_cValField: comp; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  MWValFieldFullTrud := CreateMWValField(_cValField, 5, _cCostItem, _cMnPlan, 'AGAT::iMWValFieldFullTrud');
  result := MWValFieldFullTrud;
}

function CreateMWValFieldAccrual(_cValField: comp; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  result := CreateMWValField(_cValField, 1, _cCostItem, _cMnPlan, 'AGAT::iMWValFieldAccrual');
}

function CreateMWValFieldSalary(_cValField: comp; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  MWValFieldSalary := CreateMWValField(_cValField, 1, _cCostItem, _cMnPlan, 'AGAT::iMWValFieldSalary');
  result := MWValFieldSalary;
}

function CreateMWValFieldHoursWorked(_cValField: comp; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  MWValFieldHoursWorked := CreateMWValField(_cValField, 1, _cCostItem, _cMnPlan, 'AGAT::iMWValFieldHoursWorked');
  result := MWValFieldHoursWorked;
}

function CreateMWValFieldHoursKom(_cValField: comp; _cCostItem: comp; _cMnPlan: comp): oMWValField;
{
  MWValFieldHoursKom := CreateMWValField(_cValField, 2, _cCostItem, _cMnPlan, 'AGAT::iMWValFieldHoursKom');
  result := MWValFieldHoursKom;
}

function GetMWValField(_cValField: comp): oMWValField;
{
  if getfirst tValFieldInterfaces where ((_cValField == tValFieldInterfaces.cValField)) = tsOk
    result := MWValFields[tValFieldInterfaces.ArrayIndex]
  else
    result := NullRef;
}

procedure InitValFieldInterfaces;
{
  delete all tValFieldInterfaces;
  MWValFieldsCnt := 0;
}

property ValFieldPlanTrud   : oMWValField absolute MWValFieldPlanTrud;
property ValFieldProcTrud   : oMWValField absolute MWValFieldProcTrud;
property ValFieldFactTrud   : oMWValField absolute MWValFieldFactTrud;
property ValFieldSalary     : oMWValField absolute MWValFieldSalary;
property ValFieldHoursWorked: oMWValField absolute MWValFieldHoursWorked;
property ValFieldHoursKom   : oMWValField absolute MWValFieldHoursKom;
property ValFieldPrevTrud   : oMWValField absolute MWValFieldPrevTrud;
property ValFieldFullTrud   : oMWValField absolute MWValFieldFullTrud;
end.
