#component "AGAT"
interface iMWValFieldAccrual;

create view
as select td.cCostItem
from td;

procedure oMWValField.LoadValue(Row:  oMWRow);
{
  inherited::LoadValue(Row);
  if Row.isPersonLevel
  {
    var _d: double;
    if getfirst td where ((Row.cPerson == td.cPerson and fcCostItem == td.cCostItem)) = tsOk
      _d := td.summa
    else
      _d := 0;
    SetDistribute(Row, _d);
  }
}

function  oMWValField.GetValue(Row: oMWRow): string;
{
  var _v: double;
  _v := inherited::GetValue(Row);
  if Row.isPersonLevel
  {
    var _d: double = GetDistribute(Row);
    var _delta: double = round(_d - _v, 2);
    result := _v + ' / ' + _d + if(_delta != 0, ' (' + doubletostr((_delta),'[+|-]3666666666666.88')+')', '');
  }
  else
    result := _v;
}

function  oMWValField.SetValue(Row: oMWRow; _Value: double; bSync: boolean): boolean;
{
  result := false;
  var ValBuffer: ttVal_p;
  ValBuffer := GettValBuffer(Row.nRec, fcValField);
  if (ValBuffer.Value <> _Value)
  {
    var _Delta: Double;
    _Delta := _Value - ValBuffer.Value;
    ChangeParentValue(Row, _Delta);
    ValBuffer.Value := _Value;
    if bSync SyncWithValSpMnP(Row, ValBuffer);
    tVal.bufferp := ValBuffer;
    update current tVal;
    if (Row.isLeaf)
      fMWValFieldsManager.ValFieldSalary.SetValue(Row, double(fMWValFieldsManager.ValFieldSalary.GetValue(Row)) + _Delta, bSync);
    result := true;
  }
}

function  oMWValField.GetFontBackColor(Row: oMWRow): integer;
{
  if Row.isLeaf
    result := 100 //if(_v > 0, 100, 0)
  else
  {
    var _v, _d: double = 0;
    if getfirst tVal where ((Row.nRec == tVal.cRow and fcValField == tVal.cValField)) = tsOk
    {
      _v := round(tVal.Value, 2);
      _d := round(tVal.Distribute, 2);
    }
    result := if(_v=_d, 78, if(_v>_d, 10 ,67));
  }
}

end.
