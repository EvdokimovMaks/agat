#include Query.vih

#component "AGAT"
interface iMWValFieldHoursWorked;

var ChildRow: oMWRow(iMWRow) new;
// var qWorkHours: IQuery;

create view
var
  _cPerson: comp;
as select td.cPerson
from td
where ((
    _cPerson == td.cPerson
and comp(-1) == td.cCostItem
));

// sql query queryWorkHours =
// select
//   lstab.chasf + coalesce(t.qty, 0) + coalesce(tOV.qty, 0) + coalesce(tOV1.qty, 0) as qtyquery
// from LSchet
// join LsTab on LsTab.cLSchet = LSchet.Nrec and LsTab.YearN = :Year and LsTab.MesN = :Month
// outer apply (
//   select sum(variance.WorkingHours * (variance.ending - variance.beginning + 1)) as qty
//   from variance
//   join UOWRKTABEL on UOWRKTABEL.nrec = variance.cuo
//   where variance.clstab = lstab.nrec and UOWRKTABEL.num in ('ВЧ', 'Н', 'ОБЩ', 'ОВ', 'РП', 'С', 'Я')
// ) t
// outer apply (
//   select sum(so.ChasF) as qty
//   from sumvidop so
//   where so.cLSch = lstab.cLSchet and so.YearK = LsTab.YearN and so.Mes = lstab.MesN and so.VidOpl = 204 //518 Оплат доп. дней уход за реб. инвалид.тек
// ) tOV //ОВ по архиву начислений
// outer apply (
//   select sum(n.ChasF) as qty
//   from nachisl n
//   where n.cLSch = lstab.cLSchet and n.YearK = LsTab.YearN and n.Mes = lstab.MesN and n.VidOpl = 518 //518 Оплат доп. дней уход за реб. инвалид.тек
// ) tOV1 //ОВ по результатам расчета ЗП
// where LSchet.TPerson = :cPerson and (LSchet.DatUv = 0 or LSchet.DatUv >= :PeriodDBeg )
// ;

procedure oMWValField.LoadValue(Row:  oMWRow);
{
  inherited::LoadValue(Row);
  if Row.isPersonLevel
  {
    _cPerson := Row.cPerson;
    if (getfirst td = tsOk)
      SetDistribute(Row, td.Summa);
    // if GetFirst LSchet where ((Row.cPerson == LSchet.tPerson and (lschet.datuv = 0 or lschet.datuv >= PeriodDBeg) )) = tsOk
    //   if LoadWorkingTable(LSchet.nRec, Month(PeriodDBeg), Year(PeriodDBeg)) = 0
    //   {
    //     var _d: double;
    //     _d := WT_GetHours(1, 1);

    //     if WT_LoadMonthlyAbsences = 0
    //     {
    //       var i, _cnt: integer;
    //       var _s: string;
    //       var _n: double;
    //       _cnt := WT_GetMonthlyAbsenceCount;
    //       for(i:=0;i<_cnt;inc(i))
    //       {
    //         if WT_GetMonthlyAbsenceAttribute(i, 1, _s)
    //           if (_s='ВЧ' or _s='Н' or _s='ОБЩ' or _s='ОВ' or _s='РП' or _s='С' or _s='Я')  //or _s='К' or _s='Г'
    //             if WT_GetMonthlyAbsenceAttribute(i, 5, _n)
    //               _d += _n;
    //       }
    //     }

    //     SetDistribute(Row, _d);
    //   }

    // qWorkHours := queryManager.createQuery(queryWorkHours);
    // var y: word = Year(PeriodDBeg);
    // var m: word = Month(PeriodDBeg);
    // var cPers: comp = Row.cPerson;
    // qWorkHours.setParam('Year', y);
    // qWorkHours.setParam('Month', m);
    // qWorkHours.setParam('PeriodDBeg', PeriodDBeg);
    // qWorkHours.setParam('cPerson', cPers);
    // if qWorkHours.execute.errorCode = tsOk
    //   if qWorkHours.fetch.errorCode = tsOk
    //     SetDistribute(Row, qWorkHours.row.valAt(1));
  }
}

function  oMWValField.GetValue(Row: oMWRow): string;
{
  var _v: double;
  _v := inherited::GetValue(Row);
  if Row.isPersonLevel
  {
    var _d: double;
    _d := GetDistribute(Row);
    result := _v + ' / ' + _d + ' (' + doubletostr((_d - _v),'[+|-]3666666666666.88')+')';
  }
  else
    result := _v;
}

function  oMWValField.GetFontBackColor(Row: oMWRow): integer;
{
  if Row.isLeaf
    result := 100 //if(_v > 0, 100, 0)
  else
  {
    var _v, _d: double;
    if getfirst tVal where ((Row.nRec == tVal.cRow and fcValField == tVal.cValField)) = tsOk
    {
      _v := tVal.Value;
      _d := tVal.Distribute;
    }
    else
    {
      _v := 0;
      _d := 0;
    }
    result := if(_v=_d, 78, if(_v>_d, 10 ,67));
  }
}

handleevent
  cmOnVipLoad:
  {
    InitWorkingTable;
  }
end;
end.
