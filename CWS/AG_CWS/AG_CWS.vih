#ifndef __AG_CWS_VIH__
#define __AG_CWS_VIH__

#include Query.vih
#include IModify.vih

#component "AGAT"

const
  AG_CWS_VALUE_CNT: byte = 50;
end;

ObjInterface AG_ICWSEntity;
  property SessionId: comp;
end;

VipInterface AG_CWSEntity implements AG_ICWSEntity;
  public:
    constructor Create(sessId: comp);
end;

ObjInterface AG_ICWS;
  function find(ccMnPlan: comp): boolean;
  property cMnPlan: comp;
  property cPodr  : comp;
  property cPeriod: comp;

  index idxMnPlan = cMnPlan;
end;

ObjInterface AG_ISpCWS(AG_ICWSEntity);
  function CreateNew: comp;
  function SaveCurrent: boolean;
  function first: word;
  function next: word;
  procedure FilterByDeleted(bIsDeleted: boolean);
  procedure FilterByPerson(ccPerson: comp);
  procedure DelFilterByPerson;
  procedure DelFilterByDeleted;
  procedure DelAllFilters;

  property Nrec       : comp;
  property cMnPlan    : comp;
  property cSpMnPlan  : comp;
  property cPerson    : comp;
  property cPost      : comp;
  property cKatStroy  : comp;
  property cKatMarsh  : comp;
  property cMarshSp   : comp;
  property sComment   : string;

  property TrudPlan   : double;
  property ProcVip    : double;
  property TrudMes    : double;
  property TrudPred   : double;
  property TrudPoln   : double;
  property ChasRab    : double;
  property Zarplata   : double;
  property Oklad      : double;
  property ProchDopl  : double;
  property ChasKom    : double;
  property Kom        : double;
  property KomVih     : double;
  property Nadvod     : double;
  property Podvod     : double;
  property KomDoplVih : double;
  property KomDoplProc: double;
  property ChasPutRab : double;
  property PutRab     : double;
  property ChasPutVih : double;
  property PutVih     : double;
  property PremMes    : double;
  property PremKvart  : double;
  property PremGod    : double;
  property PremRazov  : double;

  index idxPerson = cPerson, cKatStroy, cKatMarsh, cMarshSp;
end;

ObjInterface AG_ISpCWSValueLoader;
  procedure AddSelect(var queryStr: longint);
  procedure AddJoin(var queryStr: longint);
  function  GetSelectFieldName: string;
end;

ObjInterface AG_ISpCWSLoader;
  procedure Load(SpCWS: AG_ISpCWS);
end;

ObjInterface AG_IPersCWS(AG_ICWSEntity);
  function CreateNew: comp;
  function SaveCurrent: boolean;
  function first: word;
  function next: word;

  property Nrec        : comp;
  property cMnPlan     : comp;
  property cPerson     : comp;
  property cPost       : comp;
  property FIO         : string[80];
  property TabNmb      : longint;

  property DTrudPlan   : double;
  property DProcVip    : double;
  property DTrudMes    : double;
  property DTrudPred   : double;
  property DTrudPoln   : double;
  property DChasRab    : double;
  property DZarplata   : double;
  property DOklad      : double;
  property DProchDopl  : double;
  property DChasKom    : double;
  property DKom        : double;
  property DKomVih     : double;
  property DNadvod     : double;
  property DPodvod     : double;
  property DKomDoplVih : double;
  property DKomDoplProc: double;
  property DChasPutRab : double;
  property DPutRab     : double;
  property DChasPutVih : double;
  property DPutVih     : double;
  property DPremMes    : double;
  property DPremKvart  : double;
  property DPremGod    : double;
  property DPremRazov  : double;

  property TTrudPlan   : double;
  property TProcVip    : double;
  property TTrudMes    : double;
  property TTrudPred   : double;
  property TTrudPoln   : double;
  property TChasRab    : double;
  property TZarplata   : double;
  property TOklad      : double;
  property TProchDopl  : double;
  property TChasKom    : double;
  property TKom        : double;
  property TKomVih     : double;
  property TNadvod     : double;
  property TPodvod     : double;
  property TKomDoplVih : double;
  property TKomDoplProc: double;
  property TChasPutRab : double;
  property TPutRab     : double;
  property TChasPutVih : double;
  property TPutVih     : double;
  property TPremMes    : double;
  property TPremKvart  : double;
  property TPremGod    : double;
  property TPremRazov  : double;

  index idxMnPlan = FIO;
end;

ObjInterface AG_IPersCWSLoader;
  procedure Load(PersCWS: AG_IPersCWS);
end;


VipInterface AG_CWS implements AG_ICWS;
VipInterface AG_PersCWS(AG_CWSEntity) implements AG_IPersCWS, IModify;
VipInterface AG_SpCWS(AG_CWSEntity) implements AG_ISpCWS, IModify;

VipInterface AG_PersCWSLoader_ByCWS implements AG_IPersCWSLoader;
  public:
    constructor Create(CWS: AG_ICWS);
    destructor Done;
end;

VipInterface AG_SpCWSLoader_Base implements AG_ISpCWSLoader;
  public:
    procedure InitQueryStr(var lSqlStr: longint);
    function  InitQuery: IQuery;
    procedure SetOneSpCWSFields(SpCWS: AG_ISpCWS; qRow: IResultRow);
end;

VipInterface AG_SpCWSLoader_ByCWS(AG_SpCWSLoader_Base);
  public:
    constructor Create(CWS: AG_ICWS);
    procedure InitQueryStr(var lSqlStr: longint);
    function  InitQuery: IQuery;
end;

VipInterface AG_SpCWSLoader_ByCWSWithCorr(AG_SpCWSLoader_Base);
  public:
    constructor Create(CWS: AG_ICWS);
    procedure InitQueryStr(var lSqlStr: longint);
    function  InitQuery: IQuery;
end;

VipInterface AG_CWSUtils;
  static:
    function NewSession: comp;
    procedure CloseSession(sessId: comp);
    function NewCWS: AG_ICWS;
    function NewSpCWS(sessId: comp): AG_ISpCWS;
    function NewPersCWS(sessId: comp): AG_IPersCWS;
    function SpCWSLoaderByCWS(CWS: AG_ICWS): AG_ISpCWSLoader;
    function SpCWSLoaderByCWSWithCorr(CWS: AG_ICWS): AG_ISpCWSLoader;
    function PersCWSLoaderByCWS(CWS: AG_ICWS): AG_IPersCWSLoader;
end;


#end
