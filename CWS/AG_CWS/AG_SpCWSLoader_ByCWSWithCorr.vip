#include Query.vih
#include AG_CWS.vih

#component "AGAT"

interface AG_SpCWSLoader_ByCWSWithCorr;

var
  _cws: AG_ICWS;

procedure InitQueryStr(var lSqlStr: longint);
{
  sqlAddStr(lSqlStr, 'select');
  sqlAddStr(lSqlStr, '  t.cPerson          as cPerson');
  sqlAddStr(lSqlStr, ' ,t.cKatStroy        as cKatStroy');
  sqlAddStr(lSqlStr, ' ,t.cKatMarsh        as cKatMarsh');
  sqlAddStr(lSqlStr, ' ,t.cMarshSp         as cMarshSp');
  sqlAddStr(lSqlStr, ' ,t.cPost            as cPost');
  sqlAddStr(lSqlStr, ' ,max(t.cMnPlan)     as cMnPlan');
  sqlAddStr(lSqlStr, ' ,max(t.cSpMnPlan)   as cSpMnPlan');
  sqlAddStr(lSqlStr, ' ,max(t.cAllMemo)    as cAllMemo');
  sqlAddStr(lSqlStr, ' ,sum(t.TrudPlan)    as TrudPlan');
  sqlAddStr(lSqlStr, ' ,sum(t.ProcVip)     as ProcVip');
  sqlAddStr(lSqlStr, ' ,sum(t.ChasRab)     as ChasRab');
  sqlAddStr(lSqlStr, ' ,sum(t.Zarplata)    as Zarplata');
  sqlAddStr(lSqlStr, ' ,sum(t.Oklad)       as Oklad');
  sqlAddStr(lSqlStr, ' ,sum(t.ProchDopl)   as ProchDopl');
  sqlAddStr(lSqlStr, ' ,sum(t.ChasKom)     as ChasKom');
  sqlAddStr(lSqlStr, ' ,sum(t.Kom)         as Kom');
  sqlAddStr(lSqlStr, ' ,sum(t.KomVih)      as KomVih');
  sqlAddStr(lSqlStr, ' ,sum(t.Nadvod)      as Nadvod');
  sqlAddStr(lSqlStr, ' ,sum(t.Podvod)      as Podvod');
  sqlAddStr(lSqlStr, ' ,sum(t.KomDoplVih)  as KomDoplVih');
  sqlAddStr(lSqlStr, ' ,sum(t.KomDoplProc) as KomDoplProc');
  sqlAddStr(lSqlStr, ' ,sum(t.ChasPutRab)  as ChasPutRab');
  sqlAddStr(lSqlStr, ' ,sum(t.PutRab)      as PutRab');
  sqlAddStr(lSqlStr, ' ,sum(t.ChasPutVih)  as ChasPutVih');
  sqlAddStr(lSqlStr, ' ,sum(t.PutVih)      as PutVih');
  sqlAddStr(lSqlStr, ' ,sum(t.PremMes)     as PremMes');
  sqlAddStr(lSqlStr, ' ,sum(t.PremKvart)   as PremKvart');
  sqlAddStr(lSqlStr, ' ,sum(t.PremGod)     as PremGod');
  sqlAddStr(lSqlStr, ' ,sum(t.PremRazov)   as PremRazov');
  sqlAddStr(lSqlStr, 'from (');
  inherited::InitQueryStr(lSqlStr);
  sqlAddStr(lSqlStr, 'where MnPlan.Nrec in (');
  sqlAddStr(lSqlStr, '  select :cMnPlan');
  sqlAddStr(lSqlStr, '  union all');
  sqlAddStr(lSqlStr, '  select MnPlanCorr.Nrec');
  sqlAddStr(lSqlStr, '  from MnPlan');
  sqlAddStr(lSqlStr, '  join MnPlan MnPlanCorr');
  sqlAddStr(lSqlStr, '    on MnPlanCorr.cWayAccou = MnPlan.cWayAccou');
  sqlAddStr(lSqlStr, '   and MnPlanCorr.wKodGr1 = MnPlan.wKodGr1');
  sqlAddStr(lSqlStr, '   and MnPlanCorr.cAnVal1 = MnPlan.cAnVal1');
  sqlAddStr(lSqlStr, '   and MnPlanCorr.wKodGr2 = MnPlan.wKodGr2');
  sqlAddStr(lSqlStr, '   and MnPlanCorr.cAnVal2 = MnPlan.cAnVal2');
  sqlAddStr(lSqlStr, '   and MnPlanCorr.wKodGr3 = 10182');
  sqlAddStr(lSqlStr, '   and MnPlanCorr.cAnVal3 in (#comp(0001000000000C7Bh), #comp(0001000000000C7Ch))'); //Сторно, Корректировка
  sqlAddStr(lSqlStr, '  where MnPlan.Nrec = :cMnPlan)');
  sqlAddStr(lSqlStr, ') t');
  sqlAddStr(lSqlStr, 'group by t.cPerson, t.cKatStroy, t.cKatMarsh, t.cMarshSp, t.cPost');
}

function  InitQuery: IQuery;
{
  var q: IQuery = inherited::InitQuery;
  q.setParam('cMnPlan', _cws.cMnPlan);
  result := q;
}

constructor Create(CWS: AG_ICWS);
{
  _cws := CWS;
  result := true;
}

end.
