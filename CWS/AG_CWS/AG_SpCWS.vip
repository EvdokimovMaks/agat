#include AG_CWS.vih

#component "AGAT"

interface AG_SpCWS;

create view
var
  _cPerson: comp;
  _isDeleted: boolean;
as select AG_TmpSpCWS.Nrec
from AG_TmpSpCWS
where ((
  _sessionId == AG_TmpSpCWS.SessionId
))
bounds ByPerson = _sessionId == AG_TmpSpCWS.SessionId
              and _cPerson   == AG_TmpSpCWS.cPerson

condition ByDeleted = AG_TmpSpCWS.IsDeleted = _isDeleted
;

function CreateNew: comp;
{
  ClearBuffer(#AG_TmpSpCWS);
  AG_TmpSpCWS.Nrec := GetNextNRec(#AG_TmpSpCWS, 0);
  AG_TmpSpCWS.SessionId := _sessionId;
  if insert current AG_TmpSpCWS = tsOk
    result := AG_TmpSpCWS.Nrec;
  else
    result := 0;
}

function SaveCurrent: boolean;
{
  result := update current AG_TmpSpCWS = tsOk;
}

function first: word;
{
  result := getfirst AG_TmpSpCWS;
}

function next: word;
{
  result := getnext AG_TmpSpCWS;
}

procedure FilterByPerson(ccPerson: comp);
{
  _cPerson := ccPerson;
  if not BoundActive(tbByPerson) AddBounds(tbByPerson);
}

procedure DelFilterByPerson;
{
  if BoundActive(tbByPerson) SubBounds(tbByPerson);
}

procedure FilterByDeleted(bIsDeleted: boolean);
{
  _isDeleted := bIsDeleted;
  if not ConditionActiveInLeave(tcByDeleted, #AG_TmpSpCWS)
    PushConditionForLeave(tcByDeleted, #AG_TmpSpCWS);
}

procedure DelFilterByDeleted;
{
  if ConditionActiveInLeave(tcByDeleted, #AG_TmpSpCWS)
    PopConditionForLeave(tcByDeleted, #AG_TmpSpCWS);
}

procedure DelAllFilters;
{
  DelFilterByPerson;
  DelFilterByDeleted;
}

Function IModify.doInsert: Word;
{
  result := insert current AG_TmpSpCWS;
}

Function IModify.doUpdate: Word;
{
  result := update current AG_TmpSpCWS;
}

implementation IModify.doFlush abstract;

Function IModify.doDelete: Word;
{
  if AG_TmpSpCWS.cSpMnPlan = 0
    result := delete current AG_TmpSpCWS;
  else
  {
    AG_TmpSpCWS.IsDeleted := true;
    result := update current AG_TmpSpCWS;
  }
}

property Nrec       : comp   absolute AG_TmpSpCWS.Nrec       ;
property cMnPlan    : comp   absolute AG_TmpSpCWS.cMnPlan    ;
property cSpMnPlan  : comp   absolute AG_TmpSpCWS.cSpMnPlan  ;
property cPerson    : comp   absolute AG_TmpSpCWS.cPerson    ;
property cPost      : comp   absolute AG_TmpSpCWS.cPost      ;
property cKatStroy  : comp   absolute AG_TmpSpCWS.cKatStroy  ;
property cKatMarsh  : comp   absolute AG_TmpSpCWS.cKatMarsh  ;
property cMarshSp   : comp   absolute AG_TmpSpCWS.cMarshSp   ;
property sComment   : string absolute AG_TmpSpCWS.sComment   ;

property TrudPlan   : double absolute AG_TmpSpCWS.TrudPlan   ;
property ProcVip    : double absolute AG_TmpSpCWS.ProcVip    ;
property TrudMes    : double absolute AG_TmpSpCWS.TrudMes    ;
property TrudPred   : double absolute AG_TmpSpCWS.TrudPred   ;
property TrudPoln   : double absolute AG_TmpSpCWS.TrudPoln   ;
property ChasRab    : double absolute AG_TmpSpCWS.ChasRab    ;
property Zarplata   : double absolute AG_TmpSpCWS.Zarplata   ;
property Oklad      : double absolute AG_TmpSpCWS.Oklad      ;
property ProchDopl  : double absolute AG_TmpSpCWS.ProchDopl  ;
property ChasKom    : double absolute AG_TmpSpCWS.ChasKom    ;
property Kom        : double absolute AG_TmpSpCWS.Kom        ;
property KomVih     : double absolute AG_TmpSpCWS.KomVih     ;
property Nadvod     : double absolute AG_TmpSpCWS.Nadvod     ;
property Podvod     : double absolute AG_TmpSpCWS.Podvod     ;
property KomDoplVih : double absolute AG_TmpSpCWS.KomDoplVih ;
property KomDoplProc: double absolute AG_TmpSpCWS.KomDoplProc;
property ChasPutRab : double absolute AG_TmpSpCWS.ChasPutRab ;
property PutRab     : double absolute AG_TmpSpCWS.PutRab     ;
property ChasPutVih : double absolute AG_TmpSpCWS.ChasPutVih ;
property PutVih     : double absolute AG_TmpSpCWS.PutVih     ;
property PremMes    : double absolute AG_TmpSpCWS.PremMes    ;
property PremKvart  : double absolute AG_TmpSpCWS.PremKvart  ;
property PremGod    : double absolute AG_TmpSpCWS.PremGod    ;
property PremRazov  : double absolute AG_TmpSpCWS.PremRazov  ;

index idxPerson auto;


end.
