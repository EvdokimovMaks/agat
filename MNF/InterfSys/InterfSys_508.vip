#include ClaimDirects.vih

#component "M_MNPLAN"

vipinterface iInterfSys_508 implements Util_ScrSp licensed(free);
public:
  constructor Init;
end;

interface iInterfSys_508;

var
  gldt      : GlobData;
  iom       : oMainVid;
  iSetPl    : SetupMnf;
  _claim    : AGAT::ClaimDirects noauto;
  _view     : AGAT::ClaimDirectsSpTreeView noauto;

create view
var
  _mnplanNrec: comp;
as select *
from mnplan
where ((
  _mnplanNrec == mnplan.nrec
));


embedded scMain interface;
end;

constructor Init;
{
  _claim     := new(AGAT::ClaimDirects);
  _view      := new(AGAT::ClaimDirectsSpTreeView);
  _view.SetSp(_claim.Sp);
  result := true;
}

procedure LoadClaim(aMnplanNrec: comp);
{
  _view.UnsetTreeBounds;
  _view.JumpToFirst;

  var ref: ObjRef
  if GetEmbeddedInterfaceReference(scMain, ref)
    if ref != nullref
      UnBindEmbeddedInterface(scMain);

  if _view != nullref
    freevipinterface(_view);

  _claim.load(aMnplanNrec);

  _view := new(AGAT::ClaimDirectsSpTreeView);
  _view.SetSp(_claim.Sp);

  BindEmbeddedInterface(scMain, _view);
  rereadrecord;
  _view.JumpToFirst;
  rereadrecord;
  _view.OpenAllNodes;
  rereadrecord;
}

//Реализация функций и методов Util_ScrSp---------------------------------------------------------------------
Function InitInter (pGldt: GLOBDATA; piOm: oMainVid): Boolean;
{
  result := false;
  gldt       := pGldt;
  iom        := piOm;
  iSetPl     := pgldt.GetSetupMnf();
  result := true;
}

Function DoneInter: Boolean;
{
  if (Not NullVipRef(gldt))
    FreeVipInterface(gldt);
  result := true;
}

Function SetOwner (ccMnPlan: Comp): Boolean;
{
  result := false;

  _mnplanNrec := ccMnPlan;

  if (getfirst mnplan != tsOk)
  {
    message(''#3'iInterfSys_505.SetOwner: Ошибка установки курсора на документ', Error);
    exit;
  }

  if (Not iSetPl.InitAll(MnPlan.cWayAccou))
  {
    Message(''#3'Ошибка инициализации шаблона', Error);
    Exit;
  }

  LoadClaim(ccMnPlan);

  iom.GetMainScrPl.SetGetParam ( LongInt(102),
                                 word(1)    ,
                                 comp(0)    ,
                                 Double(0)  ,
                                 LongInt(0) ,
                                 word(0)    ,
                                 Date(0,0,0),
                                 _datetime(0,0,0,0,0,0,0),
                                 _claim.name );

  rereadrecord;
  result := true;
}

Procedure EventSetParVid (wFlag: Word);
{
  wFlag := 0;
}

Function SetWindowVid (sp: String): Boolean;
{
  sp := '';
  result := true;
}

Function GetCurPos (var pWlist: Word): Comp;
{
  pWlist := 0;
  result := 0;
}

Procedure MySetColumnTitle;
{
}

Procedure FillHaveInReserv (Date2Q: Date);
{
  Date2Q := 0;
}

Function CheckEnableUseInterface (SysNumVid: Word; WayAccouNRec: Comp; NumVid_WayAccou: Comp; Flag: Word): Boolean;
{
  if ((SysNumVid = 0) and (WayAccouNRec = 0) and (NumVid_WayAccou = 0) and (Flag = 0)) { }
  result := true;
}

Function GetNameInter: String;
{
  result := 'iInterfSys_508';
}

Function GetNameInterPr: String;
{
  result := ''; //iInterfSetup_504
}

Function GetNum: Word;
{
  result := 10508;
}

Function GetName: String;
{
  result := 'Агат. Интерфейс редактирования годовой заявки по прямым расходам';
}

Function GetMemo (st: oSteckCommonString): Boolean;
{
  st.push('Интерфейс редактирования годовой заявки по прямым расходам');
  result := true;
}

procedure SaveClaim;
{
  _claim.save;
}

Function SetGetParam (var FlagParam: LongInt;
                      var Direction: Word;
                      var cValue   : Comp;
                      var dValue   : Double;
                      var lValue   : LongInt;
                      var wValue   : Word;
                      var dtValue  : Date;
                      var dttValue : DateTime;
                      var sValue   : s250): Boolean;
{
  result := true;
  if ((cValue > 0) and (dValue > 0) and (lValue > 0) and (wValue > 0) and (sValue = '') and (dtValue = dttValue)) { }

  //message ('SetGetParam: FlagParam='+FlagParam+', Direction='+Direction+', cValue='+cValue+
  //         ''#13', dValue='+dValue+', lValue='+lValue+', wValue='+wValue+
  //        ''#13', dtValue='+dtvalue+', dttValue='+dttValue+', sValue='+sValue);

  if (( Direction and 1) > 0)
  {
    case FlagParam of
      1, 10000:
      {
        if getfirst mnplan = tsOk
        {
          LoadClaim(mnplan.nrec);
        }
      }
      2, 1000:
      {
        if getfirst mnplan = tsOk
        {
          SaveClaim;
          LoadClaim(mnplan.nrec);
        }
      }
      15:
      {
        _claim.save;
      }
    end;

  }
}

end.
