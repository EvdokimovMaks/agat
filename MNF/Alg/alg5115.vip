#include System.vih
#include MC.vih
#include MCPartsSelector.vih
#include MCCollectionFiller.vih
#include AtlProtocol.vih

#component "M_MNPLAN"

VipInterface Algoritm_5115 Implements oAlgoritm_Sys;
Interface Algoritm_5115 '' (,hcNoContext,) EscClose, Cyan;

var
  _MCS: MCPartsSelector;
  _f: IMCCollectionFiller;

create view
var
  _IndentNrec: comp;
  _formplNrec: comp;
as select *
from indent, claim, formpl
where ((
  _IndentNrec == indent.nrec and
  indent.nrec == claim.cindent and
  _formplNrec == formpl.nrec
))
;

function InitObjects: boolean;
{
  if getfirst formpl = tsOk
  {
    case formpl.resword[1] of
      coIndent:  result := getvipref(_f, 'AGAT::MCCollectionFillerIndent');
    end;
  }
}

Function RunInter(wflag: word; var pt: TRecAcc): boolean;
{
  #__UNUSED__(wflag)
  result := false;
  _IndentNrec := pt.cpNrec;

  var c: ICollection;
  c := ICollection(new(System::Collection));
  if _MCS.ShowUI = cmDefault
  {
    _MCS.FillCollectionWithSelectedParts(c);
    _f.FillDoc(_IndentNrec, c);
    result := true;
  }
}

function InitInter(var pt: TRecAcc): boolean;
{
  _formplNrec := pt.cFormpl;
  result := InitObjects;
  if _f = nullref
    message('Ошибка инициализации (_f: IMCCollectionFiller)');
}

Function DoneInter(var pt: TRecAcc): boolean;
{
  pt.Position := pt.Position;
  DoneInter := true;
}

function GetNum: word;
{
  GetNum := 5115;
}

function GetName: string; {
  GetName := 'АГАТ. Заполнение заявки из состава изделия';
}

function GetMemo (st:oSteckCommonString): boolean; {
  GetMemo := true;
  st.push(string(''));
}

function GetNameInter: string; {
  GetNameInter := 'Algoritm_5115' ;
}

function GetNameInterPr: string; {
  GetNameInterPr := 'AlgoritmSetup_5115' ;
}

end.

VipInterface AlgoritmSetup_5115 Implements oAlgoritmSetup;
Interface AlgoritmSetup_5115 '' (,hcNoContext,) EscClose, DoAccept;
show(,,34,5);

create view
var
  _formplNrec: comp;
as select *
from formpl
where ((
  _formplNrec == formpl.nrec
))
;

parameters _formplNrec;

screen sc1;
fields
  formpl.resword[1]: [list coIndent 'Заявки'];
buttons
  cmDoOk, default;
  cmCancel;
<<

`Документ` .@@@@@@@@@@@@@@@@@@@@

   <. Продолжить .> <. Отмена .>
>>
end;

Function asInitInter(p_cFormPl: comp): boolean;
{
  _formplNrec := p_cFormPl;
  asInitInter := getfirst formpl = tsOk;
}

Function asDoneInter: boolean;
{
  result := update current formpl = tsOk;
}

Procedure asOnCmSetDefault;
{
  formpl.resword[1] := coIndent;
}

Procedure asOnSetWayAccou(p_cWayAccou: comp);
{
  p_cWayAccou := p_cWayAccou;
}

handleevent
cmDoOk:
{
  asDoneInter;
  closeinterface(cmDefault);
}
cmInit:
{
  if (getfirst formpl <> tsOk)
  {
    Message('Не найдены настройки пользовательского алгоритма',Error+CancelButton);
    Abort;
    Exit;
  }
  asOnCmSetDefault;
}
end;
end.
