#include Query.vih
#include ClaimOverheads.vih

#component "AGAT"

interface ClaimOverheadsCostItems;

table struct TmpCostItems (
  Nrec      : comp
, cParent   : comp
, cFpStBud  : comp
, ChildType : word
, cPriceList: comp
, Code      : string[20]
, dBeg      : date
, dEnd      : date
) with index (
  i01 = Nrec
, i02 = cParent + Code
, i03 = cFpStBud
);

create view
var
  _cFpStBud: comp;
  _cParent : comp;
  _dBeg    : date;
  _dEnd    : date;
as select
  TmpCostItems.Nrec
from
  TmpCostItems
, TmpCostItems TmpCostItemsBySt
where ((
  _cFpStBud == TmpCostItemsBySt.cFpStBud
))
bounds ByParent = _cParent == TmpCostItems.cParent
condition ByPeriod = (TmpCostItems.dBeg <= _dEnd and TmpCostItems.dEnd >= _dBeg)
;

function  First: boolean;
{
  result := getfirst TmpCostItems = tsOk;
}

function  Next: boolean;
{
  result := getnext TmpCostItems = tsOk;
}

function  GetPriceList(ccFpStBud: comp): comp;
{
  result := 0;
  _cFpStBud := ccFpStBud;
  _loop TmpCostItemsBySt
  {
    result := TmpCostItemsBySt.cPriceList;
    if result != 0 break;
  }
}

procedure FilterByParent(ccParent: comp);
{
  _cParent := ccParent;
  if not BoundActive(tbByParent)
    AddBounds(tbByParent);
}

procedure FilterByPeriod(ddBeg: date; ddEnd: date);
{
  _dBeg := ddBeg;
  _dEnd := ddEnd;
  if not ConditionActiveInLeave(tcByPeriod, #TmpCostItems)
    PushConditionForLeave(tcByPeriod, #TmpCostItems);
}

procedure DelAllFilters;
{
  if BoundActive(tbByParent)
    SubBounds(tbByParent);
  if ConditionActiveInLeave(tcByPeriod, #TmpCostItems)
    PopConditionForLeave(tcByPeriod, #TmpCostItems);
}

function  Find(cNrec: comp): boolean;
{
  result := getfirst TmpCostItems where ((cNrec == TmpCostItems.Nrec)) = tsOk;
}

sql query qCostItems =
  select
    Nrec
  , cOwner      as cParent
  , ResComp1[1] as cFpStBud
  , ResWord1[1] as ChildType
  , ResComp1[2] as cPriceList
  , ResCode[1]  as Code
  , ResDate[1]  as dBeg
  , ResDate[2]  as dEnd
  from SpFormPl
  where
      cFormPl = :cFormPl
  and TypeRec = 507
;

constructor Create(cFormPl: comp);
{
  var q: IQuery = queryManager.createQuery(qCostItems).setParam('cFormPl', cFormPl);
  sqlCopyInto(q, #TmpCostItems, true);
  result := true;
}

property Nrec      : comp       absolute TmpCostItems.Nrec      ;
property cParent   : comp       absolute TmpCostItems.cParent   ;
property cFpStBud  : comp       absolute TmpCostItems.cFpStBud  ;
property ChildType : word       absolute TmpCostItems.ChildType ;
property cPriceList: comp       absolute TmpCostItems.cPriceList;
property Code      : string[20] absolute TmpCostItems.Code      ;
property dBeg      : date       absolute TmpCostItems.dBeg      ;
property dEnd      : date       absolute TmpCostItems.dEnd      ;

index iByNrec auto;
index iByParent auto;

end.