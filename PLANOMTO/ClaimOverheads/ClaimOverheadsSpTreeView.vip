#include ClaimOverheads.vih
#include GetKau.vih
#include Query.vih

#component "AGAT"

interface ClaimOverheadsSpTreeView;

sql query QueryGetIncomePrices =
select sko.dord, sps.price
from sporder spo
join sklorder sko on sko.nrec = spo.csklorder
join katsopr ks on ks.nrec = sko.csopr and ks.vidsopr in (101, 111)
join spsopr sps on sps.nrec = spo.cspsopr
where spo.sp = 0 and spo.vidorder = 0 and spo.cmc = :KatmcNrec
order by sko.dord
;

var
  _sp: IClaimOverheadsSp (ClaimOverheadsSp) new;
  _getkau: GetKau;
  _qGetIncomePrices: IQuery;

create view
var
  _parentNrec: comp;
as select
  if(_sp.IsCostitem,
     fpstbud.Name,
     if(_sp.ItemType = 2, 'Усл', 'МЦ') ) (fieldname=CostitemName),
  if(_sp.ItemType = 2, katusl.name, katmc.name) (fieldname=ItemName),
  katotped.abbr (fieldname=OtpedName),
  _sp.MonthQty(1 ) (fieldname=MonthQty1 ),
  _sp.MonthQty(2 ) (fieldname=MonthQty2 ),
  _sp.MonthQty(3 ) (fieldname=MonthQty3 ),
  _sp.MonthQty(4 ) (fieldname=MonthQty4 ),
  _sp.MonthQty(5 ) (fieldname=MonthQty5 ),
  _sp.MonthQty(6 ) (fieldname=MonthQty6 ),
  _sp.MonthQty(7 ) (fieldname=MonthQty7 ),
  _sp.MonthQty(8 ) (fieldname=MonthQty8 ),
  _sp.MonthQty(9 ) (fieldname=MonthQty9 ),
  _sp.MonthQty(10) (fieldname=MonthQty10),
  _sp.MonthQty(11) (fieldname=MonthQty11),
  _sp.MonthQty(12) (fieldname=MonthQty12),
  _sp.MonthSum(1 ) (fieldname=MonthSum1 ),
  _sp.MonthSum(2 ) (fieldname=MonthSum2 ),
  _sp.MonthSum(3 ) (fieldname=MonthSum3 ),
  _sp.MonthSum(4 ) (fieldname=MonthSum4 ),
  _sp.MonthSum(5 ) (fieldname=MonthSum5 ),
  _sp.MonthSum(6 ) (fieldname=MonthSum6 ),
  _sp.MonthSum(7 ) (fieldname=MonthSum7 ),
  _sp.MonthSum(8 ) (fieldname=MonthSum8 ),
  _sp.MonthSum(9 ) (fieldname=MonthSum9 ),
  _sp.MonthSum(10) (fieldname=MonthSum10),
  _sp.MonthSum(11) (fieldname=MonthSum11),
  _sp.MonthSum(12) (fieldname=MonthSum12)
from _sp, fpstbud, katusl, katmc, katotped, pickpric, prices
where ((
  _sp.costitemNrec == fpstbud.nrec and
  _sp.ItemNrec     == katusl.nrec and
  _sp.ItemNrec     == katmc.nrec and
  _sp.OtpedNrec    == katotped.nrec
))
bounds byParent = _parentNrec == _sp.ParentNrec
;

tree tr1 ( ,,sci1478EscExInsTree);
excelColumns;
table _sp;
fixedLeft(CostitemName, ItemName, OtpedName, _sp.Qty, _sp.Price, _sp.Sum);
fields
  {font={bold=_sp.IsCostItem}};
//  _sp.Nrec         'Nrec'                 : [10] , protect;
//  _sp.ParentNrec   'ParentNrec'           : [10] , protect;
//  _sp.SpmnplanNrec 'SpmnplanNrec'         : [10] , protect;
//  _sp.costitemNrec 'CostitemNrec'         : [10] , protect;
  CostitemName     'Наименование'         : [30] , protect;
  ItemName         'Матценность/Услуга'   : [30] , protect, pickbutton;
  OtpedName        'Ед.изм'               : [8]  , protect, noautosize;
  _sp.Qty          'Всего кол-во'         : [8]  , protect;
  _sp.Price        'Цена'                 : [12,2], noprotect;
  _sp.Sum          'Всего сумма'          : [12,2], protect;
  MonthQty1        'Январь  '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum1        'Январь  '#13'Сумма'   : [8]  , protect;
  MonthQty2        'Февраль '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum2        'Февраль '#13'Сумма'   : [8]  , protect;
  MonthQty3        'Март    '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum3        'Март    '#13'Сумма'   : [8]  , protect;
  MonthQty4        'Апрель  '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum4        'Апрель  '#13'Сумма'   : [8]  , protect;
  MonthQty5        'Май     '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum5        'Май     '#13'Сумма'   : [8]  , protect;
  MonthQty6        'Июнь    '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum6        'Июнь    '#13'Сумма'   : [8]  , protect;
  MonthQty7        'Июль    '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum7        'Июль    '#13'Сумма'   : [8]  , protect;
  MonthQty8        'Август  '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum8        'Август  '#13'Сумма'   : [8]  , protect;
  MonthQty9        'Сентябрь'#13'Кол-во'  : [8]  , noprotect;
  //MonthSum9        'Сентябрь'#13'Сумма'   : [8]  , protect;
  MonthQty10       'Октябрь '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum10       'Октябрь '#13'Сумма'   : [8]  , protect;
  MonthQty11       'Ноябрь  '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum11       'Ноябрь  '#13'Сумма'   : [8]  , protect;
  MonthQty12       'Декабрь '#13'Кол-во'  : [8]  , noprotect;
  //MonthSum12       'Декабрь '#13'Сумма'   : [8]  , protect;
end;

procedure OpenAllNodes;
{
  TreePushPos(tr1);
  TreeGetFirst(tr1);
  do {
    TreeOpenNode(tr1);
  } while TreeGetNext(tr1);
  TreePopPos(tr1);
}

procedure SetSp(aSp: IClaimOverheadsSp);
{
  if BoundActive(tbByParent)
    SubBounds(tbByParent);
  _sp := aSp;
  AddBounds(tbByParent);
  TreeGetFirst(tr1);
}

function AllowEditSp: boolean;
{
  result := not _sp.IsCostitem;
}

function GetLastIncomePrice(aKatmcNrec: comp): double;
{
  result := 0;

  if _qGetIncomePrices = nullref
    _qGetIncomePrices := queryManager.createQuery(QueryGetIncomePrices);

  var rs: IResultSet;
  rs := _qGetIncomePrices.setParam('KatmcNrec', aKatmcNrec).getResultSet;

  if rs != nullref
    if rs.getLast = tsOk
      result := rs.row.Val('price');
}

function  AddSpToChildLevel: comp;
{
  result := _sp.nrec;

  if (_sp.AllowAddChildren)
  {
    UpdateTable;

    var buf: TtClaimOverheadsSp;
    ClearAdvRecord(buf);

    buf.ParentNrec    := _sp.Nrec;
    buf.IsCostitem    := false;
    buf.AllowAddChild := false;
    buf.ItemType      := _sp.ItemType;
    buf.CostitemNrec  := _sp.CostitemNrec;

    result := _sp.InsertNewWithBuffer(buf).Nrec;
  }

}

function  AddSpToCurrentLevel: comp;
{
  result := _sp.Nrec;

  if _sp.ParentNrec = 0 exit;

  var parentBuf: TtClaimOverheadsSp;
  parentBuf := _sp.GetBuffer(_sp.ParentNrec);

  if parentBuf.allowAddChild
  {
    UpdateTable;

    var buf: TtClaimOverheadsSp;
    ClearAdvRecord(buf);

    buf.ParentNrec    := parentBuf.nrec;
    buf.IsCostitem    := false;
    buf.AllowAddChild := false;
    buf.ItemType      := parentBuf.itemType;
    buf.CostitemNrec  := parentBuf.costitemNrec;
    result := _sp.InsertNewWithBuffer(buf).Nrec;
  }
}

function DeleteCurrentSp: boolean;
{
  result := false;

  if AllowEditSp
    if isValid(#_sp)
      result := (delete current _sp) = tsOk;
}

function  PickItemFromCatalog: boolean;
{
  result := false;
  var c: comp; c := _sp.ItemNrec;
  if _getkau.GetCodeKau(1, word(if(_sp.ItemType=2, 5, 4)), c) > 0
  {
    set _sp.ItemNrec := c;

    var p: double;
    p := GetLastIncomePrice(c);
    if p > 0
      set _sp.Price := p;

    update current _sp;

    result := true;
  }
}

function GetPriceNrecByCostitemNrec(aCostitemNrec: comp): comp;
{
  case aCostitemNrec of
    00010000000009CCh: result := 000100000000000Eh; //Мебель
    00010000000009CDh: result := 000100000000001Ah; //Бытовая техника
    000100000000047Ch: result := 000100000000009Fh; //Канцелярские принадлежности
    000100000000047Dh: result := 00010000000000A1h; //Материалы для нужд производства
    000100000000047Eh: result := 00010000000000A4h; //Инструменты, оборудование, приборы и пр.
    00010000000009A4h: result := 00010000000000A0h; //Материалы для копировально-множественной техники типографии
    000100000000047Fh: result := 00010000000000A5h; //Прочие материально-производственные запасы
  else
    result := 0;
  end;
}

function PickItemFromPrice: boolean;
{
  result := false;
  if runinterface(L_PRICES::GetPrice, GetPriceNrecByCostitemNrec(_sp.CostitemNrec), 0, _sp.ItemType, false) = cmDefault
  {
    if getfirst pickpric = tsOk
    {
      _sp.ItemType := pickpric.pickprmc;
      _sp.ItemNrec := pickpric.pickthing;
      _sp.OtpedNrec := pickpric.picked;
      if getfirst prices where ((pickpric.pickrec == prices.nrec)) = tsOk
        _sp.Price := prices.price;
      update current _sp;

      while getnext pickpric = tsOk
      {
        treejumptorecord(tr1, AddSpToCurrentLevel);
        _sp.ItemType := pickpric.pickprmc;
        _sp.ItemNrec := pickpric.pickthing;
        _sp.OtpedNrec := pickpric.picked;
        if getfirst prices where ((pickpric.pickrec == prices.nrec)) = tsOk
          _sp.Price := prices.price;
        update current _sp;
      }

      result := true;
    }
  }
}

procedure SetMonthQty(monthIndex: byte; value: double);
{
  _sp.SetMonthQty(monthIndex, value);
  update current _sp;
  rereadrecord(#_sp);
}

tableevent table _sp
  cmTreeTop      : _parentNrec := 0;
  cmTreeUp       : _parentNrec := _sp.ParentNrec;
  cmTreeDown     : _parentNrec := _sp.Nrec;
  cmTreeNeedOwner: treejumptorecord(tr1, _sp.ParentNrec);
  cmTreeNodeType : if not _sp.IsCostitem TreeSetNodeType(tr1, ntfText);

  cmUpdateRecord :
  {
    if AllowEditSp
      update current _sp;
    else
    {
      message('Редактирование текущей строки запрещено', error);
      abort;
    }
  }

  cmCheckField   :
  {
    if AllowEditSp
    {
      case curfield of
        #_sp.price: { update current _sp; }
      end;
    }
    else
    {
      message('Редактирование текущей строки запрещено', error);
      setmodified(false);
    }
    rereadrecord(#_sp);
  }

  cmExprFieldChanged:
  {
    if AllowEditSp
    {
      case curfield of
        #MonthQty1 : SetMonthQty(1 , ExprFieldValue);
        #MonthQty2 : SetMonthQty(2 , ExprFieldValue);
        #MonthQty3 : SetMonthQty(3 , ExprFieldValue);
        #MonthQty4 : SetMonthQty(4 , ExprFieldValue);
        #MonthQty5 : SetMonthQty(5 , ExprFieldValue);
        #MonthQty6 : SetMonthQty(6 , ExprFieldValue);
        #MonthQty7 : SetMonthQty(7 , ExprFieldValue);
        #MonthQty8 : SetMonthQty(8 , ExprFieldValue);
        #MonthQty9 : SetMonthQty(9 , ExprFieldValue);
        #MonthQty10: SetMonthQty(10, ExprFieldValue);
        #MonthQty11: SetMonthQty(11, ExprFieldValue);
        #MonthQty12: SetMonthQty(12, ExprFieldValue);
      end;
    }
    else
    {
      message('Редактирование текущей строки запрещено', error);
      rereadrecord(#_sp);
    }
  }
end;

handleevent

  cmPick:
  {
    case curfield of
      #CostitemName, #ItemName:
      {
        if AllowEditSp
          if PickItemFromPrice
            rereadrecord(#_sp);
      }
    end;
  }

  cmRestoreDoc:
  {
    case curfield of
      #CostitemName, #ItemName:
      {
        if AllowEditSp
          if PickItemFromCatalog
            rereadrecord(#_sp);
      }
    end;
  }

  cmInsLevel:
  {
    treejumptorecord(tr1, AddSpToChildLevel);
    rereadrecord(#_sp);
    stop;
  }

  cmAddNewRec:
  {
    treejumptorecord(tr1, AddSpToCurrentLevel);
    rereadrecord(#_sp);
    stop;
  }

  cmDelete:
  {
    if DeleteCurrentSp
    {
      rereadrecord(#_sp);
      if not isValid(#_sp)
      {
        redrawcurrentandgo(tr1, false);
        rereadrecord(#_sp);
      }
    }
    stop;
  }

end;

end.
