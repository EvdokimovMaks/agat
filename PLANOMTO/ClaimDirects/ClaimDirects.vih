#ifndef __ClaimDirects__
#define __ClaimDirects__

#include system.vih
#include IModify.vih
#include AtlProtocol.vih

#component "AGAT"

const
  ClaimDirectsSpKindCostitem = 1;
  ClaimDirectsSpKindMcUsl = 0;

  ClaimDirectsCostitemMateriali     = 00010000000004B8h; //Сырье и материалы
  ClaimDirectsCostitemPolufabrikati = 00010000000004BAh; //Покупные полуфабрикаты
  ClaimDirectsCostitemPki           = 00010000000004BBh; //Покупные комплектующие изделия (ПКИ)
  ClaimDirectsCostitemTzr           = 00010000000004C4h; //Транспортно-заготовительные расходы
  ClaimDirectsCostitemStoronnie     = 00010000000004C5h; //Работы и услуги сторонних организаций производственного характера
  ClaimDirectsCostitemSpec          = 00010000000004C7h; //Специальные затраты
  ClaimDirectsCostitemKomandirovki  = 00010000000004ACh; //Затраты на командировки
  ClaimDirectsCostitemProchie       = 00010000000004C9h; //Прочие прямые расходы
  ClaimDirectsCostitemSoisp         = 00010000000004CBh; //Затраты по работам соисполнителей
end;

table struct local tClaimDirectsSp (
  nrec           : comp,
  parentNrec     : comp,
  kind           : byte,
  spmnplanNrec   : comp,
  conditionNrec  : comp,
  number         : string[20],
  costitemNrec   : comp,
  itemType       : word,
  itemNrec       : comp,
  otpedNrec      : comp,
  priceStructNrec: comp,
  deviceNrec     : comp,
  katorgNrec     : comp,
  Description    : string,
  allowAddChild  : boolean,
  qty            : double,
  price          : double,
  sum            : double,
  percentNds     : double,
  sumNds         : double,
  sumWithNds     : double,
  orderedQty     : double,
  monthQty       : array[1..12] of double,
  monthSum       : array[1..12] of double
) with index (
  i01 = nrec (unique, surrogate),
  i02 = parentNrec + costitemNrec,
  i03 = spmnplanNrec,
  i04 = kind + costitemNrec
);

type TtClaimDirectsSp = record as table tClaimDirectsSp;

objinterface IClaimDirectsSp; forward;

objinterface IClaimDirects;
  function  IsDirty: boolean;
  function  Load(aMnplanNrec: comp): boolean;
  function  Save: boolean;
  procedure SetDirty;
  property MnplanNrec: comp read;
  property PeriodNrec: comp;
  property KatpodrNrec: comp;
  property KatstroyNrec: comp;
  property SlojNrec: comp;
  property Number: string[20];
  property Name: string;
  property StartDate: date;
  property EndDate: date;
  property Sp: IClaimDirectsSp read;
end;

objinterface IClaimDirectsSp;
  function  Load(aMnplanNrec: comp): boolean;
  procedure CheckCostitems;
  function  Save: boolean;
  function  IsLeaf: boolean;
  function  IsCostitem: boolean;
  function  MonthQty(monthIndex: byte): double;
  function  MonthSum(monthIndex: byte): double;
  function  GetBuffer(aSpNrec: comp): TtClaimDirectsSp;
  function  InsertNewWithBuffer(buf: TtClaimDirectsSp): TtClaimDirectsSp;
  function  SearchAndUpdateWithBuffer(buf: TtClaimDirectsSp): boolean;
  function  GetBufferByFields(aKind           : byte;
                              aCostitemNrec   : comp;
                              aParentNrec     : comp = comp(-1);
                              aItemType       : word = word(-1);
                              aItemNrec       : comp = comp(-1);
                              aPriceStructNrec: comp = comp(-1);
                              aDeviceNrec     : comp = comp(-1);
                              aKatorgNrec     : comp = comp(-1);
                              aDescription    : string = ''
                             ): TtClaimDirectsSp;
  function  GetCostitemSpBuffer(aCostitemNrec: comp): TtClaimDirectsSp;
  procedure SetMonthQty(monthIndex: byte; value: double);
  property Nrec                : comp;
  property ParentNrec          : comp;
  property Kind                : byte;
  property SpmnplanNrec        : comp;
  property ConditionNrec       : comp;
  property Number              : string[20];
  property CostitemNrec        : comp;
  property Description         : string;
  property ItemType            : word;
  property ItemNrec            : comp;
  property OtpedNrec           : comp;
  property PriceStructNrec     : comp;
  property DeviceNrec          : comp;
  property KatorgNrec          : comp;
  property Price               : double;
  property Qty                 : double;
  property Sum                 : double;
  property PercentNds          : double;
  property SumNds              : double;
  property SumWithNds          : double;
  property OrderedQty          : double;
  property AllowAddChildren    : boolean;
  property Claim               : IClaimDirects;
  index iByNrec = Nrec;
  index iByParentNrec = ParentNrec;
end;

objinterface ICreateCurClaim;
  function ShowUI: word;
  procedure SetCurClaim(aCD: IClaimDirects; aSP: IClaimDirectsSp);
end;

vipinterface CreateCurClaim implements ICreateCurClaim;

objinterface ISelectQty;
  property cRec: comp;
  property SelectedQty: double;
  procedure Add(aCrec: comp; aSelectedQty: double);
  procedure Delete(aCrec: comp);
  procedure Clear;
  index iByCrec = cRec;
end;

vipinterface SelectQty implements ISelectQty, IModify;

VipInterface ClaimDirectsSpSelectQtyView;
public:
  constructor ClaimDirectsSpSelectQtyView(aCDSp: IClaimDirectsSp; aQty: ISelectQty);
  function ShowUI: word;
end;

vipinterface ClaimDirects implements IClaimDirects;
public:
  constructor Init;
  destructor Done;
end;

vipinterface ClaimDirectsSp implements IClaimDirectsSp, IModify;

vipinterface ClaimDirectsSpTreeView;
public:
  constructor Init;
  destructor Done;
  procedure SetSp(aSp: IClaimDirectsSp);
  procedure OpenAllNodes;
  procedure CloseAllNodes;
  procedure UnsetTreeBounds;
  procedure SetTreeBounds;
  function JumpToFirst: boolean;
end;

vipinterface SetClaimDirectsSpAttributesDialog;
public:
  function ShowUI: word;
  property IsSetPriceStruct: boolean;
  property IsSetDevice: boolean;
  property IsSetKatorg: boolean;
  property PriceStructNrec: comp;
  property DeviceNrec: comp;
  property KatorgNrec: comp;
end;

vipinterface ClaimDirectsSync;
public:
  procedure SyncSpWithIndentClaim(sp: IClaimDirectsSp; claimNrec: comp; log: IAtlProtocol = nullref);
  procedure SyncSpWithIndent(sp: IClaimDirectsSp; indentNrec: comp; log: IAtlProtocol = nullref);
  procedure SyncClaimWithInputIndents(claimDirects: IClaimDirects; log: IAtlProtocol = nullref);
  procedure SyncOutputLinksWithInputLinks(claimDirects: IClaimDirects; log: IAtlProtocol = nullref);
  procedure LinkOutputIndentClaim(spmnplanNrec: comp; claimNrec: comp; log: IAtlProtocol = nullref);
  procedure CreateOutputIndent(aSp: IClaimDirectsSp; aSelQty: ISelectQty; log: IAtlProtocol = nullref);
  constructor Init;
  constructor Create(aProtocol: IAtlProtocol);
  property Protocol: IAtlProtocol;
end;

#end
