#include ClaimDirects.vih
#include System.vih

#component "AGAT"

interface ClaimDirects;


var
  _isDirty     : boolean;
  _mnplanNrec  : comp;
  _periodNrec  : comp;
  _katpodrNrec : comp;
  _katstroyNrec: comp;
  _slojNrec    : comp;
  _number      : string[20];
  _name        : string;
  _startDate   : date;
  _endDate     : date;
  _sp          : IClaimDirectsSp;

create view vLoad
var
  _loadMnplanNrec: comp;
as select *
from mnplan, spmnplan
where ((
  _loadMnplanNrec == mnplan.nrec and
  mnplan.nrec     == spmnplan.cmnplan and
  0               == spmnplan.cspmnplan
));

create view vSave
var
  _saveMnplanNrec: comp;
as select *
from mnplan
where (( _saveMnplanNrec == mnplan.nrec ));

procedure CopyMnplanBufferToProperties(buf: type$mnplan);
{
  _mnplanNrec  := buf.nrec;
  _periodNrec  := buf.canval1;
  _katpodrNrec := buf.canval2;
  _katstroyNrec:= buf.canval3;
  _number      := buf.number;
  _name        := buf.name;
  _slojNrec    := buf.cSloj;
  _startDate   := buf.startDate;
  _endDate     := buf.endDate;
}

procedure CopyPropertiesToMnplanBuffer(buf: type$mnplan);
{
  buf.nrec      := _mnplanNrec;
  buf.canval1   := _periodNrec;
  buf.canval2   := _katpodrNrec;
  buf.canval3   := _katstroyNrec;
  buf.number    := _number;
  buf.name      := _name;
  buf.cSloj     := _slojNrec;
  buf.startDate := _startDate;
  buf.endDate   := _endDate;
}

procedure IClaimDirects.SetDirty;   { _IsDirty := true;  }

procedure UnsetDirty; { _IsDirty := false; }

function IClaimDirects.Load(aMnplanNrec: comp): boolean;
{
  vLoad._loadMnplanNrec := aMnplanNrec;
  if vLoad.getfirst fastfirstrow mnplan = tsOk
  {
    CopyMnplanBufferToProperties(type$mnplan(vLoad.mnplan.buffer));
    UnsetDirty;
    result := true;
    _sp.Load(aMnplanNrec);
  }
  else
    result := false;
}

function IClaimDirects.Save: boolean;
{
  if _isDirty
  {
    vSave._saveMnplanNrec := _mnplanNrec;
    if vSave.getfirst fastfirstrow mnplan = tsOk
    {
      CopyPropertiesToMnplanBuffer(vSave.mnplan.buffer);
      vSave.update current mnplan;
      result := _sp.Save;
      UnsetDirty;
    }
    else
      result := false;
  }
  else
    result := true;
}

function IsDirty: boolean;
{
  result := _isDirty;
}

constructor Init;
{
  _sp := IClaimDirectsSp(new(ClaimDirectsSp));
  _sp.Claim := IClaimDirects(self);

  result := true;
}

#declare WriteProperty(PropertyName)
{ if(#PropertyName != result) { #PropertyName := result; SetDirty; } }
#end

property IClaimDirects.MnplanNrec  : comp              read _mnplanNrec;
property IClaimDirects.PeriodNrec  : comp              read _periodNrec    write #WriteProperty(_periodNrec);
property IClaimDirects.KatpodrNrec : comp              read _katpodrNrec   write #WriteProperty(_katpodrNrec);
property IClaimDirects.KatstroyNrec: comp              read _katstroyNrec  write #WriteProperty(_katstroyNrec);
property IClaimDirects.Number      : string[20]        read _number        write #WriteProperty(_number);
property IClaimDirects.Name        : string            read _name          write #WriteProperty(_name);
property IClaimDirects.SlojNrec    : comp              read _slojNrec      write #WriteProperty(_slojNrec);
property IClaimDirects.StartDate   : date              read _startDate     write #WriteProperty(_startDate);
property IClaimDirects.EndDate     : date              read _endDate       write #WriteProperty(_endDate);
property IClaimDirects.Sp          : IClaimDirectsSp read _sp;
end.
