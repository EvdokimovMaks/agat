#include ClaimDirects.vih
#include Query.vih
#include IModify.vih

#component "AGAT"

interface ClaimDirectsSp;

//#region Queries

sql Query qLoadSp =
select spm.nrec      as Nrec,
       spm.cspmnplan as ParentNrec,
       spm.nrec      as SpmnplanNrec,
       spm.condrec   as ConditionNrec,
       spm.number    as Number,
       spm.canval1   as CostitemNrec,
       spm.canval2   as PriceStructNrec,
       spm.canval3   as DeviceNrec,
       spm.canval4   as KatorgNrec,
       spm.typeizd   as ItemType,
       spm.cizd      as ItemNrec,
       case when spm.cotped = #comp(0)
            then coalesce(oe.nrec,#comp(0))
            else spm.cotped
       end           as OtpedNrec,
       coalesce(vsp.kol      , 0) as Qty,
       coalesce(vsp.price    , 0) as Price,
       coalesce(vsp.vprice   , 0) as Sum,
       coalesce(vsp.summa    , 0) as PercentNds,
       coalesce(vsp.kolfield5, 0) as SumNds,
       coalesce(vsp.kolfact  , 0) as SumWithNds
from mnplan
join spmnplan spm on spm.cmnplan = mnplan.nrec
left join katotped oe on oe.prmc = spm.typeizd and oe.cmcusl = spm.cizd and oe.akt = 1 and spm.cizd <> #comp(0)
left join spmnpl spl on spl.cspmnplan = spm.nrec and spl.wkolan = 25
left join valspmnp vsp on vsp.cspmnpl = spl.nrec and spl.nrec is not null
where mnplan.nrec = :MnplanNrec
;

sql query qLoadSpMonth =
select spm.nrec as SpmnplanNrec,
       month(datetime(per.dbeg,0)) as MonthIndex,
       vsp.kol as Qty,
       vsp.price as Price,
       vsp.vPrice as Sum
from mnplan
left join fpperiod mainper on mainper.nrec = mnplan.canval1
join spmnplan spm on spm.cmnplan = mnplan.nrec
join spmnpl spl on spl.cspmnplan = spm.nrec and spl.wkolan = 1
join fpperiod per on spl.canval4 = per.nrec and per.dbeg between coalesce(mainper.dbeg,0) and coalesce(mainper.dend,0)
join valspmnp vsp on vsp.cspmnpl = spl.nrec
where mnplan.nrec = :MnplanNrec
;

sql query qGetPeriodNrec =
select per.nrec
from fpperiod per1
join fpperiod per on per.cmain = per1.cmain
                 and year(datetime(per.dbeg,0))=year(datetime(per1.dbeg,0))
                 and month(datetime(per.dbeg,0)) = :MonthIndex
join fptper tper on tper.nrec = per.ctper and tper.edizm = 2
where per1.nrec = :ClaimPeriodNrec
;

//#endregion

var
  _claim: IClaimDirects;
  _qGetPeriodNrec: IQuery;

file f;

create view
as select *
from tClaimDirectsSp tSp, tClaimDirectsSp tSpChildren, tClaimDirectsSp
where ((
  tSp.nrec == tSpChildren.parentNrec
));

create view vSp
var
  _spNrec: comp
as select *
from tClaimDirectsSp tSp, tClaimDirectsSp tSpChildren
where ((
  _spNrec          == tSp.nrec and
  _spNrec          == tSpChildren.parentNrec
));

create view vDelete
as select *
from tClaimDirectsSp tSp;

create view vCheck
var
  _parentSpNrec    : comp;
  _costitemNrec    : comp;
  _number          : string;
  _priceStructNrec : comp;
  _deviceNrec      : comp;
  _katorgNrec      : comp;
as select *
from tClaimDirectsSp tSp
where ((
  _parentSpNrec      == tSp.parentNrec and
  _costitemNrec      == tSp.costitemNrec and (
  tSp.number          = _number and
  tSp.priceStructNrec = _priceStructNrec and
  tSp.deviceNrec      = _deviceNrec and
  tSp.katorgNrec      = _katorgNrec )
));

create view vSave
var
  _parentNrec: comp;
as select *
from  tClaimDirectsSp tSpParent,
      tClaimDirectsSp tSp,
      spmnplan spm,
      spmnpl,
      valspmnp,
      mnanal,
      allmemo
where ((
  _parentNrec       == tSpParent.nrec and
  _parentNrec       == tSp.parentNrec and
  tSp.spmnplanNrec  == spm.nrec and
  _claim.SlojNrec   == mnanal.csloj and
  0                 == mnanal.cblock and
  0                 == mnanal.fldan1 and
  _claim.MnplanNrec == mnanal.fldan2
))
;

create view vRemovedSpmnplan
var
  _mnplanNrec: comp;
as select *
from spmnplan, tClaimDirectsSp tSp, spmnpl, valspmnp
where ((
  _mnplanNrec   == spmnplan.cmnplan and
  spmnplan.nrec == spmnpl.cspmnplan and
  spmnpl.nrec   == valspmnp.cspmnpl and
  spmnplan.nrec == tSp.SpmnplanNrec
));

create view v
as select *
from tClaimDirectsSp tSp, allmemo
;

//#region Вспомогательные функции

function  isValidMonthIndex(monthIndex: byte): boolean;
{
  result := monthIndex > 0 and monthIndex <= 12;
}

procedure RecalcCurrent;
{
  var i: byte;
  tSp.qty := 0;
  tSp.sum := 0;
  for(i := 1; i <= 12; i++)
  {
    tSp.monthSum[i] := tSp.monthQty[i] * tSp.price;
    tSp.qty += tSp.monthQty[i];
    tSp.sum += tSp.monthSum[i];
  }
  tSp.sumNds := tSp.sum * tSp.percentNds / 100;
  tSp.sumWithNds := tSp.sum + tSp.sumNds;

  _claim.SetDirty;
}

procedure RecalcSpAgregate(aSpNrec: comp);
{
  vSp._spNrec := aSpNrec;

  if vSp.getfirst fastfirstrow tSp = tsOk
  {

    vSp.tSp.sum        := 0;
    vSp.tSp.price      := 0;
    vSp.tSp.qty        := 0;
    vSp.tSp.percentNds := 0;
    vSp.tSp.sumNds     := 0;
    vSp.tSp.sumWithNds := 0;

    var i: byte;
    for(i := 1; i <= 12; i++)
    {
      vSp.tSp.monthSum[i] := 0;
      vSp.tSp.monthQty[i] := 0;
    }

    vSp._loop tSpChildren
    {
      for(i := 1; i <= 12; i++)
      {
        vSp.tSp.monthSum[i] += vSp.tSpChildren.monthSum[i];
        vSp.tSp.monthQty[i] += vSp.tSpChildren.monthQty[i];
      }
      vSp.tSp.qty         += vSp.tSpChildren.qty;
      vSp.tSp.sum         += vSp.tSpChildren.sum;
      vSp.tSp.sumNds      += vSp.tSpChildren.sumNds;
      vSp.tSp.sumWithNds  += vSp.tSpChildren.sumWithNds;
    }

    vSp.update current  tSp;

    if vSp.tSp.parentNrec != 0
      RecalcSpAgregate(vSp.tSp.parentNrec);
  }

  _claim.SetDirty;
}

procedure DeleteSpChildren(aSpNrec: comp);
{
  var l: longint;
  l := initmarker('', 8, 10, 20, false);

  insertmarker(l, aSpNrec);

  var i: longint;
  var c: comp;
  for(i := 0; getmarker(l, i, c); i++)
  {
    vSp._spNrec := c;
    vSp._loop tSpChildren
      insertmarker(l, vSp.tSpChildren.nrec);
  }

  AtDeleteMarker(l, 0);

  vDelete.delete all tSp where foundmarker(l, vDelete.tSp.nrec);

  donemarker(l, '');

  _claim.SetDirty;
}

function CheckSpCostitem(aParentSpNrec    : comp;
                         aCostitemNrec    : comp;
                         aNumber          : string;
                         aAllowAddChildren: boolean = true;
                         aItemType        : word = 1;
                         aPriceStructNrec : comp = 0;
                         aDeviceNrec      : comp = 0;
                         aKatorgNrec      : comp = 0): comp;
{
  vCheck._parentSpNrec     := aParentSpNrec;
  vCheck._costitemNrec     := aCostitemNrec;
  vCheck._number           := aNumber;
  vCheck._priceStructNrec  := aPriceStructNrec;
  vCheck._deviceNrec       := aDeviceNrec;
  vCheck._katorgNrec       := aKatorgNrec;

  if vCheck.getfirst tSp != tsOk
  {
    vCheck.clearbuffer(#vCheck.tSp);
    vCheck.tSp.parentNrec      := aParentSpNrec;
    vCheck.tSp.costitemNrec    := aCostitemNrec;
    vCheck.tSp.number          := aNumber;
    vCheck.tSp.priceStructNrec := aPriceStructNrec;
    vCheck.tSp.deviceNrec      := aDeviceNrec;
    vCheck.tSp.katorgNrec      := aKatorgNrec;
    vCheck.insert current tSp;
    _claim.SetDirty;
  }

  vCheck.tSp.kind            := ClaimDirectsSpKindCostitem;
  vCheck.tSp.allowAddChild   := aAllowAddChildren;
  vCheck.tSp.itemType        := aItemType;
  vCheck.update current tSp;

  result := vCheck.tSp.nrec;
}

procedure SetPrice(value: double);
{
  tSp.price := value;
  RecalcCurrent;
}

procedure SetPercentNds(value: double);
{
  tSp.percentNds := value;
  RecalcCurrent;
}

type TSpmnplan = record as table spmnplan;
type TSpmnpl = record as table spmnpl;

function GetPeriodNrec(claimPeriodNrec: comp; monthIndex: byte): comp; cacheable;
{
  result := 0;

  if _qGetPeriodNrec = nullref
    _qGetPeriodNrec := queryManager.createQuery(qGetPeriodNrec);

  var rs: IResultSet;
  rs := _qGetPeriodNrec.setParam('ClaimPeriodNrec', claimPeriodNrec)
                       .setParam('MonthIndex', monthIndex)
                       .getResultSet;
  if rs != nullref
    if rs.getFirst = tsOk
      result := rs.row.Val('nrec');
}

//#endregion

//#region Сохранение модели в БД

procedure SaveValspmnp(spmnplBuf: TSpmnpl; aQty: double; aPrice: double; aSum: double;
                       aPercentNds: double=0; aSumNds: double=0; aSumWithNds: double=0);
{
  if vSave.getfirst fastfirstrow valspmnp where ((spmnplBuf.nrec == valspmnp.cspmnpl
                                              and 1              == valspmnp.num)) != tsOk
  {
    vSave.clearbuffer(#vSave.valspmnp);
    vSave.valspmnp.cspmnpl := spmnplBuf.nrec;
    vSave.valspmnp.num     := 1;
    vSave.insert current valspmnp;
  }
  vSave.valspmnp.cspmnplan := spmnplBuf.cspmnplan;
  vSave.valspmnp.cmnanal   := spmnplBuf.cmnanal;
  vSave.valspmnp.cOtpEd    := spmnplBuf.cotped;
  vSave.valspmnp.EdTime    := spmnplBuf.edtime;
  vSave.valspmnp.kol       := aQty;
  vSave.valspmnp.price     := aPrice;
  vSave.valspmnp.vprice    := aSum;
  vSave.valspmnp.summa     := aPercentNds;
  vSave.valspmnp.kolfield5 := aSumNds;
  vSave.valspmnp.kolfact   := aSumWithNds;
  vSave.update current valspmnp;
}

procedure DeleteSpmnpl( _spmnplanNrec: comp;
                        _wkolan      : word;
                        _wkodgr4     : word;
                        _canval4     : comp);
{
  if vSave.getfirst fastfirstrow spmnpl where (( _spmnplanNrec == spmnpl.cspmnplan
                                             and _wkolan       == spmnpl.wkolan
                                             and _wkodgr4      == spmnpl.wkodgr4
                                             and _canval4      == spmnpl.canval4 )) = tsOk
  {
    vSave.delete all valspmnp where ((vSave.spmnpl.nrec == valspmnp.cspmnpl));
    vSave.delete current spmnpl;
  }

}

function SaveSpmnpl(bufSpmnplan: TSpmnplan;
                    _wkolan    : word;
                    _wkodgr4   : word;
                    _crolean4  : comp;
                    _canval4   : comp): TSpmnpl;
{
  if vSave.getfirst fastfirstrow mnanal != tsOk
  {
    vSave.clearbuffer(#vSave.mnanal);
    vSave.mnanal.csloj  := _claim.SlojNrec;
    vSave.mnanal.cblock := 0;
    vSave.mnanal.fldan1 := 0;
    vSave.mnanal.fldan2 := _claim.MnplanNrec;
    vSave.insert current mnanal;
  }

  if vSave.getfirst fastfirstrow spmnpl where (( bufSpmnplan.nrec == spmnpl.cspmnplan
                                             and _wkolan          == spmnpl.wkolan
                                             and _wkodgr4         == spmnpl.wkodgr4
                                             and _canval4         == spmnpl.canval4 )) != tsOk
  {
    vSave.clearbuffer(#vSave.spmnpl);
    vSave.spmnpl.cspmnplan := bufSpmnplan.nrec;
    vSave.spmnpl.wkolan    := _wkolan;
    vSave.spmnpl.wkodgr4   := _wkodgr4;
    vSave.spmnpl.crolean4  := _crolean4;
    vSave.spmnpl.canval4   := _canval4;
    vSave.insert current spmnpl;
  }

  vSave.spmnpl.cspmnplan := bufSpmnplan.nrec;
  vSave.spmnpl.cRoleAn1  := bufSpmnplan.cRoleAn1;
  vSave.spmnpl.wKodGr1   := bufSpmnplan.wKodGr1;
  vSave.spmnpl.cAnVal1   := bufSpmnplan.cAnVal1;
  vSave.spmnpl.cRoleAn2  := bufSpmnplan.cRoleAn2;
  vSave.spmnpl.wKodGr2   := bufSpmnplan.wKodGr2;
  vSave.spmnpl.cAnVal2   := bufSpmnplan.cAnVal2;
  vSave.spmnpl.cRoleAn3  := bufSpmnplan.cRoleAn3;
  vSave.spmnpl.wKodGr3   := bufSpmnplan.wKodGr3;
  vSave.spmnpl.cAnVal3   := bufSpmnplan.cAnVal3;
  vSave.spmnpl.wKodGr8   := bufSpmnplan.wKodGr4;
  vSave.spmnpl.cAnVal8   := bufSpmnplan.cAnVal4;
  vSave.spmnpl.typeizd   := bufSpmnplan.TypeIzd;
  vSave.spmnpl.cRoleIzd  := bufSpmnplan.cRoleIzd;
  vSave.spmnpl.cIzd      := bufSpmnplan.cIzd;
  vSave.spmnpl.cOtpEd    := bufSpmnplan.cOtpEd;
  vSave.spmnpl.NumSort   := bufSpmnplan.NumSort;
  vSave.spmnpl.Number    := bufSpmnplan.Number;
  vSave.spmnpl.cSloj     := bufSpmnplan.cSloj;
  vSave.spmnpl.cMnPlan   := bufSpmnplan.cmnplan;
  vSave.spmnpl.cVal1     := bufSpmnplan.cVal1;
  vSave.spmnpl.cMnAnal   := if(vSave.getfirst mnanal = tsOk, vSave.mnanal.nrec, 0);
  vSave.update current spmnpl;
  result := TSpmnpl(vSave.spmnpl.buffer);
}

function SaveSpmnplan: TSpmnplan;
{

  if vSave.tSp.spmnplanNrec = 0
  {
    vSave.clearbuffer(#vSave.spm);
    vSave.spm.cmnplan       := _claim.MnplanNrec;
    vSave.spm.startdate     := _claim.StartDate;
    vSave.spm.enddate       := _claim.EndDate;
    vSave.spm.croleizd      := 40018CA016897966h;
    vSave.spm.crolean1      := 4001F25D0810881Fh;      //Статья затрат
    vSave.spm.wkodgr1       := 20;                     //Статья бюджета
    vSave.spm.crolean2      := 0001000000000035h;      //Статья структуры цены
    vSave.spm.wkodgr2       := 73;                     //Статьи затрат объектов строительства
    vSave.spm.crolean3      := 0001000000000036h;      //Прибор / модуль / плата/ ЗИП / КМЧ
    vSave.spm.wkodgr3       := 4;                      //Материальные ценности
    vSave.spm.crolean4      := 400111A5C92CBBF8h;      //Поставщик
    vSave.spm.wkodgr4       := 1;                      //Организации
    vSave.spm.csloj         := _claim.SlojNrec;
    vSave.insert current spm;
    vSave.update current tSp set tSp.SpmnplanNrec := vSave.spm.nrec;
  }

  if vSave.getfirst fastfirstrow spm = tsOk
  {
    vSave.spm.number        := vSave.tSp.number;
    vSave.spm.cizd          := vSave.tSp.itemNrec;
    vSave.spm.typeizd       := vSave.tSp.itemType;
    vSave.spm.cotped        := vSave.tSp.otpedNrec;
    vSave.spm.canval1       := vSave.tSp.costitemNrec;
    vSave.spm.canval2       := vSave.tSp.priceStructNrec;
    vSave.spm.canval3       := vSave.tSp.deviceNrec;
    vSave.spm.canval4       := vSave.tSp.katorgNrec;
    vSave.spm.cspmnplan     := if(vSave.getfirst tSpParent = tsOk, vSave.tSpParent.spmnplanNrec, 0);
    vSave.spm.condrec       := if(vSave.tSp.kind = ClaimDirectsSpKindCostitem, 1, 0);
    vSave.spm.cval1         := 0001000000000231h;
    vSave.update current spm;

    if vSave.tSp.Description = ''
    {
      if vSave.getfirst allmemo where ((11038          == allmemo.wtable and
                                        vSave.spm.nrec == allmemo.cRec  )) = tsOk
      {
        vSave.delete current allmemo;
      }
    }
    else
    {
      if vSave.getfirst allmemo where ((11038          == allmemo.wtable and
                                        vSave.spm.nrec == allmemo.cRec  )) != tsOk
      {
        vSave.clearbuffer(#vSave.allmemo);
        vSave.allmemo.wtable := 11038;
        vSave.allmemo.cRec   := vSave.spm.nrec;
        vSave.insert current allmemo;
      }
      ClearMemoField(vSave.allmemo.mem);
      f.OpenMemo(vSave.allmemo.mem);
      f.Writeln(vSave.tSp.Description);
      f.Close;
      vSave.update current allmemo;
    }
  }

  result := TSpmnplan(vSave.spm.buffer);
}

procedure SaveChildren(aParentNrec: comp);
{
  var l: longint;
  l := initmarker('',8,10,10,false);
  vSave._parentNrec := aParentNrec;
  vSave._loop tSp
  {

    var spmnplanBuf: TSpmnplan;
    spmnplanBuf := SaveSpmnplan;

    //все значения нулевые - удаляем ячейку
    if vSave.tSp.qty=0 and vSave.tSp.price=0 and vSave.tSp.sum=0
      DeleteSpmnpl(spmnplanBuf.nrec, 25, 29, _claim.MnplanNrec);
    else
    {
      var spmnplBuf: TSpmnpl;
      spmnplBuf := SaveSpmnpl(spmnplanBuf, 25, 29, 400174D9C8CF511Eh, _claim.MnplanNrec);
      SaveValspmnp(spmnplBuf, vSave.tSp.qty, vSave.tSp.price, vSave.tSp.sum,
                   vSave.tSp.percentNds, vSave.tSp.sumNds, vSave.tSp.sumWithNds);
    }

    var monthIndex: byte;
    for (monthIndex := 1; monthIndex <= 12; monthIndex++)
    {
      var monthPeriodNrec: comp;
      monthPeriodNrec := getPeriodNrec(_claim.PeriodNrec, monthIndex);

      if vSave.tSp.monthQty[monthIndex] = 0
        DeleteSpmnpl(spmnplanBuf.nrec, 1, 21, monthPeriodNrec);
      else
      {
        var spmnplBuf: TSpmnpl;
        spmnplBuf := SaveSpmnpl(spmnplanBuf, 1, 21, 40015C4CA3652682h, monthPeriodNrec);
        SaveValspmnp(spmnplBuf, vSave.tSp.monthQty[monthIndex], vSave.tSp.price, vSave.tSp.monthSum[monthIndex]);
      }
    }

    insertmarker(l, vSave.tSp.Nrec);
  }

  var i: longint;
  var c: comp;
  for(i := 0; getmarker(l, i, c); i++)
  {
    SaveChildren(c);
  }

  donemarker(l,'');
}

procedure DeleteRemovedSpmnplan;
{
  var l: longint;
  l := initmarker('',8,10,10,false);
  vRemovedSpmnplan._mnplanNrec := _claim.MnplanNrec;
  vRemovedSpmnplan._loop spmnplan
  {
    if vRemovedSpmnplan.getfirst tSp != tsOk
    {
      insertmarker(l, vRemovedSpmnplan.spmnplan.nrec);
      vRemovedSpmnplan._loop spmnpl
        vRemovedSpmnplan.delete all valspmnp;
      vRemovedSpmnplan.delete all spmnpl;
    }
  }
  vRemovedSpmnplan.delete all spmnplan where foundmarker(l, vRemovedSpmnplan.spmnplan.nrec);

  donemarker(l,'');
}
//#endregion

//#region IModify

Function IModify.doInsert : Word;
{
  RecalcCurrent;
  result := insert current tSp;
  RecalcSpAgregate(tSp.parentNrec);
  _claim.SetDirty;
}

Function IModify.doUpdate : Word;
{
  if IsCostitem
  {
    result := update current tSp;
    RecalcSpAgregate(tSp.Nrec);
  }
  else
  {
    RecalcCurrent;
    result := update current tSp;
    RecalcSpAgregate(tSp.parentNrec);
  }
  _claim.SetDirty;
}

Function IModify.doDelete : Word;
{
  var aParentSpNrec: comp;
  aParentSpNrec := tSp.parentNrec;

  DeleteSpChildren(tSp.nrec);

  result := delete current tSp;

  RecalcSpAgregate(aParentSpNrec);

  _claim.SetDirty;
}

implementation IModify.doFlush  abstract;

//#endregion

//#region IClaimDirectsSp

function  IClaimDirectsSp.Load(aMnplanNrec: comp): boolean;
{
  delete all tClaimDirectsSp;

  sqlCopyInto(
    queryManager.createQuery(qLoadSp).setParam('MnplanNrec',aMnplanNrec).getResultSet,
    #tClaimDirectsSp,
    true
  );

  var rs: IResultSet;
  rs := queryManager.createQuery(qLoadSpMonth).setParam('MnplanNrec', aMnplanNrec).getResultSet;

  if rs != nullref
    if rs.getfirst = tsOk do
    {
      vSp._spNrec := rs.row.Val('SpmnplanNrec');
      if vSp.getfirst tSp = tsOk
      {
        var monthIndex: byte;
        monthIndex := rs.row.Val('MonthIndex');

        if isValidMonthIndex(monthIndex)
        {
          vSp.tSp.monthQty[monthIndex] := rs.row.Val('Qty');
          vSp.tSp.monthSum[monthIndex] := rs.row.Val('Sum');
          vSp.update current tSp;
        }
      }
    } while rs.getNext = tsOk;

  CheckCostitems;

  v._loop tSp
  {
    if v.getfirst allmemo where ((11038              == allmemo.wtable and
                                  v.tSp.SpmnplanNrec == allmemo.cRec )) = tsOk
    {
      var s: string = '';
      f.OpenMemo(v.allmemo.mem);
      while not f.eof
      {
        f.Readln(s);
        v.tSp.Description := v.tSp.Description + if(v.tSp.Description != '', ' ', '') + s;
      }
      f.Close;
      v.update current tSp;
    }
  }

  result := true;
}

procedure IClaimDirectsSp.CheckCostitems;
{
  CheckSpCostitem(0, ClaimDirectsCostitemMateriali    , '20010101', true, 1); //Сырье и материалы
  CheckSpCostitem(0, ClaimDirectsCostitemPolufabrikati, '20010201', true, 1); //Покупные полуфабрикаты
  CheckSpCostitem(0, ClaimDirectsCostitemPki          , '20010401', true, 1); //Покупные комплектующие изделия (ПКИ)
  CheckSpCostitem(0, ClaimDirectsCostitemTzr          , '20010501', true, 2); //Транспортно-заготовительные расходы
  CheckSpCostitem(0, ClaimDirectsCostitemStoronnie    , '20010801', true, 2); //Работы и услуги сторонних организаций производственного характера
  CheckSpCostitem(0, ClaimDirectsCostitemSpec         , '20040101', true, 2); //Специальные затраты
  CheckSpCostitem(0, ClaimDirectsCostitemKomandirovki , '20050000', true, 2); //Затраты на командировки
  CheckSpCostitem(0, ClaimDirectsCostitemProchie      , '20060801', true, 2); //Прочие прямые расходы
  CheckSpCostitem(0, ClaimDirectsCostitemSoisp        , '20100101', true, 2); //Затраты по работам соисполнителей
}

function  IClaimDirectsSp.Save: boolean;
{
  ClearFuncCache;
  SaveChildren(0);
  DeleteRemovedSpmnplan;
  result := true;
}

function IClaimDirectsSp.IsLeaf: boolean;
{
  result := getfirst fastfirstrow tSpChildren != tsOk;
}

function IClaimDirectsSp.IsCostitem: boolean;
{
  result := tSp.kind = ClaimDirectsSpKindCostitem;
}

function  IClaimDirectsSp.MonthQty(monthIndex: byte): double;
{
  result := if(isValidMonthIndex(monthIndex), tSp.monthQty[monthIndex], 0);
}

function  IClaimDirectsSp.MonthSum(monthIndex: byte): double;
{
  result := if(isValidMonthIndex(monthIndex), tSp.monthSum[monthIndex], 0);
}

function  IClaimDirectsSp.MonthOrderedQty(monthIndex: byte): double;
{
  result := if(isValidMonthIndex(monthIndex), tSp.monthOrderedQty[monthIndex], 0);
}

procedure IClaimDirectsSp.SetMonthQty(monthIndex: byte; value: double);
{
  if isValidMonthIndex(monthIndex)
    if value != tSp.monthQty[monthIndex]
    {
      set tSp.monthQty[monthIndex] := value;
      RecalcCurrent;
    }
}

function  IClaimDirectsSp.GetBuffer(aSpNrec: comp): TtClaimDirectsSp;
{
  var buf: TtClaimDirectsSp;
  ClearAdvRecord(buf);
  vSp._spNrec := aSpNrec;
  if vSp.getfirst tSp = tsOk
    buf := TtClaimDirectsSp(vSp.tSp.buffer);
  result := buf;
}

function IClaimDirectsSp.InsertNewWithBuffer(buf: TtClaimDirectsSp): TtClaimDirectsSp;
{
  v.clearbuffer(#v.tSp);
  v.tSp.buffer := buf;
  v.insert current tSp;
  result := TtClaimDirectsSp(v.tSp.buffer);
  _claim.SetDirty;
}

function  IClaimDirectsSp.GetBufferByFields(aKind           : byte;
                                            aCostitemNrec   : comp;
                                            aParentNrec     : comp = comp(-1);
                                            aItemType       : word = word(-1);
                                            aItemNrec       : comp = comp(-1);
                                            aPriceStructNrec: comp = comp(-1);
                                            aDeviceNrec     : comp = comp(-1);
                                            aKatorgNrec     : comp = comp(-1)
                                           ): TtClaimDirectsSp;
{
  var buf: TtClaimDirectsSp;

  if v.getfirst tSp where ((
                                  aKind         == tSp.Kind
                              and aCostitemNrec == tSp.costitemNrec
                              and (
                                   (aParentNrec      = comp(-1) or tSp.parentNrec      = aParentNrec)
                               and (aItemType        = word(-1) or tSp.itemType        = aItemType)
                               and (aItemNrec        = comp(-1) or tSp.itemNrec        = aItemNrec)
                               and (aPriceStructNrec = comp(-1) or tSp.priceStructNrec = aPriceStructNrec)
                               and (aDeviceNrec      = comp(-1) or tSp.deviceNrec      = aDeviceNrec)
                               and (aKatorgNrec      = comp(-1) or tSp.katorgNrec      = aKatorgNrec)
                                  )
                          )) = tsOk
    buf := TtClaimDirectsSp(v.tSp.buffer)
  else
    ClearAdvRecord(buf);
  result := buf;
}

function  IClaimDirectsSp.GetCostitemSpBuffer(aCostitemNrec: comp): TtClaimDirectsSp;
{
  result := GetBufferByFields(ClaimDirectsSpKindCostitem, aCostitemNrec, comp(-1), word(-1), 0, 0, 0, 0);
}

property IClaimDirectsSp.Nrec                : comp            absolute tSp.nrec;
property IClaimDirectsSp.ParentNrec          : comp            absolute tSp.parentNrec;
property IClaimDirectsSp.Kind                : byte            absolute tSp.kind;
property IClaimDirectsSp.SpmnplanNrec        : comp            absolute tSp.spmnplanNrec;
property IClaimDirectsSp.ConditionNrec       : comp            absolute tSp.conditionNrec;
property IClaimDirectsSp.Number              : string[20]      absolute tSp.number;
property IClaimDirectsSp.CostitemNrec        : comp            absolute tSp.costitemNrec;
property IClaimDirectsSp.ItemType            : word            absolute tSp.itemType;
property IClaimDirectsSp.ItemNrec            : comp            absolute tSp.itemNrec;
property IClaimDirectsSp.OtpedNrec           : comp            absolute tSp.otpedNrec;
property IClaimDirectsSp.PriceStructNrec     : comp            absolute tSp.priceStructNrec;
property IClaimDirectsSp.DeviceNrec          : comp            absolute tSp.deviceNrec;
property IClaimDirectsSp.KatorgNrec          : comp            absolute tSp.katorgNrec;
property IClaimDirectsSp.Description         : string          absolute tSp.Description;
property IClaimDirectsSp.Price               : double          read     tSp.price write SetPrice(result);
property IClaimDirectsSp.Qty                 : double          absolute tSp.qty;
property IClaimDirectsSp.Sum                 : double          absolute tSp.sum;
property IClaimDirectsSp.PercentNds          : double          read     tSp.percentNds write SetPercentNds(result);
property IClaimDirectsSp.SumNds              : double          absolute tSp.sumNds;
property IClaimDirectsSp.SumWithNds          : double          absolute tSp.sumWithNds;
property IClaimDirectsSp.AllowAddChildren    : boolean         absolute tSp.allowAddChild;
property IClaimDirectsSp.Claim               : IClaimDirects absolute _claim;

index IClaimDirectsSp.iByNrec auto;
index IClaimDirectsSp.iByParentNrec auto;

//#endregion

end.
