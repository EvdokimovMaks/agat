#ifndef __PlanOmto__
#define __PlanOmto__

#include IModify.vih
#include Query.vih
#include QueryText.vih
#include UserFilter.vih

#component "AGAT"

const
  //Статусы позиций заявок
  ClaimStateMadeoutTop       = 0001000000000043h;  //Папка - оформляемый
  ClaimStateMadeout          = 00010000000000F3h;  //Оформлена
  ClaimStateMadeoutReplacing = 00010000000000FCh;  //Заменяющая
  ClaimStateAcceptTop        = 0001000000000044h;  //Папка - исполняемый
  ClaimStateAccept           = 00010000000000F8h;  //Принята к исполнению
  ClaimStateAcceptReplacing  = 0001000000000119h;  //Заменяющая.Принята к исполнению
end;

table struct local tPlanOmto (
  ClaimNrec         : comp,
  IndentNrec        : comp,
  ClaimState        : word,
  ClaimStateNrec    : comp,
  KatpodrNrec       : comp,
  DeliverOrgNrec    : comp,
  KatstroyNrec      : comp,
  PersonNrec        : comp,
  DeviceNrec        : comp,
  GroupmcNrec       : comp,
  KatmcNrec         : comp,
  OtpedNrec         : comp,
  Tu                : string,
  Description       : string,
  DeliverClaimNumber: string[20],
  ClaimQty          : double,
  ClaimPrice        : double,
  SaldoQty          : double,
  RegradeQty        : double,
  BasedocQty        : double,
  BasedocSum        : double,
  PaidSum           : double,
  DeliveredQty      : double,
  IssuedQty         : double,
  IndentDate        : date,
  IndentDeliverDate : date,
  ClaimAcceptDate   : date,
  DeliverDatePlan   : date,
  DeliverDateChanged: date,
  DeliverDateFact   : date,
  BasedocDate       : date,
  PaidDate          : date
) with index (
  i01 = ClaimNrec
);

type ttplanOmto = record as table tPlanOmto;

vipinterface PlanOmtoFilters(UserFilterGroup);
public:
  constructor Init;
  property CustomerFilter   : IUserFilterByMarker;
  property GroupmcFilter    : IUserFilterByMarker;
  property KatmcFilter      : IUserFilterByMarker;
  property IndentFilter     : IUserFilterByMarker;
  property KatstroyFilter   : IUserFilterByMarker;
  property PersonFilter     : IUserFilterByMarker;
  property DeliverOrgFilter : IUserFilterByMarker;
  property BasedocFilter    : IUserFilterByMarker;
  property ClaimStatusFilter: IUserFilterByMarker;
  property PriorityFilter   : IUserFilterByMarker;
  property BasedocDateFilter: IUserFilterByPeriod;
  property DeliverClaimNumberFilter: IUserFilterByText;
end;

vipinterface PlanOmtoQueryText implements ISqlString;
public:
  constructor PlanOmtoQueryText(filters: PlanOmtoFilters);
end;

objinterface IPlanOmto;
  procedure LoadData;
  procedure SaveData;
  procedure SetAccept(value: boolean);
  procedure InsertWithBuffer(buf: ttplanOmto);
  procedure JumpToClaimNrec(aClaimNrec: comp): word;
  property ClaimNrec         : comp;
  property IndentNrec        : comp;
  property ClaimState        : word;
  property ClaimStateNrec    : comp;
  property KatpodrNrec       : comp;
  property DeliverOrgNrec    : comp;
  property KatstroyNrec      : comp;
  property PersonNrec        : comp;
  property DeviceNrec        : comp;
  property GroupmcNrec       : comp;
  property KatmcNrec         : comp;
  property OtpedNrec         : comp;
  property Tu                : string;
  property Description       : string;
  property ClaimQty          : double;
  property ClaimPrice        : double;
  property SaldoQty          : double;
  property RegradeQty        : double;
  property BasedocQty        : double;
  property BasedocSum        : double;
  property PaidSum           : double;
  property DeliveredQty      : double;
  property IssuedQty         : double;
  property IndentDate        : date;
  property IndentDeliverDate : date;
  property ClaimAcceptDate   : date;
  property DeliverDatePlan   : date;
  property DeliverDateChanged: date;
  property DeliverDateFact   : date;
  property BasedocDate       : date;
  property PaidDate          : date;
  property DeliverClaimNumber: string[20];
  property PlanOmtoBuffer    : ttplanOmto;

  index iByClaimNrec = ClaimNrec;
end;

objinterface IPlanOmtoDataProvider;
  function Load: IResultSet;
end;

objinterface IPlanOmtoDataSaver;
  procedure Save(aPlanOmto: IPlanOmto);
end;

objinterface IPlanOmtoActionWithParamsUI;
  procedure InitParams;
  function ShowParamsUi: word;
  function DoAction(aPlanOmto: IPlanOmto; params: objref = nullref): word;
end;

const
  PlanOmtoActionSuccess = 0;
  PlanOmtoActionCanceled = 1;
  PlanOmtoActionNotFound = 2;
end;

objinterface IPlanOmtoLinkedDocsManager;
  function CreateLinkedDoc(tidkgal: word; aPlanOmto: IPlanOmto): word;
  function LinkDoc(tidkgal: word; aPlanOmto: IPlanOmto): word;
end;

//---------------------------------- классы

vipinterface PlanOmtoDataProvider implements IPlanOmtoDataProvider;
public:
  constructor Create(aSqlString: ISqlString);
  property SqlString: ISqlString;
end;

vipinterface PlanOmtoDataSaverCurrent implements IPlanOmtoDataSaver;

vipinterface PlanOmtoBase implements IPlanOmto, IModify;

vipinterface PlanOmto(PlanOmtoBase);
public:
  constructor Init;
  constructor Create(aDataProvider: IPlanOmtoDataProvider; aDataSaver: IPlanOmtoDataSaver);
  procedure IPlanOmto.LoadData;
  procedure IPlanOmto.SaveData;
  property DataProvider: IPlanOmtoDataProvider;
  property DataSaver: IPlanOmtoDataSaver;
end;

vipinterface PlanOmtoView;
public:
  constructor Create(aPlanOmto: IPlanOmto);
  procedure Refresh;
  procedure SetAcceptMarked;
  procedure UnsetAcceptMarked;
  procedure SetDeliverOrgByBasedocMarked;
  procedure FillPlanOmtoWithMarkedPositions(p: IPlanOmto);
  property PlanOmto: IPlanOmto;
  event procedure OnHandleevent(cmd: word);
end;

vipinterface PlanOmtoFiltersView;
public:
  constructor Create(aFilters: PlanOmtoFilters);
  property Filters: PlanOmtoFilters;
  event procedure OnClickRefresh;
  event procedure OnHandleevent(cmd: word);
end;

type TLinkedDocsMenu = record
  MenuId: longint;
  ItemsCount: word;
end;

vipinterface PlanOmtoHelper;
public:
  constructor Init;
  function GetLinkedBasedocsString(indentNrec: comp; katmcNrec: comp): string;
  function GetLinkedBasedocsQuery(indentNrec: comp; katmcNrec: comp): IQuery;
  function GetLinkedBasedocsMenu(indentNrec: comp; katmcNrec: comp): TLinkedDocsMenu;
  function GetLinkedIncomeKatsoprsQuery(indentNrec: comp; katmcNrec: comp): IQuery;
  function GetLinkedIncomeKatsoprsMenu(indentNrec: comp; katmcNrec: comp): TLinkedDocsMenu;
  function GetLinkedRegradeKatsoprsQuery(indentNrec: comp; katmcNrec: comp): IQuery;
  function GetLinkedRegradeKatsoprsMenu(indentNrec: comp; katmcNrec: comp): TLinkedDocsMenu;
  function GetLinkedIssueKatsoprsQuery(indentNrec: comp; katmcNrec: comp): IQuery;
  function GetLinkedIssueKatsoprsMenu(indentNrec: comp; katmcNrec: comp): TLinkedDocsMenu;
end;

vipinterface DeliverClaimCreator;
public:
  constructor Init;
  function ShowConfig: word;
  procedure CreateDeliverClaim(aPlanOmto: IPlanOmto);
end;

vipinterface PlanOmtoActionCreateLinkedBasedoc implements IPlanOmtoActionWithParamsUI;

vipinterface PlanOmtoLinkedDocsManager implements IPlanOmtoLinkedDocsManager;
public:
  constructor Init;
  function RegisterCreateAction(tidkgal: word; aAction: IPlanOmtoActionWithParamsUI): PlanOmtoLinkedDocsManager;
  function RegisterLinkAction(tidkgal: word; aAction: IPlanOmtoActionWithParamsUI): PlanOmtoLinkedDocsManager;
end;

#end
