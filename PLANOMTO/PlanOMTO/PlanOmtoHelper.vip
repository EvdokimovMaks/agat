#include PlanOmto.vih
#include Query.vih

#component "AGAT"

interface PlanOmtoHelper;

sql query queryLinkedBasedocs =
select distinct bd.nrec as DocumentNrec, bd.nodoc as DocumentNumber, bd.ddoc as DocumentDate, bd.corg
from specmtr sm
join spstep  sp on sp.nrec = sm.cspec and sp.prmc = 1 and sp.cmcusl = :katmcNrec
join stepdoc sd on sd.nrec = sp.cstepdoc
join basedoc bd on bd.nrec = sd.cbasedoc
where sm.csaldtune = #comp(0001000000000001h) and sm.cotable = 1104 and sm.ckau[4] = :indentNrec
;

sql query queryLinkedSoprdocs =
select distinct ks.nrec as DocumentNrec, ks.nsopr as DocumentNumber, ks.dsopr as DocumentDate
from sporder spo
join specmtr sm on sm.csaldtune = #comp(0001000000000001h) and sm.cotable = 1112 and sm.cspec = spo.nrec and sm.ckau[4] = :indentNrec
join spsopr sps on sps.nrec = spo.cspsopr and sps.vidsopr = :vidsopr
join katsopr ks on ks.nrec = sps.csopr
where spo.sp = 0 and spo.vidorder = :vidorder and spo.cmc = :katmcNrec
;



var
  _queryLinkedBasedocs: IQuery;
  _queryLinkedSoprdocs: IQuery;

//#region Ф-ции получения связанных с заявкой документов

function GetLinkedDocPresentation(r: IResultRow): string;
{
  result := '№' + r.val('DocumentNumber') + ' от ' + datetostr(r.val('DocumentDate'),'DD.MM.YY')
}

function GetLinkedDocsQuery(indentNrec: comp; katmcNrec: comp; q: IQuery): IQuery;
{
  result := q.setParam('katmcNrec', KatmcNrec)
             .setParam('indentNrec', indentNrec);
}

function GetLinkedDocsString(q: IQuery): string;
{
  var s: string = '';

  if q.execute.errorCode = tsOk
    if q.fetch.errorCode = tsOk
    {
      s := GetLinkedDocPresentation(q.row);
      while q.fetch.errorCode = tsOk
        s += '; ' + GetLinkedDocPresentation(q.row);
    }

  result := s;
}

function GetLinkedDocsMenu(q: IQuery; title: string; ifcName: string): TLinkedDocsMenu;
{
  var rslt: TLinkedDocsMenu;
  rslt.MenuId := CreateMenu;
  rslt.ItemsCount := 0;

  var rs: IResultSet;
  rs := q.getResultSet;

  rslt.ItemsCount := rs.count;
  if rs.getFirst = tsOk do
  {
      AddMenuItemEx2(rslt.MenuId, if(rs.count = 1, title, '') + GetLinkedDocPresentation(rs.row),
                     '', hcNoContext, cmRunInterface, 0,
                     replace(ifcName, '{nrec}', rs.row.val('DocumentNrec')));

  } while rs.getNext = tsOk;
  result := rslt;
}

function GetLinkedBasedocsQuery(indentNrec: comp; katmcNrec: comp): IQuery;
{
  result := GetLinkedDocsQuery(indentNrec, katmcNrec, _queryLinkedBasedocs);
}

function GetLinkedBasedocsString(IndentNrec: comp; KatmcNrec: comp): string; cacheable;
{
  result := GetLinkedDocsString(GetLinkedBasedocsQuery(indentNrec, katmcNrec));
}

function GetLinkedBasedocsMenu(indentNrec: comp; katmcNrec: comp): TLinkedDocsMenu;
{
  result := GetLinkedDocsMenu(GetLinkedBasedocsQuery(indentNrec, katmcNrec),
                              'Открыть ДО ',
                              'L_BASEDOC::VSCHETB({nrec})');
}

function GetLinkedKatsoprsQuery(indentNrec: comp; katmcNrec: comp; vidsopr: word; vidorder: word): IQuery;
{
  result := GetLinkedDocsQuery(indentNrec, katmcNrec, _queryLinkedSoprdocs).SetParam('vidsopr', vidsopr)
                                                                           .SetParam('vidorder', vidorder);
}

function GetLinkedIncomeKatsoprsQuery(indentNrec: comp; katmcNrec: comp): IQuery;
{
  result := GetLinkedKatsoprsQuery(indentNrec, katmcNrec, 101, 0);
}

function GetLinkedIncomeKatsoprsMenu(indentNrec: comp; katmcNrec: comp): TLinkedDocsMenu;
{
  result := GetLinkedDocsMenu(GetLinkedIncomeKatsoprsQuery(indentNrec, katmcNrec),
                              'Открыть прих.накл. ',
                              'SOPRDOC::SoprDoc(101, {nrec})');
}

function GetLinkedRegradeKatsoprsQuery(indentNrec: comp; katmcNrec: comp): IQuery;
{
  result := GetLinkedKatsoprsQuery(indentNrec, katmcNrec, 630, 0);
}

function GetLinkedRegradeKatsoprsMenu(indentNrec: comp; katmcNrec: comp): TLinkedDocsMenu;
{
  result := GetLinkedDocsMenu(GetLinkedRegradeKatsoprsQuery(indentNrec, katmcNrec),
                              'Открыть пересорт. ',
                              'SOPRDOC::SoprDoc(630, {nrec})');
}

function GetLinkedIssueKatsoprsQuery(indentNrec: comp; katmcNrec: comp): IQuery;
{
  result := GetLinkedKatsoprsQuery(indentNrec, katmcNrec, 501, 0);
}

function GetLinkedIssueKatsoprsMenu(indentNrec: comp; katmcNrec: comp): TLinkedDocsMenu;
{
  result := GetLinkedDocsMenu(GetLinkedIssueKatsoprsQuery(indentNrec, katmcNrec),
                              'Открыть отп.в произв. ',
                              'SOPRDOC::SoprDoc(501, {nrec})');
}

//#endregion

//#region формирование ДО по IPlanOmto

var
  _po: IPlanOmto;

create view vIterate
as select *
from _po;

function CreateBasedocByPlanOmto(p: IPlanOmto);
{
  _po := p;

}

//#endregion

constructor Init;
{
  _queryLinkedBasedocs := queryManager.createQuery(queryLinkedBasedocs);
  _queryLinkedSoprdocs := queryManager.createQuery(queryLinkedSoprdocs);
  result := _queryLinkedBasedocs != nullref and _queryLinkedSoprdocs != nullref;
}

end.
