#include ClaimOverheadsTotal.vih
#include QueryText.vih
#include IModify.vih

#component "AGAT"

interface ClaimOverheadsTotalData;

create view
as select *
from tCOTData tData, tCOTData;

//#region Вспомогательные функции

function monthIndexIsValid(monthIndex: byte): boolean;
{
  result := monthIndex >= 1 and monthIndex <= 12;
}

//#endregion

//#region IClaimOverheadsTotalData

procedure IClaimOverheadsTotalData.Load(resultSet: IResultSet);
{
  if resultSet = nullref exit;

  delete all tCOTData;
  if resultSet.getFirst = tsOk do {
    var r: IResultRow;
    r := resultSet.row;
    clearbuffer(#tCOTData);
    tCOTData.CostitemNrec:= r.val('CostitemNrec');
    tCOTData.KatmcNrec   := r.val('KatmcNrec');
    tCOTData.KatpodrNrec := r.val('KatpodrNrec');
    tCOTData.SpmnplanNrec:= r.val('SpmnplanNrec');
    tCOTData.Price       := r.val('Price');
    tCOTData.QtyTotal    := r.val('QtyTotal');
    tCOTData.SumTotal    := r.val('SumTotal');
    var i: byte;
    for(i := 1; i <= 12; i++)
    {
      tCOTData.Qty[i] := r.val('Qty#'+i+'#');
      tCOTData.Sum[i] := r.val('Sum#'+i+'#');
      tCOTData.Ordered[i] := r.val('Ordered#'+i+'#');
    }
    insert current tCOTData;
  } while resultSet.getNext = tsOk;
}

procedure IClaimOverheadsTotalData.Recalc;
{
  tData.SumTotal := 0;
  tData.QtyTotal := 0;
  var i: byte;
  for(i := 1; i <= 12; i++)
  {
    tData.Sum[i] := tData.Price * tData.Qty[i];
    tData.QtyTotal += tData.Qty[i];
    tData.SumTotal += tData.Sum[i];
  }
}

function  IClaimOverheadsTotalData.MonthQty(monthIndex: byte): double;
{
  if monthIndexIsValid(monthIndex)
    result := tData.Qty[monthIndex];
  else
    result := 0;
}

function  IClaimOverheadsTotalData.MonthSum(monthIndex: byte): double;
{
  if monthIndexIsValid(monthIndex)
    result := tData.Sum[monthIndex];
  else
    result := 0;
}

function  IClaimOverheadsTotalData.MonthOrdered(monthIndex: byte): double;
{
  if monthIndexIsValid(monthIndex)
    result := tData.Ordered[monthIndex];
  else
    result := 0;
}

procedure IClaimOverheadsTotalData.SetMonthQty(monthIndex: byte; value: double);
{
  if monthIndexIsValid(monthIndex)
  {
    tData.Qty[monthIndex] := value;
  }
}

procedure IClaimOverheadsTotalData.SetMonthSum(monthIndex: byte; value: double);
{
  if monthIndexIsValid(monthIndex)
  {
    tData.Sum[monthIndex] := value;
  }
}

function  GetBuffer: tCOTDataBuffer;
{
  result := tCOTDataBuffer(tData.buffer);
}

procedure SetBuffer(value: tCOTDataBuffer);
{
  tData.buffer := value;
}

procedure InsertBuffer(value: tCOTDataBuffer);
{
  clearbuffer(#tdata);
  SetBuffer(value);
  doInsert;
}

property IClaimOverheadsTotalData.CostitemNrec: comp   absolute tData.CostitemNrec;
property IClaimOverheadsTotalData.KatmcNrec   : comp   absolute tData.KatmcNrec;
property IClaimOverheadsTotalData.KatpodrNrec : comp   absolute tData.KatpodrNrec;
property IClaimOverheadsTotalData.SpmnplanNrec: comp   absolute tData.SpmnplanNrec;
property IClaimOverheadsTotalData.Price       : double absolute tData.Price;
property IClaimOverheadsTotalData.QtyTotal    : double read     tData.QtyTotal;
property IClaimOverheadsTotalData.SumTotal    : double read     tData.SumTotal;

index i01 auto;
index i02 auto;
index i03 auto;

//#endregion

//#region IModify

  Function IModify.doInsert : Word;
  {
    result := insert current tData;
  }

  Function IModify.doUpdate : Word;
  {
    result := update current tData;
  }

  Function IModify.doDelete : Word;
  {
    result := delete current tData;
  }

  implementation IModify.doFlush abstract;

//#endregion

end.
