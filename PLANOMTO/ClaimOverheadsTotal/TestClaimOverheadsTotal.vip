#include ClaimOverheadsTotal.vih
#include Query.vih

#component "AGAT"

interface TestClaimOverheadsTotal;

table struct t (Nrec: longint, ParentNrec: longint, ItemNrec: comp, Level: byte, Price: double, Qty: double, Sum: double,
                Qty1 : double, Sum1 : double,
                Qty2 : double, Sum2 : double,
                Qty3 : double, Sum3 : double,
                Qty4 : double, Sum4 : double,
                Qty5 : double, Sum5 : double,
                Qty6 : double, Sum6 : double,
                Qty7 : double, Sum7 : double,
                Qty8 : double, Sum8 : double,
                Qty9 : double, Sum9 : double,
                Qty10: double, Sum10: double,
                Qty11: double, Sum11: double,
                Qty12: double, Sum12: double
               ) with index (
                i01 = ParentNrec
               );

var
  _parentNrec: comp;

create view
as select *
from t
where ((_parentNrec == t.ParentNrec));

tree tr1;
table t;
fields
  t.nrec;
  t.ParentNrec;
  t.ItemNrec;
  t.Level;
  t.Price; t.Qty; t.Sum;
  t.Qty1 ; t.Sum1 ;
  t.Qty2 ; t.Sum2 ;
  t.Qty3 ; t.Sum3 ;
  t.Qty4 ; t.Sum4 ;
  t.Qty5 ; t.Sum5 ;
  t.Qty6 ; t.Sum6 ;
  t.Qty7 ; t.Sum7 ;
  t.Qty8 ; t.Sum8 ;
  t.Qty9 ; t.Sum9 ;
  t.Qty10; t.Sum10;
  t.Qty11; t.Sum11;
  t.Qty12; t.Sum12;
end;

tableevent table t;
  cmTreeTop      : _parentNrec := 0;
  cmTreeUp       : _parentNrec := t.ParentNrec;
  cmTreeDown     : _parentNrec := t.Nrec;
  cmTreeNeedOwner: treejumptorecord(tr1, t.ParentNrec);
  cmTreeNodeType : if TreeIsTerminal(tr1) TreeSetNodeType(tr1, ntfText);
end;

var
  _dataReader: ClaimOverheadsTotalDataReader;
  _filters: ClaimOverheadsTotalFilters new;
  _queryText: ISqlString;

handleevent
cminit:
{
  _queryText := ISqlString(new(ClaimOverheadsTotalQueryText, ClaimOverheadsTotalQueryText(_filters)));
  var rs: IResultSet;
  rs := _dataReader.Load(_queryText);
  delete all t;
  sqlCopyInto(rs, #t, true);
  rereadrecord(#t);
}
end;
end.
