#include ClaimOverheadsTotal.vih
#include UserFilterViewmodel.vih
#include UserFilter.vih
#include UserFilterExt1.vih

#component "AGAT"

interface ClaimOverheadsTotalFiltersView;

var
  _filters   : ClaimOverheadsTotalFilters noauto;
  _podrVm    : UserFilterByMarkerViewmodelKAU noauto;

create view
  (
    podrVmPresentation
  )
as select
  _podrVm.Presentation
;

#declare ScreenFieldsMarkerFilterVM(FilterVMName, FieldName)
  #FilterVMName.Filter.IsSet: noprotect, noFrame;
  #FieldName: protect, pickbutton;
#end

screen scFilters;
fields
  _filters.YearFilter.MinValue: noprotect, spinButton[1, 1900, 2100];
  _filters.YearFilter.MaxValue: noprotect, spinButton[1, 1900, 2100];
  _podrVm.Filter.IsSet: noprotect, noFrame;
  podrVmPresentation: protect, pickbutton;
buttons
  cmFilter, default;
  cmCancel;
<<

`Год с`.@@@@@@@@ `по`.@@@@@@@@

 [:] Подразделение` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                        <. Продолжить .> <. Отмена .>
>>
end;

handleevent
cmFilter: OnProceed;

cmCancel: OnCancel;

cmPick:
{
  case curfield of
    #podrVmPresentation: if _podrVm.Pick RereadRecord;
  end;
}

cmDelOnProtect:
{
  case curfield of
    #podrVmPresentation: { _podrVm.SetDefault; Rereadrecord; }
  end;
}
end;

constructor Create(aFilters: ClaimOverheadsTotalFilters);
{
  Filters := aFilters;
  result := _filters != nullref;
}

procedure CreateViewmodels;
{
  _podrVm := new(UserFilterByMarkerViewmodelKAU,
                 ConstructorWithKAU(_filters.KatpodrFilter, 'Подразделение', 2));
}

procedure SetFiltersProperty(value: ClaimOverheadsTotalFilters);
{
  _filters := value;
  CreateViewmodels;
}

property Filters: ClaimOverheadsTotalFilters read _filters write SetFiltersProperty(result);

end.
