#include ClaimOverheadsTotal.vih
#include Userreport.vih

#component "AGAT"

interface ClaimOverheadsTotalHyerTreeView;

var
  _model: IClaimOverheadsTotalHyer(ClaimOverheadsTotalHyer) new;
  _marker: longint;

function GetMonthQty(monthIndex: byte): string; forward;
function GetSpmnplanAllmemoString: string; forward;

create view
var
  _parentNrec: comp;
as select case(_model.level; 1: fpstbud.name, 2: katmc.name, 3: katpodr.name; '') (fieldname=FldItemName),
          if(_model.level = 3, GetSpmnplanAllmemoString, '') (fieldname=Description),
          GetMonthQty(1 ) (fieldname=MonthQty1 ),
          GetMonthQty(2 ) (fieldname=MonthQty2 ),
          GetMonthQty(3 ) (fieldname=MonthQty3 ),
          GetMonthQty(4 ) (fieldname=MonthQty4 ),
          GetMonthQty(5 ) (fieldname=MonthQty5 ),
          GetMonthQty(6 ) (fieldname=MonthQty6 ),
          GetMonthQty(7 ) (fieldname=MonthQty7 ),
          GetMonthQty(8 ) (fieldname=MonthQty8 ),
          GetMonthQty(9 ) (fieldname=MonthQty9 ),
          GetMonthQty(10) (fieldname=MonthQty10),
          GetMonthQty(11) (fieldname=MonthQty11),
          GetMonthQty(12) (fieldname=MonthQty12)
from _model, fpstbud, katmc, spmnplan, allmemo, mnplan, katpodr
where ((
  _model.ItemNrec  == fpstbud.nrec and
  _model.ItemNrec  == katmc.nrec and
  _model.ItemNrec  == spmnplan.nrec and
  11038            == allmemo.wtable and
  spmnplan.nrec    == allmemo.crec and
  spmnplan.cmnplan == mnplan.nrec and
  mnplan.canval2   == katpodr.nrec
))
bounds byParent = _parentNrec == _model.ParentNrec
;

File _f;

//#region Вспомогательные функции

function FormatQty(aQty: double; aOrdered: double): string;
{
  if aQty = 0 and aOrdered = 0
    result := '';
  else
    result := trim(doubletostr(aQty, '\4p[|-]36666666666666666~9999'))
                + if (aOrdered > 0, ' / ' + trim(doubletostr(aOrdered, '\4p[|-]36666666666666666~9999')), '');
}

function GetSpmnplanAllmemoString: string;
{

  result := '';

  if getfirst fastfirstrow allmemo = tsOk
  {

    var s: string = '';

    if _f.OpenMemo(allmemo.mem)
    {
      _f.ReadLn(s);
      _f.Close;
    }

    result := s;

  }

}

function GetMonthQty(monthIndex: byte): string;
{
  result := FormatQty(_model.MonthQty(monthIndex), _model.MonthOrdered(monthIndex));
}

function IsMarked: boolean;
{
  result := foundmarker(_marker, _model.Nrec);
}

procedure UnsetTreeBounds;
{
  if BoundActive(tbByParent)
    SubBounds(tbByParent);
}

procedure SetTreeBounds;
{
  AddBounds(tbByParent);
}

procedure InitTreeMarker;
{
  _marker := initMarker('', sizeOf(longint), 10, 100, false);
}

//#endregion

//#region редактор иерархии и его обработчики
#define QtyFieldFormat [8, '\4p[|-]36666666666666666~9999']

#define SumFieldFormat [12, '\2p[|-]3666`666`666`666`666~88']

tree 1 tr1 ( ,,sci1478EscExInsTree);
excelColumns;
table _model;
fields
  {font={bold=_model.Level = 1; color=if(IsMarked, ColorMark, 0);}};
  [FldIsMarked] if(IsMarked,'V','') ''  : [1], skip, noautosize;
  FldItemName              'Статья/МЦ/Подразделение': [30], protect;
  Description              'Содержание'             : [30], protect;
  FormatQty(_model.QtyTotal, _model.OrderedTotal)
                           'Всего кол-во/заказано'  :  [8]  , protect, right;
  _model.Price             'Цена'                   : #SumFieldFormat  , protect;
  _model.SumTotal          'Всего сумма'            : #SumFieldFormat  , protect;
  MonthQty1        'Январь  '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty2        'Февраль '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty3        'Март    '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty4        'Апрель  '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty5        'Май     '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty6        'Июнь    '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty7        'Июль    '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty8        'Август  '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty9        'Сентябрь'#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty10       'Октябрь '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty11       'Ноябрь  '#13'Кол-во/заказано'    : [8]  , protect, right;
  MonthQty12       'Декабрь '#13'Кол-во/заказано'    : [8]  , protect, right;
end;

procedure SetModel(value: IClaimOverheadsTotalHyer);
{
  UnsetTreeBounds;
  _model := value;
  SetTreeBounds;
  //TreeGetFirstEx(tr1);
  Refresh;
}

procedure SetMarkToChildren(aMark: boolean; aParentNrec: longint);
{
  var oldParentNrec: longint;
  oldParentNrec := _parentNrec;
  pushPos(#_model);
  _parentNrec := aParentNrec;
  _loop _model
  {
    if aMark
    {
      if not foundmarker(_marker, _model.nrec)
        insertMarker(_marker, _model.nrec);
    }
    else
      deleteMarker(_marker, _model.nrec);
    SetMarkToChildren(aMark, _model.nrec);
  }
  _parentNrec := oldParentNrec;
  popPos(#_model);
}

tableevent table _model;
  cmTreeTop      : _parentNrec := 0;
  cmTreeUp       : _parentNrec := _model.ParentNrec;
  cmTreeDown     : _parentNrec := _model.Nrec;
  cmTreeNeedOwner: treejumptorecord(tr1, _model.ParentNrec);
  cmTreeNodeType : if _model.Level = 3 TreeSetNodeType(tr1, ntfText);
  cmDoMarkUnMark:
  {
    SetMarkToChildren(not IsMarked, _model.Nrec);
    InvertMarker(_marker, _model.nrec);
    if _model.Level < 3
      Refresh;
    RedrawCurrentAndGo(tr1, true);
  }

  cmSelAll:
  {
    TreePushPos(tr1);
    if TreeGetFirstEx(tr1) do
    {
      InsertMarker(_marker, _model.nrec);
    } while TreeGetNextEx(tr1);
    TreePopPos(tr1);
    Refresh;
  }

  cmUnSelAll:
  {
    ClearMarker(_marker);
    Refresh;
  }

end;

handleevent
  cmHotkeys: OnHandleevent(cmHotkeys);
end;

//#endregion

//#region ClaimOverheadsTotalHyerTreeView

constructor Create(aModel: IClaimOverheadsTotalHyer);
{
  InitTreeMarker;
  SetModel(aModel);
  result := true;
}

constructor Init;
{
  InitTreeMarker;
  result := true;
}

destructor Done;
{
  UnsetTreeBounds;
  _model := nullref;
  donemarker(_marker,'');
}

procedure Refresh;
{
  rereadrecord(#_model);
}

procedure JumpToFirstRecord;
{
  TreeGetFirstEx(tr1);
}

procedure JumpToRecord(nrec: longint);
{
  TreeJumpToRecord(tr1, nrec);
}

function GetMarkedMeasures: tCOTMeasuresArray;
{
  var rslt: tCOTMeasuresArray;
  var i: longint = 0;
  var measures: tCOTMeasures;
  TreePushPos(tr1);
  if TreeGetFirstEx(tr1) do
  {
    measures[_model.Level] := _model.ItemNrec;
    if _model.Level = 3 and foundmarker(_marker, _model.Nrec)
    {
      rslt[i++] := measures;
    }
  } while TreeGetNextEx(tr1);
  TreePopPos(tr1);
  result := rslt;
}

procedure OpenTreeNodes(aLevel: byte);
{
  TreePushPos(tr1);
  if TreeGetFirst(tr1) do
  {
    if _model.Level <= aLevel
      TreeOpenNode(tr1);
  } while TreeGetNext(tr1);
  TreePopPos(tr1);
}

property Model: IClaimOverheadsTotalHyer read _model write SetModel(result);

//#endregion

end.
