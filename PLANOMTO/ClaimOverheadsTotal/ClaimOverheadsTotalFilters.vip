#include ClaimOverheadsTotal.vih

#component "AGAT"

interface ClaimOverheadsTotalFilters;
var
  _katpodrFilter   : IUserFilterByMarker;
  _yearFilter      : IUserFilterBetweenWords;

function NewUserFilterByMarker(aDSKName: string): IUserFilterByMarker;
{
  var f: IUserFilterByMarker;
  f := IUserFilterByMarker(
    new(UserFilterByMarker, WithDSKName('ClaimOverheadsTotalFilters_'+aDSKName))
  );
  AddUserFilter(IUserFilter(f));
  result := f;
}

function NewUserFilterBetweenWords(aDSKName: string; aDefaultMinValue: word; aDefaultMaxValue: word): IUserFilterBetweenWords;
{
  var f: IUserFilterBetweenWords;
  f := IUserFilterBetweenWords (
    new(UserFilterBetweenWords, WithDSKName('ClaimOverheadsTotalFilters_'+aDSKName))
  );
  f.DefaultMinValue := aDefaultMinValue;
  f.DefaultMaxValue := aDefaultMaxValue;
  AddUserFilter(IUserFilter(f));
  result := f;
}

constructor Init;
{
  inherited::Init;

  _katpodrFilter    := NewUserFilterByMarker('katpodrFilter');
  _yearFilter       := NewUserFilterBetweenWords('yearFilter', year(cur_date), year(cur_date));

  result := _katpodrFilter     != nullref
        and _yearFilter        != nullref;
}

function IUserFilter.InitFilter: boolean;
{
  result := false;
  if inherited::InitFilter
  {
    _yearFilter.IsSet := true;
    result := true;
  }
}

property KatpodrFilter: IUserFilterByMarker absolute _katpodrFilter;
property YearFilter: IUserFilterBetweenWords absolute _yearFilter;

end.
