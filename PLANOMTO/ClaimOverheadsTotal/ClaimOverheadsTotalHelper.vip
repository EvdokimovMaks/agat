#include ClaimOverheadsTotal.vih

#component "AGAT"

interface ClaimOverheadsTotalHelper;

//#region ClaimOverheadsTotalHelper

var
  _indentManager: ClaimOverheadsTotalIndentManager;
  _srcDataForFilteringByMeasures: IClaimOverheadsTotalData(ClaimOverheadsTotalData) new;

create view vDataByMeasures
var
  _costitemNrec : comp;
  _katmcNrec    : comp;
  _spmnplanNrec : comp;
as select *
from _srcDataForFilteringByMeasures
where ((
  _costitemNrec  == _srcDataForFilteringByMeasures.CostitemNrec and
  _katmcNrec     == _srcDataForFilteringByMeasures.KatmcNrec and
  _spmnplanNrec  == _srcDataForFilteringByMeasures.SpmnplanNrec
))
;

function GetClaimOverheadsTotalDataByMeasures(srcData: IClaimOverheadsTotalData; measures: tCOTMeasuresArray): IClaimOverheadsTotalData;
{
  var i, cnt: longint;
  var buf: tCOTDataBuffer;

  var rslt: IClaimOverheadsTotalData;
  rslt := IClaimOverheadsTotalData(new(AGAT::ClaimOverheadsTotalData));

  _srcDataForFilteringByMeasures := srcData;

  cnt := count(measures);
  for (i := 0; i < cnt; i++)
  {
    vDataByMeasures._costitemNrec  := measures[i][1];
    vDataByMeasures._katmcNrec     := measures[i][2];
    vDataByMeasures._spmnplanNrec  := measures[i][3];

    vDataByMeasures._loop _srcDataForFilteringByMeasures
    {
      buf := _srcDataForFilteringByMeasures.GetBuffer;
      rslt.InsertBuffer(buf);
    }

  }

  result := rslt;
  _srcDataForFilteringByMeasures := nullref;
}

procedure CreateIndent(data: IClaimOverheadsTotalData);
{
  _indentManager.Data := data;
  if _indentManager.ShowCreateIndentUI = cmDefault
  {
    var indentNrec: comp;
    indentNrec := _indentManager.CreateIndent;
    if indentNrec != 0
      runinterfacenomodal(M_MNPLAN::BOOKINGS, 0, indentNrec, 0);
  }
}

//#endregion

end.
