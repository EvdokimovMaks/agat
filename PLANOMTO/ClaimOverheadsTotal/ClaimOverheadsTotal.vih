#ifndef __ClaimOverheadsTotal__
#define __ClaimOverheadsTotal__

#include QueryText.vih
#include UserFilter.vih
#include UserFilterExt1.vih
#include Query.vih

#component "AGAT"

table struct tCOTData (        //ClaimOverheadsTotalData
  CostitemNrec: comp,
  KatmcNrec   : comp,
  KatpodrNrec : comp,
  SpmnplanNrec: comp,
  Price       : double,
  QtyTotal    : double, SumTotal: double,
  Qty         : array[1..12] of double,
  Sum         : array[1..12] of double
) with index (
  i01 = CostitemNrec,
  i02 = CostitemNrec + KatmcNrec,
  i03 = CostitemNrec + KatmcNrec + KatpodrNrec
);

table struct tCOTHyer (        //ClaimOverheadsTotalHyer
  Nrec      : longint,
  ParentNrec: longint,
  ItemNrec  : comp,
  Level     : byte,
  Price     : double,
  QtyTotal  : double,
  SumTotal  : double,
  Qty       : array[1..12] of double,
  Sum       : array[1..12] of double
) with index (
  i01 = ParentNrec
);

objinterface IClaimOverheadsTotalHyer;
  procedure Load(resultSet: IResultSet);

  function MonthQty(monthIndex: byte): double;
  function MonthSum(monthIndex: byte): double;
  property Nrec      : longint;
  property ParentNrec: longint;
  property ItemNrec  : comp;
  property Level     : byte;
  property Price     : double;
  property QtyTotal  : double;
  property SumTotal  : double;
  index i01 = Nrec;
  index i02 = ParentNrec;
end;

vipinterface ClaimOverheadsTotalHyer implements IClaimOverheadsTotalHyer;

vipinterface ClaimOverheadsTotalHyerTreeView;
public:
  constructor Create(aModel: IClaimOverheadsTotalHyer);
  constructor Init;
  destructor Done;
  procedure Refresh;
  property Model: IClaimOverheadsTotalHyer;
end;

vipinterface ClaimOverheadsTotalFilters(UserFilterGroup);
public:
  constructor Init;
  function IUserFilter.InitFilter: boolean;
  property KatpodrFilter: IUserFilterByMarker;
  property YearFilter: IUserFilterBetweenWords;
end;

vipinterface ClaimOverheadsTotalFiltersView;
public:
  constructor Create(aFilters: ClaimOverheadsTotalFilters);
  property Filters: ClaimOverheadsTotalFilters;
  event procedure OnProceed;
  event procedure OnCancel;
end;

vipinterface ClaimOverheadsTotalQueryText implements ISqlString;
public:
  constructor ClaimOverheadsTotalQueryText(filters: ClaimOverheadsTotalFilters);
end;

type TClaimOverheadsTotalResultSet = record
  DataResultSet: IResultSet;
  HyerResultSet: IResultSet;
end;

objinterface IClaimOverheadsTotalDataReader;
  function Load(queryText: ISqlString): TClaimOverheadsTotalResultSet;
end;

vipinterface ClaimOverheadsTotalDataReader implements IClaimOverheadsTotalDataReader;

#end
