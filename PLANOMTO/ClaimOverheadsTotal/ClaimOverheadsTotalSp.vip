#include ClaimOverheadsTotal.vih
#include Query.vih

#component "AGAT"

interface ClaimOverheadsTotalSp;

sql Query qLoadSp =
select mnplan.canval2           as KatpodrNrec,
       spm.nrec                 as Nrec,
       spm.cspmnplan            as ParentNrec,
       spm.nrec                 as SpmnplanNrec,
       spm.condrec              as ConditionNrec,
       spm.number               as Number,
       spm.canval1              as CostitemNrec,
       spm.canval4              as CONrec,
       spm.typeizd              as ItemType,
       spm.cizd                 as ItemNrec,
       gr.name                  as GroupMC,
       case when spm.cotped = #comp(0)
            then coalesce(oe.nrec,#comp(0))
            else spm.cotped end as OtpedNrec,
       coalesce(vsp.kol, 0)     as Qty,
       coalesce(tOrdered.orderedQty, 0) as OrderedQty,
       coalesce(vsp.price, 0)   as Price,
       coalesce(vsp.vprice, 0)  as Sum
from mnplan
join spmnplan spm on spm.cmnplan = mnplan.nrec
left join katotped oe on oe.prmc = spm.typeizd and oe.cmcusl = spm.cizd and oe.akt = 1 and spm.cizd <> #comp(0)
left join spmnpl spl on spl.cspmnplan = spm.nrec and spl.wkolan = 25
left join valspmnp vsp on vsp.cspmnpl = spl.nrec and spl.nrec is not null
left join (select spoa.cpos      as spmnplNrec,
                  sum(claim.kol) as OrderedQty
           from objacct oa
           join spobjacc spoa on spoa.cobjacct = oa.nrec and spoa.typepos = 31 and spoa.typeobj = 13 and spoa.typehier = 1
           join claim on claim.nrec = spoa.cobject
           where oa.typeobj = 29 and oa.cobject = :MnplanNrec and oa.typeown = 3
           group by spoa.cpos
          ) tOrdered on tOrdered.spmnplNrec = spl.nrec
left join katmc mc on mc.nrec = spm.cizd
left join groupmc gr on gr.nrec = mc.CGROUPMC
where mnplan.nrec = :MnplanNrec
;

sql query qLoadSpMonth =
select mnplan.canval2 as KatpodrNrec,
       spm.nrec as SpmnplanNrec,
       month(datetime(per.dbeg,0)) as MonthIndex,
       vsp.kol as Qty,
       vsp.price as Price,
       vsp.vPrice as Sum
from mnplan
left join fpperiod mainper on mainper.nrec = mnplan.canval1
join spmnplan spm on spm.cmnplan = mnplan.nrec
join spmnpl spl on spl.cspmnplan = spm.nrec and spl.wkolan = 1
join fpperiod per on spl.canval4 = per.nrec and per.dbeg between coalesce(mainper.dbeg,0) and coalesce(mainper.dend,0)
join valspmnp vsp on vsp.cspmnpl = spl.nrec
where mnplan.nrec = :MnplanNrec
;

sql query qGetPeriodNrec =
select per.nrec
from fpperiod per1
join fpperiod per on per.cmain = per1.cmain
                 and year(datetime(per.dbeg,0))=year(datetime(per1.dbeg,0))
                 and month(datetime(per.dbeg,0)) = :MonthIndex
join fptper tper on tper.nrec = per.ctper and tper.edizm = 2
where per1.nrec = :ClaimPeriodNrec
;

var
  _claim: IClaimOverheadsTotal;
  _qGetPeriodNrec: IQuery;

file f;

create view
as select *
from tClaimOverheadsSp tSp, tClaimOverheadsSp tSpChildren, tClaimOverheadsSp
where ((
  tSp.nrec == tSpChildren.parentNrec
));

create view vSp
var
  _spNrec: comp;
as select *
from tClaimOverheadsSp tSp, tClaimOverheadsSp tSpChildren
where ((
  _spNrec  == tSp.spmnplanNrec and
  _spNrec  == tSpChildren.parentNrec
));

create view vDelete
as select *
from tClaimOverheadsSp tSp;

create view vCheck
var
  _parentSpNrec: comp;
  _number: string[20];
  _costitemNrec: comp;
as select *
from tClaimOverheadsSp tSp
where ((
  _parentSpNrec    == tSp.parentNrec and
  (vCheck.tSp.costitemNrec = _costitemNrec and
   vCheck.tSp.number       = _number and
   vCheck.tSp.ItemNrec     = 0)
));

create view vRemovedSpmnplan
var
  _mnplanNrec: comp;
as select *
from spmnplan, tClaimOverheadsSp tSp, spmnpl, valspmnp
where ((
  _mnplanNrec   == spmnplan.cmnplan and
  spmnplan.nrec == spmnpl.cspmnplan and
  spmnpl.nrec   == valspmnp.cspmnpl and
  spmnplan.nrec == tSp.SpmnplanNrec
));

create view v
as select *
from tClaimOverheadsSp tSp, allmemo
;

create view vAddPodr
var _curtSPNrec: comp;
as select *
from tClaimOverheadsSp tSp, tClaimOverheadsSp tSpChildren
where ((
  _curtSPNrec == tSp.nrec and
  tSp.nrec    == tSpChildren.parentNrec
));

//#region Вспомогательные функции

function  isValidMonthIndex(monthIndex: byte): boolean;
{
  result := monthIndex > 0 and monthIndex <= 12;
}

procedure RecalcCurrent;
{
  var i: byte;
  tSp.qty := 0;
  tSp.sum := 0;
  for(i := 1; i <= 12; i++)
  {
    tSp.monthSum[i] := tSp.monthQty[i] * tSp.price;
    tSp.qty += tSp.monthQty[i];
    tSp.sum += tSp.monthSum[i];
  }

  _claim.SetDirty;
}

procedure RecalcSpAgregate(aSpNrec: comp);
{
  vSp._spNrec := aSpNrec;

  if vSp.getfirst fastfirstrow tSp = tsOk
  {

    vSp.tSp.sum    := 0;
    vSp.tSp.price  := 0;
    vSp.tSp.qty    := 0;

    var i: byte;
    for(i := 1; i <= 12; i++)
    {
      vSp.tSp.monthSum[i] := 0;
      vSp.tSp.monthQty[i] := 0;
    }

    vSp._loop tSpChildren
    {
      for(i := 1; i <= 12; i++)
      {
        vSp.tSp.monthSum[i] += vSp.tSpChildren.monthSum[i];
        vSp.tSp.monthQty[i] += vSp.tSpChildren.monthQty[i];
      }
      vSp.tSp.qty         += vSp.tSpChildren.qty;
      vSp.tSp.sum         += vSp.tSpChildren.sum;
    }

    vSp.update current  tSp;

    if vSp.tSp.parentNrec != 0
      RecalcSpAgregate(vSp.tSp.parentNrec);
  }

  _claim.SetDirty;
}

procedure DeleteSpChildren(aSpNrec: comp);
{
  var l: longint;
  l := initmarker('', 8, 10, 20, false);

  insertmarker(l, aSpNrec);

  var i: longint;
  var c: comp;
  for(i := 0; getmarker(l, i, c); i++)
  {
    vSp._spNrec := c;
    vSp._loop tSpChildren
      insertmarker(l, vSp.tSpChildren.nrec);
  }

  AtDeleteMarker(l, 0);

  vDelete.delete all tSp where foundmarker(l, vDelete.tSp.nrec);

  donemarker(l, '');

  _claim.SetDirty;
}

function CheckSpCostitem(aParentSpNrec    : comp;
                         aCostitemNrec    : comp;
                         aNumber          : string;
                         aAllowAddChildren: boolean = true;
                         aItemType        : word = 1;
                         aCONrec          : comp = 0001000000000077h): comp;
{
  vCheck._parentSpNrec := aParentSpNrec;
  vCheck._costitemNrec := aCostitemNrec;
  vCheck._number       := aNumber;

  if vCheck.getfirst tSp != tsOk
  {
    vCheck.clearbuffer(#vCheck.tSp);
    vCheck.tSp.parentNrec   := aParentSpNrec;
    vCheck.tSp.costitemNrec := aCostitemNrec;
    vCheck.tSp.number       := aNumber;
    vCheck.tSp.Kind         := 0;
    vCheck.insert current tSp;
    _claim.SetDirty;
  }

  vCheck.tSp.isCostitem    := true;
  vCheck.tSp.allowAddChild := aAllowAddChildren;
  vCheck.tSp.itemType      := aItemType;
  vCheck.tSp.coNrec        := aCONrec;
  vCheck.tSp.otpedNrec     := 0;
  vCheck.update current tSp;

  result := vCheck.tSp.nrec;
}

procedure SetPrice(value: double);
{
  tSp.price := value;
  RecalcCurrent;
}

type TSpmnplan = record as table spmnplan;
type TSpmnpl = record as table spmnpl;

function GetPeriodNrec(claimPeriodNrec: comp; monthIndex: byte): comp; cacheable;
{
  result := 0;

  if _qGetPeriodNrec = nullref
    _qGetPeriodNrec := queryManager.createQuery(qGetPeriodNrec);

  var rs: IResultSet;
  rs := _qGetPeriodNrec.setParam('ClaimPeriodNrec', claimPeriodNrec)
                       .setParam('MonthIndex', monthIndex)
                       .getResultSet;
  if rs != nullref
    if rs.getFirst = tsOk
      result := rs.row.Val('nrec');
}

procedure DeleteRemovedSpmnplan;
{
  var l: longint;
  l := initmarker('',8,10,10,false);
  vRemovedSpmnplan._mnplanNrec := _claim.MnplanNrec;
  vRemovedSpmnplan._loop spmnplan
  {
    if vRemovedSpmnplan.getfirst tSp != tsOk
    {
      insertmarker(l, vRemovedSpmnplan.spmnplan.nrec);
      vRemovedSpmnplan._loop spmnpl
        vRemovedSpmnplan.delete all valspmnp;
      vRemovedSpmnplan.delete all spmnpl;
    }
  }
  vRemovedSpmnplan.delete all spmnplan where foundmarker(l, vRemovedSpmnplan.spmnplan.nrec);

  donemarker(l,'');
}
//#endregion

//#region IModify

Function IModify.doInsert : Word;
{
  RecalcCurrent;
  result := insert current tSp;
  RecalcSpAgregate(tSp.parentNrec);
  _claim.SetDirty;
}

Function IModify.doUpdate : Word;
{
  if tSp.IsCostitem
  {
    result := update current tSp;
    RecalcSpAgregate(tSp.Nrec);
  }
  else
  {
    RecalcCurrent;
    result := update current tSp;
    RecalcSpAgregate(tSp.parentNrec);
  }
  _claim.SetDirty;
}

Function IModify.doDelete : Word;
{
  var aParentSpNrec: comp;
  aParentSpNrec := tSp.parentNrec;

  DeleteSpChildren(tSp.nrec);

  result := delete current tSp;

  RecalcSpAgregate(aParentSpNrec);

  _claim.SetDirty;
}

implementation IModify.doFlush  abstract;

//#endregion

//#region IClaimOverheadsTotalSp

function  IClaimOverheadsTotalSp.Load(aMnplanNrec: comp): boolean;
{
  CheckCostitems;

  var rsSp: IResultSet;
  rsSp := queryManager.createQuery(qLoadSp).setParam('MnplanNrec',aMnplanNrec).getResultSet;
  if rsSp != nullref
    if rsSp.getfirst = tsOk do
    {
      var CurItemNrec: comp;
      CurItemNrec := rsSp.row.val('ITEMNREC');
      if CurItemNrec = comp(0) continue;

      if getfirst tSp where ((CurItemNrec == tSp.itemNrec)) != tsOk //нет такого МЦ
      {
        ClearBuffer(#tSp);
        tSp.conditionNrec  := rsSp.row.val('ConditionNrec');
        tSp.number         := rsSp.row.val('Number');
        tSp.costitemNrec   := rsSp.row.val('CostitemNrec');
        tSp.itemType       := rsSp.row.val('ItemType');
        tSp.itemNrec       := CurItemNrec;
        tSp.GroupMC        := rsSp.row.val('GroupMC');
        tSp.KatpodrNrec    := rsSp.row.val('KatpodrNrec');
        tSp.otpedNrec      := rsSp.row.val('OtpedNrec');
        tSp.coNrec         := rsSp.row.val('CONrec');
        tSp.Kind           := 1;
        tSp.isCostitem     := false;
        tSp.allowAddChild  := true;
        tSp.qty            := 0; //rsSp.row.val('Qty');
        tSp.price          := 0; //rsSp.row.val('Price');
        tSp.sum            := 0; //rsSp.row.val('Sum');
        if getfirst tClaimOverheadsSp where ((tSp.costitemNrec == tClaimOverheadsSp.CostitemNrec and
                                              0                == tClaimOverheadsSp.ItemNrec)) = tsOk
        {
          tSp.parentNrec := tClaimOverheadsSp.nrec;
        }
        insert current tSp;
      }

      //добавляем подразделение
      ClearBuffer(#tSpChildren);
      tSpChildren.ParentNrec    := tSp.Nrec;
      tSpChildren.spmnplanNrec  := rsSp.row.val('SpmnplanNrec');
      tSpChildren.AllowAddChild := false;
      tSpChildren.ItemType      := 3;
      tSpChildren.Kind          := 2;
      tSpChildren.KatpodrNrec   := rsSp.row.val('KatpodrNrec');
      tSpChildren.CostitemNrec  := rsSp.row.val('CostitemNrec');
      tSpChildren.isCostitem    := false;
      tSpChildren.allowAddChild := false;
      tSpChildren.otpedNrec     := rsSp.row.val('OtpedNrec');
      tSpChildren.qty           := rsSp.row.val('Qty');
      tSpChildren.price         := rsSp.row.val('Price');
      tSpChildren.sum           := rsSp.row.val('Sum');
      insert current tSpChildren;

    } while rsSp.getnext = tsOk;

  var rs: IResultSet;
  rs := queryManager.createQuery(qLoadSpMonth).setParam('MnplanNrec', aMnplanNrec).getResultSet;

  if rs != nullref
    if rs.getfirst = tsOk do
    {
      vSp._spNrec := rs.row.Val('SpmnplanNrec');
      if vSp.getfirst tSp = tsOk
      {
        var monthIndex: byte;
        monthIndex := rs.row.Val('MonthIndex');

        if isValidMonthIndex(monthIndex)
        {
          vSp.tSp.monthQty[monthIndex] := rs.row.Val('Qty');
          vSp.tSp.monthSum[monthIndex] := rs.row.Val('Sum');
          vSp.update current tSp;
        }
      }
    } while rs.getNext = tsOk;

  v._loop tSp
  {
    if v.getfirst allmemo where ((11038              == allmemo.wtable and
                                  v.tSp.SpmnplanNrec == allmemo.cRec)) = tsOk
    {
      var s: string = '';
      f.OpenMemo(v.allmemo.mem);
      while not f.eof
      {
        f.Readln(s);
        v.tSp.Description := v.tSp.Description + if(v.tSp.Description != '', ' ', '') + s;
      }
      f.Close;
      v.update current tSp;
    }
  }
  result := true;
}

procedure MakeSummaryByChildren; //цикл по детишкам данного отродья, блеа
{
  _loop tSpChildren
  {
    tSp.qty   += tSpChildren.qty;
    tSp.sum   += tSpChildren.sum;
    var i: byte;
    for (i := 1; i <= 12; i++)
    {
      tSp.monthSum[i] += tSpChildren.monthSum[i];
      tSp.monthQty[i] += tSpChildren.monthQty[i];
    }
  }
}

procedure IClaimOverheadsTotalSp.ReCalculatedAll;
{
  _loop tSp //пробегаем по мц
  {
    if tSp.Kind = 1 //по мц суммируем суммы и и количества
    {
      MakeSummaryByChildren;
      update current tSp;
    }
  }

  _loop tSp //пробегаем по конченным статьям (у которых дети - мц)
  {
    if tSp.allowAddChild and tSp.itemNrec = comp(0) //статьи конечного уровня
    {
      MakeSummaryByChildren;
      update current tSp;
    }
  }

  //тупо, глупо, не смешно
  if getfirst tSp where ((000100000000031Ch == tSp.costitemNrec)) = tsOk // мебель ищем
  {
    MakeSummaryByChildren;
    update current tSp;
  }

  if getfirst tSp where ((00010000000005E2h == tSp.costitemNrec)) = tsOk // некапитализируемые агрегируем
  {
    MakeSummaryByChildren;
    update current tSp;
  }

  if getfirst tSp where ((0001000000000471h == tSp.costitemNrec)) = tsOk // мто = некапитал.
  {
    tSp.qty           := tSpChildren.qty;
    tSp.sum           := tSpChildren.sum;
    var i: byte;
    for (i := 1; i <= 12; i++)
    {
      tSp.monthSum[i] := tSpChildren.monthSum[i];
      tSp.monthQty[i] := tSpChildren.monthQty[i];
    }
    update current tSp;
  }
}

procedure IClaimOverheadsTotalSp.CheckCostitems;
{
  var spNrec1, spNrec2, spNrec3: comp;
  spNrec1 := CheckSpCostitem(0      , 0001000000000471h, '00001', false); //Расходы на материально - техническое обеспечение
  spNrec2 := CheckSpCostitem(spNrec1, 00010000000005E2h, '00002', false); //Некапитализируемые затраты (стоимость единицы < 100 000 тыс. руб.)
  spNrec3 := CheckSpCostitem(spNrec2, 000100000000031Ch, '00003', false); //Мебель, бытовая техника и пр.
             CheckSpCostitem(spNrec3, 00010000000009CCh, '00004', true);  //Мебель
             CheckSpCostitem(spNrec3, 00010000000009CDh, '00005', true);  //Бытовая техника
             CheckSpCostitem(spNrec2, 000100000000047Ch, '00006', true);  //Канцелярские принадлежности
             CheckSpCostitem(spNrec2, 000100000000047Dh, '00007', true);  //Материалы для нужд производства
             CheckSpCostitem(spNrec2, 000100000000047Eh, '00008', true);  //Инструменты, оборудование, приборы и пр.
             CheckSpCostitem(spNrec2, 00010000000009A4h, '00009', true);  //Материалы для копировально-множественной техники типографии
             CheckSpCostitem(spNrec2, 000100000000047Fh, '00010', true);  //Прочие материально-производственные запасы
}

function IClaimOverheadsTotalSp.IsLeaf: boolean;
{
  result := getfirst fastfirstrow tSpChildren != tsOk;
}

function  IClaimOverheadsTotalSp.MonthQty(monthIndex: byte): double;
{
  result := if(isValidMonthIndex(monthIndex), tSp.monthQty[monthIndex], 0);
}

function  IClaimOverheadsTotalSp.MonthSum(monthIndex: byte): double;
{
  result := if(isValidMonthIndex(monthIndex), tSp.monthSum[monthIndex], 0);
}

procedure IClaimOverheadsTotalSp.SetMonthQty(monthIndex: byte; value: double);
{
  if isValidMonthIndex(monthIndex)
    if value != tSp.monthQty[monthIndex]
    {
      set tSp.monthQty[monthIndex] := value;
      RecalcCurrent;
    }
}

function  IClaimOverheadsTotalSp.GetBuffer(aSpNrec: comp): TtClaimOverheadsSp;
{
  var buf: TtClaimOverheadsSp;
  ClearAdvRecord(buf);
  vSp._spNrec := aSpNrec;
  if vSp.getfirst tSp = tsOk
    buf := TtClaimOverheadsSp(vSp.tSp.buffer);
  result := buf;
}

function IClaimOverheadsTotalSp.InsertNewWithBuffer(buf: TtClaimOverheadsSp): TtClaimOverheadsSp;
{
  v.clearbuffer(#v.tSp);
  v.tSp.buffer := buf;
  v.insert current tSp;
  result := TtClaimOverheadsSp(v.tSp.buffer);
  _claim.SetDirty;
}

property IClaimOverheadsTotalSp.Nrec             : comp                 absolute tSp.nrec;
property IClaimOverheadsTotalSp.ParentNrec       : comp                 absolute tSp.parentNrec;
property IClaimOverheadsTotalSp.SpmnplanNrec     : comp                 absolute tSp.spmnplanNrec;
property IClaimOverheadsTotalSp.ConditionNrec    : comp                 absolute tSp.conditionNrec;
property IClaimOverheadsTotalSp.Number           : string[20]           absolute tSp.number;
property IClaimOverheadsTotalSp.CostitemNrec     : comp                 absolute tSp.costitemNrec;
property IClaimOverheadsTotalSp.ItemType         : word                 absolute tSp.itemType;
property IClaimOverheadsTotalSp.ItemNrec         : comp                 absolute tSp.itemNrec;
property IClaimOverheadsTotalSp.GroupMC          : string               absolute tSp.GroupMC;
property IClaimOverheadsTotalSp.KatpodrNrec      : comp                 absolute tSp.KatpodrNrec;
property IClaimOverheadsTotalSp.OtpedNrec        : comp                 absolute tSp.otpedNrec;
property IClaimOverheadsTotalSp.CONrec           : comp                 absolute tSp.coNrec;
property IClaimOverheadsTotalSp.Description      : string               absolute tSp.Description;
property IClaimOverheadsTotalSp.Price            : double               read     tSp.price write SetPrice(result);
property IClaimOverheadsTotalSp.Qty              : double               absolute tSp.qty;
property IClaimOverheadsTotalSp.OrderedQty       : double               absolute tSp.OrderedQty;
property IClaimOverheadsTotalSp.Sum              : double               absolute tSp.sum;
property IClaimOverheadsTotalSp.Kind             : byte                 absolute tSp.Kind;
property IClaimOverheadsTotalSp.IsCostitem       : boolean              absolute tSp.isCostitem;
property IClaimOverheadsTotalSp.AllowAddChildren : boolean              absolute tSp.allowAddChild;
property IClaimOverheadsTotalSp.Claim            : IClaimOverheadsTotal absolute _claim;

index IClaimOverheadsTotalSp.iByNrec auto;
index IClaimOverheadsTotalSp.iByParentNrec auto;

//#endregion

end.
