#include ClaimOverheadsTotal.vih
#include QueryTextWithUserFilter.vih

#component "AGAT"

vipinterface ClaimOverheadsTotalQueryTextBase(QueryText);
public:
  procedure IQueryText.CreateSelect (var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateFrom   (var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateJoin   (var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateWhere  (var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateGroupBy(var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateOrderBy(var sqlString: longint; params: IParams = nullref);
end;

interface ClaimOverheadsTotalQueryTextBase;

//#region Queries

sql query qSelect  = insert tData (CostitemNrec, KatmcNrec, KatpodrNrec, SpmnplanNrec)
                     select spmnplan.canval1 as CostitemNrec,
                            katmc.nrec       as KatmcNrec,
                            katpodr.nrec     as KatpodrNrec,
                            spmnplan.nrec    as SpmnplanNrec;

sql query qFrom    = from mnplan;

sql query qJoin    = join fpperiod on fpperiod.nrec = mnplan.canval1
                     join katpodr  on katpodr.nrec = mnplan.canval2
                     join spmnplan on spmnplan.cmnplan = mnplan.nrec and spmnplan.typeizd = 1
                     join katmc    on katmc.nrec = spmnplan.cizd;

sql query qWhere   = where mnplan.cwayaccou = #comp(00010000000001E3h);

sql query qGroupBy = ;

sql query qOrderBy = ;

//#endregion

procedure IQueryText.CreateSelect (var sqlString: longint; params: IParams = nullref);
{
  sqlAddStr(sqlString, qSelect); params := params;
}
procedure IQueryText.CreateFrom   (var sqlString: longint; params: IParams = nullref);
{
  sqlAddStr(sqlString, qFrom); params := params;
}
procedure IQueryText.CreateJoin   (var sqlString: longint; params: IParams = nullref);
{
  sqlAddStr(sqlString, qJoin); params := params;
}
procedure IQueryText.CreateWhere  (var sqlString: longint; params: IParams = nullref);
{
  sqlAddStr(sqlString, qWhere); params := params;
}
procedure IQueryText.CreateGroupBy(var sqlString: longint; params: IParams = nullref);
{
  sqlAddStr(sqlString, qGroupBy); params := params;
}
procedure IQueryText.CreateOrderBy(var sqlString: longint; params: IParams = nullref);
{
  sqlAddStr(sqlString, qOrderBy); params := params;
}

end.

interface ClaimOverheadsTotalQueryText;

var
  _filters: ClaimOverheadsTotalFilters noauto;
  _queryText: IQueryText;

constructor ClaimOverheadsTotalQueryText(filters: ClaimOverheadsTotalFilters);
{
  result := true;
  _filters := filters;
  _queryText := IQueryText(new(ClaimOverheadsTotalQueryTextBase));
  _queryText := _queryText
                //По подразделению
                .Decorate(IQueryTextDecorator(
                  new(WhereFieldWithMarkerFilter,
                      WhereFieldWithMarkerFilter(_filters.KatpodrFilter, 'katpodr.nrec'))
                ));

}

procedure ISqlString.Create(var sqlString: longint; params: IParams = nullref);
{
  _queryText.Create(sqlString, params);
}

end.
