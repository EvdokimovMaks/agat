#include ClaimOverheadsTotal.vih
#include Query.vih

#component "AGAT"

interface ClaimOverheadsTotalDataReader;

//таблица группировок
table struct tGroups (
  level: byte,
  FieldName: string
) with index (
  i01 = level
);

create view
as select *
from tGroups
;

/*
Создает временную таблицу tData для хранения данных в неиерархическом виде
*/
procedure CreateTmpTableTData;
{
  var s: longint = 0;
  sqlAddStr(s, 'table tData (');
  sqlAddStr(s, '  CostitemNrec: comp,');
  sqlAddStr(s, '  KatmcNrec   : comp,');
  sqlAddStr(s, '  KatpodrNrec : comp,');
  sqlAddStr(s, '  SpmnplanNrec: comp,');
  sqlAddStr(s, '  Price       : double,');
  sqlAddStr(s, '  QtyTotal    : double, SumTotal: double,');
  sqlAddStr(s, '  Qty         : array[1..12] of double,');
  sqlAddStr(s, '  Sum         : array[1..12] of double,');
  sqlAddStr(s, '  Ordered     : array[1..12] of double');
  sqlAddStr(s, ') with index (');
  sqlAddStr(s, '  i01 = CostitemNrec,');
  sqlAddStr(s, '  i02 = CostitemNrec + KatmcNrec,');
  sqlAddStr(s, '  i03 = CostitemNrec + KatmcNrec + KatpodrNrec');
  sqlAddStr(s, ');');
  var rslt: integer;
  rslt := sqlCreateTmpTable(s, ctmNormal);
}

/*
Создает временную таблицу tHyer для хранения данных в иерархическом виде
*/
procedure CreateTmpTableTHyer;
{
  var s: longint = 0;
  sqlAddStr(s, 'table tHyer (');
  sqlAddStr(s, '  Nrec: longint,');
  sqlAddStr(s, '  ParentNrec: longint,');
  sqlAddStr(s, '  Level: byte,');
  sqlAddStr(s, '  ItemNrec: comp,');
  sqlAddStr(s, '  Price: double,');
  sqlAddStr(s, '  QtyTotal  : double, SumTotal  : double,');
  sqlAddStr(s, '  Qty: array[1..12] of double,');
  sqlAddStr(s, '  Sum: array[1..12] of double,');
  sqlAddStr(s, '  Ordered: array[1..12] of double');
  sqlAddStr(s, ') with index (');
  sqlAddStr(s, '  i01 = Nrec (autoinc),');
  sqlAddStr(s, '  i02 = ParentNrec');
  sqlAddStr(s, ');');
  sqlCreateTmpTable(s, ctmNormal);
}

/*
Добавляет группу в таблицу группировок
*/
procedure AddGroup(aLevel: byte; aFieldName: string);
{
  clearbuffer(#tGroups);
  tGroups.Level := aLevel;
  tGroups.FieldName := aFieldName;
  insert current tGroups;
}

/*
Возвращает наименование поля группировки на уровне aLevel
*/
function GetGroupFieldName(aLevel: byte): string; cacheable;
{
  if getfirst tGroups where ((aLevel == tGroups.Level)) = tsOk
    result := tGroups.FieldName
  else
    result := '';
}

/*
Создает в таблице tHyer запись
*/
function CreateTHyerRow(aParentNrec: longint; aItemNrec: comp; aLevel: byte): longint;
{
  result := 0;
  var s: longint = 0;
  sqlfreestr(s);
  sqlAddStr(s, 'insert tHyer (ParentNrec, ItemNrec, Level) values (');
  sqlAddStr(s, string(aParentNrec)+',');
  sqlAddStr(s, '#comp('+string(aItemNrec,0,0)+'),');
  sqlAddStr(s, string(aLevel) + ' )');
  if sqlExecDirect(s) = tsOk
    result := queryManager.createQuery('select max(Nrec) from tHyer').getResultValue;
}

type THyerNrecArray = array [0..0] of longint;
/*
Заполняет tHyer статьями (1 уровень данных)
*/
function CreateTHyerCostitems: THyerNrecArray;
{
  var rslt: THyerNrecArray;
  rslt[0] := CreateTHyerRow(0      , 0001000000000471h, 1);  //Расходы на материально - техническое обеспечение
  rslt[1] := CreateTHyerRow(rslt[0], 00010000000005E2h, 1);  //- Некапитализируемые затраты (стоимость единицы < 100 000 тыс. руб.)
  rslt[2] := CreateTHyerRow(rslt[1], 000100000000031Ch, 1);  //- Мебель, бытовая техника и пр.
  rslt[7] := CreateTHyerRow(rslt[2], 00010000000009CCh, 1);  //  - Мебель
  rslt[8] := CreateTHyerRow(rslt[2], 00010000000009CDh, 1);  //  - Бытовая техника
//  rslt[3] := CreateTHyerRow(rslt[1], 000100000000047Ch, 1);  //- Канцелярские принадлежности
  rslt[3] := CreateTHyerRow(rslt[1], 000100000000047Dh, 1);  //- Материалы для нужд производства
  rslt[4] := CreateTHyerRow(rslt[1], 000100000000047Eh, 1);  //- Инструменты, оборудование, приборы и пр.
  rslt[5] := CreateTHyerRow(rslt[1], 00010000000009A4h, 1);  //- Материалы для копировально-множественной техники типографии
  rslt[6] := CreateTHyerRow(rslt[1], 000100000000047Fh, 1);  //- Прочие материально-производственные запасы
  result := rslt;
}

function SqlStrGetTHyerChildrenSums: longint;
{
  var s: longint = 0;
  sqlAddStr(s, 'select sum(QtyTotal) as QtyTotal, sum(SumTotal) as SumTotal');

  var i: byte = 0;
  for(i := 1; i <= 12; i++)
    sqlAddStr(s, replace(', sum(Qty[&]) as Qty&, sum(Sum[&]) as Sum&, sum(Ordered[&]) as Ordered&','&',i));
  sqlAddStr(s, 'from tHyer where parentnrec = :nrec');
  result := s;
}

function SqlStrUpdateTHyerSums: longint;
{
  var s: longint = 0;
  sqlAddStr(s, 'update tHyer set QtyTotal = :QtyTotal, SumTotal = :SumTotal')

  var i: byte = 0;
  for(i := 1; i <= 12; i++)
    sqlAddStr(s, replace(', Qty[&] = :Qty&, Sum[&] = :Sum&, Ordered[&] = :Ordered&','&',i));
  sqlAddStr(s, 'where nrec = :nrec');
  result := s;
}

procedure SumTHyerRow(nrec: longint);
{

  var rs: IResultSet;
  rs := queryManager.createQuery(SqlStrGetTHyerChildrenSums).setParam('nrec', nrec).getResultSet;

  if rs.getFirst = tsOk
  {
    var r: IResultRow;
    r := rs.row;

    var s: longint = 0;
    sqlFreeStr(s);
    sqlAddStr(s, 'update tHyer set QtyTotal = ' + double(r.val('QtyTotal')) + ', SumTotal = ' + double(r.val('SumTotal')));

    var i: byte = 0;
    for(i := 1; i <= 12; i++)
    {
      var sumQty, sumSum, sumOrdered: double;
      sumQty := r.val('Qty'+i);
      sumSum := r.val('Sum'+i);
      sumOrdered := r.val('Ordered'+i);
      sqlAddStr(s, ', Qty[' + i + '] = ' + sumQty);
      sqlAddStr(s, ', Sum[' + i + '] = ' + sumSum);
      sqlAddStr(s, ', Ordered[' + i + '] = ' + sumOrdered);
    }
    sqlAddStr(s, 'where nrec = ' + nrec);

    var q: IQuery;
    q := queryManager.createQuery(s);

    /*
    var q: IQuery;
    q := queryManager.createQuery(SqlStrUpdateTHyerSums)
                     .setParam('nrec', nrec)
                     .setParam('QtyTotal', double(r.val('QtyTotal')))
                     .setParam('SumTotal', double(r.val('SumTotal')));

    var i: byte;
    for(i := 1; i <= 12; i++)
    {
      var sumQty, sumSum, sumOrdered: double;
      sumQty := r.val('Qty'+i);
      sumSum := r.val('Sum'+i);
      sumOrdered := r.val('Ordered'+i);
      q.setParam('Qty'+i, sumQty);
      q.setParam('Sum'+i, sumSum);
      q.setParam('Ordered'+i, sumOrdered);
    }
    */

    q.execute;
  }
}

procedure SumTHyerRows(rows: THyerNrecArray);
{
  var i: longint = 0;
  for(i := count(rows) - 1; i >= 0; i--)
    SumTHyerRow(rows[i]);
}

function MySqlAddStr(var s: longint; st: string): longint;
{
  //LogStrToFile('c:\Temp\Viper\queries.lot', st)
  sqlAddStr(s, st);
  result := s;
}

/*
Заполняет tHyer данными на уровне aLevel (сами данные берутся из tData)
*/
function CreateTHyerDataLevel(aLevel: byte): integer;
{
  var i: byte;
  var s: longint = 0;
  sqlFreeStr(s);
  mySqlAddStr(s, 'insert tHyer (ParentNrec, ItemNrec, Level, Price, QtyTotal, SumTotal');
  for(i := 1; i <= 12; i++)
    mySqlAddStr(s, replace(', Qty[&], Sum[&], Ordered[&]', '&', i));

  mySqlAddStr(s, ') select');
  mySqlAddStr(s, if(aLevel > 1, 't.Nrec', '0') + ' as ParentNrec,');
  mySqlAddStr(s, 'tData.' + GetGroupFieldName(aLevel) + ' as ItemNrec,');
  mySqlAddStr(s, string(aLevel) + ' as Level,');
  mySqlAddStr(s, 'max(tData.Price) as Price, sum(tData.QtyTotal) as QtyTotal, sum(tData.SumTotal) as SumTotal');
  for(i := 1; i <= 12; i++)
    mySqlAddStr(s, replace(', sum(tData.Qty[&]) as Qty&, sum(tData.Sum[&]) as Sum&, sum(tData.Ordered[&]) as Ordered&', '&', i));

  if aLevel > 1 then
  {
    var prevLevel: byte;
    prevLevel := aLevel - 1;

    var prevLevelTableAlias: string;
    prevLevelTableAlias := 'tHyer' + prevLevel;

    mySqlAddStr(s, 'from (select ' + prevLevelTableAlias + '.nrec as Nrec');

    for (i := 1; i < aLevel; i++)
      mySqlAddStr(s, '             , tHyer' + i + '.ItemNrec as ' + GetGroupFieldName(i));

    mySqlAddStr(s, '      from tHyer ' + prevLevelTableAlias);

    for (i := prevLevel-1; i >= 1; i--)
      mySqlAddStr(s, '      join tHyer tHyer' + i + ' on tHyer' + i + '.nrec = tHyer' + string(i+1) + '.ParentNrec');

    mySqlAddStr(s, '      where ' + prevLevelTableAlias + '.Level = ' + prevLevel);

    mySqlAddStr(s, ') t');

    mySqlAddStr(s, 'join tData on');
    for (i := 1; i < aLevel; i++)
      mySqlAddStr(s, if(i > 1, ' and ', '') + 't.' + GetGroupFieldName(i) + ' = tData.' + GetGroupFieldName(i));

    mySqlAddStr(s, 'group by t.Nrec, tData.' + GetGroupFieldName(aLevel));
  }
  else
  {
    mySqlAddStr(s, 'from tData');
    mySqlAddStr(s, 'group by tData.' + GetGroupFieldName(aLevel));
  }

  result := sqlExecDirect(s);
}

/*
Возвращает результат запроса выборки ClaimOverheadsTotal в иерархическом виде
Наименования полей выборки совпадают с названиями свойств объекта
*/
function Load(queryText: ISqlString): TClaimOverheadsTotalResultSet;
{
  var rslt: TClaimOverheadsTotalResultSet;

  //Временная таблица tData для хранения данных в неиерархическом виде
  CreateTmpTableTData;

  //Временная таблица tHyer для хранения данных в иерархическом виде
  CreateTmpTableTHyer;

  //заполняем таблицу группировок
  delete all tGroups;
  AddGroup(1, 'CostitemNrec');
  AddGroup(2, 'KatmcNrec');
  //AddGroup(3, 'KatpodrNrec');
  AddGroup(3, 'SpmnplanNrec');

  //заполняем tHyer статьями (1 уровень данных), т.к. он статичен
  var costitemRows: THyerNrecArray;
  costitemRows := CreateTHyerCostitems;

  //готовим текст запроса для заполнения tData
  var s: longint = 0;
  queryText.Create(s);

  //Если заполнение tData прошло успешно
  if queryManager.createQuery(s).execute.errorCode = tsOk
  {
    rslt.DataResultSet := queryManager.createQuery('select * from tData').getResultSet;
    //заполняем tHyer данными на уровне 2
    if CreateTHyerDataLevel(2) = tsOk
      //заполняем tHyer данными на уровне 3
      if CreateTHyerDataLevel(3) = tsOk
      {
        //суммируем итоги по статьям
        SumTHyerRows(costitemRows);
        //получаем результирующий запрос
        rslt.HyerResultSet := queryManager.createQuery('select * from tHyer').getResultSet;
      }
  }
  sqlDropTmpTable('tHyer');
  sqlDropTmpTable('tData');

  result := rslt;
}

end.
