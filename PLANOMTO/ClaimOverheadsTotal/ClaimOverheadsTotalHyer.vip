#include ClaimOverheadsTotal.vih
#include QueryText.vih
#include UserFilter.vih

#component "AGAT"

interface ClaimOverheadsTotalHyer;

create view
as select *
from tCOTHyer tHyer, tCOTHyer;

//#region Вспомогательные функции

function monthIndexIsValid(monthIndex: byte): boolean;
{
  result := monthIndex >= 1 and monthIndex <= 12;
}

//#endregion

//#region IClaimOverheadsTotalHyer

procedure IClaimOverheadsTotalHyer.Load(resultSet: IResultSet);
{
  if resultSet = nullref exit;

  delete all tCOTHyer;
  if resultSet.getFirst = tsOk do {
    var r: IResultRow;
    r := resultSet.row;
    clearbuffer(#tCOTHyer);
    tCOTHyer.Nrec       := r.val('Nrec');
    tCOTHyer.ParentNrec := r.val('ParentNrec');
    tCOTHyer.ItemNrec   := r.val('ItemNrec');
    tCOTHyer.Level      := r.val('Level');
    tCOTHyer.Price      := r.val('Price');
    tCOTHyer.QtyTotal   := r.val('QtyTotal');
    tCOTHyer.SumTotal   := r.val('SumTotal');
    tCOTHyer.OrderedTotal := 0;
    var i: byte;
    for(i := 1; i <= 12; i++)
    {
      tCOTHyer.Qty[i] := r.val('Qty#'+i+'#');
      tCOTHyer.Sum[i] := r.val('Sum#'+i+'#');
      tCOTHyer.Ordered[i] := r.val('Ordered#'+i+'#');
      tCOTHyer.OrderedTotal += tCOTHyer.Ordered[i];
    }
    insert current tCOTHyer;
  } while resultSet.getNext = tsOk;
}

function  IClaimOverheadsTotalHyer.MonthQty(monthIndex: byte): double;
{
  if monthIndexIsValid(monthIndex)
    result := tHyer.Qty[monthIndex];
  else
    result := 0;
}

function  IClaimOverheadsTotalHyer.MonthSum(monthIndex: byte): double;
{
  if monthIndexIsValid(monthIndex)
    result := tHyer.Sum[monthIndex];
  else
    result := 0;
}

function IClaimOverheadsTotalHyer.MonthOrdered(monthIndex: byte): double;
{
  if monthIndexIsValid(monthIndex)
    result := tHyer.Ordered[monthIndex];
  else
    result := 0;
}

property IClaimOverheadsTotalHyer.Nrec      : longint  absolute tHyer.Nrec      ;
property IClaimOverheadsTotalHyer.ParentNrec: longint  absolute tHyer.ParentNrec;
property IClaimOverheadsTotalHyer.ItemNrec  : comp     absolute tHyer.ItemNrec  ;
property IClaimOverheadsTotalHyer.Level     : byte     absolute tHyer.Level     ;
property IClaimOverheadsTotalHyer.Price     : double   absolute tHyer.Price     ;
property IClaimOverheadsTotalHyer.QtyTotal  : double   absolute tHyer.QtyTotal  ;
property IClaimOverheadsTotalHyer.SumTotal  : double   absolute tHyer.SumTotal  ;
property IClaimOverheadsTotalHyer.OrderedTotal: double absolute tHyer.OrderedTotal;

index i01 auto;
index i02 auto;

//#endregion
end.
