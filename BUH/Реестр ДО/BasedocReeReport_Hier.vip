#include ContractId.vih
#include BasedocReeReport.vih
#include extattr.vih
#include Query.vih

#component "AGAT"

interface BasedocReeReport_Hier;

table struct trs (
  spkRSNrec: comp,
  name: string
) with index (
  i01 = spkRSNrec
);

table struct tbd (
  nrec       : comp,
  viddoc     : string,
  ddoc       : date,
  nodoc      : string,
  bdds       : string,
  dform      : date,
  spkRSNrec  : comp,
  summa      : double,
  total      : double,
  sumopl     : double,
  dopl       : date,
  val        : string,
  avans      : string,
  status     : string,
  ispoln     : string,
  dds        : string,
  buhsch     : string,
  dsogl      : date,
  sogl       : string,
  org        : string,
  bank       : string,
  bankrs     : string,
  cfo        : string,
  zakaz      : string,
  viddoc     : word,
  dognum     : string,
  dogdate    : date,
  procav     : string,
  nazn       : string,
  vizaPEUNrec: comp,
  vizaKAZNrec: comp,
  vizaKOMNrec: comp,
  vizaBUHNrec: comp,
  vizaPEUName: string,
  vizaKAZName: string,
  vizaKOMName: string,
  vizaBUHName: string,
  vizaPEUDate: date,
  vizaKAZDate: date,
  vizaKOMDate: date,
  vizaBUHDate: date,
  vizaPEUUser: string,
  vizaKAZUser: string,
  vizaKOMUser: string,
  vizaBUHUser: string,
  vizaPEUPrim: string,
  vizaKAZPrim: string,
  vizaKOMPrim: string,
  vizaBUHPrim: string
) with index (
  i01 = nrec: comp,
  i02 = spkRSNrec + ddoc + nodoc
);

//#region Queries

sql query querymain =
select bd.nrec,
       case when bd.viddoc=111
            then 'ДО на предоплату закупок'
            else 'ДО на закупку'
       end as viddoc,
       bd.ddoc as ddoc,
       bd.nodoc as nodoc,
       coalesce(spkBdds.Name,'') as bdds,
       bd.dform as dform,
       tbd.spkRSNrec as spkRSNrec,
       tbd.summa as summa,
       tbd.total as total,
       case when avVizaPEU.cattrnam = #comp(0001000000000088h) then coalesce(bfall.summa,0) else coalesce(bfrs.summa,0) end as sumopl,
       case when avVizaPEU.cattrnam = #comp(0001000000000088h) then coalesce(bfall.dopl,0) else coalesce(bfrs.dopl,0) end as dopl,
       coalesce(klval.simvolv,'') as val,
       coalesce(spkAvans.code,'') as avans,
       coalesce(katnotes.name,'') as status,
       coalesce(podrIspoln.kod,'') as ispoln,
       coalesce(spkDds.code,'') as dds,
       coalesce(substring(buhschet.schet,2,10),'') as buhsch,
       coalesce(avSogl.atl_lastdate,0) as dsogl,
       coalesce(avSogl.vstring,'') as sogl,
       coalesce(org.name, '') as org,
       coalesce(bank.name, '') as bank,
       coalesce(bank.schet1, '') as bankrs,
       coalesce(getdocfo(bd.nrec),'-') as cfo,
       coalesce(getdozakaz(bd.nrec),'-') as zakaz,
       bd.viddoc as viddoc,
       coalesce(dog.nodoc,'') as dognum,
       coalesce(dog.ddoc,0) as dogdate,
       bd.procopl as procav,
       bd.name as nazn,
       coalesce(spkPEU.nrec, #comp(0)) as vizaPEUNrec,
       coalesce(spkKAZ.nrec, #comp(0)) as vizaKAZNrec,
       coalesce(spkKOM.nrec, #comp(0)) as vizaKOMNrec,
       coalesce(spkBUH.nrec, #comp(0)) as vizaBUHNrec,
       coalesce(spkPEU.name, '') as vizaPEUName,
       coalesce(spkKAZ.name, '') as vizaKAZName,
       coalesce(spkKOM.name, '') as vizaKOMName,
       coalesce(spkBUH.name, '') as vizaBUHName,
       coalesce(avVizaPEU.atl_lastdate, 0) as vizaPEUDate,
       coalesce(avVizaKAZ.atl_lastdate, 0) as vizaKAZDate,
       coalesce(avVizaKOM.atl_lastdate, 0) as vizaKOMDate,
       coalesce(avVizaBUH.atl_lastdate, 0) as vizaBUHDate,
       coalesce(uPEU.xu$loginname, '') as vizaPEUUser,
       coalesce(uKAZ.xu$loginname, '') as vizaKAZUser,
       coalesce(uKOM.xu$loginname, '') as vizaKOMUser,
       coalesce(uBUH.xu$loginname, '') as vizaBUHUser,
       coalesce(avPrimPEU.vString, '') as vizaPEUPrim,
       coalesce(avPrimKAZ.vString, '') as vizaKAZPrim,
       coalesce(avPrimKOM.vString, '') as vizaKOMPrim,
       coalesce(avPrimBUH.vString, '') as vizaBUHPrim
from (select bd.nrec,
             case when coalesce(avVizaPEU.vcomp,#comp(0)) = #comp(00010000000013CCh) then #comp(0) else coalesce(spkRS.nrec,#comp(0)) end as spkRSNrec,
             sum(sps.summa + case when bd.vhodnal=2 then sps.nds else 0 end) as summa,
             sum(case when bd.summa <> 0 then sps.summa / bd.summa * bd.total else 0 end) as total
      from bdreeagat
      join basedoc bd on bd.nrec = bdreeagat.crec
      join stepdoc sd on sd.cbasedoc = bd.nrec
      join spstep sps on sps.cstepdoc = sd.nrec
      left join attrval avRS on avRS.wtable = 1104 and avRS.cRec = sps.nrec and avRS.cattrnam = #comp(0001000000000A86h)
      left join spkau spkRS on spkRS.nrec = coalesce(avRS.vcomp,#comp(0))
      left join attrval avVizaPEU on avVizaPEU.wtable = 1102 and avVizaPEU.cRec = bd.nrec and avVizaPEU.cattrnam = #comp(0001000000000088h)
      group by bd.nrec,
               case when coalesce(avVizaPEU.vcomp,#comp(0)) = #comp(00010000000013CCh) then #comp(0) else coalesce(spkRS.nrec,#comp(0)) end
     ) tbd

join basedoc bd on bd.nrec = tbd.nrec

left join attrval avSogl on avSogl.wtable = 1102 and avSogl.cRec = bd.nrec and avSogl.cattrnam = #comp(000100000000008Bh)
left join attrval avVizaPEU on avVizaPEU.wtable = 1102 and avVizaPEU.cRec = bd.nrec and avVizaPEU.cattrnam = #comp(0001000000000088h)
left join attrval avVizaKAZ on avVizaKAZ.wtable = 1102 and avVizaKAZ.cRec = bd.nrec and avVizaKAZ.cattrnam = #comp(0001000000000087h)
left join attrval avVizaKOM on avVizaKOM.wtable = 1102 and avVizaKOM.cRec = bd.nrec and avVizaKOM.cattrnam = #comp(000100000000008Ah)
left join attrval avVizaBUH on avVizaBUH.wtable = 1102 and avVizaBUH.cRec = bd.nrec and avVizaBUH.cattrnam = #comp(0001000000000089h)
left join spkau   spkPEU    on spkPEU.nrec = coalesce(avVizaPEU.vcomp,#comp(0))
left join spkau   spkKAZ    on spkKAZ.nrec = coalesce(avVizaKAZ.vcomp,#comp(0))
left join spkau   spkKOM    on spkKOM.nrec = coalesce(avVizaKOM.vcomp,#comp(0))
left join spkau   spkBUH    on spkBUH.nrec = coalesce(avVizaBUH.vcomp,#comp(0))
left join x$users uPEU      on uPEU.atl_nrec = coalesce(avVizaPEU.atl_lastuser,#comp(0))
left join x$users uKAZ      on uKAZ.atl_nrec = coalesce(avVizaKAZ.atl_lastuser,#comp(0))
left join x$users uKOM      on uKOM.atl_nrec = coalesce(avVizaKOM.atl_lastuser,#comp(0))
left join x$users uBUH      on uBUH.atl_nrec = coalesce(avVizaBUH.atl_lastuser,#comp(0))
left join attrval avPrimPEU on avPrimPEU.wtable = 1102 and avPrimPEU.cRec = bd.nrec and avPrimPEU.cattrnam = #comp(0001000000000099h)
left join attrval avPrimKAZ on avPrimKAZ.wtable = 1102 and avPrimKAZ.cRec = bd.nrec and avPrimKAZ.cattrnam = #comp(0001000000000098h)
left join attrval avPrimKOM on avPrimKOM.wtable = 1102 and avPrimKOM.cRec = bd.nrec and avPrimKOM.cattrnam = #comp(000100000000009Ah)
left join attrval avPrimBUH on avPrimBUH.wtable = 1102 and avPrimBUH.cRec = bd.nrec and avPrimBUH.cattrnam = #comp(0001000000000097h)

left join attrval avAvans on avAvans.wtable=1102 and avAvans.crec=bd.nrec and avAvans.cattrnam=#comp(000100000000008Dh)
left join spkau spkAvans on spkAvans.nrec = coalesce(avAvans.vComp, #comp(0))

left join attrval avBdds on avBdds.wtable=1102 and avBdds.crec=bd.nrec and avBdds.cattrnam=#comp(000100000000008Eh)
left join spkau spkBdds on spkBdds.nrec = coalesce(avBdds.vComp, #comp(0))

left join klval on klval.nrec = bd.cval

left join katnotes on katnotes.nrec = bd.cnote

left join attrval avIspoln on avIspoln.wtable=1102 and avIspoln.crec=bd.nrec and avIspoln.cattrnam=#comp(000100000000005Bh)
left join katpodr podrIspoln on podrIspoln.nrec=coalesce(avIspoln.vComp,#comp(0))

left join attrval avDds on avDds.wtable=1102 and avDds.crec=bd.nrec and avDds.cattrnam=#comp(000100000000008Fh)
left join spkau spkDds on spkDds.nrec = coalesce(avDds.vComp, #comp(0))

left join attrval avSch on avSch.wtable=1102 and avSch.crec=bd.nrec and avSch.cattrnam=#comp(0001000000000094h)
left join buhschet on buhschet.nrec = coalesce(avSch.vComp, #comp(0))

left join katorg org on org.nrec = bd.corg

left join katbank bank on bank.nrec = bd.cbank

left join dogovor dog on dog.nrec = bd.cdogovor

left join (select cbasedoc, coalesce(spkau.nrec, #comp(0)) as spkRSNrec, max(basefin.ddoc) as dopl, sum(summa) as summa
           from basefin
           join usersdoc ud on ud.tipgal=basefin.tidkgal and ud.tipusers=basefin.tipdoc
           join cashbank cb on cb.nrec = ud.ccashbank
           join spcash on spcash.ccashbank = cb.nrec and spcash.cplanssch=#comp(000100000000000Eh)
           join spkau on spkau.nrec = case when spcash.tblos[1] = 10545 then spcash.kauos[1]
                                           when spcash.tblos[2] = 10545 then spcash.kauos[2]
                                           when spcash.tblos[3] = 10545 then spcash.kauos[3]
                                           when spcash.tblos[4] = 10545 then spcash.kauos[4]
                                           when spcash.tblos[5] = 10545 then spcash.kauos[5]
                                           when spcash.tblos[6] = 10545 then spcash.kauos[6]
                                           else #comp(0)
                                      end
           where tidkgal = 1 and cbasedoc<>#comp(0)
           group by cbasedoc, coalesce(spkau.nrec, #comp(0))
          ) bfrs on bfrs.cbasedoc = tbd.nrec and bfrs.spkRSNrec = tbd.spkRSNrec

left join (select cbasedoc, max(basefin.ddoc) as dopl, sum(summa) as summa
           from basefin
           where tidkgal = 1 and cbasedoc<>#comp(0)
           group by cbasedoc
          ) bfall on bfall.cbasedoc = bd.nrec
;

//#endregion

var
  _contractIDHelper: ContractIDHelper;
  pXL: XLSRepBuilder;
  ea: iextattr;
  sXLSFileName, sXLTFileName: string;

create view
as select *
from tbd, trs, spkau,
     trs brrs, tbd brbd, basedoc brbasedoc, katorg brorg, katbank brbank, dogovor brdog,
     katnotes brnote, statlog brstatlog(STATLOG02), klval brval, stepdoc brsd, basefin brbf
where ((
  brrs.spkRSNrec     == brbd.spkRSNrec    and
  brbd.nrec          == brbasedoc.nrec    and
  brbasedoc.corg     == brorg.nrec        and
  brbasedoc.cbank    == brbank.nrec       and
  brbasedoc.cdogovor == brdog.nrec        and
  brbasedoc.cnote    == brnote.nrec       and
  40                 == brstatlog.doctype and
  brbasedoc.nrec     == brstatlog.cdoc    and
  brbasedoc.cval     == brval.nrec        and
  brbd.nrec          == brsd.cbasedoc     and
  brbd.nrec          == brbf.cbasedoc
));

procedure CreateTmpTableForMarker(lMarker: longint; tableName: string);
{
  sqlCreateTmpTable('table '+tableName+'(crec: comp);', ctmNormal);
  sqlExecDirect('delete '+tableName);
  var q: IQuery;
  q := queryManager.createQuery('insert '+tableName+' (crec) values (:crec)');

  var i: longint = 0;
  var c: comp;
  for(i := 0; getmarker(lMarker, i, c); i++)
    q.SetParam('crec', c).execute;
}

procedure PrepareData(lBasedocMarker: longint);
{
  CreateTmpTableForMarker(lBasedocMarker, 'bdreeagat');
  delete all tbd;
  sqlCopyInto(queryManager.createQuery(querymain).getResultSet, #tbd, true);
  _loop tbd
  {
    if getfirst trs where ((tbd.spkRSNrec == trs.spkRSNrec)) != tsOk
    {
      clearbuffer(#trs);
      trs.spkRSNrec := tbd.spkRSNrec;
      trs.name := if(trs.spkRSNrec = 0,
                     'Общий счет',
                     if(getfirst spkau where ((tbd.spkRSNrec == spkau.nrec)) = tsOk, spkau.name, ''));
      insert current trs;
    }
  }
}


function IBasedocReeReport.Title: string;
{
  result := 'Реестр ДО с группировкой по счетам';
}

function IBasedocReeReport.PrintReport(lBasedocMarker: longint; params: IParams = nullref): boolean;
{
    PrepareData(lBasedocMarker)

    var szakaz, scfo, _dds: string;
    StartNewVisual(vtRotateVisual, vfThread+vfTimer, 'Формирование отчета', 0);

    sXLTFileName := TranslatePath('%StartPath%xls\agat_basedoc_ree_hier.xlt');
    //sXLSFileName := pXL.CreateReport(sXLTFileName, True)
    sXLSFileName := pXL.CreateXLT(sXLTFileName, True);

    pXL.CreateTbls(sXLSFileName);
    pXL.CreateTbl('Main');
    pXL.CreateTblFld('viddoc');
    pXL.CreateTblFld('ddoc'  );
    pXL.CreateTblFld('nodoc' );
    pXL.CreateTblFld('bdds'  );
    pXL.CreateTblFld('dform' );
    pXL.CreateTblFld('summa' );
    pXL.CreateTblFld('total' );
    pXL.CreateTblFld('sumopl');
    pXL.CreateTblFld('sumdolg');
    pXL.CreateTblFld('val'   );
    pXL.CreateTblFld('statusopl');
    pXL.CreateTblFld('dopl'  );
    pXL.CreateTblFld('avans' );
    pXL.CreateTblFld('status');
    pXL.CreateTblFld('ispoln');
    pXL.CreateTblFld('dds'   );
    pXL.CreateTblFld('bdr'   );
    pXL.CreateTblFld('buhsch');
    pXL.CreateTblFld('dsogl' );
    pXL.CreateTblFld('sogl'  );
    pXL.CreateTblFld('vbuh'  );
    pXL.CreateTblFld('vkaz'  );
    pXL.CreateTblFld('vpeu'  );
    pXL.CreateTblFld('vdir'  );
    pXL.CreateTblFld('pbuh'  );
    pXL.CreateTblFld('pkaz'  );
    pXL.CreateTblFld('ppeu'  );
    pXL.CreateTblFld('pdir'  );
    pXL.CreateTblFld('vrez'  );
    pXL.CreateTblFld('soglinfo');
    pXL.CreateTblFld('org'   );
    pXL.CreateTblFld('bank'  );
    pXL.CreateTblFld('bankrs');
    pXL.CreateTblFld('init'  );
    pXL.CreateTblFld('cfo'   );
    pXL.CreateTblFld('zakaz' );
    pXL.CreateTblFld('contractId');
    pXL.CreateTblFld('viddoc');
    pXL.CreateTblFld('dognum' );
    pXL.CreateTblFld('dogdate');
    pXL.CreateTblFld('procav');
    pXL.CreateTblFld('nazn');
    pXL.CreateTblFld('npp');
    pXL.CreateTblFld('statusName');
    pXL.CreateTblFld('statusComment');
    if (not isCreateXLT) {
      pushpos(#brbd);
      var _cnt, _npp: longint;
      _cnt := getmarkercount(mrkmain);
      _npp := 0;
      _loop brbd  where (_cnt=0 or foundmarker(mrkmain,brbd.nrec)) {
        _npp += 1;
        //выводим строки
        if getfirst brbasedoc = tsOk {};
        if getfirst brorg     = tsOk {};
        if getfirst brbank    = tsOk {};
        if getfirst brnote    = tsOk {};
        pXL.ClearTblBuffer;
        pXL.SetTblStringFldValue('npp'      , _npp);
        pXL.SetTblStringFldValue('ddoc'     , datetostr(brbd.ddoc,'DD.MM.YYYY'));
        pXL.SetTblStringFldValue('nodoc'    , brbd.nodoc                       );
        pXL.SetTblStringFldValue('viddoc'   , if(brbasedoc.viddoc=101, 'ДО на закупку', 'ДО на предоплату закупок'));
        pXL.SetTblStringFldValue('nazn'     , brbd.naznpl                      );
        pXL.SetTblStringFldValue('bdds'     , brbd.bdds                        );
        pXL.SetTblStringFldValue('dform'    , datetostr(brbd.dform,'DD.MM.YYYY'));
        pXL.SetTblNumberFldValue('summa'    , brbd.summa                       );
        pXL.SetTblNumberFldValue('total'    , brbd.total                       );
        pXL.SetTblNumberFldValue('sumopl'   , brbd.sumopl                      );
        pXL.SetTblNumberFldValue('sumdolg'  , round(brbd.total-brbd.sumopl,2)  );
        pXL.SetTblStringFldValue('statusopl', if(brbd.sumopl<=0,'Не оплачен', if(brbd.sumopl>=brbd.total,'Полностью оплачен', 'Частично оплачен')));

        _qOpl.setParam('basedocNrec', brbd.nrec);
        if _qOpl.execute.errorcode = tsOk
        {
          if _qOpl.fetch.errorCode = tsOk
          {
            pXL.AddTblStringFldValue('dopl', datetostr(_qOpl.row.Val('datob'),'DD.MM.YYYY'));
            while _qOpl.fetch.errorCode = tsOk
              pXL.AddTblStringFldValue('dopl', '; '+datetostr(_qOpl.row.Val('datob'),'DD.MM.YYYY'));
          }
        }

        pXL.SetTblStringFldValue('avans'    , brbd.avans                       );
        pXL.SetTblStringFldValue('status'   , brnote.name                      );
        pXL.SetTblStringFldValue('ispoln'   , brbd.ispoln                      );
        if pos(' ',brbd.dds) > 0 {
          _dds := replace(substr(brbd.dds,1,pos(' ',brbd.dds)), '.', '');
        } else {
          _dds := brbd.dds;
        }
        pXL.SetTblStringFldValue('dds'      , _dds                             );
        pXL.SetTblStringFldValue('bdr'      , brbd.bdr                         );
        pXL.SetTblStringFldValue('buhsch'   , brbd.buhsch                      );
        pXL.SetTblStringFldValue('dsogl'    , datetostr(brbd.dsogl,'DD.MM.YYYY'));
        pXL.SetTblStringFldValue('sogl'     , vizafld(brbd.sogl,brbd.daysogl)  );
        pXL.SetTblStringFldValue('vbuh'     , vizafld(brbd.vbuh,brbd.daybuh)   );
        pXL.SetTblStringFldValue('vkaz'     , vizafld(brbd.vkaz,brbd.daykaz)   );
        pXL.SetTblStringFldValue('vpeu'     , vizafld(brbd.vpeu,brbd.daypeu)   );
        pXL.SetTblStringFldValue('vdir'     , vizafld(brbd.vdir,brbd.daydir)   );

        pXL.SetTblStringFldValue('pbuh'     , ea.sGetAttrID(WT_BASEDOC, brbd.nrec, ATTRNAM_PBUH));
        pXL.SetTblStringFldValue('pkaz'     , ea.sGetAttrID(WT_BASEDOC, brbd.nrec, ATTRNAM_PKAZ));
        pXL.SetTblStringFldValue('ppeu'     , ea.sGetAttrID(WT_BASEDOC, brbd.nrec, ATTRNAM_PPEU));
        pXL.SetTblStringFldValue('pdir'     , ea.sGetAttrID(WT_BASEDOC, brbd.nrec, ATTRNAM_PDIR));

        pXL.AddTblStringFldValue('soglinfo' ,         GetBDReeExtAttrInfo('Передано на согл.    ', ATTRNAM_SOGL));
        pXL.AddTblStringFldValue('soglinfo' , chr(10)+GetBDReeExtAttrInfo('Казначейство         ', ATTRNAM_KAZN));
        pXL.AddTblStringFldValue('soglinfo' , chr(10)+GetBDReeExtAttrInfo('Бухгалтерия          ', ATTRNAM_BUH));
        pXL.AddTblStringFldValue('soglinfo' , chr(10)+GetBDReeExtAttrInfo('ПЭУ                  ', ATTRNAM_PEU));
        pXL.AddTblStringFldValue('soglinfo' , chr(10)+GetBDReeExtAttrInfo('Коммерческая дирекция', ATTRNAM_DIR));

        pXL.SetTblStringFldValue('vrez'     , vizafld(brbd.vrez,brbd.dayrez)   );
        pXL.SetTblStringFldValue('org'      , brorg.name                       );
        pXL.SetTblStringFldValue('bank'     , brbank.name                      );
        pXL.SetTblStringFldValue('bankrs'   , brbank.schet1                    );
        pXL.SetTblStringFldValue('zakaz'    , brbd.zakaz                       );

        if (getfirst brsd = tsOk)
          pXL.SetTblStringFldValue('contractId', _contractIDHelper.GetContractId(GetContractIDKey_ByStepdoc, brsd.nrec));

        pXL.SetTblStringFldValue('cfo'      , brbd.cfo                         );
        if getfirst brdog     = tsOk {
          pXL.SetTblStringFldValue('dognum' , brdog.nodoc                    );
          pXL.SetTblStringFldValue('dogdate', datetostr(brdog.ddoc,'DD.MM.YYYY'));
        }
        if getfirst brval     = tsOk {
          pXL.SetTblStringFldValue('val'    , brval.dollar);
        } else {
          pXL.SetTblStringFldValue('val'    , '');
        }
        pXL.SetTblStringFldValue('procav'   , if(brbasedoc.procopl>0,
                                                 brbasedoc.procopl,
                                                 if(brbd.total>0 and brbd.sumopl>0,
                                                    round(brbd.sumopl/brbd.total*100,2),
                                                    ''
                                                 )
                                              ) );
        if getfirst brnote = tsOk
          pXL.SetTblStringFldValue('statusName', brnote.name);
        else
          pXL.SetTblStringFldValue('statusName', '');

        if getlast brstatlog = tsOk
          pXL.SetTblStringFldValue('statusComment', brstatlog.comment);
        else
          pXL.SetTblStringFldValue('statusComment', '');

        pXL.InsTblRow;
      }
    }
    pXL.PublishTbl('Main');
    pXL.LoadReport(sXLSFileName);
    pXL.DisConnectExcel;
    poppos(#brbd);
    stopvisual('',0);
}

end.
