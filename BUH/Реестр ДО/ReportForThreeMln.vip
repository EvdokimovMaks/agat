#component "AGAT"

interface ThreeMillionReport;

var
  pXL: XLSRepBuilder;
  sXLSFileName, sXLTFileName: string;

sql query qGetPlporsIGK =
select cb.name      as BankName,
       ud.tipusers  as TIDK,
       pl.nodok     as PlporNumber,
       pl.sumplat   as Summa,
       pl.datvip    as PlporDate,
       spkIGK.name  as RSName,
       spkIGK.nrec  as RSNrec
from spcash spc
join cashbank cb on cb.nrec = spc.ccashbank
join usersdoc ud on ud.tipgal = 1 and ud.razdel = cb.razdel and ud.ccashbank = cb.nrec
join plpor pl on pl.tidk = ud.tipusers and pl.datvip between :dBeg and :dEnd
join attrval av on av.wtable = 9015 and av.crec = pl.nrec and av.cattrnam = #comp(000100000000077Ah) and av.vcomp = #comp(000100000000139Eh)
join spkau spkIGK on spkIGK.nrec =  case when spc.tblos[1] = 10527 then spc.kauos[1]
                                         when spc.tblos[2] = 10527 then spc.kauos[2]
                                         when spc.tblos[3] = 10527 then spc.kauos[3]
                                         when spc.tblos[4] = 10527 then spc.kauos[4]
                                         when spc.tblos[5] = 10527 then spc.kauos[5]
                                         when spc.tblos[6] = 10527 then spc.kauos[6] end
;

sql query qGetBDWithoutPlpors =
select bd.viddoc   as VidDoc,
       bd.nodoc    as DocNumber,
       bd.ddoc     as DocDate,
       sps.summa   as Summa,
       spkRS.name  as RSName,
       spkRS.nrec  as RSNrec,
       spkIGK.nrec as IGKNrec
from basedoc bd
join stepdoc sd on sd.cbasedoc = bd.nrec
join spstep sps on sps.cstepdoc = sd.nrec
join attrval avRejim on avRejim.wtable = 1104 and avRejim.crec = sps.nrec and avRejim.cattrnam=#comp(000100000000079Eh) and avRejim.vComp=#comp(000100000000139Eh)
join attrval avRS on avRS.wtable = 1104 and avRS.crec = sps.nrec and avRS.cattrnam=#comp(0001000000000A86h)
join spkau spkRS on spkRS.nrec = avRS.vcomp
left join (select bf.cbasedoc, spkau.nrec as RSNrec, count(*) as cnt
           from basefin bf
           join usersdoc ud on ud.tipusers = bf.tipdoc
           join cashbank cb on cb.nrec = ud.ccashbank
           join spcash spc on spc.ccashbank=cb.nrec and spc.cplanssch=#comp(000100000000000Eh)
           join spkau on spkau.nrec = (case when spc.tblos[1] = 10545 then spc.kauos[1]
                                            when spc.tblos[2] = 10545 then spc.kauos[2]
                                            when spc.tblos[3] = 10545 then spc.kauos[3]
                                            when spc.tblos[4] = 10545 then spc.kauos[4]
                                            when spc.tblos[5] = 10545 then spc.kauos[5]
                                            when spc.tblos[6] = 10545 then spc.kauos[6] end)
           where bf.cbasedoc <> #comp(0)
           group by bf.cbasedoc, spkau.nrec
          ) bf on bf.cbasedoc = bd.nrec and bf.RSNrec = spkRS.nrec
join spcash spc on spc.cplanssch=#comp(000100000000000Eh) and (case when spc.tblos[1] = 10545 then spc.kauos[1]
                                                                    when spc.tblos[2] = 10545 then spc.kauos[2]
                                                                    when spc.tblos[3] = 10545 then spc.kauos[3]
                                                                    when spc.tblos[4] = 10545 then spc.kauos[4]
                                                                    when spc.tblos[5] = 10545 then spc.kauos[5]
                                                                    when spc.tblos[6] = 10545 then spc.kauos[6] end) = spkRS.nrec
left join spkau spkIGK on spkIGK.nrec = (case when spc.tblos[1] = 10527 then spc.kauos[1]
                                              when spc.tblos[2] = 10527 then spc.kauos[2]
                                              when spc.tblos[3] = 10527 then spc.kauos[3]
                                              when spc.tblos[4] = 10527 then spc.kauos[4]
                                              when spc.tblos[5] = 10527 then spc.kauos[5]
                                              when spc.tblos[6] = 10527 then spc.kauos[6] end)
where bd.viddoc in (101,111) and coalesce(bf.cnt,0) = 0
;

table struct tRS (
  RSName      : string,
  RSNrec      : comp
) with index (
  i01 = RSNrec
);

table struct tPlporsIGK (
  nrec        : comp,
  BankName    : string,
  TIDK        : word,
  PlporNumber : string,
  Summa       : double,
  PlporDate   : date,
  RSName      : string,
  RSNrec      : comp
) with index (
  i01 = RSNrec
);

table struct tBDWithoutPlpors (
  nrec      : comp,
  VidDoc    : word,
  DocNumber : string,
  DocDate   : date,
  Summa     : double,
  RSName    : string,
  RSNrec    : comp
) IGKNrec   with index (
  i01 = RSNrec
);

procedure MakeRSTable; //content tRS by 2 tables (tPlporsIGK and tBDWithoutPlpors)
{
  _loop tPlporsIGK
  {
    if getfirst tRS where ((tPlporsIGK.RSNrec == tRS.RSNrec)) != tsOk
    {
      ClearBuffer(#tRS);
      tRS.RSNrec := tPlporsIGK.RSNrec;
      tRS.RSName := tPlporsIGK.RSName;
      insert currnet tRS;
    }
  }
  _loop tBDWithoutPlpors
  {
    if getfirst tRS where ((tBDWithoutPlpors.RSNrec == tRS.RSNrec)) != tsOk
    {
      ClearBuffer(#tRS);
      tRS.RSNrec := tBDWithoutPlpors.RSNrec;
      tRS.RSName := tBDWithoutPlpors.RSName;
      insert currnet tRS;
    }
  }
}

procedure PrintReport(isCreateXLT: boolean);
{
  if (not isCreateXLT) Set sXLSFileName := pXL.CreateReport(sXLTFileName, True)
                  else Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);
  pXL.CreateVar(sXLSFileName);
  pXL.SetStringVar('test', '');
  pXL.PublishVar;
  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Main');
  //создать поля таблицы
/*  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('
  pXL.CreateTblFld('    */


  _loop tRS
  {
    pXL.ClearTblBuffer;
    pXL.SetTblStringFldValue('RSNrec', tRS.RSNrec);
    _loop tPlporsIGK where ((tRS.RSNrec == tPlporsIGK.RSNrec))
    {
      //заполняем данными из платёжек
    }

    _loop tBDWithoutPlpors where ((tRS.RSNrec == tBDWithoutPlpors.RSNrec and (tBDWithoutPlpors.DocDate <= dEnd))) = tsOk
    {
      //заполняем данными из ДО (с датой актуальной)
    }

    _loop tBDWithoutPlpors where ((tRS.RSNrec == tBDWithoutPlpors.RSNrec and (tBDWithoutPlpors.DocDate > dEnd))) = tsOk //ознакомительный раздел
    {
      //заполняем данными из ДО (с датой позже)
    }
  }

  pXL.PublishTbl('Main');
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}

}

handleevent
cminit:
{
  var q: IQuery;
  var rs: IResultSet;
  //выполняем 1ый запрос и rs в таблицу
  q := querymanager.createquery(qGetPlporsIGK);
  q.setParam('dBeg', );
  q.setParam('dEnd', );
  rs := q.getresultset;
  if (rs.getfirst = tsOk) do
  {
    ClearBuffer(#tPlporsIGK);
    tPlporsIGK.BankName    := rs.row.val('BankName');
    tPlporsIGK.TIDK        := rs.row.val('TIDK');
    tPlporsIGK.PlporNumber := rs.row.val('PlporNumber');
    tPlporsIGK.Summa       := rs.row.val('Summa');
    tPlporsIGK.PlporDate   := rs.row.val('PlporDate');
    tPlporsIGK.RSName      := rs.row.val('RSName');
    tPlporsIGK.RSNrec      := rs.row.val('RSNrec');
    insert current tPlporsIGK;
  } while (rs.getnext = tsOk);
  //потом второй запрос
  q := querymanager.createquery(qGetBDWithoutPlpors);
  rs := q.getresultset;
  if (rs.getfirst = tsOk) do
  {
    ClearBuffer(#tBDWithoutPlpors);
    tBDWithoutPlpors.VidDoc    := rs.row.val('VidDoc');
    tBDWithoutPlpors.DocNumber := rs.row.val('DocNumber');
    tBDWithoutPlpors.DocDate   := rs.row.val('DocDate');
    tBDWithoutPlpors.Summa     := rs.row.val('Summa');
    tBDWithoutPlpors.RSName    := rs.row.val('RSName');
    tBDWithoutPlpors.RSNrec    := rs.row.val('RSNrec');
    insert current tBDWithoutPlpors;
  } while (rs.getnext = tsOk);
  MakeRSTable;
  sXLTFileName := TranslatePath('%StartPath%xls\ReportForThreeMln.xlt'); //rename to .xltm when content report
  PrintReport(true); //first of all use true for create XLT, then false - to make report
}
end;
end.

VipInterface UserReport_ThreeMillionReport Implements IUserReport licensed(free);
Interface UserReport_ThreeMillionReport;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::ThreeMillionReport);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'АгатЪ. Отчёт по документам с суммой до 3 млн (ФЗ-275)';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := ''
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'BUY';
    end;
  end;
end.
