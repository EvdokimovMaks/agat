#include XLREPORT.vih

#component "AGAT"

interface ThreeMillionReport 'Формирование отчёта';
show at (,,40,6);
var
  pXL: XLSRepBuilder;
  sXLSFileName, sXLTFileName: string;
  dBeg, dEnd: date;

sql query qGetPlporsIGK =
select pl.nodok    as PlporNumber,
       pl.sumplat  as Summa,
       pl.datvip   as PlporDate,
       pl.NAMEPL1  as Naznach,
       spkIGK.name as IGKName,
       spkIGK.nrec as IGKNrec
from spcash spc
join cashbank cb on cb.nrec = spc.ccashbank
join usersdoc ud on ud.tipgal = 1 and ud.razdel = cb.razdel and ud.ccashbank = cb.nrec
join plpor pl on pl.tidk = ud.tipusers and pl.datvip between #date(1,1,2016) and #date(31,12,2016)
join attrval av on av.wtable = 9015 and av.crec = pl.nrec and av.cattrnam = #comp(000100000000077Ah) and av.vcomp = #comp(000100000000139Eh)
join spkau spkRS on spkRS.nrec = (case when spc.tblos[1] = 10545 then spc.kauos[1]
                                       when spc.tblos[2] = 10545 then spc.kauos[2]
                                       when spc.tblos[3] = 10545 then spc.kauos[3]
                                       when spc.tblos[4] = 10545 then spc.kauos[4]
                                       when spc.tblos[5] = 10545 then spc.kauos[5]
                                       when spc.tblos[6] = 10545 then spc.kauos[6] end)
join spkau spkIGK on spkIGK.nrec = (case when spc.tblos[1] = 10527 then spc.kauos[1]
                                         when spc.tblos[2] = 10527 then spc.kauos[2]
                                         when spc.tblos[3] = 10527 then spc.kauos[3]
                                         when spc.tblos[4] = 10527 then spc.kauos[4]
                                         when spc.tblos[5] = 10527 then spc.kauos[5]
                                         when spc.tblos[6] = 10527 then spc.kauos[6] end)
;

sql query qGetBDWithoutPlpors =
select bd.nodoc    as DocNumber,
       bd.ddoc     as DocDate,
       naz.vstring as Naznach,
       sps.summa   as Summa,
       spkIGK.nrec as IGKNrec,
       spkIGK.name as IGKName
from basedoc bd
left join attrval naz on naz.wtable = 1102 and naz.crec = bd.nrec and naz.cattrnam = #comp(000100000000010Dh)
join stepdoc sd on sd.cbasedoc = bd.nrec
join spstep sps on sps.cstepdoc = sd.nrec
join attrval avRejim on avRejim.wtable = 1104 and avRejim.crec = sps.nrec and avRejim.cattrnam=#comp(000100000000079Eh) and avRejim.vComp=#comp(000100000000139Eh)
join attrval avRS on avRS.wtable = 1104 and avRS.crec = sps.nrec and avRS.cattrnam=#comp(0001000000000A86h)
join spkau spkRS on spkRS.nrec = avRS.vcomp
left join (select bf.cbasedoc, spkau.nrec as RSNrec, count(*) as cnt
           from basefin bf
           join usersdoc ud on ud.tipusers = bf.tipdoc
           join cashbank cb on cb.nrec = ud.ccashbank
           join spcash spc on spc.ccashbank=cb.nrec and spc.cplanssch=#comp(000100000000000Eh)
           join spkau on spkau.nrec = (case when spc.tblos[1] = 10545 then spc.kauos[1]
                                            when spc.tblos[2] = 10545 then spc.kauos[2]
                                            when spc.tblos[3] = 10545 then spc.kauos[3]
                                            when spc.tblos[4] = 10545 then spc.kauos[4]
                                            when spc.tblos[5] = 10545 then spc.kauos[5]
                                            when spc.tblos[6] = 10545 then spc.kauos[6] end)
           where bf.cbasedoc <> #comp(0)
           group by bf.cbasedoc, spkau.nrec
          ) bf on bf.cbasedoc = bd.nrec and bf.RSNrec = spkRS.nrec
join spcash spc on spc.cplanssch=#comp(000100000000000Eh) and (case when spc.tblos[1] = 10545 then spc.kauos[1]
                                                                    when spc.tblos[2] = 10545 then spc.kauos[2]
                                                                    when spc.tblos[3] = 10545 then spc.kauos[3]
                                                                    when spc.tblos[4] = 10545 then spc.kauos[4]
                                                                    when spc.tblos[5] = 10545 then spc.kauos[5]
                                                                    when spc.tblos[6] = 10545 then spc.kauos[6] end) = spkRS.nrec
left join spkau spkIGK on spkIGK.nrec = (case when spc.tblos[1] = 10527 then spc.kauos[1]
                                              when spc.tblos[2] = 10527 then spc.kauos[2]
                                              when spc.tblos[3] = 10527 then spc.kauos[3]
                                              when spc.tblos[4] = 10527 then spc.kauos[4]
                                              when spc.tblos[5] = 10527 then spc.kauos[5]
                                              when spc.tblos[6] = 10527 then spc.kauos[6] end)
where bd.viddoc in (101,111) and coalesce(bf.cnt,0) = 0
;

table struct tRS (
  IGKName : string,
  IGKNrec : comp
) with index (
  i01 = IGKNrec
);

table struct tPlporsIGK (
  PlporNumber : string,
  PlporDate   : date,
  Naznach     : string,
  Summa       : double,
  IGKName     : string,
  IGKNrec     : comp
) with index (
  i01 = IGKNrec
);

table struct tBDWithoutPlpors (
  DocNumber : string,
  DocDate   : date,
  Naznach   : string,
  Summa     : double,
  IGKName   : string,
  IGKNrec   : comp
) with index (
  i01 = IGKNrec
);

create view
as select *
from tRS, tPlporsIGK, tBDWithoutPlpors;

procedure MakeRSTable; //content tRS by 2 tables (tPlporsIGK and tBDWithoutPlpors)
{
  var q: IQuery;
  var rs: IResultSet;
  //выполняем 1ый запрос и rs в таблицу
  q := querymanager.createquery(qGetPlporsIGK);
  q.setParam('dBeg', dBeg);
  q.setParam('dEnd', dEnd);
  rs := q.getresultset;
  if (rs.getfirst = tsOk) do
  {
    ClearBuffer(#tPlporsIGK);
    tPlporsIGK.PlporNumber := rs.row.val('PlporNumber');
    tPlporsIGK.PlporDate   := rs.row.val('PlporDate');
    tPlporsIGK.Naznach     := rs.row.val('Naznach');
    tPlporsIGK.Summa       := rs.row.val('Summa');
    tPlporsIGK.IGKName     := rs.row.val('IGKName');
    tPlporsIGK.IGKNrec     := rs.row.val('IGKNrec');
    insert current tPlporsIGK;
  } while (rs.getnext = tsOk);
  //потом второй запрос
  q := querymanager.createquery(qGetBDWithoutPlpors);
  rs := q.getresultset;
  if (rs.getfirst = tsOk) do
  {
    ClearBuffer(#tBDWithoutPlpors);
    tBDWithoutPlpors.DocNumber := rs.row.val('DocNumber');
    tBDWithoutPlpors.DocDate   := rs.row.val('DocDate');
    tBDWithoutPlpors.Naznach   := rs.row.val('Naznach');
    tBDWithoutPlpors.Summa     := rs.row.val('Summa');
    tBDWithoutPlpors.IGKName   := rs.row.val('IGKName');
    tBDWithoutPlpors.IGKNrec   := rs.row.val('IGKNrec');
    insert current tBDWithoutPlpors;
  } while (rs.getnext = tsOk);

  _loop tPlporsIGK
  {
    if getfirst tRS where ((tPlporsIGK.IGKNrec == tRS.IGKNrec)) != tsOk
    {
      ClearBuffer(#tRS);
      tRS.IGKNrec := tPlporsIGK.IGKNrec;
      tRS.IGKName := tPlporsIGK.IGKName;
      insert current tRS;
    }
  }

  _loop tBDWithoutPlpors
  {
    if getfirst tRS where ((tBDWithoutPlpors.IGKNrec == tRS.IGKNrec)) != tsOk
    {
      ClearBuffer(#tRS);
      tRS.IGKNrec := tBDWithoutPlpors.IGKNrec;
      tRS.IGKName := tBDWithoutPlpors.IGKName;
      insert current tRS;
    }
  }
}

procedure PrintRazdel(aStr: string); //kind of documents
{
  pXL.ClearTblBuffer;
  pXL.SetTblStringFldValue('IGKName', aStr);
  pXL.SetTblNumberFldValue('Status',  2);
  pXL.InsTblRow;
}

procedure PrintReport(isCreateXLT: boolean);
{
  if (not isCreateXLT) Set sXLSFileName := pXL.CreateReport(sXLTFileName, True)
                  else Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);
  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Main');
  pXL.CreateTblFld('IGKName');
  pXL.CreateTblFld('DocNumber');
  pXL.CreateTblFld('DocDate');
  pXL.CreateTblFld('Summa');
  pXL.CreateTblFld('Naznach');
  pXL.CreateTblFld('Status');

  if (not isCreateXLT)
  {
    var PreSumPl, PreSumBD, TotalSum: double;
    StartNewVisual(vtRotateVisual, vfThread + vfBreak + vfTimer, 'Формирование отчёта', 0);
    _loop tRS
    {
      PreSumPl := 0;
      PreSumBD := 0;
      TotalSum := 0;
      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('IGKName', tRS.IGKName);
      pXL.SetTblNumberFldValue('Status',  1);
      pXL.InsTblRow;
      PrintRazdel('Платежки в период с ' + dBeg + ' по ' + dEnd);
      _loop tPlporsIGK where ((tRS.IGKNrec == tPlporsIGK.IGKNrec))
      {
        pXL.ClearTblBuffer;
        pXL.SetTblStringFldValue('IGKName',   tPlporsIGK.IGKName);
        pXL.SetTblStringFldValue('DocNumber', tPlporsIGK.PlporNumber);
        pXL.SetTblDateFldValue  ('DocDate',   tPlporsIGK.PlporDate);
        pXL.SetTblStringFldValue('Naznach',   tPlporsIGK.Naznach);
        pXL.SetTblNumberFldValue('Summa',     tPlporsIGK.Summa);
        pXL.SetTblNumberFldValue('Status',    0);
        PreSumPl := PreSumPl + tPlporsIGK.Summa;
        pXL.InsTblRow;
      }
      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('IGKName', 'Итого по платежам');
      pXL.SetTblNumberFldValue('Summa',   PreSumPl);
      pXL.SetTblNumberFldValue('Status',  3);
      pXL.InsTblRow;
      PrintRazdel('ДО без платежек входящие в период с ' + dBeg + ' по ' + dEnd);
      _loop tBDWithoutPlpors where ((tRS.IGKNrec == tBDWithoutPlpors.IGKNrec and (tBDWithoutPlpors.DocDate <= dEnd)))
      {
        pXL.ClearTblBuffer;
        pXL.SetTblStringFldValue('IGKName',   tBDWithoutPlpors.IGKName);
        pXL.SetTblStringFldValue('DocNumber', tBDWithoutPlpors.DocNumber);
        pXL.SetTblDateFldValue  ('DocDate',   tBDWithoutPlpors.DocDate);
        pXL.SetTblStringFldValue('Naznach',   tBDWithoutPlpors.Naznach);
        pXL.SetTblNumberFldValue('Summa',     tBDWithoutPlpors.Summa);
        pXL.SetTblNumberFldValue('Status',    0);
        PreSumBD := PreSumBD + tBDWithoutPlpors.Summa;
        pXL.InsTblRow;
      }
      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('IGKName', 'Итого по ДО');
      pXL.SetTblNumberFldValue('Summa',   PreSumBD);
      pXL.SetTblNumberFldValue('Status',  3);
      pXL.InsTblRow;
      PrintRazdel('ДО без платежек в будущем периоде');
      _loop tBDWithoutPlpors where ((tRS.IGKNrec == tBDWithoutPlpors.IGKNrec and (tBDWithoutPlpors.DocDate > dEnd))) //ознакомительный раздел
      {
        pXL.ClearTblBuffer;
        pXL.SetTblStringFldValue('IGKName',   tBDWithoutPlpors.IGKName);
        pXL.SetTblStringFldValue('DocNumber', tBDWithoutPlpors.DocNumber);
        pXL.SetTblDateFldValue  ('DocDate',   tBDWithoutPlpors.DocDate);
        pXL.SetTblStringFldValue('Naznach',   tBDWithoutPlpors.Naznach);
        pXL.SetTblNumberFldValue('Summa',     tBDWithoutPlpors.Summa);
        pXL.SetTblNumberFldValue('Status',    0);
        pXL.InsTblRow;
      }
      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('IGKName', 'Итого по ИГК ' + tRS.IGKName);
      pXL.SetTblNumberFldValue('Summa',   PreSumPl + PreSumBD);
      pXL.SetTblNumberFldValue('Status',  4);
      pXL.InsTblRow;
      TotalSum := TotalSum + PreSumPl + PreSumBD;
      if (not NextVisual) break;
    }
    pXL.ClearTblBuffer;
    pXL.SetTblStringFldValue('IGKName', 'ИТОГО');
    pXL.SetTblNumberFldValue('Summa',   TotalSum);
    pXL.SetTblNumberFldValue('Status',  4);
    pXL.InsTblRow;
  }
  stopvisual('',0);
  pXL.PublishTbl('Main');
  pXL.CreateVar(sXLSFileName);
  pXL.SetDateVar('dBeg', dBeg);
  pXL.SetDateVar('dEnd', dEnd);
  pXL.PublishVar;
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}

screen scMain;
fields
  dBeg: noprotect;
  dEnd: noprotect;
buttons
  cmMakeMagic, default;
<<

        Дата с .@@@@@@@@@@
            по .@@@@@@@@@@

    <.     Сформировать     .>
>>
end;

handleevent
cminit:
{
  if not readmydsk(dEnd, 'dEnd_Rep3Mln', false) dEnd := cur_date;
  if not readmydsk(dBeg, 'dBeg_Rep3Mln', false) dBeg := sub_day(dEnd,30);
  sXLTFileName := TranslatePath('%StartPath%xls\ReportForThreeMln.xltm'); //rename to .xltm when content report
}
cmMakeMagic:
{
  if dBeg = 0 or dEnd = 0
  {
    message('Заполните пожалуйста даты отчёта', error);
    exit;
  }
  MakeRSTable;
  PrintReport(false); //first of all use true for create XLT, then false - to make report
}
cmDone:
{
  savemydsk(dBeg, 'dBeg_Rep3Mln');
  savemydsk(dEnd, 'dEnd_Rep3Mln');
}
end;
end.

VipInterface UserReport_ThreeMillionReport Implements IUserReport licensed(free);
Interface UserReport_ThreeMillionReport;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::ThreeMillionReport);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Агат. Отчёт по ДО с режимом использования до 3 млн (ФЗ-275)';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := ''
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'BUY';
    end;
  end;
end.
