#include ag_tzr_zp.vih

#component "AGAT"

interface test_tzr;

const
  MinSumRaspr: double = 0.01;
end;

var
  _rep: AG_TZR_ZP_Report noauto;

screen sc1;
<<
>>
end;

handleevent

  cmInit:
  {
    var p: AG_TTZR_ZP_Report_Params;

    p.dBeg := date(1,1,2020);
    p.dEnd := date(31,1,2020);

    p.zp := AG_IZP(new(AG_ZP, Create(p.dBeg, p.dEnd,
      'SchetO, SubOsSch, SchetK, SubSchK, cStZ, cPodgr, cCateg, cPodr, KodSpO')));

    p.base1 := AG_ITZR_Base(new(AG_TZR_Base, Create(p.dBeg, p.dEnd)));

    p.tzr_zp1 := AG_ITZR_ZP(new(AG_TZR_ZP, Create(p.zp, p.base1)));

    p.base2 := AG_ITZR_Base(new(AG_TZR_Base, Clone(p.base1, false)));

    p.mIsklZakaz := InitMarker('', 8, 10, 10, true);

    if p.base1.first do
    {
      if p.base1.KRZP != 0 continue;
      if FoundMarker(p.mIsklZakaz, p.base1.cZakaz) continue;
      p.base2.IsklZakaz(p.base1.cZakaz);
      InsertMarker(p.mIsklZakaz, p.base1.cZakaz);
    }
    while p.base1.next;

    var tzrzp1_gr: AG_ITZR_ZP = AG_ITZR_ZP(new(AG_TZR_ZP, GroupByZakazStZKodSpO(p.tzr_zp1)));

    if tzrzp1_gr.first do
    {
      if (tzrzp1_gr.SumOb <= 0 or tzrzp1_gr.SumOb >= MinSumRaspr) continue;
      if FoundMarker(p.mIsklZakaz, tzrzp1_gr.cZakaz) continue;
      p.base2.IsklZakaz(tzrzp1_gr.cZakaz);
      InsertMarker(p.mIsklZakaz, tzrzp1_gr.cZakaz);
    }
    while tzrzp1_gr.next;

    p.tzr_zp2 := AG_ITZR_ZP(new(AG_TZR_ZP, Create(p.zp, p.base2)));

    _rep := new(AG_TZR_ZP_Report, Create(p));
    _rep.PrintXLT(TranslatePath('%StartPath%\Xls\AG_TZR_ZP_Rashifrovka.xltm'), false);

    DoneMarker(p.mIsklZakaz, '');
  }

end;

end.
