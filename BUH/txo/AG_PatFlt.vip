#include AG_PatFlt.vih

#component "AGAT"

interface AG_PatFlt;

var _hPatReport: longint;
var _hSiServ: longint;
var _curIdx: longint;
var _items: AG_ISpPatFlt;

procedure setIdx(value: longint);
{
  _curIdx := value;
  afterPositionChange(AG_IPatFlt(self));
}

function cnt: longint;
{
  result := SiServ_GetFiltersCount(_hSiServ);
}

function findByIdx(lIdx: longint): boolean;
{
  result := lIdx >= 0 and lIdx < cnt;
  if result
    setIdx(lIdx);
}

function findByName(sName: string): boolean;
{
  var l: longint = SiServ_FindFilter(_hSiServ, sName);
  result := l >= 0;
  if result
    setIdx(l);
}

function first: boolean;
{
  result := cnt > 0;
  if result
    setIdx(0);
}

function next: boolean;
{
  result := _curIdx + 1 < cnt;
  if result
    setIdx(_curIdx + 1);
}

Constructor Init;
{
  result := false;
}

Constructor Create(hPatReport: longint);
{
  _hPatReport := hPatReport;
  _hSiServ := patRep_GetPatSiServ(_hPatReport);
  result := _hPatReport != 0 and _hSiServ != 0;
  if result
  {
    _items := AG_ISpPatFlt(new(AG_SpPatFlt, Create(_hSiServ, AG_IPatFlt(self))));
    setIdx(0);
  }
}

property Idx: longint read _curIdx;
property Name: string read SiServ_GetFilterName(_hSiServ, _curIdx);
property Mode: word read SiServ_GetFilterMode(_hSiServ, _curIdx);
property WKau: word read SiServ_GetFilterWKau(_hSiServ, _curIdx);
property isExclude: boolean read SiServ_GetFilterExclude(_hSiServ, _curIdx);
property items: AG_ISpPatFlt read _items;

end.
