#component "AGAT"

#include CatFunc.vih
#include pwsDataRepository.vih
#include SvodVedZPSdel.vih
#include pws.vih
#define sum_format '\2p[|-]366`666`666`666`666.88'
#define time_format '\2p[|-]366`666`666`666`666.888'

const
  DOPTBL_PWSWORK = comp(-10);
  WORK_HOURS = 7.33;
end;

interface SvodVedZPSdel;

var
  pwsDR : pwsDataRepository new;
  lpsnMarker: longint;
  lwrkMarker: longint;
  cCurMnPlan: comp;
  CN: Z_STAFFCAT::CatalogsFunctions;

table struct tSortedMarks (
  key  : string,
  cRec : comp,
  qty  : double
) with index (
   i01 = key
);

table struct tPersWorks (
  Nrec        : comp,   // ID
  PersNrec    : comp,   // link to Persons
  TabNmb      : string, // табельный номер
  OrderN      : comp,   // ссылка на заказ
  FIO         : string,
  Prfssn      : string, // професиия
  Grade       : word,   // разряд
  WorkMode    : double, // часовая тарфиная ставка рабочего
  PreSum      : double, // начислено по сдельному наряду
  PrPerSdN    : double, // % премии по сдельному наряду
  PrSumSdN    : double, // сумма премии по сдельному наряду
  NormHrTotal : double, // отработано нормо-часов
  PplHrTotal  : double, // отработанные чел/час всего
  PplHrVred   : double, // отработанные чел/час во вредн усл
  PplHr2      : double, // отработанные чел/час по межразр 2
  PplHr3      : double, // отработанные чел/час по межразр 3
  PplHr4      : double, // отработанные чел/час по межразр 4
  PplHr5      : double, // отработанные чел/час по межразр 5
  DoplPerVred : double, // % допл за вредность
  DoplSumVred : double, // сумма допл за вредность
  PrPerVred   : double, // % премии за вредность
  PrSumVred   : double, // сумма премии за вредность
  Per2mezh    : double, // % за межразр 2
  Per3mezh    : double, // % за межразр 3
  Per4mezh    : double, // % за межразр 4
  Per5mezh    : double, // % за межразр 5
  Sum2mezh    : double, // сумма за межразр 2
  Sum3mezh    : double, // сумма за межразр 3
  Sum4mezh    : double, // сумма за межразр 4
  Sum5mezh    : double, // сумма за межразр 5
  TotalCost   : double  // зп всего
) with index (
  i01 = Nrec (unique, surrogate),
  i02 = PersNrec + OrderN
);

table struct tPersProdTarg (
  Nrec     : comp,
  UpNrec   : comp,
  PersNrec : comp,
  FIO      : string,
  TabNmb   : string,
  Prfssn   : string,
  Grade    : word
) with index (
  i01 = Nrec(unique, surrogate),
  i02 = UpNrec
);

table struct tProdTarg (
  Nrec       : comp,
  PersProdNrec : comp,
  GetJobDate : date,         // дата выдачи задания
  Number     : string,       // наряд
  OrderN     : comp,         // заказ
  DetailName : string,       // наименование детали
  OperNmb    : string,       // номер операции
  SketchNmb  : double,       // номер чертежа
  Qty        : double,       // количество
  JobName    : string,       // наименование работы
  FinishPlan : date,         // срок выполнения плановый
  FinishFact : date,         // срок выполнения фактический
  AVGHOURS   : double,       // отработано время (часов)
  QtyGood    : double,       // количество годных
  FULLHOURS  : double,       // трудоёмкость
  PerVred    : double       // вредность %
) with index (
  i01 = Nrec (unique, surrogate),
  i02 = PersProdNrec
);

table struct tWorksByOrder (
  Nrec          : comp,
  OrderN        : comp,         // заказ
  Kind          : word,         // ВИД ( ГФ, 26/1 или другое)
  NormHrTotal   : double,       // отработано нормо - часов
  NormHrNaryad  : double,       // в т.ч. по наряд - заказу
  PplHrTotal    : double,       // отработанные чел/час всего
  Sdelno        : double,       // сдельно
  PayByTime     : double,       // повременно
  Bonus         : double,       // премия ( месячная )
  BonusKvart    : double,       // премия квартальная
  BonusYear     : double,       // премия годовая
  DoplVred      : double,       // Доплата за вредность сдельщикам
  DoplVredTime  : double,       // доплата за вредность повременщикам
  PrDoplVred    : double,       // премия за доплату за вредность
  DoplMezhRazr  : double,       // доплата за межразрядную разницу
  PersonalBonus : double,       // персональная надбавка / надбавка за высокую квалификацию
  Total         : double
) with index (
  i01 = Nrec (unique, surrogate),
  i02 = Kind + OrderN
);

create view
as select *
from pws brpws, pwsPerson brPerson, klsisopl pwsPersonPayModel, klrejim pwsPersonWorkMode,
     lschet pwsPersonLschet, tSums pwsPersonSums, pwsWork brWork, katstroy pwsWorkKatstroy, tSortedMarks,
     pws, pwsPerson, pwsWork, tSums, tPersWorks, tPersProdTarg, tProdTarg, tWorksByOrder (i02)
where ((
  brpws.nrec          == brPerson.pwsNrec and

  brPerson.PayModel   == pwsPersonPayModel.sisopl and
  brPerson.WorkMode   == pwsPersonWorkMode.rejim and
  brPerson.LSchetNrec == pwsPersonLschet.nrec and
  brPerson.Nrec       == pwsPersonSums.pwsPersonNrec and

  brPerson.Nrec       == brWork.pwsPersonNrec and
  brWork.KatstroyNrec == pwsWorkKatstroy.nrec and

  tPersProdTarg.Nrec  == tProdTarg.PersProdNrec
));

create view vApp
var _persnrec: comp;
as select *
from Persons, Appointments
where ((
  _persnrec           == Persons.nrec and
  Persons.APPOINTCUR  == Appointments.nrec
));

create view vPodr
var _pwsnrec: comp;
as select *
from katpodr
where ((
  _pwsnrec == katpodr.nrec
));

function GetRepMonth: String;
{
  if getfirst pws = tsOk { };
  result := datetostr(pws.EndDate, 'Month');
}

function GetRepYear: String;
{
  if getfirst pws = tsOk { };
  result := datetostr(pws.EndDate, 'YYYY') + ' г.';
}

function GetRepPodr: String;
{
  if getfirst pws != tsOk { message('Не найден документ') };
  vPodr._pwsnrec := pws.PodrNrec;
  if vPodr.getfirst katpodr != tsOk { };
  result := vPodr.katpodr.name;
}

datastream dsRep
(
  [RepMonth] GetRepMonth;
  [RepYear]  GetRepYear;
  [RepPodr]  GetRepPodr;
  table tPersWorks
  (
    [TabNmb]      tPersWorks.TabNmb;
    [OrderName]   if(getanykau(0, 40, tPersWorks.OrderN),givenanname(1),'');
    [FIO]         tPersWorks.FIO;
    [Prfssn]      tPersWorks.Prfssn;
    [Grade]       tPersWorks.Grade;
    [WorkMode]    tPersWorks.WorkMode;
    [PreSum]      tPersWorks.PreSum;
    [PrPerSdN]    tPersWorks.PrPerSdN;
    [PrSumSdN]    tPersWorks.PrSumSdN;
    [NormHrTotal] tPersWorks.NormHrTotal;
    [PplHrTotal]  tPersWorks.PplHrTotal;
    [PplHrVred]   tPersWorks.PplHrVred;
    [PplHr2]      tPersWorks.PplHr2;
    [PplHr3]      tPersWorks.PplHr3;
    [PplHr4]      tPersWorks.PplHr4;
    [PplHr5]      tPersWorks.PplHr5;
    [DoplPerVred] tPersWorks.DoplPerVred;
    [DoplSumVred] tPersWorks.DoplSumVred;
    [PrPerVred]   tPersWorks.PrPerVred;
    [PrSumVred]   tPersWorks.PrSumVred;
    [Per2mezh]    tPersWorks.Per2mezh;
    [Per3mezh]    tPersWorks.Per3mezh;
    [Per4mezh]    tPersWorks.Per4mezh;
    [Per5mezh]    tPersWorks.Per5mezh;
    [Sum2mezh]    tPersWorks.Sum2mezh;
    [Sum3mezh]    tPersWorks.Sum3mezh;
    [Sum4mezh]    tPersWorks.Sum4mezh;
    [Sum5mezh]    tPersWorks.Sum5mezh;
    [TotalCost]   tPersWorks.TotalCost;
  );
)
end;

datastream dsRepOkl
(
  [RepDate]  GetRepMonth + ' ' + GetRepYear;
  [RepPodr]  GetRepPodr;
  table tPersProdTarg
  (
    [FIO]    GetSurnameWithInitials(tPersProdTarg.FIO);
    [Prfssn] tPersProdTarg.Prfssn;
    [Grade]  tPersProdTarg.Grade;
    [TabNmb] tPersProdTarg.TabNmb;
  );
  table tProdTarg
  (
    [GetJobDate] tProdTarg.GetJobDate;
    [Number]     tProdTarg.Number;
    [OrderN]     if(getanykau(0, 40, tProdTarg.OrderN),givenanname(1),'');
    [DetailName] tProdTarg.DetailName;
    [OperNmb]    tProdTarg.OperNmb;
    [SketchNmb]  tProdTarg.SketchNmb;
    [Qty]        tProdTarg.QTY;
    [JobName]    tProdTarg.JobName;
    [FinishPlan] tProdTarg.FinishPlan;
    [FinishFact] tProdTarg.FinishFact;
    [AVGHOURS]   tProdTarg.AVGHOURS;
    [QtyGood]    tProdTarg.QtyGood;
    [FULLHOURS]  tProdTarg.FULLHOURS;
    [PerVred]    tProdTarg.PerVred;
  );
)
end;

datastream dsRepVed
(
  [RepDate]  'за ' + locase(GetRepMonth) + ' ' + GetRepYear;
  [RepPodr]  ' Цеха ' + GetRepPodr;
  table tWorksByOrder
  (
    [OrderN]        if(getanykau(0, 40, tWorksByOrder.OrderN),givenanname(1),'');
    [Kind]          tWorksByOrder.Kind;
    [NormHrTotal]   tWorksByOrder.NormHrTotal;
    [NormHrNaryad]  tWorksByOrder.NormHrNaryad;
    [PplHrTotal]    tWorksByOrder.PplHrTotal;
    [Sdelno]        tWorksByOrder.Sdelno;
    [PayByTime]     tWorksByOrder.PayByTime;
    [Bonus]         tWorksByOrder.Bonus;
    [BonusKvart]    tWorksByOrder.BonusKvart;
    [BonusYear]     tWorksByOrder.BonusYear;
    [DoplVred]      tWorksByOrder.DoplVred;
    [DoplVredTime]  tWorksByOrder.DoplVredTime;
    [PrDoplVred]    tWorksByOrder.PrDoplVred;
    [DoplMezhRazr]  tWorksByOrder.DoplMezhRazr;
    [PersonalBonus] tWorksByOrder.PersonalBonus;
    [Total]         tWorksByOrder.Total;
  );
)
end;

function GetPayModelName: string;
{
  if getfirst pwsPersonPayModel = tsOk
    result := pwsPersonPayModel.nasisopl
  else
    result := '';
}

function GetWorkModeName: string;
{
  if getfirst pwsPersonWorkMode = tsOk
    result := pwsPersonWorkMode.nrejim
  else
    result := '';
}

function BetweenGrades(PRSN_GR: word; WRK_GR: word): word;
{
  result := 0;
  if PRSN_GR > WRK_GR then
    result := WRK_GR
  else
    result := 0;
}

function LoadPersWorks: boolean;
  {
    var SELGRADE: word;
    result := false;

    // сбор сдельщиков по ФИО и заказам
    _loop pwsWork
    {
      if getfirst pwsPerson where ((pwswork.pwsPersonNrec == pwsPerson.Nrec and (pwsPerson.PayModel = 20))) = tsOk
      {
        if getfirst tpersworks where ((pwsPerson.PersonNrec == tpersworks.PersNrec and pwswork.KatstroyNrec == tPersWorks.OrderN)) != tsOk
        {
          clearbuffer(#tpersworks);
          tPersWorks.TabNmb := pwsPerson.PersonCode;
          tPersWorks.OrderN := pwsWork.KatstroyNrec;
          tPersWorks.FIO := pwsPerson.PersonName;
          tPersWorks.PersNrec := pwsPerson.PersonNrec;
          insert current tPersWorks;
        }
      }
    }

    // цикл для группировки по одинаковым заказам и ФИО
    _loop pwsWork
    {
      if getfirst pwsPerson where ((pwsWork.pwsPersonNrec == pwsPerson.Nrec)) = tsOk
      {
        if getfirst tPersWorks where ((pwsPerson.PersonNrec == tpersworks.PersNrec and pwswork.KatstroyNrec == tpersworks.OrderN)) = tsOk
        {
          vApp._persnrec := tPersWorks.PersNrec;
          if vApp.getfirst Persons = tsOk
            if vApp.getfirst Appointments = tsOk { };
          tPersWorks.Prfssn := CN.GetCatalogsName(vApp.Appointments.post);
          tPersWorks.Grade := pwsPerson.Grade;
          tPersWorks.WorkMode := pwsPerson.SalaryPlan;
          tPersWorks.PreSum := tPersWorks.PreSum + pwsWork.PAYMENTVALUE;
          tPersWorks.PrPerSdN := pwsPerson.BonusPercent;
          tPersWorks.PrSumSdN := tPersWorks.PreSum * tPersWorks.PrPerSdN / 100;
          tPersWorks.NormHrTotal := tPersWorks.NormHrTotal + pwsWork.FullHours;
          SELGRADE := BetweenGrades(tPersWorks.Grade, pwsWork.Grade);
          case SELGRADE of
            2: { tPersWorks.PplHr2 := tPersWorks.PplHr2 + pwsWork.AvgHours; tPersWorks.Per2mezh := pwsWork.QualifPayPercent; tPersWorks.Sum2mezh := tPersWorks.Sum2mezh + pwsWork.QualifPayValue; };
            3: { tPersWorks.PplHr3 := tPersWorks.PplHr3 + pwsWork.AvgHours; tPersWorks.Per3mezh := pwsWork.QualifPayPercent; tPersWorks.Sum3mezh := tPersWorks.Sum3mezh + pwsWork.QualifPayValue; };
            4: { tPersWorks.PplHr4 := tPersWorks.PplHr4 + pwsWork.AvgHours; tPersWorks.Per4mezh := pwsWork.QualifPayPercent; tPersWorks.Sum4mezh := tPersWorks.Sum4mezh + pwsWork.QualifPayValue; };
            5: { tPersWorks.PplHr5 := tPersWorks.PplHr5 + pwsWork.AvgHours; tPersWorks.Per5mezh := pwsWork.QualifPayPercent; tPersWorks.Sum5mezh := tPersWorks.Sum5mezh + pwsWork.QualifPayValue; };
          end;
          tPersWorks.PplHrVred := tPersWorks.PplHrVred + pwsWork.AvgHours;
          tPersWorks.PplHrTotal := tPersWorks.PplHrVred;
          tPersWorks.DoplPerVred := pwsWork.HazardPayPercent;
          tPersWorks.DoplSumVred := tPersWorks.DoplSumVred + pwsWork.HazardPayValue;
          tPersWorks.PrPerVred := pwsPerson.BonusPercent;
          tPersWorks.PrSumVred := tPersWorks.DoplSumVred * tPersWorks.PrPerVred / 100;
          tPersWorks.TotalCost := tPersWorks.PreSum + tPersWorks.PrSumSdN + tPersWorks.DoplSumVred + tPersWorks.PrSumVred + tPersWorks.Sum2mezh + tPersWorks.Sum3mezh + tPersWorks.Sum4mezh + tPersWorks.Sum5mezh;

          update current tpersworks;
        }
      }
    }

    result := true;
}

function LoadProdTarget: boolean;     //Данные по окладникам для производственным заданиям
{
  result := false;

  _loop pwsPerson where pwsPerson.PayModel = 30
  {

    _loop pwsWork where ((pwsPerson.Nrec == pwsWork.pwsPersonNrec))
    {

      clearbuffer(#tPersProdTarg);
      clearbuffer(#tProdTarg);

      if getfirst tPersProdTarg where ((pwsPerson.Nrec == tPersProdTarg.UpNrec)) != tsOk
      {
        tPersProdTarg.UpNrec   := pwsPerson.Nrec;
        tPersProdTarg.TabNmb   := pwsPerson.PersonCode;
        tPersProdTarg.FIO      := pwsPerson.PersonName;
        tPersProdTarg.PersNrec := pwsPerson.PersonNrec;
        tPersProdTarg.Grade    := pwsPerson.Grade;
        vApp._persnrec := tPersProdTarg.PersNrec;
        if vApp.getfirst Persons = tsOk
          if vApp.getfirst Appointments = tsOk { };
        tPersProdTarg.Prfssn   := CN.GetCatalogsName(vApp.Appointments.post);
        insert current tPersProdTarg;
      }

      tProdTarg.PersProdNrec := tPersProdTarg.Nrec;
      tProdTarg.OrderN       := pwsWork.KatstroyNrec;
      tProdTarg.GetJobDate   := pwsWork.JobCreationDate;
      tProdTarg.Number       := pwsWork.Number;
      tProdTarg.DetailName   := pwsWork.KatmarshName;
      tProdTarg.OperNmb      := pwsWork.MarshSpCode;
      tProdTarg.SketchNmb    := pwsWork.KatmarshCode;
      tProdTarg.QTY          := pwsWork.Qty;
      tProdTarg.JobName      := pwsWork.MarshSpName;
      tProdTarg.AVGHOURS     := pwsWork.AvgHours;         // отработано времени (часов)
//    модуль для расчета даты сдачи работ
      var cnt, weekND: longint = 0;
      var dayz: double = 0;
      var datty: date;
      if recordsintable(#tProdTarg) = 0 then
      {
        dayz := 0;
        datty := tProdTarg.GetJobDate;
      }
      else datty := Add_Day(datty, cnt);
      cnt := 0;
      dayz := (dayz + tProdTarg.AVGHOURS) / WORK_HOURS;
      cnt := trunc(dayz);
      tProdTarg.FinishPlan := add_day(datty, cnt);
      tProdTarg.FinishFact := tProdTarg.FinishPlan;
      dayz := (dayz - cnt) * WORK_HOURS;
//    конец модуля дат
      tProdTarg.QtyGood    := pwsWork.Qty;
      tProdTarg.FULLHOURS  := pwsWork.FullHours;
      tProdTarg.PerVred    := pwsWork.HazardPayPercent;
      insert current tProdTarg;
    }
  }
  result := true;
}

function LoadWorksByOrder: boolean;
{
  result := false;

  _loop pwsWork
  {
    if getfirst pwsPerson where ((pwsWork.pwsPersonNrec == pwsPerson.Nrec and (pwsPerson.PayModel = 20 or pwsPerson.PayModel = 30))) = tsOk
    {
      clearbuffer(#tWorksByOrder);

      if getfirst tWorksByOrder where ((pwsWork.Kind == tWorksByOrder.Kind and pwswork.KatstroyNrec == tWorksByOrder.OrderN)) != tsOk
      {
        tWorksByOrder.OrderN := pwsWork.KatstroyNrec;
        tWorksByOrder.Kind := pwsWork.Kind;
        insert current tWorksByOrder;
      }

      tWorksByOrder.NormHrTotal := tWorksByOrder.NormHrTotal + pwsWork.FullHours;            // отработано всего часов
  //    tWorksByOrder.NormHrNaryad := tWorksByOrder.NormHrTotal;                               // отработано в том числе по нар-зак
      tWorksByOrder.PplHrTotal := tWorksByOrder.PplHrTotal + pwsWork.AvgHours;               // отработано человеко/часов

      if pwsPerson.PayModel = 20  // сдельщики (в Галактике сдельщики)
      {
        tWorksByOrder.Sdelno := tWorksByOrder.Sdelno + pwsWork.PaymentValue;
        tWorksByOrder.DoplVred := tWorksByOrder.DoplVred + pwsWork.HazardPayValue;
      }
      if pwsPerson.PayModel = 30  // повременщики (в Галактике окладники)
      {
        tWorksByOrder.PayByTime := tWorksByOrder.PayByTime + pwsWork.PaymentValue;
        tWorksByOrder.DoplVredTime := tWorksByOrder.DoplVredTime + pwsWork.HazardPayValue;
      }

      tWorksByOrder.Bonus := tWorksByOrder.Bonus + pwsWork.FullHours / pwsPerson.WorkedHoursFull * pwsPerson.BonusValue;                // премия месячная
      tWorksByOrder.BonusKvart := tWorksByOrder.BonusKvart + pwsWork.FullHours / pwsPerson.WorkedHoursFull * pwsPerson.BonusQuarValue;  // премия квартальная
      tWorksByOrder.BonusYear := tWorksByOrder.BonusYear + pwsWork.FullHours / pwsPerson.WorkedHoursFull * pwsPerson.BonusYearValue;    // премия годовая
      tWorksByOrder.PrDoplVred := pwsPerson.BonusHzrdPercent / 100 * tWorksByOrder.DoplVred;                                            // премия за вредность
      tWorksByOrder.DoplMezhRazr := tWorksByOrder.DoplMezhRazr + pwsWork.QualifPayValue;                                                // доплата за межразрядку
      tWorksByOrder.PersonalBonus := tWorksByOrder.PersonalBonus +
                                     pwsWork.FullHours / pwsPerson.WorkedHoursFull * pwsPerson.BonusQualif20Value +
                                     pwsPerson.BonusQualif26Value +
                                     pwsPerson.BonusCombineValue; // доп надбавка
      tWorksByOrder.Total := tWorksByOrder.Sdelno + tWorksByOrder.PayByTime + tWorksByOrder.Bonus + tWorksByOrder.BonusKvart + tWorksByOrder.BonusYear + tWorksByOrder.DoplVred + tWorksByOrder.DoplVredTime + tWorksByOrder.PrDoplVred + tWorksByOrder.DoplMezhRazr + tWorksByOrder.PersonalBonus;

      update current tWorksByOrder;
    }
  }
  result := true;
}

procedure ClearTPW;
{
  delete all tPersWorks;
}

procedure ClearPT;
{
  delete all tProdTarg;
  delete all tPersProdTarg;
}

procedure ClearWBO;
{
  delete all tWorksByOrder;
}

procedure addpws(MNPLNRC: comp; WhatLoad: byte);
{

  delete all pws;
  delete all pwsPerson;
  delete all pwsWork;

  pwsDR.LoadPwsByMnplanNrec(MNPLNRC);

  case WhatLoad of
    1: LoadPersWorks;
    2: LoadProdTarget;
    3: LoadWorksByOrder;
  end;

}

procedure printreport(WhatRep: byte);
{
  case WhatRep of
    1: RunFReport(dsRep, '', true);
    2: RunFReport(dsRepOkl, '', true);
    3: RunFReport(dsRepVed, '', true);
  end;
}
end.

.LinkForm 'SvodVedNah' Prototype is 'MNPLAN'
.NameInList 'Агат. Сводная ведомость распределения заработной платы производственно-технических работников по основным заказам'
.f "NUL"
.{CheckEnter MNPLAN_LOOP1
.begin
  runinterface(AGAT::SelectNaryad, comp(_MNRec));
end.
.{CheckEnter SPMNPL_LOOP1
.}
.{CheckEnter OBJACCT_IN_LOOP
.{CheckEnter SPOBJACC_IN_LOOP
.{CheckEnter SPOBJACC_CURIN_LOOP
.}
.}
.}
.{CheckEnter OBJACCT_OUT_LOOP
.{CheckEnter SPOBJACC_CUROUT_LOOP
.{CheckEnter SPOBJACC_OUT_LOOP
.}
.}
.}
.}
.endform

.LinkForm 'ProdZadan' Prototype is 'MNPLAN'
.NameInList 'Агат. Производственные задания рабочим'
.f "NUL"
.{CheckEnter MNPLAN_LOOP1
.begin
  runinterface(AGAT::MakeProdTarg, comp(_MNRec));
end.
.{CheckEnter SPMNPL_LOOP1
.}
.{CheckEnter OBJACCT_IN_LOOP
.{CheckEnter SPOBJACC_IN_LOOP
.{CheckEnter SPOBJACC_CURIN_LOOP
.}
.}
.}
.{CheckEnter OBJACCT_OUT_LOOP
.{CheckEnter SPOBJACC_CUROUT_LOOP
.{CheckEnter SPOBJACC_OUT_LOOP
.}
.}
.}
.}
.endform

.LinkForm 'VedomRaspred' Prototype is 'MNPLAN'
.NameInList 'Агат. Ведомость распределения основной заработной платы по заказам'
.f "NUL"
.{CheckEnter MNPLAN_LOOP1
.begin
  runinterface(AGAT::VedRaspOsnZP, comp(_MNRec));
end.
.{CheckEnter SPMNPL_LOOP1
.}
.{CheckEnter OBJACCT_IN_LOOP
.{CheckEnter SPOBJACC_IN_LOOP
.{CheckEnter SPOBJACC_CURIN_LOOP
.}
.}
.}
.{CheckEnter OBJACCT_OUT_LOOP
.{CheckEnter SPOBJACC_CUROUT_LOOP
.{CheckEnter SPOBJACC_OUT_LOOP
.}
.}
.}
.}
.endform
