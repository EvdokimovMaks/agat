  #component "AGAT"

#include SvodVedZPSdel.vih

interface VedRaspOsnZP 'Формирование ведомости распределения основной заработной платы по заказам';
show(,,65,5);

const
  MARK_NAME = 'MNPLmarkers';
end;

var
  SV: AGAT::SvodVedZPSdel;
  selnarady: string;
  M, L: longint;
  i: word;
  NarNrec: comp;

create view vMNPL
as select *
from mnplan
where ((
  NarNrec == mnplan.nrec
));

procedure SetStrNar;
{
  case GetMarkerCount(M) of
    0: selnarady := 'Укажите сдельный наряд';
    1: {
         GetMarker(M, 0, NarNrec);
         if vMNPL.getfirst mnplan = tsOk { };
         selnarady := vMNPL.mnplan.name;
       }
    else selnarady := 'Выбрано ' + GetMarkerCount(M) + ' сдельных наряда';
  end;
}

screen sc1;
fields
  selnarady: protect, pickbutton;

buttons
  cmMakeRep;
  cmCancel;

<<

  Сдельные наряды .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <. Сформировать .>                             <. Отмена .>
>>
end;

handleevent
cminit:
{
  NarNrec := 0;
  M := InitMarker(MARK_NAME, sizeof(comp), 100, 10);
  SetStrNar;
}
cmpick:
{
  if curfield = #selnarady then
  {
    L := 0;
    DoneMarker(M, MARK_NAME);
    if RunInterface(Naryady, L) = cmDefault
      M := L
    else
      M := InitMarker(MARK_NAME, sizeof(comp), 100, 10);
    SetStrNar;
  }
}
cmMakeRep:
{
  if GetMarkerCount(M) = 0 then
  {
    message('Не выбраны сдельные наряды');
    exit;
  }
  SV.ClearWBO;
  for (i:=0; i<GetMarkerCount(M); i++)
  {
    GetMarker(M, i, NarNrec);
    SV.addPws(NarNrec, GetMarkerCount(M), 3);
  }
  SV.printreport(3);
}
cmCancel:
{
  exit;
}
cmDelOnProtect:
{
  ClearMarker(M);
  selnarady := 'Укажите сдельный наряд';
  ReReadRecord;
}
end;

end.

VipInterface UserReport_VROZP implements IUserReport Licensed(free);
Interface UserReport_VROZP;
  create view;
  procedure Run;
  {
    runinterfacenomodal(AGAT::VedRaspOsnZP);
  }

  function GetReportName: String;
  {
    GetReportName := 'Ведомость распределения основной заработной платы по заказам';
  }

  function GetGroupName (Level : Word) : String;
  {
    Level := Level;
    GetGroupName := '';
  }

  function GetPriority : Integer;
  {
    GetPriority := 0;
  }

  function VisibleInModule(Ind : Byte) : String;
  {
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'MANUFPLAN';
    end;
  }
end.
