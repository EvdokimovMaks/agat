#component "AGAT"

#include pwsDataRepository.vih

const
  DOPTBL_PWSWORK = comp(-10);
end;

interface pwsDataRepository;
  create view
  as select *
  from pws, pwsPerson, pwsWork, mnplan, spmnplan, spmnpl, valspmnp, dopinfo;

  function ClearPwsWorks(aPwsPersonNrec: comp): boolean;
  {
    result := false;
    delete all pwsWork where ((aPwsPersonNrec == pwsWork.pwsPersonNrec));
    result := true;
  }

  function ClearPwsPersons(aPwsNrec: comp): boolean;
  {
    result := false;
    _loop pwsPerson where ((aPwsNrec == pwsPerson.pwsNrec))
    {
      if (not ClearPwsWorks(pwsPerson.Nrec)) exit;
      delete current pwsPerson;
    }
    result := true;
  }

  function LoadPws(aMnPlanNrec: comp; var aPwsNrec: comp): boolean;
  {
    result := false;
    if (getfirst mnplan where ((aMnplanNrec == mnplan.nrec)) = tsOk)
    {
      var _doUpdate: boolean;
      _doUpdate := false;
      if (getfirst pws where ((aPwsNrec == pws.nrec)) = tsOk)
        _doUpdate := true
      else
        clearbuffer(#pws);
      pws.MnplanNrec := mnplan.nrec;
      pws.Number     := mnplan.number;
      pws.Name       := mnplan.name;
      pws.PeriodNrec := mnplan.canval1;
      pws.PodrNrec   := mnplan.canval2;
      pws.StartDate  := mnplan.startdate;
      pws.EndDate    := mnplan.enddate;
      if _doUpdate
        update current pws
      else
        insert current pws;
      aPwsNrec := pws.Nrec;
      result := true;
    }
  }

  function LoadPwsWorks(aPwsNrec: comp): boolean;
  {
    result := false;

    insert pwsWork (SpmnplNrec,
                    ValspmnpNrec,
                    pwsPersonNrec,
                    Number,
                    JobCreationDate,
                    JobFinishDate,
                    Kind,
                    KatstroyNrec,
                    KatmarshNrec,
                    KatmarshName,
                    KatmarshCode,
                    MarshSpNrec,
                    MarshSpName,
                    MarshSpCode,
                    Grade,
                    Qty,
                    PieceHours,
                    PrepareHours,
                    StdHours,
                    FullHours,
                    AvgHours,
                    Koeff,
                    Price,
                    Tarif,
                    PaymentValue,
                    HazardPayPercent,
                    HazardPayValue,
                    QualifPayPercent,
                    QualifPayValue)
    select spl.nrec,          //SpmnplNrec
           vsp.nrec,          //ValspmnpNrec
           pp.nrec,           //pwsPersonNrec
           spl.lastuser,      //Number
           spl.startdate,     //JobCreationDate
           spl.enddate,       //JobFinishDate
           spl.cval1,         //Kind
           spl.canval4,       //KatstroyNrec
           spl.canval5,       //KatmarshNrec
           dopinfo.sfld[1],   //KatmarshName,
           dopinfo.sfld[2],   //KatmarshCode,
           spl.canval6,       //MarshSpNrec
           dopinfo.sfld[3],   //MarshSpName,
           dopinfo.sfld[4],   //MarshSpCode,
           spl.razr,          //Grade
           vsp.kol,           //Qty
           vsp.price,         //PieceHours
           vsp.vprice,        //PrepareHours
           vsp.summa,         //StdHours
           vsp.kolfield5,     //FullHours
           vsp.kolfact,       //AvgHours
           vsp.pricefact,     //Koeff
           vsp.kolfield6,     //Price
           vsp.summafact,     //Tarif
           vsp.kolfield7,     //PaymentValue
           vsp.kolfield1,     //HazardPayPercent
           vsp.kolfield2,     //HazardPayValue
           vsp.kolfield3,     //QualifPayPercent
           vsp.kolfield4      //QualifPayValue
    from pwsPerson pp, spmnpl spl, valspmnp vsp, dopinfo
    where ((
      aPwsNrec        /== pp.pwsNrec and
      pp.SpmnplanNrec /== spl.cSpmnplan and
      WKOLAN_WORK     /== spl.wkolan and
      spl.nrec         == vsp.cspmnpl and
      0                == vsp.num and
      spl.nrec         == dopinfo.cperson and
      DOPTBL_PWSWORK   == dopinfo.cdoptbl and (dopinfo.ffldsum[5] = 0)
    ));

    result := true;
  }

  function LoadPwsPersons(aPwsNrec: comp): boolean;
  {
    result := false;

    insert pwsPerson (SpmnplanNrec,
                      pwsNrec,
                      PersonNrec,
                      PersonName,
                      PersonCode,
                      LSchetNrec,
                      PayModel,
                      Grade,
                      WorkMode,
                      BalanceHoursPlan,
                      BalanceHoursFact,
                      WorkedHoursFull,
                      SalaryPlan,
                      SalaryFact,
                      RatePercent,
                      PaymentValue,
                      HazardPayValue,
                      QualifPayValue,
                      BonusPercent,
                      BonusValue,
                      BonusHzrdPercent,
                      BonusHzrdValue,
                      BonusQualif20Value,
                      BonusQualif26Value,
                      BonusCombineValue,
                      BonusQuarPercent,
                      BonusQuarValue,
                      BonusYearPercent,
                      BonusYearValue)
    select spm.nrec,               //SpmnplanNrec
           aPwsNrec,               //pwsNrec
           spm.cizd,               //PersonNrec
           p.fio,                  //PersonName
           p.tabnmb,               //PersonCode
           spm.canval2,            //LSchetNrec
           spl.sisopl,             //PayModel
           spl.razr,               //Grade
           spl.codtar,             //WorkMode
           vsp.kol,                //BalanceHoursPlan
           vsp.price,              //BalanceHoursFact
           vsp.vprice,             //WorkedHoursFull
           vsp.summa,              //SalaryPlan
           vsp.kolfield5,          //SalaryFact
           vsp.kolfact,            //RatePercent
           vsp.pricefact,          //PaymentValue
           vsp.kolfield6,          //HazardPayValue
           vsp.summafact,          //QualifPayValue
           vsp.kolfield7,          //BonusPercent
           vsp.kolfield1,          //BonusValue
           vsp.kolfield2,          //BonusHzrdPercent
           vsp.kolfield3,          //BonusHzrdValue
           vsp.kolfield4,          //BonusQualif20Value
           vsp1.kolfield5,         //BonusQualif26Value
           vsp1.kolfact,           //BonusCombineValue
           vsp1.kol,               //BonusQuarPercent
           vsp1.price,             //BonusQuarValue
           vsp1.vprice,            //BonusYearPercent
           vsp1.summa              //BonusYearValue
    from pws, spmnplan spm, persons p, spmnpl spl, valspmnp vsp, valspmnp vsp1
    where ((
      aPwsNrec       /== pws.nrec      and
      pws.MnplanNrec /== spm.cmnplan   and
      spm.cizd        == p.nrec        and
      spm.nrec        == spl.cspmnplan and
      WKOLAN_PERSON   == spl.wkolan    and
      spl.nrec        == vsp.cspmnpl   and
      0               == vsp.num       and
      spl.nrec        == vsp1.cspmnpl  and
      1               == vsp1.num
    ));

    result := true;
  }

  function LoadPwsByMnplanNrec(aMnplanNrec: comp): comp;
  {
    result := 0;
    if getfirst pws where ((aMnplanNrec == pws.mnplanNrec)) = tsOk
    {
      if (not ClearPwsPersons(pws.Nrec)) exit;
      delete current pws;
    }
    var c: comp; c := 0;
    if (LoadPws(aMnplanNrec, c))
    {
      result := c;
      LoadPwsPersons(c);
      LoadPwsWorks(c);
    }
  }

  function SavePwsWorks(aPwsPersonNrec: comp): boolean;
  {
    result := false;

    var _doUpdate: boolean;

    if (getfirst pwsPerson where ((aPwsPersonNrec == pwsPerson.Nrec)) != tsOk) exit;
    if (getfirst spmnplan where ((pwsPerson.SpmnplanNrec == spmnplan.nrec)) != tsOk) exit;

    //удаляем работы
    _loop spmnpl where ((spmnplan.nrec == spmnpl.cspmnplan and WKOLAN_WORK == spmnpl.wkolan))
    {
      if getfirst pwsWork where (( aPwsPersonNrec == pwsWork.pwsPersonNrec and (pwsWork.spmnplNrec = spmnpl.nrec) )) != tsOk
      {
        delete all valspmnp where ((spmnpl.nrec == valspmnp.cspmnpl));
        delete all dopinfo where ((spmnpl.nrec == dopinfo.cperson and DOPTBL_PWSWORK == dopinfo.cdoptbl));
        //delete all allmemo where ((11071 == allmemo.wtable and spmnpl.nrec == allmemo.crec));
        delete current spmnpl;
      }
    }

    //обновляем, создаем новые работы
    _loop pwsWork where ((aPwsPersonNrec == pwsWork.pwsPersonNrec))
    {
      //ищем spmnpl
      if getfirst spmnpl where ((pwsWork.SpMnplNrec == spmnpl.nrec)) != tsOk
      {
        clearbuffer(#spmnpl);
        spmnpl.cspmnplan := spmnplan.nrec;
        spmnpl.wkolan    := WKOLAN_WORK;
        spmnpl.cRoleAn4  := 0001000000000008h; //роль "Объекты строительства"
        spmnpl.wKodGr4   := 40;                //кау Объекты строительства
        spmnpl.cRoleAn5  := 40019D1AB8E98075h; //роль "Техмаршрут"
        spmnpl.wKodGr5   := 24;                //кау маршрутная карта
        spmnpl.cRoleAn6  := 400116C65E83106Ch; //роль "Технологическая операция"
        spmnpl.wKodGr6   := 61;                //кау Позиции маршрутных карт
        spmnpl.cRoleAn1  := spmnplan.cRoleAn1;
        spmnpl.wKodGr1   := spmnplan.wKodGr1;
        spmnpl.cAnVal1   := spmnplan.cAnVal1;
        spmnpl.cRoleAn2  := spmnplan.cRoleAn2;
        spmnpl.wKodGr2   := spmnplan.wKodGr2;
        spmnpl.cAnVal2   := spmnplan.cAnVal2;
        spmnpl.cRoleAn3  := spmnplan.cRoleAn3;
        spmnpl.wKodGr3   := spmnplan.wKodGr3;
        spmnpl.cAnVal3   := spmnplan.cAnVal3;
        spmnpl.wKodGr8   := spmnplan.wKodGr4;
        spmnpl.cAnVal8   := spmnplan.cAnVal4;
        spmnpl.typeizd   := spmnplan.TypeIzd;
        spmnpl.cRoleIzd  := spmnplan.cRoleIzd;
        spmnpl.cIzd      := spmnplan.cIzd;
        spmnpl.cOtpEd    := spmnplan.cOtpEd;
        spmnpl.NumSort   := spmnplan.NumSort;
        spmnpl.Number    := spmnplan.Number;
        spmnpl.cSloj     := spmnplan.cSloj;
        spmnpl.cMnPlan   := spmnplan.cmnplan;
        _doUpdate := false
      }
      else
        _doUpdate := true;

      //вносим изменения в spmnpl
      spmnpl.lastuser   := pwsWork.Number;
      spmnpl.startdate  := pwsWork.JobCreationDate;
      spmnpl.enddate    := pwsWork.JobFinishDate;
      spmnpl.cval1      := pwsWork.Kind;
      spmnpl.canval4    := pwsWork.KatstroyNrec;
      spmnpl.canval5    := pwsWork.KatmarshNrec;
      spmnpl.canval6    := pwsWork.MarshSpNrec;
      spmnpl.razr       := pwsWork.Grade;

      //сохраняем изменения в spmnpl
      if (_doUpdate)
      {
        update current spmnpl;
      }
      else
      {
        insert current spmnpl;
        update current pwsWork set pwsWork.SpmnplNrec := spmnpl.nrec;
      }

      //пишем доп поля в dopinfo
      if getfirst dopinfo where ((pwsWork.SpmnplNrec == dopinfo.cperson and DOPTBL_PWSWORK == dopinfo.cdoptbl and (dopinfo.ffldsum[5]=0) )) != tsOk
      {
        clearbuffer(#dopinfo);
        dopinfo.cperson := pwsWork.SpmnplNrec;
        dopinfo.cdoptbl := DOPTBL_PWSWORK;
        dopinfo.ffldsum[5] := 0;
        insert current dopinfo;
      }
      dopinfo.sfld[1] := pwsWork.KatmarshName;
      dopinfo.sfld[2] := pwsWork.KatmarshCode;
      dopinfo.sfld[3] := pwsWork.MarshspName;
      dopinfo.sfld[4] := pwsWork.MarshspCode;
      update current dopinfo;

      //ищем valspmnp
      if getfirst valspmnp where ((spmnpl.nrec == valspmnp.cspmnpl and 0 == valspmnp.num)) != tsOk
      {
        clearbuffer(#valspmnp);
        valspmnp.cspmnpl := spmnpl.nrec;
        valspmnp.num := 0;
        _doUpdate := false;
      }
      else
        _doUpdate := true;

      //вносим изменения в valspmnp
      valspmnp.kol           := pwsWork.Qty;
      valspmnp.price         := pwsWork.PieceHours;
      valspmnp.vprice        := pwsWork.PrepareHours;
      valspmnp.summa         := pwsWork.StdHours;
      valspmnp.kolfield5     := pwsWork.FullHours;
      valspmnp.kolfact       := pwsWork.AvgHours;
      valspmnp.pricefact     := pwsWork.Koeff;
      valspmnp.kolfield6     := pwsWork.Price;
      valspmnp.summafact     := pwsWork.Tarif;
      valspmnp.kolfield7     := pwsWork.PaymentValue;
      valspmnp.kolfield1     := pwsWork.HazardPayPercent;
      valspmnp.kolfield2     := pwsWork.HazardPayValue;
      valspmnp.kolfield3     := pwsWork.QualifPayPercent;
      valspmnp.kolfield4     := pwsWork.QualifPayValue;

      //сохраняем изменения в valspmnp
      if (_doUpdate)
      {
        update current valspmnp;
      }
      else
      {
        insert current valspmnp;
        update current pwsWork set pwsWork.ValspmnpNrec := valspmnp.nrec;
      }

    }

    result := true;
  }

  function SavePwsPersons(aPwsNrec: comp): boolean;
  {
    result := false;

    var _doUpdate: boolean;

    if (getfirst pws where ((aPwsNrec == pws.nrec)) != tsOk) exit;

    //Создаем, обновляем сотрудников
    _loop pwsPerson where ((aPwsNrec == pwsPerson.pwsNrec))
    {
      //ищем spmnplan
      if getfirst spmnplan where ((pwsPerson.SpmnplanNrec == spmnplan.nrec)) != tsOk
      {
        _doUpdate := false;
        clearbuffer(#spmnplan);
        if getfirst mnplan where ((pws.MnplanNrec == mnplan.nrec)) = tsOk
        {
          spmnplan.cmnplan  := mnplan.nrec;
          spmnplan.croleizd := coGetTune('SYSTEMANALIT.ROLEEMPLOYEE'); //роль "сотрудник"
          spmnplan.typeizd  := 92;
          spmnplan.csloj    := mnplan.csloj;
        }
      }
      else
        _doUpdate := true;

      //вносим изменения в spmnplan
      spmnplan.cizd    := pwsPerson.PersonNrec;
      spmnplan.canval2 := pwsPerson.LSchetNrec;

      //сохраняем изменения spmnplan
      if (_doUpdate)
      {
        update current spmnplan;
      }
      else
      {
        insert current spmnplan;
        update current pwsPerson set pwsPerson.SpmnplanNrec := spmnplan.nrec;
      }

      //ищем spmnpl
      if getfirst spmnpl where ((spmnplan.nrec == spmnpl.cspmnplan and WKOLAN_PERSON == spmnpl.wkolan)) != tsOk
      {
        clearbuffer(#spmnpl);
        spmnpl.cspmnplan := spmnplan.nrec;
        spmnpl.wkolan    := WKOLAN_PERSON;
        spmnpl.cRoleAn4  := 40011833CEBAAF8Dh; //роль "потребность в трудовых ресурсах"
        spmnpl.wKodGr4   := 38;
        spmnpl.cAnVal4   := spmnplan.cmnplan;
        spmnpl.cRoleAn1  := spmnplan.cRoleAn1;
        spmnpl.wKodGr1   := spmnplan.wKodGr1;
        spmnpl.cAnVal1   := spmnplan.cAnVal1;
        spmnpl.cRoleAn2  := spmnplan.cRoleAn2;
        spmnpl.wKodGr2   := spmnplan.wKodGr2;
        spmnpl.cAnVal2   := spmnplan.cAnVal2;
        spmnpl.cRoleAn3  := spmnplan.cRoleAn3;
        spmnpl.wKodGr3   := spmnplan.wKodGr3;
        spmnpl.cAnVal3   := spmnplan.cAnVal3;
        spmnpl.wKodGr8   := spmnplan.wKodGr4;
        spmnpl.cAnVal8   := spmnplan.cAnVal4;
        spmnpl.typeizd   := spmnplan.TypeIzd;
        spmnpl.cRoleIzd  := spmnplan.cRoleIzd;
        spmnpl.cIzd      := spmnplan.cIzd;
        spmnpl.cOtpEd    := spmnplan.cOtpEd;
        spmnpl.NumSort   := spmnplan.NumSort;
        spmnpl.Number    := spmnplan.Number;
        spmnpl.cSloj     := spmnplan.cSloj;
        spmnpl.cMnPlan   := spmnplan.cmnplan;
        _doUpdate := false
      }
      else
        _doUpdate := true;

      //вносим изменения в spmnpl
      spmnpl.sisopl := pwsPerson.PayModel;
      spmnpl.razr   := pwsPerson.Grade;
      spmnpl.codtar := pwsPerson.WorkMode;

      //сохраняем изменения в spmnpl
      if (_doUpdate)
      {
        update current spmnpl;
      }
      else
      {
        insert current spmnpl;
      }

      //ищем valspmnp
      if getfirst valspmnp where ((spmnpl.nrec == valspmnp.cspmnpl and 0 == valspmnp.num)) != tsOk
      {
        clearbuffer(#valspmnp);
        valspmnp.cspmnpl := spmnpl.nrec;
        valspmnp.num := 0;
        _doUpdate := false;
      }
      else
        _doUpdate := true;

      //вносим изменения в valspmnp
      valspmnp.kol       := pwsPerson.BalanceHoursPlan;
      valspmnp.price     := pwsPerson.BalanceHoursFact;
      valspmnp.vprice    := pwsPerson.WorkedHoursFull;
      valspmnp.summa     := pwsPerson.SalaryPlan;
      valspmnp.kolfield5 := pwsPerson.SalaryFact;
      valspmnp.kolfact   := pwsPerson.RatePercent;
      valspmnp.pricefact := pwsPerson.PaymentValue;
      valspmnp.kolfield6 := pwsPerson.HazardPayValue;
      valspmnp.summafact := pwsPerson.QualifPayValue;
      valspmnp.kolfield7 := pwsPerson.BonusPercent;
      valspmnp.kolfield1 := pwsPerson.BonusValue;
      valspmnp.kolfield2 := pwsPerson.BonusHzrdPercent;
      valspmnp.kolfield3 := pwsPerson.BonusHzrdValue;
      valspmnp.kolfield4 := pwsPerson.BonusQualif20Value;
      //сохраняем изменения в valspmnp
      if (_doUpdate)
      {
        update current valspmnp;
      }
      else
      {
        insert current valspmnp;
      }

      //ищем valspmnp 1
      if getfirst valspmnp where ((spmnpl.nrec == valspmnp.cspmnpl and 1 == valspmnp.num)) != tsOk
      {
        clearbuffer(#valspmnp);
        valspmnp.cspmnpl := spmnpl.nrec;
        valspmnp.num := 1;
        _doUpdate := false;
      }
      else
        _doUpdate := true;

      //вносим изменения в valspmnp 1
      valspmnp.kol       := pwsPerson.BonusQuarPercent;
      valspmnp.price     := pwsPerson.BonusQuarValue;
      valspmnp.vprice    := pwsPerson.BonusYearPercent;
      valspmnp.summa     := pwsPerson.BonusYearValue;
      valspmnp.kolfield5 := pwsPerson.BonusQualif26Value;
      valspmnp.kolfact   := pwsPerson.BonusCombineValue;
      //сохраняем изменения в valspmnp 1
      if (_doUpdate)
      {
        update current valspmnp;
      }
      else
      {
        insert current valspmnp;
      }

      //обновляем подчиненные работы
      if (not SavePwsWorks(pwsPerson.Nrec)) exit;
    }

    //Удаляем сотрудников
    _loop spmnplan where ((pws.MnplanNrec == spmnplan.cmnplan))
    {
      if getfirst pwsPerson where (( aPwsNrec == pwsPerson.pwsNrec and (pwsPerson.SpmnplanNrec = spmnplan.nrec) )) != tsOk
      {
        _loop spmnpl where ((spmnplan.nrec == spmnpl.cspmnplan and WKOLAN_PERSON == spmnpl.wkolan))
        {
          delete all valspmnp where ((spmnpl.nrec == valspmnp.cspmnpl));
          delete current spmnpl;
        }
        delete current spmnplan;
      }
    }

    result := true;
  }

  function SavePws(aPwsNrec: comp): boolean;
  {
    result := false;
    if getfirst pws where ((aPwsNrec == pws.nrec)) = tsOk
    {
      //Не сохраняем заголовок, т.к. при изменении пользователем поля в заголовке плана,
      //при сохранении заголовка поля в плане перезаписываются
      /*
      if getfirst mnplan where ((pws.MnplanNrec == mnplan.nrec)) = tsOk
      {
        mnplan.nrec      := pws.MnplanNrec;
        mnplan.number    := pws.Number;
        mnplan.name      := pws.Name;
        mnplan.canval1   := pws.PeriodNrec;
        mnplan.canval2   := pws.PodrNrec;
        mnplan.startdate := pws.StartDate;
        mnplan.enddate   := pws.EndDate;
        update current mnplan;
      }
      */
      SavePwsPersons(aPwsNrec);
    }
    result := true;
  }
end.
