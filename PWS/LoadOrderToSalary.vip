#component "AGAT"

#include SvodVedZPSdel.vih
#define sum_format '\2p[|-]366`666`666`666`666.88'
#define time_format '\2p[|-]366`666`666`666`666.888'

interface GetLoadOrderToSalary 'Выбор наряда для загрузки в модуль ЗП' doaccept, escclose;

const
  SDEL_NREC = 00010000000000F7h;
  STATUS_UTV = 00010000000000E2h;
end;

var
  MNPLNRC: comp;

create view
as select *
from mnplan
where ((
  SDEL_NREC == mnplan.CWAYACCOU and
  (mnplan.cstatus = STATUS_UTV)
));

parameters MNPLNRC;

browse br1
table mnplan;
fields
  mnplan.number 'Номер'           : [5], protect;
  mnplan.name   'Сдельные наряды' : [20], protect;
  mnplan.descr  'Дескриптор'      : [5], protect;
end;

handleevent
cminit:
{
  if getfirst mnplan != tsOk { message('Не найдены сдельные наряды.'); exit; };
}
cmDefault:
{
  MNPLNRC := mnplan.nrec; //GetCompParameter()
  RunInterface(LoadOrderToSalary, MNPLNRC);
}
end;
end.

interface LoadOrderToSalary 'Загрузка нарядов из модуля Планирования производства в модуль ЗП';

table struct tRules (
  workKind : word,
  payModel : word,
  fldKind  : word,
  code     : word,
  value    : variant
) with index (
  i01 = workKind + payModel + fldKind + code
);

const
  workkind_00           = 0;
  workkind_20           = 1;
  workkind_96           = 2;
  workkind_26           = 3;
  workkind_91           = 4;

  paymodel_sdeln         = 20;
  paymodel_povr          = 30;
  paymodel_oklad         = 40;

  fld_prnaryad           = 0;
  fld_Bonus              = 1;
  fld_HazardPayValue     = 2;
  fld_QualifPayValue     = 3;
  fld_BonusValue         = 4;
  fld_BonusHzrdValue     = 5;
  fld_BonusQuarValue     = 6;
  fld_BonusYearValue     = 7;
  fld_BonusQualif20Value = 8;
  fld_BonusQualif26Value = 9;
  fld_BonusCombineValue  = 10;

  rulecode_vidopl   = -1;
  rulecode_schet    = -2;

  kaucode_buhstz    = 10016; //2013 Статьи затрат
  kaucode_vidzad    = 0; //2005 Виды задолженности
  kaucode_vidprr    = 0; //2005 Виды прочих расходов
end;

type TPrnaryadBuffer = record as table prnaryad;
type TNardopBuffer   = record as table nardop;
type TZarAnBuffer = record
  cschetd : string[20];
  csubschd: string[20];
  ckaud   : array[1..6] of comp;
  tbld    : array[1..6] of word;
  vidopl  : word;
end;

var
  MnplanNrec: comp;
  SV: AGAT::SvodVedZPSdel;
  nameofpws: string;
parameters MnplanNrec;

create view
as select *
from SYS_NAR, PRNARYAD, NARDOP, tRules, buhschet
where ((
 SYS_NAR.Nrec  == PRNARYAD.Mnrec and
 1             == NARDOP.TZP and
 PRNARYAD.Nrec == NARDOP.Mnrec
));

create view vLS
var _lsnrec: comp;
as select *
from lschet, catalogs
where ((
  _lsnrec         == lschet.nrec and
  lschet.CAPPOINT == catalogs.nrec
));

create view vPodr
var _persnrec: comp;
as select *
from persons, katpodr
where ((
  _persnrec      == persons.nrec and
  persons.galdep == katpodr.nrec
));

create view vKAU
var _ckaunrec: comp;
as select *
from spkau
where ((
  _ckaunrec == spkau.nrec
));

create view vSYSNAR
var _mnen: string;
as select *
from SYS_NAR
where ((
  _mnen == SYS_NAR.NMNEM
));

create view vVIDOPL
var _vidcode: word;
as select *
from klvidopl
where ((
_vidcode == klvidopl.vidoplp
));

function GetVidoplSyscodeByUsercode(aVidoplUserCode: word): word;     //вернуть системный код видопла по пользовательскому коду
{
  vVIDOPL._vidcode := aVidoplUserCode;
  if vVIDOPL.getfirst klvidopl = tsOk
    result := vVIDOPL.klvidopl.vidopl
  else
    result := aVidoplUserCode;
}

procedure InsertPrnaryad(buf: TPrnaryad);
{
  if getfirst PRNARYAD where (( buf.MNREC    == PRNARYAD.MNREC    and
                                buf.CLSCH    == PRNARYAD.CLSCH    and
                                buf.VIDOPL   == PRNARYAD.VIDOPL   and
                                (buf.CSCHETD  = PRNARYAD.CSCHETD  and
                                 buf.CSUBSCHD = PRNARYAD.CSUBSCHD and
                                 buf.CKAUD[1] = PRNARYAD.CKAUD[1] and
                                 buf.CKAUD[2] = PRNARYAD.CKAUD[2] and
                                 buf.CKAUD[3] = PRNARYAD.CKAUD[3] and
                                 buf.CKAUD[4] = PRNARYAD.CKAUD[4]) )) != tsOk
  {
    PRNARYAD.Buffer := buf;
    insert current PRNARYAD;
  }
}

procedure InsertOrSumNardop(buf: TNardopBuffer);
{
  if getfirst NARDOP where ((buf.TZP      == NARDOP.TZP and
                             buf.MNREC    == NARDOP.MNREC and
                             buf.VIDOPL   == NARDOP.VIDOPL and
                             (buf.CSCHETD  = NARDOP.CSCHETD  and
                              buf.CSUBSCHD = NARDOP.CSUBSCHD and
                              buf.CKAUD[1] = NARDOP.CKAUD[1] and
                              buf.CKAUD[2] = NARDOP.CKAUD[2] and
                              buf.CKAUD[3] = NARDOP.CKAUD[3] and
                              buf.CKAUD[4] = NARDOP.CKAUD[4]) )) != tsOk
  {
    NARDOP.buffer := buf;
    insert current NARDOP;
  }
  else
  {
    NARDOP.SUMDOP += buf.SUMDOP;
    update current NARDOP;
  }
}

//#region Rules

procedure ClearRules; { delete all tRules; }

procedure AddRule(aworkKind: word; apayModel: word; afldKind: word; acode: word; avalue: variant);
{
  if getfirst tRules where ((aworkKind == tRules.workKind and
                             aPayModel == tRules.PayModel and
                             aFldKind  == tRules.FldKind and
                             aCode     == tRules.code)) != tsOk
  {
    insert tRules set workKind := aworkKind,
                      payModel := aPayModel,
                      fldKind  := aFldKind,
                      code     := aCode,
                      value    := aValue;
  }
  else
    update current tRules set value := aValue;
}

function RuleExists(aworkKind: word; apayModel: word; afldKind: word; acode: word): boolean;
{
  result := getfirst tRules where ((aworkKind == tRules.workKind and
                                    aPayModel == tRules.PayModel and
                                    aFldKind  == tRules.FldKind and
                                    aCode     == tRules.code)) = tsOk;
}

function GetRuleValue(aworkKind: word; apayModel: word; afldKind: word; acode: word): variant;
{
  if getfirst tRules where ((aworkKind == tRules.workKind and
                             aPayModel == tRules.PayModel and
                             aFldKind  == tRules.FldKind and
                             aCode     == tRules.code)) = tsOk
    result := tRules.value
  else
    result := '';
}

procedure AddRuleVidoplSchet(aworkKind: word; apayModel: word; afldKind: word; aVidopl: word; aSchet: string);
{
  AddRule(aworkKind, apayModel, afldKind, rulecode_vidopl, aVidopl);
  AddRule(aworkKind, apayModel, afldKind, rulecode_schet , aSchet);
}

procedure AddRuleVidoplSchetAn(aworkKind: word; apayModel: word; afldKind: word;
                               aVidopl: word; aSchet: string; aKauCode: word; aKauValue: variant);
{
  AddRuleVidoplSchet(aworkKind, apayModel, afldKind, aVidopl, aSchet);
  AddRule(aworkKind, apayModel, afldKind, aKauCode, aKauValue);
}

procedure InitRules;
{
  //Сумма заработка
  AddRuleVidoplSchetAn(workkind_20, paymodel_sdeln, fld_prnaryad, 100, '20.03', kaucode_buhstz, '20020101');
  AddRuleVidoplSchetAn(workkind_20, paymodel_povr , fld_prnaryad, 101, '20.03', kaucode_buhstz, '20020101');
  AddRuleVidoplSchetAn(workkind_20, paymodel_oklad, fld_prnaryad, 102, '20.03', kaucode_buhstz, '20020101');

  AddRuleVidoplSchet  (workkind_96, paymodel_sdeln, fld_prnaryad, 100, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_povr , fld_prnaryad, 101, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_oklad, fld_prnaryad, 102, '96.02');

  AddRuleVidoplSchetAn(workkind_26, paymodel_sdeln, fld_prnaryad, 100, '26.01', kaucode_buhstz, '26010101');
  AddRuleVidoplSchetAn(workkind_26, paymodel_povr , fld_prnaryad, 101, '26.01', kaucode_buhstz, '26010101');
  AddRuleVidoplSchetAn(workkind_26, paymodel_oklad, fld_prnaryad, 102, '26.01', kaucode_buhstz, '26010101');
  //разве на 26 нужен заказ?

  AddRuleVidoplSchetAn(workkind_91, paymodel_sdeln, fld_prnaryad, 100, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_povr , fld_prnaryad, 101, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_oklad, fld_prnaryad, 102, '91.12', kaucode_vidprr, '9102012201');

  //Премия
  AddRuleVidoplSchetAn(workkind_20, paymodel_sdeln, fld_Bonus, 110, '20.03', kaucode_buhstz, '20020102');
  AddRuleVidoplSchetAn(workkind_20, paymodel_povr , fld_Bonus, 108, '20.03', kaucode_buhstz, '20020102');
  AddRuleVidoplSchetAn(workkind_20, paymodel_oklad, fld_Bonus, 109, '20.03', kaucode_buhstz, '20020102');

  AddRuleVidoplSchet  (workkind_96, paymodel_sdeln, fld_Bonus, 110, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_povr , fld_Bonus, 108, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_oklad, fld_Bonus, 109, '96.02');

  AddRuleVidoplSchetAn(workkind_26, paymodel_sdeln, fld_Bonus, 110, '26.01', kaucode_buhstz, '26010102');
  AddRuleVidoplSchetAn(workkind_26, paymodel_povr , fld_Bonus, 108, '26.01', kaucode_buhstz, '26010102');
  AddRuleVidoplSchetAn(workkind_26, paymodel_oklad, fld_Bonus, 109, '26.01', kaucode_buhstz, '26010102');

  AddRuleVidoplSchetAn(workkind_91, paymodel_sdeln, fld_Bonus, 110, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_povr , fld_Bonus, 108, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_oklad, fld_Bonus, 109, '91.12', kaucode_vidprr, '9102012201');

  //Сумма межразр. надбавки
  AddRuleVidoplSchetAn(workkind_20, paymodel_sdeln, fld_QualifPayValue, 118, '20.03', kaucode_buhstz, '20020108');
  AddRuleVidoplSchetAn(workkind_20, paymodel_povr , fld_QualifPayValue, 118, '20.03', kaucode_buhstz, '20020108');
  AddRuleVidoplSchetAn(workkind_20, paymodel_oklad, fld_QualifPayValue, 118, '20.03', kaucode_buhstz, '20020108');

  AddRuleVidoplSchet  (workkind_96, paymodel_sdeln, fld_QualifPayValue, 118, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_povr , fld_QualifPayValue, 118, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_oklad, fld_QualifPayValue, 118, '96.02');

  AddRuleVidoplSchetAn(workkind_91, paymodel_sdeln, fld_QualifPayValue, 118, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_povr , fld_QualifPayValue, 118, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_oklad, fld_QualifPayValue, 118, '91.12', kaucode_vidprr, '9102012201');

  //Сумма надб. за вредность
  AddRuleVidoplSchetAn(workkind_20, paymodel_sdeln, fld_HazardPayValue, 120, '20.03', kaucode_buhstz, '20020108');
  AddRuleVidoplSchetAn(workkind_20, paymodel_povr , fld_HazardPayValue, 121, '20.03', kaucode_buhstz, '20020108');
  AddRuleVidoplSchetAn(workkind_20, paymodel_oklad, fld_HazardPayValue, 121, '20.03', kaucode_buhstz, '20020108');

  AddRuleVidoplSchet  (workkind_96, paymodel_sdeln, fld_HazardPayValue, 120, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_povr , fld_HazardPayValue, 121, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_oklad, fld_HazardPayValue, 121, '96.02');

  AddRuleVidoplSchetAn(workkind_91, paymodel_sdeln, fld_HazardPayValue, 120, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_povr , fld_HazardPayValue, 121, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_oklad, fld_HazardPayValue, 121, '91.12', kaucode_vidprr, '9102012201');

  //Сумма премия за вредность
  AddRuleVidoplSchetAn(workkind_20, paymodel_sdeln, fld_BonusHzrdValue, 111, '20.03', kaucode_buhstz, '20020108');

  AddRuleVidoplSchet  (workkind_96, paymodel_sdeln, fld_BonusHzrdValue, 111, '96.02');

  AddRuleVidoplSchetAn(workkind_91, paymodel_sdeln, fld_BonusHzrdValue, 111, '91.12', kaucode_vidprr, '9102012201');

  //Персон. надбав. из ФЗП за высок. квалиф. 20 счет
  AddRuleVidoplSchetAn(workkind_20, paymodel_sdeln, fld_BonusQualif20Value, 138, '20.03', kaucode_buhstz, '20020108');
  AddRuleVidoplSchetAn(workkind_20, paymodel_povr , fld_BonusQualif20Value, 138, '20.03', kaucode_buhstz, '20020108');
  AddRuleVidoplSchetAn(workkind_20, paymodel_oklad, fld_BonusQualif20Value, 138, '20.03', kaucode_buhstz, '20020108');

  //Персон. надбав. из ФЗП за высок. квалиф. 26 счет
  AddRuleVidoplSchetAn(workkind_00, paymodel_sdeln, fld_BonusQualif26Value, 138, '26.01', kaucode_buhstz, '26010107');
  AddRuleVidoplSchetAn(workkind_00, paymodel_povr , fld_BonusQualif26Value, 138, '26.01', kaucode_buhstz, '26010107');
  AddRuleVidoplSchetAn(workkind_00, paymodel_oklad, fld_BonusQualif26Value, 138, '26.01', kaucode_buhstz, '26010107');

  //Доплата за Совмещ. проф. и расширение зон 26 счет
  AddRuleVidoplSchetAn(workkind_00, paymodel_sdeln, fld_BonusCombineValue, 117, '26.01', kaucode_buhstz, '26010107');
  AddRuleVidoplSchetAn(workkind_00, paymodel_povr , fld_BonusCombineValue, 117, '26.01', kaucode_buhstz, '26010107');
  AddRuleVidoplSchetAn(workkind_00, paymodel_oklad, fld_BonusCombineValue, 117, '26.01', kaucode_buhstz, '26010107');

  //Сумма кварт. премии
  AddRuleVidoplSchetAn(workkind_20, paymodel_sdeln, fld_BonusQuarValue, 107, '20.03', kaucode_buhstz, '20020103');
  AddRuleVidoplSchetAn(workkind_20, paymodel_povr , fld_BonusQuarValue, 107, '20.03', kaucode_buhstz, '20020103');
  AddRuleVidoplSchetAn(workkind_20, paymodel_oklad, fld_BonusQuarValue, 107, '20.03', kaucode_buhstz, '20020103');

  AddRuleVidoplSchet  (workkind_96, paymodel_sdeln, fld_BonusQuarValue, 107, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_povr , fld_BonusQuarValue, 107, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_oklad, fld_BonusQuarValue, 107, '96.02');

  AddRuleVidoplSchetAn(workkind_91, paymodel_sdeln, fld_BonusQuarValue, 107, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_povr , fld_BonusQuarValue, 107, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_oklad, fld_BonusQuarValue, 107, '91.12', kaucode_vidprr, '9102012201');

  //Сумма год. премии
  AddRuleVidoplSchetAn(workkind_20, paymodel_sdeln, fld_BonusYearValue, 114, '20.03', kaucode_buhstz, '20020103');
  AddRuleVidoplSchetAn(workkind_20, paymodel_povr , fld_BonusYearValue, 114, '20.03', kaucode_buhstz, '20020103');
  AddRuleVidoplSchetAn(workkind_20, paymodel_oklad, fld_BonusYearValue, 114, '20.03', kaucode_buhstz, '20020103');

  AddRuleVidoplSchet  (workkind_96, paymodel_sdeln, fld_BonusYearValue, 114, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_povr , fld_BonusYearValue, 114, '96.02');
  AddRuleVidoplSchet  (workkind_96, paymodel_oklad, fld_BonusYearValue, 114, '96.02');

  AddRuleVidoplSchetAn(workkind_91, paymodel_sdeln, fld_BonusYearValue, 114, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_povr , fld_BonusYearValue, 114, '91.12', kaucode_vidprr, '9102012201');
  AddRuleVidoplSchetAn(workkind_91, paymodel_oklad, fld_BonusYearValue, 114, '91.12', kaucode_vidprr, '9102012201');
}
//#endregion

procedure InitAnZarBuffer(aWorkKind: word; aPaymodel: word; aFldKind: word; var buf: TZarAnBuffer);
{
  //установка счета
  var aSchet: string;
  aSchet := string(GetRuleValue(aWorkKind, aPaymodel, aFldKind, rulecode_schet));
  var k: integer;
  k := pos('.',aSchet+'.');
  buf.cschetd  := substr(aSchet, 1, k-1);
  buf.csubschd := substr(aSchet, k+1, 20);
  //установка кау счета
  if getfirst buhschet where (('8'+buf.cschetd == buhschet.schet and buf.csubsch == buhschet.subsch)) = tsOk
  {
    var i,j: byte;
    for(i:=1;i<=6;i++)
    {
      buf.tbld[i] := buhschet.kodtable[i];
      if RuleExists(aWorkKind, aPaymodel, aFldKind, buf.tbld[i])
        buf.ckaud[i] := GetSpKauByCode(string(GetRuleValue(aWorkKind, aPaymodel, aFldKind, buf.tbld[i])));
      else
      {
        if buf.tbld[i] = 40
          buf.ckaud[i] := pwsWork.KatstroyNrec
        else
          for(j:=1;j<=6;j++) if (buf.tbld[i] = vLS.lschet.tbld[j]) { buf.ckaud[i] := vLS.lschet.ckaud[j]; break; }
      }
    }
  }
  //Установка вида оплаты
  if RuleExists(aWorkKind, aPaymodel, aFldKind, rulecode_vidopl)
    buf.vidopl := word(GetRuleCode(aWorkKind, aPaymodel, aFldKind, rulecode_vidopl));
}

procedure InitNardopBuffer(var buf: TNardopBuffer);
{
  ClearAdvRecord(buf);
  buf.TZP      := 1;
  buf.MNREC    := PRNARYAD.Nrec;
  buf.CSCHETD  := PRNARYAD.cschetd;
  buf.CSUBSCHD := PRNARYAD.csubschd;
  buf.tbld[1]  := PRNARYAD.tbld[1];
  buf.tbld[2]  := PRNARYAD.tbld[2];
  buf.tbld[3]  := PRNARYAD.tbld[3];
  buf.tbld[4]  := PRNARYAD.tbld[4];
  buf.tbld[5]  := PRNARYAD.tbld[5];
  buf.tbld[6]  := PRNARYAD.tbld[6];
  var i,j: byte;
  for(i:=1;i<=6;i++) {
    if (buf.tbld[i]!=40) {
      for(j:=1;j<=6;j++)
        if buf.tbld[i] = vLS.lschet.tbld[j] {
          buf.ckaud[i] := vLS.lschet.ckaud[j];
          break;
        }
    }
    else
      buf.ckaud[i] := pwsWork.KatstroyNrec;
  }
}

handleevent
cmInit:
{
  ClearBuffer(#SYS_NAR);
  SV.addpws(MnplanNrec, 1, 4);   // это nrec MNPLAN'a (т.е. нашего сдельного наряда)

  var CNT_NAR: integer;
  CNT_NAR := 0;
  _loop SYS_NAR
  {
    CNT_NAR++;
  }
  CNT_NAR := CNT_NAR + 1;

  clearbuffer(#SYS_NAR);
  SYS_NAR.NMNEM     := 'Наряд №'+CNT_NAR;
  SYS_NAR.MNREC     := CNT_NAR;
  SYS_NAR.cex       := pws.PodrNrec;
  SYS_NAR.filialno  := 1;
  SYS_NAR.choice    := 2;
  SYS_NAR.datan     := pws.StartDate;
  SYS_NAR.datok     := pws.EndDate;
  SYS_NAR.SUMMANAR  := 0;
  SYS_NAR.SUMMAPREM := 0;
  insert current SYS_NAR;

  _loop pwsPerson
  {
    vLS._lsnrec := pwsPerson.LSchetNrec;
    if vLS.getfirst lschet != tsOk continue;

    _loop pwsWork where ((pwsPerson.Nrec == pwswork.pwsPersonNrec)) = tsOk     // работы по человеку
    {

      //Заполнение буфера строки наряда
      var PrnaryadBuffer: TPrnaryadBuffer;
      ClearAdvRecord(PrnaryadBuffer);
      PrnaryadBuffer.TPERSON  := pwsPerson.PersonNrec;
      PrnaryadBuffer.mnrec    := SYS_NAR.nrec;
      PrnaryadBuffer.CLSCH    := pwsPerson.LSchetNrec;
      PrnaryadBuffer.tabn     := pwsPerson.PersonCode;
      PrnaryadBuffer.datan    := pws.StartDate;
      PrnaryadBuffer.datok    := pws.EndDate;
      PrnaryadBuffer.MES      := Month(SYS_NAR.datan);
      PrnaryadBuffer.cpodr    := vLS.lschet.CAPPOINT;
      PrnaryadBuffer.filialno := vLS.lschet.kateg;
      PrnaryadBuffer.cexoz    := vLS.lschet.cex;

      var anBuffer: TZarAnBuffer;
      InitAnZarBuffer(pwsWork.Kind, pwsPerson.PayModel, fld_prnaryad, anBuffer);
      PrnaryadBuffer.vidopl   := anBuffer.vidopl;
      PrnaryadBuffer.cschetd  := anBuffer.cschetd;
      PrnaryadBuffer.csubschd := anBuffer.csubschd;
      var i: byte;
      for(i:=1;i<=6;i++) {
        PrnaryadBuffer.tbld[i]  := anBuffer.tbld[i];
        PrnaryadBuffer.ckaud[i] := anBuffer.ckaud[i];
      }
      InsertPrnaryad(PrnaryadBuffer);       //добавляем новый наряд или позиционируем PRNARYAD на существующий, соответствующий буферу

                                            //надбавки, добавляемые общей суммой

      if pwsWork.HazardPayValue <> 0        // надбавка за вредность (+)
      {
        var NardopBuffer: TNardopBuffer;
        InitNardopBuffer(NardopBuffer);
        NardopBuffer.SUMDOP     := pwsWork.HazardPayValue;
        NardopBuffer.PROC       := pwsWork.HazardPayPercent;
        NardopBuffer.VIDOPL     := if(vLS.lschet.sisopl = 20, GetVidoplSyscodeByUsercode(120), GetVidoplSyscodeByUsercode(121));
        if pwsWork.Kind = 0
          NardopBuffer.CKAUD[2] := CKAU_2008;
        InsertOrSumNardop(NardopBuffer);
      }

      if pwsWork.QualifPayValue <> 0        // межразрядная сумма (+)
      {
        var NardopBuffer: TNardopBuffer;
        InitNardopBuffer(NardopBuffer);
        NardopBuffer.SUMDOP     := pwsWork.QualifPayValue;
        NardopBuffer.PROC       := pwsWork.QualifPayPercent;
        NardopBuffer.VIDOPL     := GetVidoplSyscodeByUsercode(118);
        if pwsWork.Kind = 0
          NardopBuffer.CKAUD[2] := CKAU_2008;
        InsertOrSumNardop(NardopBuffer);
      } //межразрядная сумма

      if pwsPerson.BonusValue <> 0          // сумма премии (+)
      {
        var NardopBuffer: TNardopBuffer;
        InitNardopBuffer(NardopBuffer);
        NardopBuffer.SUMDOP   := pwsPerson.BonusValue;
        NardopBuffer.PROC     := pwsPerson.BonusPercent;
        case vLS.lschet.sisopl of
          20: NardopBuffer.VIDOPL := GetVidoplSyscodeByUsercode(110);  //сдельно
          30: NardopBuffer.VIDOPL := GetVidoplSyscodeByUsercode(109);  //повременно
        else  NardopBuffer.VIDOPL := GetVidoplSyscodeByUsercode(108);  //оклад
        end;
        case pwsWork.Kind of       // распределение суммы премий в зависимости от вида работ
          0: NardopBuffer.CKAUD[2] := CKAU_2002;
          2: NardopBuffer.CKAUD[2] := CKAU_2602;                   // 26010101 Должностн
        end;
        InsertOrSumNardop(NardopBuffer);
      } // сумма премии

      if pwsPerson.BonusHzrdValue <> 0      // сумма премии за вредность (+)
      {
        var NardopBuffer: TNardopBuffer;
        ClearAdvRecord(NardopBuffer);
        NardopBuffer.SUMDOP   := pwsPerson.BonusHzrdValue;
        NardopBuffer.PROC     := pwsPerson.BonusHzrdPercent;
        NardopBuffer.VIDOPL   := GetVidoplSyscodeByUsercode(111);
        if vLS.lschet.sisopl = 20 and pwsWork.Kind = 0
          NardopBuffer.CKAUD[2] := CKAU_2008;
        InsertOrSumNardop(NardopBuffer);
      }

      if pwsPerson.BonusQuarValue <> 0      // квартальная премия (+)
      {
        var NardopBuffer: TNardopBuffer;
        ClearAdvRecord(NardopBuffer);
        NardopBuffer.TZP      := 1;
        NardopBuffer.MNREC    := PrnaryadBuffer.Nrec;
        NardopBuffer.CSCHETD  := PrnaryadBuffer.cschetd;
        NardopBuffer.CSUBSCHD := PrnaryadBuffer.csubschd;
        NardopBuffer.VIDOPL   := GetVidoplSyscodeByUsercode(107);
        NardopBuffer.SUMDOP   := pwsPerson.BonusQuarValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;
        NardopBuffer.PROC     := pwsPerson.BonusQuarPercent;
        case pwsWork.Kind of
          0: { // 20.03
            NardopBuffer.tbld[1]  := 40;    // объекты строительства
            NardopBuffer.tbld[2]  := 10016; // статьи затрат
            NardopBuffer.tbld[3]  := vLS.lschet.tbld[3];
            NardopBuffer.tbld[4]  := vLS.lschet.tbld[4];
            NardopBuffer.CKAUD[1] := pwsWork.KatstroyNrec;
            NardopBuffer.CKAUD[2] := CKAU_2003;
            NardopBuffer.CKAUD[3] := vLS.lschet.CKAUD[3];
            NardopBuffer.CKAUD[4] := vLS.lschet.CKAUD[4];
          }
          1: {
            NardopBuffer.tbld[1]  := 1;   // организации
            NardopBuffer.tbld[2]  := 40;  // объекты строительства
            NardopBuffer.tbld[3]  := 14;  // договоры
            NardopBuffer.tbld[4]  := 158; // 2005. Виды задолженности
            NardopBuffer.CKAUD[2] := pwsWork.KatstroyNrec;
          }
        end;
        InsertOrSumNardop(NardopBuffer);
      }


      PRNARYAD.CHASF    := PRNARYAD.CHASF + pwsWork.AvgHours;                                          // часы по факту
      PRNARYAD.KOLDN    := trunc(PRNARYAD.CHASF / 8);
      PRNARYAD.CHASGR   := pwsPerson.BalanceHoursPlan * PRNARYAD.CHASF / pwsPerson.BalanceHoursFact;  // часы по плану
      PRNARYAD.SUMMPREM := pwsPerson.BonusValue * PRNARYAD.CHASF / pwsPerson.BalanceHoursFact;
      PRNARYAD.SUMMA    := pwsPerson.PaymentValue * PRNARYAD.CHASF / pwsPerson.BalanceHoursFact;
      update current PRNARYAD;
    } //if getfirst pwsPerson
  } //_loop pwsWork

  _loop pwsWork                  // цикл для разбивки доплат по заказам
  {
    if getfirst pwsPerson where ((pwswork.pwsPersonNrec == pwsPerson.Nrec)) = tsOk  // все работы по человеку
    { // строки спецификации бух. наряда разбиты по людям и заказам (объектам строительства)
      if getfirst PRNARYAD where ((pwsPerson.PersonCode == PRNARYAD.tabn and (PRNARYAD.CKAUD[1] = pwswork.KatstroyNrec and PRNARYAD.mnrec = SYS_NAR.nrec))) = tsOk then
      {

        if pwsPerson.BonusOther20Value <> 0                  // доп надбавки 20 (+)
        {
          if getfirst NARDOP where ((1 == NARDOP.tzp and PRNARYAD.nrec == NARDOP.mnrec and (NARDOP.vidopl = 46 or NARDOP.vidopl = 23))) != tsOk then
          {
            ClearBuffer(#NARDOP);
            NARDOP.MNREC := PRNARYAD.Nrec;
            NARDOP.CSCHETD := PRNARYAD.cschetd;
            NARDOP.CSUBSCHD := PRNARYAD.csubschd;
            case pwsWork.Kind of
             3: vVIDOPL._vidcode := 138; // 26.перс.надбавка
             4: vVIDOPL._vidcode := 117; // 26.доп.надбавка
            end;
            if vVIDOPL.getfirst klvidopl = tsOk { };
            NARDOP.VIDOPL := vVIDOPL.klvidopl.vidopl;
            NARDOP.SUMDOP := pwsPerson.BonusOtherValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;

            if pwsWork.Kind = 3 or pwsWork.Kind = 4 then
            {
              NARDOP.tbld[1] := 40; // объекты строительства
              NARDOP.tbld[2] := 10016; // статьи затрат
              NARDOP.tbld[3] := vLS.lschet.tbld[3];
              NARDOP.tbld[4] := vLS.lschet.tbld[4];
              NARDOP.CKAUD[1] := pwsWork.KatstroyNrec;        // объект строительства (+)
              NARDOP.CKAUD[2] := CKAU_2601;                   // 26010101 Должностной оклад
              NARDOP.CKAUD[3] := vLS.lschet.CKAUD[3];         // из лицевого счета
              NARDOP.CKAUD[4] := vLS.lschet.CKAUD[4];         // из лицевого счета
            }
            insert current NARDOP;
          }
          else
          {
            NARDOP.SUMDOP += pwsPerson.BonusOtherValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;
            update current NARDOP;
          }
        }


        if pwsPerson.BonusYearValue <> 0                  // годовая премия (+)
        {
          if getfirst NARDOP where ((1 == NARDOP.tzp and PRNARYAD.nrec == NARDOP.mnrec and (NARDOP.vidopl = 166))) != tsOk then
          {
            ClearBuffer(#NARDOP);
            NARDOP.MNREC := PRNARYAD.Nrec;
            NARDOP.CSCHETD := PRNARYAD.cschetd;
            NARDOP.CSUBSCHD := PRNARYAD.csubschd;
            vVIDOPL._vidcode := 114;
            if vVIDOPL.getfirst klvidopl = tsOk { };
            NARDOP.VIDOPL := vVIDOPL.klvidopl.vidopl;
            NARDOP.SUMDOP := pwsPerson.BonusYearValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;
            NARDOP.proc := pwsPerson.BonusYearPercent;

            if pwsWork.Kind = 0  // 20.03
            {
              NARDOP.tbld[1] := 40; // объекты строительства
              NARDOP.tbld[2] := 10016; // статьи затрат
              NARDOP.tbld[3] := vLS.lschet.tbld[3];
              NARDOP.tbld[4] := vLS.lschet.tbld[4];
              NARDOP.CKAUD[1] := pwsWork.KatstroyNrec;
              NARDOP.CKAUD[2] := CKAU_2004;
              NARDOP.CKAUD[3] := vLS.lschet.CKAUD[3];
              NARDOP.CKAUD[4] := vLS.lschet.CKAUD[4];
            }
            if pwsWork.Kind = 1  // 96.02
            {
              PRNARYAD.tbld[1] := 1; // организации
              PRNARYAD.tbld[2] := 40; // объекты строительства
              PRNARYAD.tbld[3] := 14; // договоры
              PRNARYAD.tbld[4] := 158; // 2005. Виды задолженности
              NARDOP.CKAUD[2] := pwsWork.KatstroyNrec;
            }

            insert current NARDOP;
          }
          else
          {
            NARDOP.SUMDOP += pwsPerson.BonusYearValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;
            update current NARDOP;
          }
        }
      }
    }
  }

  _loop PRNARYAD where ((SYS_NAR.nrec == PRNARYAD.mnrec))
  {
    SYS_NAR.SUMMANAR += PRNARYAD.SUMMA;
    SYS_NAR.SUMMAPREM += PRNARYAD.SUMMPREM;
  }

  update current SYS_NAR;
  message('Создан "' + SYS_NAR.NMNEM + '"');
  RunInterface(Z_MP::SYS_NAR, 2);
}
end;

end.
