#component "AGAT"

#include SvodVedZPSdel.vih
#define sum_format '\2p[|-]366`666`666`666`666.88'
#define time_format '\2p[|-]366`666`666`666`666.888'

interface GetLoadOrderToSalary 'Выбор наряда для загрузки в модуль ЗП' doaccept, escclose;

const
  SDEL_NREC = 00010000000000F7h;
  STATUS_UTV = 00010000000000E2h;
end;

var
  MNPLNRC: comp;

create view
as select *
from mnplan
where ((
  SDEL_NREC == mnplan.CWAYACCOU and
  (mnplan.cstatus = STATUS_UTV)
));

parameters MNPLNRC;

browse br1
table mnplan;
fields
  mnplan.number 'Номер'           : [5], protect;
  mnplan.name   'Сдельные наряды' : [20], protect;
  mnplan.descr  'Дескриптор'      : [5], protect;
end;

handleevent
cminit:
{
  if getfirst mnplan != tsOk { message('Не найдены сдельные наряды.'); exit; };
}
cmDefault:
{
  MNPLNRC := mnplan.nrec; //GetCompParameter()
  RunInterface(LoadOrderToSalary, MNPLNRC);
}
end;
end.

interface LoadOrderToSalary 'Загрузка нарядов из модуля Планирования производства в модуль ЗП';
const
  ST_26010101 = 00010000000009D9h; // 26010101 Должностной оклад
  ST_26010102 = 00010000000009DAh; // 26010102 Премия ежемесячная
  ST_20020101 = 000100000000095Ah; // 20020101 Должностной оклад
  ST_20020102 = 000100000000095Bh; // 20020102 Премия ежемесячная
  ST_20020108 = 0001000000000961h; // Прочие выплаты по ОЗП: 20020108
  ST_26010107 = 00010000000009DFh; // Прочие выплаты по ОЗП: 26010107
  ST_20020103 = 000100000000095Ch; // Премия квартальная: 20020103
  ST_20020104 = 000100000000095Dh; // Премия годовая: 20020104
  ST_9102012201 = 0001000000000B57h; //2005. Виды прочих доходов/расходов - Прочие расходы, не имеющие разницы при отражении в бухгалтерском и налоговом учете
end;

type TPrnaryadBuffer = record as table prnaryad;
type TNardopBuffer   = record as table nardop;

var
  MnplanNrec: comp;
  SV: AGAT::SvodVedZPSdel;
  nameofpws: string;
parameters MnplanNrec;

create view
as select *
from SYS_NAR, PRNARYAD, NARDOP
where ((
 SYS_NAR.Nrec  == PRNARYAD.Mnrec and
 1             == NARDOP.TZP and
 PRNARYAD.Nrec == NARDOP.Mnrec
));

create view vLS
var _lsnrec: comp;
as select *
from lschet, catalogs
where ((
  _lsnrec         == lschet.nrec and
  lschet.CAPPOINT == catalogs.nrec
));

create view vPodr
var _persnrec: comp;
as select *
from persons, katpodr
where ((
  _persnrec      == persons.nrec and
  persons.galdep == katpodr.nrec
));

create view vKAU
var _ckaunrec: comp;
as select *
from spkau
where ((
  _ckaunrec == spkau.nrec
));

create view vSYSNAR
var _mnen: string;
as select *
from SYS_NAR
where ((
  _mnen == SYS_NAR.NMNEM
));

create view vVIDOPL
var _vidcode: word;
as select *
from klvidopl
where ((
_vidcode == klvidopl.vidoplp
));

function GetVidoplSyscodeByUsercode(aVidoplUserCode: word): word;     //вернуть системный код видопла по пользовательскому коду
{
  vVIDOPL._vidcode := aVidoplUserCode;
  if vVIDOPL.getfirst klvidopl = tsOk
    result := vVIDOPL.klvidopl.vidopl
  else
    result := aVidoplUserCode;
}

procedure InsertPrnaryad(buf: TPrnaryad);
{
  if getfirst PRNARYAD where (( buf.MNREC    == PRNARYAD.MNREC    and
                                buf.CLSCH    == PRNARYAD.CLSCH    and
                                buf.VIDOPL   == PRNARYAD.VIDOPL   and
                                (buf.CSCHETD  = PRNARYAD.CSCHETD  and
                                 buf.CSUBSCHD = PRNARYAD.CSUBSCHD and
                                 buf.CKAUD[1] = PRNARYAD.CKAUD[1] and
                                 buf.CKAUD[2] = PRNARYAD.CKAUD[2] and
                                 buf.CKAUD[3] = PRNARYAD.CKAUD[3] and
                                 buf.CKAUD[4] = PRNARYAD.CKAUD[4]) )) != tsOk
  {
    PRNARYAD.Buffer := buf;
    insert current PRNARYAD;
  }
}

procedure InsertOrSumNardop(buf: TNardopBuffer);
{
  if getfirst NARDOP where ((buf.TZP      == NARDOP.TZP and
                             buf.MNREC    == NARDOP.MNREC and
                             buf.VIDOPL   == NARDOP.VIDOPL and
                             (buf.CSCHETD  = NARDOP.CSCHETD  and
                              buf.CSUBSCHD = NARDOP.CSUBSCHD and
                              buf.CKAUD[1] = NARDOP.CKAUD[1] and
                              buf.CKAUD[2] = NARDOP.CKAUD[2] and
                              buf.CKAUD[3] = NARDOP.CKAUD[3] and
                              buf.CKAUD[4] = NARDOP.CKAUD[4]) )) != tsOk
  {
    NARDOP.buffer := buf;
    insert current NARDOP;
  }
  else
  {
    NARDOP.SUMDOP += buf.SUMDOP;
    update current NARDOP;
  }
}

procedure InitNardopBuffer(var buf: TNardopBuffer);
{
  ClearAdvRecord(buf);
  buf.TZP      := 1;
  buf.MNREC    := PRNARYAD.Nrec;
  buf.CSCHETD  := PRNARYAD.cschetd;
  buf.CSUBSCHD := PRNARYAD.csubschd;
  buf.tbld[1]  := PRNARYAD.tbld[1];
  buf.tbld[2]  := PRNARYAD.tbld[2];
  buf.tbld[3]  := PRNARYAD.tbld[3];
  buf.tbld[4]  := PRNARYAD.tbld[4];
  buf.tbld[5]  := PRNARYAD.tbld[5];
  buf.tbld[6]  := PRNARYAD.tbld[6];
  var i,j: byte;
  for(i:=1;i<=6;i++) {
    if (buf.tbld[i]!=40) {
      for(j:=1;j<=6;j++)
        if buf.tbld[i] = vLS.lschet.tbld[j] {
          buf.ckaud[i] := vLS.lschet.ckaud[j];
          break;
        }
    }
    else
      buf.ckaud[i] := pwsWork.KatstroyNrec;
  }
}

handleevent
cmInit:
{
  ClearBuffer(#SYS_NAR);
  ClearBuffer(#PRNARYAD);
  ClearBuffer(#NARDOP);
  SV.addpws(MnplanNrec, 1, 4);   // это nrec MNPLAN'a (т.е. нашего сдельного наряда)
  var CNT_NAR: integer;
  CNT_NAR := 0;
  _loop SYS_NAR
  {
    CNT_NAR++;
  }
  CNT_NAR := CNT_NAR + 1;
  insert SYS_NAR set SYS_NAR.NMNEM := 'Наряд №'+CNT_NAR;

  SYS_NAR.MNREC := CNT_NAR;
  sys_nar.cex := pws.PodrNrec;
  sys_nar.filialno := 1;
  sys_nar.choice := 2;
  SYS_NAR.datan := pws.StartDate;
  SYS_NAR.datok := pws.EndDate;

  SYS_NAR.SUMMANAR := 0;
  SYS_NAR.SUMMAPREM := 0;

  _loop pwsWork                  // цикл для загрузки данных
  {
    if getfirst pwsPerson where ((pwswork.pwsPersonNrec == pwsPerson.Nrec)) = tsOk     // работы по человеку
    {

      vLS._lsnrec := pwsPerson.LSchetNrec;
      if vLS.getfirst lschet != tsOk continue;

      //Заполнение буфера строки наряда
      var PrnaryadBuffer: TPrnaryadBuffer;
      ClearAdvRecord(PrnaryadBuffer);
      PrnaryadBuffer.TPERSON  := pwsPerson.PersonNrec;
      PrnaryadBuffer.mnrec    := SYS_NAR.nrec;
      PrnaryadBuffer.CLSCH    := pwsPerson.LSchetNrec;
      PrnaryadBuffer.tabn     := pwsPerson.PersonCode;
      PrnaryadBuffer.datan    := pws.StartDate;
      PrnaryadBuffer.datok    := pws.EndDate;
      PrnaryadBuffer.MES      := Month(SYS_NAR.datan);
      PrnaryadBuffer.cpodr    := vLS.lschet.CAPPOINT;
      PrnaryadBuffer.filialno := vLS.lschet.kateg;
      PrnaryadBuffer.cexoz    := vLS.lschet.cex;
      case vLS.lschet.sisopl of
        20: PrnaryadBuffer.vidopl := GetVidoplSyscodeByUsercode(100); // Сдельная оплата (тсс-1 или тсс-2)
        30: PrnaryadBuffer.vidopl := GetVidoplSyscodeByUsercode(101); // повременная оплата
        40: PrnaryadBuffer.vidopl := GetVidoplSyscodeByUsercode(102); // оклад
      end;
      case pwsWork.Kind of       // распределение основных выплат в зависимости от вида работ
        0: {                                      // 20.03
          PrnaryadBuffer.cschetd  := '20';
          PrnaryadBuffer.csubschd := '03';
          PrnaryadBuffer.tbld[1]  := 40; // объекты строительства
          PrnaryadBuffer.tbld[2]  := 10016; // статьи затрат
          PrnaryadBuffer.tbld[3]  := vLS.lschet.tbld[3];
          PrnaryadBuffer.tbld[4]  := vLS.lschet.tbld[4];
          PrnaryadBuffer.CKAUD[1] := pwsWork.KatstroyNrec;
          PrnaryadBuffer.CKAUD[2] := CKAU_2001;
          PrnaryadBuffer.CKAUD[3] := vLS.lschet.CKAUD[3];
          PrnaryadBuffer.CKAUD[4] := vLS.lschet.CKAUD[4];
        }
        1: {                                      // 96.02 Гарантийный ремонт
          PrnaryadBuffer.cschetd  := '96';
          PrnaryadBuffer.csubschd := '02';
          PrnaryadBuffer.tbld[1]  := 1; // организации
          PrnaryadBuffer.tbld[2]  := 40; // объекты строительства
          PrnaryadBuffer.tbld[3]  := 14; // договоры
          PrnaryadBuffer.tbld[4]  := 158; // 2005. Виды задолженности
          PrnaryadBuffer.CKAUD[2] := pwsWork.KatstroyNrec;        // объект строительства (+)
        }
        2: {                                      // 26.01
          PrnaryadBuffer.cschetd  := '26';
          PrnaryadBuffer.csubschd := '01';
          PrnaryadBuffer.tbld[1]  := 40; // объекты строительства
          PrnaryadBuffer.tbld[2]  := 10016; // статьи затрат
          PrnaryadBuffer.tbld[3]  := vLS.lschet.tbld[3];
          PrnaryadBuffer.tbld[4]  := vLS.lschet.tbld[4];
          PrnaryadBuffer.CKAUD[1] := pwsWork.KatstroyNrec;        // объект строительства (+)
          PrnaryadBuffer.CKAUD[2] := CKAU_2601;                   // 26010101 Должностной оклад
          PrnaryadBuffer.CKAUD[3] := vLS.lschet.CKAUD[3];         // из лицевого счета
          PrnaryadBuffer.CKAUD[4] := vLS.lschet.CKAUD[4];         // из лицевого счета
        }
      end;
      //if pwsPerson.BonusValue <> 0      // заполнение vidprem ("Вид премии")
      //{
      //  case vLS.lschet.sisopl of
      //    20: PrnaryadBuffer.vidprem := 2;   // Сдельная оплата (тсс-1 или тсс-2) премия с кодом 110
      //    30: PrnaryadBuffer.vidprem := 211; // повременная оплата премия с кодом 108
      //    40: PrnaryadBuffer.vidprem := 205; // оклад премия с кодом 109
      //  end;
      //}
      InsertPrnaryad(PrnaryadBuffer);       //добавляем новый наряд или позиционируем PRNARYAD на существующий, соответствующий буферу

                                            //надбавки, добавляемые общей суммой

      if pwsWork.HazardPayValue <> 0        // надбавка за вредность (+)
      {
        var NardopBuffer: TNardopBuffer;
        InitNardopBuffer(NardopBuffer);
        NardopBuffer.SUMDOP     := pwsWork.HazardPayValue;
        NardopBuffer.PROC       := pwsWork.HazardPayPercent;
        NardopBuffer.VIDOPL     := if(vLS.lschet.sisopl = 20, GetVidoplSyscodeByUsercode(120), GetVidoplSyscodeByUsercode(121));
        if pwsWork.Kind = 0
          NardopBuffer.CKAUD[2] := CKAU_2008;
        InsertOrSumNardop(NardopBuffer);
      }

      if pwsWork.QualifPayValue <> 0        // межразрядная сумма (+)
      {
        var NardopBuffer: TNardopBuffer;
        InitNardopBuffer(NardopBuffer);
        NardopBuffer.SUMDOP     := pwsWork.QualifPayValue;
        NardopBuffer.PROC       := pwsWork.QualifPayPercent;
        NardopBuffer.VIDOPL     := GetVidoplSyscodeByUsercode(118);
        if pwsWork.Kind = 0
          NardopBuffer.CKAUD[2] := CKAU_2008;
        InsertOrSumNardop(NardopBuffer);
      } //межразрядная сумма

      if pwsPerson.BonusValue <> 0          // сумма премии (+)
      {
        var NardopBuffer: TNardopBuffer;
        InitNardopBuffer(NardopBuffer);
        NardopBuffer.SUMDOP   := pwsPerson.BonusValue;
        NardopBuffer.PROC     := pwsPerson.BonusPercent;
        case vLS.lschet.sisopl of
          20: NardopBuffer.VIDOPL := GetVidoplSyscodeByUsercode(110);  //сдельно
          30: NardopBuffer.VIDOPL := GetVidoplSyscodeByUsercode(109);  //повременно
        else  NardopBuffer.VIDOPL := GetVidoplSyscodeByUsercode(108);  //оклад
        end;
        case pwsWork.Kind of       // распределение суммы премий в зависимости от вида работ
          0: NardopBuffer.CKAUD[2] := CKAU_2002;
          2: NardopBuffer.CKAUD[2] := CKAU_2602;                   // 26010101 Должностн
        end;
        InsertOrSumNardop(NardopBuffer);
      } // сумма премии

      if pwsPerson.BonusHzrdValue <> 0      // сумма премии за вредность (+)
      {
        var NardopBuffer: TNardopBuffer;
        ClearAdvRecord(NardopBuffer);
        NardopBuffer.SUMDOP   := pwsPerson.BonusHzrdValue;
        NardopBuffer.PROC     := pwsPerson.BonusHzrdPercent;
        NardopBuffer.VIDOPL   := GetVidoplSyscodeByUsercode(111);
        if vLS.lschet.sisopl = 20 and pwsWork.Kind = 0
          NardopBuffer.CKAUD[2] := CKAU_2008;
        InsertOrSumNardop(NardopBuffer);
      }

      if pwsPerson.BonusQuarValue <> 0      // квартальная премия (+)
      {
        var NardopBuffer: TNardopBuffer;
        ClearAdvRecord(NardopBuffer);
        NardopBuffer.TZP      := 1;
        NardopBuffer.MNREC    := PrnaryadBuffer.Nrec;
        NardopBuffer.CSCHETD  := PrnaryadBuffer.cschetd;
        NardopBuffer.CSUBSCHD := PrnaryadBuffer.csubschd;
        NardopBuffer.VIDOPL   := GetVidoplSyscodeByUsercode(107);
        NardopBuffer.SUMDOP   := pwsPerson.BonusQuarValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;
        NardopBuffer.PROC     := pwsPerson.BonusQuarPercent;
        case pwsWork.Kind of
          0: { // 20.03
            NardopBuffer.tbld[1]  := 40;    // объекты строительства
            NardopBuffer.tbld[2]  := 10016; // статьи затрат
            NardopBuffer.tbld[3]  := vLS.lschet.tbld[3];
            NardopBuffer.tbld[4]  := vLS.lschet.tbld[4];
            NardopBuffer.CKAUD[1] := pwsWork.KatstroyNrec;
            NardopBuffer.CKAUD[2] := CKAU_2003;
            NardopBuffer.CKAUD[3] := vLS.lschet.CKAUD[3];
            NardopBuffer.CKAUD[4] := vLS.lschet.CKAUD[4];
          }
          1: {
            NardopBuffer.tbld[1]  := 1;   // организации
            NardopBuffer.tbld[2]  := 40;  // объекты строительства
            NardopBuffer.tbld[3]  := 14;  // договоры
            NardopBuffer.tbld[4]  := 158; // 2005. Виды задолженности
            NardopBuffer.CKAUD[2] := pwsWork.KatstroyNrec;
          }
        end;
        InsertOrSumNardop(NardopBuffer);
      }


      PRNARYAD.CHASF    := PRNARYAD.CHASF + pwsWork.AvgHours;                                          // часы по факту
      PRNARYAD.KOLDN    := trunc(PRNARYAD.CHASF / 8);
      PRNARYAD.CHASGR   := pwsPerson.BalanceHoursPlan * PRNARYAD.CHASF / pwsPerson.BalanceHoursFact;  // часы по плану
      PRNARYAD.SUMMPREM := pwsPerson.BonusValue * PRNARYAD.CHASF / pwsPerson.BalanceHoursFact;
      PRNARYAD.SUMMA    := pwsPerson.PaymentValue * PRNARYAD.CHASF / pwsPerson.BalanceHoursFact;
      update current PRNARYAD;
    } //if getfirst pwsPerson
  } //_loop pwsWork

  _loop pwsWork                  // цикл для разбивки доплат по заказам
  {
    if getfirst pwsPerson where ((pwswork.pwsPersonNrec == pwsPerson.Nrec)) = tsOk  // все работы по человеку
    { // строки спецификации бух. наряда разбиты по людям и заказам (объектам строительства)
      if getfirst PRNARYAD where ((pwsPerson.PersonCode == PRNARYAD.tabn and (PRNARYAD.CKAUD[1] = pwswork.KatstroyNrec and PRNARYAD.mnrec = SYS_NAR.nrec))) = tsOk then
      {

        if pwsPerson.BonusOther20Value <> 0                  // доп надбавки 20 (+)
        {
          if getfirst NARDOP where ((1 == NARDOP.tzp and PRNARYAD.nrec == NARDOP.mnrec and (NARDOP.vidopl = 46 or NARDOP.vidopl = 23))) != tsOk then
          {
            ClearBuffer(#NARDOP);
            NARDOP.MNREC := PRNARYAD.Nrec;
            NARDOP.CSCHETD := PRNARYAD.cschetd;
            NARDOP.CSUBSCHD := PRNARYAD.csubschd;
            case pwsWork.Kind of
             3: vVIDOPL._vidcode := 138; // 26.перс.надбавка
             4: vVIDOPL._vidcode := 117; // 26.доп.надбавка
            end;
            if vVIDOPL.getfirst klvidopl = tsOk { };
            NARDOP.VIDOPL := vVIDOPL.klvidopl.vidopl;
            NARDOP.SUMDOP := pwsPerson.BonusOtherValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;

            if pwsWork.Kind = 3 or pwsWork.Kind = 4 then
            {
              NARDOP.tbld[1] := 40; // объекты строительства
              NARDOP.tbld[2] := 10016; // статьи затрат
              NARDOP.tbld[3] := vLS.lschet.tbld[3];
              NARDOP.tbld[4] := vLS.lschet.tbld[4];
              NARDOP.CKAUD[1] := pwsWork.KatstroyNrec;        // объект строительства (+)
              NARDOP.CKAUD[2] := CKAU_2601;                   // 26010101 Должностной оклад
              NARDOP.CKAUD[3] := vLS.lschet.CKAUD[3];         // из лицевого счета
              NARDOP.CKAUD[4] := vLS.lschet.CKAUD[4];         // из лицевого счета
            }
            insert current NARDOP;
          }
          else
          {
            NARDOP.SUMDOP += pwsPerson.BonusOtherValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;
            update current NARDOP;
          }
        }


        if pwsPerson.BonusYearValue <> 0                  // годовая премия (+)
        {
          if getfirst NARDOP where ((1 == NARDOP.tzp and PRNARYAD.nrec == NARDOP.mnrec and (NARDOP.vidopl = 166))) != tsOk then
          {
            ClearBuffer(#NARDOP);
            NARDOP.MNREC := PRNARYAD.Nrec;
            NARDOP.CSCHETD := PRNARYAD.cschetd;
            NARDOP.CSUBSCHD := PRNARYAD.csubschd;
            vVIDOPL._vidcode := 114;
            if vVIDOPL.getfirst klvidopl = tsOk { };
            NARDOP.VIDOPL := vVIDOPL.klvidopl.vidopl;
            NARDOP.SUMDOP := pwsPerson.BonusYearValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;
            NARDOP.proc := pwsPerson.BonusYearPercent;

            if pwsWork.Kind = 0  // 20.03
            {
              NARDOP.tbld[1] := 40; // объекты строительства
              NARDOP.tbld[2] := 10016; // статьи затрат
              NARDOP.tbld[3] := vLS.lschet.tbld[3];
              NARDOP.tbld[4] := vLS.lschet.tbld[4];
              NARDOP.CKAUD[1] := pwsWork.KatstroyNrec;
              NARDOP.CKAUD[2] := CKAU_2004;
              NARDOP.CKAUD[3] := vLS.lschet.CKAUD[3];
              NARDOP.CKAUD[4] := vLS.lschet.CKAUD[4];
            }
            if pwsWork.Kind = 1  // 96.02
            {
              PRNARYAD.tbld[1] := 1; // организации
              PRNARYAD.tbld[2] := 40; // объекты строительства
              PRNARYAD.tbld[3] := 14; // договоры
              PRNARYAD.tbld[4] := 158; // 2005. Виды задолженности
              NARDOP.CKAUD[2] := pwsWork.KatstroyNrec;
            }

            insert current NARDOP;
          }
          else
          {
            NARDOP.SUMDOP += pwsPerson.BonusYearValue * pwsWork.AvgHours / pwsPerson.BalanceHoursFact;
            update current NARDOP;
          }
        }
      }
    }
  }

  _loop PRNARYAD where ((SYS_NAR.nrec == PRNARYAD.mnrec))
  {
    SYS_NAR.SUMMANAR += PRNARYAD.SUMMA;
    SYS_NAR.SUMMAPREM += PRNARYAD.SUMMPREM;
  }

  update current SYS_NAR;
  message('Создан "' + SYS_NAR.NMNEM + '"');
  RunInterface(Z_MP::SYS_NAR, 2);
}
end;

end.
