#include VacationSaldo.vih
#include StaffStruct.vih
#include AppFuncs.vih
#include FactVacation.vih
#include Query.vih

#component "AGAT"

interface testVacationSaldo1 'testVacationSaldo1' escclose, doaccept;

function GetStaffStructVacKolDn: integer; forward;
function GetPersVacKolDn: integer; forward;
function GetFactVacationKolDn: double; forward;

var
  _d: date;
  _vacationSaldo: UTILS::iVacationSaldo;
  _af: AppointmentsFunctions;
  _ss: StaffStruct;
  _qGetPersVacKolDn: IQuery;
  _fv: iFactVacation;
  _qGetFactVacationKolDn: IQuery;

create view
as select GetStaffStructVacKolDn() (fieldname=StaffStructVacKolDn),
          GetPersVacKolDn() (fieldname=PersVacKolDn),
          GetFactVacationKolDn() (fieldname=FactVacationKolDn),
          _vacationSaldo.GetByPersonOnDate(persons.nrec, _d) (fieldname=myFactVacation)
from persons,
     appointments
;

function GetStaffStructVacKolDn: integer;
{

  var appNrec: comp;
  appNrec := _af.GetAppNrec_OnDate(persons.nrec, _d);

  if getfirst appointments where ((appNrec == appointments.nrec)) = tsOk
    result := _ss.GetVacKolDn(appointments.staffstr, _d);
  else
    result := 0;

}

sql query qGetPersVacKolDn =
  select sum(persvacation.wcountday) wcountday
  from persvacation
  where persvacation.cpersons = :personsNrec and
        persvacation.typeotp = 1 and
        (persvacation.dbegexist = 0 or persvacation.dbegexist <= :date ) and
        (persvacation.dendexist = 0 or persvacation.dendexist >= :date )
;

function GetPersVacKolDn: integer;
{

  if _qGetPersVacKolDn = nullref
    _qGetPersVacKolDn := queryManager.createQuery(qGetPersVacKolDn);

  result := _qGetPersVacKolDn.setParam('personsNrec', persons.nrec)
                             .setParam('date', _d)
                             .getResultValue;
}

sql query qGetFactVacationKolDn =
select pv.nrec
from persons p
join workperiod wp on p.nrec = wp.cperson and wp.dperbeg <= :SaldoDate
join putvacation pv on wp.nrec = (case when pv.cwpremain = #comp(0) then pv.cworkperiod else pv.cwpremain end)
where p.nrec = :personsNrec
;

function GetFactVacationKolDn(): double;
{
  if _qGetFactVacationKolDn = nullref
    _qGetFactVacationKolDn := queryManager.createQuery(qGetFactVacationKolDn);

  var rs: IResultSet;
  rs := _qGetFactVacationKolDn.setParam('personsNrec', persons.nrec).setParam('SaldoDate', _d).getResultSet;

  var cnt: double;
  cnt := 0;

  if rs.getFirst = tsOk do
  {
    cnt += _fv.funGetBalanceVac(comp(rs.row.valat(1)), 0, _d);
  } while rs.getNext = tsOk;

  result := cnt;
}

browse br1;
show(,,,15);
table persons;
fields
  persons.tabnmb 'tabnmb':[10], protect;
  persons.fio 'fio': [30], protect;
  persons.disdate 'disdate': [10], protect;
  StaffStructVacKolDn 'StaffStructVacKolDn': [10], protect;
  PersVacKolDn 'PersVacKolDn': [10], protect;
  FactVacationKolDn 'FactVacationKolDn': [10,2], protect;
  myFactVacation 'myFactVacation':[10,2], protect;
end; //browse

screen sc1;
show(,16,,) fixed_y;
fields
  _d: noprotect;
buttons
  cmCalcSald;

<<

`Дата расчетов`.@@@@@@@@@@

<. Сальдо .>
>>
end; //screen

handleevent

cmCalcSald:
{

  message(_vacationSaldo.GetByPersonOnDate(persons.nrec, _d));

}

cminit:
{

  var c: comp;
  if readmydsk(c, 'testVacationSaldo1_personsNrec', false)
    if getfirst persons where ((c == persons.nrec)) = tsOk {}

  if not readmydsk(_d, 'testVacationSaldo1_d', false) _d := cur_date;

}

cmDone:
{

  savemydsk(persons.nrec, 'testVacationSaldo1_personsNrec');
  savemydsk(_d, 'testVacationSaldo1_d');

}

end; //handleevent

end.
