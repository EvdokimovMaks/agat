#include Query.vih
#include ComFiltr.vih

#component "AGAT"

interface GrOtp 'Агат. График отпусков' escclose, doaccept;
show (,,80,14);

//#region Запросы

sql query queryPersonInfo =
select p.tabnmb,
       p.fio,
       p.appdate,
       coalesce(ss.vacation, 0) as otpusk_osn,
       coalesce(otpusk_dop.value, 0) as otpusk_dop,
       coalesce(catDep.code, '') as DepCode,
       coalesce(catPost.name, '') as PostName
from persons p

left join catalogs catDep on catDep.nrec = p.department

left join (select cpersons, sum(wcountday) as value
           from persvacation
           where ckotpus = 9 and cpersons = :PersonNrec  //Ежегодный дополнительный отпуск
           group by cpersons
          ) otpusk_dop on otpusk_dop.cpersons = p.nrec

left join appointments app on app.nrec = p.appointcur

left join staffstruct ss on ss.nrec = app.staffstr

left join catalogs catPost on catPost.nrec = app.post

where p.nrec = :PersonNrec
;

/*
left join (select cperson, sum(wdaycount - coalesce(v.duration, 0)) as value
           from putvacation
           left join (select cputvac, sum(duration) as duration
                      from vacations
                      where cputvac <> #comp(0)
                      group by cputvac
                     ) v on nrec = v.cputvac
           where cklotpusk = #comp(2)                    //Очередной отпуск
           group by cperson
          ) ostatok_osn on ostatok_osn.cperson = p.nrec

left join (select cperson, sum(wdaycount - coalesce(v.duration, 0)) as value
           from putvacation
           left join (select cputvac, sum(duration) as duration
                      from vacations
                      where cputvac <> #comp(0)
                      group by cputvac
                     ) v on nrec = v.cputvac
           where cklotpusk = #comp(40014EEE2053A03Dh)    //Ежегодный дополнительный отпуск
           group by cperson
          ) ostatok_dop on ostatok_dop.cperson = p.nrec
*/

sql query queryWpInfo =
select wp.nrec as cworkperiod,
       sum(coalesce(pv.wdaycount,0)) as plan,
       sum(coalesce(v.duration,0)) as fact
from workperiod wp
left join putvacation pv on pv.cworkperiod = wp.nrec
left join (select cputvac, sum(duration) as duration
           from vacations
           where person = :PersonNrec and cputvac <> #comp(0)
           group by cputvac
          ) v on v.cputvac = pv.nrec
where wp.cperson = :PersonNrec and wp.cworkperiod = #comp(0)
group by wp.nrec
;

sql query queryPlanOtpusk =
select nrec, planyearbeg, planyearend, duration
from planotpusk
where person = :PersonNrec and year_vac = :Year
order by planyearbeg
;

//#endregion

var
  _year: word;
  _cf: CommonFiltr new;
  _qPersonInfo: IQuery;
  _qWpInfo: IQuery;
  _qPlanOtpusk: IQuery;
  _personsMarker: longint;

form frm('AgatGrOtp.out', 'AgatGrOtp');

create view
as select *
from persons p
where foundmarker(_personsMarker, p.nrec)
order by p.isemployee, p.fio;

screen sc1
show(,1,,3);
fields
  _year: noprotect, spinbutton [1, 1900, 2100];
<<

`Год` .@@@@@@@@@@
>>
end;

embedded sc2 interface _cf;
show at (,4,,10);
end;

screen sc3;
show at (,11,,13);
buttons
  cmDoOk, default;
  cmCancel;
<<

                                    <.    Продолжить    .> <.    Отмена    .>
>>
end;

procedure formWriteStringField(value: string); { frm.write(value); }
procedure formWriteWordField(value: word); { frm.write(value); }
procedure formWriteDateField(value: date); { frm.write(value); }
procedure formWriteCompField(value: comp); { frm.write(value); }

handleevent
cmDefault:
{
  _cf.EndSelect;
  if _cf.GetPsnCount = 0 _cf.SelectAllPsn;

  _personsMarker := _cf.GetPersonsMarker;

  frm.write(_year);

  //цикл по сотрудникам из фильтра
  _loop p
  {
    //сообщаем форме, что происходит очередная итерация цикла
    frm.PutEventById(feDoLoop, fcCyclePerson);

    //получаем инфу по сотруднику
    var rs: IResultSet;
    rs := _qPersonInfo.setParam('PersonNrec', p.nrec).getResultSet;
    if rs.getFirst != tsOk continue;

    //пишем в переменные сколько сотруднику полагается дней отпуска в рабочем периоде
    var otpusk_osn, otpusk_dop, otpusk: word;
    otpusk_osn := rs.row.val('otpusk_osn');  //полагается дней основного отпуска
    otpusk_dop := rs.row.val('otpusk_dop');  //полагается дней доп. отпуска
    otpusk := otpusk_osn + otpusk_dop;       //полагается дней всего

    //рассчитываем количество использованных отпусков
    //готовим переменные
    var otpusk_used_periods: word = 0;   //количество рабочих периодов, в которых все полагающиеся отпуска использованы
    var otpusk_used_days: word = 0;      //количество дней фактических отпусков, в рабочих периодах, в которых не все полагающиеся отпуска использованы
    var otpusk_used_rest_days: word = 0; //остаток рабочих дней после закрытия не полностью закрытых рабочих периодов днями otpusk_used_days

    otpusk_used_periods := 0;
    otpusk_used_days := 0;
    otpusk_used_rest_days := 0;

    //получаем информацию по полагающимся и фактическим дням отпусков сотрудников в разрезе рабочих периодов
    var rsWp: IResultSet;
    rsWp := _qWpInfo.setParam('PersonNrec', p.nrec).getResultSet;

    //цикл по рабочим периодам сотрудника
    if rsWp.getFirst = tsOk do
    {

      //получаем количества полагающихся и фактических дней отпуска в периоде
      var plan, fact: word;
      plan := rsWp.row.val('plan');
      fact := rsWp.row.val('fact');

      if plan > fact                   //если не все дни полагающегося отпуска использованы - добавляем факт к использованным дням отпусков в незакрытых периодах
        otpusk_used_days += fact;
      else                             //иначе добавляем единичку к использованным периодам
        otpusk_used_periods++;

    } while rsWp.getNext = tsOk;

    //вычисляем сколько периодов мы можем закрыть днями otpusk_used_days и добавляем их к otpusk_used_periods
    otpusk_used_periods += otpusk_used_days div otpusk;
    //остаток дней после этого пишем в otpusk_used_rest_days
    otpusk_used_rest_days := otpusk_used_days mod otpusk;

    //передаем поля в форму
    formWriteCompField(p.nrec);
    formWriteWordField(rs.row.val('tabnmb'));
    formWriteStringField(rs.row.val('fio'));
    formWriteDateField(rs.row.val('appdate'));
    formWriteStringField(rs.row.val('DepCode'));
    formWriteStringField(rs.row.val('PostName'));
    formWriteWordField(otpusk_osn);
    formWriteWordField(otpusk_dop);
    formWriteWordField(otpusk_used_periods);
    formWriteWordField(otpusk_used_rest_days);

    //цикл по плановым отпускам сотрудника из плана-графика
    var rsPo: IResultSet;
    rsPo := _qPlanOtpusk.setParam('PersonNrec', p.nrec)
                        .setParam('Year', _year)
                        .getResultSet;

    if rsPo.getFirst = tsOk do
    {
      frm.PutEventById(feDoLoop, fcCyclePlanOtpusk);
      formWriteCompField(rsPo.row.val('nrec'));
      formWriteDateField(rsPo.row.val('planyearbeg'));
      formWriteDateField(rsPo.row.val('planyearend'));
      formWriteWordField(rsPo.row.val('duration'));
    } while rsPo.getNext = tsOk;
  }

  //выводим отчет на печать или прерываем
  if (frm.error)
    frm.abortForm;
  else
    frm.ShowFile('');
}
cmDoOk: putcommand(cmDefault);
cmInit:
{
  if not readmydsk(_year, 'GrOtp_year', false) _year := year(cur_date);
  _cf.ObjInit;
  _qPersonInfo := queryManager.createQuery(queryPersonInfo);
  _qWpInfo := queryManager.createQuery(queryWpInfo);
  _qPlanOtpusk := queryManager.createQuery(queryPlanOtpusk);
}
cmDone:
{
  savemydsk(_year, 'GrOtp_year');
}
end;

end.

VipInterface UserReport_GrOtp Implements IUserReport licensed(free);
Interface UserReport_GrOtp;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::GrOtp);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Агат. График отпусков';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    Level := Level;
    GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'STAFFMAINMENU';
    end;
  end;
end.
