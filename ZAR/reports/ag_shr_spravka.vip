//Отчет по штатному расписанию
#include Query.vih
#include CatFunc.vih
#include UserReport.vih
#include DeptIer.vih
#include GetKau.vih

#component "AGAT"

interface ag_shr_spravka 'АГАТ. Справка по ШР' escclose;
show(,,74,19);

const
  FLT_CATDEP     : word = 1;
  FLT_CATEG      : word = 2;
  FLT_PODGR      : word = 4;
  FLTBONUS_NOBONUS: word = 1;
  FLTBONUS_SEKR   : word = 2;
  FLTBONUS_VRED   : word = 4;
  FLTVACANCY_ALL  : word = 0;
  FLTVACANCY_VAC  : word = 1;
  FLTVACANCY_USED : word = 2;
  FOTBONUS_SEKR   : word = 1;
  FOTBONUS_VRED   : word = 2;
end;

table struct tCatDep (
  Nrec     : comp,
  cParent  : comp,
  Code     : string[100],
  Name     : string,
  Qty      : double,
  Wrk      : double,
  QtyTotal : double,
  Salary   : double,
  FOT      : double,
  BonusAll : double,
  BonusVred: double,
  BonusSekr: double
) with index (
  i00 = Nrec,
  i01 = cParent + Code
);

var
  _departIer  : DepartIer;
  _catFunc    : CatalogsFunctions;
  pXL         : XLSRepBuilder;
  _date       : date;
  _wFlt       : word;
  _wFltBonus  : word;
  _wFltVacancy: word;
  _wFotBonus  : word;
  _mDep       : TPtr;
  _mPodgr     : TPtr;
  _mCateg     : TPtr;

#include GetKau.var

create view
var
  _cCurDep: comp;
as select
  tCatDep.Nrec
from
  tCatDep
 ,tCatDep tCurDep
 ,tCatDep tChildDep
where ((
      _cCurDep == tCurDep.Nrec
  and _cCurDep == tChildDep.cParent
))
;

create view vRep
var
  _cCatDep: comp;
as select
  tCatDep.Nrec
from
  tCatDep tCatDepChild,
  tCatDep
where ((
  _cCatDep        == tCatDepChild.cParent and
  _cCatDep        == tCatDep.Nrec
));

function GetDepFld: string;
{
  result := '';
  var cnt: longint = GetMarkerCount(_mDep);
  case cnt of
    0: result := 'Все подразделения';
    1:
    {
      var c: comp = 0;
      if GetMarker(_mDep, 0, c)
        result := _catFunc.GetCatalogsName(c);
    }
    else
      result := 'Выбрано подразделений: ' + cnt;
  end;
}

function GetCategFld: string;
{
  var cnt: longint = GetMarkerCount(_mCateg);
  if cnt = 0
    result := 'Все категории';
  else
  {
    var i: longint = 0;
    var c: comp = 0;
    result := '';
    for(i := 0; GetMarker(_mCateg, i, c); ++i)
      result += if(result = '', '', ', ') + ShowKau(KODGRKAU_CATEG, c);
    result := cnt + ': ' + result;
  }
}

function GetPodgrFld: string;
{
  var cnt: longint = GetMarkerCount(_mPodgr);
  if cnt = 0
    result := 'Все подгруппы';
  else
  {
    var i: longint = 0;
    var c: comp = 0;
    result := '';
    for(i := 0; GetMarker(_mPodgr, i, c); ++i)
      result += if(result = '', '', ', ') + ShowKau(KODGRKAU_PODGR, c);
    result := cnt + ': ' + result;
  }
}

screen sc1;
  fields
    _date: noprotect;
    _wFlt: noprotect, noframe;
    [DepFld] GetDepFld: protect, pickbutton;
    [CategFld] GetCategFld: protect, pickbutton;
    [PodgrFld] GetPodgrFld: protect, pickbutton;
    _wFltBonus: noprotect;
    _wFltVacancy: noprotect;
    _wFotBonus: noprotect;
  buttons
    cmOk, default;
    cmCancel;
<<

`Дата отчета`.@@@@@@@@@@

 Фильтры
    [.] По подразделениям`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] По категориям`    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] По подгруппам`    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 Фильтр по надбавкам:                   Фильтр по вакансиям:
    [.] ШЕ без надбавок`                   (.) Все (с вакансиями и без)`
    [.] ШЕ с надбавкой за секретность`     (.) Только с вакансиями`
    [.] ШЕ с надбавкой за вредность`       (.) Только занятые`

 Учитывать надбавки при расчете ФОТ:
    [.] За секретность`
    [.] За вредность`

                                                <.Продолжить.> <.Отмена.>
>>
end;


//#region sql query qCatDep
sql query qCatDep =
  insert tCatDep (Nrec, cParent, Name, Code)
  select
    CatHist.cCat                          as Nrec,
    coalesce(CatParent.Nrec, CatTop.Nrec) as cParent,
    CatHist.Name                          as Name,
    Catalogs.Code                         as Code
  from
    Catalogs
    inner join (
      select CatHist.cCat, max(CatHist.Dat1) MaxDate: date
      from CatHist
      where :dateSts >= CatHist.Dat1 and (CatHist.wFld1 <> 2 or #Date(0,0,0) = CatHist.Dat2 or :dateSts <= CatHist.Dat2)
      group by CatHist.cCat
    ) CatH1 on (Catalogs.NRec = CatH1.cCat)
    inner join (
      select CatHist.cCat, CatHist.Dat1, max(cast(CatHist.lastuser as integer)) MaxNpp
      from CatHist
      where :dateSts >= CatHist.Dat1 and (CatHist.wFld1 <> 2 or #Date(0,0,0) = CatHist.Dat2 or :dateSts <= CatHist.Dat2)
      group by CatHist.cCat, CatHist.Dat1
    ) CatH2 on (Catalogs.NRec = CatH2.cCat and CatH1.MaxDate = CatH2.Dat1)
    inner join CatHist on (Catalogs.NRec = CatHist.cCat and CatH1.MaxDate = CatHist.Dat1 and CatH2.MaxNpp = cast(CatHist.lastuser as integer))
    inner join Catalogs CatTop on CatTop.SysCode = :topEntry
    left  join Catalogs CatParent on CatParent.Nrec = CatHist.cParent %CatParentFltr
  where
    Catalogs.lPr = 0 and Catalogs.MainLink = (select NRec from Catalogs where :topEntry = SysCode) and
    case :topEntry when -11 then 1 else 0 end <> CatHist.bMulti and
    Catalogs.DatN <= :dateSts and (Catalogs.DatOk = 0 or Catalogs.DatOk >= :dateSts)
    %WhereFltr
  union all
    select
      Catalogs.Nrec        as Nrec,
      #comp(0)             as cParent,
      'Штатное расписание' as Name,
      'ШР'                 as Code
    from
      Catalogs
    where
      Catalogs.SysCode = :topEntry
;
//#endregion sql query qCatDep

//#region sql query qSS
sql query qSS =
  select
    cCatDep                                                 as cCatDep
   ,sum(Qty)                                                as Qty
   ,sum(Wrk)                                                as Wrk
   ,sum(Salary * %QtySalary)                                as Salary
   ,sum(BonusVred * %QtyBonusVred)                          as BonusVred
   ,sum(BonusSekr * %QtyBonusSekr)                          as BonusSekr
   ,sum((Salary + %BonusVredFot + %BonusSekrFot) * %QtyFot) as FOT
  from (
    select
      tCatDep.Nrec                      as cCatDep,
      coalesce(avPodgr.vComp, #comp(0)) as cPodgr,
      coalesce(avCateg.vComp, #comp(0)) as cCateg,
      ssHist.hWorkStations              as Qty,
      case when ssHist.hWorkStations > coalesce(tApp.cnt,0)
             then coalesce(tApp.cnt,0)
           else ssHist.hWorkStations
      end                               as Wrk,
      case when ssHist.hTaxRate > 1000
             then ssHist.hTaxRate
           else 0
      end                               as Salary: double,
      coalesce(tRaise.Summa, 0)         as BonusAll,
      coalesce(tRaise.BonusVred, 0)     as BonusVred,
      coalesce(tRaise.BonusSekr, 0)     as BonusSekr
    from
      tCatDep
    join StaffStruct ss
      on ss.Department = tCatDep.Nrec and
         ss.dInput <= :dateSts and
         (ss.dClose = 0 or ss.dClose >= :dateSts )
    join (Select StaffStr, max(wFld) as wFld
          from HistoryStr
          where dHist <= :dateSts
          group by StaffStr) ssHistLast on ssHistLast.StaffStr = ss.Nrec
    join HistoryStr ssHist
      on ssHist.StaffStr = ss.Nrec and ssHist.wFld = ssHistLast.wFld and ssHist.hWorkStations > 0
    left join KlKatego
      on KlKatego.Nrec = ssHist.cSpr2
    left join AttrVal avCateg
      on avCateg.wTable = 16005 and        //coKlKatego
         avCateg.cRec = KlKatego.Nrec and
         avCateg.cAttrNam = :cAttrNamCateg //ATTRNAM_NREC_KLKATEGO_CATEG
    left join AttrVal avPodgr
      on avPodgr.wTable = 16005 and        //coKlKatego
         avPodgr.cRec = KlKatego.Nrec and
         avPodgr.cAttrNam = :cAttrNamPodgr //ATTRNAM_NREC_KLKATEGO_PODGR
    outer apply (
      select sum(app.Rate) as cnt: double
      from Appointments app
      join persons pers on pers.Nrec = app.Person
      where
          app.StaffStr = ss.Nrec
      and pers.IsEmployee in ('С', 'У')
      and app.wAddWord1 = 1
      and (app.AppointDate <= :dateSts and (app.DismissDate = 0 or app.DismissDate >= :dateSts))
    ) tApp
    outer apply (
      select
        sum(case when Str_RHist.wHAttr = 2 then (case when HistoryStr.hTaxRate > 1000 then HistoryStr.hTaxRate else 0 end) * Str_RHist.RHSum / 100 else Str_RHist.RHSum end) as Summa,
        sum(case when CatRaise.Name like '%вредность%'
                   then (case when Str_RHist.wHAttr = 2 then (case when HistoryStr.hTaxRate > 1000 then HistoryStr.hTaxRate else 0 end) * Str_RHist.RHSum / 100 else Str_RHist.RHSum end)
                 else 0
            end) as BonusVred,
        sum(case when CatRaise.Name like '%секретность%'
                   then (case when Str_RHist.wHAttr = 2 then (case when HistoryStr.hTaxRate > 1000 then HistoryStr.hTaxRate else 0 end) * Str_RHist.RHSum / 100 else Str_RHist.RHSum end)
                 else 0
            end) as BonusSekr
      from RaiseStS
      outer apply (
        select max(Str_RHist_Last.dRec) as dRec
        from Str_RHist Str_RHist_Last
        where Str_RHist_Last.cRaiseStS = RaiseStS.Nrec and Str_RHist_Last.dRec <= :dateSts
      ) tStr_RHist_Last
      join Str_RHist on Str_RHist.cRaiseStS=RaiseStS.Nrec and Str_RHist.dRec = tStr_RHist_Last.dRec
      join Catalogs CatRaise on CatRaise.Nrec = RaiseStS.RaiseType
      join HistoryStr on HistoryStr.Nrec = ssHist.Nrec
      where
        RaiseStS.StaffStr=ss.Nrec and
        RaiseStS.Dat1 <= :dateSts and (RaiseStS.Dat2 = 0 or RaiseStS.Dat2 >= :dateSts) and
        (CatRaise.Name like '%вредность%' or CatRaise.Name like '%премия%' or CatRaise.Name like '%секретность%')
    ) tRaise
  ) t
  %sWhere
  group by t.cCatDep
;
//#endregion sql query qSS


function CreateSqlTmpTables: integer;
{
  //Готовим sql таблицу tCatDep со структурными единицами ШР, действующими на дату _date
  var s: longint = 0;
  sqlFreeStr(s);
  sqlAddStr(s, 'table tCatDep (Nrec: comp, cParent: comp, Name: string, Code: string[100]);');
  result := sqlCreateTmpTable(s, ctmNormal);
  if result != tsOk exit;

  //Готовим sql таблицу с фильтрами
  sqlFreeStr(s);
  sqlAddStr(s, 'table TmpFltr (wType: word, cRec: comp) with index (i01 = wType + cRec);');
  result := sqlCreateTmpTable(s, ctmNormal);
  if result != tsOk exit;
}


procedure DropSqlTmpTables;
{
  //Дропаем созданные sql таблицы
  sqlDropTmpTable('tCatDep');
  sqlDropTmpTable('TmpFltr');
}


procedure CalcTotals(cCurDep: comp);
{
  var m: TPtr = InitMarker('', 8, 10, 10, true);

  //Запоминаем подчиненные подразделения в маркер
  _cCurDep := cCurDep;
  _loop tChildDep
    InsertMarker(m, tChildDep.Nrec);

  //Считаем итоги по подчиненным подразделениям
  var i: longint; var c: comp = 0;
  for(i := 0; GetMarker(m, i, c); i++)
    CalcTotals(c);

  DoneMarker(m, '');

  //Считаем итоги по текущему подразделению
  _cCurDep := cCurDep;
  if getfirst tCurDep != tsOk exit;
  tCurDep.QtyTotal := tCurDep.Qty;
  _loop tChildDep
  {
    tCurDep.QtyTotal     += tChildDep.QtyTotal;
  }
  if tCurDep.QtyTotal = 0
    delete current tCurDep;
  else
    update current tCurDep;
}

function isBitSet(w: word; b: word): boolean;
{
  result := (w and b) = b;
}

function isFlagSet(b: word): boolean;
{
  result := isBitSet(_wFlt, b);
}

procedure sqlAddWhereStr(var l: longint; s: string);
{
  sqlAddStr(l, if(l=0, 'where ' + s, 'and ' + s));
}

var _qFltr: IQuery;
procedure MarkerToTmpFltr(m: TPtr; wType: word);
{
  if _qFltr = NullRef
    _qFltr := queryManager.createQuery('insert TmpFltr (wType, cRec) Values (:wType, :cRec)');
  _qFltr.setParam('wType', wType);
  var cFltrRec: comp = 0;
  var lFltrInd: longint = 0;
  for (lFltrInd := 0; GetMarker(m, lFltrInd, cFltrRec); lFltrInd++)
    _qFltr.setParam('cRec', cFltrRec).execute;
}

procedure PrepareData;
{
  //Признак, что применен фильтр по подразделениям
  var isDepFltrSet: boolean = isBitSet(_wFlt, FLT_CATDEP) and GetMarkerCount(_mDep) > 0;
  //Если есть фильтр по подразделениям - пишем нреки выбранных подразделений в sql-таблицу TmpFltr
  if isDepFltrSet
    MarkerToTmpFltr(_mDep, FLT_CATDEP);

  //Признак, что применен фильтр по категориям
  var isCategFltrSet: boolean = isBitSet(_wFlt, FLT_CATEG) and GetMarkerCount(_mCateg) > 0;
  //Если есть фильтр по категориям - пишем нреки выбранных категорий в sql-таблицу TmpFltr
  if isCategFltrSet
    MarkerToTmpFltr(_mCateg, FLT_CATEG);

  //Признак, что применен фильтр по подгруппам
  var isPodgrFltrSet: boolean = isBitSet(_wFlt, FLT_PODGR) and GetMarkerCount(_mPodgr) > 0;
  //Если есть фильтр по подгруппам - пишем нреки выбранных подгрупп в sql-таблицу TmpFltr
  if isPodgrFltrSet
    MarkerToTmpFltr(_mPodgr, FLT_PODGR);

  //Заполняем sql таблицу tCatDep действующими на дату _date структурными единицами ШР
  var rslt: integer = queryManager.createQuery(qCatDep)
                                  .setParam('dateSts', _date)
                                  .setParam('topEntry', -11)
                                  .setMacro('CatParentFltr', if(isDepFltrSet, 'and CatParent.Nrec in (select cRec from TmpFltr where wType = 1)', ''))
                                  .setMacro('WhereFltr', if(isDepFltrSet, 'and Catalogs.Nrec in (select cRec from TmpFltr where wType = 1)', ''))
                                  .execute
                                  .errorCode;
  if rslt != tsOk { Message('Ошибка выборки структурных единиц ШР: ' + rslt, error); exit; }

  //Заполняем временную таблицу интерфейса tCatDep
  mtClear(tntCatDep, mfNormal);
  var q1: IQuery = queryManager.createQuery('select * from tCatDep').execute;
  sqlCopyInto(q1, tntCatDep, true);

  //Заполняем tCatDep данными по вакансиям

  //Готовим строку для макроса расчета суммы ФОТ
  var sQty: string = case(_wFltVacancy;
                          FLTVACANCY_ALL: 'Qty',
                          FLTVACANCY_VAC: '(Qty - Wrk)',
                          FLTVACANCY_USED: 'Wrk';
                          '');

  //Готовим строку для макроса с фильтрами по штатным единицам
  var sWhere: longint = 0;

  //Фильтр по категориям
  if isCategFltrSet
    sqlAddWhereStr(sWhere, 't.cCateg in (select TmpFltr2.cRec from TmpFltr TmpFltr2 where TmpFltr2.wType = 2)');

  //Фильтр по подгруппам
  if isPodgrFltrSet
    sqlAddWhereStr(sWhere, 't.cPodgr in (select TmpFltr4.cRec from TmpFltr TmpFltr4 where TmpFltr4.wType = 4)');

  //Фильтры по доплатам
  if not(isBitSet(_wFltBonus, FLTBONUS_VRED) and isBitSet(_wFltBonus, FLTBONUS_SEKR) and isBitSet(_wFltBonus, FLTBONUS_NOBONUS))
  {
    var sFlt: string = '';
    if isBitSet(_wFltBonus, FLTBONUS_VRED)
      sFlt += if(sFlt='','',' or ') + '(BonusVred * '+sQty+') <> 0';
    if isBitSet(_wFltBonus, FLTBONUS_SEKR)
      sFlt += if(sFlt='','',' or ') + '(BonusSekr * '+sQty+') <> 0';
    if isBitSet(_wFltBonus, FLTBONUS_NOBONUS)
      sFlt += if(sFlt='','',' or ') + '(BonusAll * '+sQty+') = 0';
    if sFlt != ''
      sqlAddWhereStr(sWhere, '(' + sFlt + ')');
  }

  //Фильтры по вакансиям
  case _wFltVacancy of
    FLTVACANCY_USED: sqlAddWhereStr(sWhere, 'Wrk > 0');
    FLTVACANCY_VAC: sqlAddWhereStr(sWhere, '(Qty - Wrk) > 0');
  end;

  //Готовим запрос
  var sBonusVredFot: string = if(isBitSet(_wFotBonus, FOTBONUS_VRED), 'BonusVred', '0');
  var sBonusSekrFot: string = if(isBitSet(_wFotBonus, FOTBONUS_SEKR), 'BonusSekr', '0');
  var q: IQuery = queryManager.createQuery(qSS)
                              .setParam('dateSts', _date)
                              .setParam('cAttrNamCateg', ATTRNAM_NREC_KLKATEGO_CATEG)
                              .setParam('cAttrNamPodgr', ATTRNAM_NREC_KLKATEGO_PODGR)
                              .setMacro('sWhere', sWhere)
                              .setMacro('QtySalary', sQty)
                              .setMacro('QtyBonusVred', sQty)
                              .setMacro('QtyBonusSekr', sQty)
                              .setMacro('QtyFot', sQty)
                              .setMacro('BonusVredFot', sBonusVredFot)
                              .setMacro('BonusSekrFot', sBonusSekrFot);

  rslt := q.execute.errorCode;
  if rslt != tsOk { Message('Ошибка выборки вакансий ШР: ' + rslt, error); exit; }

  while q.fetch.errorCode = tsOk
  {
    _cCurDep := q.row.val('cCatDep');
    if getfirst tCurDep = tsOk
    {
      tCurDep.Qty       := q.row.val('Qty');
      tCurDep.Wrk       := q.row.val('Wrk');
      tCurDep.Salary    := q.row.val('Salary');
      tCurDep.BonusAll  := q.row.val('BonusAll');
      tCurDep.BonusVred := q.row.val('BonusVred');
      tCurDep.BonusSekr := q.row.val('BonusSekr');
      tCurDep.FOT       := q.row.val('FOT');
      update current tCurDep;
    }
  }

  //Пересчитываем итоги по иерархии, удаляем подразделения по которым нет вакансий
  CalcTotals(_catFunc.GetCatalogsNRec(-11));
}

procedure PrintXlsNode(cCatStaffStruct: comp; wLevel: word = 0);
{
  var wLevelTmp: word = wLevel;
  //Вакансии по текущему узлу структурных единиц ШР
  set vRep._cCatDep := cCatStaffStruct;
  if vRep.getfirst tCatDep = tsOk
  {
    if vRep.getfirst tCatDepChild = tsOk
    {
      pXL.ClearTblBuffer;
      pXL.SetTblNumberFldValue('Level'    , wLevelTmp);
      pXL.SetTblNumberFldValue('Type'     , 1);
      pXL.SetTblStringFldValue('DepCode'  , vRep.tCatDep.Code);
      pXL.SetTblStringFldValue('DepName'  , vRep.tCatDep.Name + ' ИТОГО');
      pXL.InsTblRow;
      wLevelTmp++;
    }

    if vRep.tCatDep.Qty > 0
    {
      pXL.ClearTblBuffer;
      pXL.SetTblNumberFldValue('Level'         , wLevelTmp);
      pXL.SetTblNumberFldValue('Type'          , 0);
      pXL.SetTblStringFldValue('DepCode'       , vRep.tCatDep.Code);
      pXL.SetTblStringFldValue('DepName'       , vRep.tCatDep.Name);
      pXL.SetTblNumberFldValue('Qty'           , vRep.tCatDep.Qty);
      pXL.SetTblNumberFldValue('Wrk'           , vRep.tCatDep.Wrk);
      pXL.SetTblNumberFldValue('Salary'        , vRep.tCatDep.Salary);
      pXL.SetTblNumberFldValue('BonusSekr'     , vRep.tCatDep.BonusSekr);
      pXL.SetTblNumberFldValue('BonusVred'     , vRep.tCatDep.BonusVred);
      pXL.SetTblNumberFldValue('FOT'           , vRep.tCatDep.FOT);
      pXL.InsTblRow;
    }

    //Записываем в маркер подчиненные узлы структурных единиц ШР
    var m: TPtr = InitMarker('', 8, 50, 10, false);
    vRep._loop tCatDepChild
      InsertMarker(m, vRep.tCatDepChild.Nrec);
    //Выводим данные по подчиненным структурным единицам ШР
    var i: longint = 0;
    var c: comp = 0;
    for(i := 0; GetMarker(m, i, c); i++)
      PrintXlsNode(c, wLevel + 1);
    //Убиваем маркер
    DoneMarker(m, '');
  }
}


procedure PrintXlsReport(isCreateXLT: boolean; sXLTFileName: string);
{
  var sXLSFileName: string = if(isCreateXLT,
                                pXL.CreateXLT(sXLTFileName, True),
                                pXL.CreateReport(sXLTFileName, True));

  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Main');
  pXL.CreateTblFld('Level');
  pXL.CreateTblFld('Type');
  pXL.CreateTblFld('DepCode');
  pXL.CreateTblFld('DepName');
  pXL.CreateTblFld('Qty');
  pXL.CreateTblFld('Wrk');
  pXL.CreateTblFld('Salary');
  pXL.CreateTblFld('BonusSekr');
  pXL.CreateTblFld('BonusVred');
  pXL.CreateTblFld('FOT');

  if not isCreateXLT
    PrintXlsNode(_catFunc.GetCatalogsNRec(-11));

  pXL.PublishTbl('Main');

  pXL.CreateVar(sXLSFileName);
  pXL.SetStringVar('dRep'      , _date);
  pXL.SetNumberVar('FltBonus'  , _wFltBonus);
  pXL.SetNumberVar('FltVacancy', _wFltVacancy);
  pXL.SetNumberVar('FotBonus'  , _wFotBonus);
  pXL.PublishVar;

  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}

handleevent

cmPick:
{
  case curfield of
    #DepFld:
    {
      StoreMarker(_mDep, 'CatalogsMarker');
      if RunInterface('Z_STAFFCAT::PickCatalog2', -11, 0, 100, 0) = cmDefault
      {
        DoneMarker(_mDep, '');
        _mDep := InitMarker('CatalogsMarker', 8, 30, 10, true);
        set _wFlt := _wFlt or FLT_CATDEP;
        rereadrecord;
      }
    }
    #PodgrFld:
    {
      if iGetKau.GetCodeKau(cgiMulti, KODGRKAU_PODGR, 0) > 0
      {
        DoneMarker(_mPodgr, '');
        _mPodgr := InitMarker(iGetKau.GetMarkerName(KODGRKAU_PODGR), 8, 10, 10, true);
        set _wFlt := _wFlt or FLT_PODGR;
        rereadrecord;
      }
    }
    #CategFld:
    {
      if iGetKau.GetCodeKau(cgiMulti, KODGRKAU_CATEG, 0) > 0
      {
        DoneMarker(_mCateg, '');
        _mCateg := InitMarker(iGetKau.GetMarkerName(KODGRKAU_CATEG), 8, 10, 10, true);
        set _wFlt := _wFlt or FLT_Categ;
        rereadrecord;
      }
    }
  end;
}

cmDelOnProtect:
{
  case curfield of
    #DepFld:
    {
      ClearMarker(_mDep);
      if isBitSet(_wFlt, FLT_CATDEP)
        set _wFlt := _wFlt xor FLT_CATDEP;
      rereadrecord;
    }
    #PodgrFld:
    {
      ClearMarker(_mPodgr);
      if isBitSet(_wFlt, FLT_PODGR)
        set _wFlt := _wFlt xor FLT_PODGR;
      rereadrecord;
    }
    #CategFld:
    {
      ClearMarker(_mCateg);
      if isBitSet(_wFlt, FLT_CATEG)
        set _wFlt := _wFlt xor FLT_CATEG;
      rereadrecord;
    }
  end;
}

cmOk:
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Формирование отчета', 0);
  var rslt: integer = CreateSqlTmpTables;
  if rslt = tsOk
  {
    PrepareData;
    PrintXlsReport(false, TranslatePath('%StartPath%xls\ag_shr_spravka.xltm'));
  }
  else
    Message('Ошибка создания временных таблиц: ' + rslt);
  DropSqlTmpTables;
  StopVisual('', 0);
}

cmInit:
{
  if not ReadMyDsk(_date, 'ag_shr_spravka_date', false)
    _date := cur_date;
  if not ReadMyDsk(_wFlt, 'ag_shr_spravka_wFlt', false)
    _wFlt := 0;
  if not ReadMyDsk(_wFltBonus, 'ag_shr_spravka_wFltBonus', false)
    _wFltBonus := FLTBONUS_VRED + FLTBONUS_SEKR + FLTBONUS_NOBONUS;
  if not ReadMyDSK(_wFltVacancy, 'ag_shr_spravka_wFltVacancy', false)
    _wFltVacancy := 0;
  if not ReadMyDSK(_wFotBonus, 'ag_shr_spravka_wFotBonus', false)
    _wFotBonus := FOTBONUS_SEKR + FOTBONUS_VRED;
  _mDep := InitMarker('ag_shr_spravka_mDep', 8, 30, 10, true);
  _mPodgr := InitMarker('ag_shr_spravka_mPodgr', 8, 10, 10, true);
  _mCateg := InitMarker('ag_shr_spravka_mCateg', 8, 10, 10, true);
}

cmDone:
{
  SaveMyDsk(_date, 'ag_shr_spravka_date');
  SaveMyDsk(_wFlt, 'ag_shr_spravka_wFlt');
  SaveMyDsk(_wFltBonus, 'ag_shr_spravka_wFltBonus');
  SaveMyDsk(_wFltVacancy, 'ag_shr_spravka_wFltVacancy');
  SaveMyDsk(_wFotBonus, 'ag_shr_spravka_wFotBonus');
  DoneMarker(_mDep, 'ag_shr_spravka_mDep');
  DoneMarker(_mPodgr, 'ag_shr_spravka_mPodgr');
  DoneMarker(_mCateg, 'ag_shr_spravka_mCateg');
}

end;

end.



VipInterface UserReport_ag_shr_spravka Implements IUserReport licensed(free);
Interface UserReport_ag_shr_spravka;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::ag_shr_spravka);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Агат. Справка по ШР';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    #__UNUSED__(Level)
    GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'STAFFMAINMENU';
    end;
  end;
end.
