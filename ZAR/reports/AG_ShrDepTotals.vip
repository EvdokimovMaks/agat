#include Query.vih
#include ag_shr.vih

#component "AGAT"

interface AG_ShrDepTotals;

table struct TmpShrDepTotals (
  cDep     : comp
 ,cCateg   : comp
 ,cPodgr   : comp
 ,Qty      : double
 ,Oklad    : double
 ,BonusVred: double
 ,BonusPrem: double
 ,BonusSekr: double
 ,FOT      : double
) with index (
  i01 = cDep
 ,i02 = cDep + cPodgr
 ,i03 = cDep + cPodgr + cCateg
);

create view
var
  _cDep, _cPodgr, _cCateg: comp;
as select
  TmpShrDepTotals.cDep
from
  TmpShrDepTotals

bounds ByDep = _cDep     == TmpShrDepTotals.cDep

bounds ByPodgr = _cDep   == TmpShrDepTotals.cDep
             and _cPodgr == TmpShrDepTotals.cPodgr

bounds ByCateg = _cDep   == TmpShrDepTotals.cDep
             and _cPodgr == TmpShrDepTotals.cPodgr
             and _cCateg == TmpShrDepTotals.cCateg
;

function  getCount: longint;
{
  result := RecordsInTable(#TmpShrDepTotals);
}

function  first: boolean;
{
  result := getfirst TmpShrDepTotals = tsOk;
}

function  next: boolean;
{
  result := getnext TmpShrDepTotals = tsOk;
}

procedure filterByDepPodgrCateg(ccDep: comp; ccPodgr: comp; ccCateg: comp);
{
  delAllFilters;
  _cDep   := ccDep;
  _cPodgr := ccPodgr;
  _cCateg := ccCateg;
  if not BoundActive(tbByCateg) AddBounds(tbByCateg);
}

procedure filterByDepPodgr(ccDep: comp; ccPodgr: comp);
{
  delAllFilters;
  _cDep   := ccDep;
  _cPodgr := ccPodgr;
  if not BoundActive(tbByPodgr) AddBounds(tbByPodgr);
}

procedure filterByDep(ccDep: comp);
{
  delAllFilters;
  _cDep   := ccDep;
  if not BoundActive(tbByDep) AddBounds(tbByDep);
}

procedure delAllFilters;
{
  if BoundActive(tbByDep)   SubBounds(tbByDep);
  if BoundActive(tbByPodgr) SubBounds(tbByPodgr);
  if BoundActive(tbByCateg) SubBounds(tbByCateg);
}

sql query qData =
  select
    %macroFields%
   ,sum(Qty) as Qty
   ,sum(Oklad) as Oklad
   ,sum(BonusVred) as BonusVred
   ,sum(BonusPrem) as BonusPrem
   ,sum(BonusSekr) as BonusSekr
   ,sum(FOT) as FOT
  from TmpSS
  group by %macroGroupBy%
;

constructor Create(ss: IAG_StaffStruct; bGroupByDep: boolean;
                   bGroupByPodgr: boolean; bGroupByCateg: boolean);
{
  ss.toNewSqlTmpTable('TmpSS');

  var q: IQuery = queryManager.createQuery(qData);
  var sFields: string = '';
  sFields += if(bGroupByDep, 'cDep', '');
  sFields += if(bGroupByPodgr, if(sFields='', '', ',')+ 'cPodgr', '');
  sFields += if(bGroupByCateg, if(sFields='', '', ',')+ 'cCateg', '');
  q.setMacro('macroFields', sFields);
  q.setMacro('macroGroupBy', sFields);
  sqlCopyInto(q, #TmpShrDepTotals, true);
  sqlDropTmpTable('TmpSS');
  result := true;
}

property cDep     : comp       absolute TmpShrDepTotals.cDep;
property cCateg   : comp       absolute TmpShrDepTotals.cCateg;
property cPodgr   : comp       absolute TmpShrDepTotals.cPodgr;
property Qty      : double     absolute TmpShrDepTotals.Qty;
property Oklad    : double     absolute TmpShrDepTotals.Oklad;
property BonusVred: double     absolute TmpShrDepTotals.BonusVred;
property BonusPrem: double     absolute TmpShrDepTotals.BonusPrem;
property BonusSekr: double     absolute TmpShrDepTotals.BonusSekr;
property FOT      : double     absolute TmpShrDepTotals.FOT;

index idxDep auto;
index idxDepPodgr auto;
index idxDepPodgrCateg auto;

end.