//Отчет по штатному расписанию
#include Query.vih
#include CatFunc.vih
#include UserReport.vih
#include DeptIer.vih

#component "AGAT"

interface ag_shr 'АГАТ. Штатное расписание' escclose;
show(,,60,8);

table struct tCatDep (
  Nrec   : comp,
  cParent: comp,
  Code   : string[100],
  Name   : string
) with index (
  i00 = Nrec,
  i01 = cParent + Code
);

table struct tSS (
  cCatDep  : comp,
  sSort    : string[50],
  cSS      : comp,
  cPost    : comp,
  cCateg   : comp,
  cPodgr   : comp,
  Qty      : double,
  Salary   : double,
  Tarif    : double,
  BonusVred: double,
  BonusPrem: double,
  BonusSekr: double
) with index (
  i01 = cCatDep + sSort
);

table struct tTotals (
  cCatDep: comp,
  wType  : word, //0 - по подразделению, 1 - по подразделению/подгруппе, 2 - по подразделению/подгруппе/категории
  cPodgr : comp,
  cCateg : comp,
  Qty    : double,
  Sum    : double
) with index (
  i01 = wType + cCatDep,
  i02 = wType + cCatDep + cPodgr,
  i03 = wType + cCatDep + cPodgr + cCateg
);


var
  _departIer: DepartIer;
  _catFunc: CatalogsFunctions;
  pXL: XLSRepBuilder;
  _date: date;
  _flags: comp;
  _mDep: TPtr;

create view
as select
  tCatDep.Nrec
from
  tCatDep,
  tSS,
  tTotals
;

create view vRep
var
  _cCatDep: comp;
  _cCatDepTop: comp;
as select
  tSS.cCatDep
from
  tCatDep tCatDepTop,
  tCatDep tCatDepChild,
  tCatDep tCatDep,
  tSS,
  Catalogs CatPost,
  SpKau SpkPodgr,
  SpKau SpkCateg,
  Appointments App,
  Persons,
  tTotals tTotals0,
  tTotals tTotals1,
  tTotals tTotals2,
  tTotals tTotals3,
  tTotals tTotals4,
  tTotals tTotals5
where ((
  _cCatDepTop     == tCatDepTop.cParent   and
  _cCatDep        == tCatDepChild.cParent and
  _cCatDep        == tCatDep.Nrec         and
  _cCatDep        == tSS.cCatDep          and
  tSS.cPost       == CatPost.Nrec         and
  tSS.cPodgr      == spkPodgr.Nrec        and
  tSS.cCateg      == spkCateg.Nrec        and
  tSS.cSS         == App.StaffStr         and
  (App.AppointDate <= _date and (App.DismissDate = 0 or App.DismissDate >= _date)) and
  App.Person      == Persons.Nrec         and
  0               == tTotals0.wType       and
  _cCatDep        == tTotals0.cCatDep     and
  1               == tTotals1.wType       and
  _cCatDep        == tTotals1.cCatDep     and
  2               == tTotals2.wType       and
  _cCatDep        == tTotals2.cCatDep     and
  tTotals1.cPodgr == tTotals2.cPodgr      and
  3               == tTotals3.wType       and
  _cCatDep        == tTotals3.cCatDep     and
  4               == tTotals4.wType       and
  _cCatDep        == tTotals4.cCatDep     and
  5               == tTotals5.wType       and
  _cCatDep        == tTotals5.cCatDep     and
  tTotals4.cPodgr == tTotals5.cPodgr
));


create view vTotals
var
  _cCatDep: comp;
as select
  tCatDepChild.Nrec
from
  tCatDep tCatDepChild,
  tTotals tTotalsChild,
  tTotals tTotalsCur,
  //Итоги по текущему подразделению с учетом подчиненных
  tTotals tTotals2,
  tTotals tTotals1,
  tTotals tTotals0,
  //Итоги по текущему подразделению без учета подчиненных
  tTotals tTotals5,
  tTotals tTotals4,
  tTotals tTotals3
where ((
  vTotals._cCatDep    == tCatDepChild.cParent and

  2                   == tTotalsChild.wType   and
  tCatDepChild.Nrec   == tTotalsChild.cCatDep and

  2                   == tTotalsCur.wType     and
  vTotals._cCatDep    == tTotalsCur.cCatDep   and
  tTotalsChild.cPodgr == tTotalsCur.cPodgr    and
  tTotalsChild.cCateg == tTotalsCur.cCateg    and

  //Итоги по текущему подразделению с учетом подчиненных
  2                   == tTotals2.wType       and
  vTotals._cCatDep    == tTotals2.cCatDep     and

  1                   == tTotals1.wType       and
  vTotals._cCatDep    == tTotals1.cCatDep     and
  tTotals2.cPodgr     == tTotals1.cPodgr      and

  0                   == tTotals0.wType       and
  vTotals._cCatDep    == tTotals0.cCatDep     and

  //Итоги по текущему подразделению без учета подчиненных
  5                   == tTotals5.wType       and
  vTotals._cCatDep    == tTotals5.cCatDep     and

  4                   == tTotals4.wType       and
  vTotals._cCatDep    == tTotals4.cCatDep     and
  tTotals5.cPodgr     == tTotals4.cPodgr      and

  3                   == tTotals3.wType       and
  vTotals._cCatDep    == tTotals3.cCatDep
));

function GetDepFld: string;
{
  result := '';
  var cnt: longint = GetMarkerCount(_mDep);
  case cnt of
    0: result := 'Все подразделения';
    1:
    {
      var c: comp = 0;
      if GetMarker(_mDep, 0, c)
        result := _catFunc.GetCatalogsName(c);
    }
    else
      result := 'Выбрано подразделений: ' + cnt;
  end;
}


screen sc1;
  fields
    _date: noprotect;
    _flags: noprotect, noframe;
    [DepFld] GetDepFld: protect, pickbutton;
  buttons
    cmOk, default;
    cmCancel;
<<

`Дата отчета`.@@@@@@@@@@

  [.] Отображать сотрудников`
  [.] Фильтр по подразделениям`.@@@@@@@@@@@@@@@@@@@@@@@@@@@

<.Продолжить.> <.Отмена.>
>>
end;


//#region sql query qCatDep
sql query qCatDep =
  insert tCatDep (Nrec, cParent, Name, Code)
  select
    CatHist.cCat    as Nrec,
    coalesce(CatParent.Nrec, CatTop.Nrec) as cParent,
    CatHist.Name    as Name,
    Catalogs.Code   as Code
  from
    Catalogs
    inner join (
      select CatHist.cCat, max(CatHist.Dat1) MaxDate: date
      from CatHist
      where :dateSts >= CatHist.Dat1 and (CatHist.wFld1 <> 2 or #Date(0,0,0) = CatHist.Dat2 or :dateSts <= CatHist.Dat2)
      group by CatHist.cCat
    ) CatH1 on (Catalogs.NRec = CatH1.cCat)
    inner join (
      select CatHist.cCat, CatHist.Dat1, max(cast(CatHist.lastuser as integer)) MaxNpp
      from CatHist
      where :dateSts >= CatHist.Dat1 and (CatHist.wFld1 <> 2 or #Date(0,0,0) = CatHist.Dat2 or :dateSts <= CatHist.Dat2)
      group by CatHist.cCat, CatHist.Dat1
    ) CatH2 on (Catalogs.NRec = CatH2.cCat and CatH1.MaxDate = CatH2.Dat1)
    inner join CatHist on (Catalogs.NRec = CatHist.cCat and CatH1.MaxDate = CatHist.Dat1 and CatH2.MaxNpp = cast(CatHist.lastuser as integer))
    inner join Catalogs CatTop on CatTop.SysCode = :topEntry
    left  join Catalogs CatParent on CatParent.Nrec = CatHist.cParent %CatParentFltr
  where
    Catalogs.lPr = 0 and Catalogs.MainLink = CatTop.Nrec and
    case :topEntry when -11 then 1 else 0 end <> CatHist.bMulti and
    Catalogs.DatN <= :dateSts and (Catalogs.DatOk = 0 or Catalogs.DatOk >= :dateSts)
    %WhereFltr
  union all
    select
      Catalogs.Nrec        as Nrec,
      #comp(0)             as cParent,
      'Штатное расписание' as Name,
      'ШР'                 as Code
    from
      Catalogs
    where
      Catalogs.SysCode = :topEntry
;
//#endregion sql query qCatDep

//#region sql query qSS
sql query qSS =
  Insert tSS (cCatDep, sSort, cSS, cPost, cCateg, cPodgr, Qty, Salary, Tarif, BonusVred, BonusPrem, BonusSekr)
  Select
    tCatDep.Nrec                      as cCatDep,
    case
      when coalesce(avPriority.vString,'') <> ''
        then SubString('00000000000000000000', 1, 20-length(trim(avPriority.vString))) + trim(avPriority.vString)
      when trim(catPost.Code)='' then '99999999999999999999'
      else SubString('00000000000000000000', 1, 20-length(trim(catPost.Code))) + trim(catPost.Code)
    end +
    cast((999999999999-ssHist.hTaxRate-coalesce(tRaise.BonusVred, 0)-coalesce(tRaise.BonusPrem, 0)-coalesce(tRaise.BonusSekr, 0)) as string)
                                      as sSort,
    ss.Nrec                           as cSS,
    ss.Post                           as cPost,
    coalesce(avCateg.vComp, #comp(0)) as cCateg,
    coalesce(avPodgr.vComp, #comp(0)) as cPodgr,
    ssHist.hWorkStations              as Qty,
    case when ssHist.hTaxRate > 1000
         then ssHist.hTaxRate
         else 0
    end                               as Salary,
    case when ssHist.hTaxRate <= 1000
         then ssHist.hTaxRate
         else 0
    end                               as Tarif,
    coalesce(tRaise.BonusVred, 0)     as BonusVred,
    coalesce(tRaise.BonusPrem, 0)     as BonusPrem,
    coalesce(tRaise.BonusSekr, 0)     as BonusSekr
  from
    tCatDep
  join StaffStruct ss
    on ss.Department = tCatDep.Nrec and
       ss.dInput <= :dateSts and
       (ss.dClose = 0 or ss.dClose >= :dateSts )
  join (Select StaffStr, max(wFld) as wFld
        from HistoryStr
        where dHist <= :dateSts
        group by StaffStr) ssHistLast on ssHistLast.StaffStr = ss.Nrec
  join HistoryStr ssHist
    on ssHist.StaffStr = ss.Nrec and ssHist.wFld = ssHistLast.wFld and ssHist.hWorkStations > 0
  left join Catalogs catPost
    on catPost.Nrec = ss.Post
  left join AttrVal avPriority
    on avPriority.wTable=25018 and avPriority.cRec=ss.Nrec and avPriority.cAttrNam=#comp(00010000000025DAh) //Приоритет
  left join KlKatego
    on KlKatego.Nrec = ssHist.cSpr2
  left join AttrVal avCateg
    on avCateg.wTable = 16005 and        //coKlKatego
       avCateg.cRec = KlKatego.Nrec and
       avCateg.cAttrNam = :cAttrNamCateg //ATTRNAM_NREC_KLKATEGO_CATEG
  left join AttrVal avPodgr
    on avPodgr.wTable = 16005 and        //coKlKatego
       avPodgr.cRec = KlKatego.Nrec and
       avPodgr.cAttrNam = :cAttrNamPodgr //ATTRNAM_NREC_KLKATEGO_PODGR
  left join ( select
                RaiseStS.StaffStr as cStaffStr,
                sum(case when CatRaise.Name like '%вредность%'
                           then (case when Str_RHist.wHAttr = 2 then (case when ssHist.hTaxRate > 1000 then ssHist.hTaxRate else 0 end) * Str_RHist.RHSum / 100 else Str_RHist.RHSum end)
                         else 0
                    end) as BonusVred,
                sum(case when CatRaise.Name like '%премия%'
                           then (case when Str_RHist.wHAttr = 2 then (case when ssHist.hTaxRate > 1000 then ssHist.hTaxRate else 0 end) * Str_RHist.RHSum / 100 else Str_RHist.RHSum end)
                         else 0
                    end) as BonusPrem,
                sum(case when CatRaise.Name like '%секретность%'
                           then (case when Str_RHist.wHAttr = 2 then (case when ssHist.hTaxRate > 1000 then ssHist.hTaxRate else 0 end) * Str_RHist.RHSum / 100 else Str_RHist.RHSum end)
                         else 0
                    end) as BonusSekr
              from
                Str_RHist
              join RaiseStS
                on RaiseStS.Nrec = Str_RHist.cRaiseStS
              join Catalogs CatRaise
                on CatRaise.Nrec = RaiseStS.RaiseType
              join (Select StaffStr, max(wFld) as wFld
                    from HistoryStr
                    where dHist <= :dateSts
                    group by StaffStr) ssHistLast on ssHistLast.StaffStr = RaiseStS.StaffStr
              join HistoryStr ssHist
                on ssHist.StaffStr = RaiseStS.StaffStr and ssHist.wFld = ssHistLast.wFld
              where
                Str_RHist.dRec <= :dateSts and (Str_RHist.dEnd = 0 or Str_RHist.dEnd >= :dateSts)
              group by RaiseStS.StaffStr
            ) tRaise
    on tRaise.cStaffStr = ss.Nrec
;
//#endregion sql query qSS

//#region sql queries Totals
sql query qTotals2 =
  Select
    tSS.cCatDep,
    2 as wType,
    tSS.cPodgr,
    tSS.cCateg,
    sum(tSS.Qty) as Qty,
    sum(tSS.Qty * (tSS.Salary + tSS.BonusVred + tSS.BonusPrem + tSS.BonusSekr)) as Sum
  from
    tSS
  group by
    tSS.cCatDep,
    tSS.cPodgr,
    tSS.cCateg
;
//#endregion sql queries Totals

function CreateSqlTmpTables: integer;
{
  var s: longint = 0;

  //Готовим sql таблицу с фильтрами
  sqlFreeStr(s);
  sqlAddStr(s, 'table TmpFltr (cRec: comp);');
  result := sqlCreateTmpTable(s, ctmNormal);
  if result != tsOk exit;


  //Готовим sql таблицу tCatDep со структурными единицами ШР, действующими на дату _date
  sqlFreeStr(s);
  sqlAddStr(s, 'table tCatDep (Nrec: comp, cParent: comp, Name: string, Code: string[100]);');
  result := sqlCreateTmpTable(s, ctmNormal);
  if result != tsOk exit;

  //Готовим sql таблицу tSS с вакансиями ШР
  sqlFreeStr(s);
  sqlAddStr(s, 'table tSS (');
  sqlAddStr(s, '  cCatDep  : comp,      ');
  sqlAddStr(s, '  sSort    : string[50],');
  sqlAddStr(s, '  cSS      : comp,      ');
  sqlAddStr(s, '  cPost    : comp,      ');
  sqlAddStr(s, '  cCateg   : comp,      ');
  sqlAddStr(s, '  cPodgr   : comp,      ');
  sqlAddStr(s, '  Qty      : double,    ');
  sqlAddStr(s, '  Salary   : double,    ');
  sqlAddStr(s, '  Tarif    : double,    ');
  sqlAddStr(s, '  BonusVred: double,    ');
  sqlAddStr(s, '  BonusPrem: double,    ');
  sqlAddStr(s, '  BonusSekr: double     ');
  sqlAddStr(s, ');');
  result := sqlCreateTmpTable(s, ctmNormal);
  if result != tsOk exit;

  //Готовим таблицу с итогами по структурным единицам ШР, подгруппами и категориями
  sqlFreeStr(s);
  sqlAddStr(s, 'table tTotals (');
  sqlAddStr(s, '  cCatDep: comp,');
  sqlAddStr(s, '  wType  : word,');
  sqlAddStr(s, '  cPodgr : comp,');
  sqlAddStr(s, '  cCateg : comp,');
  sqlAddStr(s, '  Qty    : double,');
  sqlAddStr(s, '  Sum    : double');
  sqlAddStr(s, ') with index (');
  sqlAddStr(s, '  i01 = wType + cCatDep,');
  sqlAddStr(s, '  i02 = wType + cCatDep + cPodgr,');
  sqlAddStr(s, '  i03 = wType + cCatDep + cPodgr + cCateg');
  sqlAddStr(s, ');');
  result := sqlCreateTmpTable(s, ctmNormal);
}

procedure DropSqlTmpTables;
{
  //Дропаем созданные sql таблицы
  sqlDropTmpTable('TmpFltr');
  sqlDropTmpTable('tCatDep');
  sqlDropTmpTable('tSS');
  sqlDropTmpTable('tTotals');
}

//Заполняет таблицу tTotals итогами по подразделению __cCatDep без учета подчиненных
//только в том случае, если подразделение содержит подчиненные. Итоги по подразеделению
//без подчиненных сформирует CalcHierTotals.
//Итоги формируются на 3-х уровнях wType=5: Подгруппа/Категория, wType=4: Подгруппа, wType=3: Общий итог по подразделению
procedure CalcNotHierTotals(__cCatDep: comp);
{
  vTotals._cCatDep := __cCatDep;

  //Если по текущему подразделению нет подчиненных - не добавляем итоги без учета иерархии,
  //т.к. итоги по нему будут добавлены в CalcHierTotals
  if vTotals.getFirst tCatDepChild != tsOk exit;

  //добавляем итоги по текущему подразделению без учета подчиненных
  vTotals._loop tTotals2
  {
    vTotals.ClearBuffer(vTotals.tntTotals5);
    vTotals.tTotals5.wType   := 5;
    vTotals.tTotals5.cCatDep := vTotals._cCatDep;
    vTotals.tTotals5.cPodgr  := vTotals.tTotals2.cPodgr;
    vTotals.tTotals5.cCateg  := vTotals.tTotals2.cCateg;
    vTotals.tTotals5.Qty     := vTotals.tTotals2.Qty;
    vTotals.tTotals5.Sum     := vTotals.tTotals2.Sum;
    vTotals.Insert current tTotals5;

    if vTotals.getFirst tTotals4 != tsOk
    {
      vTotals.ClearBuffer(vTotals.tntTotals4);
      vTotals.tTotals4.wType   := 4;
      vTotals.tTotals4.cCatDep := vTotals.tTotals5.cCatDep;
      vTotals.tTotals4.cPodgr  := vTotals.tTotals5.cPodgr;
      vTotals.tTotals4.Qty     := vTotals.tTotals5.Qty;
      vTotals.tTotals4.Sum     := vTotals.tTotals5.Sum;
      vTotals.Insert current tTotals4;
    }
    else
    {
      vTotals.tTotals4.Qty     += vTotals.tTotals5.Qty;
      vTotals.tTotals4.Sum     += vTotals.tTotals5.Sum;
      vTotals.Update current tTotals4;
    }

    if vTotals.getFirst tTotals3 != tsOk
    {
      vTotals.ClearBuffer(vTotals.tntTotals3);
      vTotals.tTotals3.wType   := 3;
      vTotals.tTotals3.cCatDep := vTotals.tTotals5.cCatDep;
      vTotals.tTotals3.Qty     := vTotals.tTotals5.Qty;
      vTotals.tTotals3.Sum     := vTotals.tTotals5.Sum;
      vTotals.Insert current tTotals3;
    }
    else
    {
      vTotals.tTotals3.Qty     += vTotals.tTotals5.Qty;
      vTotals.tTotals3.Sum     += vTotals.tTotals5.Sum;
      vTotals.Update current tTotals3;
    }
  }
}

procedure CalcHierTotals(__cCatDep: comp);
{
  //Записываем в маркер нреки подчиненных подразделений
  var m: TPtr = InitMarker('', 8, 50, 10, false);
  vTotals._cCatDep := __cCatDep;
  vTotals._loop tCatDepChild
    InsertMarker(m, vTotals.tCatDepChild.Nrec);

  //Подсчитываем итоги по подчиненным подразделениям
  var i: longint = 0;
  var c: comp = 0;
  for(i := 0; GetMarker(m, i, c); i++)
    CalcHierTotals(c);
  DoneMarker(m, '');

  //Подсчитываем итоги по текущему подразделению
  vTotals._cCatDep := __cCatDep;
  vTotals._loop tCatDepChild
    vTotals._loop tTotalsChild
      if vTotals.getFirst tTotalsCur != tsOk
      {
        vTotals.tTotalsCur.wType   := 2;
        vTotals.tTotalsCur.cCatDep := __cCatDep;
        vTotals.tTotalsCur.cPodgr  := vTotals.tTotalsChild.cPodgr;
        vTotals.tTotalsCur.cCateg  := vTotals.tTotalsChild.cCateg;
        vTotals.tTotalsCur.Qty     := vTotals.tTotalsChild.Qty;
        vTotals.tTotalsCur.Sum     := vTotals.tTotalsChild.Sum;
        vTotals.Insert current tTotalsCur;
      }
      else
      {
        vTotals.tTotalsCur.Qty += vTotals.tTotalsChild.Qty;
        vTotals.tTotalsCur.Sum += vTotals.tTotalsChild.Sum;
        vTotals.Update current tTotalsCur;
      }

  //Подсчитываем итоги по текущему подразделению в разрезах "подразделение/подгруппа", "подразделение в целом"
  vTotals._loop tTotals2
  {
    if vTotals.getFirst tTotals1 != tsOk
    {
      vTotals.ClearBuffer(vTotals.tntTotals1);
      vTotals.tTotals1.wType   := 1;
      vTotals.tTotals1.cCatDep := vTotals.tTotals2.cCatDep;
      vTotals.tTotals1.cPodgr  := vTotals.tTotals2.cPodgr;
      vTotals.tTotals1.Qty     := vTotals.tTotals2.Qty;
      vTotals.tTotals1.Sum     := vTotals.tTotals2.Sum;
      vTotals.Insert current tTotals1;
    }
    else
    {
      vTotals.tTotals1.Qty     += vTotals.tTotals2.Qty;
      vTotals.tTotals1.Sum     += vTotals.tTotals2.Sum;
      vTotals.Update current tTotals1;
    }
    if vTotals.getFirst tTotals0 != tsOk
    {
      vTotals.ClearBuffer(vTotals.tntTotals0);
      vTotals.tTotals0.wType   := 0;
      vTotals.tTotals0.cCatDep := vTotals.tTotals2.cCatDep;
      vTotals.tTotals0.Qty     := vTotals.tTotals2.Qty;
      vTotals.tTotals0.Sum     := vTotals.tTotals2.Sum;
      vTotals.Insert current tTotals0;
    }
    else
    {
      vTotals.tTotals0.Qty     += vTotals.tTotals2.Qty;
      vTotals.tTotals0.Sum     += vTotals.tTotals2.Sum;
      vTotals.Update current tTotals0;
    }
  }
}

procedure PrepareData;
{

  //Признак, что применен фильтр по подразделениям
  var isDepFltrSet: boolean = (_flags and 2) = 2 and GetMarkerCount(_mDep) > 0;

  //Если есть фильтр по подразделениям - пишем нреки выбранных подразделений в sql-таблицу TmpFltr
  if isDepFltrSet
  {
    var qFltr: IQuery = queryManager.createQuery('insert TmpFltr (cRec) Values (:cRec)');
    var cFltrRec: comp = 0;
    var lFltrInd: longint = 0;
    for (lFltrInd := 0; GetMarker(_mDep, lFltrInd, cFltrRec); lFltrInd++)
      qFltr.setParam('cRec', cFltrRec).execute;
  }

  //Заполняем sql таблицу tCatDep действующими на дату _date структурными единицами ШР
  var rslt: integer = queryManager.createQuery(qCatDep)
                                  .setParam('dateSts', _date)
                                  .setParam('topEntry', -11)
                                  .setMacro('CatParentFltr', if(isDepFltrSet, 'and CatParent.Nrec in (select cRec from TmpFltr)', ''))
                                  .setMacro('WhereFltr', if(isDepFltrSet, 'and Catalogs.Nrec in (select cRec from TmpFltr)', ''))
                                  .execute
                                  .errorCode;
  if rslt != tsOk { Message('Ошибка выборки структурных единиц ШР: ' + rslt, error); exit; }

  //Заполняем sql таблицу tSS вакансиями ШР
  rslt := queryManager.createQuery(qSS)
                      .setParam('dateSts', _date)
                      .setParam('cAttrNamCateg', ATTRNAM_NREC_KLKATEGO_CATEG)
                      .setParam('cAttrNamPodgr', ATTRNAM_NREC_KLKATEGO_PODGR)
                      .execute
                      .errorCode;
  if rslt != tsOk { Message('Ошибка выборки вакансий ШР: ' + rslt, error); exit; }

  //Заполняем временные таблицы интерфейса
  mtClear(tntCatDep, mfNormal);
  var q1: IQuery = queryManager.createQuery('select * from tCatDep').execute;
  sqlCopyInto(q1, tntCatDep, true);

  mtClear(tntSS, mfNormal);
  var q2: IQuery = queryManager.createQuery('select * from tSS').execute;
  sqlCopyInto(q2, tntSS, true);

  //Заполняем таблицу tTotals итогами без учета иерархии
  mtClear(tntTotals, mfNormal);
  var q: IQuery = queryManager.createQuery(qTotals2);
  rslt := q.execute.errorCode;
  if rslt = tsOk
    sqlCopyInto(q, tntTotals, true);
  else
    Message('Ошибка расчета итогов по категориям:' + rslt, error);

  //Дополняем таблицу tTotals итогами без учета подчиненных по подразделениям,
  //у которых есть подчиненные
  _loop tCatDep
    CalcNotHierTotals(tCatDep.Nrec);

  //Дополняем таблицу tTotals итогами с учетом иерархии
  vRep._cCatDepTop := 0;
    vRep._loop tCatDepTop
      CalcHierTotals(vRep.tCatDepTop.Nrec);
}

procedure PrintXlsHierTotals(cCatStaffStruct: comp; wLevel: word = 0);
{
  //Итоги по текущему узлу структурных единиц ШР
  set vRep._cCatDep := cCatStaffStruct;
  if vRep.getfirst tCatDep = tsOk
  {
    if vRep.getfirst tTotals0 = tsOk
    {
      pXL.ClearTblBuffer;
      pXL.SetTblNumberFldValue('Level'    , wLevel);
      pXL.SetTblNumberFldValue('NPP'      , -1);
      pXL.SetTblStringFldValue('PostName' , 'Итого по ' + vRep.tCatDep.Name);
      pXL.SetTblNumberFldValue('Qty'      , vRep.tTotals0.Qty);
      pXL.SetTblNumberFldValue('Total'    , vRep.tTotals0.Sum);
      pXL.InsTblRow;
    }

    vRep._loop tTotals1
    {
      pXL.ClearTblBuffer;
      pXL.SetTblNumberFldValue('Level'    , wLevel);
      pXL.SetTblNumberFldValue('NPP'      , -2);
      pXL.SetTblStringFldValue('PostName' , 'В том числе ' + if (vRep.tTotals1.cPodgr = 0, 'НГр',
                                            ShowKau(KODGRKAU_PODGR, vRep.tTotals1.cPodgr)));
      pXL.SetTblNumberFldValue('Qty'      , vRep.tTotals1.Qty);
      pXL.SetTblNumberFldValue('Total'    , vRep.tTotals1.Sum);
      pXL.InsTblRow;

      vRep._loop tTotals2
      {
        if vRep.tTotals2.cPodgr = 0 continue;
        pXL.ClearTblBuffer;
        pXL.SetTblNumberFldValue('Level'    , wLevel);
        pXL.SetTblNumberFldValue('NPP'      , -3);
        pXL.SetTblStringFldValue('PostName' , ShowKau(KODGRKAU_CATEG, vRep.tTotals2.cCateg) + ' ' +
                                              ShowKau(KODGRKAU_PODGR, vRep.tTotals2.cPodgr));
        pXL.SetTblNumberFldValue('Qty'      , vRep.tTotals2.Qty);
        pXL.SetTblNumberFldValue('Total'    , vRep.tTotals2.Sum);
        pXL.InsTblRow;
      }

    }

  }
}

procedure PrintXlsNoHierTotals(cCatStaffStruct: comp; wLevel: word = 0);
{
  //Итоги по текущему узлу структурных единиц ШР
  set vRep._cCatDep := cCatStaffStruct;
  if vRep.getfirst tCatDep = tsOk
  {
    if vRep.getfirst tTotals3 = tsOk
    {
      pXL.ClearTblBuffer;
      pXL.SetTblNumberFldValue('Level'    , wLevel);
      pXL.SetTblNumberFldValue('NPP'      , -4);
      pXL.SetTblStringFldValue('PostName' , 'Итого по ' + vRep.tCatDep.Name);
      pXL.SetTblNumberFldValue('Qty'      , vRep.tTotals3.Qty);
      pXL.SetTblNumberFldValue('Total'    , vRep.tTotals3.Sum);
      pXL.InsTblRow;
    }

    vRep._loop tTotals4
    {
      pXL.ClearTblBuffer;
      pXL.SetTblNumberFldValue('Level'    , wLevel);
      pXL.SetTblNumberFldValue('NPP'      , -5);
      pXL.SetTblStringFldValue('PostName' , 'В том числе ' + if (vRep.tTotals4.cPodgr = 0, 'НГр',
                                            ShowKau(KODGRKAU_PODGR, vRep.tTotals4.cPodgr)));
      pXL.SetTblNumberFldValue('Qty'      , vRep.tTotals4.Qty);
      pXL.SetTblNumberFldValue('Total'    , vRep.tTotals4.Sum);
      pXL.InsTblRow;

      vRep._loop tTotals5
      {
        if vRep.tTotals5.cPodgr = 0 continue;
        pXL.ClearTblBuffer;
        pXL.SetTblNumberFldValue('Level'    , wLevel);
        pXL.SetTblNumberFldValue('NPP'      , -6);
        pXL.SetTblStringFldValue('PostName' , ShowKau(KODGRKAU_CATEG, vRep.tTotals5.cCateg) + ' ' +
                                              ShowKau(KODGRKAU_PODGR, vRep.tTotals5.cPodgr));
        pXL.SetTblNumberFldValue('Qty'      , vRep.tTotals5.Qty);
        pXL.SetTblNumberFldValue('Total'    , vRep.tTotals5.Sum);
        pXL.InsTblRow;
      }
    }
  }
}

procedure PrintXlsNode(cCatStaffStruct: comp; wLevel: word = 0);
{
  //Вакансии по текущему узлу структурных единиц ШР
  set vRep._cCatDep := cCatStaffStruct;
  if vRep.getfirst tCatDep = tsOk
  {
    var npp: longint = 1;

    if vRep.getfirst tSS != tsOk
    {
      if vRep.getfirst tTotals0 = tsOk
        if vRep.tTotals0.Qty > 0
        {
          pXL.ClearTblBuffer;
          pXL.SetTblNumberFldValue('Level'    , wLevel);
          pXL.SetTblStringFldValue('SSName'   , vRep.tCatDep.Name);
          pXL.SetTblNumberFldValue('NPP'      , npp++);
          pXL.InsTblRow;
        }
    }
    else
    {
      vRep._loop tSS
      {
        pXL.ClearTblBuffer;
        pXL.SetTblNumberFldValue('Level'    , wLevel);
        pXL.SetTblStringFldValue('SSName'   , if(npp = 1, vRep.tCatDep.Name, ''));
        pXL.SetTblStringFldValue('SSCode'   , if(npp = 1, vRep.tCatDep.Code, ''));
        pXL.SetTblStringFldValue('PostName' , if(vRep.getfirst CatPost  = tsOk, vRep.tCatDep.Code + ' ' + vRep.CatPost.Name, ''));
        pXL.SetTblStringFldValue('Categ'    , if(vRep.getfirst SpkCateg = tsOk, vRep.SpkCateg.Name, ''));
        pXL.SetTblStringFldValue('Podgr'    , if(vRep.getfirst SpkPodgr = tsOk, vRep.SpkPodgr.Name, 'НГр'));
        pXL.SetTblNumberFldValue('Qty'      , vRep.tSS.Qty);

        if vRep.tSS.Salary = 0 and vRep.tSS.Tarif != 0
          pXL.SetTblStringFldValue('Salary', 'Оплата по сдельным расценкам')
        else
          pXL.SetTblNumberFldValue('Salary'   , vRep.tSS.Salary);

        pXL.SetTblNumberFldValue('Tarif'    , vRep.tSS.Tarif);
        pXL.SetTblNumberFldValue('BonusVred', vRep.tSS.BonusVred);
        pXL.SetTblNumberFldValue('BonusPrem', vRep.tSS.BonusPrem);
        pXL.SetTblNumberFldValue('BonusSekr', vRep.tSS.BonusSekr);
        pXL.SetTblNumberFldValue('Total'    , vRep.tSS.Qty * (vRep.tSS.Salary + vRep.tSS.BonusVred + vRep.tSS.BonusPrem + vRep.tSS.BonusSekr));
        if (_flags and 1) = 1
        {
          var isFirstCommentStr: boolean = true;
          vRep._loop App
            if vRep.getfirst Persons = tsOk
            {
              pXL.AddTblStringFldValue('Comments', if(isFirstCommentStr, '', ''#13#10'') + GetSurnameWithInitials(vRep.Persons.FIO));
              isFirstCommentStr := false;
            }
        }
        pXL.SetTblNumberFldValue('NPP'      , npp++);
        pXL.InsTblRow;
      }
      //Итоги по текущему узлу структурных единиц ШР без учета подчиненных, если по подразделению есть подчиненные
      PrintXlsNoHierTotals(cCatStaffStruct, wLevel);
    }

    //Записываем в маркер подчиненные узлы структурных единиц ШР
    var m: TPtr = InitMarker('', 8, 50, 10, false);
    vRep._loop tCatDepChild
      InsertMarker(m, vRep.tCatDepChild.Nrec);
    //Выводим данные по подчиненным структурным единицам ШР
    var i: longint = 0;
    var c: comp = 0;
    for(i := 0; GetMarker(m, i, c); i++)
      PrintXlsNode(c, wLevel + 1);
    //Убиваем маркер
    DoneMarker(m, '');
  }

  //Итоги по текущему узлу структурных единиц ШР с учетом подчиненных
  PrintXlsHierTotals(cCatStaffStruct, wLevel);

}


procedure PrintXlsReport(isCreateXLT: boolean; sXLTFileName: string);
{
  var sXLSFileName: string = if(isCreateXLT,
                                pXL.CreateXLT(sXLTFileName, True),
                                pXL.CreateReport(sXLTFileName, True));

  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Main');
  pXL.CreateTblFld('Level');
  pXL.CreateTblFld('Npp');
  pXL.CreateTblFld('SSName');
  pXL.CreateTblFld('SSCode');
  pXL.CreateTblFld('PostName');
  pXL.CreateTblFld('Categ');
  pXL.CreateTblFld('Podgr');
  pXL.CreateTblFld('Qty');
  pXL.CreateTblFld('Salary');
  pXL.CreateTblFld('BonusVred');
  pXL.CreateTblFld('BonusPrem');
  pXL.CreateTblFld('BonusSekr');
  pXL.CreateTblFld('Total');
  pXL.CreateTblFld('Comments');

  if not isCreateXLT
  {
    vRep._cCatDepTop := 0;
    vRep._loop tCatDepTop
      PrintXlsNode(vRep.tCatDepTop.Nrec);
  }

  pXL.PublishTbl('Main');

  //рассчитываем итоги по ШР в целом
  var totalQty: double = 0;
  var totalSum: double = 0;
  vRep._cCatDepTop := _catFunc.GetCatalogsNRec(-11);
  vRep._loop tCatDepTop
  {
    vRep._cCatDep := vRep.tCatDepTop.Nrec;
    if vRep.getfirst tTotals0 = tsOk
    {
      totalQty += vRep.tTotals0.Qty;
      totalSum += vRep.tTotals0.Sum;
    }
  }

  pXL.CreateVar(sXLSFileName);
  pXL.SetDateVar('dRep', _date);
  pXL.SetNumberVar('TotalQty', totalQty);
  pXL.SetNumberVar('TotalSum', totalSum);
  pXL.PublishVar;

  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}

handleevent

cmPick:
{
  case curfield of
    #DepFld:
    {
      StoreMarker(_mDep, 'CatalogsMarker');
      if RunInterface('Z_STAFFCAT::PickCatalog2', -11, 0, 100, 0) = cmDefault
      {
        DoneMarker(_mDep, '');
        _mDep := InitMarker('CatalogsMarker', 8, 30, 10, true);
        set _flags := _flags or 2;
        rereadrecord;
      }
    }
  end;
}

cmDelOnProtect:
{
  case curfield of
    #DepFld:
    {
      ClearMarker(_mDep);
      if (_flags and 2) = 2
        set _flags := _flags xor 2;
      rereadrecord;
    }
  end;
}

cmOk:
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Формирование отчета', 0);
  var rslt: integer = CreateSqlTmpTables;
  if rslt = tsOk
  {
    PrepareData;
    PrintXlsReport(false, TranslatePath('%StartPath%xls\AG_SHR.xltm'));
  }
  else
    Message('Ошибка создания временных таблиц: ' + rslt);
  DropSqlTmpTables;
  StopVisual('', 0);
}

cmInit:
{
  if not ReadMyDsk(_date, 'ag_shr_date', false) _date := cur_date;
  if not ReadMyDsk(_flags, 'ag_shr_flags', false) _flags := 0;
  _mDep := InitMarker('ag_shr_mDep', 8, 30, 10, true);
}

cmDone:
{
  SaveMyDsk(_date, 'ag_shr_date');
  SaveMyDsk(_flags, 'ag_shr_flags');
  DoneMarker(_mDep, 'ag_shr_mDep');
}

end;

end.



VipInterface UserReport_ag_shr Implements IUserReport licensed(free);
Interface UserReport_ag_shr;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::ag_shr);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Агат. Штатное расписание';
  end;

  function GetGroupName (Level : Word) : String;
  {#__UNUSED__(Level)
    GetGroupName := '';
  };

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'STAFFMAINMENU';
    end;
  end;
end.
