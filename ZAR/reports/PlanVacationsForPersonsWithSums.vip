#include Query.vih
#include SrDnZar.vih
#include TitledocHelper.vih
#include ComFiltr.vih
#include ExtAttr.vih
#include XLReport.vih

#component "AGAT"

interface PlanVacationsForPersonsWithSums 'Реестр сотрудников с запланированными отпусками за период', escClose, doAccept;
show(,,80,14);

sql query qSelect =
select coalesce(ls.nrec,#comp(0)) as clschet,
       p.nrec as cperson,
       plno.nrec as cplanotpusk,
       cast(p.tabnmb as string) as tabnmb,
       p.fio,
       coalesce(catdep.nrec, #comp(0)) as cdepartment,
       coalesce(catdep.name, '') as department,
       coalesce(catpost.nrec, #comp(0)) as cpost,
       coalesce(catpost.name, '') as post,
       plno.planyearbeg,
       plno.planyearend,
       plno.duration,
       plno.workyearbeg,
       plno.workyearend,
       coalesce(td.cnt,0) as doccnt,
       coalesce(td6.nrec,#comp(0)) as docnrec,
       coalesce(td6.docnmb, '') as docnmb,
       coalesce(td6.docdate, 0) as docdate,
       coalesce(td6.wstatus, 0) as docstatus
from planotpusk plno
join persons p on p.nrec = plno.person
left join (select cd.cnew5 as cplanotpusk, count(td.nrec) as cnt, max(td.nrec) as ctitledoc
           from contdoc cd
           join partdoc pd on pd.nrec = cd.cpart
           join titledoc td on td.nrec = pd.cdoc
           where cd.typeoper in (6,41) and cd.seqnmb=1 and cd.cnew5 <> #comp(0)
           group by cd.cnew5
          ) td on td.cplanotpusk = plno.nrec
left join (select tperson, max(nrec) as nrec
           from lschet
           where datuv=0 or datuv>:startDate
           group by tperson
          ) ls on ls.tperson=p.nrec
left join (select person, max(nrec) as nrec
           from appointments
           where dismissdate=0 or dismissdate>:startDate
           group by person
          ) apps on apps.person = p.nrec
left join appointments app on app.nrec = coalesce(apps.nrec,#comp(0))
left join titledoc td6 on td6.nrec = coalesce(td.ctitledoc,#comp(0))
left join catalogs catdep on catdep.nrec = coalesce(app.department, p.department)
left join catalogs catpost on catpost.nrec = coalesce(app.post, #comp(0))
where plno.vactype=1 and plno.planyearbeg between :startDate and :endDate
order by p.tabnmb
;

table struct t (
  clschet    : comp,
  cperson    : comp,
  cdepartment: comp,
  department : string,
  cpost      : comp,
  post       : string,
  cplanotpusk: comp,
  tabnmb     : string[10],
  fio        : string,
  planyearbeg: date,
  planyearend: date,
  duration   : double,
  srdnzar    : double,
  summa      : double,
  workyearbeg: date,
  workyearend: date,
  doccnt     : byte,
  docnrec    : comp,
  docnmb     : string[20],
  docdate    : date,
  docstatus  : word
) with index (
  i01 = fio
);

var
  _d1: date;
  _d2: date;
  _srDnZar: iSrDnZar;
  _titledocHelper: TitledocHelper;
  _cf: CommonFiltr new;
  _pXL: XLSRepBuilder;
  _xltFileName: string;
  _ea: IExtAttr;

create view
as select *
from t, t brt, contdoc, partdoc, titledoc, putvaccon
where ((
  brt.cperson   == contdoc.person   and ((contdoc.typeoper=6 or contdoc.typeoper=41) and contdoc.cnew5=brt.cplanotpusk) and
  contdoc.cpart == partdoc.nrec     and
  partdoc.cdoc  == titledoc.nrec    and
  25045         == putvaccon.wtable and
  contdoc.nrec  == putvaccon.ctable
))
;

//#region GUI настройки интерфейса

screen sc1;
show at (,,,3);
fields
  _d1: noprotect;
  _d2: noprotect;
<<

  `Период с` .@@@@@@@@@@ `по` .@@@@@@@@@@

>>
end;

embedded sc2 interface _cf;
show at (,4,,10);
end;

screen sc3;
show at (,11,,13);
buttons
  cmDoOk, default;
  cmCancel;
<<

                                      <.    Продолжить    .> <.    Отмена    .>
>>
end;

//#endregion

//#region Вспомогательные функции для отображения полей в интерфейсе и отчете

function getPeriodView(aStartDate: date; aEndDate: date): string;
{
  result := datetostr(aStartDate,'DD.MM.YYYY')+' - '+datetostr(aEndDate,'DD.MM.YYYY');
}

function getPlanPeriodView: string;
{
  result := getPeriodView(brt.planyearbeg, brt.planyearend);
}

function getWorkPeriodView: string;
{
  result := getPeriodView(brt.workyearbeg, brt.workyearend);
}

function getDocNmbView(aDocNmb: string): string;
{
  result := if(trim(aDocNmb)='','<Без номера>',aDocNmb);
}

function getDocDateView(aDocDate: date; aPrefix:string=' от '): string;
{
  result := if(aDocDate=0, '', aPrefix+datetostr(aDocDate,'DD.MM.YYYY'));
}

function getDocStatusView(aDocStatus: word): string;
{
  result := if(aDocStatus=0,'не утвержден','утвержден');
}

function getDocView: string;
{
  case brt.doccnt of
    0: result := '';
    1: result := getDocNmbView(brt.docnmb)+getDocDateView(brt.docdate);
  else
    result := 'Кол-во приказов: '+brt.doccnt;
  end;
}

function getDocZakazView(aDocNrec: comp): string;
{
  if aDocNrec = 0
    result := ''
  else
    result := _titledocHelper.getContdocExtAttrZakazVString(aDocNrec);
}

function getDocRSView(aDocNrec: comp): string;
{
  if aDocNrec = 0
    result := ''
  else
    result := _titledocHelper.getContdocExtAttrRSVString(aDocNrec);
}

function getFontBackColorByDocStatus(aDocStatus: word): byte;
{
  result := if(aDocStatus=1, 78, 67);
}

function getBRTFontBackColor: byte;
{
  result := if(brt.doccnt=1, getFontBackColorByDocStatus(brt.docstatus), if(brt.doccnt=0, 0, 61));
}

//#endregion

//#region Отчет

procedure ShowExcelReport(isCreateXLT: boolean);
{
  var _fname: string;
  _fname := if(isCreateXLT, _pXL.CreateXLT(_xltFileName, True),  _pXL.CreateReport(_xltFileName, True));
  _pXL.CreateVar(_fname);
  _pXL.SetStringVar('drep1', datetostr(_d1,'DD.MM.YYYY'));
  _pXL.SetStringVar('drep2', datetostr(_d2,'DD.MM.YYYY'));
  _pXL.PublishVar;
  _pXL.CreateTbls(_fname);
  _pXL.CreateTbl('Main');
  _pXL.CreateTblFld('ТабНомер');
  _pXL.CreateTblFld('ФИО');
  _pXL.CreateTblFld('Подразделение');
  _pXL.CreateTblFld('Должность');
  _pXL.CreateTblFld('ПериодОтпуска');
  _pXL.CreateTblFld('РабочийПериод');
  _pXL.CreateTblFld('ДнейВсего');
  _pXL.CreateTblFld('СреднедневнаяЗП');
  _pXL.CreateTblFld('СуммаВсего');
  _pXL.CreateTblFld('Приказ');
  _pXL.CreateTblFld('Заказ');
  _pXL.CreateTblFld('Счет');
  _pXL.CreateTblFld('ДнейПоПриказу');
  _pXL.CreateTblFld('СуммаПоПриказу');

  if not isCreateXLT
  _loop brt
  {
    var fullcnt: integer;
    fullcnt := brt.duration;
    _loop contdoc
    {
      _pXL.ClearTblBuffer;
      _pXL.SetTblStringFldValue('ТабНомер'       ,brt.Tabnmb);
      _pXL.SetTblStringFldValue('ФИО'            ,brt.FIO);
      _pXL.SetTblStringFldValue('Подразделение'  ,brt.Department);
      _pXL.SetTblStringFldValue('Должность'      ,brt.Post);
      _pXL.SetTblStringFldValue('ПериодОтпуска'  ,getPlanPeriodView);
      _pXL.SetTblStringFldValue('РабочийПериод'  ,getWorkPeriodView);
      _pXL.SetTblNumberFldValue('ДнейВсего'      ,brt.duration);
      _pXL.SetTblNumberFldValue('СреднедневнаяЗП',brt.srdnzar);
      _pXL.SetTblNumberFldValue('СуммаВсего'     ,brt.summa);
      if getfirst partdoc = tsOk
        if getfirst titledoc = tsOk
          _pXL.SetTblStringFldValue('Приказ'     ,getDocNmbView(titledoc.docnmb)+getDocDateView(titledoc.docdate,' от '));

      _pXL.SetTblStringFldValue('Заказ'          ,_ea.sGetAttrID(coContDoc, contdoc.nrec, 0001000000000921h));
      _pXL.SetTblStringFldValue('Счет'           ,_ea.sGetAttrID(coContDoc, contdoc.nrec, 0001000000000920h));

      var cnt: integer; cnt := 0;
      _loop putvaccon
        cnt += putvaccon.wdaycount;

      fullcnt -= cnt;
      _pXL.SetTblNumberFldValue('ДнейПоПриказу'  ,cnt);
      _pXL.SetTblNumberFldValue('СуммаПоПриказу' ,cnt*brt.srdnzar);
      _pXL.InsTblRow;
    }

    if fullcnt > 0
    {
      _pXL.ClearTblBuffer;
      _pXL.SetTblStringFldValue('ТабНомер'       ,brt.Tabnmb);
      _pXL.SetTblStringFldValue('ФИО'            ,brt.FIO);
      _pXL.SetTblStringFldValue('Подразделение'  ,brt.Department);
      _pXL.SetTblStringFldValue('Должность'      ,brt.Post);
      _pXL.SetTblStringFldValue('ПериодОтпуска'  ,getPlanPeriodView);
      _pXL.SetTblStringFldValue('РабочийПериод'  ,getWorkPeriodView);
      _pXL.SetTblStringFldValue('Приказ'         ,'');
      _pXL.SetTblStringFldValue('Заказ'          ,'');
      _pXL.SetTblStringFldValue('Счет'           ,'');
      _pXL.SetTblNumberFldValue('ДнейВсего'      ,brt.duration);
      _pXL.SetTblNumberFldValue('СреднедневнаяЗП',brt.srdnzar);
      _pXL.SetTblNumberFldValue('СуммаВсего'     ,brt.summa);
      _pXL.SetTblNumberFldValue('ДнейПоПриказу'  ,fullcnt);
      _pXL.SetTblNumberFldValue('СуммаПоПриказу' ,fullcnt*brt.srdnzar);
      _pXL.InsTblRow;
    }
  }
  _pXL.PublishTbl('Main');
  _pXL.LoadReport(_fname);
  _pXL.DisConnectExcel;
}
//#endregion

procedure ShowDoc(aDocNrec: comp);
{
  if aDocNrec != 0
    runinterfacenomodal(Z_STAFFORDERS::ORDERSLIST, aDocNrec);
}

window wData 'Реестр сотрудников с запланированными отпусками за период', escClose;

  browse brData (,,sci14Esc);
  show(,,,18);
  table brt;
  fields
    brt.tabnmb 'Таб. №': [10], protect;
    brt.fio 'ФИО': [20], protect;
    brt.department 'Подразделение': [20], protect;
    brt.post 'Должность': [20], protect;
    [planPeriodView] getPlanPeriodView 'Период отпуска': [20], protect;
    brt.duration 'Длительность': [7], protect, browsesum;
    brt.srdnzar 'Ср.дн.зп': [,'[|-]3666`666`666`666.88'], protect;
    brt.summa 'Сумма': [,'[|-]3666`666`666`666.88'], protect, browsesum;
    getWorkPeriodView 'Рабочий период сотрудника': [20], protect;
    getDocView 'Приказ': [20], protect, editButton, {font={backColor=getBRTFontBackColor}};
    if(brt.doccnt>1,'см. нижнюю панель',getDocZakazView(brt.docNrec)) 'Заказ': [10], protect;
    if(brt.doccnt>1,'см. нижнюю панель',getDocRSView(brt.docNrec)) 'Расчетный счет': [10], protect;
  end;

  browse brDoc (,,sci14Esc);
  show (,19,,) fixed_y;
  table contdoc;
  fields
    getDocNmbView(titledoc.docnmb) 'Приказ - Номер': [20], protect;
    getDocDateView(titledoc.docdate,'') 'Дата': [10], protect;
    getDocStatusView(titledoc.wstatus) 'Статус': [10], protect, {font={backColor=getFontBackColorByDocStatus(titledoc.wstatus)}};
    titledoc.doctext 'Краткое содержание': [30], protect;
    _ea.sGetAttrID(coContDoc, contdoc.nrec, 0001000000000921h) 'Заказ': [20], protect;
    _ea.sGetAttrID(coContDoc, contdoc.nrec, 0001000000000920h)'Расчетный счет': [30], protect;
  end;

  handleevent
  cmEdit:
  {
    case curtable of
      #brt: ShowDoc(brt.docnrec);
      #contdoc: ShowDoc(titledoc.nrec);
    end;
  }
  cminit:
  {
    rereadrecord(#brt);
  }
  cmPrintDoc: ShowExcelReport(false);
  end;

end;

procedure ShowUI;
{
  SetWindowTitle(wData, 'Реестр сотрудников с запланированными отпусками за период с '+datetostr(_d1,'DD.MM.YYYY')+' по '+datetostr(_d2,'DD.MM.YYYY'));
  runwindow(wData);
}

function prepareData: boolean;
{
  var q: IQuery;
  q := queryManager.createQuery(qSelect);
  q.setParam('startDate', _d1);
  q.setParam('endDate', _d2);
  if q.Execute.errorCode = tsOk
  {
    startnewvisual(vtRotateVisual, vfTimer, 'Формирование реестра', 0);
    delete all t;
    result := sqlCopyInto(q, #t, true) = tsOk;

    var l: longint;
    l := _cf.GetPersonsMarker;
    if getmarkercount(l) > 0
    delete all t where not foundmarker(l, t.cperson);

    stopvisual('',0);

    var cnt: longint; cnt := recordsintable(#t);
    startnewvisual(vtIndicatorVisual, vfBreak+vfTimer, 'Формирование реестра'#13'Расчет среднедневного заработка'#13'', cnt);
    _loop t
    {
      setvisualheader('Формирование реестра'#13'Расчет среднедневного заработка'#13''+t.fio);
      t.srdnzar := _srDnZar.GetSrDnZar(t.clschet, t.planyearbeg);
      t.summa := t.srdnzar * t.duration;
      update current t;
      if not nextvisual
        break;
    }
    stopvisual('',0);
  }
  else
    result := false;
}

handleevent
cmDoOk:
{
  _cf.EndSelect;
  if prepareData
    showUI;
}
cmInit:
{
  if not readmydsk(_d2, 'PlanVacationsForPersonsWithSums_d2', false) _d2 := cur_date;
  if not readmydsk(_d1, 'PlanVacationsForPersonsWithSums_d1', false) _d1 := sub_day(_d2, 15);
  _xltFileName := TranslatePath('%StartPath%xls\PlanVacationsForPersonsWithSums.xltm');
  _cf.ObjInit;
}
cmDone:
{
  savemydsk(_d1, 'PlanVacationsForPersonsWithSums_d1');
  savemydsk(_d2, 'PlanVacationsForPersonsWithSums_d2');
}
end;

end.

VipInterface UserReport_PlanVacForPersonsWithSums Implements IUserReport licensed(free);
Interface UserReport_PlanVacForPersonsWithSums;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::PlanVacationsForPersonsWithSums);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Агат. Реестр сотрудников с запланированными отпусками за период';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'MenuZarp';
      2 : VisibleInModule := 'STAFFMAINMENU';
    end;
  end;
end.
