#include GlobalMatch.vih
#include system.vih

#component "AGAT"

interface MatchesManager;

var
  _matchLoaderMCByGoods: IMatchLoaderMCByGoods;
  _matchLoaderGoodsByMC: IMatchLoaderGoodsByMC;
  _saver: IMatchSaver;

function InitObjectsByDefaultIfNull: boolean;
{
  result := true;

  if _matchLoaderMCByGoods = nullref
    result := result and getvipref(_matchLoaderMCByGoods, 'AGAT::MatchLoaderMCByGoods');

  if _matchLoaderGoodsByMC = nullref
    result := result and getvipref(_matchLoaderGoodsByMC, 'AGAT::MatchLoaderGoodsByMC');
}

constructor Init;
{
  result := InitObjectsByDefaultIfNull;
}

constructor MatchesManager(aMatchLoaderMCByGoods: IMatchLoaderMCByGoods = nullref;
                           aMatchLoaderGoodsByMC: IMatchLoaderGoodsByMC = nullref);
{
  _matchLoaderMCByGoods := aMatchLoaderMCByGoods;
  _matchLoaderGoodsByMC := aMatchLoaderGoodsByMC;
  result := InitObjectsByDefaultIfNull;
}

property MatchLoaderMCByGoods: IMatchLoaderMCByGoods absolute _matchLoaderMCByGoods;
property MatchLoaderGoodsByMC: IMatchLoaderGoodsByMC absolute _matchLoaderGoodsByMC;

procedure IMatchesManager.LoadMatches(aMatchesCollection: ICollection);
{
  var _enum, _enumload: IEnumerator;
  _enum := aMatchesCollection.GetEnumerator;

  while _enum.MoveNext
  {
    var gm: IGoodsMatches;
    gm := IGoodsMatches(_enum.Current);
    if gm.Goods = nullref or gm.Goods.GoodsId = 0
    {
      _enumload := _matchLoaderGoodsByMC.LoadMatches(gm.MC).GetEnumerator;
      if _enumload.MoveNext
        gm.Goods := IGlobalGoods(_enumload.Current);
    }
    else if gm.MC = nullref or gm.MC.Nrec = 0
    {
      var foundMatches: ICollection;
      foundMatches := _matchLoaderGoodsByMC.LoadMatches(gm.Goods);
      _enumload := foundMatches.GetEnumerator;
      if _enumload.MoveNext
        gm.MC := IMC(_enumload.Current);
      gm.MCCollection := foundMatches;
    }
  }
}

function IMatchesManager.ShowUIEditMatches(aMatchesList: IList): longint;
{
  message('Hello, UI');
}

procedure IMatchesManager.SaveMatches(aMatchesCollection: ICollection);
{
  _enum := aMatchesCollection.GetEnumerator;

  if _enum.Current.Goods <> _enum.Current.MC // если совпадление есть - апдэйтим, иначе - инсёртим
  {
    _saver.SaveMatches(aGoods: IGlobalGoods);
  }
  else
  {
    _saver.
  }
}
end.
