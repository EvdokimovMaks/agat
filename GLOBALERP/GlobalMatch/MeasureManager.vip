#include GlobalMatch.vih
#include GlobalGoods.vih
#include GlobalDataProviderMatches.vih
#include System.vih

#component "AGAT"

interface MeasureManager;

var
  _dataProvider: IGlobalDataProviderMatches;

function InitObjectsByDefaultIfNull: boolean;
{
  result := true;

  if _dataProvider = nullref
    result := result and getvipref(_dataProvider,'AGAT::GlobalDataProviderMatches');
}

constructor Init;
{
  result := InitObjectsByDefaultIfNull;
}

constructor MeasureManager(aDataProvider: IGlobalDataProviderMatches);
{
  _dataProvider := aDataProvider;
  result := InitObjectsByDefaultIfNull;
}

property DataProvider: IGlobalDataProviderMatches absolute _dataProvider;

function IMeasureManager.LoadMeasure(aKatedNrec: comp): IGlobalMeasure;
{
  var rs: IResultSet;
  rs := _dataProvider.GetMeasure(aKatedNrec);
  if rs.getFirst = tsOk
  {
    result := IGlobalMeasure(new(
      GlobalMeasure,
      GlobalMeasure(rs.row.Val('measureId'), rs.row.Val('measureName'))
    ));
  }
  else
    result := IGlobalMeasure(new(GlobalMeasure));
}

function IMeasureManager.GetKatedNrec(aMeasureId: comp): comp;
{
  var rs: IResultSet;
  rs := _dataProvider.GetKated(aMeasureId);
  if rs.getFirst = tsOk
    result := rs.row.Val('KatedNrec');
  else
    result := 0;
}

function IMeasureManager.GetMeasureOtpedCoeff(aKatmcNrec: comp; aGlobalGoodsId: comp): double;
{
  if aKatmcNrec = 0 or aGlobalGoodsId = 0
    result := 1
  else
  {
    var rs: IResultSet;
    rs := _dataProvider.GetMeasureOtpedCoeff(aKatmcNrec, aGlobalGoodsId);
    if rs.getFirst = tsOk
      result := rs.row.Val('coeff');
    else
      result := 1;
  }
}

end.
