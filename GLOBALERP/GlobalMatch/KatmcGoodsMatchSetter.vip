#include GlobalMatchManager.vih
#include ExternalQuery.vih
#include Query.vih

#component "AGAT"

#include GlobalConst.inc

interface KatmcGoodsMatchSetter;

var
  _idObjMappingType        : string;
  _idRefClass              : string;
  _externalQueryTextFactory: IExternalQueryTextFactory;
  _externalQuery           : IExternalQuery;
  _searcher                : IGlobalMatchSearcher;

function getLinkedServerName: string;
{
  result := DEFAULT_GLOBAL_SERVER_NAME;
}

function IGlobalMatchSetter.SetMatch(args: tArgsArray): boolean;
{
/*  result := false;
  var refObjId: comp;       // katmcNrec
  refObjId := args[0];

  var externalObjId: string; // GlobalID
  externalObjId := args[1];

  var rs: IResultSet;
  rs := _searcher.SearchMatch(args); // Ищем Goods по Katmc
  var t: IExternalQueryText;
  var res: IQuery;
  if rs.getfirst = tsOk then // МЦ с чем-то сопоставлена
  {
    if rs.row.Val('goodsId') != externalObjId then // сопоставлена с другим Глобалом, не нашим
    {
      if message('Эта МЦ уже сопоставлена. Пересопоставить?', yesNo) = cmYes
      { // отвязать сопоставление с этой МЦ и сопоставить с нашим Глобалом
        t := _externalQueryTextFactory.
             CreateText('select *').
             AddString ('from openquery ('+getLinkedServerName+', '' ').
             AddString ('update BTK.AGT_OBJMAPPING mapping').
             AddString ('set IDREFOBJ = '+externalObjId).
             AddString ('where mapping.idobjmappingtype = '+_idObjMappingType+' and mapping.idrefclass = '+_idRefClass+' and mapping.SIDEXTERNALOBJ = '''''+string(refObjId)+'''''').
             AddString (' '') ');
        res := _externalQuery.Execute(t);
      }
      else { result := false; exit; };
    }
    else { result := false; exit; };
  }
  else // МЦ не сопоставлена вообще
  { // сопоставляем с нашим Глобалом
    t := _externalQueryTextFactory.
         CreateText('select *').
         AddString ('from openquery ('+getLinkedServerName+', '' ').
         AddString ('insert into BTK.AGT_OBJMAPPING').
         AddString ('(IDOBJMAPPINGTYPE, IDREFCLASS, IDREFOBJ, SIDEXTERNALOBJ)').
         AddString ('values ('+_idObjMappingType+', '+_idRefClass+', '+externalObjId+', '''''+string(refObjId)+''''')').
         AddString (' '') ');
    res := _externalQuery.Execute(t);
  }
  if res.errorCode = tsOk then result := true
                          else result := false; */
  result := true;
}

constructor Init;
{
  _idRefClass := DEFAULT_GLOBAL_MATCH_GOODS_IDREFCLASS;
  _idObjMappingType := DEFAULT_GLOBAL_MATCH_GOODS_IDOBJMAPPINGTYPE;
  result := loadvipref(_externalQueryTextFactory, 'AGAT::ExternalQueryTextFactory') and
            loadvipref(_externalQuery, 'AGAT::ExternalQuery') and
            loadvipref(_searcher, 'AGAT::GoodsByKatmcMatchSearcher');
}

property IdObjMappingType: string absolute _idObjMappingType;
property IdRefClass: string absolute _idRefClass;

end.
