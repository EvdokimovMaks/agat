#include GlobalMatch.vih
#include GlobalDataProviderMatches.vih
#include GlobalGoods.vih
#include System.vih

#component "AGAT"

interface MatchSaver;

var
  _searcher: IMatchLoaderGoodsByMC;
  _dataprovider: IGlobalDataProviderMatches;
  _measureManager: IMeasureManager;

create view
as select *
from katotped, kated, katmc;

function IMatchSaver.SaveMatches(aMatch: IGoodsMatch): boolean;
{
  result := false;

  if aMatch.Goods         = nullref
  or aMatch.MC            = nullref
  or aMatch.Goods.GoodsId = 0
  or aMatch.MC.Nrec       = 0
    exit;

  //обновляем или добавляем соответствие
  var goods: IGlobalGoods;
  goods := IGlobalGoods(_searcher.LoadMatches(aMatch.MC).First);

  if goods != nullref
  {
    if goods.GoodsId != aMatch.Goods.GoodsId
      result := _dataprovider.UpdateMatch(aMatch.Goods.GoodsId, aMatch.MC.Nrec) = tsOk;
  }
  else
    result := _dataprovider.InsertMatch(aMatch.Goods.GoodsId,
                                        aMatch.MC.Nrec,
                                        aMatch.MC.GroupmcNrec,
                                        aMatch.MC.TypemcNrec) = tsOk;
  //Обновляем обозначение МЦ
  if getfirst katmc where ((aMatch.MC.Nrec == katmc.nrec)) = tsOk
  {
    katmc.obozn := aMatch.Goods.GoodsName;
    update current katmc;
  }

  //Обновляем единицы измерения МЦ
  var rs: IResultSet;
  rs :=  _dataprovider.GetMeasures(aMatch.Goods.GoodsId);
  if rs.getFirst = tsOk do
  {

    var katedNrec: comp;
    katedNrec := rs.row.val('KatedNrec');

    if getfirst katotped where (( 1                       == katotped.prmc
                              and aMatch.MC.Nrec          == katotped.cmcusl
                              and katedNrec               == katotped.ckated )) != tsOk
    {
      if getfirst kated where ((katedNrec == kated.nrec)) = tsOk
      {
        clearbuffer(#katotped);
        katotped.prmc    := 1;
        katotped.cmcusl  := aMatch.MC.Nrec;
        katotped.ckated  := katedNrec;
        katotped.name    := kated.name;
        katotped.diskret := kated.diskret;
        katotped.abbr    := kated.abbr;
        katotped.koef    := rs.row.val('nrate') * aMatch.MeasureCoeff;
        if katotped.koef > 0
          insert current katotped;
      }
    }
    else
    {
      katotped.koef := rs.row.val('nrate') * aMatch.MeasureCoeff;
      if katotped.koef > 0
        update current katotped;
    }

  } while rs.getNext = tsOk

}

function InitDefault: boolean;
{
  result := true;

  if _searcher = nullref
    result := result and getvipref(_searcher,'AGAT::MatchLoaderGoodsByMC');

  if _dataprovider = nullref
    result := result and getvipref(_dataprovider,'AGAT::GlobalDataProviderMatches');

  if _measureManager = nullref
    result := result and getvipref(_measureManager, 'AGAT::MeasureManager');
}

constructor Init;
{
  result := InitDefault;
}

end.
