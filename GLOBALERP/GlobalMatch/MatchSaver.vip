#include GlobalMatch.vih
#include GlobalDataProviderMatches.vih
#include GlobalGoods.vih
#include System.vih

#component "AGAT"

interface MatchSaver;

var
  _searcher: IMatchLoaderGoodsByMC;
  _dataprovider: IGlobalDataProviderMatches;
  _measureManager: IMeasureManager;

create view
as select *
from katotped, kated, katmc;

function IMatchSaver.SaveMatches(aMatch: IGoodsMatch): boolean;
{
  result := false;

  if aMatch.Goods         = nullref
  or aMatch.MC            = nullref
  or aMatch.Goods.GoodsId = 0
  or aMatch.MC.Nrec       = 0
    exit;

  if aMatch.MeasureCoeff <= 0
    aMatch.MeasureCoeff := 1;

  var katedNrec: comp = 0; //nrec активной единицы измерения МЦ
  var katedCoeff: double = 1; //коэф-т пересчета активной ед.изм. мц галактики в ед.изм. мц глобала (сколько мц глобала в единице мц галактики)

  //Обновляем обозначение МЦ, определяем nrec единицы измерения мц
  if getfirst katmc where ((aMatch.MC.Nrec == katmc.nrec)) = tsOk
  {
    katmc.obozn := aMatch.Goods.GoodsName;
    update current katmc;
    if getfirst katotped where (( 1 == katotped.prmc and katmc.nrec == katotped.cmcusl and 1 == katotped.akt)) = tsOk
      katedNrec := katotped.ckated;
    else
      katedNrec := katmc.ced;
  }

  //Обновляем единицу измерения МЦ
  //Получаем nrec галактической единицы измерения по id единицы измерения мц глобала
  var rs: IResultSet;
  rs := _dataprovider.GetKated(aMatch.Goods.MeasureId);
  if rs.getFirst = tsOk
  {
    var globalKatedNrec: comp;
    globalKatedNrec := rs.row.val('KatedNrec');

    if globalKatedNrec = katedNrec
      aMatch.MeasureCoeff := 1;
    else
    {
      if getfirst kated where ((globalKatedNrec == kated.nrec)) = tsOk
      {
        if getfirst katotped where ((1 == katotped.prmc and aMatch.MC.Nrec == katotped.cmcusl and kated.nrec == katotped.ckated)) != tsOk
        {
          clearbuffer(#katotped);
          katotped.prmc    := 1;
          katotped.cmcusl  := aMatch.MC.Nrec;
          katotped.ckated  := kated.nrec;
          katotped.name    := kated.name;
          katotped.diskret := kated.diskret;
          katotped.abbr    := kated.abbr;
          katotped.koef    := aMatch.MeasureCoeff;
          insert current katotped;
        }
        else
        {
          katotped.koef := aMatch.MeasureCoeff;
          update current katotped;
        }
      }
    }
  }
  /*
  var rs: IResultSet;
  rs :=  _dataprovider.GetMeasures(aMatch.Goods.GoodsId);
  if rs != nullref
  if rs.getFirst = tsOk do
  {

    var katedNrec: comp;
    katedNrec := rs.row.val('KatedNrec');

    if getfirst katotped where (( 1                       == katotped.prmc
                              and aMatch.MC.Nrec          == katotped.cmcusl
                              and katedNrec               == katotped.ckated )) != tsOk
    {
      if getfirst kated where ((katedNrec == kated.nrec)) = tsOk
      {
        clearbuffer(#katotped);
        katotped.prmc    := 1;
        katotped.cmcusl  := aMatch.MC.Nrec;
        katotped.ckated  := katedNrec;
        katotped.name    := kated.name;
        katotped.diskret := kated.diskret;
        katotped.abbr    := kated.abbr;
        katotped.koef    := double(rs.row.val('nrate')) * if(aMatch.MeasureCoeff>0, aMatch.MeasureCoeff, 1);
        if katotped.koef > 0
          insert current katotped;
      }
    }
    else
    {
      katotped.koef := double(rs.row.val('nrate')) * if(aMatch.MeasureCoeff>0, aMatch.MeasureCoeff, 1);
      if katotped.koef > 0
        update current katotped;
    }

    katedCoeff := katotped.koef;

  } while rs.getNext = tsOk
  */

  //обновляем или добавляем соответствие
  var goods: IGlobalGoods;
  goods := IGlobalGoods(_searcher.LoadMatches(aMatch.MC).First);

  if goods != nullref
  {
    //if goods.GoodsId != aMatch.Goods.GoodsId
    result := _dataprovider.UpdateMatch(aMatch.Goods.GoodsId, aMatch.MC.Nrec, katedNrec, 1 / aMatch.MeasureCoeff) = tsOk;
  }
  else
    result := _dataprovider.InsertMatch(aMatch.Goods.GoodsId, aMatch.MC.Nrec, katedNrec, 1 / aMatch.MeasureCoeff) = tsOk;

}

function InitDefault: boolean;
{
  result := true;

  if _searcher = nullref
    result := result and getvipref(_searcher,'AGAT::MatchLoaderGoodsByMC');

  if _dataprovider = nullref
    result := result and getvipref(_dataprovider,'AGAT::GlobalDataProviderMatches');

  if _measureManager = nullref
    result := result and getvipref(_measureManager, 'AGAT::MeasureManager');
}

constructor Init;
{
  result := InitDefault;
}

end.
