#include GlobalParts.vih
#include GlobalPartsConverter.vih
#include GlobalTunes.vih
#include GlobalDataProviderParts.vih
#include System.vih

#component "AGAT"

interface TestGlobalSpecifications 'Спецификации изделий из ИС Глобал и Галактика';

var
  _globalDataProvider: IGlobalDataProviderParts;
  MRKR: longint;

table struct tSpec (
  GoodsId     : comp,
  KatmcNrec   : comp,
  GoodsName   : string,
  DocID       : comp,
  DocName     : string,
  VersionId   : comp,
  VersionName : string,
  PSName      : string
) with index (
  i01 = GoodsId
);

create view
as select *
from tSpec, tSpec brSpec;

browse brmain (,, scAtlTreeMark);
  show(,,,10);
  table brSpec;
  fields
    if(FoundMarker(MRKR, brSpec.VersionId), 'v', ' ')  '' : [1], skip;
    brSpec.GoodsName   'Глобал МЦ'    : [25], protect;
    brSpec.DocName     'Документ'     : [30], protect;
    brSpec.VersionName 'Версия'       : [20], protect;
    brSpec.PSName      'ПС Галактика' : [25], protect;
  end;

screen importscreen;
  show(,11,,13);
  buttons
    cmMakeImport;
  <<
                                           <.  Импорт состава изделий  .>
  >>
  end;

handleevent
cmInit:
{
  _globalDataProvider := IGlobalDataProviderParts(new(GlobalDataProviderParts));
  var rs: IResultSet;
  rs := _globalDataProvider.GlobalSpecifications;
  if rs = nullref
  {
    message('Дико извиняюсь, но тут ничего :(');
    exit;
  }
  sqlcopyinto(rs, #tSpec, true);
  MRKR := InitMarker('', sizeof(comp), 100, 10);
}
cmMarkRec:
{
  InvertMarker(MRKR, brSpec.VersionId);
  RedrawCurrentAndGo(brmain, true);
  ReReadRecord(#brSpec);
}
cmMarkAll:
{
  PushPos(#brSpec);
  if GetFirst brSpec = tsOk do
    InsertMarker(MRKR, brSpec.VersionId);
  while GetNext brSpec = tsOk;
  PopPos(#brSpec);
  ReReadRecord(#brSpec);
}
cmUnmarkAll:
{
  ClearMarker(MRKR);
  ReReadRecord(#brSpec);
}
cmMakeImport:
{
  var i: integer;
  var CurVersionId: comp;
  CurVersionId := 0;
  for(i := 0; i < GetMarkerCount(MRKR); i++)
  {
    GetMarker(MRKR, i, CurVersionId);
    // MakeImport(CurVersionId);
  }
}
end;

end.
