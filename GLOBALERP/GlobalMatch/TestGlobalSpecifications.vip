#include GlobalParts.vih
#include GlobalPartsConverter.vih
#include GlobalTunes.vih
#include GlobalDataProviderParts.vih
#include System.vih
#include GlobalMatch.vih
#include GlobalGoods.vih

#component "AGAT"

interface TestGlobalSpecifications 'Спецификации изделий из ИС Глобал и Галактика';
show(,,,13);

var
  _globalDataProvider: IGlobalDataProviderParts;
  MRKR: longint;
  _matchesManager: IMatchesManager;
  versId: comp;

sql query qGetPS =
select h.name as HdrPsNrec
from attrval a
join hdr_ps h on h.nrec = a.crec
where a.cattrnam = #comp(00010000000009D8h) and a.vstring = :versId
;

sql query qFullHouse =
select d.sname, h.name, mc.name
from distdoc d
join hdr_ps h on h.cizd = d.cobject
left join ps_lines p on p.chdr = h.nrec
left join katmc mc on mc.nrec = p.cdet
where d.nrec = #comp(0001000000000346h) and d.wtype = 4
;

table struct tSpec (
  GoodsId     : comp,
  KatmcNrec   : comp,
  GoodsName   : string,
  DocID       : comp,
  DocName     : string,
  VersionId   : comp,
  VersionName : string,
  PSName      : string
) with index (
  i01 = GoodsId,
  i02 = VersionId
);

table struct tMatchSpec (
  VersionId   : comp,
  Spec        : comp,
  Qty         : double,
  GoodsId     : comp,
  GoodsName   : string,
  MeasureId   : comp,
  MeasureName : string,
  KatmcNrec   : comp
) with index (
  i01 = GoodsId,
  i02 = KatmcNrec,
  i03 = VersionId + KatmcNrec
);

table struct tMatchSpecDistinct (
  VersionId   : comp,
  Spec        : comp,
  Qty         : double,
  GoodsId     : comp,
  GoodsName   : string,
  MeasureId   : comp,
  MeasureName : string,
  KatmcNrec   : comp
) with index (
  i01 = GoodsId,
  i02 = KatmcNrec
);

create view
as select *
from tSpec, tSpec brSpec, tMatchSpec, tMatchSpecDistinct, hdr_ps, distdoc, ps_lines;

create view vKatmc
var _nrec: comp;
as select *
from katmc
where ((
  _nrec == katmc.nrec
));

browse brmain (,, scAtlTreeMark);
  show(,,,10);
  table brSpec;
  fields
    if(FoundMarker(MRKR, brSpec.VersionId), 'v', ' ')  '' : [1], skip;
    brSpec.GoodsName   'Глобал МЦ'    : [25], protect;
    brSpec.DocName     'Документ'     : [30], protect;
    brSpec.VersionName 'Версия'       : [20], protect;
    brSpec.PSName      'ПС Галактика' : [25], protect;
  end;

screen importscreen;
  show(,11);
  buttons
    cmMakeImport;
  <<
                                           <.  Импорт состава изделий  .>
  >>
  end;

handleevent
cmInit:
{
  _globalDataProvider := IGlobalDataProviderParts(new(GlobalDataProviderParts));
  var rs: IResultSet;
  rs := _globalDataProvider.GlobalSpecifications;
  if rs = nullref
  {
    message('Спецификации не найдены', error);
    exit;
  }
  sqlcopyinto(rs, #tSpec, true);
  MRKR := InitMarker('', sizeof(comp), 100, 10);
}
cmMarkRec:
{
  InvertMarker(MRKR, brSpec.VersionId);
  RedrawCurrentAndGo(brmain, true);
  ReReadRecord(#brSpec);
}
cmMarkAll:
{
  PushPos(#brSpec);
  if GetFirst brSpec = tsOk do
    InsertMarker(MRKR, brSpec.VersionId);
  while GetNext brSpec = tsOk;
  PopPos(#brSpec);
  ReReadRecord(#brSpec);
}
cmUnmarkAll:
{
  ClearMarker(MRKR);
  ReReadRecord(#brSpec);
}
cmMakeImport:
{
  if GetMarkerCount(MRKR) = 0 then
  {
    message(Chr(3)+'Не помечена ни одна спецификация.'#13'Выберите пожалуйста версию спецификации для импорта');
    exit;
  }
  var i: integer;
  var CurVersionId: comp;
  CurVersionId := 0;
  var res: IResultSet;
  for(i := 0; i < GetMarkerCount(MRKR); i++)  //заполняем таблицу tMatchSpec всеми спецификациями из помеченных версий
  {
    GetMarker(MRKR, i, CurVersionId);
    res := _globalDataProvider.GlobalSearchSpecificationsByVersion(CurVersionId);
    if res.getFirst = tsOk do {
      ClearBuffer(#tMatchSpec);
      tMatchSpec.VersionId := CurVersionId;
      tMatchSpec.Spec := res.row.val('Spec');
      tMatchSpec.Qty := res.row.val('Qty');
      tMatchSpec.GoodsId := res.row.val('GoodsId');
      tMatchSpec.GoodsName := res.row.val('GoodsName');
      tMatchSpec.MeasureId := res.row.val('MeasureId');
      tMatchSpec.MeasureName := res.row.val('MeasureName');
      tMatchSpec.KatmcNrec := res.row.val('KatmcNrec');
      insert current tMatchSpec;
    } while res.getNext = tsOk;
  }

  _loop tMatchSpec //заполняем таблицу tMatchSpecDistinc неповторяющимися МЦ
  {
    if getfirst tMatchSpecDistinct where ((tMatchSpec.GoodsId == tMatchSpecDistinct.GoodsId)) != tsOk
    {
      tMatchSpecDistinct.VersionId   := tMatchSpec.VersionId;
      tMatchSpecDistinct.Spec        := tMatchSpec.Spec;
      tMatchSpecDistinct.Qty         := tMatchSpec.Qty;
      tMatchSpecDistinct.GoodsId     := tMatchSpec.GoodsId;
      tMatchSpecDistinct.GoodsName   := tMatchSpec.GoodsName;
      tMatchSpecDistinct.MeasureId   := tMatchSpec.MeasureId;
      tMatchSpecDistinct.MeasureName := tMatchSpec.MeasureName;
      tMatchSpecDistinct.KatmcNrec   := tMatchSpec.KatmcNrec;
      insert current tMatchSpecDistinct;
    }
  }

  var matchesList: IList;
  matchesList := IList(new(System::Collection));

  _loop tMatchSpecDistinct where ((0 == tMatchSpecDistinct.KatmcNrec))  //create collection with "NO MATCHES"
  {
    matchesList.Add(
      new(GoodsMatches, GoodsMatches(
        IGlobalGoods(new(GlobalGoods, GlobalGoods(tMatchSpec.GoodsId, tMatchSpec.GoodsName,
                                            tMatchSpec.MeasureId, tMatchSpec.MeasureName))),
        nullref
      ))
    );
  }

  if matchesList.Count > 0   // вызываем "сопоставлялку" если нужно
  {
    getvipref(_matchesManager, 'AGAT::MatchesManager');  // инициализируем менеджер
    if _matchesManager.ShowUIEditMatches(matchesList, MatchDirection_SearchGalaxy) = cmDefault
    {
      _matchesManager.SaveMatches(ICollection(matchesList));
      var enum: IEnumerator;
      enum := matchesList.GetEnumerator;
      if enum.MoveNext do {
        var g: IGoodsMatch;
        g := IGoodsMatch(enum.Current);
        update tMatchSpec where ((g.Goods.GoodsId == tMatchSpec.GoodsId))
        set tMatchSpec.KatmcNrec := g.MC.Nrec;
      } while enum.MoveNext;
    }
  } //if matchesList.Count > 0

  var q: IQuery;
  var rs1: IResultSet;
  var MCLoader: IMatchLoaderMCByGoods;
  MCLoader := IMatchLoaderMCByGoods(new(AGAT::MatchLoaderMCByGoods));
  var CurCol: ICollection;
  //CurCol := ICollection(new(System::Collection));
  var LocalGoods: IGlobalGoods;
  LocalGoods := IGlobalGoods(new(AGAT::GlobalGoods));
  var DelMark: longint;
  DelMark := InitMarker('', sizeof(comp), 50, 10, false);
  _loop tSpec where (FoundMarker(MRKR, tSpec.VersionId))
  {
    LocalGoods.GoodsId := tSpec.GoodsId;
    CurCol := MCLoader.LoadMatches(LocalGoods);
    if CurCol.count = 0 or CurCol = nullref continue; // if Collection is empty
    var CurMC: IMC;
    CurMC := IMC(CurCol.First);
    var CurKatmcNrec: comp;
    CurKatmcNrec := CurMC.Nrec;
    if CurCol.count > 0
    {
      if getfirst distdoc where ((4 == distdoc.wtype and CurKatmcNrec == distdoc.cobject and 25 == distdoc.wdoctype)) != tsOk
      {
        ClearBuffer(#distdoc);
        distdoc.wtype := 4;
        distdoc.COBJECT := CurKatmcNrec;
        distdoc.wdoctype := 25;
        distdoc.sname := tSpec.VersionName;
        insert current distdoc;
      }
    } //if CurCol.count > 0
    if getfirst hdr_ps where ((4 == hdr_ps.ctypeizd and distdoc.cobject == hdr_ps.cizd and 0 == hdr_ps.vid)) != tsOk
    {
      ClearBuffer(#hdr_ps);
      hdr_ps.name := tSpec.VersionName;
      hdr_ps.ctypeizd := 4;
      hdr_ps.cizd := CurKatmcNrec;
      hdr_ps.vid := 0;
      vKatmc._nrec := CurKatmcNrec;
      if vKatmc.getfirst katmc = tsOk {
        hdr_ps.doccode := vKatmc.katmc.barkod;
      };
      hdr_ps.ednorm := 1;
      hdr_ps.kind := 25;
      hdr_ps.pargroup := 0000000000000027h;
      hdr_ps.cnalter := tSpec.VersionId; // VersionId пишем в CNALTER, потому что можем
      insert current hdr_ps;
    }

    _loop tMatchSpec // заполняем спецификацию МЦ-шками
    {
      if getfirst ps_lines where ((hdr_ps.nrec          == ps_lines.chdr and
                                   4                    == ps_lines.wdet and
                                   tMatchSpec.KatmcNrec == ps_lines.cdet)) != tsOk
      {
        ClearBuffer(#ps_lines);
        ps_lines.chdr := hdr_ps.nrec;
        ps_lines.wdet := 4;
        ps_lines.cdet := tMatchSpec.KatmcNrec;
        ps_lines.kol := tMatchSpec.Qty;
        insert current ps_lines;
      }
    } //_loop tMatchSpec

    _loop ps_lines where ((hdr_ps.nrec == ps_lines.chdr))
    {
      if getfirst tMatchSpec where ((tSpec.VersionId == tMatchSpec.VersionId and ps_lines.cdet == tMatchSpec.KatmcNrec)) != tsOk
        InsertMarker(DelMark, ps_lines.nrec);
    }
  } //_loop tSpec where (FoundMarker(MRKR, tSpec.VersionId))

  delete all ps_lines where FoundMarker(DelMark, ps_lines.nrec);
  DoneMarker(DelMark, '');
  message('Импорт состава изделий произведён');
}
end;

end.
