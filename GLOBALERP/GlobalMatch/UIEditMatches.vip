#include GlobalMatch.vih
#include GlobalGoods.vih
#include System.vih

#component "AGAT"

interface UIEditMatches;

var
 _globalGoodsSelector: GlobalGoodsSelector;
 _MatchesList: IList;
 _MatchDirection: byte;
 _matchLoaderGoodsByMC: IMatchLoaderGoodsByMC;
 _measureManager: IMeasureManager;

table struct UItable (
  ListIndex   : longint,
  KatmcNrec   : comp,
  KatMcName   : string,
  KatMcCode   : string,
  GoodsId     : comp,
  GoodsName   : string,
  MeasureId   : comp,
  MeasureName : string,
  MeasureCoeff: double
) with index (
  i01 = ListIndex (unique),
  i02 = KatmcNrec
);

create view
as select *
from UItable, UItable brUITable, groupmc brGroupMC, typemc brTypeMC, katmc, kated
where ((
  brUITable.KatmcNrec == katmc.nrec and
  katmc.ced           == kated.nrec and
  katmc.cgroupmc      == brGroupMC.nrec and
  katmc.ctype         == brTypeMC.nrec
));

create view vAdd
var
  _katmcNrec: comp;
as select *
from katmc
where ((
  _katmcNrec == katmc.nrec
));

function GetLastWordStartPos(s: string): integer;
{
  var i: integer;
  for (i := Length(s); (pos(s[i], '.,/+*_ -') = 0) and i > 0; i--) {}
  result := i;
}

function CutWord(InpStr: string): string;
{
  InpStr := Trim(InpStr);
  result := Substr(InpStr, 0, GetLastWordStartPos(InpStr)-1);
}

function GetMeasureCoeff(aKatmcNrec: comp; aGlobalGoodsId: comp): double;
{
  if aKatmcNrec != 0 and aGlobalGoodsId != 0
    result := _measureManager.GetMeasureOtpedCoeff(aKatmcNrec, aGlobalGoodsId);
  else
    result := 1;
}

window winmain 'Установка соответствий МЦ Галактика - Global', doaccept, escclose;
  browse brmain;
  table brUITable;
  fields
    brUITable.KatMcName    'Галактика МЦ'    : [25], protect, PickButton;
    brUITable.KatMcCode    'Код'             : [15], protect;
    katmc.obozn            'Обозначение'     : [15], protect;
    brGroupMC.name         'Группа'          : [15], protect;
    brTypeMC.name          'Тип'             : [10], protect;
    kated.ABBR             'Ед.измерения МЦ' : [10], protect;
    brUITable.GoodsName    'Глобал МЦ'       : [25], protect, PickButton;
    brUITable.MeasureName  'Ед. измерения'   : [10], protect;
    brUITable.MeasureCoeff 'Коэффициент'     : [5,3], noprotect;
  end;
  tableevent table brUITable;
    cmUpdateRecord: update current brUITable;
  end;
  handleevent
  cminit:
  {
    rereadrecord(#brUITable);
    cfsSetCurrentContainer('AGAT::UIEDITMATCHES');
    case _MatchDirection of
    MatchDirection_SearchGlobal:
    {
      cfsSetProp('brUITable.KatMcName', 'ButtonType', 0);
      cfsSetProp('brUITable.GoodsName', 'ButtonType', 16);
    }
    MatchDirection_SearchGalaxy:
    {
      cfsSetProp('brUITable.KatMcName', 'ButtonType', 16);
      cfsSetProp('brUITable.GoodsName', 'ButtonType', 0);
    }
    else
    {
      cfsSetProp('brUITable.KatMcName', 'ButtonType', 0);
      cfsSetProp('brUITable.GoodsName', 'ButtonType', 0);
    }
    end;

  }
  cmpick:
  {
    case CurField of
    #brUITable.KatMcName: {
      var M: longint;
      var instring: string;
      M := 0;
      instring := brUITable.GoodsName;
      if RunInterface(AGAT::GalGoods, instring, M, false) = cmDefault then // false это единичный выбор МЦ
      {
        var cmp: comp;
        cmp := 0;
        GetMarker(M, 0, cmp);
        vAdd._katmcNrec := cmp;
        if vAdd.getfirst katmc != tsOk { message('Ошибка! МЦ не выбрана или такой не существует', error); exit; };

        //проверяем, сопоставлена ли МЦ с Глобалом: сначала в самой таблице
        if getfirst uitable where (( cmp == uitable.katmcnrec
                                 and (uitable.goodsId != 0 and uitable.ListIndex != bruitable.ListIndex) )) = tsOk
        {
          if message('Для МЦ "'+vAdd.katmc.name
                    +'"'#13'установлено соответствие "'+uitable.GoodsName
                    +'"'#13'Изменить?', YesNo) = cmYes
          {
            uitable.KatmcNrec := 0;
            uitable.KatMcName := '';
            uitable.KatMcCode := '';
            update current uitable;
          }
          else
            exit;
        }
        else //проверяем, сопоставлена ли МЦ с Глобалом: затем по сопоставлениям в глобале вцелом
        {
          var goodsCollection: ICollection;
          goodsCollection := _matchLoaderGoodsByMC.LoadMatches(
                               IMC(new( MC, LoadByNrec(cmp) ))
                             );
          if goodsCollection.Count > 0
          {
            var g: IGlobalGoods;
            g := IGlobalGoodsCollectionItem(goodsCollection.First).Goods;
            if message('Для МЦ "'+vAdd.katmc.name
                    +'"'#13'установлено соответствие "'+g.GoodsName
                    +'"'#13'Изменить?', YesNo) != cmYes
            {
              exit;
            }
          }
        }

        brUITable.KatmcNrec    := vAdd.katmc.nrec;
        brUITable.KatMcName    := vAdd.katmc.name;
        brUITable.KatMcCode    := vAdd.katmc.barkod;
        brUITable.MeasureCoeff := GetMeasureCoeff(brUItable.KatmcNrec, brUItable.GoodsId);
        update current brUITable;
        ReReadRecord(#brUITable);
      }

    }
    #brUITable.GoodsName: {
      var fltr: string;
      fltr := brUITable.KatMcName;
      while _globalGoodsSelector.SetNameFilter(fltr) = 0 and fltr != '' and GetLastWordStartPos(fltr) > 1
        fltr := CutWord(fltr);

      if _globalGoodsSelector.ShowUI = cmdefault
      {
        var _GoodsCollection: ICollection;
        _GoodsCollection := ICollection(new(System::Collection));
        _globalGoodsSelector.FillCollectionWithSelectedGoods(_GoodsCollection);
        var enum: IEnumerator;
        enum := _GoodsCollection.GetEnumerator;
        if enum.MoveNext
        {
          var g: IGlobalGoods;
          g := IGlobalGoodsCollectionItem(enum.Current).Goods;
          brUITable.GoodsId       := g.GoodsId;
          brUITable.GoodsName     := g.GoodsName;
          brUITable.MeasureId     := g.MeasureId;
          brUITable.MeasureName   := g.MeasureName;
          brUITable.MeasureCoeff  := GetMeasureCoeff(brUItable.KatmcNrec, brUItable.GoodsId);
          update current brUITable;
          ReReadRecord(#brUITable);
        }
      }
    }
    end;
  }
  cmCancel:
  {
    if message('Выйти без сохранения?', YesNo) != cmYes
      Abort;
  }
  cmDefault:
  {
    if message('Сохранить и выйти?', YesNo) != cmYes
      Abort;
  }
  end;
end;

procedure ConvertListToUITable(aList: IList);
{
  var i: longint;
  var CurItem: IGoodsMatches;
  for(i := 0; i < aList.count; i++)
  {
    CurItem := IGoodsMatches(aList.ItemGet(i));
    UItable.ListIndex   := i;
    UItable.KatmcNrec   := CurItem.MC.Nrec;
    UItable.KatMcName   := CurItem.MC.Name;
    UItable.KatMcCode   := CurItem.MC.Code;
    UItable.GoodsId     := CurItem.Goods.GoodsId;
    UItable.GoodsName   := CurItem.Goods.GoodsName;
    UItable.MeasureId   := CurItem.Goods.MeasureId;
    UItable.MeasureName := CurItem.Goods.MeasureName;
    UITable.MeasureCoeff:= GetMeasureCoeff(UItable.KatmcNrec, UItable.GoodsId);
    insert current UItable;
  }
}

procedure ConvertTableToList(aList: IList);
{
  var CurItem: IGoodsMatches;
  _loop UItable
  {
    CurItem := IGoodsMatches(aList.ItemGet(UItable.ListIndex));
    CurItem.MC.Nrec := UItable.KatmcNrec;
    CurItem.MC.Name := UItable.KatMcName;
    CurItem.MC.Code := UItable.KatMcCode;
    CurItem.Goods.GoodsId := UItable.GoodsId;
    CurItem.Goods.GoodsName := UItable.GoodsName;
    CurItem.Goods.MeasureId := UItable.MeasureId;
    CurItem.Goods.MeasureName := UItable.MeasureName;
    CurItem.MeasureCoeff := UItable.MeasureCoeff;
  }
}

function IUIEditMatches.ShowUI: longint;
{
  delete all UItable;
  ConvertListToUITable(_MatchesList);
  result := RunWindowModal(winmain);
  ConvertTableToList(_MatchesList);
}

constructor Init;
{
  result := true;
  result := result and LoadVipRef(_MatchesList,'System::Collection');
  result := result and GetVipRef(_matchLoaderGoodsByMC, 'AGAT::MatchLoaderGoodsByMC');
  result := result and GetVipRef(_measureManager, 'AGAT::MeasureManager');
  _MatchDirection := MatchDirection_SearchGlobal;
}

property IUIEditMatches.MatchesList: IList absolute _MatchesList;
property IUIEditMatches.MatchDirection: byte absolute _MatchDirection;
property MatchLoaderGoodsByMC: IMatchLoaderGoodsByMC absolute _matchLoaderGoodsByMC;

end.
