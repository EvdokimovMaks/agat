#include GlobalPartsConverter.vih
#include GlobalParts.vih
#include System.vih

#component "AGAT"

interface GlobalPartsConverter;

function IGlobalPartsConverter.PartsToGoodsCollectionItem(aParts: IGlobalParts): IGlobalGoodsCollectionItem;
{
  result := IGlobalGoodsCollectionItem(
    new(
      GlobalGoodsCollectionItem,
      GlobalGoodsCollectionItem(aParts.Goods, aParts.FullQty)
    )
  );
}

function IGlobalPartsConverter.PartsMarkedToGoodsMarkedCollectionItem(aParts: IGlobalPartsMarked): IGlobalGoodsMarkedCollectionItem;
{
  result := IGlobalGoodsMarkedCollectionItem(
    new(
      GlobalGoodsMarkedCollectionItem,
      GlobalGoodsMarkedCollectionItem(aParts.Goods, aParts.FullQty, aParts.IsMarked)
    )
  );
}

procedure IGlobalPartsConverter.AddPartsToGoodsCollection(aPartsCollection: ICollection;
                                                          aGoodsCollection: ICollection;
                                                          aLeafFlag: byte = PARTS_LEAF);
{
  var enum: System::IEnumerator;
  enum := aPartsCollection.GetEnumerator;
  while enum.moveNext
  {

    var part: IGlobalParts;
    part := IGlobalParts(enum.Current);

    if (part.Children.Count=0 and ((aLeafFlag and PARTS_LEAF) > 0)) or
       (part.Children.Count>0 and ((aLeafFlag and PARTS_NODE) > 0))
    {
      aGoodsCollection.Add(PartsToGoodsCollectionItem(part));
    }

    if part.Children.Count>0
      AddPartsToGoodsCollection(part.Children, aGoodsCollection, aLeafFlag);

  }
}

procedure IGlobalPartsConverter.AddPartsToGoodsMarkedCollection(aPartsMarkedCollection: ICollection;
                                                                aGoodsMarkedCollection: ICollection;
                                                                aMarkedFlag: byte = PARTS_MARKED;
                                                                aLeafFlag: byte = PARTS_LEAF);
{
  var enum: System::IEnumerator;
  enum := aPartsMarkedCollection.GetEnumerator;
  while enum.moveNext
  {

    var part: IGlobalPartsMarked;
    part := IGlobalPartsMarked(enum.Current);

    if (part.IsMarked and (aMarkedFlag and PARTS_MARKED) > 0)
    or (not part.IsMarked and (aMarkedFlag and PARTS_UNMARKED) > 0)
    {
      if (part.Children.Count=0 and ((aLeafFlag and PARTS_LEAF) > 0))
      or (part.Children.Count>0 and ((aLeafFlag and PARTS_NODE) > 0))
      {
        aGoodsMarkedCollection.Add(PartsMarkedToGoodsMarkedCollectionItem(part));
      }
    }

    if part.Children.Count>0
      AddPartsToGoodsMarkedCollection(part.Children, aGoodsMarkedCollection, aMarkedFlag, aLeafFlag);

  }
}

function IGlobalPartsConverter.PartsToGoodsCollection(aPartsCollection: ICollection;
                                                      aLeafFlag: byte = PARTS_LEAF): ICollection;
{
  var c: ICollection;
  c := ICollection(new(System::Collection));
  AddPartsToGoodsCollection(aPartsCollection, c, aLeafFlag);
  result := c;
}

function IGlobalPartsConverter.PartsToGoodsMarkedCollection(aPartsMarkedCollection: ICollection;
                                                            aMarkedFlag: byte = PARTS_MARKED;
                                                            aLeafFlag: byte = PARTS_LEAF): ICollection;
{
  var c: ICollection;
  c := ICollection(new(System::Collection));
  AddPartsToGoodsMarkedCollection(aPartsMarkedCollection, c, aMarkedFlag, aLeafFlag);
  result := c;
}



end.
