#include DeflatorResolver.vih
#include Query.vih

#component "M_MnPlan"

VipInterface Algoritm_5106 Implements oAlgoritm_Sys;
Interface Algoritm_5106 '' (,hcNoContext,) EscClose, Cyan;

sql query qSpmnplan =
select vsp.nrec as ValspmnpNrec, av.vComp as DeflatorGroupNrec, year(datetime(ks.dsopr, 0)) as IncomeYear, year(datetime(per.dbeg,0)) as ForecastYear, vsp1.Nrec as ValspmnpTotalNrec
from tPick
join spmnplan spm on tPick.cRec = spm.nrec
join spsopr sps on spm.cAnval4 = sps.nrec and 1 = sps.prmc
join katmc on spm.cizd = katmc.nrec
join attrnam an on 1432 = an.wtable and 'Группа индексов дефляторов' = an.name
join attrval av on 1432 = av.wtable and katmc.cgroupmc = av.crec and an.nrec = av.cattrnam
join katsopr ks on sps.csopr = ks.nrec
join spmnpl spl on spm.nrec = spl.cSpmnplan and 1 = spl.wkolan and 21 = spl.wkodgr4
join fpperiod per on spl.canval4 = per.nrec
join valspmnp vsp on spl.nrec = vsp.cspmnpl
join spmnpl spl1 on spm.nrec = spl1.cSpmnplan and 24 = spl1.wkolan and 28 = spl1.wkodgr4 and spm.cmnplan = spl1.canval4 and 0 = spl1.wkodgr5 and 0 = spl1.canval5
join valspmnp vsp1 on spl1.nrec = vsp1.cspmnpl
;

var
  _formplNrec: comp;
  _mnplanNrec: comp;
  _deflatorWayaccouNrec: comp;
  _deflatorResolver: AGAT::oDeflatorResolver;
  _baseyear: word;

create view
as select *
from formpl, mnplan, fpperiod, objacct deflatorOA, mnplan deflatorMnplan, pick, spmnplan spmChild, valspmnp
where ((
  _formplNrec            == formpl.nrec and
  _mnplanNrec            == mnplan.nrec and

  mnplan.canval3         == fpperiod.nrec and

  20000                  == pick.wlist  and
  pick.cRec              == spmChild.cSpmnplan and

  4                      == deflatorOA.typeown  and
  _mnplanNrec            == deflatorOA.cowner   and
  4                      == deflatorOA.typeobj  and
  deflatorOA.cobject     == deflatorMnplan.nrec and (deflatorMnplan.cwayaccou = _deflatorWayaccouNrec)
));

//Реализация функций объектного интерфейса--------------------------------------------------------------------
Function RunInter(wflag: word; var pt: TRecAcc): boolean;
{
  RunInter := false;
  wflag := wflag; pt.Position := pt.Position;

  if getfirst pick != tsOk
  {
    //message('Не помечено ни одной позиции');
    //exit;
    insert pick (wlist, crec)
    select 20000, spmnplan.nrec
    from spmnplan
    where (( _mnplanNrec == spmnplan.cmnplan ));
  }

  //создаем временную таблицу с пометками пользователя
  sqlDropTmpTable('tPick');
  sqlCreateTmpTable('table tPick (cRec: comp);', ctmNormal);

  var q: iQuery;
  var rs: iResultSet;

  //заполняем таблицу пометками
  q := queryManager.createQuery('insert tPick (cRec) values (:cRec)');
  _loop pick
  {
    //пропускаем пометку, если это групповая строка
    if (getfirst spmChild = tsOk) continue;

    q.SetParam('cRec', pick.crec);
    if q.Execute.ErrorCode != tsOk
    {
      message('Ошибка формирования временной таблицы с пометками пользователя', error);
      exit;
    }
  }

  //выполняем запрос для формирования цикла по помеченным строкам
  q := queryManager.createQuery(qSpmnplan);
  rs := q.GetResultSet;

  //цикл по выборке
  if rs != nullRef
  {
    if rs.getFirst = tsOk
    {
      var ValspmnpNrec: comp;
      var ValspmnpTotalNrec: comp;
      do
      {

        ValspmnpTotalNrec := rs.row.val('ValspmnpTotalNrec');
        if getfirst valspmnp where ((ValspmnpTotalNrec == valspmnp.nrec)) = tsOk
        {
          valspmnp.pricefact := _deflatorResolver.GetDeflator(rs.row.val('DeflatorGroupNrec'), rs.row.val('IncomeYear'), _baseYear);
          update current valspmnp;
        }

        ValspmnpNrec := rs.row.val('ValspmnpNrec');
        if getfirst valspmnp where ((ValspmnpNrec == valspmnp.nrec)) = tsOk
        {
          valspmnp.price := _deflatorResolver.GetDeflator(rs.row.val('DeflatorGroupNrec'), _baseYear, rs.row.val('ForecastYear'));
          update current valspmnp;
        }

      }
      while rs.getNext = tsOk;
    }
  }

  RunInter := true;
}

function InitInter(var pt: TRecAcc): boolean;
{
  result := true;

  //Находим в БД настройки алгоритма
  _mnplanNrec := pt.cMnPlan;
  _formplNrec := pt.cFormPl;
  if (getfirst formpl = tsOk)
  {
    //Ищем план с коэффициентами во входящих к текущему документу.
    var deflatorMnplanNrec: comp;
    deflatorMnplanNrec := 0;

    _deflatorWayaccouNrec := formpl.rescomp[3];
    _loop deflatorOA
    {
      if getfirst deflatorMnplan = tsOk
      {
        deflatorMnplanNrec := deflatorMnplan.nrec;
        break;
      }
    }

    //Если не находим во входящих - используем план из настроек к алгоритму
    if (deflatorMnplanNrec = 0)
      deflatorMnplanNrec := formpl.rescomp[1];

    //Инициализируем интерфейс расчета коэффициентов
    if getVipRef(_deflatorResolver, 'AGAT::IDeflatorResolver')
    {
      _deflatorResolver.InitDeflators(deflatorMnplanNrec, formpl.rescomp[2]);
    }
    else
    {
      message('Ошибка инициализации интерфейса расчета коэффициентов-дефляторов (AGAT::IDeflatorResolver)', error);
      result := false;
    }
  }
  else
  {
    message('Не найдены настройки алгоритма (pt.cFormPl='+pt.cFormPl+')', error);
    result := false;
  }

  //Находим в БД текущий документ
  if (getfirst mnplan != tsOk)
  {
    message('Не найден текущий документ (pt.cMnPlan='+pt.cMnPlan+')', error);
    result := false;
  }
  else
  {
    if getfirst fpperiod = tsOk
    {
      _baseYear := year(fpperiod.dbeg);
    }
    else
    {
      message('В плане не указан базовый период планирования', error);
      result := false;
    }
  }
}

Function DoneInter(var pt: TRecAcc): boolean;
{
  pt.Position := pt.Position;
  DoneInter := true;
}

function GetNum: word;
{
  GetNum := 5106;
}

function GetName: string; {
  GetName := 'АГАТ. Установка коэффициентов-дефляторов в представление "Период"';
}

function GetMemo (st:oSteckCommonString): boolean; {
  GetMemo := true;
  st.push(string(''));
}

function GetNameInter: string; {
  GetNameInter := 'Algoritm_5106' ;
}

function GetNameInterPr: string; {
  GetNameInterPr := 'AlgoritmSetup_5106' ;
}

end.
