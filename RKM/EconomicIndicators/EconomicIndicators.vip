#include EconomicIndicators.vih
#include Query.vih

#component "AGAT"

interface EconomicIndicators;

sql query qEI =
select spm.canval1 as eiNrec, year(datetime(per.dbeg,0)) as year, vsp.kol as value
from spmnplan spm
join spmnpl spl on spm.nrec = spl.cspmnplan and 1 = spl.wkolan and 21 = spl.wkodgr4 0 = spl.wkodgr5
join fpperiod per on spl.canval4 = per.nrec
join valspmnp vsp on spl.nrec = vsp.cspmnpl
where spm.cmnplan = :mnplanNrec
;

table struct tei (
  eiNrec: comp,
  year: word,
  value: double
) with index (
  i01 = eiNrec + year
);

var
  _anMainSalaryNrec     : comp;
  _anExtraSalaryNrec    : comp;
  _anOverheadsNrec      : comp;
  _anSocialInsuranceNrec: comp;
  _anProRiskNrec        : comp;
  _anProfitNrec         : comp;
  _anHoursNrec          : comp;
  _isInitialized        : boolean;

create view
as select *
from tei;

create view vget
var
  _eiNrec: comp;
  _year: word;
as select *
from tei, tei tei1
where ((
  _eiNrec == tei.eiNrec and
  _year   == tei.year and
  _eiNrec == tei1.eiNrec and
  _year  >>= tei1.year
));

constructor Init;
{
  _anMainSalaryNrec     := coGetTune('AGAT.RKM.ECOIND.MAINSALARY');
  _anExtraSalaryNrec    := coGetTune('AGAT.RKM.ECOIND.EXTRASALARY');
  _anOverheadsNrec      := coGetTune('AGAT.RKM.ECOIND.OVERHEADS');
  _anSocialInsuranceNrec:= coGetTune('AGAT.RKM.ECOIND.SOCINSURANCE');
  _anProRiskNrec        := coGetTune('AGAT.RKM.ECOIND.PRORISK');
  _anProfitNrec         := coGetTune('AGAT.RKM.ECOIND.PROFIT');
  _anHoursNrec          := coGetTune('AGAT.RKM.ECOIND.HOURS');
  _isInitialized        := false;
  result := true;
}

function  InitEconomicIndicators(mnplanNrec: comp): boolean;
{
  var q: IQuery;
  q := queryManager.createQuery(qEI);
  q.setParam('mnplanNrec', mnplanNrec);
  var rs: IResultSet;
  rs := q.getResultSet;
  if rs = nullref
  {
    message('EconomicIndicators.InitEconomicIndicators Ошибка выполнения запроса qEI '+q.errorCode, error);
    result := false;
  }
  else
  {
    delete all tei;
    _isInitialized := sqlCopyInto(rs, #tei, false) = 0;
    result := _isInitialized;
  }
}

function GetValue(aEconomicIndicatorNrec: comp; aYear: word): double;
{
  vGet._eiNrec := aEconomicIndicatorNrec;
  vGet._year := aYear;
  if vGet.getfirst tei = tsOk
  {
    result := vGet.tei.value;
  }
  else if vGet.getlast tei1 = tsOk
  {
    result := vGet.tei1.value;
  }
  else
    result := 0;
}

function GetMainSalary(aYear: word): double;
{
  result := getValue(_anMainSalaryNrec, aYear);
}

function GetExtraSalary(aYear: word): double;
{
  result := getValue(_anExtraSalaryNrec, aYear);
}

function GetOverheads(aYear: word): double;
{
  result := getValue(_anOverheadsNrec, aYear);
}

function GetSocialInsurance(aYear: word): double;
{
  result := getValue(_anSocialInsuranceNrec, aYear);
}

function GetProRisk(aYear: word): double;
{
  result := getValue(_anProRiskNrec, aYear);
}

function GetProfit(aYear: word): double;
{
  result := getValue(_anProfitNrec, aYear);
}

function GetHours(aYear: word): double;
{
  result := getValue(_anHoursNrec, aYear);
}

property IsInitialized: boolean read _isInitialized;

end.
