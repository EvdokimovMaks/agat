#include utest.vih
#include Explosion.vih
#include ExplosionQueryStr.vih
#include LogService.vih
#include Query.vih

#component "TEST"

vipinterface test_Explosion implements oUTest, oLogServiceSet;

interface test_Explosion;

var
  _exp: AGAT::oExplosion;
  _logService: UTILS::oLogService;

create view as select * from texplosion;

procedure SetLogService(logService: oLogService); { _logService := logService; }

function GetDescription: string; { result := 'RKM/tests/test_explosion.vip test_Explosion Работает только в Teach'; }

function Test: boolean;
{
  LoadVipRef(_exp, 'AGAT::iExplosion');
  _exp.AddItemForExplosion(000100000000B823h, 0001000000000006h, 1);
  delete all texplosion;
  _exp.Explosion;
  _logService.Log('Records count in texplosion = '+recordsintable(#texplosion));
  result := getfirst texplosion = tsOk;
}
end.


vipinterface test_ExplosionWithFilters implements oUTest, oLogServiceSet;

interface test_ExplosionWithFilters;

var
  _exp: AGAT::oExplosion;
  _explosionQuery           : UTILS::iExplosionQueryStr new;               //Базовый запрос разузлования
  _resultQuery              : UTILS::iExplosionResultQueryStr new;         //Базовый запрос выборки результата
  _resultQueryCostitemFilter: UTILS::iExplosionQueryStr_KauFilter new;     //Фильтр на результат по статье
  _resultQueryDeliverFilter : UTILS::iExplosionQueryStr_KauFilter new;     //Фильтр на результат по поставщику
  _resultQueryTypemcFilter  : UTILS::iExplosionQueryStr_KauFilter new;     //Фильтр на результат по типу мц
  _resultQueryGroupmcFilter : UTILS::iExplosionQueryStr_GroupmcFilter new; //Фильтр на результат по группе мц
  _resultQueryObjtypeFilter : UTILS::iExplosionQueryStr_ObjtypeFilter new; //Фильтр на результат по виду объекта - МЦ/Услуга
  _logService: UTILS::oLogService;

create view as select * from texplosion;

procedure SetLogService(logService: oLogService); { _logService := logService; }

function GetDescription: string; { result := 'RKM/tests/test_explosion.vip test_ExplosionWithFilters Разузлование с фильтрами. Работает только в Teach'; }

function Test: boolean;
{
  LoadVipRef(_exp, 'AGAT::iExplosion');
  _exp.AddItemForExplosion(000100000000B823h, 0001000000000006h, 1);

  _exp.ExplosionQueryStr                  := UTILS::oQueryStr(_explosionQuery);

  _explosionQuery.AddFilter(oQueryStr(_resultQueryCostitemFilter));
  _explosionQuery.AddFilter(oQueryStr(_resultQueryDeliverFilter));
  _explosionQuery.AddFilter(oQueryStr(_resultQueryTypemcFilter));
  _explosionQuery.AddFilter(oQueryStr(_resultQueryGroupmcFilter));
  _explosionQuery.AddFilter(oQueryStr(_resultQueryObjtypeFilter));

  var _formplNrec: comp;
  _formplNrec := 281474976710925;

  _resultQueryCostitemFilter.FormplNrec := _formplNrec;
  _resultQueryCostitemFilter.Typerec    := 2;
  _resultQueryCostitemFilter.KodgrKAU   := 10016;

  _resultQueryDeliverFilter.FormplNrec  := _formplNrec;
  _resultQueryDeliverFilter.Typerec     := 3;
  _resultQueryDeliverFilter.KodgrKAU    := 1;

  _resultQueryTypemcFilter.FormplNrec   := _formplNrec;
  _resultQueryTypemcFilter.Typerec      := 4;
  _resultQueryTypemcFilter.KodgrKAU     := 5008;

  _resultQueryGroupmcFilter.FormplNrec  := _formplNrec;
  _resultQueryGroupmcFilter.Typerec     := 1;

  _resultQueryObjtypeFilter.Flag        := 1;

  _exp.ResultQueryStr                   := UTILS::oQueryStr(_resultQuery);

  delete all texplosion;
  _exp.Explosion;
  _logService.Log('Records count in texplosion = '+recordsintable(#texplosion));
  result := getfirst texplosion = tsOk;
}

end.
