#include createtune.vih
#include tunespec.vih
#include getkau.vih

Handler with replace NOUUC_CreateTuneComponent
on extensionPoint epCreateTuneComponent (TR : ObjCreateTuneEx)
Action {
  Result := true;
  TR.AddPart(0, 'AGAT.RKM', '', 'Агат.РКМ', 0);

  TR.AddTune(0, 'AGAT.RKM.TPER','AGAT.RKM','Тип периода планирования',ftComp,'','','');
  TR.AddIntr('GetTPer');

  TR.AddTune(0, 'AGAT.RKM.KAUDEFLWAY','AGAT.RKM','Шаблон Группа индексов дефляторов',ftComp,'','','');
  TR.AddIntr('SelectWayAccou');

  TR.AddTune(0, 'AGAT.RKM.KAUDEFLGROUP','AGAT.RKM','КАУ Группа индексов дефляторов',ftComp,'','','');
  TR.AddIntr('SelectKAU');

  TR.AddPart(0, 'AGAT.RKM.ECOIND', 'AGAT.RKM', 'Экономические показатели', 0);

  TR.AddTune(0, 'AGAT.RKM.ECOIND.WAY','AGAT.RKM.ECOIND','Шаблон Экономические показатели',ftComp,'','','');
  TR.AddIntr('SelectWayAccou');

  TR.AddTune(0, 'AGAT.RKM.ECOIND.KAU','AGAT.RKM.ECOIND','КАУ Экономические показатели',ftComp,'','','');
  TR.AddIntr('SelectKAU');

  TR.AddTune(0, 'AGAT.RKM.ECOIND.MAINSALARY','AGAT.RKM.ECOIND','Аналитика Средняя заработная плата',ftComp,'','','');
  TR.AddIntr('SelectEcoIndAn');

  TR.AddTune(0, 'AGAT.RKM.ECOIND.EXTRASALARY','AGAT.RKM.ECOIND','Аналитика Процент дополнительной заработной платы',ftComp,'','','');
  TR.AddIntr('SelectEcoIndAn');

  TR.AddTune(0, 'AGAT.RKM.ECOIND.OVERHEADS','AGAT.RKM.ECOIND','Аналитика Процент накладных расходов',ftComp,'','','');
  TR.AddIntr('SelectEcoIndAn');

  TR.AddTune(0, 'AGAT.RKM.ECOIND.SOCINSURANCE','AGAT.RKM.ECOIND','Аналитика Процент отчислений на соцстрах',ftComp,'','','');
  TR.AddIntr('SelectEcoIndAn');

  TR.AddTune(0, 'AGAT.RKM.ECOIND.PRORISK','AGAT.RKM.ECOIND','Аналитика Процент отчислений на профриск',ftComp,'','','');
  TR.AddIntr('SelectEcoIndAn');

  TR.AddTune(0, 'AGAT.RKM.ECOIND.PROFIT','AGAT.RKM.ECOIND','Аналитика Процент прибыли',ftComp,'','','');
  TR.AddIntr('SelectEcoIndAn');

  TR.AddTune(0, 'AGAT.RKM.ECOIND.HOURS','AGAT.RKM.ECOIND','Аналитика Количество рабочих часов в году',ftComp,'','','');
  TR.AddIntr('SelectEcoIndAn');

  TR.AddTune(0, 'AGAT.RKM.ECOIND.HOURCOST','AGAT.RKM.ECOIND','Аналитика Стоимость нормо-часа',ftComp,'','','');
  TR.AddIntr('SelectEcoIndAn');
}

VipInterface AgatIntrTuneComponent implements ObjIntrTuneComponent licensed (FREE);

Handler with replace AGAT_IntrTuneComponent
on extensionPoint epIntrTuneComponent (TR: objTuneIntr; TVal: TTuneVal; Inter: string)
Action {
  var ifc : AgatIntrTuneComponent;
  result := not ifc.TuneIntrComponent (TR, TVal, Inter);
}

interface AgatIntrTuneComponent;

var
  _getkau: getkau;

create view as select * from katkau, wayaccou;

function SelectKAU(var tval: TTuneVal): boolean;
{
  result := false;
  var wkau: word;  wkau := tval.LongVal;
  var ckau: comp;  ckau := tval.CompVal;
  if runinterface(F_AN::GetKauTable, 3, 32, wkau, ckau) = cmDefault
  {
    TVal.LongVal := wkau;
    TVal.CompVal := ckau;
    TVal.StrVal := if(getfirst katkau where ((ckau == katkau.nrec)) = tsOk, katkau.name, '');
    result := true;
  }
}

function SelectEconomicIndicatorsAn(var tVal: TTuneVal): boolean;
{
  result := false;

  var ckau: comp;
  var wkau: word;
  ckau := cogettune('AGAT.RKM.ECOIND.KAU');

  if getfirst katkau where ((ckau == katkau.nrec)) != tsok
  {
    message('Не указан каталог аналитики "Нормативные показатели"', error);
    exit;
  }
  else
    wkau := katkau.kodgroup;

  var c: comp;
  c := tVal.CompVal;

  if _getkau.GetCodeKau(1, wkau, c) > 0
  {
    tVal.CompVal := c;
    tVal.StrVal := if(getanykau(1,wkau,c), givenanname(1), '');
    result := true;
  }
}

function SelectWayAccou(var tVal: TTuneVal): boolean;
{
  result := false;
  var c: comp;
  c := tVal.CompVal;
  if runinterface(M_MNPLAN::NastrPl, 0, c, 3) = cmDefault
  {
    tVal.CompVal := c;
    tVal.StrVal := if ( getfirst wayaccou where ((c == wayaccou.nrec)) = tsOk, wayaccou.name, '');
    result := true;
  }
}

Function TuneIntrComponent (TR : objTuneIntr; TVal : TTuneVal; Inter : String) : Boolean;
{
  var isTuneSet: boolean; isTuneSet := false;

  case inter of
    'SELECTKAU': isTuneSet := SelectKAU(tVal);
    'SELECTECOINDAN': isTuneSet := SelectEconomicIndicatorsAn(tVal);
    'SELECTWAYACCOU': isTuneSet := SelectWayAccou(tVal);
  end;

  if isTuneSet
  {
    TR.UpdateTuneVal(TVal);
    result := true;
  }
  else
    result := false;
}

end.
