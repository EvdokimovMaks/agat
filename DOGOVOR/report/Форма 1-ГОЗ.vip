#component "AGAT"
interface Forma1GOZ 'Форма 1-ГОЗ' escclose, doaccept;
show (,,39,7);

table struct dog (
  cdog   : comp,
  cappdog: comp,
  ddoc   : date,
  nodoc  : string[40],
  viddog : string[80],
  OrgName: string[150],
  OrgCode: string[10],
  dbeg   : date,
  dend   : date,
  name   : string
) with index (
  i01 = nodoc,
  i02 = cdog
);

table struct det (
  cdog: comp,
  type: word,
  kodgr: word,
  crec: comp,
  cKatStroy: comp,
  kol: double,
  summa: double
) with index (
  i01 = cdog + type + cKatStroy,
  i02 = type
);

table struct col (
  cdog: comp,
  d111: double,
  d112: double,
  d12 : double,
  d13 : double,
  d141: double,
  d142: double,
  d143: double,
  d151: double,
  d152: double,
  d153: double,
  d154: double,
  d155: double,
  d156: double,
  d16 : double,
  d17 : double,
  d181: double,
  d182: double,
  d183: double,
  d19 : double
) with index (
  i01 = cdog
);

var
  dRep1, dRep2: date;
  pXL: XLSRepBuilder;
  sXLSFileName, sXLTFileName: string;
  iGetKau: GetKAU;
  ea: iExtAttr;
  flag: byte;

sql query sSelectEtap =
insert ks (cappdog, cKatStroy, dend, kol, summa)
select dog.cappdog,
       sm.cobj,
       max(case when coalesce(avprik.vdate,0)>0 then avprik.vdate else calplan.dto end),
       sum(spd.kol),
       sum(spd.summa+case when calplan.vhodnal=2 then spd.sumnds else 0 end)
from dog
join calplan on dog.cappdog = calplan.cdogovor and calplan.directmc = 1
join spdocs spd on 403 = spd.tidk and calplan.nrec = spd.cdoc
join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1723 = sm.cotable and spd.nrec = sm.cspec
left join attrval avprik on avprik.wtable = 1702 and avprik.crec = calplan.nrec and avprik.cattrnam = #comp(00010000000000D8h)
group by dog.cappdog, sm.cobj;

sql query sSelectCalPlan =
insert cp (cappdog, cCalPlan, cKatStroy, dend, kol, summa)
select ks.cappdog,
       CalPlan.nRec,
       ks.cKatStroy,
       max(ks.dend),
       sum(spd.kol),
       sum((spd.summa+case when calplan.vhodnal=2 then spd.sumnds else 0 end)*coalesce(cursval.sumrubl,1))
from ks
join calplan on ks.cappdog = calplan.cdogovor and calplan.directmc = 1
join spdocs spd on 403 = spd.tidk and calplan.nrec = spd.cdoc
join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1723 = sm.cotable and spd.nrec = sm.cspec and ks.cKatStroy = sm.cobj
left join (select kodvalut, max(datval) as datval from cursval where datval <= :drep2 group by kodvalut) cv on spd.cval = cv.kodvalut
left join cursval on spd.cval = cursval.kodvalut and coalesce(cv.datval,0) = cursval.datval
group by ks.cappdog, CalPlan.nRec, ks.cKatStroy
;

sql query sFillCol =
insert col (cdog,d111,d112,d12,d13,d141,d142,d143,d151,d152,d153,d154,d155,d156,d17,d181,d182,d183)
select dog.cdog,
       coalesce(det111.summa/1000,0),
       coalesce(det112.summa,0),
       coalesce(det12.summa/1000,0),
       coalesce(det13.summa,0),
       coalesce(det141.summa/1000,0),
       coalesce(det142.summa/1000,0),
       coalesce(det143.summa/1000,0),
       coalesce(det151.summa/1000,0),
       coalesce(det152.summa,0),
       coalesce(det153.summa/1000,0),
       coalesce(det154.summa,0),
       coalesce(det155.summa/1000,0),
       coalesce(det156.summa,0),
       case when coalesce(det17.summa,0) > 0 then coalesce(det17.summa/1000,0) else 0 end,
       coalesce(det181.summa/1000,0),
       coalesce(det182.summa/1000,0),
       coalesce(det183.summa/1000,0)
from dog
left join (select cdog, sum(summa) as summa from det where type=111 group by cdog) det111 on dog.cdog = det111.cdog
left join (select cdog, sum(kol)   as summa from det where type=112 group by cdog) det112 on dog.cdog = det112.cdog
left join (select cdog, sum(summa) as summa from det where type=12  group by cdog) det12  on dog.cdog = det12.cdog
left join (select cdog, sum(kol)   as summa from det where type=13  group by cdog) det13  on dog.cdog = det13.cdog
left join (select cdog, sum(summa) as summa from det where type=141 group by cdog) det141 on dog.cdog = det141.cdog
left join (select cdog, sum(summa) as summa from det where type=142 group by cdog) det142 on dog.cdog = det142.cdog
left join (select cdog, sum(summa) as summa from det where type=143 group by cdog) det143 on dog.cdog = det143.cdog
left join (select cdog, sum(summa) as summa from det where type=151 group by cdog) det151 on dog.cdog = det151.cdog
left join (select cdog, sum(kol)   as summa from det where type=152 group by cdog) det152 on dog.cdog = det152.cdog
left join (select cdog, sum(summa) as summa from det where type=153 group by cdog) det153 on dog.cdog = det153.cdog
left join (select cdog, sum(kol)   as summa from det where type=154 group by cdog) det154 on dog.cdog = det154.cdog
left join (select cdog, sum(summa) as summa from det where type=155 group by cdog) det155 on dog.cdog = det155.cdog
left join (select cdog, sum(kol)   as summa from det where type=156 group by cdog) det156 on dog.cdog = det156.cdog
left join (select cdog, sum(summa) as summa from det where type=16  group by cdog) det16  on dog.cdog = det16.cdog
left join (select cdog, sum(summa) as summa from det where type=17  group by cdog) det17  on dog.cdog = det17.cdog
left join (select cdog, sum(summa) as summa from det where type=181 group by cdog) det181 on dog.cdog = det181.cdog
left join (select cdog, sum(summa) as summa from det where type=182 group by cdog) det182 on dog.cdog = det182.cdog
left join (select cdog, sum(summa) as summa from det where type=183 group by cdog) det183 on dog.cdog = det183.cdog
left join (select cdog, sum(summa) as summa from det where type=19  group by cdog) det19  on dog.cdog = det19.cdog
;

create view
var
  curtype: word;
  ColCaption: string;
as select *
from dog, col, det, det det1,
     dog brdog, col brcol, det brdet, oborot brOborot, soprhoz brSoprHoz, katdoc brKatDoc, calplan brCalPlan
where ((
  brdog.cdog  == brcol.cdog and
  brdog.cdog  == brdet.cdog and
  curtype     == brdet.type and
  brdet.crec  == brOborot.nRec and
  brOborot.cSoprHoz == brSoprHoz.nRec and
  brdet.kodgr == brKatDoc.tidkgal and
  brdet.crec  == brCalPlan.nRec
));

screen scmain;
fields
  dRep1: noprotect;
  dRep2: noprotect;
  flag : noprotect;
buttons
  cmDoOk, default;
  cmCancel;
<<

`Дата с` .@@@@@@@@@@ `по` .@@@@@@@@@@

  [.] Показать расшифровку`

         <. Продолжить .> <. Отмена .>
>>
end;

function GetDetDocName: string;
var
  _d1, _d2: date;
{
  GetDetDocName := string(brDet.cRec,0,0);
  case brDet.Type of
    111,112,12,13:
    {
      if (getfirst brCalPlan = tsOk)
      {
        _d1 := ea.dGetAttrId(1702, brCalPlan.nRec, 281474976710871);
        _d2 := ea.dGetAttrId(1702, brCalPlan.nRec, 281474976710872);
        result := 'ПКП №'+brCalPlan.NoDoc+' '+if(_d1=0, brCalPlan.dFrom, _d1)+' - '+if(_d2=0, brCalPlan.dTo, _d2)+' '+brCalPlan.NoDoc_Ext;
      }
    }
    141,142,143,16,181,182,183,19:
    {
      if (getFirst brOborot = tsOk)
        if (getfirst brSoprHoz = tsOk)
          if (getfirst brKatDoc = tsOk)
            GetDetDocName := brKatDoc.Name+' №'+brSoprHoz.NoDoc+' от '+brSoprHoz.datob;
    }
    17:
    {
      if brDet.kodgr = 80
        GetDetDocName := if(getanykau(0, brDet.KodGr, brDet.cRec),givenanname(1),'')
      else
        if (getFirst brOborot = tsOk)
          if (getfirst brSoprHoz = tsOk)
            if (getfirst brKatDoc = tsOk)
              GetDetDocName := brKatDoc.Name+' №'+brSoprHoz.NoDoc+' от '+brSoprHoz.datob;
    }
  else
    GetDetDocName := if(getanykau(0, brDet.KodGr, brDet.cRec),givenanname(1),'');
  end;
}

procedure OpenDocForEdit;
var
  c: comp;
{
  case brDet.Type of
    111, 112, 12, 13:
    {
      c := brDet.cRec;
      runinterfacenomodal(L_DOGOVOR::CALPLAN, brDog.cAppDog, c);
    }
    141,142,143:
    {
      if (getFirst brOborot = tsOk)
      if (getfirst brSoprHoz = tsOk)
      {
        c := brSoprHoz.cSoprDoc;
        runinterfacenomodal(F_PLPOR::PlPor, brSoprHoz.TiDkGal, brSoprHoz.TipDoc, brSoprHoz.cSoprDoc);
      }
    }
    16,181,182,183,19:
    {
      if (getFirst brOborot = tsOk)
      if (getfirst brSoprHoz = tsOk)
      {
        c := brSoprHoz.cSoprDoc;
        if brSoprHoz.TiDkGal = 10 or brSoprHoz.TiDkGal = 2
          runinterfacenomodal(F_PLPOR::PlPor, brSoprHoz.TiDkGal, brSoprHoz.TipDoc, brSoprHoz.cSoprDoc)
        else
        {
          PutCommand(cmEdit);
          iGetKau.GetCodeKAU(1, 80, c);
        }
      }
    }
    17:
    {
      if brDet.kodgr = 80
      {
        c := brDet.cRec;
        PutCommand(cmEdit);
        iGetKau.GetCodeKAU(1, 80, c);
      }
      else
      {
        if (getFirst brOborot = tsOk)
        if (getfirst brSoprHoz = tsOk)
        {
          c := brSoprHoz.cSoprDoc;
          runinterfacenomodal(F_PLPOR::PlPor, brSoprHoz.TiDkGal, brSoprHoz.TipDoc, brSoprHoz.cSoprDoc);
        }
      }
    }
  else
  {
    c := brDet.cRec;
    PutCommand(cmEdit);
    iGetKau.GetCodeKAU(1, brDet.KodGr, c);
  }
  end;
}

window wInfo 'Расшифровка';
browse brTop (,,sci14Esc);
show (,,,9);
table brDog;
fields
  brDog.nodoc 'Номер договора': [10], protect;
  brDog.OrgName 'Контрагент': [20], protect;
  brCol.d111 '11.1': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d112 '11.2': [3], protect;
  brCol.d12  '12 ' : [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d13  '13 ' : [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d141 '14.1': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d142 '14.2': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d143 '14.3': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d151 '15.1': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d152 '15.2': [3], protect;
  brCol.d153 '15.3': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d154 '15.4': [3], protect;
  brCol.d155 '15.5': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d156 '15.6': [3], protect;
  brCol.d16  '16 ' : [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d17  '17 ' : [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d181 '18.1': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d182 '18.2': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d183 '18.3': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d19  '19 ' : [8,'\2p[|-]366`666`666`666`666.88'], protect;
end;
panel pnBot;
table brDet;
browse brBottom (,,sci14Esc);
show (,10,50,);
fields
  [DocName] GetDetDocName 'Документ': [30], protect;
  if(getanykau(0, 40, brDet.cKatStroy),givenanname(1),'') 'Заказ': [20], protect;
  brDet.Kol 'Количество': [10], protect;
  brDet.Summa 'Сумма': [10,'\2p[|-]366`666`666`666`666.88'], protect;
end;
screen scBotRight;
show(51,10,,);
fields
  GroupWrap(ColCaption, 1, 100): skip;
  GroupWrap(ColCaption, 2, 100): skip;
  GroupWrap(ColCaption, 3, 100): skip;
<<
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;
end; //panel
handleevent
cmEdit:
{
  case curfield of
    #DocName: OpenDocForEdit;
    #brDog.Nodoc, #brDog.OrgName:
    {
      var c: comp;
      c := brDog.cAppDog;
      runinterfacenomodal(L_DOGOVOR::DOGOVOR, 0, 0, 0, 0, c, c);
    }
  end;
}
end;
end; //window winfo

procedure CalcOverDue(aCol: word);
{
  _loop dog
  {
    _loop det where ((dog.cdog == det.cdog and aCol == det.type and (det.summa > 0) ))
    {
      while (det.summa > 0.01)
      {
        if (getfirst det1 where ((dog.cdog == det1.cdog and aCol == det1.type and det.cKatStroy == det1.cKatStroy and (det1.summa < -0.01) )) = tsOk)
        {
          if (det.summa > abs(det1.summa))
          {
            update current det set det.summa := det.summa + det1.summa;
            delete current det1;
          }
          else
          {
            update current det1 set det1.summa := det1.summa + det.summa;
            delete current det;
            break;
          }
        }
        else
        {
          break;
        }
      }
    }
    delete all det where ((dog.cdog == det.cdog and aCol == det.type and (det.summa < 0.01) ));
  }
}

procedure FillTables;
var
  s: longint;
{
  //временная таблица для договоров
  sqlFreeStr(s);
  sqlAddStr(s, 'table dog (cdog: comp, cappdog: comp) with index (i01 = cdog + cappdog);');
  sqlCreateTmpTable(s , ctmNormal);
  sqlExecDirect('DELETE FROM dog');
  //временная таблица для календарных планов
  sqlFreeStr(s);
  sqlAddStr(s,'table cp (cappdog: comp, cCalPlan: comp, cKatStroy: comp, dend: date, kol: double, summa: double) with index (i01 = cappdog);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM cp');
  //временная таблица для этапов
  sqlFreeStr(s);
  sqlAddStr(s,'table ks (cappdog: comp, cKatStroy: comp, dend: date, kol: double, summa: double) with index (i01 = cappdog);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM ks');
  //временная таблица для колонок
  sqlFreeStr(s);
  sqlAddStr(s,'table col (cdog: comp, d111: double, d112: double, d12: double, d13: double,');
  sqlAddStr(s,'d141: double, d142: double, d143: double, d151: double, d152: double, d153: double, d154: double,');
  sqlAddStr(s,'d155: double, d156: double, d16: double, d17: double, d181: double, d182: double, d183: double, d19: double ) with index (i01 = cdog);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM col');
  //временная таблица для детализации сумм
  sqlFreeStr(s);
  sqlAddStr(s,'table det (cdog: comp, type: word, kodgr: word, crec: comp, cKatStroy: comp, kol: double, summa: double) with index (i01 = cdog + type);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM det');
  //заполняем таблицу договоров
  setvisualheader('2');
  sqlFreeStr(s);
  sqlAddStr(s, 'insert dog (cdog, cappdog)');
  sqlAddStr(s, 'select d.nrec, coalesce(sogl.nrec,d.nrec)');
  sqlAddStr(s, 'from dogovor d');
  sqlAddStr(s, 'join attrval avPrPr on avPrPr.wTable=1707 and avPrPr.cRec=d.nrec and avPrPr.cattrnam=#comp(281474976710833) and avPrPr.vComp=#comp(281474976711945)');
  sqlAddStr(s, 'left join (select dogovor.cdogovor as cdogovor, max(dogovor.nrec) as nrec');
  sqlAddStr(s, '           from dogovor');
  sqlAddStr(s, '           left join attrval on attrval.wtable=1707 and attrval.crec = dogovor.nrec and attrval.cattrnam=#comp(281474976710830)');
  sqlAddStr(s, '           where dogovor.tidk=401 and dogovor.status<>3 and coalesce(attrval.vcomp,#comp(0)) <> #comp(4001AB188D71B97Ah)');
  sqlAddStr(s, '           group by dogovor.cdogovor');
  sqlAddStr(s, '          ) sogl on d.nrec = sogl.cdogovor');
  sqlAddStr(s, 'left join (select kauos[2] as cdogovor, sum(sumob) as summa');
  sqlAddStr(s, '           from oborot');
  sqlAddStr(s, '           where scheto=''862'' and datob < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s, '           group by kauos[2]) od on d.nrec = od.cdogovor');
  sqlAddStr(s, 'left join (select kauks[2] as cdogovor, sum(sumob) as summa');
  sqlAddStr(s, '           from oborot');
  sqlAddStr(s, '           where schetk=''862'' and datob < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s, '           group by kauks[2]) ok on d.nrec = ok.cdogovor');
  sqlAddStr(s, 'left join (select kauos[2] as cdogovor, sum(sumob) as summa');
  sqlAddStr(s, '           from oborot');
  sqlAddStr(s, '           where scheto=''862'' and datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')');
  sqlAddStr(s, '           group by kauos[2]) od1 on d.nrec = od1.cdogovor');
  sqlAddStr(s, 'left join (select kauks[2] as cdogovor, sum(sumob) as summa');
  sqlAddStr(s, '           from oborot');
  sqlAddStr(s, '           where schetk=''862'' and datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')');
  sqlAddStr(s, '           group by kauks[2]) ok1 on d.nrec = ok1.cdogovor');
  sqlAddStr(s, 'where d.tidk=400');// and ((coalesce(od.summa,0)-coalesce(ok.summa,0))<>0 or ok1.summa>0.01 or od1.summa>0.01)');
  sqlExecDirect(s);
  //заполняем таблицу этапов
  sqlExecDirect(sSelectEtap);
  //заполняем таблицу календарных планов
  sqlFreeStr(s);
  sqlAddStr(s,'insert cp (cappdog, cCalPlan, cKatStroy, dend, kol, summa)');
  sqlAddStr(s,'select ks.cappdog,');
  sqlAddStr(s,'       CalPlan.nRec,');
  sqlAddStr(s,'       ks.cKatStroy,');
  sqlAddStr(s,'       max(ks.dend),');
  sqlAddStr(s,'       sum(spd.kol),');
  sqlAddStr(s,'       sum((spd.summa+case when calplan.vhodnal=2 then spd.sumnds else 0 end)*coalesce(cursval.sumrubl,1))');
  sqlAddStr(s,'from ks');
  sqlAddStr(s,'join calplan on ks.cappdog = calplan.cdogovor and calplan.directmc = 1');
  sqlAddStr(s,'join spdocs spd on 403 = spd.tidk and calplan.nrec = spd.cdoc');
  sqlAddStr(s,'join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1723 = sm.cotable and spd.nrec = sm.cspec and ks.cKatStroy = sm.cobj');
  sqlAddStr(s,'left join (select kodvalut, max(datval) as datval from cursval where datval <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and kodvalut<>#comp(0) group by kodvalut) cv on spd.cval = cv.kodvalut');
  sqlAddStr(s,'left join cursval on spd.cval = cursval.kodvalut and coalesce(cv.datval,0) = cursval.datval');
  sqlAddStr(s,'group by ks.cappdog, CalPlan.nRec, ks.cKatStroy');
  sqlExecDirect(s);
  //детализация по 11.1: Объем заданной к выпуску продукции (работ и услуг) в соответствии с контрактом
  setvisualheader('11.1');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 111, case when cp.ccalplan = #comp(0) then 14 else 5022 end, cp.ccalplan, cp.cKatStroy, cp.kol, cp.summa');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog');
  sqlExecDirect(s);
  //детализация по 11.2: Количество заданной к выпуску продукции (работ и услуг) в соответствии с контрактом
  setvisualheader('11.2');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 112, 5022, cp.ccalplan, cp.cKatStroy, cp.kol, cp.summa');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog');
  sqlExecDirect(s);
  //детализация по 12: Объем заданной к выпуску продукции (работ или услуг) на отчетный год в соответствии с контрактом (этапом)
  setvisualheader('12');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 12, case when cp.ccalplan = #comp(0) then 14 else 5022 end, cp.ccalplan, cp.cKatStroy, cp.kol, cp.summa');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlExecDirect(s);
  //детализация по 14.1: Авансирование работ отчетного года, выплаченные госзаказчиком (заказчиком) в отчетном году
  setvisualheader('14.1');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 141, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on (o.datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and o.schetk = ''862'' and o.subschk in (''01'',''02'') and o.kauks[3] = ks.cKatStroy');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 141, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on (o.datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and o.schetk = ''862'' and o.subschk in (''01'',''02'')');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //детализация по 14.2: Авансирование фактически перечисленное госзаказчиком (заказчиком) в предыдущие  периоды на работы отчетного года
  setvisualheader('14.2');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 142, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob < #date('+datetostr(drep1,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.subschk in (''01'',''02'') and o.kauks[3] = ks.cKatStroy');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 142, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob < #date('+datetostr(drep1,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.subschk in (''01'',''02'')');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //детализация по 14.3: Авансирование работ будущих лет, выплаченные в отчетном году и в предыдущие периоды
  setvisualheader('14.3');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 143, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend > #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.subschk in (''01'',''02'') and o.kauks[3] = ks.cKatStroy');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 143, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend > #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.subschk in (''01'',''02'')');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //детализация по 15.1: Объем фактически произведенной продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года
  setvisualheader('15.1');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 151, 80, katsopr.nrec, coalesce(sm.cobj, #comp(0)), sum(sps.kolfact), sum(sps.kolfact*sps.price + case when katsopr.vhodnal=2 then coalesce(n.summa,0) else 0 end)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and ks.ckatstroy = cp.ckatstroy');
  sqlAddStr(s,'join basedoc bd on cp.ccalplan = bd.ccalplan');
  sqlAddStr(s,'join stepdoc sd on bd.nrec = sd.cbasedoc');
  sqlAddStr(s,'join katsopr on sd.nrec = katsopr.cstepdoc and katsopr.cschfact<>#comp(0) and katsopr.vidsopr in (201, 211)');  // and (katsopr.dopr between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+'))
  sqlAddStr(s,'join spsopr sps on katsopr.nrec = sps.csopr');
  sqlAddStr(s,'left join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1110 = sm.cotable and sps.nrec = sm.cspec');
  sqlAddStr(s,'left join (select cspdoc, tipdoc, sum(summa) as summa from spdocnal group by cspdoc, tipdoc) n on sps.nrec = n.cspdoc and katsopr.vidsopr = n.tipdoc');
  sqlAddStr(s,'group by dog.cdog, katsopr.nrec, coalesce(sm.cobj, #comp(0))');
  sqlExecDirect(s);
  //детализация по 15.2: Количество фактически произведенной продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года
  setvisualheader('15.2');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 152, det.kodgr, det.crec, det.cKatStroy, det.kol, det.summa');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=151');
  sqlExecDirect(s);
  //детализация по 15.3: Объем фактически поставленной заказчику продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года
  setvisualheader('15.3');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 153, 80, katsopr.nrec, coalesce(sm.cobj, #comp(0)), sum(sps.kolfact), sum(sps.kolfact*sps.price + case when katsopr.vhodnal=2 then coalesce(n.summa,0) else 0 end)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and ks.ckatstroy = cp.ckatstroy');
  sqlAddStr(s,'join basedoc bd on cp.ccalplan = bd.ccalplan');
  sqlAddStr(s,'join stepdoc sd on bd.nrec = sd.cbasedoc');
  sqlAddStr(s,'join katsopr on sd.nrec = katsopr.cstepdoc and katsopr.cschfact<>#comp(0) and katsopr.vidsopr in (201, 211)');  // and (katsopr.dopr between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+'))
  sqlAddStr(s,'join spsopr sps on katsopr.nrec = sps.csopr');
  sqlAddStr(s,'left join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1110 = sm.cotable and sps.nrec = sm.cspec');
  sqlAddStr(s,'left join (select cspdoc, tipdoc, sum(summa) as summa from spdocnal group by cspdoc, tipdoc) n on sps.nrec = n.cspdoc and katsopr.vidsopr = n.tipdoc');
  sqlAddStr(s,'group by dog.cdog, katsopr.nrec, coalesce(sm.cobj, #comp(0))');
  sqlExecDirect(s);
  //детализация по 15.4: Количество фактически поставленной заказчику продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года
  setvisualheader('15.4');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 154, det.kodgr, det.crec, det.cKatStroy, det.kol, det.summa');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=153');
  sqlExecDirect(s);
  //детализация по 15.5: Объем фактически поставленной  заказчику продукции, выполненных работ или услуг по контрактам (договорам) прошлых лет, подтвержденных актами приемки заказчиков на конец отчетного периода
  setvisualheader('15.5');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 155, 80, katsopr.nrec, coalesce(sm.cobj, #comp(0)), sum(sps.kolfact), sum(sps.kolfact*sps.price + case when katsopr.vhodnal=2 then coalesce(n.summa,0) else 0 end)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s,'join basedoc bd on cp.ccalplan = bd.ccalplan');
  sqlAddStr(s,'join stepdoc sd on bd.nrec = sd.cbasedoc');
  sqlAddStr(s,'join katsopr on sd.nrec = katsopr.cstepdoc and (katsopr.dopr between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and katsopr.cschfact<>#comp(0) and katsopr.vidsopr in (201, 211)');
  sqlAddStr(s,'join spsopr sps on katsopr.nrec = sps.csopr');
  sqlAddStr(s,'left join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1110 = sm.cotable and sps.nrec = sm.cspec');
  sqlAddStr(s,'left join (select cspdoc, tipdoc, sum(summa) as summa from spdocnal group by cspdoc, tipdoc) n on sps.nrec = n.cspdoc and katsopr.vidsopr = n.tipdoc');
  sqlAddStr(s,'group by dog.cdog, katsopr.nrec, coalesce(sm.cobj, #comp(0))');
  sqlExecDirect(s);
  //детализация по 15.6: Количество фактически поставленной  заказчику продукции, выполненных работ или услуг по контрактам (договорам) прошлых лет, подтвержденных актами приемки заказчиков на конец отчетного периода
  setvisualheader('15.6');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 156, det.kodgr, det.crec, det.cKatStroy, det.kol, det.summa');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=155');
  sqlExecDirect(s);
  //детализация по 16: Просроченная задолженность госзаказчика за выполненные ранее работы  по состоянию  на  1 января отчетного года
  setvisualheader('16');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 16, sh.tidkgal, o.nrec, ks.cKatStroy, 0, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog');
  sqlAddStr(s,'join oborot o on (to_days(datetime(#date('+datetostr(drep1,'DD,MM,YYYY')+'),0)) - to_days(datetime(o.datob,0))) > 190 and');
  sqlAddStr(s,'                 o.scheto=''862'' and dog.cdog=o.kauos[2] and ks.cKatStroy=o.kauos[3]');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz = sh.nrec');
  sqlAddStr(s,'union all');
  sqlAddStr(s,'select dog.cdog, 16, sh.tidkgal, o.nrec, ks.cKatStroy, 0, o.sumob*(-1)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog');
  sqlAddStr(s,'join oborot o on o.datob < #date('+datetostr(drep1,'DD,MM,YYYY')+') and');
  sqlAddStr(s,'                 o.schetk=''862'' and dog.cdog=o.kauks[2] and ks.cKatStroy=o.kauks[3]');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz = sh.nrec');
  sqlExecDirect(s);
  //Детализация по 17: Объем предъявленных к оплате работ, выполненных в отчетном году, нарастающим итогом с начала года, за вычетом авансов
  setvisualheader('17');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 17, det.kodgr, det.crec, det.cKatStroy, det.kol, det.summa');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=151');
  sqlExecDirect(s);
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 17, det.kodgr, det.crec, det.cKatStroy, det.kol*(-1), det.summa*(-1)');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=141');
  sqlExecDirect(s);
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 17, det.kodgr, det.crec, det.cKatStroy, det.kol*(-1), det.summa*(-1)');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=142');
  sqlExecDirect(s);
  //Детализация по 18.1: Финансирование с учетом авансов на работы отчетного года, выплаченных в предыдущих и отчетном годах
  setvisualheader('18.1');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 181, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.kauks[3] = ks.cKatStroy and (o.scheto <> ''862'' or(o.scheto = ''862'' and o.kauks[3] <> o.kauos[3]))');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 181, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.scheto <> ''862''');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //Детализация по 18.2: Финансирование за выполненные работы или услуги по контрактам (договорам) прошлых лет, подтвержденных актами приемки заказчиков на конец отчетного периода:
  setvisualheader('18.2');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 182, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s,'join oborot o on (o.datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and o.schetk = ''862'' and o.kauks[3] = ks.cKatStroy and (o.scheto <> ''862'' or(o.scheto = ''862'' and o.kauks[3] <> o.kauos[3]))');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 182, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s,'join oborot o on (o.datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and o.schetk = ''862'' and o.scheto <> ''862''');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //детализация по 19: Объем просроченной задолженности заказчика за работы отчетного года на 1-е число первого месяца  квартала следующего за отчетным
  setvisualheader('19');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 19, sh.tidkgal, o.nrec, ks.cKatStroy, 0, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog');
  sqlAddStr(s,'join oborot o on (to_days(datetime(#date('+datetostr(drep2,'DD,MM,YYYY')+'),0)) - to_days(datetime(o.datob,0))) > 190 and');
  sqlAddStr(s,'                 o.scheto=''862'' and dog.cdog=o.kauos[2] and ks.cKatStroy=o.kauos[3]');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz = sh.nrec');
  sqlAddStr(s,'union all');
  sqlAddStr(s,'select dog.cdog, 19, sh.tidkgal, o.nrec, ks.cKatStroy, 0, o.sumob*(-1)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and');
  sqlAddStr(s,'                 o.schetk=''862'' and dog.cdog=o.kauks[2] and ks.cKatStroy=o.kauks[3]');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz = sh.nrec');
  sqlExecDirect(s);

  //расчет итогов по детализациям, заполнение col
  sqlExecDirect(sFillCol);
  //заполняем виповские таблицы
  delete all dog;
  sqlFreeStr(s);
  sqlAddStr(s,'select dog.cdog, dog.cappdog, d.ddoc, d.nodoc,');
  sqlAddStr(s,'       case');
  sqlAddStr(s,'         when coalesce(katvidd.name,'''') in (''ОКР'',''НИР'') then ''01''');
  sqlAddStr(s,'         when coalesce(katvidd.name,'''') in (''ОКР ФЦП'',''НИР ФЦП'') then ''21''');
  sqlAddStr(s,'         else coalesce(spkv.levelcode,'''') end,');
  sqlAddStr(s,'       case when katorg.shortname='''' then katorg.name else katorg.shortname end, coalesce(avk.vstring,katorg.code),');
  sqlAddStr(s,'       d.dbeg, d.dend,');
  sqlAddStr(s,'       coalesce(katvidd.name,'''')+'' ''+d.nodoc_ext');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join dogovor d on dog.cdog = d.nrec');
  sqlAddStr(s,'left join katorg on d.corg = katorg.nrec');
  sqlAddStr(s,'left join attrdog on d.nrec = attrdog.cdogovor');
  sqlAddStr(s,'left join katvidd on d.cviddog = katvidd.nrec');
  sqlAddStr(s,'left join attrval avv on 1707 = avv.wtable and d.nrec = avv.crec and #comp(281474976710829) = avv.cattrnam');    //
  sqlAddStr(s,'left join spkau spkv on coalesce(avv.vcomp, #comp(0)) = spkv.nrec');
  sqlAddStr(s,'left join attrval avk on 1418 = avk.wtable and d.corg = avk.crec and #comp(281474976711579) = avk.cattrnam');    //Код для формы 1-ГОЗ
  sqlSelectInto(s, #dog);
  delete all col;
  sqlSelectInto('select * from col', #col);
  delete all det;
  sqlSelectInto('select * from det', #det);

  //дополнительный расчет просроченных задолженностей по платежам;
  setvisualheader('16,183,19');
  CalcOverDue(16);
  CalcOverDue(19);

  insert det(cdog, type, kodgr, crec, cKatStroy, kol, summa)
  select det1.cdog, 183, sh.tidkgal, o.nrec, det1.cKatStroy, 0, o.sumob
  from det det1, oborot o, soprhoz sh
  where ((
    16             /== det1.type and
    '862'          /== o.schetk and
    det1.cKatStroy /== o.kauks[3] and
    drep1          <<= o.datob and (drep2 >= o.datob and (o.scheto<>'862' or (o.scheto='862' and o.kauks[3] <> o.kauos[3]))) and
    o.csoprhoz     /== sh.nrec
  ));

  //расчет итогов по просроченным задолженностям
  _loop det where ((16 == det.type))
    update col where ((det.cdog == col.cdog)) set col.d16 := col.d16 + det.summa / 1000;
  _loop det where ((183 == det.type))
    update col where ((det.cdog == col.cdog)) set col.d183 := col.d183 + det.summa / 1000;
  _loop det where ((19 == det.type))
    update col where ((det.cdog == col.cdog)) set col.d19 := col.d19 + det.summa / 1000;

  //удаляем "ненужные" в отчете, по мнению Ольги, договора
  _loop col
  {
    if col.d12 = 0 and col.d151 = 0 and col.d153 = 0 and col.d17 = 0 and col.d16 = 0 and col.d19 = 0
    {
      delete all dog where ((col.cdog == dog.cdog and ( not ( dog.dbeg <= dRep2 and dog.dend >= dRep1 ) ) ));
    }
  }

  //дропаем временные таблицы
  sqlDropTmpTable('dog');
  sqlDropTmpTable('cp');
  sqlDropTmpTable('ks');
  sqlDropTmpTable('col');
  sqlDropTmpTable('det');
}

procedure printrep(isCreateXLT : boolean);
var
  i: integer;
{
  if (not isCreateXLT) Set sXLSFileName := pXL.CreateReport(sXLTFileName, True)
                  else Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);
  pXL.CreateVar(sXLSFileName);
  pXL.SetStringVar('drep1', datetostr(drep1,'DD.MM.YYYY'));
  pXL.SetStringVar('drep2', datetostr(drep2,'DD.MM.YYYY'));
  pXL.PublishVar;
  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Main');
  pXL.CreateTblFld('npp');
  pXL.CreateTblFld('nodoc');
  pXL.CreateTblFld('ddoc');
  pXL.CreateTblFld('VidDog');
  pXL.CreateTblFld('OrgName');
  pXL.CreateTblFld('OrgCode');
  pXL.CreateTblFld('dBeg');
  pXL.CreateTblFld('dEnd');
  pXL.CreateTblFld('Name');
  pXL.CreateTblFld('d111');
  pXL.CreateTblFld('d112');
  pXL.CreateTblFld('d12' );
  pXL.CreateTblFld('d13' );
  pXL.CreateTblFld('d141');
  pXL.CreateTblFld('d142');
  pXL.CreateTblFld('d143');
  pXL.CreateTblFld('d151');
  pXL.CreateTblFld('d152');
  pXL.CreateTblFld('d153');
  pXL.CreateTblFld('d154');
  pXL.CreateTblFld('d155');
  pXL.CreateTblFld('d156');
  pXL.CreateTblFld('d16' );
  pXL.CreateTblFld('d17' );
  pXL.CreateTblFld('d181');
  pXL.CreateTblFld('d182');
  pXL.CreateTblFld('d183');
  pXL.CreateTblFld('d19' );
  pushPos(#brDog);
  pushPos(#brCol);
  i := 0;
  if not isCreateXLT
  _loop brDog
  {
    i++;
    pXL.ClearTblBuffer;
    pXL.SetTblStringFldValue('npp', i);
    pXL.SetTblStringFldValue('nodoc', brDog.nodoc);
    pXL.SetTblStringFldValue('ddoc', datetostr(brDog.ddoc,'DD.MM.YYYY'));
    pXL.SetTblStringFldValue('VidDog',brDog.viddog);
    pXL.SetTblStringFldValue('OrgName',brDog.OrgName);
    pXL.SetTblStringFldValue('OrgCode',brDog.OrgCode);
    pXL.SetTblStringFldValue('dBeg',datetostr(brDog.dbeg,'DD.MM.YYYY'));
    pXL.SetTblStringFldValue('dEnd',datetostr(brDog.dend,'DD.MM.YYYY'));
    pXL.SetTblStringFldValue('Name',brDog.name);
    if getfirst brCol = tsOk
    {
      pXL.SetTblNumberFldValue('d111', brCol.d111);
      pXL.SetTblNumberFldValue('d112', brCol.d112);
      pXL.SetTblNumberFldValue('d12' , brCol.d12);
      pXL.SetTblNumberFldValue('d13' , brCol.d13);
      pXL.SetTblNumberFldValue('d141', brCol.d141);
      pXL.SetTblNumberFldValue('d142', brCol.d142);
      pXL.SetTblNumberFldValue('d143', brCol.d143);
      pXL.SetTblNumberFldValue('d151', brCol.d151);
      pXL.SetTblNumberFldValue('d152', brCol.d152);
      pXL.SetTblNumberFldValue('d153', brCol.d153);
      pXL.SetTblNumberFldValue('d154', brCol.d154);
      pXL.SetTblNumberFldValue('d155', brCol.d155);
      pXL.SetTblNumberFldValue('d156', brCol.d156);
      pXL.SetTblNumberFldValue('d16' , brCol.d16);
      pXL.SetTblNumberFldValue('d17' , brCol.d17);
      pXL.SetTblNumberFldValue('d181', brCol.d181);
      pXL.SetTblNumberFldValue('d182', brCol.d182);
      pXL.SetTblNumberFldValue('d183', brCol.d183);
      pXL.SetTblNumberFldValue('d19' , brCol.d19);
    }
    pXL.InsTblRow;
  }
  popPos(#brDog);
  popPos(#brCol);
  pXL.PublishTbl('Main');
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}


handleevent
cmSetCurField:
{
  case target of
    #brCol.d111: {CurType :=111; set ColCaption := 'Объем заданной к выпуску продукции (работ и услуг) в соответствии с контрактом'; }
    #brCol.d112: {CurType :=112; set ColCaption := 'Количество заданной к выпуску продукции (работ и услуг) в соответствии с контрактом'; }
    #brCol.d12 : {CurType :=12 ; set ColCaption := 'Объем заданной к выпуску продукции (работ или услуг)  на отчетный год в соответствии с контрактом (этапом)'; }
    #brCol.d13 : {CurType :=13 ; set ColCaption := 'Объем заданной к выпуску продукции (работ или услуг) на отчетный  год с учетом корректировки  ГОЗ'; }
    #brCol.d141: {CurType :=141; set ColCaption := 'Авансирование работ отчетного года, выплаченные госзаказчиком (заказчиком) в отчетном году'; }
    #brCol.d142: {CurType :=142; set ColCaption := 'Авансирование фактически перечисленное госзаказчиком (заказчиком) в предыдущие  периоды на работы отчетного года'; }
    #brCol.d143: {CurType :=143; set ColCaption := 'Авансирование работ будущих лет, выплаченные в отчетном году и в предыдущие годы'; }
    #brCol.d151: {CurType :=151; set ColCaption := 'Объем фактически произведенной продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года'; }
    #brCol.d152: {CurType :=152; set ColCaption := 'Количество фактически произведенной продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года'; }
    #brCol.d153: {CurType :=153; set ColCaption := 'Объем фактически поставленной  заказчику продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года'; }
    #brCol.d154: {CurType :=154; set ColCaption := 'Количество фактически поставленной заказчику продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года'; }
    #brCol.d155: {CurType :=155; set ColCaption := 'Объем фактически поставленной  заказчику продукции, выполненных работ или услуг по контрактам (договорам) прошлых лет, подтвержденных актами приемки заказчиков на конец отчетного периода'; }
    #brCol.d156: {CurType :=156; set ColCaption := 'Количество фактически поставленной  заказчику продукции, выполненных работ или услуг по контрактам (договорам) прошлых лет, подтвержденных актами приемки заказчиков на конец отчетного периода'; }
    #brCol.d16 : {CurType :=16 ; set ColCaption := 'Просроченная задолженность госзаказчика за выполненные ранее работы  по состоянию  на  1 января отчетного года'; }
    #brCol.d17 : {CurType :=17 ; set ColCaption := 'Объем предъявленных к оплате работ, выполненных в отчетном  году, нарастающим итогом с начала года, за вычетом  авансов'; }
    #brCol.d181: {CurType :=181; set ColCaption := 'Финансирование с учетом авансов на работы отчетного года, выплаченных в предыдущих и отчетном годах'; }
    #brCol.d182: {CurType :=182; set ColCaption := 'Финансирование за выполненные работы или услуги по контрактам (договорам) прошлых лет, подтвержденных актами приемки заказчиков на конец отчетного периода'; }
    #brCol.d183: {CurType :=183; set ColCaption := 'Погашение просроченной  задолженности заказчика за принятую до 1 января отчетного года, и не оплаченную им продукцию, выполненные работы и услуги'; }
    #brCol.d19 : {CurType :=19 ; set ColCaption := 'Объем просроченной задолженности заказчика за работы отчетного года на 1-е число первого месяца  квартала следующего за отчетным'; }
  end;

  rereadrecord(#brDet);
}
cmDoOk:
{
  StartNewVisual(vtRotateVisual, vfThread + vfTimer, '', 0);
  FillTables;
  SetVisualHeader('Выгрузка в Excel');
  printrep(false);
  StopVisual('',0);
  rereadrecord;
  rereadrecord(#brDog);
  if ((flag and 1) > 0)
    runwindow(wInfo);
}
cminit:
{
  if not readmydsk(flag,  'Forma1GOZ_flag' , false) flag  := 1;
  if not readmydsk(dRep1, 'Forma1GOZ_dRep1', false) dRep1 := date(1,1,year(cur_date));
  if not readmydsk(dRep2, 'Forma1GOZ_dRep2', false) dRep2 := date(last_day(cur_date),month(cur_date),year(cur_date));
  sXLTFileName := TranslatePath('%StartPath%xls\Forma1GOZ.xlt');
}
cmdone:
{
  SaveMyDsk(flag,  'Forma1GOZ_flag' );
  savemydsk(dRep1, 'Forma1GOZ_dRep1');
  savemydsk(dRep2, 'Forma1GOZ_dRep2');
}
end;
end.

VipInterface UserReport_Forma1GOZ Implements IUserReport licensed(free);
Interface UserReport_Forma1GOZ;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::Forma1GOZ);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Форма 1-ГОЗ';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := 'Отчеты ГОЗ'
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'DOGOVOR';
    end;
  end;
end.
