#include XLREPORT.vih
#include getkau.vih
#include userreport.vih
#include ContractID.vih

#component "AGAT"
interface Forma1GOZ2015 'Форма 1-ГОЗ 2015' escclose, doaccept;
show (,,39,7);

table struct dog (
  cdog   : comp,
  cappdog: comp,
  ddoc   : date,
  nodoc  : string[40],
  viddog : string[80],
  OrgName: string[150],
  OrgCode: string[10],
  OrgINN : string[20],
  dbeg   : date,
  dend   : date,
  name   : string
) with index (
  i01 = nodoc,
  i02 = cdog
);

table struct det (
  cdog: comp,
  type: word,
  kodgr: word,
  crec: comp,
  cKatStroy: comp,
  kol: double,
  summa: double
) with index (
  i01 = cdog + type + cKatStroy,
  i02 = type
);

table struct col (
  cdog: comp,
  d12: double,
  d13: double,
  d14: double,
  d15: double,
  d16: double,
  d17: double,
  d18: double,
  d19: double,
  d20: double,
  d21: double,
  d22: double,
  d23: double,
  d24: double,
  d25: double,
  d26: double,
  d27: double,
  d28: double,
  d29: double,
  d30: double
) with index (
  i01 = cdog
);

var
  dRep1, dRep2: date;
  pXL: XLSRepBuilder;
  sXLSFileName, sXLTFileName: string;
  iGetKau: GetKAU;
  ea: iExtAttr;
  flag: byte;
  ciHelper: ContractIDHelper;

sql query sSelectEtap =
insert ks (cappdog, cKatStroy, dend, kol, summa)
select dog.cappdog,
       sm.cobj,
       max(case when coalesce(avprik.vdate,0)>0 then avprik.vdate else calplan.dto end),
       sum(spd.kol),
       sum(spd.summa+case when calplan.vhodnal=2 then spd.sumnds else 0 end)
from dog
join calplan on dog.cappdog = calplan.cdogovor and calplan.directmc = 1
join spdocs spd on 403 = spd.tidk and calplan.nrec = spd.cdoc
join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1723 = sm.cotable and spd.nrec = sm.cspec
left join attrval avprik on avprik.wtable = 1702 and avprik.crec = calplan.nrec and avprik.cattrnam = #comp(00010000000000D8h)
group by dog.cappdog, sm.cobj;

sql query sSelectCalPlan =
insert cp (cappdog, cCalPlan, cKatStroy, dend, kol, summa)
select ks.cappdog,
       CalPlan.nRec,
       ks.cKatStroy,
       max(ks.dend),
       sum(spd.kol),
       sum((spd.summa+case when calplan.vhodnal=2 then spd.sumnds else 0 end)*coalesce(cursval.sumrubl,1))
from ks
join calplan on ks.cappdog = calplan.cdogovor and calplan.directmc = 1
join spdocs spd on 403 = spd.tidk and calplan.nrec = spd.cdoc
join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1723 = sm.cotable and spd.nrec = sm.cspec and ks.cKatStroy = sm.cobj
left join (select kodvalut, max(datval) as datval from cursval where datval <= :drep2 group by kodvalut) cv on spd.cval = cv.kodvalut
left join cursval on spd.cval = cursval.kodvalut and coalesce(cv.datval,0) = cursval.datval
group by ks.cappdog, CalPlan.nRec, ks.cKatStroy
;

sql query sFillCol =
insert col (cdog,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23,d24,d26,d27,d28,d29)
select dog.cdog,
       coalesce(det12.summa/1000,0),
       coalesce(det13.summa,0),
       coalesce(det14.summa/1000,0),
       coalesce(det15.summa/1000,0),
       coalesce(det16.summa/1000,0),
       coalesce(det17.summa/1000,0),
       coalesce(det18.summa/1000,0),
       coalesce(det19.summa/1000,0),
       coalesce(det20.summa,0),
       coalesce(det21.summa/1000,0),
       coalesce(det22.summa,0),
       coalesce(det23.summa/1000,0),
       coalesce(det24.summa,0),
       case when coalesce(det26.summa,0) > 0 then coalesce(det26.summa/1000,0) else 0 end,
       coalesce(det27.summa/1000,0),
       coalesce(det28.summa/1000,0),
       coalesce(det29.summa/1000,0)
from dog
left join (select cdog, sum(summa) as summa from det where type=12 group by cdog) det12 on dog.cdog = det12.cdog
left join (select cdog, sum(kol)   as summa from det where type=13 group by cdog) det13 on dog.cdog = det13.cdog
left join (select cdog, sum(summa) as summa from det where type=14 group by cdog) det14 on dog.cdog = det14.cdog
left join (select cdog, sum(summa) as summa from det where type=15 group by cdog) det15 on dog.cdog = det15.cdog
left join (select cdog, sum(summa) as summa from det where type=16 group by cdog) det16 on dog.cdog = det16.cdog
left join (select cdog, sum(summa) as summa from det where type=17 group by cdog) det17 on dog.cdog = det17.cdog
left join (select cdog, sum(summa) as summa from det where type=18 group by cdog) det18 on dog.cdog = det18.cdog
left join (select cdog, sum(summa) as summa from det where type=19 group by cdog) det19 on dog.cdog = det19.cdog
left join (select cdog, sum(kol)   as summa from det where type=20 group by cdog) det20 on dog.cdog = det20.cdog
left join (select cdog, sum(summa) as summa from det where type=21 group by cdog) det21 on dog.cdog = det21.cdog
left join (select cdog, sum(kol)   as summa from det where type=22 group by cdog) det22 on dog.cdog = det22.cdog
left join (select cdog, sum(summa) as summa from det where type=23 group by cdog) det23 on dog.cdog = det23.cdog
left join (select cdog, sum(kol)   as summa from det where type=24 group by cdog) det24 on dog.cdog = det24.cdog
left join (select cdog, sum(summa) as summa from det where type=26 group by cdog) det26 on dog.cdog = det26.cdog
left join (select cdog, sum(summa) as summa from det where type=27 group by cdog) det27 on dog.cdog = det27.cdog
left join (select cdog, sum(summa) as summa from det where type=28 group by cdog) det28 on dog.cdog = det28.cdog
left join (select cdog, sum(summa) as summa from det where type=29 group by cdog) det29 on dog.cdog = det29.cdog
;

create view
var
  curtype: word;
  ColCaption: string;
as select *
from dog, col, det, det det1,
     dog brdog, col brcol, det brdet, oborot brOborot, soprhoz brSoprHoz, katdoc brKatDoc, calplan brCalPlan
where ((
  brdog.cdog  == brcol.cdog and
  brdog.cdog  == brdet.cdog and
  curtype     == brdet.type and
  brdet.crec  == brOborot.nRec and
  brOborot.cSoprHoz == brSoprHoz.nRec and
  brdet.kodgr == brKatDoc.tidkgal and
  brdet.crec  == brCalPlan.nRec
));

screen scmain;
fields
  dRep1: noprotect;
  dRep2: noprotect;
  flag : noprotect;
buttons
  cmDoOk, default;
  cmCancel;
<<

`Дата с` .@@@@@@@@@@ `по` .@@@@@@@@@@

  [.] Показать расшифровку`

         <. Продолжить .> <. Отмена .>
>>
end;

function GetDetDocName: string;
var
  _d1, _d2: date;
{
  GetDetDocName := string(brDet.cRec,0,0);
  case brDet.Type of
    12, 13, 14, 15:
    {
      if (getfirst brCalPlan = tsOk)
      {
        _d1 := ea.dGetAttrId(1702, brCalPlan.nRec, 281474976710871);
        _d2 := ea.dGetAttrId(1702, brCalPlan.nRec, 281474976710872);
        result := 'ПКП №'+brCalPlan.NoDoc+' '+if(_d1=0, brCalPlan.dFrom, _d1)+' - '+if(_d2=0, brCalPlan.dTo, _d2)+' '+brCalPlan.NoDoc_Ext;
      }
    }
    16,17,18,25,27,28,29,30:
    {
      if (getFirst brOborot = tsOk)
        if (getfirst brSoprHoz = tsOk)
          if (getfirst brKatDoc = tsOk)
            GetDetDocName := brKatDoc.Name+' №'+brSoprHoz.NoDoc+' от '+brSoprHoz.datob;
    }
    26:
    {
      if brDet.kodgr = 80
        GetDetDocName := if(getanykau(0, brDet.KodGr, brDet.cRec),givenanname(1),'')
      else
        if (getFirst brOborot = tsOk)
          if (getfirst brSoprHoz = tsOk)
            if (getfirst brKatDoc = tsOk)
              GetDetDocName := brKatDoc.Name+' №'+brSoprHoz.NoDoc+' от '+brSoprHoz.datob;
    }
  else
    GetDetDocName := if(getanykau(0, brDet.KodGr, brDet.cRec),givenanname(1),'');
  end;
}

procedure OpenDocForEdit;
var
  c: comp;
{
  case brDet.Type of
    12, 13, 14, 15:
    {
      c := brDet.cRec;
      runinterfacenomodal(L_DOGOVOR::CALPLAN, brDog.cAppDog, c);
    }
    16,17,18:
    {
      if (getFirst brOborot = tsOk)
      if (getfirst brSoprHoz = tsOk)
      {
        c := brSoprHoz.cSoprDoc;
        runinterfacenomodal(F_PLPOR::PlPor, brSoprHoz.TiDkGal, brSoprHoz.TipDoc, brSoprHoz.cSoprDoc);
      }
    }
    25,27,28,29,30:
    {
      if (getFirst brOborot = tsOk)
      if (getfirst brSoprHoz = tsOk)
      {
        c := brSoprHoz.cSoprDoc;
        if brSoprHoz.TiDkGal = 10 or brSoprHoz.TiDkGal = 2
          runinterfacenomodal(F_PLPOR::PlPor, brSoprHoz.TiDkGal, brSoprHoz.TipDoc, brSoprHoz.cSoprDoc)
        else
        {
          PutCommand(cmEdit);
          iGetKau.GetCodeKAU(1, 80, c);
        }
      }
    }
    26:
    {
      if brDet.kodgr = 80
      {
        c := brDet.cRec;
        PutCommand(cmEdit);
        iGetKau.GetCodeKAU(1, 80, c);
      }
      else
      {
        if (getFirst brOborot = tsOk)
        if (getfirst brSoprHoz = tsOk)
        {
          c := brSoprHoz.cSoprDoc;
          runinterfacenomodal(F_PLPOR::PlPor, brSoprHoz.TiDkGal, brSoprHoz.TipDoc, brSoprHoz.cSoprDoc);
        }
      }
    }
  else
  {
    c := brDet.cRec;
    PutCommand(cmEdit);
    iGetKau.GetCodeKAU(1, brDet.KodGr, c);
  }
  end;
}

window wInfo 'Расшифровка';
browse brTop (,,sci14Esc);
show (,,,9);
table brDog;
fields
  brDog.nodoc 'Номер договора': [10], protect;
  brDog.OrgName 'Контрагент': [20], protect;
  brCol.d12 '12': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d13 '13': [3], protect;
  brCol.d14 '14': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d15 '15': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d16 '16': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d17 '17': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d18 '18': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d19 '19': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d20 '20': [3], protect;
  brCol.d21 '21': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d22 '22': [3], protect;
  brCol.d23 '23': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d24 '24': [3], protect;
  brCol.d25 '25': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d26 '26': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d27 '27': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d28 '28': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d29 '29': [8,'\2p[|-]366`666`666`666`666.88'], protect;
  brCol.d30 '30': [8,'\2p[|-]366`666`666`666`666.88'], protect;
end;
panel pnBot;
table brDet;
browse brBottom (,,sci14Esc);
show (,10,50,);
fields
  [DocName] GetDetDocName 'Документ': [30], protect;
  if(getanykau(0, 40, brDet.cKatStroy),givenanname(1),'') 'Заказ': [20], protect;
  brDet.Kol 'Количество': [10], protect;
  brDet.Summa 'Сумма': [10,'\2p[|-]366`666`666`666`666.88'], protect;
end;
screen scBotRight;
show(51,10,,);
fields
  GroupWrap(ColCaption, 1, 100): skip;
  GroupWrap(ColCaption, 2, 100): skip;
  GroupWrap(ColCaption, 3, 100): skip;
<<
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;
end; //panel
handleevent
cmEdit:
{
  case curfield of
    #DocName: OpenDocForEdit;
    #brDog.Nodoc, #brDog.OrgName:
    {
      var c: comp;
      c := brDog.cAppDog;
      runinterfacenomodal(L_DOGOVOR::DOGOVOR, 0, 0, 0, 0, c, c);
    }
  end;
}
end;
end; //window winfo

procedure CalcOverDue(aCol: word);
{
  _loop dog
  {
    _loop det where ((dog.cdog == det.cdog and aCol == det.type and (det.summa > 0) ))
    {
      while (det.summa > 0.01)
      {
        if (getfirst det1 where ((dog.cdog == det1.cdog and aCol == det1.type and det.cKatStroy == det1.cKatStroy and (det1.summa < -0.01) )) = tsOk)
        {
          if (det.summa > abs(det1.summa))
          {
            update current det set det.summa := det.summa + det1.summa;
            delete current det1;
          }
          else
          {
            update current det1 set det1.summa := det1.summa + det.summa;
            delete current det;
            break;
          }
        }
        else
        {
          break;
        }
      }
    }
    delete all det where ((dog.cdog == det.cdog and aCol == det.type and (det.summa < 0.01) ));
  }
}

procedure FillTables;
var
  s: longint;
{
  //временная таблица для договоров
  sqlFreeStr(s);
  sqlAddStr(s, 'table dog (cdog: comp, cappdog: comp) with index (i01 = cdog + cappdog);');
  sqlCreateTmpTable(s , ctmNormal);
  sqlExecDirect('DELETE FROM dog');
  //временная таблица для календарных планов
  sqlFreeStr(s);
  sqlAddStr(s,'table cp (cappdog: comp, cCalPlan: comp, cKatStroy: comp, dend: date, kol: double, summa: double) with index (i01 = cappdog);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM cp');
  //временная таблица для этапов
  sqlFreeStr(s);
  sqlAddStr(s,'table ks (cappdog: comp, cKatStroy: comp, dend: date, kol: double, summa: double) with index (i01 = cappdog);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM ks');
  //временная таблица для колонок
  sqlFreeStr(s);
  sqlAddStr(s,'table col (cdog: comp, d12: double, d13: double, d14: double, d15: double, d16: double, d17: double, d18: double,');
  sqlAddStr(s,'                       d19: double, d20: double, d21: double, d22: double, d23: double, d24: double, d25: double,');
  sqlAddStr(s,'                       d26: double, d27: double, d28: double, d29: double, d30: double');
  sqlAddStr(s,') with index (i01 = cdog);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM col');
  //временная таблица для детализации сумм
  sqlFreeStr(s);
  sqlAddStr(s,'table det (cdog: comp, type: word, kodgr: word, crec: comp, cKatStroy: comp, kol: double, summa: double) with index (i01 = cdog + type);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM det');
  //заполняем таблицу договоров
  setvisualheader('2');
  sqlFreeStr(s);
  sqlAddStr(s, 'insert dog (cdog, cappdog)');
  sqlAddStr(s, 'select d.nrec, coalesce(sogl.nrec,d.nrec)');
  sqlAddStr(s, 'from dogovor d');
  sqlAddStr(s, 'join attrval avPrPr on avPrPr.wTable=1707 and avPrPr.cRec=d.nrec and avPrPr.cattrnam=#comp(281474976710833) and avPrPr.vComp=#comp(281474976711945)');
  sqlAddStr(s, 'left join (select dogovor.cdogovor as cdogovor, max(dogovor.nrec) as nrec');
  sqlAddStr(s, '           from dogovor');
  sqlAddStr(s, '           left join attrval on attrval.wtable=1707 and attrval.crec = dogovor.nrec and attrval.cattrnam=#comp(281474976710830)');
  sqlAddStr(s, '           where dogovor.tidk=401 and dogovor.status<>3 and coalesce(attrval.vcomp,#comp(0)) <> #comp(4001AB188D71B97Ah)');
  sqlAddStr(s, '           group by dogovor.cdogovor');
  sqlAddStr(s, '          ) sogl on d.nrec = sogl.cdogovor');
  sqlAddStr(s, 'left join (select kauos[2] as cdogovor, sum(sumob) as summa');
  sqlAddStr(s, '           from oborot');
  sqlAddStr(s, '           where scheto=''862'' and datob < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s, '           group by kauos[2]) od on d.nrec = od.cdogovor');
  sqlAddStr(s, 'left join (select kauks[2] as cdogovor, sum(sumob) as summa');
  sqlAddStr(s, '           from oborot');
  sqlAddStr(s, '           where schetk=''862'' and datob < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s, '           group by kauks[2]) ok on d.nrec = ok.cdogovor');
  sqlAddStr(s, 'left join (select kauos[2] as cdogovor, sum(sumob) as summa');
  sqlAddStr(s, '           from oborot');
  sqlAddStr(s, '           where scheto=''862'' and datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')');
  sqlAddStr(s, '           group by kauos[2]) od1 on d.nrec = od1.cdogovor');
  sqlAddStr(s, 'left join (select kauks[2] as cdogovor, sum(sumob) as summa');
  sqlAddStr(s, '           from oborot');
  sqlAddStr(s, '           where schetk=''862'' and datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')');
  sqlAddStr(s, '           group by kauks[2]) ok1 on d.nrec = ok1.cdogovor');
  sqlAddStr(s, 'where d.tidk=400');// and ((coalesce(od.summa,0)-coalesce(ok.summa,0))<>0 or ok1.summa>0.01 or od1.summa>0.01)');
  sqlExecDirect(s);
  //заполняем таблицу этапов
  sqlExecDirect(sSelectEtap);
  //заполняем таблицу календарных планов
  sqlFreeStr(s);
  sqlAddStr(s,'insert cp (cappdog, cCalPlan, cKatStroy, dend, kol, summa)');
  sqlAddStr(s,'select ks.cappdog,');
  sqlAddStr(s,'       CalPlan.nRec,');
  sqlAddStr(s,'       ks.cKatStroy,');
  sqlAddStr(s,'       max(ks.dend),');
  sqlAddStr(s,'       sum(spd.kol),');
  sqlAddStr(s,'       sum((spd.summa+case when calplan.vhodnal=2 then spd.sumnds else 0 end)*coalesce(cursval.sumrubl,1))');
  sqlAddStr(s,'from ks');
  sqlAddStr(s,'join calplan on ks.cappdog = calplan.cdogovor and calplan.directmc = 1');
  sqlAddStr(s,'join spdocs spd on 403 = spd.tidk and calplan.nrec = spd.cdoc');
  sqlAddStr(s,'join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1723 = sm.cotable and spd.nrec = sm.cspec and ks.cKatStroy = sm.cobj');
  sqlAddStr(s,'left join (select kodvalut, max(datval) as datval from cursval where datval <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and kodvalut<>#comp(0) group by kodvalut) cv on spd.cval = cv.kodvalut');
  sqlAddStr(s,'left join cursval on spd.cval = cursval.kodvalut and coalesce(cv.datval,0) = cursval.datval');
  sqlAddStr(s,'group by ks.cappdog, CalPlan.nRec, ks.cKatStroy');
  sqlExecDirect(s);
  //детализация по 12: Объем заданной к выпуску продукции (работ и услуг) в соответствии с контрактом (было 11.1)
  setvisualheader('12');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 12, case when cp.ccalplan = #comp(0) then 14 else 5022 end, cp.ccalplan, cp.cKatStroy, cp.kol, cp.summa');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog');
  sqlExecDirect(s);
  //детализация по 13: Количество заданной к выпуску продукции (работ и услуг) в соответствии с контрактом (было 11.2)
  setvisualheader('13');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 13, 5022, cp.ccalplan, cp.cKatStroy, cp.kol, cp.summa');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog');
  sqlExecDirect(s);
  //детализация по 14: Объем заданной к выпуску продукции (работ или услуг) на отчетный год в соответствии с контрактом (этапом) (было 12)
  setvisualheader('14');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 14, case when cp.ccalplan = #comp(0) then 14 else 5022 end, cp.ccalplan, cp.cKatStroy, cp.kol, cp.summa');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlExecDirect(s);
  //детализация по 16: Авансы, на  поставку продукции (работ, услуг) отчетного года, фактически перечисленные государственным заказчиком (заказчиком) в отчетном году (было 14.1)
  setvisualheader('16');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 16, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on (o.datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and o.schetk = ''862'' and o.subschk in (''01'',''02'') and o.kauks[3] = ks.cKatStroy');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 16, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on (o.datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and o.schetk = ''862'' and o.subschk in (''01'',''02'')');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //детализация по 17: Авансы, на поставку продукции (работ, услуг) в отчетном году, фактически перечисленные государственным заказчиком (заказчиком) в предыдущие годы (было 14.2)
  setvisualheader('17');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 17, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob < #date('+datetostr(drep1,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.subschk in (''01'',''02'') and o.kauks[3] = ks.cKatStroy');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 17, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob < #date('+datetostr(drep1,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.subschk in (''01'',''02'')');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //детализация по 18: Авансы, на поставку продукции (работ, услуг), фактически перечисленные государственным заказчиком (заказчиком)  в отчетном году и предыдущие периоды на поставку продукции будущих лет (было 14.3)
  setvisualheader('18');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 18, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend > #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.subschk in (''01'',''02'') and o.kauks[3] = ks.cKatStroy');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 18, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend > #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.subschk in (''01'',''02'')');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //детализация по 19: Объем фактически произведенной продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года (было 15.1)
  setvisualheader('19');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 19, 80, katsopr.nrec, coalesce(sm.cobj, #comp(0)), sum(sps.kolfact), sum(sps.kolfact*sps.price + case when katsopr.vhodnal=2 then coalesce(n.summa,0) else 0 end)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and ks.ckatstroy = cp.ckatstroy');
  sqlAddStr(s,'join basedoc bd on cp.ccalplan = bd.ccalplan');
  sqlAddStr(s,'join stepdoc sd on bd.nrec = sd.cbasedoc');
  sqlAddStr(s,'join katsopr on sd.nrec = katsopr.cstepdoc and katsopr.cschfact<>#comp(0) and katsopr.vidsopr in (201, 211)');  // and (katsopr.dopr between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+'))
  sqlAddStr(s,'join spsopr sps on katsopr.nrec = sps.csopr');
  sqlAddStr(s,'left join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1110 = sm.cotable and sps.nrec = sm.cspec');
  sqlAddStr(s,'left join (select cspdoc, tipdoc, sum(summa) as summa from spdocnal group by cspdoc, tipdoc) n on sps.nrec = n.cspdoc and katsopr.vidsopr = n.tipdoc');
  sqlAddStr(s,'group by dog.cdog, katsopr.nrec, coalesce(sm.cobj, #comp(0))');
  sqlExecDirect(s);
  //детализация по 20: Количество фактически произведенной продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года (было 15.2)
  setvisualheader('20');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 20, det.kodgr, det.crec, det.cKatStroy, det.kol, det.summa');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=19');
  sqlExecDirect(s);
  //детализация по 21: Объем фактически поставленной заказчику продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года (было 15.3)
  setvisualheader('21');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 21, 80, katsopr.nrec, coalesce(sm.cobj, #comp(0)), sum(sps.kolfact), sum(sps.kolfact*sps.price + case when katsopr.vhodnal=2 then coalesce(n.summa,0) else 0 end)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and ks.ckatstroy = cp.ckatstroy');
  sqlAddStr(s,'join basedoc bd on cp.ccalplan = bd.ccalplan');
  sqlAddStr(s,'join stepdoc sd on bd.nrec = sd.cbasedoc');
  sqlAddStr(s,'join katsopr on sd.nrec = katsopr.cstepdoc and katsopr.cschfact<>#comp(0) and katsopr.vidsopr in (201, 211)');  // and (katsopr.dopr between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+'))
  sqlAddStr(s,'join spsopr sps on katsopr.nrec = sps.csopr');
  sqlAddStr(s,'left join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1110 = sm.cotable and sps.nrec = sm.cspec');
  sqlAddStr(s,'left join (select cspdoc, tipdoc, sum(summa) as summa from spdocnal group by cspdoc, tipdoc) n on sps.nrec = n.cspdoc and katsopr.vidsopr = n.tipdoc');
  sqlAddStr(s,'group by dog.cdog, katsopr.nrec, coalesce(sm.cobj, #comp(0))');
  sqlExecDirect(s);
  //детализация по 22: Количество фактически поставленной заказчику продукции, выполненных работ или услуг, нарастающим итогом с начала отчетного года (было 15.4)
  setvisualheader('22');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 22, det.kodgr, det.crec, det.cKatStroy, det.kol, det.summa');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=21');
  sqlExecDirect(s);
  //детализация по 23: Объем фактически поставленной  заказчику продукции, выполненных работ или услуг по контрактам (договорам) прошлых лет, подтвержденных актами приемки заказчиков на конец отчетного периода (было 15.5)
  setvisualheader('23');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 23, 80, katsopr.nrec, coalesce(sm.cobj, #comp(0)), sum(sps.kolfact), sum(sps.kolfact*sps.price + case when katsopr.vhodnal=2 then coalesce(n.summa,0) else 0 end)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s,'join basedoc bd on cp.ccalplan = bd.ccalplan');
  sqlAddStr(s,'join stepdoc sd on bd.nrec = sd.cbasedoc');
  sqlAddStr(s,'join katsopr on sd.nrec = katsopr.cstepdoc and (katsopr.dopr between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and katsopr.cschfact<>#comp(0) and katsopr.vidsopr in (201, 211)');
  sqlAddStr(s,'join spsopr sps on katsopr.nrec = sps.csopr');
  sqlAddStr(s,'left join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1110 = sm.cotable and sps.nrec = sm.cspec');
  sqlAddStr(s,'left join (select cspdoc, tipdoc, sum(summa) as summa from spdocnal group by cspdoc, tipdoc) n on sps.nrec = n.cspdoc and katsopr.vidsopr = n.tipdoc');
  sqlAddStr(s,'group by dog.cdog, katsopr.nrec, coalesce(sm.cobj, #comp(0))');
  sqlExecDirect(s);
  //детализация по 24: Количество фактически поставленной  заказчику продукции, выполненных работ или услуг по контрактам (договорам) прошлых лет, подтвержденных актами приемки заказчиков на конец отчетного периода (было 15.6)
  setvisualheader('24');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 24, det.kodgr, det.crec, det.cKatStroy, det.kol, det.summa');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=23');
  sqlExecDirect(s);
  //детализация по 25: Просроченная задолженность госзаказчика за выполненные ранее работы  по состоянию  на  1 января отчетного года (было 16)
  setvisualheader('25');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 25, sh.tidkgal, o.nrec, ks.cKatStroy, 0, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog');
  sqlAddStr(s,'join oborot o on (to_days(datetime(#date('+datetostr(drep1,'DD,MM,YYYY')+'),0)) - to_days(datetime(o.datob,0))) > 190 and');
  sqlAddStr(s,'                 o.scheto=''862'' and dog.cdog=o.kauos[2] and ks.cKatStroy=o.kauos[3]');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz = sh.nrec');
  sqlAddStr(s,'union all');
  sqlAddStr(s,'select dog.cdog, 25, sh.tidkgal, o.nrec, ks.cKatStroy, 0, o.sumob*(-1)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog');
  sqlAddStr(s,'join oborot o on o.datob < #date('+datetostr(drep1,'DD,MM,YYYY')+') and');
  sqlAddStr(s,'                 o.schetk=''862'' and dog.cdog=o.kauks[2] and ks.cKatStroy=o.kauks[3]');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz = sh.nrec');
  sqlExecDirect(s);
  //Детализация по 26: Объем предъявленных к оплате работ, выполненных в отчетном году, нарастающим итогом с начала года, за вычетом авансов (было 17)   ????
  setvisualheader('26');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 26, det.kodgr, det.crec, det.cKatStroy, det.kol, det.summa');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=19'); //было 151
  sqlExecDirect(s);
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 26, det.kodgr, det.crec, det.cKatStroy, det.kol*(-1), det.summa*(-1)');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=16'); //было 141
  sqlExecDirect(s);
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select det.cdog, 26, det.kodgr, det.crec, det.cKatStroy, det.kol*(-1), det.summa*(-1)');
  sqlAddStr(s,'from det');
  sqlAddStr(s,'where type=17'); //было 142
  sqlExecDirect(s);
  //Детализация по 27: Финансирование с учетом авансов на работы отчетного года, выплаченных в предыдущих и отчетном годах (было 18.1)
  setvisualheader('27');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 27, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.kauks[3] = ks.cKatStroy and (o.scheto <> ''862'' or(o.scheto = ''862'' and o.kauks[3] <> o.kauos[3]))');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 27, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'31,12,YYYY')+')');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and o.schetk = ''862'' and o.scheto <> ''862''');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //Детализация по 28: Финансирование за выполненные работы или услуги по контрактам (договорам) прошлых лет, подтвержденных актами приемки заказчиков на конец отчетного периода: (было 18.2)
  setvisualheader('28');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 28, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog and ks.dend < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s,'join oborot o on (o.datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and o.schetk = ''862'' and o.kauks[3] = ks.cKatStroy and (o.scheto <> ''862'' or(o.scheto = ''862'' and o.kauks[3] <> o.kauos[3]))');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'union');
  sqlAddStr(s,'select dog.cdog, 28, sh.tidkgal, o.nrec, o.kauks[3], o.kol, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join cp on dog.cappdog = cp.cappdog and cp.dend < #date('+datetostr(drep1,'DD,MM,YYYY')+')');
  sqlAddStr(s,'join oborot o on (o.datob between #date('+datetostr(drep1,'DD,MM,YYYY')+') and #date('+datetostr(drep2,'DD,MM,YYYY')+')) and o.schetk = ''862'' and o.scheto <> ''862''');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz=sh.nrec');
  sqlAddStr(s,'join stepdoc sd on sh.cstepdoc=sd.nrec');
  sqlAddStr(s,'join basedoc bd on sd.cbasedoc=bd.nrec and cp.ccalplan=bd.ccalplan');
  sqlExecDirect(s);
  //детализация по 30: Объем просроченной задолженности заказчика за работы отчетного года на 1-е число первого месяца  квартала следующего за отчетным  (было 19)
  setvisualheader('30');
  sqlFreeStr(s);
  sqlAddStr(s,'insert det (cdog, type, kodgr, crec, cKatStroy, kol, summa)');
  sqlAddStr(s,'select dog.cdog, 30, sh.tidkgal, o.nrec, ks.cKatStroy, 0, o.sumob');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog');
  sqlAddStr(s,'join oborot o on (to_days(datetime(#date('+datetostr(drep2,'DD,MM,YYYY')+'),0)) - to_days(datetime(o.datob,0))) > 190 and');
  sqlAddStr(s,'                 o.scheto=''862'' and dog.cdog=o.kauos[2] and ks.cKatStroy=o.kauos[3]');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz = sh.nrec');
  sqlAddStr(s,'union all');
  sqlAddStr(s,'select dog.cdog, 30, sh.tidkgal, o.nrec, ks.cKatStroy, 0, o.sumob*(-1)');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join ks on dog.cappdog = ks.cappdog');
  sqlAddStr(s,'join oborot o on o.datob <= #date('+datetostr(drep2,'DD,MM,YYYY')+') and');
  sqlAddStr(s,'                 o.schetk=''862'' and dog.cdog=o.kauks[2] and ks.cKatStroy=o.kauks[3]');
  sqlAddStr(s,'join soprhoz sh on o.csoprhoz = sh.nrec');
  sqlExecDirect(s);

  //расчет итогов по детализациям, заполнение col
  sqlExecDirect(sFillCol);
  //заполняем виповские таблицы
  delete all dog;
  sqlFreeStr(s);
  sqlAddStr(s,'select dog.cdog, dog.cappdog, d.ddoc, d.nodoc,');
  sqlAddStr(s,'       case');
  sqlAddStr(s,'         when coalesce(katvidd.name,'''') in (''ОКР'',''НИР'') then ''01''');
  sqlAddStr(s,'         when coalesce(katvidd.name,'''') in (''ОКР ФЦП'',''НИР ФЦП'') then ''21''');
  sqlAddStr(s,'         else coalesce(spkv.levelcode,'''')');
  sqlAddStr(s,'       end,');
  sqlAddStr(s,'       case when katorg.shortname='''' then katorg.name else katorg.shortname end,');
  sqlAddStr(s,'       coalesce(avk.vstring,katorg.code), ');
  sqlAddStr(s,'       coalesce(katorg.unn, ''''), ');
  sqlAddStr(s,'       d.dbeg, d.dend,');
  sqlAddStr(s,'       coalesce(katvidd.name,'''')+'' ''+d.nodoc_ext');
  sqlAddStr(s,'from dog');
  sqlAddStr(s,'join dogovor d on dog.cdog = d.nrec');
  sqlAddStr(s,'left join katorg on d.corg = katorg.nrec');
  sqlAddStr(s,'left join attrdog on d.nrec = attrdog.cdogovor');
  sqlAddStr(s,'left join katvidd on d.cviddog = katvidd.nrec');
  sqlAddStr(s,'left join attrval avv on 1707 = avv.wtable and d.nrec = avv.crec and #comp(281474976710829) = avv.cattrnam');    //Виды деятельности
  sqlAddStr(s,'left join spkau spkv on coalesce(avv.vcomp, #comp(0)) = spkv.nrec');
  sqlAddStr(s,'left join attrval avk on 1418 = avk.wtable and d.corg = avk.crec and #comp(281474976711579) = avk.cattrnam');    //Код для формы 1-ГОЗ
  sqlSelectInto(s, #dog);
  delete all col;
  sqlSelectInto('select * from col', #col);
  delete all det;
  sqlSelectInto('select * from det', #det);

  //дополнительный расчет просроченных задолженностей по платежам;
  setvisualheader('25,29,30');   //16,183,19
  CalcOverDue(25);
  CalcOverDue(30);

  insert det(cdog, type, kodgr, crec, cKatStroy, kol, summa)
  select det1.cdog, 29, sh.tidkgal, o.nrec, det1.cKatStroy, 0, o.sumob
  from det det1, oborot o, soprhoz sh
  where ((
    25             /== det1.type and
    '862'          /== o.schetk and
    det1.cKatStroy /== o.kauks[3] and
    drep1          <<= o.datob and (drep2 >= o.datob and (o.scheto<>'862' or (o.scheto='862' and o.kauks[3] <> o.kauos[3]))) and
    o.csoprhoz     /== sh.nrec
  ));

  //расчет итогов по просроченным задолженностям
  _loop det where ((25 == det.type))
    update col where ((det.cdog == col.cdog)) set col.d25 := col.d25 + det.summa / 1000;
  _loop det where ((29 == det.type))
    update col where ((det.cdog == col.cdog)) set col.d29 := col.d29 + det.summa / 1000;
  _loop det where ((30 == det.type))
    update col where ((det.cdog == col.cdog)) set col.d30 := col.d30 + det.summa / 1000;

  //удаляем "ненужные" в отчете, по мнению Ольги, договора
  _loop col
  {
    if col.d14 = 0 and col.d19 = 0 and col.d20 = 0 and col.d26 = 0 and col.d25 = 0 and col.d30 = 0
    {
      delete all dog where ((col.cdog == dog.cdog and ( not ( dog.dbeg <= dRep2 and dog.dend >= dRep1 ) ) ));
    }
  }

  //дропаем временные таблицы
  sqlDropTmpTable('dog');
  sqlDropTmpTable('cp');
  sqlDropTmpTable('ks');
  sqlDropTmpTable('col');
  sqlDropTmpTable('det');
}

procedure printrep(isCreateXLT : boolean);
var
  i: integer;
  cid: string;
{
  if (not isCreateXLT) Set sXLSFileName := pXL.CreateReport(sXLTFileName, True)
                  else Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);
  pXL.CreateVar(sXLSFileName);
  pXL.SetStringVar('drep1', datetostr(drep1,'DD.MM.YYYY'));
  pXL.SetStringVar('drep2', datetostr(drep2,'DD.MM.YYYY'));
  pXL.PublishVar;
  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Main');
  pXL.CreateTblFld('npp');
  pXL.CreateTblFld('nodoc');
  pXL.CreateTblFld('ddoc');
  pXL.CreateTblFld('VidDog');
  pXL.CreateTblFld('OrgName');
  pXL.CreateTblFld('OrgCode');
  pXL.CreateTblFld('OrgINN');
  pXL.CreateTblFld('dBeg');
  pXL.CreateTblFld('dEnd');
  pXL.CreateTblFld('Name');
  pXL.CreateTblFld('d12');
  pXL.CreateTblFld('d13');
  pXL.CreateTblFld('d14');
  pXL.CreateTblFld('d15');
  pXL.CreateTblFld('d16');
  pXL.CreateTblFld('d17');
  pXL.CreateTblFld('d18');
  pXL.CreateTblFld('d19');
  pXL.CreateTblFld('d20');
  pXL.CreateTblFld('d21');
  pXL.CreateTblFld('d22');
  pXL.CreateTblFld('d23');
  pXL.CreateTblFld('d24');
  pXL.CreateTblFld('d25');
  pXL.CreateTblFld('d26');
  pXL.CreateTblFld('d27');
  pXL.CreateTblFld('d28');
  pXL.CreateTblFld('d29');
  pXL.CreateTblFld('d30');
  pushPos(#brDog);
  pushPos(#brCol);
  i := 0;
  if not isCreateXLT
  _loop brDog
  {
    i++;
    pXL.ClearTblBuffer;
    pXL.SetTblStringFldValue('npp', i);
    cid := ciHelper.GetContractID(GetContractIDKey_ByDogovor, brDog.cdog);
    pXL.SetTblStringFldValue('nodoc',  cid + if(cid='', '', ' / ') + brDog.nodoc);
    pXL.SetTblStringFldValue('ddoc', datetostr(brDog.ddoc,'DD.MM.YYYY'));
    pXL.SetTblStringFldValue('VidDog',brDog.viddog);
    pXL.SetTblStringFldValue('OrgName',brDog.OrgName);
    pXL.SetTblStringFldValue('OrgCode',brDog.OrgCode);
    pXL.SetTblStringFldValue('OrgINN',brDog.OrgINN);
    pXL.SetTblStringFldValue('dBeg',datetostr(brDog.dbeg,'DD.MM.YYYY'));
    pXL.SetTblStringFldValue('dEnd',datetostr(brDog.dend,'DD.MM.YYYY'));
    pXL.SetTblStringFldValue('Name',brDog.name);
    if getfirst brCol = tsOk
    {
      pXL.SetTblNumberFldValue('d12', brCol.d12);
      pXL.SetTblNumberFldValue('d13', brCol.d13);
      pXL.SetTblNumberFldValue('d14', brCol.d14);
      pXL.SetTblNumberFldValue('d15', brCol.d15);
      pXL.SetTblNumberFldValue('d16', brCol.d16);
      pXL.SetTblNumberFldValue('d17', brCol.d17);
      pXL.SetTblNumberFldValue('d18', brCol.d18);
      pXL.SetTblNumberFldValue('d19', brCol.d19);
      pXL.SetTblNumberFldValue('d20', brCol.d20);
      pXL.SetTblNumberFldValue('d21', brCol.d21);
      pXL.SetTblNumberFldValue('d22', brCol.d22);
      pXL.SetTblNumberFldValue('d23', brCol.d23);
      pXL.SetTblNumberFldValue('d24', brCol.d24);
      pXL.SetTblNumberFldValue('d25', brCol.d25);
      pXL.SetTblNumberFldValue('d26', brCol.d26);
      pXL.SetTblNumberFldValue('d27', brCol.d27);
      pXL.SetTblNumberFldValue('d28', brCol.d28);
      pXL.SetTblNumberFldValue('d29', brCol.d29);
      pXL.SetTblNumberFldValue('d30', brCol.d30);
    }
    pXL.InsTblRow;
  }
  popPos(#brDog);
  popPos(#brCol);
  pXL.PublishTbl('Main');
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}


handleevent
cmSetCurField:
{
  case target of
    #brCol.d12: {CurType :=12; set ColCaption := 'Объем заданной к выпуску продукции (работ, услуг) в соответствии с государственным контрактом (контрактом)'; }
    #brCol.d13: {CurType :=13; set ColCaption := 'Количество заданной к выпуску продукции (работ, услуг) в соответствии с единицами измерения, установленными государственным контрактом (контрактом)'; }
    #brCol.d14: {CurType :=14; set ColCaption := 'Объем заданной к выпуску продукции (работ, услуг) на отчетный  год в стоимостном  выражении в соответствии с государственным контактом (контрактом)'; }
    #brCol.d15: {CurType :=15; set ColCaption := 'Объем заданной к выпуску продукции (работ, услуг) на отчетный  год в стоимостном  выражении в соответствии с государственным контрактом (контрактом) с учетом проведенной корректировки ГОЗ'; }
    #brCol.d16: {CurType :=16; set ColCaption := 'Авансы, на  поставку продукции (работ, услуг) отчетного года, фактически перечисленные государственным заказчиком (заказчиком) в отчетном году'; }
    #brCol.d17: {CurType :=17; set ColCaption := 'Авансы, на поставку продукции (работ, услуг) в отчетном году, фактически перечисленные государственным заказчиком (заказчиком) в предыдущие годы'; }
    #brCol.d18: {CurType :=18; set ColCaption := 'Авансы, на поставку продукции (работ, услуг), фактически перечисленные государственным заказчиком (заказчиком)  в отчетном году и предыдущие периоды на поставку продукции будущих лет '; }
    #brCol.d19: {CurType :=19; set ColCaption := 'Объем фактически произведенной продукции (работ, услуг) нарастающим итогом с начала отчетного года'; }
    #brCol.d20: {CurType :=20; set ColCaption := 'Количество фактически произведенной продукции (работ, услуг) нарастающим итогом с начала  отчетного года с указанием единиц измерения'; }
    #brCol.d21: {CurType :=21; set ColCaption := 'Объем фактически поставленной продукции (работ, услуг) нарастающим итогом  с начала отчетного года'; }
    #brCol.d22: {CurType :=22; set ColCaption := 'Количество фактически поставленной  продукции (работ, услуг) нарастающим итогом с начала отчетного  года с указанием единиц измерения'; }
    #brCol.d23: {CurType :=23; set ColCaption := 'Объем фактически поставленной  продукции (работ, услуг) в счет  авансовых платежей прошлых лет'; }
    #brCol.d24: {CurType :=24; set ColCaption := 'Количество фактически поставленной  продукции (работ, услуг) в счет  авансовых платежей прошлых лет с указанием единиц измерения'; }
    #brCol.d25: {CurType :=25; set ColCaption := 'Объем просроченной задолженности государственного заказчика (заказчика) за поставленную продукцию (работы, услуги) по состоянию на 1 января отчетного года'; }
    #brCol.d26: {CurType :=26; set ColCaption := 'Объем финансирования за фактически поставленную в отчетном году продукцию (работы, услуги), за вычетом авансов'; }
    #brCol.d27: {CurType :=27; set ColCaption := 'Объем финансирования за поставленную продукцию (работы, услуги) в отчетном году'; }
    #brCol.d28: {CurType :=28; set ColCaption := 'Объем финансирования за поставленную в счет выплаченных авансов прошлых лет продукцию (работы, услуги) в отчетном году'; }
    #brCol.d29: {CurType :=29; set ColCaption := 'Объем погашенной просроченной  задолженности государственного заказчика (заказчика) за принятую до 1 января отчетного года и не оплаченную им поставленную продукцию (работы, услуги)'; }
    #brCol.d30: {CurType :=30; set ColCaption := 'Объем просроченной задолженности государственного заказчика (заказчика) за поставленную продукцию (работы, услуги) в отчетном году, по состоянию на 1-ое число квартала, следующего за отчетным'; }
  end;

  rereadrecord(#brDet);
}
cmDoOk:
{
  StartNewVisual(vtRotateVisual, vfThread + vfTimer, '', 0);
  FillTables;
  SetVisualHeader('Выгрузка в Excel');
  printrep(false);
  StopVisual('',0);
  rereadrecord;
  rereadrecord(#brDog);
  if ((flag and 1) > 0)
    runwindow(wInfo);
}
cminit:
{
  if not readmydsk(flag,  'Forma1GOZ_flag' , false) flag  := 1;
  if not readmydsk(dRep1, 'Forma1GOZ_dRep1', false) dRep1 := date(1,1,year(cur_date));
  if not readmydsk(dRep2, 'Forma1GOZ_dRep2', false) dRep2 := date(last_day(cur_date),month(cur_date),year(cur_date));
  sXLTFileName := TranslatePath('%StartPath%xls\Forma1GOZ2015.xlt');
}
cmdone:
{
  SaveMyDsk(flag,  'Forma1GOZ_flag' );
  savemydsk(dRep1, 'Forma1GOZ_dRep1');
  savemydsk(dRep2, 'Forma1GOZ_dRep2');
}
end;
end.

VipInterface UserReport_Forma1GOZ2015 Implements IUserReport licensed(free);
Interface UserReport_Forma1GOZ2015;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::Forma1GOZ2015);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Форма 1-ГОЗ 2015';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := 'Отчеты ГОЗ'
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'DOGOVOR';
    end;
  end;
end.
