!===============================================================================================================
! Надо сделать настройки. Строки помечены  - В настр
!===============================================================================================================
#include AGAT_GOZ_TMP.tbl
#component "AGAT"
!===============================================================================================================
Interface AGAT_GOZ_Nomenklat 'Номенклатура военной продукции' (,,)   EscClose, cyan;
Show (,,45,5);
!===============================================================================================================
create view
var 
 _dBeg
,_dEnd            : date;
 _Item_KP 
,_Item_KP2 
,_Item_PrP
,_curnRec_DogSogl
,_curVidDog       : comp;
 _myPath          : string;
 _Line
,_Line2
,_curTiDk_DogSogl
,_npp             : word;

as select *
from
 Dogovor

,ExClassVal 
,ExClassSeg
,ExClassVal ExClassVal2
,ExClassSeg ExClassSeg2

,SpKau

,AttrNam AttrNam_KP
,AttrVal AttrVal_KP
,AttrNam AttrNam_PrP
,AttrVal AttrVal_PrP
,AttrDog
,KatOrg
,_Dog
,_Dog _DogTmp
,_Dog _DogDel
,Dogovor  Sogl
,SpDocs
,SpecMTR
,KatStroy
,_Dog _DogRep (_Dog_02)
,_Zakaz
,_Zakaz _ZakazDel
,SpGrSch
,KatVidD
,GroupSch
,GroupSch PSC
,KatOrg KatOrgOwn

where ((
    comp(0)                     ==  Dogovor.cDogovor

and Dogovor.nRec                ==  ExClassVal.cRec
and word(123)                   ==  ExClassVal.ClassCode
and ExClassVal.cClassSeg        ==  ExClassSeg.nRec
and Dogovor.nRec                ==  AttrDog.cDogovor

and Dogovor.nRec                ==  ExClassVal2.cRec
and word(179)                   ==  ExClassVal2.ClassCode
and ExClassVal2.cClassSeg       ==  ExClassSeg2.nRec
!============================================================
and Dogovor.CDOPKLAS            ==  SpKau.nRec

and word(1707)                  ==  AttrNam_KP.wTable
and 'Конечный потребитель'      ==  AttrNam_KP.Name
and AttrNam_KP.wTable           ==  AttrVal_KP.wTable
and Dogovor.nRec                ==  AttrVal_KP.cRec
and AttrNam_KP.nRec             ==  AttrVal_KP.cAttrNam
!============================================================
and word(1707)                  ==  AttrNam_PrP.wTable
and 'Принадлежность продукции'  ==  AttrNam_PrP.Name
and AttrNam_PrP.wTable          ==  AttrVal_PrP.wTable
and Dogovor.nRec                ==  AttrVal_PrP.cRec
and AttrNam_PrP.nRec            ==  AttrVal_PrP.cAttrNam
!============================================================
and Dogovor.cOrg                ==  KatOrg.nRec
and Dogovor.nRec                ==  _Dog.nRec

and _DogTmp.nRec                ==  Sogl.cDogovor
and word(1)                     ==  Sogl.Status

and _DogTmp.cVidDog             ==  KatVidD.nRec
and _curTiDk_DogSogl            ==  SpDocs.TiDk
and _curnRec_DogSogl            ==  SpDocs.cDoc

and word(1723)                  ==  SpecMTR.CoTable
and SpDocs.nRec                 ==  SpecMTR.cSpec
and SpecMTR.cObj                ==  KatStroy.nRec

and SpDocs.cMoveCell            ==  PSC.nRec
!============================================================
and _DogRep.nRec                ==  _Zakaz.cDogovor
and word(1)                     ==  SpGrSch.wList
and _DogRep.nRec                ==  SpGrSch.cBaseDoc

and SpGrSch.cGroupSch           ==  GroupSch.nRec

!============================================================
and coGetTune('MyOrg')          ==  KatOrgOwn.nRec
))
 condition by_Date  = 
     (
       (
           _dBeg    <= Dogovor.dBeg
       and _dEnd    >= Dogovor.dBeg
       ) or
       (
           _dBeg    <= Dogovor.dEnd
       and _dEnd    >= Dogovor.dEnd
       ) or
       (
           _dBeg    >= Dogovor.dBeg
       and _dBeg    <= Dogovor.dEnd
       ) or
       (
           _dEnd    >= Dogovor.dBeg
       and _dEnd    <= Dogovor.dEnd
       )
     )
 condition by_KP    = 

       (
         _Item_KP   =  AttrVal_KP.vComp
       ) or
       (
         _Item_KP2  =  AttrVal_KP.vComp
       )

 condition by_PrP   = 
     _Item_PrP      =  AttrVal_PrP.vComp
 condition by_Stat  = 
     word(1)        =  Dogovor.Status
;

Procedure _PopAllCondition;
{
  PopCondition(tcby_Date);
  PopCondition(tcby_KP);
  PopCondition(tcby_PrP);
  PopCondition(tcby_Stat);
}

Procedure _InsDog;
{
  if GetFirst _Dog <> tsOk
     {
       ClearBuffer(#_Dog);
       _Dog.nRec      := Dogovor.nRec;
       _Dog.NoDoc     := Dogovor.NoDoc;
       _Dog.NoDoc_Ext := Dogovor.NoDoc_Ext;
       _Dog.dDoc      := Dogovor.dDoc;
       _Dog.dBeg      := Dogovor.dBeg;
       _Dog.OrgName   := KatOrg.Name;
       _Dog.Summa     := Dogovor.Summa;
       _Dog.TiDk      := Dogovor.TiDk;
       _Dog.cVidDog   := Dogovor.cVidDog;
       _Dog.VidCen    := ExClassSeg.Name;
       _Dog.sAttrDog1 := AttrDog.SUBJECT1;
       _Dog.sAttrDog2 := AttrDog.SUBJECT2;
       _Dog.sAttrDog3 := AttrDog.SUBJECT3;
       _Dog.cKP       := AttrVal_KP.vComp;
       _Dog.Osn_VP_MO := ExClassSeg2.Name;
       _Dog.TZ        := SpKau.Name;
       insert current _Dog;
     }
}

Procedure _CreateTmp;
{
  if GetFirst _DogTmp = tsOk do
     {
       if GetFirst Sogl = tsOk
          {
            _curTiDk_DogSogl := Sogl.TiDk;
            _curnRec_DogSogl := Sogl.nRec;
          } else 
          {
            _curTiDk_DogSogl := _DogTmp.TiDk;
            _curnRec_DogSogl := _DogTmp.nRec;
          }

       if GetFirst SpDocs = tsOk do
          {
            if (GetFirst SpecMTR = tsOk) and (GetFirst KatStroy = tsOk)
               {
                  ClearBuffer(#_Zakaz);
                  _Zakaz.cDogovor  := _DogTmp.nRec;
                  _Zakaz.cKatStroy := KatStroy.nRec;
                  _Zakaz.ZakNo     := KatStroy.Name;
                  if GetFirst PSC = tsOk
                      _Zakaz.PSC   := PSC.Kod+' от '+DateToStr(PSC.dFinIsh, 'DD.MM.YYYY');
                  insert current _Zakaz;
               }
          } while (GetNext SpDocs = tsOk and NextVisual);
     } while (GetNext _DogTmp = tsOk and NextVisual);
}

Procedure _CreateExcelRep;
{
  _myPath := TranslatePath('%startpath%'+'Xls\AGAT_GOZ_Nomenklat.xlt');
  if FileExist(_myPath)
     {
       var xlREs : boolean;
       xlRes := xlCreateExcelWithTemplate(_myPath,true) 
       if (not xlRes)  { Message('Не открылся Excel'); Exit; }
       xlRes := xlIsExcelValid;
       if (not xlRes)  { Message('Не инициализирован Excel'); Exit; }
       xlRes := xlGetActiveWorkBookName(_myPath);
       if (not xlRes)
          { Message('Не активна книга Excel '+_myPath); Exit; }
!==============================================================================
       xlSetCellStringValue('Номенклатура '+chr(13)+'военной продукции, подлежащей контролю качества и приемки '+chr(13)+'военным представительством Министерства обороны Российской Федерации на год'+Year(_dBeg)+'-'+Year(_dEnd)+' г.г.',8,1,8,1);

       if XLCREATEMATRIX(10000, 20) {};

       _Line := 1; _npp := 1;
       if GetFirst _DogRep = tsOk do
          { 
            xlStWriteToMatrix (_Line, 1, _npp);
            xlStWriteToMatrix (_Line, 2, _DogRep.NoDoc_Ext+' '+_DogRep.sAttrDog1+' '+_DogRep.sAttrDog2+' '+_DogRep.sAttrDog3);  //Наименованиеи индекс продукции
            xlStWriteToMatrix (_Line, 3, KatOrgOwn.Name);
            if _DogRep.cKP = _Item_KP xlStWriteToMatrix (_Line, 4, _DogRep.OrgName) else xlStWriteToMatrix (_Line, 5, _DogRep.OrgName);
            xlStWriteToMatrix (_Line, 6, _DogRep.Osn_VP_MO);
            xlStWriteToMatrix (_Line, 7, _DogRep.TZ);
            xlStWriteToMatrix (_Line, 8, _DogRep.NoDoc);
            inc(_Line); inc(_npp);
          } while (GetNext _DogRep = tsOk and NextVisual);
!==============================================================================
       xlWriteMatrixToExcel(14,1);
       if xlFreeMatrix{};
       if xlRes:=xlRunMacro('Format') {};
       xlKillExcel;
!==============================================================================
     } else Message ('Шаблон "AGAT_GOZ_Nomenklat.xlt" не найден!')//if FileExist(myPath)
}

Panel pnl_RepDogGOZ;
 Table Dogovor
  Screen scr1 ('...',,sci13Esc);
  Show at (,,,);
  Fields
   _dBeg         : noProtect;
   _dEnd         : noProtect;
  Buttons
  cmValue1,,,'Сформировать';
  cmValue2,,,'Выход';
<< 

`период с`.@@@@@@@@@@  `по`.@@@@@@@@@@

     <. Сформировать .>    <. Выход .>
>>
 end;
end; // Panel
HandleEvent
cmInit:{
  _PopAllCondition;
  _Item_KP  := comp(281474976711950);  //Конечный потребитель - Прямой                //В настр
  _Item_KP2 := comp(281474976711951);  // Конечный потребитель - Кооперация           //В настр
  _Item_PrP := comp(281474976711945);  // Принадлежность продукции - Спецтехника      //В настр

  var datechanged : boolean;
  if ((not readmydsk(_dBeg,'AGAT_GOZ_Nomenklat_dBeg',datechanged)) or (datechanged)) _dBeg := Cur_date;
  if ((not readmydsk(_dEnd,'AGAT_GOZ_Nomenklat_dEnd',datechanged)) or (datechanged)) _dEnd := Cur_date;
} // cmInit

cmDone:{
  SaveMyDsk(_dBeg,'AGAT_GOZ_Nomenklat_dBeg');
  SaveMyDsk(_dEnd,'AGAT_GOZ_Nomenklat_dEnd');
}//cmDone

cmValue1:{
  StartNewVisual(vtRotateVisual,vfTimer + vfBreak + vfConfirm,''#3'Обработка договоров...'#13#13#3,1);
  
  Delete all _DogDel;
  Delete all _ZakazDel;
 
  PushCondition(tcby_KP);
  PushCondition(tcby_PrP);
!======================================================================
! Собираем договоры по датам  
!======================================================================
  PushCondition(tcby_Date);
  if GetFirst Dogovor = tsOk do
     { 
       _InsDog;
     } while(GetNext Dogovor = tsOk and NextVisual);
!======================================================================
! Собираем договоры по статусу "исполняемый"
!======================================================================
  PopCondition(tcby_Date);
  PushCondition(tcby_Stat);
  if GetFirst Dogovor = tsOk do
     { 
       _InsDog;
     } while(GetNext Dogovor = tsOk and NextVisual);

  _PopAllCondition
  _CreateTmp;
  _CreateExcelRep;
  StopVisual('',0);
  CloseInterface(cmDefault);
}
end; // HandleEvent
end. // Interface

VipInterface UserReport_AGAT_GOZ_Nomenklat Implements IUserReport licensed(free);
Interface UserReport_AGAT_GOZ_Nomenklat;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::AGAT_GOZ_Nomenklat);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Номенклатура военной продукции';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    GetGroupName := 'Отчеты ГОЗ';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'DOGOVOR';
    end;
  end;
end.

