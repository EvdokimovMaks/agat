!===============================================================================================================
! Надо сделать настройки. Строки помечены  - В настр
!===============================================================================================================
#include AGAT_GOZ_TMP.tbl
Table struct _DogKontr
 (
   nRec         : comp,
   NoDoc        : String,
   NoDoc_Ext    : String,
   dDoc	        : date,
   dBeg	        : date,
   OrgName      : String,
   Summa        : double,
   TiDk         : word,
   cVidDog      : comp,
   VidCen       : String,
   sAttrDog1    : String,
   sAttrDog2    : String,
   sAttrDog3    : String,
   cKP          : comp,
   Osn_VP_MO    : String,
   TZ           : String,
   cMainDog     : comp
 )
with index
 (
   _DogKontr_01 = nRec,
   _DogKontr_02 = dBeg+NoDoc,
   _DogKontr_03 = cMainDog
 );

#component "AGAT"
!===============================================================================================================
Interface AGAT_GOZ_Pr11 'Данные о финансировании контрактов' (,,)   EscClose, cyan;
Show (,,45,5);
!===============================================================================================================
create view
var 
 _dBeg
,_dEnd            
                  
,dd1,dd2         
                  : date;

 _Item_KP 
,_Item_PrP
,_curnRec_DogSogl
,_curVidDog       
,_cSoprDoc
,_nRec_KonrDog

                  : comp;
 _myPath
,_myDogKontr
                  : string;

 _Line
,_Line2
,_Line3
,_Line4
,_Line5


,_curTiDk_DogSogl
,_npp             
                  : word;
 _isEmpty         : boolean;

as select *
from
 Dogovor
,ExClassVal 
,ExClassSeg

,AttrNam AttrNam_KP
,AttrVal AttrVal_KP
,AttrNam AttrNam_PrP
,AttrVal AttrVal_PrP
,KatOrg
,_Dog
,_Dog _DogTmp
,_Dog _DogDel
,Dogovor  Sogl
,SpDocs
,SpecMTR
,KatStroy
,_Dog _DogRep (_Dog_02)
,_Zakaz
,_Zakaz _ZakazDel

,CalPlan
,SpDocs SpDocsCalPlan

,SpecMTR SpecMTR_DO
,SpStep
,StepDoc
,BaseDoc
,BaseFin
,PlPor

where ((
    comp(0)                     ==  Dogovor.cDogovor
and Dogovor.nRec                ==  ExClassVal.cRec
and word(123)                   ==  ExClassVal.ClassCode
and ExClassVal.cClassSeg        ==  ExClassSeg.nRec
!============================================================
and word(1707)                  ==  AttrNam_KP.wTable
and 'Конечный потребитель'      ==  AttrNam_KP.Name
and AttrNam_KP.wTable           ==  AttrVal_KP.wTable
and Dogovor.nRec                ==  AttrVal_KP.cRec
and AttrNam_KP.nRec             ==  AttrVal_KP.cAttrNam
!============================================================
and word(1707)                  ==  AttrNam_PrP.wTable
and 'Принадлежность продукции'  ==  AttrNam_PrP.Name
and AttrNam_PrP.wTable          ==  AttrVal_PrP.wTable
and Dogovor.nRec                ==  AttrVal_PrP.cRec
and AttrNam_PrP.nRec            ==  AttrVal_PrP.cAttrNam
!============================================================
and Dogovor.cOrg                ==  KatOrg.nRec
and Dogovor.nRec                ==  _Dog.nRec

and _DogTmp.nRec                ==  Sogl.cDogovor
and word(1)                     ==  Sogl.Status

and _DogTmp.cVidDog             ==  KatVidD.nRec
and _curTiDk_DogSogl            ==  SpDocs.TiDk
and _curnRec_DogSogl            ==  SpDocs.cDoc

and word(1723)                  ==  SpecMTR.CoTable
and SpDocs.nRec                 ==  SpecMTR.cSpec
and SpecMTR.cObj                ==  KatStroy.nRec
!============================================================
and SpDocs.nRec                 ==  SpDocsCalPlan.cUpDoc
and (
      word(403)                  =  SpDocsCalPlan.TiDk
    )
and SpDocsCalPlan.cDoc          ==  CalPlan.nRec
!============================================================
and _DogRep.nRec                ==  _Zakaz.cDogovor

and comp(281474976710657)       ==  SpecMTR_DO.cSaldTune
and word(1104)                  ==  SpecMTR_DO.CoTable
and _Zakaz.cKatStroy            ==  SpecMTR_DO.cObj
and SpecMTR_DO.cSpec            ==  SpStep.nRec
and SpStep.cStepDoc             ==  StepDoc.nRec
and StepDoc.cBaseDoc            ==  BaseDoc.nRec
and (
      _DogRep.cMainDog           =  BaseDoc.cDogovor
    )
and BaseDoc.nRec                ==  BaseFin.cBaseDoc
and BaseFin.cPlPor              ==  PlPor.nRec

))
 condition by_Date  = 
     (
       (
           _dBeg    <= Dogovor.dBeg
       and _dEnd    >= Dogovor.dBeg
       ) or
       (
           _dBeg    <= Dogovor.dEnd
       and _dEnd    >= Dogovor.dEnd
       ) or
       (
           _dBeg    >= Dogovor.dBeg
       and _dBeg    <= Dogovor.dEnd
       ) or
       (
           _dEnd    >= Dogovor.dBeg
       and _dEnd    <= Dogovor.dEnd
       )
     )
 condition by_KP    = 
     _Item_KP       =  AttrVal_KP.vComp

 condition by_PrP   = 
     _Item_PrP      =  AttrVal_PrP.vComp
 condition by_Stat  = 
     word(1)        =  Dogovor.Status
;


Procedure _PopAllCondition;
{
  PopCondition(tcby_Date);
  PopCondition(tcby_KP);
  PopCondition(tcby_PrP);
  PopCondition(tcby_Stat);
}

Procedure _InsDog;
{
  if GetFirst _Dog <> tsOk
     {
       ClearBuffer(#_Dog);
       _Dog.nRec      := Dogovor.nRec;
       _Dog.NoDoc     := Dogovor.NoDoc;
       _Dog.NoDoc_Ext := Dogovor.NoDoc_Ext;
       _Dog.dDoc      := Dogovor.dDoc;
       _Dog.dBeg      := Dogovor.dBeg;
       _Dog.OrgName   := KatOrg.Name;
       _Dog.Summa     := Dogovor.Summa;
       _Dog.TiDk      := Dogovor.TiDk;
       _Dog.cVidDog   := Dogovor.cVidDog;
       _Dog.VidCen    := ExClassSeg.Name;
       insert current _Dog;
     }
}

Procedure _CreateTmp;
{
  if GetFirst _DogTmp = tsOk do
     {
       if GetFirst Sogl = tsOk
          {
            _curTiDk_DogSogl := Sogl.TiDk;
            _curnRec_DogSogl := Sogl.nRec;
            _DogTmp.cMainDog := Sogl.cDogovor;
            update current _DogTmp;

          } else 
          {
            _curTiDk_DogSogl := _DogTmp.TiDk;
            _curnRec_DogSogl := _DogTmp.nRec;
            _DogTmp.cMainDog := _DogTmp.nRec;
            update current _DogTmp;
          }
       if GetFirst SpDocs = tsOk do
          {
            if (GetFirst SpecMTR = tsOk) and (GetFirst KatStroy = tsOk)
               {
               dd1 :=  date(0,0,0);
               dd2 :=  date(0,0,0);

               if GetFirst SpDocsCalPlan = tsOk and GetFirst CalPlan  = tsOk
                  {
                    dd1 := CalPlan.dFrom;
                    dd2 := CalPlan.dTo;
                  } 

               if (    _dBeg    <= dd1
                   and _dEnd    >= dd2
                  ) or
                  (
                       _dBeg    <= dd1
                   and _dEnd    >= dd2
                  ) or
                  (
                       _dBeg    >= dd1
                   and _dBeg    <= dd2
                  ) or
                  (
                       _dEnd    >= dd1
                   and _dEnd    <= dd2
                  )
               {  // if _dBeg _dEnd
                  if GetFirst _Zakaz where ((KatStroy.nRec == _Zakaz.cKatStroy))  <> tsOk
                     {
                       ClearBuffer(#_Zakaz);
                       _Zakaz.dFactPost := dd2;
                       _Zakaz.cDogovor  := _DogTmp.nRec;
                       _Zakaz.cKatStroy := KatStroy.nRec;
                       _Zakaz.ZakNo     := KatStroy.Name;
                       if GetFirst KatVidD = tsOk {_Zakaz.KatVidD   := KatVidD.Name;};
                       if InStr('Поставка',(_DogRep.NoDoc_Ext+' '+_Zakaz.KatVidD)) = 0
                          {
                            _Zakaz.Kol := 1;
                          }
                          else 
                          {
                            _Zakaz.Kol := SpDocs.Kol;
                          }
                       _Zakaz.Price     := SpDocs.Price;
                       _Zakaz.Sum       := SpDocs.Summa;
                       insert current _Zakaz; 
                     }
               } // if _dBeg _dEnd
               } // if (GetFirst SpecMTR = tsOk) and (GetFirst KatStroy = tsOk)
          } while (GetNext SpDocs = tsOk and NextVisual);
     } while (GetNext _DogTmp = tsOk and NextVisual);
!===============================================================================================================
}
Procedure _CreateExcelRep;
{
  _myPath := TranslatePath('%startpath%'+'Xls\AGAT_GOZ_Pr11.xlt');
  if FileExist(_myPath)
     {
       var xlREs : boolean;
       xlRes := xlCreateExcelWithTemplate(_myPath,true) 
       if (not xlRes)  { Message('Не открылся Excel'); Exit; }
       xlRes := xlIsExcelValid;
       if (not xlRes)  { Message('Не инициализирован Excel'); Exit; }
       xlRes := xlGetActiveWorkBookName(_myPath);
       if (not xlRes)
          { Message('Не активна книга Excel '+_myPath); Exit; }
!==============================================================================
       xlSetCellStringValue('Данные о финансировании контрактов за '+Year(_dBeg)+'-'+Year(_dEnd)+' г.г.',1,1,1,1);
       if XLCREATEMATRIX(10000, 24) {};

       _npp  := 1;
       _Line := 1;
       if GetFirst _DogRep = tsOk do
          {
            if GetFirst _Zakaz = tsOk do
               {
                 xlStWriteToMatrix (_Line, 1, _npp);
                 xlStWriteToMatrix (_Line, 2, _Zakaz.ZakNo);
                 xlStWriteToMatrix (_Line, 3, _DogRep.NoDoc+' от '+DateToStr(_DogRep.dBeg, 'DD.MM.YYYY')); //Договор № и дата
                 xlStWriteToMatrix (_Line, 4, _DogRep.NoDoc_Ext+' '+_Zakaz.KatVidD);  //Наименование продукции
                 xlStWriteToMatrix (_Line, 5, _DogRep.OrgName);      // Заказчик

                 if GetFirst SpecMTR_DO = tsOk and GetFirst SpStep = tsOk and GetFirst StepDoc = tsOk and GetFirst BaseDoc = tsOk 
//                    and BaseDoc.Summa = _Zakaz.Sum
                    {
                      xlStWriteToMatrix (_Line, 6, BaseDoc.NoDoc);
                      xlStWriteToMatrix (_Line, 7, DateToStr(BaseDoc.dDoc, 'DD.MM.YYYY'));
                      xlStWriteToMatrix (_Line, 8, _Zakaz.Sum);
                      xlStWriteToMatrix (_Line, 9, BaseDoc.Name);
                      _Line2 := _Line;
                      if GetFirst BaseFin = tsOk do
                         {
                           xlStWriteToMatrix (_Line2, 10, BaseFin.NoDoc);
                           xlStWriteToMatrix (_Line2, 11, DateToStr(BaseFin.dDoc, 'DD.MM.YYYY'));
                           xlStWriteToMatrix (_Line2, 12, BaseFin.Summa);
                           xlStWriteToMatrix (_Line2, 13, BaseDoc.nRec);
                           inc(_Line2);
                           _Line := _Line2 - 1;
                         } while GetNext BaseFin = tsOk;
                    }

                 inc(_npp);
                 inc(_Line);
               } while (GetNext _Zakaz = tsOk and NextVisual);
          } while (GetNext _DogRep = tsOk and NextVisual);
!==============================================================================
       xlWriteMatrixToExcel(5,1);
       if xlFreeMatrix{};
       if xlRes:=xlRunMacro('Format') {};
       xlKillExcel;
!==============================================================================
     } else Message ('Шаблон "AGAT_GOZ_Pr11.xlt" не найден!')//if FileExist(myPath)
}

Panel pnl_RepDogGOZ;
 Table Dogovor
  Screen scr1 ('...',,sci13Esc);
  Show at (,,,);
  Fields
   _dBeg         : noProtect;
   _dEnd         : noProtect;
  Buttons
  cmValue1,,,'Сформировать';
  cmValue2,,,'Выход';
<< 

`период с`.@@@@@@@@@@  `по`.@@@@@@@@@@

     <. Сформировать .>    <. Выход .>
>>
 end;
end; // Panel
HandleEvent
cmInit:{
  _PopAllCondition;
  _Item_KP  := comp(281474976711950);  // Конечный потребитель - Прямой               //В настр
  _Item_PrP := comp(281474976711945);  // Принадлежность продукции - Спецтехника      //В настр
  var datechanged : boolean;
  if ((not readmydsk(_dBeg,'AGAT_GOZ_Pr11_dBeg',datechanged)) or (datechanged)) _dBeg := Cur_date;
  if ((not readmydsk(_dEnd,'AGAT_GOZ_Pr11_dEnd',datechanged)) or (datechanged)) _dEnd := Cur_date;
} // cmInit

cmDone:{
  SaveMyDsk(_dBeg,'AGAT_GOZ_Pr11_dBeg');
  SaveMyDsk(_dEnd,'AGAT_GOZ_Pr11_dEnd');
}//cmDone

cmValue1:{
  StartNewVisual(vtRotateVisual,vfTimer + vfBreak + vfConfirm,''#3'Обработка договоров...'#13#13#3,1);
  
  Delete all _DogDel;
  Delete all _ZakazDel;
 
  PushCondition(tcby_KP);
  PushCondition(tcby_PrP);
!======================================================================
! Собираем договоры по датам  
!======================================================================
  PushCondition(tcby_Date);
  if GetFirst Dogovor = tsOk do
     { 
       _InsDog;
     } while(GetNext Dogovor = tsOk and NextVisual);
!======================================================================
! Собираем договоры по статусу "исполняемый"
!======================================================================
  PopCondition(tcby_Date);
  PushCondition(tcby_Stat);
  if GetFirst Dogovor = tsOk do
     { 
       _InsDog;
     } while(GetNext Dogovor = tsOk and NextVisual);

  _PopAllCondition
  _CreateTmp;
  _CreateExcelRep;

  StopVisual('',0);
  CloseInterface(cmDefault);
}
end; // HandleEvent
end. // Interface

VipInterface UserReport_AGAT_GOZ_Pr11 Implements IUserReport licensed(free);
Interface UserReport_AGAT_GOZ_Pr11;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::AGAT_GOZ_Pr11);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Справка (приложение 11)';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    GetGroupName := 'Отчеты ГОЗ';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'DOGOVOR';
    end;
  end;
end.
