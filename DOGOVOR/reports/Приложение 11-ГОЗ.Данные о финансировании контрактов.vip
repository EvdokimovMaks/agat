#component "AGAT"
interface Forma11GOZ 'Приложение 11-ГОЗ. Данные о финансировании контрактов' escclose, doaccept;
show (,,40,5);

table struct dog (
  cdog   : comp,
  cappdog: comp,
  ddoc   : date,
  nodoc  : string[40],
  OrgName: string[150],
  name   : string,
  sbasedoc: double,
  splpor: double
) with index (
  i01 = nodoc
);

table struct dogyear (
  cappdog: comp,
  year: word,
  sbasedoc: double,
  splpor: double
) with index (
  i01 = cappdog + year
);

table struct plp (
  cappdog:comp,
  ckatstroy:comp,
  ksname:string,
  cplpor:comp,
  nplpor:string,
  dplpor:date,
  yplpor:word,
  splpor:double,
  cbasedoc:comp,
  nbasedoc:string,
  dbasedoc:date,
  sbasedoc:double,
  avans:word
) with index (
  i01 = cappdog + yplpor + dplpor + nplpor
);

sql query sSelectDogovor =
insert dog (cdog, cappdog)
select d.nrec, coalesce(sogl.nrec,d.nrec)
from dogovor d
join attrval avPrPr on avPrPr.wTable=1707 and avPrPr.cRec=d.nrec and avPrPr.cattrnam=#comp(281474976710833) and avPrPr.vComp=#comp(281474976711945)
left join (select dogovor.cdogovor as cdogovor, max(dogovor.nrec) as nrec
           from dogovor
           left join attrval on attrval.wtable=1707 and attrval.crec = dogovor.nrec and attrval.cattrnam=#comp(281474976710830)
           where dogovor.tidk=401 and dogovor.status<>3 and coalesce(attrval.vcomp,#comp(0)) <> #comp(4001AB188D71B97Ah)
           group by dogovor.cdogovor
          ) sogl on d.nrec = sogl.cdogovor
where d.tidk=400;

sql query sSelectCalPlan =
insert cp (cappdog, cCalPlan, cKatStroy, dend)
select distinct dog.cappdog, CalPlan.nRec, sm.cobj, case when coalesce(avprik.vdate,0)>0 then avprik.vdate else calplan.dto end
from dog
join calplan on dog.cappdog = calplan.cdogovor and calplan.directmc = 1
join spdocs spd on 403 = spd.tidk and calplan.nrec = spd.cdoc
join specmtr sm on #comp(0001000000000001h) = sm.csaldtune and 1723 = sm.cotable and spd.nrec = sm.cspec
left join attrval avprik on avprik.wtable = 1702 and avprik.crec = calplan.nrec and avprik.cattrnam = #comp(00010000000000D8h)
;

sql query sSelectEtap =
insert ks (cappdog, cKatStroy, dend)
select cp.cappdog, cp.cKatStroy, max(cp.dend)
from cp
group by cp.cappdog, cp.cKatStroy
;

sql query sSelectPlPor =
insert plp (cappdog, ckatstroy, ksname, cplpor, nplpor, dplpor, yplpor, splpor, cbasedoc, nbasedoc, dbasedoc, sbasedoc, avans)
select ks.cappdog,
       ks.ckatstroy,
       substring(katstroy.name,1,instr(' ',katstroy.name+' ',1)-1),
       plpor.nrec,
       plpor.nodok,
       plpor.datvip,
       year(datetime(plpor.datvip,0)),
       o.sumob,
       coalesce(pbd.nrec,#comp(0)),
       coalesce(pbd.nodoc,''),
       coalesce(pbd.ddoc,0),
       coalesce(pbd.total,0),
       case when av.vcomp is null then
         case when instr('аванс',lower(plpor.namepl1))>0 then 1 else 0 end
       else
         case when av.vcomp=#comp(281474976711134) then 1 else 0 end
       end
from ks
join katstroy on ks.ckatstroy = katstroy.nrec
join oborot o on o.datob between ? and ? and
                 o.schetk   = '862' and
                 o.kauks[3] = ks.cKatStroy and
                 (o.scheto <> '862' or (o.scheto = '862' and o.kauks[3] <> o.kauos[3]))
join basefin bf on o.csoprhoz=bf.csoprhoz
join plpor on bf.cplpor = plpor.nrec and plpor.tidkgal = 2
left join basedoc pbd on bf.CPREDOPLDO = pbd.nrec
left join attrval av on av.wtable = 1102 and av.crec = coalesce(pbd.nrec,#comp(0)) and av.cattrnam = #comp(000100000000008Dh)
union
select dog.cappdog,
       katstroy.nrec,
       substring(katstroy.name,1,instr(' ',katstroy.name+' ',1)-1),
       plpor.nrec,
       plpor.nodok,
       plpor.datvip,
       year(datetime(plpor.datvip,0)),
       o.sumob,
       coalesce(pbd.nrec,#comp(0)),
       coalesce(pbd.nodoc,''),
       coalesce(pbd.ddoc,0),
       coalesce(pbd.total,0),
       case when av.vcomp is null then
         case when instr('аванс',lower(plpor.namepl1))>0 then 1 else 0 end
       else
         case when av.vcomp=#comp(281474976711134) then 1 else 0 end
       end
from oborot o
join dog on o.kauks[2] = dog.cdog
join katstroy on o.kauks[3] = katstroy.nrec
join basefin bf on o.csoprhoz=bf.csoprhoz
join basedoc bd on bf.cbasedoc=bd.nrec
join plpor on bf.cplpor = plpor.nrec and plpor.tidkgal = 2
left join basedoc pbd on bf.CPREDOPLDO = pbd.nrec
left join attrval av on av.wtable = 1102 and av.crec = coalesce(pbd.nrec,#comp(0)) and av.cattrnam = #comp(000100000000008Dh)
where o.datob between ? and ? and o.schetk = '862' and o.scheto <> '862';

sql query sSelectFakePlPor =
insert plp (cappdog, ckatstroy, ksname, cplpor, nplpor, dplpor, yplpor, splpor, cbasedoc, nbasedoc, dbasedoc, sbasedoc, avans)
select ks.cappdog,
       ks.ckatstroy,
       substring(katstroy.name,1,instr(' ',katstroy.name+' ',1)-1),
       #comp(0), '', 0, year(datetime(ks.dend,0)), 0,
       #comp(0), '', 0, 0, 2
from ks
join katstroy on ks.ckatstroy = katstroy.nrec
left join (select cappdog, ckatstroy, count(*) as cnt from plp group by cappdog, ckatstroy) p on ks.cappdog=p.cappdog and ks.ckatstroy=p.ckatstroy
where ks.dend between ? and ? and coalesce(p.cnt,0)=0
;

sql query sSelectVipDog =
select dog.cdog, dog.cappdog, d.ddoc, d.nodoc, o.name, d.nodoc_ext, coalesce(p.sbasedoc,0), coalesce(p.splpor,0)
from dog
join dogovor d on dog.cdog = d.nrec
join katorg o on d.corg = o.nrec
left join (select cappdog, sum(sbasedoc) as sbasedoc, sum(splpor) as splpor, count(*) as cnt from plp group by cappdog) p on dog.cappdog = p.cappdog
where coalesce(p.cnt,0) > 0
;

sql query sSelectVipDogYear =
select cappdog, plp.yplpor, sum(sbasedoc), sum(splpor)
from plp
group by cappdog, plp.yplpor
;

var
  dRep1, dRep2: date;
  pXL: XLSRepBuilder;
  sXLSFileName, sXLTFileName: string;
  iGetKau: GetKAU;
  ea: iExtAttr;

create view
as select *
from dog, dogyear, plp,
     dog dog1, dogyear dogyear1, plp plp1
where ((
  dog.cappdog == dogyear.cappdog and
  dogyear.cappdog == plp.cappdog and
  dogyear.year == plp.yplpor
));

screen scmain;
fields
  dRep1: noprotect;
  dRep2: noprotect;
buttons
  cmDoOk, default;
  cmCancel;
<<

`Период с` .@@@@@@@@@@ `по` .@@@@@@@@@@

          <. Продолжить .> <. Отмена .>
>>
end;

procedure FillTables;
var
  s, stmt: longint;
{
  //временная таблица для договоров
  sqlFreeStr(s);
  sqlAddStr(s, 'table dog (cdog: comp, cappdog: comp) with index (i01 = cdog + cappdog);');
  sqlCreateTmpTable(s , ctmNormal);
  sqlExecDirect('DELETE FROM dog');
  //временная таблица для календарных планов
  sqlFreeStr(s);
  sqlAddStr(s,'table cp (cappdog: comp, cCalPlan: comp, cKatStroy: comp, dend: date) with index (i01 = cappdog);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM cp');
  //временная таблица для этапов
  sqlFreeStr(s);
  sqlAddStr(s,'table ks (cappdog: comp, cKatStroy: comp, dend: date) with index (i01 = cappdog);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM ks');
  //временная таблица для платежек
  sqlFreeStr(s);
  sqlAddStr(s,'table plp (cappdog:comp, ckatstroy:comp, ksname:string, cplpor:comp, nplpor:string, dplpor:date, yplpor:word, splpor:double, cbasedoc:comp, nbasedoc:string, dbasedoc:date, sbasedoc:double, avans:word);');
  sqlCreateTmpTable(s, ctmNormal);
  sqlExecDirect('DELETE FROM plp');

  sqlExecDirect(sSelectDogovor);
  //заполняем таблицу календарных планов
  sqlExecDirect(sSelectCalPlan);
  //заполняем таблицу этапов
  sqlExecDirect(sSelectEtap);
  //заполняем таблицу платежек
  stmt := sqlAllocStmt;
  sqlPrepare(stmt, sSelectPlPor);
  sqlBindParam(stmt, 1, drep1);
  sqlBindParam(stmt, 2, drep2);
  sqlBindParam(stmt, 3, drep1);
  sqlBindParam(stmt, 4, drep2);
  sqlExecute(stmt);
  sqlFreeStmt(stmt);
  //заполняем таблицу платежек фейковыми платежками по заказам, заканчивающимся в отчетном периоде, но без оплат
  stmt := sqlAllocStmt;
  sqlPrepare(stmt, sSelectFakePlPor);
  sqlBindParam(stmt, 1, drep1);
  sqlBindParam(stmt, 2, drep2);
  sqlExecute(stmt);
  sqlFreeStmt(stmt);

  //заполняем виповские таблицы
  delete all dog1;
  sqlSelectInto(sSelectVipDog, #dog1);
  delete all dogyear1;
  sqlSelectInto(sSelectVipDogYear, #dogyear1);
  delete all plp1;
  sqlSelectInto('select * from plp', #plp1);
  //дропаем временные таблицы
  sqlDropTmpTable('dog');
  sqlDropTmpTable('cp');
  sqlDropTmpTable('ks');
  sqlDropTmpTable('plp');
}

procedure printrep(isCreateXLT : boolean);
var
  i: integer;
{
  if (not isCreateXLT) Set sXLSFileName := pXL.CreateReport(sXLTFileName, True)
                  else Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);
  pXL.CreateVar(sXLSFileName);
  pXL.SetStringVar('drep1', datetostr(drep1,'DD.MM.YYYY'));
  pXL.SetStringVar('drep2', datetostr(drep2,'DD.MM.YYYY'));
  pXL.PublishVar;
  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Main');
  pXL.CreateTblFld('НПП');
  pXL.CreateTblFld('Заказ');
  pXL.CreateTblFld('Договор');
  pXL.CreateTblFld('Заказчик');
  pXL.CreateTblFld('ПредметДоговора');
  pXL.CreateTblFld('СчетНомер');
  pXL.CreateTblFld('СчетДата');
  pXL.CreateTblFld('СчетСумма');
  pXL.CreateTblFld('ПлатежНаименование');
  pXL.CreateTblFld('ПлатежНомер');
  pXL.CreateTblFld('ПлатежДата');
  pXL.CreateTblFld('ПлатежСумма');
  pXL.CreateTblFld('lvl');
  i := 0;
  if not isCreateXLT
  _loop dog
  {
    i++;
    pXL.ClearTblBuffer;
    pXL.SetTblStringFldValue('НПП', i);
    pXL.SetTblStringFldValue('Договор',dog.nodoc + ' от ' + datetostr(dog.ddoc,'DD.MM.YYYY'));
    pXL.SetTblStringFldValue('Заказчик', dog.OrgName);
    pXL.SetTblStringFldValue('ПредметДоговора', dog.name);
    _loop dogyear
    {
      _loop plp
      {
        pXL.SetTblStringFldValue('Заказ', plp.ksname);
        pXL.SetTblStringFldValue('СчетНомер', plp.nbasedoc);
        pXL.SetTblStringFldValue('СчетДата', if(plp.dbasedoc=0,'',datetostr(plp.dbasedoc,'DD.MM.YYYY')));
        pXL.SetTblNumberFldValue('СчетСумма', plp.sbasedoc/1000);
        pXL.SetTblStringFldValue('ПлатежНаименование', if(plp.avans=1,'аванс',if(plp.avans=0,'ок.расчет','')));
        pXL.SetTblStringFldValue('ПлатежНомер', plp.nplpor);
        pXL.SetTblStringFldValue('ПлатежДата', if(plp.dplpor=0,'',datetostr(plp.dplpor,'DD.MM.YYYY')));
        pXL.SetTblNumberFldValue('ПлатежСумма', plp.splpor/1000);
        pXL.InsTblRow;
        pXL.ClearTblBuffer;
      } //loop plp
      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('ПлатежНаименование', 'ИТОГО по '+dogyear.year+' году');
      pXL.SetTblStringFldValue('lvl',2);
      pXL.SetTblNumberFldValue('ПлатежСумма', dogyear.splpor/1000);
      pXL.InsTblRow;
      pXL.ClearTblBuffer;
    } //loop dogyear
    pXL.ClearTblBuffer;
    pXL.SetTblStringFldValue('ПредметДоговора', 'Итого за период с '+datetostr(dRep1,'DD.MM.YYYY г.')+' по '+datetostr(dRep2,'DD.MM.YYYY г.'));
    pXL.SetTblStringFldValue('lvl',1);
    pXL.SetTblNumberFldValue('ПлатежСумма', dog.splpor/1000);
    pXL.InsTblRow;
  } //loop dog
  pXL.PublishTbl('Main');
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}

handleevent
cmDoOk:
{
  StartNewVisual(vtRotateVisual, vfThread + vfTimer, '', 0);
  FillTables;
  SetVisualHeader('Выгрузка в Excel');
  printrep(false);
  StopVisual('',0);
}
cminit:
{
  if not readmydsk(dRep1, 'Forma11GOZ_dRep1', false) dRep1 := date(1,1,year(cur_date));
  if not readmydsk(dRep2, 'Forma11GOZ_dRep2', false) dRep2 := date(last_day(cur_date),month(cur_date),year(cur_date));
  sXLTFileName := TranslatePath('%StartPath%xls\Forma11GOZ.xlt');
}
cmdone:
{
  savemydsk(dRep1, 'Forma11GOZ_dRep1');
  savemydsk(dRep2, 'Forma11GOZ_dRep2');
}
end;
end.

VipInterface UserReport_Forma11GOZ Implements IUserReport licensed(free);
Interface UserReport_Forma11GOZ;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::Forma11GOZ);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Приложение 11-ГОЗ. Данные о финансировании контрактов';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := 'Отчеты ГОЗ'
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'DOGOVOR';
    end;
  end;
end.
