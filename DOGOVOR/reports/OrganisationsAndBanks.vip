#include GlobalMatch.vih
#include Params.vih
#include Query.vih
#include System.vih
#include userreport.vih

#component "AGAT"

interface OrganisationsAndBanks;

var
  pXL: XLSRepBuilder;
  sXLSFileName, sXLTFileName: string;
  testvar: string;
  rs: IResultSet;
  q: IQuery;

sql query qGetOrgBanks =
  select o.code       as OrgCode,
         o.name       as OrgName,
         o.unn        as INN,
         o.kodplatnds as KodPlatNDS,
         b.name       as BankName,
         b.mfo1       as BIK,
         b.schet1     as Schet,
         b.remark     as Remark,
         ex.name      as IGK,
         angk.vstring as GKNumber,
         adgk.vdate   as GKDate
  from katorg o
  join katbank b on b.corg = o.nrec
  left join attrval av on av.crec = b.nrec and av.cattrnam = #comp(00010000000009BFh)
  left join EXCLASSSEG ex on ex.nrec = av.vcomp
  left join attrval angk on angk.crec = b.nrec and angk.cattrnam = #comp(00010000000009CEh)
  left join attrval adgk on angk.crec = b.nrec and adgk.cattrnam = #comp(00010000000009CFh)
;

procedure printrep(isCreateXLT : boolean);
{
  if (not isCreateXLT) Set sXLSFileName := pXL.CreateReport(sXLTFileName, True)
                  else Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);
  pXL.CreateVar(sXLSFileName);
  pXL.SetStringVar('testvar', '');
  pXL.PublishVar;
  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Main');

  pXL.CreateTblFld('OrgCode');
  pXL.CreateTblFld('OrgName');
  pXL.CreateTblFld('INN');
  pXL.CreateTblFld('KodPlatNDS');
  pXL.CreateTblFld('BankName');
  pXL.CreateTblFld('BIK');
  pXL.CreateTblFld('Schet');
  pXL.CreateTblFld('Remark');
  pXL.CreateTblFld('IGK');
  pXL.CreateTblFld('GKNumber');
  pXL.CreateTblFld('GKDate');

  if not isCreateXLT
    if rs.getFirst = tsOk do
    {
      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('OrgCode', rs.row.Val('OrgCode'));
      pXL.SetTblStringFldValue('OrgName', rs.row.Val('OrgName'));
      pXL.SetTblStringFldValue('INN', rs.row.Val('INN'));
      pXL.SetTblStringFldValue('KodPlatNDS', rs.row.Val('KodPlatNDS'));
      pXL.SetTblStringFldValue('BankName', rs.row.Val('BankName'));
      pXL.SetTblStringFldValue('BIK', rs.row.Val('BIK'));
      pXL.SetTblStringFldValue('Schet', rs.row.Val('Schet'));
      pXL.SetTblStringFldValue('Remark', rs.row.Val('Remark'));
      pXL.SetTblStringFldValue('IGK', rs.row.Val('IGK'));
      pXL.SetTblStringFldValue('GKNumber', rs.row.Val('GKNumber'));
      pXL.SetTblStringFldValue('GKDate', datetostr(rs.row.Val('GKDate'), 'DD/MM/YYYY'));
      pXL.InsTblRow;
    } while rs.getNext = tsOk;
  pXL.PublishTbl('Main');
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}

handleevent
cminit:
{
  StartNewVisual(vtRotateVisual, vfTimer, '', 0);
  SetVisualHeader('Выгрузка в Excel');
  sXLTFileName := TranslatePath('%StartPath%xls\OrgsAndBanksReport.xlsm');
  q := queryManager.createQuery(qGetOrgBanks);
  q.execute;
  rs := q.getresultset;
  printrep(false); // true - create XLT, false - make a rep
  StopVisual('',0);
}
end;
end.

VipInterface UserReport_OrgsAndBanks Implements IUserReport licensed(free);
Interface UserReport_OrgsAndBanks;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::OrganisationsAndBanks);
  end;

  function GetReportName: String;
  begin
    GetReportName := '(Агат) Полный список организаций и банков';
  end;

  function GetGroupName (Level : Word) : String;
  begin
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'B_FINANS';
    end;
  end;
end.
