#component "AGAT"

interface dogovorcalplanree;

table struct t (
  tdNodoc     : string[40],
  tdNodocExt  : string[40],
  tdDdoc      : date,
  tdVidDogName: string[80],
  tdStatusName: string[80],
  tdTipKonPotr: string[120],
  tdSumma     : double,
  tdNDS       : double,
  KatstroyName: string[200],
  dNodoc      : string[40],
  dDdoc       : date,
  dNodocSoisp : string[100],
  dVidDogName : string[80],
  KatOrgName  : string[150],
  dDbeg       : date,
  dDend       : date,
  dStatusName : string[80],
  DirectName  : string[10],
  cpNodoc     : string[40],
  cpStatusName: string[80],
  cpDbeg      : date,
  cpDend      : date,
  cpKol       : double,
  cpSumma     : double,
  cpNDS       : double,
  IGK         : string[100],
  ZavNum      : string[120],
  ProjNum     : string[120],
  UndoneReason: string[255],
  PriceKind   : string[50],
  PodrName    : string[150]
) with index (
  i01 = tdNodoc + tdDdoc + dNodoc + dDdoc + cpNodoc
);

sql query q1 =
select coalesce(td.nodoc,d.nodoc) as tdNodoc,
       coalesce(td.nodoc_ext,d.nodoc_ext) as tdNodocExt,
       coalesce(td.ddoc,d.ddoc) as tdDdoc,
       coalesce(tdv.name, coalesce(dv.name, '')) as tdVidDogName,
       coalesce(tdkn.name, coalesce(dkn.name, '')) as tdStatusName,
       coalesce(tdtkp.name, coalesce(dtkp.name,'')) as tdTipKonPotr,
       coalesce(td.summa,d.summa) as tdSumma,
       coalesce(td.sumnds,d.sumnds) as tdNDS,
       coalesce(ks.name,'') as KatstroyName,
       d.nodoc as dNodoc,
       d.ddoc as dDdoc,
       coalesce(ecsDog.name,'') as dNodocSoisp,
       coalesce(dv.name,'') as dVidDogName,
       coalesce(o.name,'') as KatOrgName,
       d.dbeg as dDbeg,
       d.dend as dDend,
       coalesce(dkn.name, '') as dStatusName,
       case when d.direct = 1 then 'реализация' else 'закупка' end as DirectName,
       coalesce(cp.nodoc, '') as cpNodoc,
       coalesce(kn.name,'') as cpStatusName,
       coalesce(cp.dfrom, #date(0,0,0)) as cpDbeg,
       coalesce(cp.dto, #date(0,0,0)) as cpDend,
       coalesce(t.kol,0) as cpKol,
       coalesce(t.summa,0) - case when coalesce(cp.vhodnal,0) = 1 then coalesce(t.sumnds,0) else 0 end as cpSumma,
       coalesce(t.sumnds,0) as cpNDS,
       coalesce(spkIGK.name,'') as IGK,
       coalesce(spk1.name,'') as ZavNum,
       coalesce(spk2.name,'') as ProjNum,
       coalesce(av3.vstring, '') as UndoneReason,
       coalesce(tPriceKind.Name, '') as PriceKind,
       coalesce(kp.name,'') as PodrName
from dogovor d
//количество подчиненных договоров
left join (select cdogovor, count(*) as cnt
           from dogovor
           where cdogovor <> #comp(0)
           group by cdogovor) dChildCnt on d.nrec = dChildCnt.cdogovor
//статус договора
left join katnotes dkn on d.cnote = dkn.nrec
//контрагент по договору
left join katorg o on d.corg = o.nrec
//конечный потребитель по договору
left join attrval davtkp on 1707 = davtkp.wtable and d.nrec = davtkp.crec and #comp(00010000000000AFh) = davtkp.cattrnam
left join spkau dtkp on coalesce(davtkp.vcomp,#comp(0)) = dtkp.nrec
//вид договора
left join katvidd dv on d.cviddog = dv.nrec
//договор верхнего уровня
left join dogovor td on d.cdogovor = td.nrec
//статус договора верхнего уровня
left join katnotes tdkn on coalesce(td.cnote, #comp(0)) = tdkn.nrec
//конечный потребитель по договору верхнего уровня td
left join attrval tdavtkp on 1707 = tdavtkp.wtable and coalesce(td.nrec, #comp(0)) = tdavtkp.crec and #comp(00010000000000AFh) = tdavtkp.cattrnam
left join spkau tdtkp on coalesce(tdavtkp.vcomp,#comp(0)) = tdtkp.nrec
//вид договора верхнего уровня
left join katvidd tdv on coalesce(td.cviddog,#comp(0)) = tdv.nrec
//№ госконтракта, где ОАО "Концерн "Моринсис-Агат" - соисполнитель
left join exclassval ecvDog on ecvDog.classcode=179 and ecvDog.wtable=1707 and ecvDog.crec=d.nrec
left join exclassseg ecsDog on ecsDog.nrec = ecvDog.cclassseg
//этап
left join calplan cp on d.nrec = cp.cdogovor and cp.directmc <> 0
//статус этапа
left join katnotes kn on coalesce(cp.cnote,#comp(0)) = kn.nrec
//объекты строительства из целевого учета строк этапа с суммами
left join (select spd.cdoc as ccalplan, specmtr.cobj as ckatstroy, sum(spd.summa) as summa, sum(spd.sumnds) as sumnds, sum(spd.kol) as kol
           from spdocs spd
           join specmtr on #comp(0001000000000001h) = specmtr.csaldtune and 1723 = specmtr.cotable and spd.nrec = specmtr.cspec
           where spd.tidk = 403
           group by spd.cdoc, specmtr.cobj
          ) t on cp.nrec = t.ccalplan and coalesce(cp.nrec,#comp(0)) <> #comp(0)
//вид цены из внешней классификации к строкам этапа
left join (select distinct spd.cdoc as ccalplan, es.name as name
           from spdocs spd
           join exclassval ev on 1723 = ev.wtable and spd.nrec = ev.crec and 124 = ev.classcode
           join exclassseg es on ev.cclassseg = es.nrec
           where spd.tidk = 403
          ) tPriceKind on cp.nrec = tPriceKind.ccalplan and coalesce(cp.nrec,#comp(0)) <> #comp(0)
//объект строительства по этапу
left join katstroy ks on coalesce(t.ckatstroy, #comp(0)) = ks.nrec
//ИГК по объекту строительства
left join attrval avIGK on 2101 = avIGK.wtable and coalesce(ks.nrec,#comp(0)) = avIGK.crec and #comp(281474976711884) = avIGK.cattrnam
left join spkau spkIGK on coalesce(avIGK.vcomp,#comp(0)) = spkIGK.nrec
//заводской номер - вн.атр. к объекту строительства
left join attrval av1 on 2101 = av1.wtable and coalesce(ks.nrec,#comp(0)) = av1.crec and #comp(281474976711616) = av1.cattrnam
left join spkau spk1 on coalesce(av1.vcomp,#comp(0)) = spk1.nrec
//№ проекта - вн.атр. к объекту строительства
left join attrval av2 on 2101 = av2.wtable and coalesce(ks.nrec,#comp(0)) = av2.crec and #comp(281474976711615) = av2.cattrnam
left join spkau spk2 on coalesce(av2.vcomp,#comp(0)) = spk2.nrec
//причина невыполнения - вн.атр. к объекту строительства
left join attrval av3 on 2101 = av3.wtable and coalesce(ks.nrec,#comp(0)) = av3.crec and #comp(281474976710826) = av3.cattrnam
//подразделение по заказу - внешн. КАУ к объекту строительства
left join kaureff kr on 2101 = kr.cotable and coalesce(ks.nrec,#comp(0)) = kr.crec and 2 = kr.wkau and coalesce(ks.nrec,#comp(0)) <> #comp(0)
left join katpodr kp on coalesce(kr.ckau,#comp(0)) = kp.nrec
where d.tidk = 401 or (d.tidk=400 and coalesce(dChildCnt.cnt,0) = 0) //не выводим строки с папками (договоа у которых есть допники)
order by coalesce(td.ddoc,d.ddoc), coalesce(td.nodoc,d.nodoc), d.ddoc, d.nodoc
;

var
  pXL: XLSRepBuilder;
  sXLSFileName, sXLTFileName: string;

create view as select *
from t;

procedure printReport(isCreateXLT: boolean);
{
  if (not isCreateXLT) Set sXLSFileName := pXL.CreateReport(sXLTFileName, True)
                  else Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);
  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Main');
  pXL.CreateTblFld('РодительНомер' );
  pXL.CreateTblFld('РодительШифр'  );
  pXL.CreateTblFld('РодительДата'  );
  pXL.CreateTblFld('РодительСумма' );
  pXL.CreateTblFld('РодительНДС'   );
  pXL.CreateTblFld('РодительСтатус');
  pXL.CreateTblFld('РодительТипКонечногоПотребителя');
  pXL.CreateTblFld('РодительВид'   );
  pXL.CreateTblFld('Заказ'         );
  pXL.CreateTblFld('Номер'         );
  pXL.CreateTblFld('Статус'        );
  pXL.CreateTblFld('ТипКонечногоПотребителя');
  pXL.CreateTblFld('Дата'          );
  pXL.CreateTblFld('Вид'           );
  pXL.CreateTblFld('Контрагент'    );
  pXL.CreateTblFld('ДатаС'         );
  pXL.CreateTblFld('ДатаПо'        );
  pXL.CreateTblFld('Направление'   );
  pXL.CreateTblFld('КалПланНомер'  );
  pXL.CreateTblFld('КалПланСтатус' );
  pXL.CreateTblFld('КалПланДатаС'  );
  pXL.CreateTblFld('КалПланДатаПо' );
  pXL.CreateTblFld('КалПланКолво'  );
  pXL.CreateTblFld('КалПланСумма'  );
  pXL.CreateTblFld('КалПланНДС'    );
  pXL.CreateTblFld('ГКГдеАгатСоисп');
  pXL.CreateTblFld('ИГК'           );
  pXL.CreateTblFld('ЗаводскойНомер');
  pXL.CreateTblFld('НомерПроекта'  );
  pXL.CreateTblFld('ПричинаНевып'  );
  pXL.CreateTblFld('ВидЦены'       );
  pXL.CreateTblFld('Подразделение' );

  _loop t
  {
    pXL.ClearTblBuffer;
    pXL.SetTblStringFldValue('РодительНомер' ,t.tdNodoc     );
    pXL.SetTblStringFldValue('РодительШифр'  ,t.tdNodocExt  );
    pXL.SetTblDateFldValue  ('РодительДата'  ,t.tdDdoc      );
    pXL.SetTblStringFldValue('РодительВид'   ,t.tdVidDogName);
    pXL.SetTblStringFldValue('РодительСтатус',t.tdStatusName);
    pXL.SetTblStringFldValue('РодительТипКонечногоПотребителя', t.tdTipKonPotr);
    pXL.SetTblNumberFldValue('РодительСумма' ,t.tdSumma     );
    pXL.SetTblNumberFldValue('РодительНДС'   ,t.tdNDS       );
    pXL.SetTblStringFldValue('Заказ'         ,t.KatstroyName);
    pXL.SetTblStringFldValue('Номер'         ,t.dNodoc      );
    pXL.SetTblStringFldValue('Статус'        ,t.dStatusName );
    pXL.SetTblDateFldValue  ('Дата'          ,t.dDdoc       );
    pXL.SetTblStringFldValue('Вид'           ,t.dVidDogName );
    pXL.SetTblStringFldValue('Статус'        ,t.dStatusName );
    pXL.SetTblStringFldValue('ТипКонечногоПотребителя', t.tdTipKonPotr);
    pXL.SetTblStringFldValue('Контрагент'    ,t.KatOrgName  );
    pXL.SetTblDateFldValue  ('ДатаС'         ,t.dDbeg       );
    pXL.SetTblDateFldValue  ('ДатаПо'        ,t.dDend       );
    pXL.SetTblStringFldValue('Направление'   ,t.DirectName  );
    pXL.SetTblStringFldValue('КалПланНомер'  ,t.cpNodoc     );
    pXL.SetTblStringFldValue('КалПланСтатус' ,t.cpStatusName);
    pXL.SetTblDateFldValue  ('КалПланДатаС'  ,t.cpDbeg      );
    pXL.SetTblDateFldValue  ('КалПланДатаПо' ,t.cpDend      );
    pXL.SetTblNumberFldValue('КалПланКолво'  ,t.cpKol       );
    pXL.SetTblNumberFldValue('КалПланСумма'  ,t.cpSumma     );
    pXL.SetTblNumberFldValue('КалПланНДС'    ,t.cpNDS       );
    pXL.SetTblStringFldValue('ГКГдеАгатСоисп',t.dNodocSoisp );
    pXL.SetTblStringFldValue('ИГК'           ,t.IGK         );
    pXL.SetTblStringFldValue('ЗаводскойНомер',t.ZavNum      );
    pXL.SetTblStringFldValue('ЗаводскойНомер',t.ZavNum      );
    pXL.SetTblStringFldValue('НомерПроекта'  ,t.ProjNum     );
    pXL.SetTblStringFldValue('ПричинаНевып'  ,t.UndoneReason);
    pXL.SetTblStringFldValue('ВидЦены'       ,t.PriceKind   );
    pXL.SetTblStringFldValue('Подразделение' ,t.PodrName    );
    pXL.InsTblRow;
  }

  pXL.PublishTbl('Main');
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
}

function filltables: boolean;
{
  result := false;
  delete all t;
  if (sqlSelectInto(q1, #t) != tsOk)
  {
    message('Ошибка запроса данных для отчета', error);
    exit;
  }
  result := true;
}
handleevent
  cminit:
  {
    sXLTFileName := TranslatePath('%StartPath%xls\РеестрДоговоровИЭтапов.xlt');
    StartNewVisual(vtRotateVisual, vfThread, 'Формирование отчета. Запрос к БД', 0);
    if (filltables)
    {
      setvisualheader('Формирование отчета. Выгрузка в Excel');
      printReport(false);
    }
    StopVisual('',0);
  }
end;
end.

VipInterface UserReport_dogovorcalplanree Implements IUserReport licensed(free);
Interface UserReport_dogovorcalplanree;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::dogovorcalplanree);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Агат.Реестр договоров и этапов';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1) {}
    GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'DOGOVOR';
    end;
  end;
end.
