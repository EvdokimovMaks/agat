#include PD_Object.vih
#include PD_ICellSchema.vih
#include Query.vih
#include PD_Context.vih
#include PD_CellSchemaBase.vih
#include ExtAttr.vih

#component "PD_AGAT"

vipInterface PD_CellSchema_ForDistr(PD_CellSchemaBase) implements PD_ICellSchema, PD_InitByFormPl;

interface PD_CellSchema_ForDistr;

const
  ForDistr_Mode_St: word = 0;
  ForDistr_Mode_Av: word = 1;
  ForDistr_Mode_Ok: word = 2;
  cTipOper_Fact   : comp = 000100000000186Fh;
end;

var
  _q: IQuery;
  #include ExtAttr.var

create view
var
  _cFormPl    : comp;
  _cPlPor     : comp;
  _cKatStroy  : comp;
  _cAddSumTune: comp;
as select
  FormPl.NRec
from
  FormPl
 ,PlPor
 ,Oborot
 ,Oborot OborotB
 ,SoprHoz SoprHozB
 ,UsersDoc
 ,SpCash
where ((
      _cFormPl == FormPl.NRec

  and _cPlPor  == PlPor.Nrec

  and PlPor.TiDk         == Oborot.TiDk
  and PlPor.Nrec         == Oborot.cSoprDoc
  and (Oborot.SchetO      = '35100'
  and  Oborot.SchetK      = '36200'
  and  Oborot.DatOb      <> 0
  and  Oborot.KauOs[3]    = _cKatStroy
  and  Oborot.KauKs[3]    = _cKatStroy
  and  Oborot.KauOs[4]    = _cAddSumTune
  and  Oborot.KauOs[6]    = cTipOper_Fact)

  and PlPor.TiDk         == OborotB.TiDk
  and PlPor.Nrec         == OborotB.cSoprDoc
  and (OborotB.SchetO     = '851'
  and  OborotB.SchetK     = '862'
  and  OborotB.DatOb     <> 0
  and  OborotB.KauOs[4]   = _cKatStroy
  and  OborotB.KauKs[3]   = _cKatStroy)

  and OborotB.cSoprHoz   == SoprHozB.Nrec

  and PlPor.tidkgal      == UsersDoc.TipGal
  and PlPor.TiDk         == UsersDoc.TipUsers
  and UsersDoc.cCashBank == SpCash.cCashBank
  and PLANSSCH_NREC_2013 == SpCash.cPlansSch
));

sql query qValueSt =
  select
    sum(SumOb): double
  from Oborot
  where
    TiDk = :tidk and cSoprDoc = :cPlPor and
    SchetO = '35100' and SchetK = '36200' and
    KauKs[3] = :cKatStroy and KauOs[3] = :cKatStroy and
    DatOb <> 0 and
    KauOs[4] = :cAddSumTune and
    KauOs[6] = :cTipOper
;

sql query qValueAvOk =
  select
    sum(SumOb): double
  from Oborot
  where
    TiDk = :tidk and cSoprDoc = :cPlPor and
    SchetO = '851' and SchetK = '862' and
    KauKs[3] = :cKatStroy and KauOs[4] = :cKatStroy and
    DatOb <> 0
;

function isEditable(cell: PD_ICell; context: ObjRef): boolean;
{
  #__UNUSED__(cell)
  var p: PD_IParams = PD_IContext(context).params;
  result := FormPl.ResWord[1] = ForDistr_Mode_St and p.cPlPor != 0;
}

function getValue(cell: PD_ICell; context: ObjRef): variant;
{
  var p: PD_IParams = PD_IContext(context).params;

  var wTiDk: word = 0;

  _cPlPor := p.cPlPor;
  if getfirst PlPor = tsOk
    wTiDk := PlPor.TiDk;
  else
    wTiDk := 0;

  result := double(_q.setParam('cKatStroy', p.cKatStroy)
                     .setParam('cPlPor', p.cPlPor)
                     .setParam('cAddSumTune', cell.row.cAddSumTune)
                     .setParam('tidk', wTiDk)
                     .getResultValue);
}

function getSpCashKau(wKau: word; ind: byte): comp;
{
  result := 0;
  if getfirst UsersDoc = tsOk
    if getfirst SpCash = tsOk
      if SpCash.TblOs[ind] = wKau
        result := SpCash.KauOs[ind];
}

function getIGK: comp;
{
  result := getSpCashKau(cgKau_ContractId, 1);
  if result = 0
    result := oExtAttr.coGetAttrId(coKatStroy, _cKatStroy, ATTRNAM_NREC_KATSTROY_IGK);
}

function getRS: comp;
{
  result := getSpCashKau(KODGRKAU_RS, 2);
}

function getAvansOkRasch: comp;
{
  case OborotB.SubSchK of
    '01', '02', '03', '09', '12', '14':
      result := SPKAU_NREC_PRINADL_AVANS_AVANS;
    else
      result := SPKAU_NREC_PRINADL_AVANS_OKRASCH;
  end;
}

procedure createOborot(sum: double);
{
  if getfirst OborotB != tsOk exit;
  if getfirst SoprHozB != tsOk exit;
  ClearBuffer(#Oborot);
  Oborot.TiDk       := PlPor.TiDk;
  Oborot.TiDkGal    := PlPor.TiDkGal;
  Oborot.cSoprDoc   := PlPor.Nrec;
  Oborot.cSoprHoz   := SoprHozB.Nrec;
  Oborot.cPlansSch  := PLANSSCH_NREC_TEHN; //Технический план счетов
  Oborot.Descr      := PlPor.Descr;
  Oborot.DesGr      := PlPor.DesGr;
  Oborot.SchetO     := '35100';
  Oborot.SubOsSch   := '';
  Oborot.TblOs[1]   := cgKau_ContractId; //ИГК
  Oborot.TblOs[2]   := KODGRKAU_RS; //Номер р/с
  Oborot.TblOs[3]   := cgKau_ObjBuild;
  Oborot.TblOs[4]   := cgKau_StZatr;
  Oborot.TblOs[6]   := cgKau_TipOper; //тип операции
  Oborot.KauOs[1]   := getIGK;
  Oborot.KauOs[2]   := getRS;
  Oborot.KauOs[3]   := _cKatStroy;
  Oborot.KauOs[4]   := _cAddSumTune;
  Oborot.KauOs[6]   := cTipOper_Fact;
  Oborot.KodSPO     := 0;
  Oborot.SchetK     := '36200';
  Oborot.SubSchK    := '';
  Oborot.TblKs[1]   := cgKau_KatOrg;
  Oborot.TblKs[2]   := cgKau_Dogovor;
  Oborot.TblKs[3]   := cgKau_ObjBuild;
  Oborot.TblKs[4]   := cgKau_PrinadlAvans;
  Oborot.KauKs[1]   := SoprHozB.cOrg;
  Oborot.KauKs[2]   := SoprHozB.cDogovor;
  Oborot.KauKs[3]   := _cKatStroy;
  Oborot.KauKs[4]   := getAvansOkRasch;
  Oborot.KodSPK     := 0;
  Oborot.DatOb      := PlPor.DatOb;
  Oborot.DataOt     := PlPor.DatVip;
  Oborot.NoDok      := PlPor.NoDok;
  Oborot.SumOb      := sum;
  Oborot.VhProp     := '+';
  Oborot.DBSchetO   := '5100';
  Oborot.KrSchetK   := '6200';
  insert current Oborot;
}

procedure setOborot(cPlPor: comp; cKatStroy: comp; cAddSumTune: comp; sum: double);
{
  _cPlPor      := cPlPor;
  if getfirst PlPor = tsOk
  {
    _cKatStroy   := cKatStroy;
    _cAddSumTune := cAddSumTune;
    if getfirst Oborot = tsOk
    {
      if sum = 0
        delete current Oborot;
      else
        update current Oborot set Oborot.SumOb := sum;
    }
    else if sum != 0
      createOborot(sum);
  }
}

function setValue(cell: PD_ICell; value: variant; context: ObjRef): boolean;
{
  var c: PD_IContext = PD_IContext(context);
  var p: PD_IParams = c.params;
  var r: PD_IRow = PD_IRow(cell.row);

  setOborot(p.cPlPor, p.cKatStroy, r.cAddSumTune, value);

  c.recalcCell(cell);
  c.recalcCell(r.getCell(5));
  c.recalcCell(r.getCell(9));
  c.recalcCell(r.getCell(13));
  c.recalcCell(r.getCell(14));
  c.recalcCell(r.getCell(15));
  c.recalcCell(r.getCell(16));
  c.recalcCell(r.getCell(17));

  if r.parent != nullRef
  {
    c.recalcCell(r.parent.getCell(8));
    c.recalcCell(r.parent.getCell(5));
    c.recalcCell(r.parent.getCell(9));
    c.recalcCell(r.parent.getCell(13));
    c.recalcCell(r.parent.getCell(14));
    c.recalcCell(r.parent.getCell(15));
    c.recalcCell(r.parent.getCell(16));
    c.recalcCell(r.parent.getCell(17));
  }

  result := true;
}

procedure initQuery;
{
  case FormPl.ResWord[1] of
    ForDistr_Mode_St:
    {
      _q := queryManager.createQuery(qValueSt).setParam('cTipOper', cTipOper_Fact);
    }
    ForDistr_Mode_Av:
    {
      var l: longint = 0;
      sqlAddStr(l, qValueAvOk);
      sqlAddStr(l, 'and SubSchK in (''01'',''02'',''03'',''09'',''12'',''14'')');
      _q := queryManager.createQuery(l);
    }
    ForDistr_Mode_Ok:
    {
      var l: longint = 0;
      sqlAddStr(l, qValueAvOk);
      sqlAddStr(l, 'and SubSchK not in (''01'',''02'',''03'',''09'',''12'',''14'')');
      _q := queryManager.createQuery(l);
    }
  end;
}

function initByFormPl(cFormPl: comp): boolean;
{
  result := false;
  _cFormPl := cFormPl;
  if getfirst FormPl != tsOk
    exit;

  initQuery;

  result := _q != nullRef;
}

function setupIfcName: string;
{
  result := 'PD_AGAT::PD_CellSchemaSetup_ForDistr';
}

property name: string read 'К распределению';

end.
