#include PD_Object.vih
#include PD_ICellSchema.vih
#include Query.vih
#include PD_Context.vih
#include PD_CellSchemaBase.vih

#component "PD_AGAT"

vipInterface PD_CellSchema_SqlQuery(PD_CellSchemaBase) implements PD_ICellSchema, PD_InitByFormPl;

interface PD_CellSchema_SqlQuery;

var
  _isEditable: boolean;
  _q: IQuery;

file f;

create view
var
  _cFormPl: comp;
  _cPlPor: comp;
as select
  FormPl.NRec
from
  FormPl
 ,PlPor
where ((
      _cFormPl == FormPl.NRec
  and _cPlPor  == PlPor.Nrec
));

function isEditable(cell: PD_ICell; context: ObjRef): boolean;
{
  #__UNUSED__(cell, context)
  result := _isEditable;
}

function getValue(cell: PD_ICell; context: ObjRef): variant;
{
  var c: PD_IContext = PD_IContext(context);

  var d: date = 0;
  var wTiDk: word = 0;

  _cPlPor := c.params.cPlPor;
  if getfirst PlPor = tsOk
  {
    d := PlPor.DatOb;
    wTiDk := PlPor.TiDk;
  }
  else
  {
    d := Cur_Date;
    wTiDk := 0;
  }

  result := _q.setParam('cKatStroy', c.params.cKatStroy)
              .setParam('cPlPor', c.params.cPlPor)
              .setParam('cAddSumTune', cell.row.cAddSumTune)
              .setParam('date', d)
              .setParam('tidk', wTiDk)
              .getResultValue;
}

function setValue(cell: PD_ICell; value: variant; context: ObjRef): boolean;
{
  #__UNUSED__(context)
  cell.value := value;
  result := true;
}

function initByFormPl(cFormPl: comp): boolean;
{
  result := false;
  _cFormPl := cFormPl;
  if getfirst FormPl != tsOk
    exit;
  _isEditable := FormPl.ResWord[1] = 1;
  if f.OpenMemo(FormPl.Comment)
  {
    var l: longint = 0;
    var s: string = '';
    while not f.EOF
    {
      f.ReadLn(s);
      sqlAddStr(l, s);
    }
    f.Close;
    _q := queryManager.createQuery(l);
  }
  result := _q != nullRef;
}

function setupIfcName: string;
{
  result := 'PD_AGAT::PD_CellSchemaSetup_SqlQuery';
}

property name: string read 'Sql запрос';

end.
