#include PD_ICellSchema.vih

#component "PD_AGAT"

interface PD_EditCellSchemaSetup 'Настройки ячеек', escClose;

var
  _cFormPl: comp;

create view
as select
  FormPl.ResName[19] (fieldname = algNameFld)
from
  FormPl
where ((
  FORMPL_TYPEALG_CELLSCHEMAS == FormPl.TypeAlg
));

parameters _cFormPl;

browse brCellSchemaSetup (,,sci13478Esc);
  table FormPl;
  fields
    FormPl.Name 'Наименование настройки': [20], protect;
    algNameFld 'Алгоритм настройки': [20], protect;
end;

window wEditCellSchemaSetup 'Редактирование настройки' escClose, doAccept;
  show(,,50, 6);
  screen scEditCellSchemaSetup (,,sci1EnEsc);
    table FormPl;
    fields
      FormPl.Name: noprotect;
      algNameFld: protect, pickButton;
    buttons
      cmValue1;
<<

 `Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Алгоритм`    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                                   <. Настройка .>
>>
  end;

  handleevent
    cmValue1:
    {
      var setupIfcName: string = '';
      var schema: PD_InitByFormPl = nullRef;
      if GetVipRef(schema, FormPl.ResName[20])
        setupIfcName := schema.setupIfcName;
      if setupIfcName = ''
        message('Настроек не требуется');
      else
        RunAnyView('INTERFACE ' + setupIfcName + '(' + string(FormPl.Nrec, 0, 0) + ')', true);
    }
    cmPick:
    {
      var s: string = '';
      if runInterface(PD_AGAT::PD_PickCellSchema, s) = cmDefault
      {
        set FormPl.ResName[20] := s;
        var schema: PD_ICellSchema = nullRef;
        if GetVipRef(schema, s)
          set FormPl.ResName[19] := schema.name;
        if FormPl.Name = ''
          set FormPl.Name := FormPl.ResName[19];
        rescanPanel(tnFormPl);
      }
    }
    cmDone: updateTable;
  end;

end;

tableevent table FormPl;
  cmUpdateRecord: update current FormPl;
  cmDeleteRecord: delete current FormPl;
end;

handleevent

  cmInit:
  {
    if _cFormPl != 0
      if getfirst FormPl where ((_cFormPl == FormPl.Nrec)) = tsOk {}
  }

  cmEdit:
  {
    RunWindowModal(wEditCellSchemaSetup);
  }

  cmDefault: putCommand(cmEdit);

  cmInsert:
  {
    clearBuffer(tnFormPl);
    FormPl.TypeAlg := FORMPL_TYPEALG_CELLSCHEMAS;
    insert current FormPl;
    putCommand(cmEdit);
    Stop;
  }


end;

end.

VipInterface UserReport_EditCellSchemaSetup Implements IUserReport licensed(free);
Interface UserReport_EditCellSchemaSetup;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(PD_AGAT::PD_EditCellSchemaSetup, 0);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Настройки алгоритмов ячеек';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := 'Распределение платежей'
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'B_Finans';
    end;
  end;
end.
