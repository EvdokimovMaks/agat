#include PD_Context.vih
#include PD_ObjectRepository.vih
#include PD_RowProvider.vih
#include PD_IIterator.vih
#include PD_Params.vih
#include PD_CalcSession.vih

#component "PD_AGAT"

interface PD_Context;

var
  _colCnt: byte;
  _repo: PD_IObjectRepository;
  _rowProvider: PD_IRowProvider;
  _rows: PD_ObjectList noAuto;
  _rowNames: array[0..0] of string[20]; //массив для быстрого поиска строки по уникальному имени
  _rowStTyp: array[0..0] of string[30]; //массив для быстрого поиска строки по атрибутам Статья+Тип
  _params: PD_IParams noAuto;
  _recalcSession: PD_ICalcSession;

constructor init;
{
  result := false;
}

constructor _PD_Context(colCnt: byte);
{
  _colCnt := colCnt;
  _repo := PD_IObjectRepository(new(PD_ObjectRepository));
  _params := PD_IParams(new(PD_Params, _PD_Object(_repo)));
  _rowProvider := PD_IRowProvider(new(PD_RowProvider, _PD_RowProvider(_params, _repo)));
  result := true;
}

destructor done;
{
  _repo.freeAll;
  _repo := nullRef;
  _rowProvider := nullRef;
  if _rows != nullRef
  {
    _rows.free;
    _rows := nullRef;
  }
  _params := nullRef;
}

function rowById(rowId: longint): PD_IRow;
{
  result := PD_IRow(_repo.get(rowId));
}

function rowByName(fname: string): PD_IRow;
{
  var rowId: longint = FindItem(_rowNames, fname);
  result := if(rowId = -1, nullRef, PD_IRow(_repo.get(rowId)));
}

// function rowByStTipInList(cSt: comp; wTyp: word; l: PD_ObjectList): PD_IRow;
// {
//   result := nullRef;
//   if l = nullRef exit;
//   var i: PD_IIterator = nullRef;
//   for(i := l.iterator; i.hasNext and result = nullRef; i.next)
//   {
//     var r: PD_IRow = PD_IRow(i.get);
//     result := if(r = nullRef, nullRef,
//                  if(r.cAddSumTune = cSt and r.wType = wTyp, r,
//                     rowByStTipInList(cSt, wTyp, r.children)));
//   }
// }

function rowIndexByStTip(cSt: comp; wTyp: word): string;
{
  result := String(cSt,0,0) + wTyp;
}

function rowByStTyp(cSt: comp; wTyp: word): PD_IRow;
{
  // result := rowByStTipInList(cSt, wTyp, rows);
  var rowId: longint = FindItem(_rowStTyp, rowIndexByStTip(cSt, wTyp));
  result := if(rowId = -1, nullRef, PD_IRow(_repo.get(rowId)));
}

function cellValue(rowId: longint; col: byte): variant;
{
  var r: PD_IRow = rowById(rowId);
  result := if(r = nullRef, '', r.getValue(col));
}

//#region Recalc

function initRecalcSession: boolean;
{
  if _recalcSession = nullRef
  {
    _recalcSession := PD_ICalcSession(new(PD_CalcSession));
    result := _recalcSession != nullRef;
  }
  else
    result := false;
}

procedure destroyRecalcSession;
{
  if _recalcSession != nullRef
    freeVipInterface(_recalcSession);
}

procedure recalcCell(r: PD_IRow; col: byte);
{
  if r = nullRef exit;
  var isNewRecalcSessionCreated: boolean = initRecalcSession;
  if not _recalcSession.isCalculated(r.id, col)
  {
    if r.cellSchema(col) != nullRef
      r.setValue(col, r.cellSchema(col).getValue(r, col, PD_IContext(self)));
    else
      r.setValue(col, '');
    _recalcSession.add(r.id, col);
  }
  if isNewRecalcSessionCreated destroyRecalcSession;
}

procedure recalcRow(r: PD_IRow);
{
  if r = nullRef exit;
  var isNewRecalcSessionCreated: boolean = initRecalcSession;
  var i: byte = 0;
  for(i := 1; i <= _colCnt; i++)
    recalcCell(r, i);
  if isNewRecalcSessionCreated destroyRecalcSession;
}

procedure recalcRows(rl: PD_ObjectList);
{
  if rl = nullRef exit;
  var isNewRecalcSessionCreated: boolean = initRecalcSession;
  var it: PD_IIterator = nullRef;
  for(it := rl.iterator; it.hasNext; it.next)
  {
    var r: PD_IRow = PD_IRow(it.get);
    recalcRows(r.children);
    recalcRow(r);
  }
  if isNewRecalcSessionCreated destroyRecalcSession;
}

procedure recalcAll;
{
  recalcRows(rows);
}

//#endregion Recalc

procedure saveRowsIndexes(rowsList: PD_ObjectList);
{
  if rowsList = nullRef exit;
  var iter: PD_IIterator = nullRef;
  for(iter := rowsList.iterator; iter.hasNext; iter.next)
  {
    var r: PD_IRow = PD_IRow(iter.get);
    if r = nullRef continue;
    _rowNames[r.Id] := r.fname;
    _rowStTyp[r.Id] := rowIndexByStTip(r.cAddSumTune, r.wType);
    saveRowsIndexes(r.children);
  }
}

procedure loadRows;
{
  _rows := _rowProvider.rows;
  saveRowsIndexes(_rows);
}

function getRows: PD_ObjectList;
{
  if _rows = nullRef loadRows;
  result := _rows;
}

property repo: PD_IObjectRepository read _repo;
property rowProvider: PD_IRowProvider read _rowProvider;
property rows: PD_ObjectList read getRows;
property params: PD_IParams read _params;
end.
