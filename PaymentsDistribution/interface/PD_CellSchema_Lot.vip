#include PD_Object.vih
#include PD_ICellSchema.vih
#include PD_Context.vih
#include PD_CellSchemaBase.vih
#include PD_FormulaToken.vih

#component "PD_AGAT"


vipInterface PD_CellSchema_Lot(PD_CellSchemaBase) implements PD_ICellSchema, PD_InitByFormPl;
public:
  procedure PD_IObject.free;
end;

interface PD_CellSchema_Lot;

var
  _isEditable  : boolean;
  _cFormPl     : comp;
  _sFormula    : string;
  _token       : PD_IFormulaToken;
  _parser      : PD_FormulaParser;

create view
as select
  FormPl.NRec
from
  FormPl
where ((
  _cFormPl == FormPl.NRec
));

function isEditable(cell: PD_ICell; context: ObjRef): boolean;
{
  #__UNUSED__(cell, context)
  result := _isEditable;
}

function token: PD_IFormulaToken;
{
  if _token = nullRef
    _token := _parser.parse(_sFormula);
  result := _token;
}

function getValue(cell: PD_ICell; context: ObjRef): variant;
{
  var err: string = '';
  result := LotExpressionFunc(token.value(cell, PD_IContext(context)), err);
  if err != ''
    result := err;
  // result := parseFormula(cell, PD_IContext(context));
}

function setValue(cell: PD_ICell; value: variant; context: ObjRef): boolean;
{
  #__UNUSED__(context)
  cell.value := value;
  result := true;
}

function initByFormPl(cFormPl: comp): boolean;
{
  result := true;

  _cFormPl := cFormPl;

  if getfirst FormPl != tsOk
    exit;

  _isEditable := FormPl.ResWord[1] = 1;

  _sFormula := FormPl.ResName[1] + FormPl.ResName[2] + FormPl.ResName[3];
}

function setupIfcName: string;
{
  result := 'PD_AGAT::PD_CellSchemaSetup_Lot';
}

procedure PD_IObject.free;
{
  if _token != nullRef
  {
    _token.free;
    _token := nullRef;
  }
  _parser := nullRef;
  inherited::free;
}

property name: string read 'Выражение Lot';

end.
