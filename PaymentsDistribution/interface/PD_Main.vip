#include PD_Context.vih
#include PD_Row.vih
#include PD_ObjectList.vih
#include PD_IIterator.vih
#include Agat_BaseDoc_Ree.vih
#include PD_Redistribute.vih
#include ExtAttr.vih

#component "PD_AGAT"

interface PD_Main 'Распределение входящих платежей' escClose;

table struct TmpData (
  Nrec   : comp,
  cParent: comp,
  cFormPl: comp,
  Name   : string[80],
  Code   : string[20],
  Npp    : string[20],
  Clr    : array[0..17] of word,
  RowId  : longint
) with index (
  i01 = Nrec (unique, surrogate)
 ,i02 = cParent + Npp
);

var
  _context: PD_IContext;
  _cKatStroy: comp;
  _cKatStroyKredit: comp;
  _flags: word;
  _cPlPor: comp;
  _cPlPorKredit:comp;
  _cParent: comp;
  #include ExtAttr.var;

create view
as select
  double(_context.cellValue(TmpData.RowId, 1))  (fieldname = vFld1)
 ,double(_context.cellValue(TmpData.RowId, 2))  (fieldname = vFld2)
 ,double(_context.cellValue(TmpData.RowId, 3))  (fieldname = vFld3)
 ,double(_context.cellValue(TmpData.RowId, 4))  (fieldname = vFld4)
 ,double(_context.cellValue(TmpData.RowId, 5))  (fieldname = vFld5)
 ,double(_context.cellValue(TmpData.RowId, 6))  (fieldname = vFld6)
 ,double(_context.cellValue(TmpData.RowId, 7))  (fieldname = vFld7)
 ,double(_context.cellValue(TmpData.RowId, 8))  (fieldname = vFld8)
 ,double(_context.cellValue(TmpData.RowId, 9))  (fieldname = vFld9)
 ,double(_context.cellValue(TmpData.RowId, 10)) (fieldname = vFld10)
 ,double(_context.cellValue(TmpData.RowId, 11)) (fieldname = vFld11)
 ,double(_context.cellValue(TmpData.RowId, 12)) (fieldname = vFld12)
 ,double(_context.cellValue(TmpData.RowId, 13)) (fieldname = vFld13)
 ,double(_context.cellValue(TmpData.RowId, 14)) (fieldname = vFld14)
 ,double(_context.cellValue(TmpData.RowId, 15)) (fieldname = vFld15)
 ,double(_context.cellValue(TmpData.RowId, 16)) (fieldname = vFld16)
 ,double(_context.cellValue(TmpData.RowId, 17)) (fieldname = vFld17)
from
  TmpData
 ,TmpData TmpData1
where ((
  _cParent == TmpData.cParent
));

parameters _cKatStroy, _cPlPor, _cKatStroyKredit, _cPlPorKredit, _flags;

create view vComment
var
  _cKS      : comp;
  _cRow     : comp;
  _colIndex : comp;
as select
  PD_Comment.Nrec
from
  PD_Comment
where ((
      _cRow      == PD_Comment.cRow
  and _cKS       == PD_Comment.cKatStroy
  and _colIndex  == PD_Comment.ColIndex
));
function isCommented(cRow: comp; colIndex: word): boolean;
{
  vComment._cRow := cRow;
  vComment._colIndex := colIndex;
  result := vComment.getfirst PD_Comment = tsOk;
}

function getFontBackColor(cRow: comp; colIndex: word): word;
{
  result := if(isCommented(cRow, colIndex), ColorSysYellow, 0);
}

procedure refreshRowClr(var buf: Type$TmpData);
{
  var i: byte = 0;
  for(i := 0; i <= 17; i++)
    buf.Clr[i] := getFontBackColor(buf.cFormPl, i);
}

function getColByFld(f: longint): byte;
{
  result := case(f;
                 #vFld1 : 1 ,
                 #vFld2 : 2 ,
                 #vFld3 : 3 ,
                 #vFld4 : 4 ,
                 #vFld5 : 5 ,
                 #vFld6 : 6 ,
                 #vFld7 : 7 ,
                 #vFld8 : 8 ,
                 #vFld9 : 9 ,
                 #vFld10: 10,
                 #vFld11: 11,
                 #vFld12: 12,
                 #vFld13: 13,
                 #vFld14: 14,
                 #vFld15: 15,
                 #vFld16: 16,
                 #vFld17: 17;
                 0);
}

procedure loadData(rows: PD_ObjectList; cPrnt: comp);
{
  if rows = nullRef exit;
  var it: PD_IIterator = nullRef;
  for(it := rows.iterator; it.hasNext; it.next)
  {
    var r: PD_IRow = PD_IRow(it.get);
    if r = nullRef continue;
    ClearBuffer(#TmpData1);
    TmpData1.cParent := cPrnt;
    TmpData1.cFormPl := r.nrec;
    TmpData1.Name    := r.name;
    TmpData1.Code    := r.code;
    TmpData1.Npp     := LPadCh(Trim(r.npp), '0', 20);
    TmpData1.RowId   := r.id;
    refreshRowClr(TmpData1.buffer);
    insert current TmpData1;
    loadData(r.children, TmpData1.Nrec);
  }
}

procedure setCellValue(r: PD_IRow; col: byte; v: variant);
{
  if r = nullRef or col = 0 exit;
  var cellSchema: PD_ICellSchema = r.cellSchema(col);
  if cellSchema != nullRef
  {
    if cellSchema.isEditable(r, col, _context)
      cellSchema.setValue(r, col, v, _context)
    else
      message('Установлен запрет на редактирование ячейки', warning);
  }
  else
    r.setValue(col, v);
  rescanPanel(#TmpData);
}

procedure setCellDoubleValue(r: PD_IRow; col: byte; v: double);
{
  setCellValue(r, col, v);
}

procedure recalcAll;
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Расчет', 0);
  _context.recalcAll;
  StopVisual('', 0);
}

#declare fnt(col)
{font = {backColor = TmpData.Clr[#col];}}
#end

tree trData (,,Sci14EscTreeI);
  table TmpData;
  fields
    {font = {bold = not TreeIsTerminal(trData); }};
    TmpData.Name 'Статья': [20], protect, #fnt(0);
    TmpData.Code 'Код': [5], protect, noAutoSize;
    vFld1  '1 ','Суммы по','структуре','цены':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(1);
    vFld2  '2 ','Ранее получено','на общий счет /','перераспределение','между статьями':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(2);
    vFld3  '3 ','Суммы по','заключенным','расх.договорам':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(3);
    vFld4  '4 ','Оплачено по','договорам','с расчетных счетов','':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(4);
    vFld5  '5 ','К оплате:','Суммы по','заключенным','расх.договорам':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(5);
    vFld6  '6 ','К оплате:','Кредиторская','задолженность':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(6);
    vFld7  '7 ','Факт распределения','средств за','пред.период':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(7);
    vFld8  '8 ','К','распределению':
      [10,'\2p[|-]366`666`666`666`666.88'], noprotect, #fnt(8);
    vFld9  '9 ','Итого','с учетом','распределения':
     [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(9);
    vFld10 '10','Факт','','':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(10);
    vFld11 '11','Резерв','','':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, editButton, #fnt(11);
    vFld12 '12','Реестр','','':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(12);
    vFld13 '13','Итого','','':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(13);
    vFld14 '14','Свободный','остаток','ден.средств':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(14);
    vFld15 '15','Остаток ДС','для распр. по','структуре цены':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(15);
    vFld16 '16','Остаток ДС для распр. по','стр.цены с учетом','ф.выплат до момента','пост.средств на отд р/с':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(16);
    vFld17 '17','Остаток','к поступлению','':
      [10,'\2p[|-]366`666`666`666`666.88'], protect, #fnt(17);
end;

tableevent table TmpData;
  cmTreeTop:
    _cParent := 0;

  cmTreeUp:
    _cParent := TmpData.cParent;

  cmTreeDown:
    _cParent := TmpData.Nrec;

  cmTreeNodeType:
    if TreeIsTerminal(trData)
        TreeSetNodeType(trData, ntfText);

  cmTreeNeedOwner:
    TreeJumpToRecord(trData, TmpData.cParent);
end;

handleevent

  cmInit:
  {
    _context := PD_IContext(new(PD_Context, _PD_Context(17)));

    var p: PD_IParams = _context.params;
    p.cKatStroy := _cKatStroy;
    p.cKatStroyKredit := _cKatStroyKredit;
    p.flags := _flags;
    p.cPlPor := _cPlPor;
    p.cPlPorKredit := _cPlPorKredit;
    if RunInterface(PD_AGAT::PD_ParamsView, p) != cmDefault {abort; FreeVipInterface(_context); exit;}

    SetEnableCommand(cmValue4, (p.flags and flagShowKred) > 0);

    vComment._cKS := p.cKatStroy;

    SetWindowTitle(wnMainWindow,
                   'Распределение платежей ' +
                   ShowKau(cgKau_ObjBuild, p.cKatStroy) + ' ' +
                   ShowKau(cgKau_PlPor, p.cPlPor) + ' ' +
                   ShowKau(cgKau_Persons, oExtAttr.coGetAttrId(coKatStroy, p.cKatStroy, ATTRNAM_NREC_KATSTROY_PERSON))
                  );

    StartNewVisual(vtRotateVisual, vfTimer, 'Инициализация', 0);
    loadData(_context.rows, 0);
    StopVisual;

    recalcAll;

    if TreeGetFirstEx(trData) do {
      if not TreeIsTerminal(trData) TreeOpenNode(trData);
    } while TreeGetNextEx(trData);
    TreeGetFirstEx(trData);

    RereadRecord(#TmpData);
  }

  cmExprFieldChanged:
  {
    setCellDoubleValue(_context.rowById(TmpData.RowId), getColByFld(curField), double(ExprFieldValue));
  }

  cmDone:
  {
    var p: PD_IParams = _context.params;
    SaveMyDsk(p.cKatStroy, 'PD_cKatStroy');
    SaveMyDsk(p.cKatStroyKredit, 'PD_cKatStroyKredit');
    SaveMyDsk(p.cPlPor, 'PD_cPlPor');
    SaveMyDsk(p.cPlPorKredit, 'PD_cPlPorKredit');
    SaveMyDsk(p.flags, 'PD_flags');

  }

  cmOnVipUnLoad:
  {
    _context := nullRef;
  }

  cmEdit:
  {
    var r: PD_IRow = PD_IRow(_context.repo.get(TmpData.RowId));
    if r != nullRef
      if r.cAddSumTune != 0
      {
        RunInterface(PD_AGAT::PD_MainDistrReserve,
                     if(r.isKredit, _context.params.cKatStroyKredit, _context.params.cKatStroy),
                     r.cAddSumTune);
        recalcAll;
        RereadRecord(#TmpData);
      }
  }

  cmHotKeys:
  {
    PutHotCommand(RunMenu('PD_AGAT::mnuPD_Main'));
  }

  cmOpenFile:
  {
    recalcAll;
    RereadRecord(#TmpData);
  }

  cmValue1: //ДО по заказу
  {
    RunInterface(AGAT::AGAT_BASEDOC_REE_BYZAKAZ, _context.params.cKatStroy, 400056A46A9AD669h);
    recalcAll;
    RereadRecord(#TmpData);
  }

  cmValue2: //Настройка ячейки
  {
    if getColByFld(curField) = 0 exit;

    var r: PD_IRow = PD_IRow(_context.repo.get(TmpData.RowId));
    if r = nullRef exit;

    var cellSchema: PD_ICellSchema = r.cellSchema(getColByFld(curField));
    if cellSchema = nullRef exit;

    _try
    {
      var initByFormPl: PD_InitByFormPl = PD_InitByFormPl(cellSchema);
      if initByFormPl.setupIfcName = ''
        message(cellSchema.Name + ': Настроек не требуется');
      else
        RunAnyView('INTERFACE ' + initByFormPl.setupIfcName + '(' + string(initByFormPl.cSetupFormPl, 0, 0) + ', True)', true);
    }
    _except
      on ExObjIfcNoImpl: { message(cellSchema.Name + ': Не имеет настроек'); exit; }
  }

  cmValue3: //Перераспределение сумм на статьях основного заказа
  {
    var criteria: PD_CriteriaRowsForRedistr noAuto;
    criteria := new(PD_CriteriaRowsForRedistr, _PD_CriteriaRowsForRedistr(_context, false));
    var rows: PD_ObjectList noAuto;
    rows := criteria.meetCriteria(_context.rows);
    var redistrRowsProvider: PD_RedistrRowsProvider;
    var redistrRows: PD_ObjectList noAuto;
    redistrRows := redistrRowsProvider.redistrRows(rows, 14, _context.params.cKatStroy);
    if RunInterface(PD_AGAT::PD_RedistrRowsManyToOne, redistrRows, Cur_Date) = cmDefault
    {
      recalcAll;
      RereadRecord(#TmpData);
    }
    FreeVipInterface(criteria);
  }

  cmValue4: //Перераспределение сумм на статьях кредитного заказа
  {
    if _context.params.cKatStroyKredit = 0 exit;

    var criteria: PD_CriteriaRowsForRedistr noAuto;
    criteria := new(PD_CriteriaRowsForRedistr, _PD_CriteriaRowsForRedistr(_context, true));
    var rows: PD_ObjectList noAuto;
    rows := criteria.meetCriteria(_context.rows);
    var redistrRowsProvider: PD_RedistrRowsProvider;
    var redistrRows: PD_ObjectList noAuto;
    redistrRows := redistrRowsProvider.redistrRows(rows, 14, _context.params.cKatStroyKredit);
    if RunInterface(PD_AGAT::PD_RedistrRowsManyToOne, redistrRows, Cur_Date) = cmDefault
    {
      recalcAll;
      RereadRecord(#TmpData);
    }
    FreeVipInterface(criteria);
  }

  cmPickClass: //Комментарий
  {
    if CurTable = #TmpData
    {
      RunInterface(PD_AGAT::PD_EditComment, _context.params.cKatStroy, TmpData.cFormPl, getColByFld(curField));
      refreshRowClr(TmpData.Buffer);
      update current TmpData
    }
    rescanPanel(tnTmpData);
  }

  cmDefault:
  {
    if CurField != #vFld8
      PutCommand(cmEdit);
  }

end;


end.

mnuPD_Main menu
{
- 'Обновить', cmOpenFile, 'Пересчитать суммы', , 'Alt+R', kbAltR, sci1Esc;
- 'Комментарий', cmPickClass, 'Установить комментарий к ячейке', , 'Alt+C', kbAltC, sci1Esc;
- 'ДО по заказу', cmValue1;
- 'Настройка ячейки', cmValue2;
- 'Перераспределение сумм на статьях основного заказа', cmValue3;
- 'Перераспределение сумм на статьях кредитного заказа', cmValue4;
}


VipInterface UserReport_Main Implements IUserReport licensed(free);
Interface UserReport_Main;
  create view dummy;
  procedure Run;
  begin
    var cKatStroy, cKatStroyKredit, cPlPor, cPlPorKredit: comp = 0;
    var flags: word = 0;
    ReadMyDsk(cKatStroy, 'PD_cKatStroy', false);
    ReadMyDsk(cKatStroyKredit, 'PD_cKatStroyKredit', false);
    ReadMyDsk(cPlPor, 'PD_cPlPor', false);
    ReadMyDSK(cPlPorKredit, 'PD_cPlPorKredit', true);
    if not ReadMyDsk(flags, 'PD_flags', false) flags := flagShowOsn + flagShowKred + flagShowItog;
    runinterfacenomodal(PD_AGAT::PD_Main, cKatStroy, cPlPor, cKatStroyKredit, cPlPorKredit, flags);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Распределение платежей';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := 'Распределение платежей'
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'B_Finans';
    end;
  end;
end.
