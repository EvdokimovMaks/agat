#include PD_RowProvider.vih
#include PD_Row.vih
#include PD_RowSchemaProvider.vih
#include PD_Params.vih

#component "PD_AGAT"

interface PD_RowProvider;

var
  _rowSchemaProvider: PD_RowSchemaProvider;
  _params: PD_IParams;

create view
var
  _cGroup: comp;
  _cFormPl: comp;
as select
  FormPl.Nrec
from
  FormPl
 ,FormPl FormPlByNrec
where ((
      FORMPL_TYPEALG_ROWS == FormPl.TypeAlg
  and _cGroup             == FormPl.cGroup
  and _cFormPl            == FormPlByNrec.Nrec
));

constructor _PD_RowProvider(params: PD_IParams; repo: PD_IObjectRepository);
{
  _params := params;
  result := _PD_Object(repo);
}

procedure addRows(l: PD_ObjectList; parentRow: PD_IRow; cGr: comp);
{
  _cGroup := cGr;
  var m: TPtr = initMarker('', 8, 10, 100, true);
  _loop FormPl
  {
    if (FormPl.ResWord[1] = 0 and ((_params.flags and flagShowOsn) = flagShowOsn)) or
       (FormPl.ResWord[1] = 1 and ((_params.flags and flagShowKred) = flagShowKred)) or
       (FormPl.ResWord[1] = 2 and ((_params.flags and flagShowItog) = flagShowItog))
      insertMarker(m, FormPl.Nrec);
  }

  var i: longint = 0;
  for(i := 0; getMarker(m, i, _cFormPl); i++)
    if getfirst FormPlByNrec = tsOk
    {
      var row: PD_IRow;
      row := PD_IRow(new(PD_Row, _PD_Object(repository)));
      row.nrec        := _cFormPl;
      row.parent      := parentRow;
      row.Name        := FormPlByNrec.Name;
      row.code        := FormPlByNrec.ResCode[1];
      row.npp         := FormPlByNrec.Razdel;
      row.fname       := FormPlByNrec.ResCode[2];
      row.cAddSumTune := FormPlByNrec.ResComp[1];
      row.wType       := FormPlByNrec.ResWord[1];
      row.schema      := _rowSchemaProvider.rowSchema(FormPlByNrec.ResComp[2]);
      l.add(row);
      addRows(row.children, row, _cFormPl);
    }

  doneMarker(m, '');
}

function rows: PD_ObjectList;
{
  var l: PD_ObjectList noAuto;
  l := new(PD_ObjectList, _PD_Object(repository));
  addRows(l, nullRef, 0);
  result := l;
}

end.
