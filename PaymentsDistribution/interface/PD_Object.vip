#include PD_Object.vih
#include PD_IObjectRepository.vih
#component "PD_AGAT"

interface PD_Object;

var
  __id__: longint;
  __repository__: PD_IObjectRepository noAuto;

constructor Init;
{
//  if getVipRef(__repository__, 'PD_AGAT::PD_ObjectRepository')
//    __id__ := __repository__.add(PD_IObject(self));
//  result := __id__ != 0;
  result := false;
}

constructor _PD_Object(repo: PD_IObjectRepository);
{
  __repository__ := repo;
  __id__ := __repository__.add(PD_IObject(self));
  result := __id__ != 0;
}

destructor done;
{
  #ifdef Debug
  logstrtofile('log.txt', 'destructor done: ' + VipFullName(self));
  #end
}

procedure free;
{
  #ifdef Debug
  logstrtofile('log.txt', 'free: ' + __id__ + ' ' + VipFullName(self));
  #end
  __repository__ := nullRef;
  __id__ := 0;
}

procedure freeDependency(var r: ObjRef);
{
  if r = nullRef exit;
  //PD_IObject(r).free;
  r := nullRef;
}

property id: longint absolute __id__;
property repository: PD_IObjectRepository read __repository__;

handleevent
  cmOnVipUnLoad:
  {
    #ifdef Debug
    logstrtofile('log.txt', 'cmOnVipUnLoad: ' + VipFullName(self));
    #end
  }
  cmOnVipFree:
  {
    #ifdef Debug
    logstrtofile('log.txt', 'cmOnVipFree: ' + VipFullName(self));
    #end
  }
end;

end.
