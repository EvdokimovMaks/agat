#include PD_Row.vih

#component "PD_AGAT"

interface PD_Row;

var
  _parent: PD_IRow noAuto;
  _nrec: comp;
  _name: string;
  _code: string[40];
  _npp: string[20];
  _fname: string[20];
  _wType: word;
  _cAddSumTune: comp;
  _children: PD_ObjectList noAuto;
  _schema: PD_IRowSchema;
  _values: Array [1..100] of variant;
  _cellSchema: Array[1..100] of PD_ICellSchema;

constructor _PD_Object(repo: PD_IObjectRepository);
{
  result := inherited::_PD_Object(repo);
  _children := new(PD_ObjectList, _PD_Object(repo));
}

function setValue(col: byte; value: variant): boolean;
{
  _values[col] := value;
  result := true;
}

function getValue(col: byte): variant;
{
  result := _values[col];
}

function cellSchema(col: byte): PD_ICellSchema;
{
  result := _cellSchema[col]; //if(_schema = nullRef, nullRef, _schema.cellSchema(col));
}

procedure PD_IObject.free;
{
  inherited::free;
  var i: byte;
  for(i := 1; i <= 20; i++) _cellSchema[i] := NullRef;
  setLimit(_cellSchema, 0);
  freeDependency(_children);
  freeDependency(_schema);
  freeDependency(_parent);
}

function isKredit: boolean;
{
  result := _wType = 1;
}

function isItog: boolean;
{
  result := _wType = 2;
}

procedure setCellSchemas;
{
  var i: byte = 0;
  for(i := 1; i <= 100; i++)
    _cellSchema[i] := _schema.cellSchema(i);
}

procedure setRowSchema(value: PD_IRowSchema);
{
  _schema := value;
  if _schema != nullRef
    setCellSchemas;
}

property nrec: comp absolute _nrec;
property parent: PD_IRow absolute _parent;
property name: string absolute _name;
property code: string[40] absolute _code;
property npp: string[20] absolute _npp;
property fname: string[20] absolute _fname;
property cAddSumTune: comp absolute _cAddSumTune;
property children: PD_ObjectList read _children;
property schema: PD_IRowSchema read _schema write setRowSchema(result);
property wType: word absolute _wType;

end.
