#include PD_Object.vih
#include PD_ICellSchema.vih
#include Query.vih
#include PD_Context.vih
#include PD_CellSchemaBase.vih
#include ExtAttr.vih

#component "PD_AGAT"

vipInterface PD_CellSchema_ForDistr(PD_CellSchemaBase) implements PD_ICellSchema, PD_InitByFormPl;

interface PD_CellSchema_ForDistr;

const
  ForDistr_Mode_St: word = 0;
  ForDistr_Mode_Av: word = 1;
  ForDistr_Mode_Ok: word = 2;
  ForDistr_Mode_Residual: word = 3;
  cTipOper_Fact   : comp = 000100000000186Fh;
end;

var
  _q: IQuery;
  #include ExtAttr.var

create view
var
  _cFormPl    : comp;
  _cPlPor     : comp;
  _cKatStroy  : comp;
  _cAddSumTune: comp;
as select
  FormPl.NRec
from
  FormPl
 ,PlPor
 ,Oborot
 ,Oborot OborotB
 ,SoprHoz SoprHozB
 ,UsersDoc
 ,SpCash
where ((
      _cFormPl == FormPl.NRec

  and _cPlPor  == PlPor.Nrec

  and PlPor.TiDk         == Oborot.TiDk
  and PlPor.Nrec         == Oborot.cSoprDoc
  and PLANSSCH_NREC_TEHN == Oborot.cPlansSch
  and (Oborot.SchetO      = '35100'
  and  Oborot.SchetK      = '36200'
  and  Oborot.DatOb      <> 0
  and  Oborot.KauOs[3]    = _cKatStroy
  and  Oborot.KauKs[3]    = _cKatStroy
  and  Oborot.KauOs[4]    = _cAddSumTune
  and  Oborot.KauOs[6]    = cTipOper_Fact)

  and PlPor.tidkgal      == UsersDoc.TipGal
  and PlPor.TiDk         == UsersDoc.TipUsers
  and UsersDoc.cCashBank == SpCash.cCashBank
  and PLANSSCH_NREC_2013 == SpCash.cPlansSch
))

bounds OborotB_Os =
      PlPor.TiDk         == OborotB.TiDk
  and PlPor.Nrec         == OborotB.cSoprDoc
  and (
        OborotB.DatOb <> 0 and
        OborotB.SchetO = '851' and OborotB.KauOs[4] = _cKatStroy and
        OborotB.SchetK = '862' and OborotB.KauKs[3] = _cKatStroy
      )
  and OborotB.cSoprHoz   == SoprHozB.Nrec

bounds OborotB_OsProch =
      PlPor.TiDk         == OborotB.TiDk
  and PlPor.Nrec         == OborotB.cSoprDoc
  and (
        OborotB.DatOb    <> 0 and
        OborotB.SchetK    = '30000' and OborotB.KauKs[3] = _cKatStroy
      )
  and OborotB.cSoprHoz   == SoprHozB.Nrec

bounds OborotB_Kr =
      PlPor.TiDk         == OborotB.TiDk
  and PlPor.Nrec         == OborotB.cSoprDoc
  and (OborotB.SchetO     = '851'
  and  (OborotB.SchetK = '866' or OborotB.SchetK = '867')
  and  OborotB.DatOb     <> 0
  and  OborotB.KauOs[4]   = _cKatStroy)
  and OborotB.cSoprHoz   == SoprHozB.Nrec
;

sql query qValueSt =
  select
    sum(SumOb): double
  from Oborot
  where
    TiDk = :tidk and cSoprDoc = :cPlPor and
    SchetO = '35100' and SchetK = '36200' and
    KauKs[3] = :cKatStroy and KauOs[3] = :cKatStroy and
    DatOb <> 0 and
    KauOs[4] = :cAddSumTune and
    KauOs[6] = :cTipOper
;

sql query qValueAv =
  select
    sum(SumOb): double
  from (
    select SumOb
    from Oborot
    where
      TiDk = :tidk and cSoprDoc = :cPlPor and DatOb <> 0 and
      SchetO = '851' and KauOs[4] = :cKatStroy and
      SchetK = '862' and SubSchK in ('01','02','03','09','12','14') and KauKs[3] = :cKatStroy
  ) t
;

sql query qValueOk =
  select
    sum(SumOb): double
  from (
    select SumOb
    from Oborot
    where
      TiDk = :tidk and cSoprDoc = :cPlPor and DatOb <> 0 and
      SchetO = '851' and KauOs[4] = :cKatStroy and
      SchetK = '862' and SubSchK not in ('01','02','03','09','12','14') and KauKs[3] = :cKatStroy
    union all
    select SumOb
    from Oborot
    join KatStroy on KatStroy.Nrec = :cKatStroy
    where
      TiDk = :tidk and cSoprDoc = :cPlPor and DatOb <> 0 and
      SchetK = '30000' and KauKs[3] = :cKatStroy and
      KatStroy.Name like '%/Прочие_доходы'
  ) t
;

sql query qValueResidual =
    select sum(SumOb)
    from (
      select SumOb as SumOb: double
      from Oborot
      where
        TiDk = :tidk and cSoprDoc = :cPlPor and DatOb <> 0 and
        SchetO = '851' and KauOs[4] = :cKatStroy and
        SchetK = '862' and KauKs[3] = :cKatStroy
      union all
      select SumOb
      from Oborot
      join KatStroy on KatStroy.Nrec = :cKatStroy
      where
        TiDk = :tidk and cSoprDoc = :cPlPor and DatOb <> 0 and
        SchetK = '30000' and KauKs[3] = :cKatStroy and
        KatStroy.Name like '%/Прочие_доходы'
      union all
      select -SumOb
      from Oborot
      where
        TiDk = :tidk and cSoprDoc = :cPlPor and DatOb <> 0 and
        SchetO = '35100' and KauOs[6] = :cTipOper and
        SchetK = '36200' and KauKs[3] = :cKatStroy and KauOs[3] = :cKatStroy
    ) t
;

function isEditable(row: PD_IRow; col: byte; context: PD_IContext): boolean;
{
  #__UNUSED__(row, col)
  var p: PD_IParams = context.params;
  result := FormPl.ResWord[1] = ForDistr_Mode_St and
            if(row.isKredit, p.cPlPorKredit != 0, p.cPlPor != 0);
}

function getValue(row: PD_IRow; col: byte; context: PD_IContext): variant;
{
  #__UNUSED__(col)
  var p: PD_IParams = context.params;

  var wTiDk: word = 0;

  _cPlPor := if(row.isKredit, p.cPlPorKredit, p.cPlPor);
  if getfirst PlPor = tsOk
    wTiDk := PlPor.TiDk;
  else
    wTiDk := 0;

  var cKs: comp = if(row.isKredit, p.cKatStroyKredit, p.cKatStroy);

  _q.setParam('cKatStroy', cKs)
    .setParam('cPlPor', _cPlPor)
    .setParam('cAddSumTune', row.cAddSumTune)
    .setParam('tidk', wTiDk);
  result := double(_q.getResultValue);
}

function getSpCashKau(wKau: word; ind: byte): comp;
{
  result := 0;
  if getfirst UsersDoc = tsOk
    if getfirst SpCash = tsOk
      if SpCash.TblOs[ind] = wKau
        result := SpCash.KauOs[ind];
}

function getIGK: comp;
{
  result := getSpCashKau(cgKau_ContractId, 1);
  if result = 0
    result := oExtAttr.coGetAttrId(coKatStroy, _cKatStroy, ATTRNAM_NREC_KATSTROY_IGK);
}

function getRS: comp;
{
  result := getSpCashKau(KODGRKAU_RS, 2);
}

function getAvansOkRasch: comp;
{
  result := if(
    OborotB.SchetK = '862',
    case (
      OborotB.SubSchK;
      '01': SPKAU_NREC_PRINADL_AVANS_AVANS,
      '02': SPKAU_NREC_PRINADL_AVANS_AVANS,
      '03': SPKAU_NREC_PRINADL_AVANS_AVANS,
      '09': SPKAU_NREC_PRINADL_AVANS_AVANS,
      '12': SPKAU_NREC_PRINADL_AVANS_AVANS,
      '14': SPKAU_NREC_PRINADL_AVANS_AVANS;
      SPKAU_NREC_PRINADL_AVANS_OKRASCH
    ),
    SPKAU_NREC_PRINADL_AVANS_OKRASCH
  );
}

function isKatStroyProchieDohodi: boolean;
{
  var sKatStroy: string = if(GetAnyKau(cgAkSimple, cgKau_ObjBuild, _cKatStroy), GivenAnName(cgAnName), '');
  result := sKatStroy like '%/Прочие_доходы';
}

function findSoprHozB(isKredit: boolean): boolean;
{
  if isKredit
  {
    if BoundActive(tbOborotB_Os) SubBounds(tbOborotB_Os);
    if BoundActive(tbOborotB_OsProch) SubBounds(tbOborotB_OsProch);
    if not BoundActive(tbOborotB_Kr) AddBounds(tbOborotB_Kr);
  }
  else
  {
    if BoundActive(tbOborotB_Kr) SubBounds(tbOborotB_Kr);
    if isKatStroyProchieDohodi
    {
      if not BoundActive(tbOborotB_Os) SubBounds(tbOborotB_Os);
      if not BoundActive(tbOborotB_OsProch) AddBounds(tbOborotB_OsProch);
    }
    else
    {
      if BoundActive(tbOborotB_OsProch) SubBounds(tbOborotB_OsProch);
      if not BoundActive(tbOborotB_Os) AddBounds(tbOborotB_Os);
    }
  }
  if getfirst OborotB != tsOk
    result := false;
  else
    result := getfirst SoprHozB = tsOk;
}

procedure createOborot(sum: double; isKredit: boolean);
{
  if not findSoprHozB(isKredit) exit;

  ClearBuffer(#Oborot);
  Oborot.TiDk       := PlPor.TiDk;
  Oborot.TiDkGal    := PlPor.TiDkGal;
  Oborot.cSoprDoc   := PlPor.Nrec;
  Oborot.cSoprHoz   := SoprHozB.Nrec;
  Oborot.cPlansSch  := PLANSSCH_NREC_TEHN; //Технический план счетов
  Oborot.Descr      := PlPor.Descr;
  Oborot.DesGr      := PlPor.DesGr;
  Oborot.SchetO     := '35100';
  Oborot.SubOsSch   := '';
  Oborot.TblOs[1]   := cgKau_ContractId; //ИГК
  Oborot.TblOs[2]   := KODGRKAU_RS; //Номер р/с
  Oborot.TblOs[3]   := cgKau_ObjBuild;
  Oborot.TblOs[4]   := cgKau_StZatr;
  Oborot.TblOs[6]   := cgKau_TipOper; //тип операции
  Oborot.KauOs[1]   := getIGK;
  Oborot.KauOs[2]   := getRS;
  Oborot.KauOs[3]   := _cKatStroy;
  Oborot.KauOs[4]   := _cAddSumTune;
  Oborot.KauOs[6]   := cTipOper_Fact;
  Oborot.KodSPO     := 0;
  Oborot.SchetK     := '36200';
  Oborot.SubSchK    := '';
  Oborot.TblKs[1]   := cgKau_KatOrg;
  Oborot.TblKs[2]   := cgKau_Dogovor;
  Oborot.TblKs[3]   := cgKau_ObjBuild;
  Oborot.TblKs[4]   := cgKau_PrinadlAvans;
  Oborot.KauKs[1]   := SoprHozB.cOrg;
  Oborot.KauKs[2]   := SoprHozB.cDogovor;
  Oborot.KauKs[3]   := _cKatStroy;
  Oborot.KauKs[4]   := getAvansOkRasch;
  Oborot.KodSPK     := 0;
  Oborot.DatOb      := PlPor.DatOb;
  Oborot.DataOt     := PlPor.DatVip;
  Oborot.NoDok      := PlPor.NoDok;
  Oborot.SumOb      := sum;
  Oborot.VhProp     := '+';
  Oborot.DBSchetO   := '5100';
  Oborot.KrSchetK   := '6200';
  insert current Oborot;
}

procedure setOborot(cPlPor: comp; cKatStroy: comp; cAddSumTune: comp; sum: double; isKredit: boolean);
{
  _cPlPor      := cPlPor;
  if getfirst PlPor = tsOk
  {
    _cKatStroy   := cKatStroy;
    _cAddSumTune := cAddSumTune;
    if getfirst Oborot = tsOk
    {
      if sum = 0
        delete current Oborot;
      else
        update current Oborot set Oborot.SumOb := sum;
    }
    else if sum != 0
      createOborot(sum, isKredit);
  }
}

function setValue(row: PD_IRow; col: byte; value: variant; context: PD_IContext): boolean;
{
  #__UNUSED__(col)

  var p: PD_IParams = context.params;

  setOborot(if(row.isKredit, p.cPlPorKredit, p.cPlPor),
            if(row.isKredit, p.cKatStroyKredit, p.cKatStroy),
            row.cAddSumTune,
            value,
            row.isKredit);

  context.recalcRow(row);

  if row.parent != nullRef
    context.recalcRow(row.parent);

  result := true;
}

procedure initQuery;
{
  case FormPl.ResWord[1] of
    ForDistr_Mode_St      : _q := queryManager.createQuery(qValueSt).setParam('cTipOper', cTipOper_Fact);
    ForDistr_Mode_Av      : _q := queryManager.createQuery(qValueAv);
    ForDistr_Mode_Ok      : _q := queryManager.createQuery(qValueOk);
    ForDistr_Mode_Residual: _q := queryManager.createQuery(qValueResidual).setParam('cTipOper', cTipOper_Fact);
  end;
}

function initByFormPl(cFormPl: comp): boolean;
{
  result := false;
  _cFormPl := cFormPl;
  if getfirst FormPl != tsOk
    exit;

  initQuery;

  result := _q != nullRef;
}

function setupIfcName: string;
{
  result := 'PD_AGAT::PD_CellSchemaSetup_ForDistr';
}

property name: string read 'К распределению';
property cSetupFormPl: comp read _cFormPl;

end.
