#include PD_CellSchemaProvider.vih

#component "PD_AGAT"

interface PD_CellSchemaProvider;

var
  _id: longint;
  _schema: Array [0..0] of PD_ICellSchema;
  _formpl: Array [0..0] of comp;

create view
var
  _cFormPl: comp;
as select
  FormPl.Nrec
from
  FormPl
where ((
  _cFormPl == FormPl.Nrec
));

function findInCache(cFormPl: comp): PD_ICellSchema;
{
  var id: longint = FindItem(_formpl, cFormPl);
  result := if(id = -1, nullRef, _schema[id]);
}

procedure addToCache(cFormPl: comp; schema: PD_ICellSchema);
{
  _schema[++_id] := schema;
  _formpl[_id] := cFormPl;
}

function initCellSchemaByFormPl(schema: PD_ICellSchema; cFormPl: comp): boolean;
{
  result := false;
  _try
  {
    var ifc: PD_InitByFormPl = PD_InitByFormPl(schema);
    result := ifc.initByFormPl(cFormPl);
  }
  _except
    on ExObjIfcNoImpl: {}
}

function createNew(cFormPl: comp): PD_ICellSchema;
{
  result := nullRef;
  _cFormPl := cFormPl;
  if getfirst FormPl != tsOk exit;
  if FormPl.ResName[20] = '' exit;
  if loadVipRef(result, FormPl.ResName[20])
  {
    //PD_CellSchemaBase(result).setRepository(repository);
    initCellSchemaByFormPl(result, FormPl.Nrec);
  }
}

function cellSchema(cFormPl: comp): PD_ICellSchema;
{
  result := findInCache(cFormPl);
  if result = nullRef
  {
    result := createNew(cFormPl);
    if result != nullRef addToCache(cFormPl, result);
  }
}

end.
