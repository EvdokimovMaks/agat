#include PD_IRowSchema.vih

#component "PD_AGAT"

interface PD_EditRowSchema 'Настройки строк', escClose;

const
  FORMPL_TYPEALG_ROWSCHEMAS = 28002;
end;

var
  _cFormPl: comp;

create view
as select
  if(isValid(tnFormPlCell1),  FormPlCell1.Name,  '') (fieldname = CellSetup1)
 ,if(isValid(tnFormPlCell2),  FormPlCell2.Name,  '') (fieldname = CellSetup2)
 ,if(isValid(tnFormPlCell3),  FormPlCell3.Name,  '') (fieldname = CellSetup3)
 ,if(isValid(tnFormPlCell4),  FormPlCell4.Name,  '') (fieldname = CellSetup4)
 ,if(isValid(tnFormPlCell5),  FormPlCell5.Name,  '') (fieldname = CellSetup5)
 ,if(isValid(tnFormPlCell6),  FormPlCell6.Name,  '') (fieldname = CellSetup6)
 ,if(isValid(tnFormPlCell7),  FormPlCell7.Name,  '') (fieldname = CellSetup7)
 ,if(isValid(tnFormPlCell8),  FormPlCell8.Name,  '') (fieldname = CellSetup8)
 ,if(isValid(tnFormPlCell9),  FormPlCell9.Name,  '') (fieldname = CellSetup9)
 ,if(isValid(tnFormPlCell10), FormPlCell10.Name, '') (fieldname = CellSetup10)
 ,if(isValid(tnFormPlCell11), FormPlCell11.Name, '') (fieldname = CellSetup11)
 ,if(isValid(tnFormPlCell12), FormPlCell12.Name, '') (fieldname = CellSetup12)
 ,if(isValid(tnFormPlCell13), FormPlCell13.Name, '') (fieldname = CellSetup13)
 ,if(isValid(tnFormPlCell14), FormPlCell14.Name, '') (fieldname = CellSetup14)
 ,if(isValid(tnFormPlCell15), FormPlCell15.Name, '') (fieldname = CellSetup15)
 ,if(isValid(tnFormPlCell16), FormPlCell16.Name, '') (fieldname = CellSetup16)
 ,if(isValid(tnFormPlCell17), FormPlCell17.Name, '') (fieldname = CellSetup17)
 ,if(isValid(tnFormPlCell18), FormPlCell18.Name, '') (fieldname = CellSetup18)
 ,if(isValid(tnFormPlCell19), FormPlCell19.Name, '') (fieldname = CellSetup19)
 ,if(isValid(tnFormPlCell20), FormPlCell20.Name, '') (fieldname = CellSetup20)
from
  FormPl
 ,FormPl FormPlCell1
 ,FormPl FormPlCell2
 ,FormPl FormPlCell3
 ,FormPl FormPlCell4
 ,FormPl FormPlCell5
 ,FormPl FormPlCell6
 ,FormPl FormPlCell7
 ,FormPl FormPlCell8
 ,FormPl FormPlCell9
 ,FormPl FormPlCell10
 ,FormPl FormPlCell11
 ,FormPl FormPlCell12
 ,FormPl FormPlCell13
 ,FormPl FormPlCell14
 ,FormPl FormPlCell15
 ,FormPl FormPlCell16
 ,FormPl FormPlCell17
 ,FormPl FormPlCell18
 ,FormPl FormPlCell19
 ,FormPl FormPlCell20
where ((
      FORMPL_TYPEALG_ROWSCHEMAS == FormPl.TypeAlg
  and FormPl.ResComp[1]  == FormPlCell1.Nrec
  and FormPl.ResComp[2]  == FormPlCell2.Nrec
  and FormPl.ResComp[3]  == FormPlCell3.Nrec
  and FormPl.ResComp[4]  == FormPlCell4.Nrec
  and FormPl.ResComp[5]  == FormPlCell5.Nrec
  and FormPl.ResComp[6]  == FormPlCell6.Nrec
  and FormPl.ResComp[7]  == FormPlCell7.Nrec
  and FormPl.ResComp[8]  == FormPlCell8.Nrec
  and FormPl.ResComp[9]  == FormPlCell9.Nrec
  and FormPl.ResComp[10] == FormPlCell10.Nrec
  and FormPl.ResComp[11] == FormPlCell11.Nrec
  and FormPl.ResComp[12] == FormPlCell12.Nrec
  and FormPl.ResComp[13] == FormPlCell13.Nrec
  and FormPl.ResComp[14] == FormPlCell14.Nrec
  and FormPl.ResComp[15] == FormPlCell15.Nrec
  and FormPl.ResComp[16] == FormPlCell16.Nrec
  and FormPl.ResComp[17] == FormPlCell17.Nrec
  and FormPl.ResComp[18] == FormPlCell18.Nrec
  and FormPl.ResComp[19] == FormPlCell19.Nrec
  and FormPl.ResComp[20] == FormPlCell20.Nrec
));

parameters _cFormPl;

function getIndexByFld(f: longint): byte;
{
  result := case(f;
                 #CellSetup1:  1,
                 #CellSetup2:  2,
                 #CellSetup3:  3,
                 #CellSetup4:  4,
                 #CellSetup5:  5,
                 #CellSetup6:  6,
                 #CellSetup7:  7,
                 #CellSetup8:  8,
                 #CellSetup9:  9,
                 #CellSetup10: 10,
                 #CellSetup11: 11,
                 #CellSetup12: 12,
                 #CellSetup13: 13,
                 #CellSetup14: 14,
                 #CellSetup15: 15,
                 #CellSetup16: 16,
                 #CellSetup17: 17,
                 #CellSetup18: 18,
                 #CellSetup19: 19,
                 #CellSetup20: 20;
                 0);
}

procedure pickCellSetup(f: longint);
{
  var i: byte = getIndexByFld(f);
  if i = 0 exit;
  var c: comp = FormPl.ResComp[i];
  if RunInterface(PD_AGAT::PD_PickCellSchemaSetup, c) = cmDefault
    set FormPl.ResComp[i] := c;
  rescanPanel(tnFormPl);
}

procedure delCellSetup(f: longint);
{
  var i: byte = getIndexByFld(f);
  if i = 0 exit;
  set FormPl.ResComp[i] := 0;
  rescanPanel(tnFormPl);
}

browse brRowSchema (,,sci13478Esc);
  table FormPl;
  fields
    FormPl.Name 'Наименование': [20], protect;
end;


window wEditRowSchema 'Редактирование настройки' escClose, doAccept;
  show(,,88, 15);
  screen scEditRowSchema (,,sci1EnEsc);
    table FormPl;
    fields
      FormPl.Name: noprotect;
      CellSetup1  (,,sci13EnEsc): protect, pickButton;
      CellSetup11 (,,sci13EnEsc): protect, pickButton;
      CellSetup2  (,,sci13EnEsc): protect, pickButton;
      CellSetup12 (,,sci13EnEsc): protect, pickButton;
      CellSetup3  (,,sci13EnEsc): protect, pickButton;
      CellSetup13 (,,sci13EnEsc): protect, pickButton;
      CellSetup4  (,,sci13EnEsc): protect, pickButton;
      CellSetup14 (,,sci13EnEsc): protect, pickButton;
      CellSetup5  (,,sci13EnEsc): protect, pickButton;
      CellSetup15 (,,sci13EnEsc): protect, pickButton;
      CellSetup6  (,,sci13EnEsc): protect, pickButton;
      CellSetup16 (,,sci13EnEsc): protect, pickButton;
      CellSetup7  (,,sci13EnEsc): protect, pickButton;
      CellSetup17 (,,sci13EnEsc): protect, pickButton;
      CellSetup8  (,,sci13EnEsc): protect, pickButton;
      CellSetup18 (,,sci13EnEsc): protect, pickButton;
      CellSetup9  (,,sci13EnEsc): protect, pickButton;
      CellSetup19 (,,sci13EnEsc): protect, pickButton;
      CellSetup10 (,,sci13EnEsc): protect, pickButton;
      CellSetup20 (,,sci13EnEsc): protect, pickButton;
<<

 `Наименование`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 Настройки ячеек:

 `1 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `11`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `2 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `12`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `3 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `13`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `4 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `14`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `5 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `15`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `6 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `16`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `7 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `17`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `8 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `18`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `9 `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `19`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `10`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `20`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
  end;

  handleevent
    cmPick: pickCellSetup(CurField);
    cmDone: updateTable;
  end;

end; //window wEditRowSchema

tableevent table FormPl;
  cmUpdateRecord: update current FormPl;
  cmDeleteRecord: delete current FormPl;
end;

handleevent

  cmInit:
  {
    if _cFormPl != 0
      if getfirst FormPl where ((_cFormPl == FormPl.Nrec)) = tsOk {}
  }
  cmEdit: RunWindowModal(wEditRowSchema);
  cmDefault: putCommand(cmEdit);
  cmDelOnProtect: delCellSetup(CurField);
  cmInsert:
  {
    clearBuffer(tnFormPl);
    FormPl.TypeAlg := FORMPL_TYPEALG_ROWSCHEMAS;
    insert current FormPl;
    putCommand(cmEdit);
    Stop;
  }

end;

end.

VipInterface UserReport_EditRowSchema Implements IUserReport licensed(free);
Interface UserReport_EditRowSchema;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(PD_AGAT::PD_EditRowSchema, 0);
  end;

  function GetReportName: String;
  begin
    GetReportName := 'Настройки алгоритмов строк';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := 'Распределение платежей'
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'B_Finans';
    end;
  end;
end.