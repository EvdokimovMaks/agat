#include oTemplan.vih

#component "AGAT"

interface iTemplanFactManager;

// Таблица для сопоставления обектов в зависимости от параметров
// Не выносим в VIH, чтобы эта таблица была доступна только для конкретного объекта
table struct tIfc
(
  IfcName: string,
  KauCode: word,
  Key: string
) with index
    (
      i01 = KauCode + Key
    )
;

create view tKatPodrImp
select *
from fpimprel//, katpodr, katpodr katpodrimp
where
((
        comp(000100000000002Bh) == fpimprel.cMain
))
;

// SQL запрос для выборки сальдо по факту
SQL query qtpsFactSaldo=
/*Select fpimprel.cMean, oborot.kodspo, sum(oborot.sumob) as summa

from oborot

left join fpimprel on oborot.kauos[2] = fpimprel.cImpMean and #comp(0001000000000043h) = fpimprel.cMain

//where   #comp(000100000000000Eh) = oborot.cplanssch and oborot.datob between 1 and :dEnd and '820' = oborot.scheto and :cZakaz = oborot.kauos[1]
where   oborot.datob between 1 and :dEnd and '820' = oborot.scheto and :cZakaz = oborot.kauos[1]

Group by fpimprel.cMean, oborot.kodspo
;*/
Select coalesce(fpimprel.cMean, #comp(0)),
       Case coalesce(fpimprel.cMean, #comp(0))
            when #comp(0001000000000098h) then 1
            when #comp(0001000000000919h) then 1
            when #comp(000100000000091Dh) then 1
            when #comp(000100000000091Eh) then 1
            when #comp(000100000000091Fh) then 1
            when #comp(0001000000000920h) then 1
            when #comp(0001000000000924h) then 1
            when #comp(0001000000000926h) then 1
            else 2
       end as _GrKau,
           Case coalesce(fpimprel.cMean, #comp(0))
                when #comp(0001000000000098h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000919h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Dh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Eh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Fh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000920h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000924h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000926h) then coalesce(oborot.kauks[1], #comp(0))
                else coalesce(oborot.kodspo, #comp(0))
           end as _cAnalit,
       sum(oborot.sumob) as summa

from oborot

left join fpimprel on oborot.kauos[2] = fpimprel.cImpMean and #comp(0001000000000043h) = fpimprel.cMain

where oborot.datob between 1 and :dEnd and '820' = oborot.scheto and :cZakaz = oborot.kauos[1]

Group by fpimprel.cMean,
         Case coalesce(fpimprel.cmean, #comp(0))
              when #comp(0001000000000098h) then 1
              when #comp(0001000000000919h) then 1
              when #comp(000100000000091Dh) then 1
              when #comp(000100000000091Eh) then 1
              when #comp(000100000000091Fh) then 1
              when #comp(0001000000000920h) then 1
              when #comp(0001000000000924h) then 1
              when #comp(0001000000000926h) then 1
              else 2
         end,
           Case coalesce(fpimprel.cMean, #comp(0))
                when #comp(0001000000000098h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000919h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Dh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Eh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Fh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000920h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000924h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000926h) then coalesce(oborot.kauks[1], #comp(0))
                else coalesce(oborot.kodspo, #comp(0))
           end
;

// SQL запрос для выборки факта
SQL query qtpsFact=
/*Select fpimprel.cMean, month(datetime(oborot.datob,0)), oborot.kodspo, sum(oborot.sumob) as summa

from oborot

left join fpimprel on oborot.kauos[2] = fpimprel.cImpMean and #comp(0001000000000043h) = fpimprel.cMain

//where   #comp(000100000000000Eh) = oborot.cplanssch and oborot.datob between :dBeg and :dEnd and '820' = oborot.scheto and :cZakaz = oborot.kauos[1]
where   oborot.datob between :dBeg and :dEnd and '820' = oborot.scheto and :cZakaz = oborot.kauos[1]

Group by fpimprel.cMean, oborot.kodspo, month(datetime(oborot.datob,0))
;*/
Select coalesce(fpimprel.cMean, #comp(0)), month(datetime(oborot.datob,0)),
       Case coalesce(fpimprel.cMean, #comp(0))
            when #comp(0001000000000098h) then 1
            when #comp(0001000000000919h) then 1
            when #comp(000100000000091Dh) then 1
            when #comp(000100000000091Eh) then 1
            when #comp(000100000000091Fh) then 1
            when #comp(0001000000000920h) then 1
            when #comp(0001000000000924h) then 1
            when #comp(0001000000000926h) then 1
            else 2
       end as _GrKau,
           Case coalesce(fpimprel.cMean, #comp(0))
                when #comp(0001000000000098h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000919h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Dh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Eh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Fh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000920h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000924h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000926h) then coalesce(oborot.kauks[1], #comp(0))
                else coalesce(oborot.kodspo, #comp(0))
           end as _cAnalit,
       sum(oborot.sumob) as summa

from oborot

left join fpimprel on oborot.kauos[2] = fpimprel.cImpMean and #comp(0001000000000043h) = fpimprel.cMain

where oborot.datob between :dBeg and :dEnd and '820' = oborot.scheto and :cZakaz = oborot.kauos[1]

Group by fpimprel.cMean, month(datetime(oborot.datob,0)),
         Case coalesce(fpimprel.cmean, #comp(0))
              when #comp(0001000000000098h) then 1
              when #comp(0001000000000919h) then 1
              when #comp(000100000000091Dh) then 1
              when #comp(000100000000091Eh) then 1
              when #comp(000100000000091Fh) then 1
              when #comp(0001000000000920h) then 1
              when #comp(0001000000000924h) then 1
              when #comp(0001000000000926h) then 1
              else 2
         end,
           Case coalesce(fpimprel.cMean, #comp(0))
                when #comp(0001000000000098h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000919h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Dh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Eh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(000100000000091Fh) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000920h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000924h) then coalesce(oborot.kauks[1], #comp(0))
                when #comp(0001000000000926h) then coalesce(oborot.kauks[1], #comp(0))
                else coalesce(oborot.kodspo, #comp(0))
           end
;
// Конец SQL запроса для выборки факта

// SQL запрос для выборки сальдо по факту Прибыли по формуле К90.1-Д90.3-Д90.2
SQL query qtpsPriblSaldo=
select katstroyNrec, sum(sumOb)
from (
     Select kauks[2] as katstroynrec, sumob
     from oborot
     where schetk='890' and subschk='01' and datob between 1 and :dEnd and :cZakaz = oborot.kauks[2]

     union all
     select kauos[2], sumob*(-1)
     from oborot
     where scheto='890' and subossch in ('02','03') and datob between 1 and :dEnd and :cZakaz = oborot.kauos[2]
     //#comp(0001000000000450h) = oborot.kauos[2]
     ) o
group by katstroyNrec
;

// SQL запрос для выборки факта Прибыли по формуле К90.1-Д90.3-Д90.2
SQL query qtpsPribl=
select month(datetime(datob,0)), katstroyNrec, sum(sumOb)
from (
     Select datob, kauks[2] as katstroynrec, sumob
     from oborot
     where schetk='890' and subschk='01' and datob between :dBeg and :dEnd and :cZakaz = oborot.kauks[2]
     union all
     select datob, kauos[2], sumob*(-1)
     from oborot
     where scheto='890' and subossch in ('02','03') and datob between :dBeg and :dEnd and :cZakaz = oborot.kauos[2]
     ) o
group by month(datetime(datob,0)), katstroyNrec
;
// Конец SQL запроса для выборки факта по прибыли
// SQL запрос для выборки факта Трудоемкости сальдо
SQL Query qtpsTrudoemkostSaldo=
Select mnplan.canval2, fpperiod.dbeg, fpperiod.dend, sum(valspmnp.kol + valspmnp.price)                                                   // сумма часы на агат + часы в командировках

from  mnplan                                                                                                                              // Производственные планы

join fpperiod on mnplan.canval1 = fpperiod.nrec and fpperiod.dend <= :dEnd                                                                // Отфильтруем только необходимые периоды

//join katpodr on mnplan.canval2 = katpodr.nrec                                                                                           // Каталог подразделений

Join spmnplan on mnplan.nrec = spmnplan.cmnplan and spmnplan.canval1 = :cZakaz                                                            // Шаблон спецификация плана

//join katstroy on spmnplan.canval1 = katstroy.nrec                                                                                       // Объект строительства из строки наряда

join spmnpl on spmnplan.nrec = spmnpl.cspmnplan and 22 = spmnpl.wkolan and 21 = spmnpl.wkodgr4 and mnplan.canval1 = spmnpl.canval4 and 10029 = spmnpl.wkodgr5 and spmnpl.canval5 = #comp(00010000000008AEh) // Ячейка "Отработано часов" по строке

join valspmnp on spmnpl.nrec = valspmnp.cspmnpl                                                                                           // Значения позиций плана (Значения по ячейки "Отработано часов")

where mnplan.cwayaccou = #comp(0001000000000088h)                                                                                         // Производственный план = "Сводный наряд" (Текущий алгоритм расчета)
group by mnplan.canval2, fpperiod.dbeg, fpperiod.dend
;
// Конец SQL запрос для выборки факта Трудоемкости сальдо

// SQL запрос для выборки факта Трудоемкости
SQL Query qtpsTrudoemkost=
Select mnplan.canval2, month(datetime(fpperiod.dbeg,0)), fpperiod.dbeg, fpperiod.dend, sum(valspmnp.kol + valspmnp.price)                                               // сумма часы на агат + часы в командировках

from  mnplan                                                                                                                              // Производственные планы

join fpperiod on mnplan.canval1 = fpperiod.nrec and fpperiod.dbeg <= :dEnd and fpperiod.dend >= :dBeg                                     // Отфильтруем только необходимые периоды

//join katpodr on mnplan.canval2 = katpodr.nrec                                                                                           // Каталог подразделений

Join spmnplan on mnplan.nrec = spmnplan.cmnplan and spmnplan.canval1 = :cZakaz                                                            // Шаблон спецификация плана

//join katstroy on spmnplan.canval1 = katstroy.nrec                                                                                       // Объект строительства из строки наряда

join spmnpl on spmnplan.nrec = spmnpl.cspmnplan and 22 = spmnpl.wkolan and 21 = spmnpl.wkodgr4 and mnplan.canval1 = spmnpl.canval4 and 10029 = spmnpl.wkodgr5 and spmnpl.canval5 = #comp(00010000000008AEh) // Ячейка "Отработано часов" по строке

join valspmnp on spmnpl.nrec = valspmnp.cspmnpl                                                                                           // Значения позиций плана (Значения по ячейки "Отработано часов")

where mnplan.cwayaccou = #comp(0001000000000088h)                                                                                         // Производственный план = "Сводный наряд" (Текущий алгоритм расчета)
group by mnplan.canval2, fpperiod.nrec, fpperiod.dbeg, fpperiod.dend, month(datetime(fpperiod.dbeg,0))
;
// Конец SQL запрос для выборки факта Трудоемкости

// Функция заполнения временной таблицы данными из типовой формы бюджета
function oTemplanSpecManager.Load(FpTFormNrec: comp; cZakaz: comp; _dbeg: date; _dend: date; dOtchet: date): boolean;
{
  if (FpTFormNrec <> comp(0) and _dEnd <> 1 and dOtchet <> 1) {}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пройдёмся по временной таблице и построим связи зависящих объектов.
  _loop tTemplanSpec
    {
      var obj: oTemplanSpecObject;
      obj := GetTemplanSpec(tTemplanSpec.Nrec);
      if obj != NullRef
      {
        obj.InitLinks;
      }
      else
      {
        message('Ошибка инициализации связей в'+tTemplanSpec.name);
      }
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
  SetVisualHeader('Загрузка сальдо по фактическим показателям');

  var query2 : IQuery;
// Инициализация запроса
  query2 := qm.createQuery(qtpsFactSaldo);
// Передача параметров в запрос
  query2.setParam('dend', Add_Day(date(01,01,year(_dBeg)), -1));
  query2.setParam('cZakaz', cZakaz);
// Переменная для получения данных из запроса
  var rs2: IResultSet;
  rs2 := query2.getResultSet;
  // Цикл по результатам SQL запроса
  if (rs2.getFirst = tsOk) then
      {
        do
        {
        // Инициализация переменных, принимающих значения из запроса
          var _cStbud, _cAnalit   : comp;
          var _summa              : double;
          var _GrKau              : word;
          var _cParent            : comp;
        // Инициализация принимающих переменных с привязкой к колонкам в запросе
          _cStbud   := rs2.row.valat(1);
          _GrKau    := rs2.row.valat(2);
          _cAnalit  := rs2.row.valat(3);
          _summa    := rs2.row.valat(4);

          if abs(Round(_summa,6)) <> 0 then
            {
              if _GrKau = word(2) then
                {
                  if tKatPodrImp.getfirst fpimprel where ((comp(000100000000002Bh) == fpimprel.cMain and word(2) == fpimprel.impkodan and _cAnalit == fpimprel.cimpmean)) = tsOK then _cAnalit := tKatPodrImp.fpimprel.cMean;
                }

              if (getfirst tTPS where ((_cStbud == tTPS.cmean and (word(20) = tTPS.GrKau))) = tsOk) then _cParent := tTPS.nrec else _cParent := comp(0);   // Определяем ссылку на родителя
              if tTPS.KodGrKau = 0 then
                {
                    var obj: oTemplanSpecObject;

                    obj := GetTemplanSpec(tTPS.nrec);
                    obj.SetVal(0, (obj.GetVal(0) + _summa));
                    obj.Save;
                } else
                  if _cParent <> comp(0) then                                                                                       // Если родителя нет, то просто отбрасываем запись!!!
                    {
                      var obj : oTemplanSpecObject;
                      obj := GetTemplanSpecKau(_cParent, _GrKau, _cAnalit);

                      if obj = NullRef then
                         {
                          ClearBuffer(#tAnalit);
                          tAnalit.GrKau   := _GrKau;
                          tAnalit.cSloj   := tTPS.cSloj;
                          tAnalit.cKau    := _cAnalit;
                          insert current tAnalit;

                          AddKAU(tAnalit.Nrec, TPSPEC_KIND_KAU);

                          obj := GetTemplanSpecKau(_cParent, _GrKau, _cAnalit);
                         }
                      obj.SetVal(0, (obj.GetVal(0) + _summa));
                      obj.Save;
                    }  // if _cParent <> comp(0) then
            } // if abs(Round(_summa,6)) <> 0
        } while (rs2.getNext = tsOk)
      } // if (rs2.getFirst = tsOk)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Загрузим прибыль
// Инициализация запроса
  query2 := qm.createQuery(qtpsPriblSaldo);
// Передача параметров в запрос
  query2.setParam('dend', Add_Day(date(01,01,year(_dBeg)), -1));
  query2.setParam('cZakaz', cZakaz);
// Переменная для получения данных из запроса
  rs2 := query2.getResultSet;
  // Цикл по результатам SQL запроса
  if (rs2.getFirst = tsOk) then
      {
        do
        {
        // Инициализация переменных, принимающих значения из запроса
          var _summa  : double;
        // Инициализация принимающих переменных с привязкой к колонкам в запросе
          _summa    := rs2.row.valat(2);

          var obj:oTemplanSpecObject;
          obj := GetTemplanSpecStBud(STBUD_PRIBIL_OT_REALIZACZII_ZAKAZA);
          obj.SetVal(0, (obj.GetVal(0) + _summa));
          obj.Save;
        } while (rs2.getNext = tsOk)
      } // if (rs2.getFirst = tsOk)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Загрузим трудоемкость по НИОКР
// Инициализация запроса
  query2 := qm.createQuery(qtpsTrudoemkostSaldo);
// Передача параметров в запрос
  query2.setParam('dend', Add_Day(date(01,01,year(_dBeg)), -1));
  query2.setParam('cZakaz', cZakaz);
// Переменная для получения данных из запроса
  rs2 := query2.getResultSet;
// Цикл по результатам SQL запроса
  if (rs2.getFirst = tsOk) then
      {
        do
        {
          // Инициализация переменных, принимающих значения из запроса
          var _summa            : double;
          var _cAnalit          : comp;
          var _DatBeg, _DatEnd  : date;

          // Инициализация принимающих переменных с привязкой к колонкам в запросе
          _cAnalit  := rs2.row.valat(1);
          _DatBeg   := rs2.row.valat(2);
          _DatEnd   := rs2.row.valat(3);
          _summa    := rs2.row.valat(4);

          if abs(Round(_summa,6)) <> 0 then
            {
              if tKatPodrImp.getfirst fpimprel where ((comp(000100000000002Bh) == fpimprel.cMain and word(2) == fpimprel.impkodan and _cAnalit == fpimprel.cimpmean)) = tsOK then _cAnalit := tKatPodrImp.fpimprel.cMean;

              var obj:oTemplanSpecObject;
              obj := GetTemplanSpecStBudKau(STBUD_TRUDOEMKOST_NA_NIOKR, word(2), _cAnalit);
              if obj = NullRef then
                {
                    ClearBuffer(#tAnalit);
                    if getfirst tTPS where ((STBUD_TRUDOEMKOST_NA_NIOKR == tTPS.cMean)) = tsOK then
                      {
                       tAnalit.GrKau   := word(2);
                       tAnalit.cSloj   := tTPS.cSloj;
                       tAnalit.cKau    := _cAnalit;
                       insert current tAnalit;

                       AddKAU(tAnalit.Nrec, TPSPEC_KIND_KAU);

                       obj := GetTemplanSpecStBudKau(STBUD_TRUDOEMKOST_NA_NIOKR, word(2), _cAnalit);
                      }
                }
              if BalBwDates(11, _DatBeg, _DatEnd, 1) <> 0 then
                {
                  if obj != NullRef then
                    {
                      obj.SetVal(0, (obj.GetVal(0) + _summa/BalBwDates(11, _DatBeg, _DatEnd, 1)));
                      obj.Save;
                    }
                }
            }
        } while (rs2.getNext = tsOk)
      } // if (rs2.getFirst = tsOk)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
  SetVisualHeader('Загрузка фактических показателей');
// Если отчёт делается с первого месяца, то загрузку данных производить не нужно
  if month(_dbeg) <> 1 then
    {
// Инициализация запроса
      query2 := qm.createQuery(qtpsFact);
      // Передача параметров в запрос
      query2.setParam('dbeg', date(01,01,year(_dbeg)));
      query2.setParam('dend', date(last_day(date(01, (month(_dbeg)-1), year(_dbeg))), (month(_dbeg)-1), year(_dbeg)));
      query2.setParam('cZakaz', cZakaz);
      rs2 := query2.getResultSet;
      // Цикл по результатам SQL запроса
      if (rs2.getFirst = tsOk) then
          {
            do
            {
            // Инициализация переменных, принимающих значения из запроса
              var _cStbud, _cAnalit   : comp;
              var _Month, _GrKau      : word;
              var _summa              : double;
              var _cParent            : comp;
            // Инициализация принимающих переменных с привязкой к колонкам в запросе
              _cStbud   := rs2.row.valat(1);
              _Month    := rs2.row.valat(2);
              _GrKau    := rs2.row.valat(3);
              _cAnalit  := rs2.row.valat(4);
              _summa    := rs2.row.valat(5);

              if abs(Round(_summa,6)) <> 0 then
                {
                  if _GrKau = word(2) then
                    {
                      if tKatPodrImp.getfirst fpimprel where ((comp(000100000000002Bh) == fpimprel.cMain and word(2) == fpimprel.impkodan and _cAnalit == fpimprel.cimpmean)) = tsOK then _cAnalit := tKatPodrImp.fpimprel.cMean;
                    }

                  if (getfirst tTPS where ((_cStbud == tTPS.cmean and (word(20) = tTPS.GrKau))) = tsOk) then _cParent := tTPS.nrec else _cParent := comp(0);   // Определяем ссылку на родителя
                  if tTPS.KodGrKau = 0 then
                    {
                        var obj: oTemplanSpecObject;
                        obj := GetTemplanSpec(tTPS.nrec);
                        obj.SetVal(_Month, (obj.GetVal(_Month) + _summa));
                        obj.Save;
                    } else
                      if _cParent <> comp(0) then                                                                                       // Если родителя нет, то просто отбрасываем запись!!!
                        {
                          var obj: oTemplanSpecObject;
                          obj := GetTemplanSpecKau(_cParent, _GrKau, _cAnalit);
                          if obj = NullRef then
                            {
                             ClearBuffer(#tAnalit);
                             tAnalit.GrKau   := _GrKau;
                             tAnalit.cSloj   := tTPS.cSloj;
                             tAnalit.cKau    := _cAnalit;
                             insert current tAnalit;

                             AddKAU(tAnalit.Nrec, TPSPEC_KIND_KAU);

                             obj := GetTemplanSpecKau(_cParent, _GrKau, _cAnalit);
                            }
                          obj.SetVal(_Month, (obj.GetVal(_Month) + _summa));
                          obj.Save;
                        }  // if _cParent <> comp(0) then
                }
           } while (rs2.getNext = tsOk)
          } // if (rs2.getFirst = tsOk)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Загрузим прибыль по месяцам
// Инициализация запроса
      query2 := qm.createQuery(qtpsPribl);
      // Передача параметров в запрос
      query2.setParam('dbeg', date(01,01,year(_dbeg)));
      query2.setParam('dend', date(last_day(date(01, (month(_dbeg)-1), year(_dbeg))), (month(_dbeg)-1), year(_dbeg)));
      query2.setParam('cZakaz', cZakaz);
      rs2 := query2.getResultSet;
      // Цикл по результатам SQL запроса
      if (rs2.getFirst = tsOk) then
          {
            do
            {
            // Инициализация переменных, принимающих значения из запроса
              var _Month : word;
              var _summa : double;
            // Инициализация принимающих переменных с привязкой к колонкам в запросе
              _Month    := rs2.row.valat(1);
              _summa    := rs2.row.valat(3);

              var obj:oTemplanSpecObject;
              obj := GetTemplanSpecStBud(STBUD_PRIBIL_OT_REALIZACZII_ZAKAZA);
              obj.SetVal(_Month, (obj.GetVal(_Month) + _summa));
              obj.Save;
            } while (rs2.getNext = tsOk)
          } // if (rs2.getFirst = tsOk)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Загрузим трудоемкость по НИОКР
// Инициализация запроса
      query2 := qm.createQuery(qtpsTrudoemkost);
// Передача параметров в запрос
      query2.setParam('dbeg', date(01,01,year(_dbeg)));
      query2.setParam('dend', date(last_day(date(01, (month(_dbeg)-1), year(_dbeg))), (month(_dbeg)-1), year(_dbeg)));
      query2.setParam('cZakaz', cZakaz);
// Переменная для получения данных из запроса
      rs2 := query2.getResultSet;
// Цикл по результатам SQL запроса
      if (rs2.getFirst = tsOk) then
          {
            do
            {
              // Инициализация переменных, принимающих значения из запроса
              var _summa            : double;
              var _Month            : word;
              var _cAnalit          : comp;
              var _DatBeg, _DatEnd  : date;

              // Инициализация принимающих переменных с привязкой к колонкам в запросе
              _cAnalit  := rs2.row.valat(1);
              _Month    := rs2.row.valat(2);
              _DatBeg   := rs2.row.valat(3);
              _DatEnd   := rs2.row.valat(4);
              _summa    := rs2.row.valat(5);

              if abs(Round(_summa,6)) <> 0 then
                {
                  if tKatPodrImp.getfirst fpimprel where ((comp(000100000000002Bh) == fpimprel.cMain and word(2) == fpimprel.impkodan and _cAnalit == fpimprel.cimpmean)) = tsOK then _cAnalit := tKatPodrImp.fpimprel.cMean;

                  var obj:oTemplanSpecObject;
                  obj := GetTemplanSpecStBudKau(STBUD_TRUDOEMKOST_NA_NIOKR, word(2), _cAnalit);
                  if obj = NullRef then
                    {
                        ClearBuffer(#tAnalit);
                        if getfirst tTPS where ((STBUD_TRUDOEMKOST_NA_NIOKR == tTPS.cMean)) = tsOK then
                          {
                           tAnalit.GrKau   := word(2);
                           tAnalit.cSloj   := tTPS.cSloj;
                           tAnalit.cKau    := _cAnalit;
                           insert current tAnalit;

                           AddKAU(tAnalit.Nrec, TPSPEC_KIND_KAU);

                           obj := GetTemplanSpecStBudKau(STBUD_TRUDOEMKOST_NA_NIOKR, word(2), _cAnalit);
                          }
                    }
                  if BalBwDates(11, _DatBeg, _DatEnd, 1) <> 0 then
                    {
                      if obj != NullRef then
                        {
                          obj.SetVal(_Month, (obj.GetVal(_Month) + _summa/BalBwDates(11, _DatBeg, _DatEnd, 1)));          // 11 это код режима работы <5-дневная рабочая неделя>
                          obj.Save;
                        }
                    }
                }
            } while (rs2.getNext = tsOk)
          } // if (rs2.getFirst = tsOk)
    } // if month(_dbeg) <> 1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
  delete all tTemplanLink;
  result := true;
}

constructor Init;
{
  DefaultIfcName := '';
  if( LoadImplementationList('AGAT::oTemplanSpecObject', 'iTemplanFactObject_') )
  {
    delete all tIfc;
    var obj: oTemplanSpecObject;
    var ifcName :string;
    var i, cnt: integer;
    cnt := GetImplementationCount;
    for( i := 0; i < cnt; i++ )
    {
      var s, s1 : string;
      var KC, KC1 : string
      clearbuffer(#tIfc);
      tIfc.IfcName :=  GetImplementationName(i);
      GetVipRef(obj, tIfc.IfcName);
      tIfc.KauCode := obj.GetKauCode;

      s := obj.GetKey;
      while inStr (', ', s) <> 0 do
        {
          s1 := SubStr (s, 1, 17);
          tIfc.Key  := s1;
          insert current tIfc;
          s := replace(s, s1+', ','');
        }
      s1 := SubStr (s, 1, 17);
      tIfc.Key  := s1;
      insert current tIfc;

      if (tIfc.KauCode = 0 and tIfc.Key = '') DefaultIfcName := tIfc.IfcName;
    };
  };
  UnLoadImplementationList;
  result := true;
}

end.
