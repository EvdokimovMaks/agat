#include GlobalGoods.vih
#include ExternalQuery.vih

#component "AGAT"

interface GoodsMatch;

const
  MatchDirection_SearchGlobal = 1;
  MatchDirection_SearchGalaxy = 2;
  MatchDirection_DontSearch   = 0;
end;

table struct tMatches (
  katmcNrec   : comp,
  groupmcNrec : comp,
  typemcNrec  : comp,
  katmcName   : string,
  katmcBarcode: string[30],
  goodsId     : comp,
  goodsName   : string,
  measureId   : comp,
  measureName : string,
  matchesFound: longint,
  direction   : byte
) with index (
  i01 = katmcNrec + goodsId,
  i02 = katmcName,
  i03 = goodsName
);

type tMatchesBuffer = record as table tMatches;

var
  _externalQueryTextFactory: IExternalQueryTextFactory;
  _externalQuery           : IExternalQuery;
  _ei                      : L_MCU::EdIzm;

create view
as select *
from tMatches, tMatches brMatches(i03)
;

create view vAdd
var
  _katmcNrec: comp;
  _goodsId: comp;
as select *
from tMatches, katmc
where ((
  _katmcNrec == tMatches.katmcNrec and
  _goodsId   == tMatches.goodsId and
  _katmcNrec == katmc.nrec
));

window wMatches 'Установка соответствий МЦ Галактика ERP и Global ERP', escclose, doaccept;
browse brmain;
  table brMatches;
  fields
    brMatches.KatmcName   'Галактика МЦ': [50], protect;
    _ei.GetAktOtpEdAbbr(brMatches.katmcNrec,1) 'Ед.изм.': [10], protect;
    brMatches.GoodsName   'Global МЦ': [50], protect;
    brMatches.MeasureName 'Ед.изм.': [10], protect;
end;
end;

constructor Init;
{
  result := loadvipref(_externalQueryTextFactory, 'AGAT::ExternalQueryTextFactory') and
            loadvipref(_externalQuery, 'AGAT::ExternalQuery');
}

function getLinkedServerName: string;
{
  result := 'USELECT';
}

function getMatchesDirection(aKatmcNrec: comp; aGoodsId: comp): byte;
{
  if aKatmcNrec = 0 and aGoodsId != 0
    result := MatchDirection_SearchGalaxy
  else if aKatmcNrec != 0 and aGoodsId = 0
    result := MatchDirection_SearchGlobal
  else
    result := MatchDirection_DontSearch;
}

function SearchGalaxy(buf: tMatchesBuffer): tMatchesBuffer;
{
  var t: IExternalQueryText;
  t := _externalQueryTextFactory.
       CreateText('select mc.f$nrec as katmcNrec,').
       AddString ('       mc.f$cgroupmc as groupmcNrec,').
       AddString ('       mc.f$ctype as typemcNrec,').
       AddString ('       mc.f$name as katmcName,').
       AddString ('       mc.f$barkod as katmcBarcode').
       AddString ('from openquery ('+getLinkedServerName+', '' ').
       AddString ('     select SIDEXTERNALOBJ as KatmcNrec').
       AddString ('     from BTK.AGT_OBJMAPPING mapping').
       AddString ('     where mapping.idobjmappingtype = 24746150001 and mapping.idrefclass = 17372001 and mapping.IDREFOBJ='+string(buf.goodsId)).
       AddString ('     '') gl').
       AddString ('join t$katmc mc on mc.f$nrec = dbo.toComp(gl.KatmcNrec)');
  var rs: IResultSet;
  rs := _externalQuery.GetResultSet(t);
  buf.matchesFound := rs.Count;
  if rs.getFirst = tsOk
  {
    buf.katmcNrec    := rs.row.Val('katmcNrec');
    buf.groupmcNrec  := rs.row.Val('groupmcNrec');
    buf.typemcNrec   := rs.row.Val('typemcNrec');
    buf.katmcName    := rs.row.Val('katmcName');
    buf.katmcBarcode := rs.row.Val('katmcBarcode');
  }
  result := buf;
}

function SearchGlobal(buf: tMatchesBuffer): tMatchesBuffer;
{
  var t: IExternalQueryText;
  t := _externalQueryTextFactory.
       CreateText('select goodsId, goodsName, measureId, measureName').
       AddString ('from openquery ('+getLinkedServerName+', '' ').
       AddString ('select goods.ID as goodsId, goods.SHEADLINE# as goodsName, goods.IdMeasureItem as measureId, measure.sShortName as measureName').
       AddString ('from BTK.AGT_OBJMAPPING mapping').
       AddString ('join BTK.BS_GOODS goods on mapping.IDREFOBJ = goods.ID').
       AddString ('left join BTK.MSR_MEASUREITEMMAP measure on measure.idboobj#=goods.IdMeasureItem').
       AddString ('where mapping.idobjmappingtype = 24746150001 and mapping.idrefclass = 17372001 and mapping.SIDEXTERNALOBJ='''''+string(buf.katmcNrec)+'''''').
       AddString (' '') ');
  var rs: IResultSet;
  rs := _externalQuery.GetResultSet(t);
  buf.matchesFound := rs.Count;
  if rs.getFirst = tsOk
  {
    buf.goodsId     := rs.row.Val('goodsId');
    buf.goodsName   := rs.row.Val('goodsName');
    buf.measureId   := rs.row.Val('measureId');
    buf.measureName := rs.row.Val('measureName');
  }
  result := buf;
}

function SearchMatches(aGlobalGoodsCollection: IGlobalGoodsCollection): boolean;
{

  delete all tMatches;

  result := true;

  if (aGlobalGoodsCollection.GetFirst = tsOk) do
  {
    if (aGlobalGoodsCollection.katmcNrec=0 and aGlobalGoodsCollection.goodsId=0) continue;

    vAdd._katmcNrec := aGlobalGoodsCollection.katmcNrec;
    vAdd._goodsId   := aGlobalGoodsCollection.goodsId;
    if vAdd.getfirst tMatches != tsOk
    {
      vAdd.clearbuffer(#vAdd.tMatches);
      if vAdd.getfirst katmc = tsOk
      {
        vAdd.tMatches.katmcNrec    := vAdd.katmc.nrec;
        vAdd.tMatches.groupmcNrec  := vAdd.katmc.cgroupmc;
        vAdd.tMatches.typemcNrec   := vAdd.katmc.ctype;
        vAdd.tMatches.katmcName    := vAdd.katmc.name;
        vAdd.tMatches.katmcBarcode := vAdd.katmc.barkod;
      }
      vAdd.tMatches.goodsId      := aGlobalGoodsCollection.GoodsId;
      vAdd.tMatches.goodsName    := aGlobalGoodsCollection.GoodsName;
      vAdd.tMatches.measureId    := aGlobalGoodsCollection.MeasureId;
      vAdd.tMatches.measureName  := aGlobalGoodsCollection.MeasureName;
      vAdd.tMatches.direction    := getMatchesDirection(vAdd._katmcNrec, vAdd._goodsId);

      case vAdd.tMatches.direction of
        MatchDirection_SearchGalaxy: vAdd.tMatches.buffer := SearchGalaxy(tMatchesBuffer(vAdd.tMatches.buffer));
        MatchDirection_SearchGlobal: vAdd.tMatches.buffer := SearchGlobal(tMatchesBuffer(vAdd.tMatches.buffer));
      end;

      if (vAdd.tMatches.goodsId = 0 or vAdd.tMatches.katmcNrec = 0) result := false;

      vAdd.insert current tMatches;
    }
  } while (aGlobalGoodsCollection.GetNext = tsOk);

}

function ShowUI: longint;
{
  result := runwindowmodal(wMatches);
}
end.
