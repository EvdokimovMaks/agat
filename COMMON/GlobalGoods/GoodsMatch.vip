#include GlobalGoods.vih
#include ExternalQuery.vih
#include GlobalMatchManager.vih

#component "AGAT"

interface GoodsMatch;

const
  MatchDirection_SearchGlobal = 1;
  MatchDirection_SearchGalaxy = 2;
  MatchDirection_DontSearch   = 0;
end;

var
  _gmm:GlobalMatchManager;

table struct tMatches (
  katmcNrec   : comp,
  groupmcNrec : comp,
  typemcNrec  : comp,
  katmcName   : string,
  katmcBarcode: string[30],
  goodsId     : comp,
  goodsName   : string,
  measureId   : comp,
  measureName : string,
  matchesFound: longint,
  direction   : byte
) with index (
  i01 = katmcNrec + goodsId,
  i02 = katmcName,
  i03 = goodsName
);

type tMatchesBuffer = record as table tMatches;

var
  _externalQueryTextFactory: IExternalQueryTextFactory;
  _externalQuery           : IExternalQuery;
  _ei                      : L_MCU::EdIzm;

create view
as select *
from tMatches, tMatches brMatches(i03)
;

create view vAdd
var
  _katmcNrec: comp;
  _goodsId: comp;
as select *
from tMatches, katmc
where ((
  _katmcNrec == tMatches.katmcNrec and
  _goodsId   == tMatches.goodsId and
  _katmcNrec == katmc.nrec
));

window wMatches 'Установка соответствий МЦ Галактика ERP и Global ERP', escclose, doaccept;
browse brmain;
  table brMatches;
  fields
    brMatches.KatmcName   'Галактика МЦ': [50], protect, PickButton;
    _ei.GetAktOtpEdAbbr(brMatches.katmcNrec,1) 'Ед.изм.': [10], protect;
    brMatches.GoodsName   'Global МЦ': [50], protect, PickButton;
    brMatches.MeasureName 'Ед.изм.': [10], protect;
end;
handleevent
cmPick:
{
  if CurField = #brMatches.KatmcName then
  {
    message('Тут Галактика');
    if brMatches.GoodsName = '' then
    {
      message('You shall not pass! Ибо Глобал пустой');
      exit;
    }
    RunInterface(L_MCU::KATMC);
  }
  if CurField = #brMatches.GoodsName
  {
    message('А здесь у нас Глобал');
    if brMatches.KatmcName = '' then
    {
      message('You shall not pass! Ибо Галактика пуста');
      exit;
    }
    RunInterface(AGAT::GLOBALGOODSSELECTOR);
  }
}
end;
end;

constructor Init;
{
  result := loadvipref(_externalQueryTextFactory, 'AGAT::ExternalQueryTextFactory') and
            loadvipref(_externalQuery, 'AGAT::ExternalQuery');
}

function getLinkedServerName: string;
{
  result := 'USELECT';
}

function getMatchesDirection(aKatmcNrec: comp; aGoodsId: comp): byte;
{
  if aKatmcNrec = 0 and aGoodsId != 0
    result := MatchDirection_SearchGalaxy
  else if aKatmcNrec != 0 and aGoodsId = 0
    result := MatchDirection_SearchGlobal
  else
    result := MatchDirection_DontSearch;
}

function SearchGalaxy(buf: tMatchesBuffer): tMatchesBuffer;
{
  var rs: IResultSet;
  rs := _gmm.FindByRefObjId(buf.goodsId);
  buf.matchesFound := rs.Count;
  if rs.getFirst = tsOk
  {
    buf.katmcNrec    := rs.row.Val('katmcNrec');
    buf.groupmcNrec  := rs.row.Val('groupmcNrec');
    buf.typemcNrec   := rs.row.Val('typemcNrec');
    buf.katmcName    := rs.row.Val('katmcName');
    buf.katmcBarcode := rs.row.Val('katmcBarcode');
  }
  result := buf;
}

function SearchGlobal(buf: tMatchesBuffer): tMatchesBuffer;
{
  var rs: IResultSet;
  rs := _gmm.FindByExternalObjId(buf.katmcNrec);
  buf.matchesFound := rs.Count;
  if rs.getFirst = tsOk
  {
    buf.goodsId     := rs.row.Val('goodsId');
    buf.goodsName   := rs.row.Val('goodsName');
    buf.measureId   := rs.row.Val('measureId');
    buf.measureName := rs.row.Val('measureName');
  }
  result := buf;
}

function SearchMatches(aGlobalGoodsCollection: IGlobalGoodsCollection): boolean;
{

  delete all tMatches;

  result := true;

  if (aGlobalGoodsCollection.GetFirst = tsOk) do
  {
    if (aGlobalGoodsCollection.katmcNrec=0 and aGlobalGoodsCollection.goodsId=0) continue;

    vAdd._katmcNrec := aGlobalGoodsCollection.katmcNrec;
    vAdd._goodsId   := aGlobalGoodsCollection.goodsId;
    if vAdd.getfirst tMatches != tsOk
    {
      vAdd.clearbuffer(#vAdd.tMatches);
      if vAdd.getfirst katmc = tsOk
      {
        vAdd.tMatches.katmcNrec    := vAdd.katmc.nrec;
        vAdd.tMatches.groupmcNrec  := vAdd.katmc.cgroupmc;
        vAdd.tMatches.typemcNrec   := vAdd.katmc.ctype;
        vAdd.tMatches.katmcName    := vAdd.katmc.name;
        vAdd.tMatches.katmcBarcode := vAdd.katmc.barkod;
      }
      vAdd.tMatches.goodsId      := aGlobalGoodsCollection.GoodsId;
      vAdd.tMatches.goodsName    := aGlobalGoodsCollection.GoodsName;
      vAdd.tMatches.measureId    := aGlobalGoodsCollection.MeasureId;
      vAdd.tMatches.measureName  := aGlobalGoodsCollection.MeasureName;
      vAdd.tMatches.direction    := getMatchesDirection(vAdd._katmcNrec, vAdd._goodsId);

      if (vAdd.tMatches.goodsId = 0 or vAdd.tMatches.katmcNrec = 0) result := false;

      vAdd.insert current tMatches;
    }
  } while (aGlobalGoodsCollection.GetNext = tsOk);

  var rs: IResultSet;
  _loop tMatches
  {
    case tMatches.direction of
      MatchDirection_SearchGalaxy: {
        rs := _gmm.FindByRefObjId(tMatches.goodsId);
        tMatches.matchesFound := rs.Count;
        if rs.getFirst = tsOk
        {
          tMatches.katmcNrec    := rs.row.Val('katmcNrec');
          tMatches.groupmcNrec  := rs.row.Val('groupmcNrec');
          tMatches.typemcNrec   := rs.row.Val('typemcNrec');
          tMatches.katmcName    := rs.row.Val('katmcName');
          tMatches.katmcBarcode := rs.row.Val('katmcBarcode');
        }
      }
      MatchDirection_SearchGlobal: {
        rs := _gmm.FindByExternalObjId(tMatches.katmcNrec);
        tMatches.matchesFound := rs.Count;
        if rs.getFirst = tsOk
        {
          tMatches.goodsId     := rs.row.Val('goodsId');
          tMatches.goodsName   := rs.row.Val('goodsName');
          tMatches.measureId   := rs.row.Val('measureId');
          tMatches.measureName := rs.row.Val('measureName');
        }
      }
    end;
    update current tMatches;
  }
}

function ShowUI: longint;
{
  result := runwindowmodal(wMatches);
}
end.
