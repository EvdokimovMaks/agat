#include Params.vih

#component "AGAT"

interface ParamsCommon;

var
  _values: TParamValues;
  _names : TParamNames;
  _count : longint;

function NormalizedName(aName: string): string;
{
  result := locase(trim(aName));
}

function FindParamIndex(aName: string): longint;
{
  result := FindItem(_names, NormalizedName(aName));
}

function FindParamIndexOrCreate(aName: string): longint;
{
  var i: longint;
  i := FindParamIndex(aName);
  if i = -1
  {
    i := _count;
    _count ++;
    _names[i] := NormalizedName(aName);
  }
  result := i;
}

function  IParams.ParamExists(aName: string): boolean;
{
  result := FindParamIndex(aName) != -1;
}

function IParams.RemoveParam(aName: string): IParams;
{
  var i: longint;
  i := FindParamIndex(aName);
  if i != -1
  {
    ArrAtDelete(_names,i);
    ArrAtDelete(_values,i);
    _count --;
  }
  result := IParams(self);
}

function IParams.SetParam(aName: string; aValue: variant): IParams;
{
  _values[FindParamIndexOrCreate(aName)] := aValue;
  result := IParams(self);
}

function  IParams.GetParam(aName: string; aDefaultValue: variant): variant;
{
  var i: longint;
  i := FindParamIndex(aName)
  if i = -1
    result := aDefaultValue;
  else
    result := _values[i];
}

function  IParams.Count: longint;
{
  result := _count;
}

function  IParams.ParamNames: TParamNames;
{
  result := _names;
}

function  IParams.ParamValues: TParamValues;
{
  result := _values;
}

constructor Init;
{
  _count := 0;
  result := true;
}
end.
