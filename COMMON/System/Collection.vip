#include System.vih

#component "System"

interface Collection;

var
  _list: IList;
  _count: longint;

//#Region IIndexable

function GetIndexator: IIndexator;
{
  result := IIndexable(_list).GetIndexator;
}

//#EndRegion

//#Region IEnumerable

function GetEnumerator: IEnumerator;
{
  result := IEnumerator( new( System::ListEnumerator, ListEnumerator(IList(self)) ) );
}

function First: ObjRef;
{
  result := _list.First;
}

function Last: ObjRef;
{
  result := _list.Last;
}

//#EndRegion

//#Region ICollection

function Add(value: ObjRef): longint;
{
  InsertItem(_count, Value);
  result := _count;
}

procedure Remove(value: ObjRef);
{
  var i: longint;
  i := IndexOf(value);
  if (i <> -1) RemoveAt(i);
}

procedure Clear;
{
  ClearItems;
}

function Contains(value: ObjRef): boolean;
{
  result := IndexOf(value) <> -1;
}

property Count: longint read _count;

//#EndRegion

//#Region IList

function ItemGet(index: longint): ObjRef;
{
  result := GetItem(index);
}

procedure ItemSet(index: longint; value: ObjRef);
{
  SetItem(index, value);
}

function IndexOf(value: ObjRef): longint;
{
  result := -1;
  var i: longint;
  for (i:=0; i < _count; i++)
  {
    if GetItem(i) = value
    {
      result := i;
      break;
    }
  }
}

procedure Insert(index: longint; value: ObjRef);
{
  InsertItem(index, value);
}

procedure RemoveAt(index: longint);
{
  RemoveItem(index);
}

//#EndRegion

//#Region Collection private metods

constructor Init;
{
  _count := 0;
  result := loadvipref(_list, 'system::List');
}

function  GetItem(index: longint): ObjRef;
{
  result := _list.ItemGet(index);
}

procedure SetItem(index: longint; value: ObjRef);
{
  _list.ItemSet(index, value);
  _count := _list.Count;
}

procedure InsertItem(index: longint; value: ObjRef);
{
  _list.Insert(index, value);
  _count := _list.Count;
}

procedure RemoveItem(index: longint);
{
  _list.RemoveAt(index);
  _count := _list.Count;
}

procedure ClearItems;
{
  _list.Clear;
}

//#EndRegion

end.
