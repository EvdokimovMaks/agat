#include System.vih

#component "System"

interface VariantList;

var
  _items: array [0..0] of variant;
  _count: longint;

constructor Init;
{
  _count := 0;
  result := true;
}

function GetEnumerator: IVariantEnumerator;
{
  result := IVariantEnumerator( new( System::VariantListEnumerator, VariantListEnumerator(IVariantList(self)) ) );
}

function Add(value: variant): longint;
{
  _items[_count] := value;
  result := _count;
  _count++;
}

procedure Remove(value: variant);
{
  var i: longint;
  i := IndexOf(value);
  if (i <> longint(-1)) RemoveAt(i);
}

procedure Clear;
{
  _count := 0;
}

function Contains(value: variant): boolean;
{
  result := IndexOf(value) <> longint(-1);
}

function ItemGet(index: longint): variant;
{
  if (index >= 0 and index < _count)
    result := _items[index]
  else
  {
    result := '';
    _raise ExArrayRangeError;
  }
}

procedure ItemSet(index: longint; value: variant);
{
  if (index >= 0 and index < _count)
    _items[index] := value
  else
    _raise ExArrayRangeError;
}

function IndexOf(value: variant): longint;
{
  result := finditem(_items, value);
}

procedure Insert(index: longint; value: variant);
{
  if (index >= 0 and index < _count)
  {
    if ArrAtInsert(_items, index)
    {
      _items[index] := value;
      _count++;
    }
  }
  else if index = _count
  {
    Add(value);
  }
  else
    _raise ExArrayRangeError;
}

procedure RemoveAt(index: longint);
{
  if (index >= 0 and index < _count)
  {
    if ArrAtDelete(_items, index)
      _count--;
  }
}

property Count: longint read _count;

end.
