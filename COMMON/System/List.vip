#include System.vih

#component "System"

interface List;

var
  _items: array [0..0] of ObjRef;
  _count: longint;

constructor Init;
{
  _count := 0;
  result := true;
}

function GetIndexator: IIndexator;
{
  result := IIndexator( new (System::ListIndexatorBase, ListIndexatorBase(IList(self)) ) );
}

function GetEnumerator: IEnumerator;
{
  result := IEnumerator( new( System::ListEnumerator, ListEnumerator(IList(self)) ) );
}

function First: ObjRef;
{
  if _count = 0
    result := nullref;
  else
    result := _items[0];
}

function Last: ObjRef;
{
  if _count = 0
    result := nullref;
  else
    result := _items[_count-1];
}

function Add(value: ObjRef): longint;
{
  _items[_count] := value;
  result := _count;
  _count++;
}

procedure Remove(value: ObjRef);
{
  var i: longint;
  i := IndexOf(value);
  if (i <> longint(-1)) RemoveAt(i);
}

procedure Clear;
{
  _count := 0;
}

function Contains(value: ObjRef): boolean;
{
  result := IndexOf(value) <> longint(-1);
}

function ItemGet(index: longint): ObjRef;
{
  if (index >= 0 and index < _count)
    result := _items[index]
  else
  {
    result := nullref;
    _raise ExArrayRangeError;
  }
}

procedure ItemSet(index: longint; value: ObjRef);
{
  if (index >= 0 and index < _count)
    _items[index] := value
  else
    _raise ExArrayRangeError;
}

function IndexOf(value: ObjRef): longint;
{
  result := finditem(_items, value);
}

procedure Insert(index: longint; value: ObjRef);
{
  if (index >= 0 and index < _count)
  {
    if ArrAtInsert(_items, index)
    {
      _items[index] := value;
      _count++;
    }
  }
  else if index = _count
  {
    Add(value);
  }
  else
    _raise ExArrayRangeError;
}

procedure RemoveAt(index: longint);
{
  if (index >= 0 and index < _count)
  {
    if ArrAtDelete(_items, index)
      _count--;
  }
}

property Count: longint read _count;

end.
