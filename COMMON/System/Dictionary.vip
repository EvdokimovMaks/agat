#include System.vih

#component "System"

interface Dictionary;

var
  _items : IList;
  _values: IList;
  _keys  : IVariantList;

constructor Init;
{
  result := false;
  if not loadvipref(_items, 'system::List') exit;
  if not loadvipref(_values, 'system::List') exit;
  if not loadvipref(_keys, 'system::VariantList') exit;
  result := true;
}

procedure AddKeyValue(key: variant; value: ObjRef);
{
  if not ContainsKey(key)
  {
    var pair: System::KeyValuePair noauto;
    pair := new(System::KeyValuePair, KeyValuePair(key, value)) ;
    Add(IKeyValuePair(pair));
  }
}

function ContainsValue(value: ObjRef): boolean;
{
  result := _values.Contains(value);
}

function ContainsKey(key: variant): boolean;
{
  result := _keys.Contains(key);
}

function RemoveItemWithKey(key: variant): boolean;
{
  var i: longint;
  i := _keys.IndexOf(key);
  if i <> -1
  {
    _items.RemoveAt(i);
    _keys.RemoveAt(i);
    _values.RemoveAt(i);
    result := true;
  }
  else
    result := false;
}

function ValueGet(key: variant): ObjRef;
{
  var i: longint;
  i := _keys.IndexOf(key);
  if i != -1
    result := _values.ItemGet(i);
}

function ValueSet(key: variant; value: ObjRef): boolean;
{
  var i: longint;
  i := _keys.IndexOf(key);
  if i != -1
  {
    _values.ItemSet(i, value);
    result := true;
  }
  else
    result := false;
}

property Keys: IVariantCollection read _keys;
property Values: ICollection read _values;

function Add(value: ObjRef): longint;
{
  result := -1;
  var pair: IKeyValuePair;
  pair := IKeyValuePair(value);
  if not ContainsKey(pair.key)
  {
    _values.Add(pair.Value);
    _keys.Add(pair.Key);
    _items.Add(pair);
  }
}

procedure Remove(value: ObjRef);
{
  var i: longint;
  i := _values.IndexOf(value);
  if i != -1
  {
    _values.RemoveAt(i);
    _keys.RemoveAt(i);
    _items.RemoveAt(i);
  }
}

procedure Clear;
{
  _values.Clear;
  _keys.Clear;
  _items.Clear;
}

function Contains(value: ObjRef): boolean;
{
  result := _items.Contains(value);
}

property Count: longint read _items.Count;

function GetEnumerator: IEnumerator;
{
  result := _items.GetEnumerator;
}

function First: ObjRef;
{
  result := _items.First;
}

function Last: ObjRef;
{
  result := _items.Last;
}

end.
