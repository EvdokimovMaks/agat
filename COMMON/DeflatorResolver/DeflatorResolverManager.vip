#include DeflatorResolver.vih
#include Query.vih

#component "AGAT"

interface DeflatorResolverManager;

sql query queryGetIncomePlan =
select deflatorMnplan.nrec
from objacct oa
join mnplan deflatorMnplan on deflatorMnplan.nrec = oa.cobject and deflatorMnplan.cwayaccou = :deflatorWayaccouNrec
where oa.typeown = 4 and oa.cowner = :mnplanNrec and oa.typeobj = 4
;

sql query queryGetLastPlan =
select deflatorMnplan.nrec
from mnplan deflatorMnplan
where deflatorMnplan.cwayaccou = :deflatorWayaccouNrec
;

var
  _qGetIncomePlan: IQuery;
  _qGetLastPlan: IQuery;

function getIncomePlanNrec(mnplanNrec: comp): comp;
{
  result := 0;

  if _qGetIncomePlan = nullref
    _qGetIncomePlan := queryManager.createQuery(queryGetIncomePlan);

  _qGetIncomePlan.setParam('deflatorWayaccouNrec', coGetTune('AGAT.RKM.KAUDEFLWAY'))
                 .setParam('mnplanNrec', mnplanNrec);

  if _qGetIncomePlan.execute.errorCode = tsOk
    if _qGetIncomePlan.fetch.errorCode = tsOk
      result := _qGetIncomePlan.row.valAt(1);
}

function getLastPlanNrec: comp;
{
  result := 0;

  if _qGetLastPlan = nullref
    _qGetLastPlan := queryManager.createQuery(queryGetLastPlan);

  _qGetLastPlan.setParam('deflatorWayaccouNrec', coGetTune('AGAT.RKM.KAUDEFLWAY'));

  if _qGetLastPlan.execute.errorCode = tsOk
    if _qGetLastPlan.fetch.errorCode = tsOk
      result := _qGetLastPlan.row.valAt(1);
}

function GetDeflatorResolver(deflatorMnplanNrec: comp; deflatorFptperNrec: comp): oDeflatorResolver;
{
  if deflatorFptperNrec = 0
    deflatorFptperNrec := coGetTune('AGAT.RKM.TPER');

  var dr: oDeflatorResolver;
  dr := oDeflatorResolver(new(iDeflatorResolver));
  dr.InitDeflators(deflatorMnplanNrec, deflatorFptperNrec);

  result := dr;
}

function GetDeflatorResolverForMnplan(mnplanNrec: comp; deflatorFptperNrec: comp = 0): oDeflatorResolver;
{
  var deflatorMnplanNrec: comp = 0;
  deflatorMnplanNrec := getIncomePlanNrec(mnplanNrec);

  if deflatorMnplanNrec = 0
    result := GetLastDeflatorResolver(deflatorFptperNrec);
  else
    result := GetDeflatorResolver(deflatorMnplanNrec, deflatorFptperNrec);
}

function GetLastDeflatorResolver(deflatorFptperNrec: comp = 0): oDeflatorResolver;
{
  result := GetDeflatorResolver(getLastPlanNrec, deflatorFptperNrec);
}

end.
