#include Stock.vih

#component "AGAT"

interface StockParams;

var
  _groupByFlags      : longint;
  _filterFlags       : longint;
  _fltrKatmcMarker   : longint;
  _fltrKatpodrMarker : longint;
  _fltrKatmolMarker  : longint;
  _fltrKatpartyMarker: longint;
  _fltrKatstroyMarker: longint;
  _onDate            : date;

//#region Help functions

procedure SetFlag(aFlag: longint; var aFlags: longint);
{
  aFlags := aFlags or aFlag;
}

procedure UnsetFlag(aFlag: longint; var aFlags: longint);
{
  aFlags := aFlags and (not aFlag);
}

function IsFlagSet(aFlag: longint; aFlags: longint): boolean;
{
  result := (aFlag and aFlags) > 0;
}

procedure ClearFilterMarker(aMarker: longint);
{
  if aMarker != 0
    clearmarker(aMarker);
}

procedure ClearFilterIfFlagSet(aFlag: longint; aFlags: longint; aMarker: longint);
{
  if isFlagSet(aFlag, aFlags) ClearFilterMarker(aMarker);
}

procedure AddFilterMarker(aMarker: longint; aNrec: comp);
{
  if aMarker != 0
    insertMarker(aMarker, aNrec);
}

procedure AddFilterIfFlagSet(aFlag: longint; aFlags: longint; aMarker: longint; aNrec: comp);
{
  if isFlagSet(aFlag, aFlags) AddFilterMarker(aMarker, aNrec);
}

//#endregion

function SetGroupByFlag  (warehouseSectionFlag: longint): IStockParams;
{
  SetFlag(warehouseSectionFlag, _groupByFlags);
  result := IStockParams(self);
}

function UnsetGroupByFlag(warehouseSectionFlag: longint): IStockParams;
{
  UnsetFlag(warehouseSectionFlag, _groupByFlags);
  result := IStockParams(self);
}

function SetFilterFlag   (warehouseSectionFlag: longint): IStockParams;
{
  SetFlag(warehouseSectionFlag, _filterFlags);
  result := IStockParams(self);
}

function UnsetFilterFlag (warehouseSectionFlag: longint): IStockParams;
{
  UnsetFlag(warehouseSectionFlag, _filterFlags);
  result := IStockParams(self);
}

function ClearFilter (warehouseSectionFlag: longint): IStockParams;
{
  ClearFilterIfFlagSet(WarehouseSectionFlag_Katmc   , warehouseSectionFlag, fltrKatmcMarker);
  ClearFilterIfFlagSet(WarehouseSectionFlag_Katpodr , warehouseSectionFlag, fltrKatpodrMarker);
  ClearFilterIfFlagSet(WarehouseSectionFlag_Katmol  , warehouseSectionFlag, fltrKatmolMarker);
  ClearFilterIfFlagSet(WarehouseSectionFlag_Katparty, warehouseSectionFlag, fltrKatpartyMarker);
  ClearFilterIfFlagSet(WarehouseSectionFlag_Katstroy, warehouseSectionFlag, fltrKatstroyMarker);
  result := IStockParams(self);
}

function AddNrecToFilter (warehouseSectionFlag: longint; aNrec: comp): IStockParams;
{
  AddFilterIfFlagSet(WarehouseSectionFlag_Katmc   , warehouseSectionFlag, fltrKatmcMarker   , aNrec);
  AddFilterIfFlagSet(WarehouseSectionFlag_Katpodr , warehouseSectionFlag, fltrKatpodrMarker , aNrec);
  AddFilterIfFlagSet(WarehouseSectionFlag_Katmol  , warehouseSectionFlag, fltrKatmolMarker  , aNrec);
  AddFilterIfFlagSet(WarehouseSectionFlag_Katparty, warehouseSectionFlag, fltrKatpartyMarker, aNrec);
  AddFilterIfFlagSet(WarehouseSectionFlag_Katstroy, warehouseSectionFlag, fltrKatstroyMarker, aNrec);
  result := IStockParams(self);
}

function GetFltrMarker(var aMarker: longint): longint;
{
  if aMarker = 0
    aMarker := InitMarker('',8,100,10,false);
  result := aMarker;
}

procedure SetFltrMarker(value: longint; var aMarker: longint);
{
  if value != aMarker
  {
    if aMarker != 0
      DoneMarker(aMarker, '');
    aMarker := value;
  }
}

property GroupByFlags      : longint absolute _groupByFlags;
property FilterFlags       : longint absolute _filterFlags;

property fltrKatmcMarker   : longint read GetFltrMarker(_fltrKatmcMarker)    write SetFltrMarker(result, _fltrKatmcMarker);
property fltrKatpodrMarker : longint read GetFltrMarker(_fltrKatpodrMarker)  write SetFltrMarker(result, _fltrKatpodrMarker);
property fltrKatmolMarker  : longint read GetFltrMarker(_fltrKatmolMarker)   write SetFltrMarker(result, _fltrKatmolMarker);
property fltrKatpartyMarker: longint read GetFltrMarker(_fltrKatpartyMarker) write SetFltrMarker(result, _fltrKatpartyMarker);
property fltrKatstroyMarker: longint read GetFltrMarker(_fltrKatstroyMarker) write SetFltrMarker(result, _fltrKatstroyMarker);

property OnDate            : date absolute _onDate;

end.
