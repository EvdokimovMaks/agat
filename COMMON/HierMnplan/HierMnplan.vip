#include HierMnplan.vih

#component "M_MNPLAN"

interface iSpSpPl01Hier;

OverloadFormats tr1, tr2, brhide, brhidetwo;

var
  _parentNrec: comp;
  _parentNrecForNewRecord: comp;
  _boundByParentIsActive: boolean;

create view
as select *
from spmnplan childSpMnPlan
where ((
  spmnplan.nrec == childSpMnPlan.cSpMnPlan
))
bounds byParent = _parentNrec == SpMnPlan.cSpMnPlan
;

create view vhier
var
  _mnplanNrec: comp;
  _hierParentNrec: comp;
as select *
from spmnplan, spmnplan parentSpmnplan
where ((
  _mnplanNrec     == spmnplan.cmnplan and
  _hierParentNrec == spmnplan.cspmnplan and
  _hierParentNrec == parentSpmnplan.nrec
));

panel pnMain
show at (,,30,)
table SpMnPlan;

tree tr1  ( ,,sci1478EscExInsTree);
  show at (,,30,);
  AlwaysShowHScroll
  Table SpMnPlan;//,EventNavigation;
  fields
   SpMnPlan.Number      '' ('Номер пункта',,):[5], {Font = { Bold = ( IsValid(tnPick))}};
   TypeIzdPlan          '' ('Тип объекта планирования',,sci1478EscExInsTree):[4], Protect, PickButton, {Font = { Bold = ( IsValid(tnPick))}};
   ObjPlan              '' ('Наименование',,sci1478EscExInsTree):[20],  Protect, PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   NameAlgField_01      '' ('Вычисляемое поле N1',,sci1478EscExInsTree) : [10], Protect, {Font = { Bold = ( IsValid(tnPick)) BackColor = getBackColor(1)} };
   NameAlgField_02      '' ('Вычисляемое поле N2',,sci1478EscExInsTree) : [10], Protect, {Font = { Bold = ( IsValid(tnPick)) BackColor = getBackColor(2)} };
   NameAlgField_03      '' ('Вычисляемое поле N3',,sci1478EscExInsTree) : [10], Protect, {Font = { Bold = ( IsValid(tnPick)) BackColor = getBackColor(3)} } ;
   NameAlgField_04      '' ('Вычисляемое поле представления N1',,sci1478EscExInsTree) : [10], Protect, {Font = { Bold = ( IsValid(tnPick)) BackColor = getBackColor(4)}};
   NameAlgField_05      '' ('Вычисляемое поле представления N2',,sci1478EscExInsTree) : [10], Protect, {Font = { Bold = ( IsValid(tnPick)) BackColor = getBackColor(5)}};
   NameAlgField_06      '' ('Вычисляемое поле представления N3',,sci1478EscExInsTree) : [10], Protect, {Font = { Bold = ( IsValid(tnPick)) BackColor = getBackColor(6)}};
   SPMNPLANRazr         '' ('Признак продукта: П-потребность, В-выход. F3 - изменить. ',,sci1478EscExInsTree):[3], NoAutoSize, Protect,  PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   ObjKod               '' ('Код',,sci1478EscExInsTree):[10],  Protect, PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   ObjObozn             '' ('Обозначение',,):[10], Protect, {Font = { Bold = ( IsValid(tnPick))}};
   SPMNPLAN.Razr        '' ('Разряд ',,):[6], Protect, {Font = { Bold = ( IsValid(tnPick))}};
   SPMNPLAN.CodTar      '' ('Код тарифа',,sci1478EscExInsTree):[6],  Protect, PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   CatalogsCodePersonsTabNmb '' ('Код профессии/табельный номер',,):[10], Protect, {Font = { Bold = ( IsValid(tnPick))}};
   SPMNPLANCodTar       '' ('Признак продуктов выхода: ПВ-полезный выход, ИО-используемый отход, НО-неиспользуемый отход',,sci1478EscExInsTree):[6],  NoProtect, PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   KlSisOpl.NASISOPL    '' ('Система оплаты',,sci178InsPM):[7], Protect, {Font = { Bold = ( IsValid(tnPick))}};
   SpMnPlan.EdTime      '' ('Единица измерения времени',,):
              [List xHour 'Час',xMin 'Мин.',xSec 'Сек.',xDay 'Сутки'], Protect, {Font = { Bold = ( IsValid(tnPick))}};
   EdIzm                '' ('Единица измерения',,sci1478EscExInsTree):[5],  Protect, PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   StatusSpMnPlan       '' ('Статус',,sci1478EscExInsTree):[11], protect,  PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   PosStateName         '' ('Состояние строки',,sci1478EscExInsTree):[11], protect,  PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   FarInfo.Name         '' ('Приоритет',,sci1478EscExInsTree):[8], Protect,  PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   SPMNPLAN.StartDate   '' ('Начало периода',,):[10], {Font = { Bold = ( IsValid(tnPick))}};
   SPMNPLAN.EndDate     '' ('Окончание периода',,):[10], {Font = { Bold = ( IsValid(tnPick))}};
   SPMNPLAN.StartDateFact'' ('Дата начала фактическая',,):[10], {Font = { Bold = ( IsValid(tnPick))}};
   SPMNPLAN.EndDateFact  '' ('Дата окончания фактическая',,):[10], {Font = { Bold = ( IsValid(tnPick))}};
   SPMNPLAN.CondRec     '' ('Добавлен',,):[11],
    [List 'Вручную','Автомат.'], Protect, {Font = { Bold = ( IsValid(tnPick))}};
   fAnal1               '' ('',,sci1478EscExInsTree):[10],protect, PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   EdIzmPlanOper        '' ('Единица измерения Изделия(МЦ/Услуга)',,sci1478EscExInsTree):[5],  Protect, PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   fAnal2               '' ('',,sci1478EscExInsTree):[10],protect, PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   fAnal3               '' ('',,sci1478EscExInsTree):[10],protect, PickButton,{Font = { Bold = ( IsValid(tnPick))}};
   Fld1  '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,1)  }},  [14], noprotect;//,NOAUTOSIZE;
   Fld2  '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,2)  }},  [14], noprotect;//,NOAUTOSIZE;
   Fld3  '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,3)  }},  [14], noprotect;//,NOAUTOSIZE;
   Fld4  '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,4)  }},  [14], noprotect;//,NOAUTOSIZE;
   Fld5  '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,5)  }},  [14], noprotect;//,NOAUTOSIZE;
   Fld6  '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,6)  }},  [14], noprotect;//,NOAUTOSIZE;
   Fld7  '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,7)  }},  [14], noprotect;//,NOAUTOSIZE;
   Fld8  '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,8)  }},  [14], noprotect;//,NOAUTOSIZE;
   Fld9  '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,9)  }},  [14], noprotect;//,NOAUTOSIZE;
   Fld10 '' ('',,sci1478Esc) : {Font = {BackColor = GetColorField(SpMnPlan.Nrec,10) }}, [14], noprotect;//,NOAUTOSIZE;
end;

tree brHide;
Table SpMnPlan;
fields
 '' ('В данном режиме информация не отображается.');
end; // browse brHide

end; //panel pnMain

Panel pnScrl;
show at (31,,,)
Table SpMnPlan;

tree Tr2 ('',,sci1478EscExInsTree);     //'',hcZakaz_redplan_vkl_D, sci14Esc
NoMove, ExcelColumns, AlwaysShowHScroll, noBitmap, noLines
Table SpMnPlan;
fields
  '': [1], skip, noautosize;
  //NullTree 'Ноль'   :[2],Protect,skip;
  isPokFirst '',''  : [2],  protect,NOAUTOSIZE ;
  isPokLeft  '',''  : [2],  protect,NOAUTOSIZE;
  Fld1  ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,1)  }},  [14], noprotect;//,NOAUTOSIZE;
  Fld2  ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,2)  }},  [14], noprotect;//,NOAUTOSIZE;
  Fld3  ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,3)  }},  [14], noprotect;//,NOAUTOSIZE;
  Fld4  ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,4)  }},  [14], noprotect;//,NOAUTOSIZE;
  Fld5  ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,5)  }},  [14], noprotect;//,NOAUTOSIZE;
  Fld6  ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,6)  }},  [14], noprotect;//,NOAUTOSIZE;
  Fld7  ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,7)  }},  [14], noprotect;//,NOAUTOSIZE;
  Fld8  ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,8)  }},  [14], noprotect;//,NOAUTOSIZE;
  Fld9  ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,9)  }},  [14], noprotect;//,NOAUTOSIZE;
  Fld10 ' '#13#3''#13#3'',''       :  {Font = {BackColor = GetColorField(SpMnPlan.Nrec,10)  }}, [14], noprotect;//,NOAUTOSIZE;
  isPokRight ''  : [2],  protect,NOAUTOSIZE;
  isPokLast  ''  : [2],  protect,NOAUTOSIZE;
end;

tree brHideTwo;
Table SpMnPlan;
fields
 '' ('В данном режиме информация не отображается.');
end; // browse brHide

end; //Panel pnScrl

procedure checkBounds;
{
  if _boundByParentIsActive and (not boundactive(tbByParent))
    AddBounds(tbByParent)
  else if (not _boundByParentIsActive) and boundactive(tbByParent)
    SubBounds(tbByParent)
}

procedure ActivateBoundByParent;
{
  _boundByParentIsActive := true;
  checkBounds;
}

procedure DeactivateBoundByParent;
{
  _boundByParentIsActive := false;
  checkBounds;
}

function DelHierSpmnplan(aParentNrec: comp): boolean;
{
  var rslt: boolean;
  rslt := true;
  vhier._mnplanNrec     := cpMnplan;
  vhier._hierParentNrec := aParentNrec;
  vhier._loop spmnplan
  {
    pushpos(#vhier.spmnplan);
    rslt := DelHierSpmnplan(vhier.spmnplan.nrec);
    poppos(#vhier.spmnplan);
    vhier._mnplanNrec     := cpMnplan;
    vhier._hierParentNrec := aParentNrec;
    if not rslt break
  }
  if rslt and (vhier.getfirst parentSpMnplan = tsOk)
  {
    RunJScriptForInsDelSpMnPlan(word(1));
    stSpMnPlanRunAlg := TSpMnPlan(vhier.parentSpmnplan.Buffer);
    stOldSpMnPlanRunAlg := TSpMnPlan(vhier.parentSpmnplan.Buffer);
    if ( EnableRunAlgCondition )
    {
      if ( EnableCheckModifSpMnPlan ) // Удаление позиции
        if ( pRunAlgPlan.CheckModifSpMnPlan ( stOldSpMnPlanRunAlg, stSpMnPlanRunAlg, MnPlan.TypePlan, word(128) ) )
          RunAlgCondition ( 0 ); // Выполнить алгоритмы по условиям
    }
    else EnableRunAlgCondition := True;
    result := InsTbl.deleteSpMnPlan(vhier.parentSpmnplan.Nrec);
  }
  else
    result := false;
}

panel pnMain table SpMnPlan;

handleevent
  cmTreeTop      : { _parentNrec := 0; checkBounds; }
  cmTreeUp       : { _parentNrec := SpMnPlan.cSpMnPlan; checkBounds; }
  cmTreeDown     : { _parentNrec := SpMnPlan.Nrec; checkBounds; }
  cmTreeNeedOwner: { TreeJumpToRecord(tr1, SpMnPlan.cSpMnPlan); }
  cmTreeNodeType : if (TreeIsTerminal(tr1)) TreeSetNodeType(tr1, ntfText);
  cmAddNewRec:
  {
    _parentNrecForNewRecord := SpMnPlan.cSpMnPlan;
    if NewRecord
    {
      set SpMnPlan.cSpMnPlan := _parentNrecForNewRecord;
      FlagcmInsert := True;
      inherited::handleevent(cmInsertRecord);
      rereadrecord(#SpMnPlan);
    }
    stop;
  }
  cmInsLevel:
  {
    pushpos(#SpMnPlan);
    _parentNrecForNewRecord := SpMnPlan.Nrec;
    if inherited::handleevent(cmSetDefault) = heOk
    {
      var c: comp; c := GetNextNrec(#SpMnPlan, 0);
      set SpMnPlan.cSpMnPlan := _parentNrecForNewRecord;
      set SpMnPlan.Nrec := c;
      FlagcmInsert := True;
      inherited::handleevent(cmInsertRecord);
    }
    poppos(#SpMnPlan);
    RereadRecord(#SpMnPlan);
    TreeOpenNode(tr1);
    stop;
  }
  cmDelete:
  {
    if ( GetEnableEditDocReg( True, 2, 0, 0 ) )
      DelHierSpmnplan(SpMnPlan.Nrec);
    RedrawCurrentAndGo(tr1, false);
    rereadrecord(#spmnplan);
    stop;
  }
end;

end;

function Util_ScrSp.GetNameInter : String;
{
  result := 'iSpSpPl01Hier';
}
function Util_ScrSp.GetNum : word;
{
  result := 10550;
}
Function Util_ScrSp.GetName: String;
{
  result := 'Иерархический интерфейс';
}

function  Util_ScrSp.SetOwner( ccMnPlan : comp ) : Boolean;
{
  result := inherited::SetOwner(ccMnPlan);
  ActivateBoundByParent;
  _parentNrec := 0;
  rereadrecord(#SpMnPlan);
}

end.
