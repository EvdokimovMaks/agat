#include QueryText.vih
#include SqlTmpTable.vih

#component "AGAT"

interface SqlString_InMarker;

var
  _marker     : longint;
  _tblManager : SqlTmpTableManager;
  _markerTable: SqlTmpTable noauto;

procedure ISqlString.Create(var sqlString: longint; params: IParams = nullref);
{
  if _marker != 0
  {
    var cnt: longint;
    cnt := getMarkerCount(_marker);

    if cnt = 1
    {
      var c: comp = 0;
      if getmarker(_marker, 0, c)
        sqlAddStr(sqlString, '= #comp('+string(c,0,0)+')');
    }
    else if cnt > 1 and cnt <= 10
    {
      sqlAddStr(sqlString, 'in (');
      var c: comp = 0;
      var i: longint;
      for(i:=0; getmarker(_marker, i, c); i++)
        sqlAddStr(sqlString, if(i=0,'',',')+'#comp('+string(c,0,0)+')');
      sqlAddStr(sqlString,')');
    }
    else if cnt > 10
    {
      _markerTable.Truncate;
      _tblManager.FillSqlTmpTableWithMarker(_marker, _markerTable, 'crec');
      sqlAddStr(sqlString, 'in (select crec from '+_markerTable.TableName+')');
    }
  }
  params := params;
}

constructor SqlString_InMarker(aMarker: longint);
{
  _marker      := aMarker;
  _markerTable := _tblManager.CreateTmpTableShort('crec: comp');
  result := _markerTable != nullref;
}

constructor Init;
{
  _markerTable := _tblManager.CreateTmpTableShort('crec: comp');
  result := _markerTable != nullref;
}

property Marker   : longint absolute _marker;

end.
