#include SqlTmpTable.vih

#component "AGAT"

interface SqlTmpTable;

var
  _tableName: string;

function isStringArrayEmpty(arr: TStringArray): boolean;
{
  result := true;
  var i: integer;
  for(i:=0; i < count(arr); i++)
  {
    if trim(arr[i]) != ''
    {
      result := false;
      break;
    }
  }
}

procedure SqlAddStringArray(var s: longint; arr: TStringArray; delimiter: string=',');
{
  var isFirst: boolean = true;
  var i: integer;
  for(i:=0; i < count(arr); i++)
  {
    if(arr[i] != '')
    {
      sqladdstr(s, if(not isFirst,delimiter,'') + arr[i]);
      isFirst := false;
    }
  }
}

constructor Create(fieldsArray: TStringArray; indexesArray: TStringArray; aTableName: string; mode: word = ctmNormal);
{
  _tableName := aTableName;

  //message(fieldsArray[0]+' '+_tableName+' '+if(isStringArrayEmpty(fieldsArray),'empty','not empty'));
  if isStringArrayEmpty(fieldsArray) or _tableName = ''
  {
    //message('result = false');
    result := false
  }
  else
  {
    var s: longint;
    sqladdstr(s, 'table '+tableName+' (');
    SqlAddStringArray(s, fieldsArray);
    if not isStringArrayEmpty(indexesArray)
    {
      sqladdstr(s, ') with index (');
      SqlAddStringArray(s, indexesArray);
    }
    sqladdstr(s,');');
    result := sqlCreateTmpTable(s, mode) = tsOk;
  }

}

destructor Done;
{
  if _tableName != ''
    sqlDropTmpTable(_tableName);
}

function Truncate: word;
{
  if _tableName != ''
    result := sqlTruncateTmpTable(_tableName);
  else
    result := -1;
}

property TableName: string read _tableName;

end.
