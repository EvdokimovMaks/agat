#include QueryText.vih

#component "AGAT"

interface JoinTableInMarker;

var
  _tableName : string;
  _tableAlias: string;
  _fieldName : string;
  _marker    : longint;
  _onClause  : ISqlString;
  _inMarker  : SqlString_InMarker noauto;

function TableNameOrAlias: string;
{
  result := if(_tableAlias!='', _tableAlias, _tableName);
}

function FullFieldName: string;
{
  result := TableNameOrAlias + '.' + _fieldName;
}

procedure IQueryText.CreateJoin   (var sqlString: longint; params: IParams = nullref);
{
  inherited::CreateJoin(sqlString, params);
  if getmarkercount(_marker) > 0 and not foundmarker(_marker, comp(0))
  {
    sqlAddStr(sqlString, 'join ' + _tableName + ' ' + _tableAlias + ' on');
    if _onClause != nullref
    {
      _onClause.Create(sqlString);
      sqlAddStr(sqlString, 'and');
    }
    sqlAddStr(sqlString, FullFieldName);
    _inMarker.Marker := _marker;
    _inMarker.Create(sqlString);
  }
  else
  {
    sqlAddStr(sqlString, 'left join ' + _tableName + ' ' + _tableAlias);
    if _onClause != nullref
    {
      sqlAddStr(sqlString, 'on');
      _onClause.Create(sqlString);
    }
  }
}

procedure IQueryText.CreateWhere  (var sqlString: longint; params: IParams = nullref);
{
  inherited::CreateWhere(sqlString, params);
  if getmarkercount(_marker) > 0 and foundmarker(_marker, comp(0))
  {
    sqlAddStr(sqlString, 'and coalesce('+FullFieldName+',#comp(0))');
    _inMarker.Marker := _marker;
    _inMarker.Create(sqlString);
  }
}

constructor Init;
{
  _inMarker := new(SqlString_InMarker);
  result := true;
}

constructor JoinTableInMarker(aTableName: string;
                              aFieldName: string;
                              aMarker: longint;
                              aTableAlias: string = '';
                              aOnClause: ISqlString = nullref);
{
  _tableName  := aTableName;
  _fieldName  := aFieldName;
  _marker     := aMarker;
  _tableAlias := aTableAlias;
  _onClause   := aOnClause;
  _inMarker := new(SqlString_InMarker, SqlString_InMarker(_marker));
  result := true;
}

property TableName : string     absolute _tableName;
property TableAlias: string     absolute _tableAlias;
property FieldName : string     absolute _fieldName;
property Marker    : longint    absolute _marker;
property OnClause  : ISqlString absolute _onClause;

end.
