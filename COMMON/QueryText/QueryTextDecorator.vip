#include QueryText.vih

#component "AGAT"

interface QueryTextDecorator;

var
  _baseQueryText: IQueryText;

function isBaseQueryTextValid: boolean;
{
  result := _baseQueryText != nullref;
}

procedure IQueryText.CreateSelect (var sqlString: longint; params: IParams = nullref);
{
  if isBaseQueryTextValid _baseQueryText.CreateSelect(sqlString, params);
}

procedure IQueryText.CreateFrom   (var sqlString: longint; params: IParams = nullref);
{
  if isBaseQueryTextValid _baseQueryText.CreateFrom(sqlString, params);
}

procedure IQueryText.CreateJoin   (var sqlString: longint; params: IParams = nullref);
{
  if isBaseQueryTextValid _baseQueryText.CreateJoin(sqlString, params);
}

procedure IQueryText.CreateWhere  (var sqlString: longint; params: IParams = nullref);
{
  if isBaseQueryTextValid _baseQueryText.CreateWhere(sqlString, params);
}

procedure IQueryText.CreateGroupBy(var sqlString: longint; params: IParams = nullref);
{
  if isBaseQueryTextValid _baseQueryText.CreateGroupBy(sqlString, params);
}

procedure IQueryText.CreateOrderBy(var sqlString: longint; params: IParams = nullref);
{
  if isBaseQueryTextValid _baseQueryText.CreateOrderBy(sqlString, params);
}

property IQueryTextDecorator.BaseQueryText: IQueryText absolute _baseQueryText;

end.
