#include SqlTmpTable.vih
#include Query.vih

#component "AGAT"

interface SqlTmpTableManager;

var
  _tablenameCounter: comp = 0;

function GetNewTmpTableName: string;
{
  result := 't'+string(comp(_CurDateTime))+string(_tablenameCounter++);
}

function CreateTmpTable(fieldsArray : TStringArray;
                        indexesArray: TStringArray;
                        tableName   : string = '';
                        mode        : word = ctmNormal): SqlTmpTable;
{
  if tableName = ''
    tableName := GetNewTmpTableName;

  var tbl: SqlTmpTable noauto;
  tbl := new(SqlTmpTable, Create(fieldsArray, indexesArray, tableName, mode));
  result := tbl;
}

function CreateTmpTableShort(fieldsString : string;
                             indexesString: string = '';
                             tableName    : string = '';
                             mode         : word = ctmNormal): SqlTmpTable;
{
  var fieldsArray: TStringArray;
  fieldsArray[0] := fieldsString;
  var indexesArray: TStringArray;
  indexesArray[0] := indexesString;
  result := CreateTmpTable(fieldsArray, indexesArray, tableName, mode);
}

function FillSqlTableWithMarker(lMarker: longint;
                                tableName: string;
                                fieldName: string): boolean;
{
  if lMarker = 0 or tableName = '' or fieldName = ''
    result := false
  else
  {
    result := true;
    var q: IQuery;
    q := queryManager.createQuery('insert '+tableName+' ('+fieldName+') values (:value)');
    var c: comp = 0;
    var i: longint = 0;
    for (i := 0; getmarker(lMarker, i, c); i++)
    {
      result := result and q.setParam('value', c).execute.errorCode = tsOk;
    }
  }
}


function FillSqlTmpTableWithMarker(lMarker: longint;
                                   aTable: SqlTmpTable;
                                   fieldName: string): boolean;
{
  result := FillSqlTableWithMarker(lMarker, aTable.TableName, fieldName);
}

end.
