#include UserFilter.vih
#include UserFilterViewmodel.vih
#include Params.vih
#include GetKau.vih

#component "AGAT"

interface UserFilterByMarkerViewmodelDescr;

create view
as select *
from tunedef, tuneval
where ((
  'USER.DESCR' == tunedef.code and
  tunedef.nrec == tuneval.ctune and
  1            == tuneval.obj and
  (foundmarker(IUserFilterByMarker(_filter).Marker, tuneval.cuser))
));

function IUserFilterMarkerViewmodel.Presentation: string;
{
  result := '';

  if getfirst fastfirstrow tunedef = tsOk
  {
    var s: string = '';
    _loop tuneval
      s += if(s='','','; ') + tuneval.strval;
    result := s;
  }
}

function GetParam(aParams: IParams; aParamName: string; aDefaultValue: variant): variant;
{
  if aParams = nullref
    result := aDefaultValue
  else
    result := aParams.GetParam(aParamName, aDefaultValue);
}

function IUserFilterMarkerViewmodel.Pick(params: IParams = nullref): boolean;
{
  result := false;

  var isSingle: boolean;
  isSingle := boolean(GetParam(params, 'IsSingle', 0));

  var lMarker: longint;
  lMarker := IUserFilterByMarker(_filter).Marker;

  if isSingle
  {
    var s: string[20] = '';
    if runinterface(C_COMMON::GetDescr, s, '', 0) = cmDefault
    {
      clearmarker(lMarker);
      insertmarker(lMarker, comp(s));
      IsSet  := true;
      result := true;
    }
  }
  else
  {
    if runinterface(C_COMMON::GetSomeDescr, false) = cmDefault
    {
      var l: longint;
      l := initmarker('UserTuneDescr', 8, 10, 100);
      copymarker(lMarker, l);
      donemarker(l,'');
      IsSet  := true;
      result := true;
    }
  }
}

end.
