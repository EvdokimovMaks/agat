#include UserFilter.vih
#include UserFilterViewmodel.vih
#include Params.vih
#include GetKau.vih
#include GetSNote.vih

#component "AGAT"

interface UserFilterByMarkerViewmodelKatnotes;

var
  _viddoc: word;

create view
as select *
from katnotes;

function IUserFilterMarkerViewmodel.Presentation: string;
{
  var lMarker: longint;
  lMarker := IUserFilterByMarker(_filter).Marker;

  var s: string  = '';
  var i: longint = 0;
  var c: comp    = 0;

  for(i := 0; getmarker(lMarker, i, c); i++)
  {
    if getfirst fastfirstrow katnotes where ((c == katnotes.nrec)) = tsOk
      s += if(s='','','; ') + katnotes.name;
  }

  result := s;
}

function GetParam(aParams: IParams; aParamName: string; aDefaultValue: variant): variant;
{
  if aParams = nullref
    result := aDefaultValue
  else
    result := aParams.GetParam(aParamName, aDefaultValue);
}

function IUserFilterMarkerViewmodel.Pick(params: IParams = nullref): boolean;
{
  result := false;

  var isSingle: boolean;
  isSingle := boolean(GetParam(params, 'IsSingle', 0));

  var lMarker: longint;
  lMarker := IUserFilterByMarker(_filter).Marker;

  if isSingle
  {
    var c: comp = 0;
    if runinterface(L_DOGOVOR::GetSomKatNotes, _viddoc, 0, 0, false, c, IGetSomKatNotes(NullRef)) = cmDefault
    {
      clearmarker(lMarker);
      insertmarker(lMarker, c);
      IsSet  := true;
      result := true;
    }
  }
  else
  {
    var c: comp = 0;
    if runinterface(L_DOGOVOR::GetSomKatNotes, _viddoc, 0, 0, true, c, IGetSomKatNotes(NullRef)) = cmDefault
    {
      var l: longint;
      l := initmarker('MKatNotes', 8, 10, 100);
      copyMarker(lMarker, l);
      IsSet  := true;
      result := true;
    }
  }
}

constructor ConstructorWithViddoc(aFilter: IUserFilterByMarker; aTitle: string=''; aViddoc: word = 0);
{
  _filter := IUserFilter(aFilter);
  _title  := aTitle;
  _viddoc := aViddoc;
  result := true;
}

property Viddoc: word absolute _viddoc;

end.
