#include UserFilter.vih
#include UserFilterViewmodel.vih
#include Params.vih
#include GetKau.vih

#component "AGAT"

interface UserFilterByMarkerViewmodelKAU;

var
  _kodgrKAU: word;
  _getkau: GetKau;

function IUserFilterMarkerViewmodel.Presentation: string;
{
  var lMarker: longint;
  lMarker := IUserFilterByMarker(_filter).Marker;

  var cnt: longint;
  cnt := getmarkercount(lMarker);

  case cnt of
    0: result := '';
    1: {
      var c: comp;
      if getmarker(lMarker, 0, c)
        result := if(c=0,'<пусто>',if(getanykau(1,_kodgrKAU, c), givenanname(1), ''));
      else
        result := '';
    }
    else
      result := 'Выбрано позиций: ' + cnt;
  end;
}

function GetParam(aParams: IParams; aParamName: string; aDefaultValue: variant): variant;
{
  if aParams = nullref
    result := aDefaultValue
  else
    result := aParams.GetParam(aParamName, aDefaultValue);
}

function IUserFilterMarkerViewmodel.Pick(params: IParams = nullref): boolean;
{
  result := false;

  var isSingle: boolean;
  isSingle := boolean(GetParam(params, 'IsSingle', 0));

  var lMarker: longint;
  lMarker := IUserFilterByMarker(_filter).Marker;

  if isSingle
  {
    var c: comp;
    getmarker(lMarker, 0, c);
    if _getkau.GetCodeKau(1, kodgrkau, c) > 0
    {
      clearmarker(lMarker);
      insertmarker(lMarker, c);
      IsSet  := true;
      result := true;
    }
  }
  else
  {
    if _getkau.GetCodeKau(2, kodgrkau, 0) > 0
    {
      var l: longint;
      l := initmarker(_getkau.GetMarkerName(kodgrkau), 8, 10, 100, false);
      copymarker(lMarker, l);
      donemarker(l,'');
      IsSet  := true;
      result := true;
    }
  }
}

constructor ConstructorWithKAU(aFilter: IUserFilterByMarker; aTitle: string=''; aKodgrKau: word = 0);
{
  _filter := IUserFilter(aFilter);
  _title  := aTitle;
  _kodgrKAU := aKodgrKau;
  result := true;
}

property KodgrKAU: word absolute _kodgrKAU;

end.
