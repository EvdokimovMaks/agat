#include UserFilter.vih
#include System.vih

#component "AGAT"

interface UserFilterGroup;

var
  _filters: IList;

function GetFiltersEnumerator: IEnumerator;
{
  result := _filters.GetEnumerator;
}

function GetIsset: boolean;
{
  result := true;

  var e: IEnumerator;
  e := GetFiltersEnumerator;

  while e.MoveNext
  {
    var uf: IUserFilter;
    uf := IUserFilter(e.Current);
    if uf = nullref
    {
      result := false;
      break;
    }
    else if not uf.IsSet
    {
      result := false;
      break;
    }
  }
}

procedure SetIsset(value: boolean);
{
  var e: IEnumerator;
  e := GetFiltersEnumerator;

  while e.MoveNext
  {
    var uf: IUserFilter;
    uf := IUserFilter(e.Current);
    if uf != nullref
      uf.IsSet := value;
  }
}

function IUserFilter.InitFilter: boolean;
{
  result := true;

  var e: IEnumerator;
  e := GetFiltersEnumerator;

  while e.MoveNext
  {
    var uf: IUserFilter;
    uf := IUserFilter(e.Current);

    if uf = nullref
      result := false;
    else
      result := result and uf.InitFilter;
  }
}

function IUserFilter.DoneFilter: boolean;
{
  result := true;

  var e: IEnumerator;
  e := GetFiltersEnumerator;

  while e.MoveNext
  {
    var uf: IUserFilter;
    uf := IUserFilter(e.Current);

    if uf = nullref
      result := false;
    else
      result := result and uf.DoneFilter;
  }
}

function IUserFilter.SetDefault: boolean;
{
  result := true;

  var e: IEnumerator;
  e := GetFiltersEnumerator;

  while e.MoveNext
  {
    var uf: IUserFilter;
    uf := IUserFilter(e.Current);

    if uf = nullref
      result := false;
    else
      result := result and uf.SetDefault;
  }
}

property IUserFilter.IsSet: boolean read GetIsset write SetIsset(result);


constructor Init;
{
  _filters := IList(new(System::List));
  result := _filters != nullref;
}

procedure AddUserFilter(aFilter: IUserFilter);
{
  if aFilter != nullref
    _filters.Add(aFilter);
}

property FiltersList: IList absolute _filters;

end.
