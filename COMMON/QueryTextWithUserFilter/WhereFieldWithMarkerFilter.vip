#include QueryTextWithUserFilter.vih
#include QueryText.vih
#include UserFilter.vih
#include Query.vih

#component "AGAT"

interface WhereFieldWithMarkerFilter;

var
  _filter           : IUserFilterByMarker;
  _fieldName        : string;
  _emptyMarker      : longint;
  _inMarker         : SqlString_InMarker noauto;

function GetFilterMarker: longint;
{
  result := _emptyMarker;
  if _filter != nullref
    if _filter.IsSet
      result := _filter.Marker;
}

constructor WhereFieldWithMarkerFilter(aFilter    : IUserFilterByMarker;
                                       aFieldName : string);
{
  _emptyMarker       := initmarker('',8,1,1,false);
  _filter            := aFilter;
  _fieldName         := aFieldName;
  _inMarker          := new(SqlString_InMarker, SqlString_InMarker(GetFilterMarker));
  result := true;
}

destructor Done;
{
  donemarker(_emptyMarker,'');
}

procedure IQueryText.CreateWhere  (var sqlString: longint; params: IParams = nullref);
{
  inherited::CreateWhere(sqlString, params);
  if _filter.IsSet
  {
    sqlAddStr(sqlString, 'and '+_fieldName);
    _inMarker.Marker := GetFilterMarker;
    _inMarker.Create(sqlString);
  }
}

end.
