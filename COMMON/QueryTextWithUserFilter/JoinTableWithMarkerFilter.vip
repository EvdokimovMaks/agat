#include QueryTextWithUserFilter.vih
#include QueryText.vih
#include UserFilter.vih
#include Query.vih

#component "AGAT"

interface JoinTableWithMarkerFilter;

var
  _filter           : IUserFilterByMarker;
  _emptyMarker      : longint;
  _joinTblInMarker  : JoinTableInMarker noauto;

function GetFilterMarker: longint;
{
  result := _emptyMarker;
  if _filter != nullref
    if _filter.IsSet
      result := _filter.Marker;
}

constructor JoinTableWithMarkerFilter(aTableName : string;
                                      aFieldName : string;
                                      aFilter    : IUserFilterByMarker;
                                      aTableAlias: string = '';
                                      aOnClause  : ISqlString = nullref);
{
  _emptyMarker       := initmarker('',8,1,1,false);
  _filter            := aFilter;
  _joinTblInMarker   := new(JoinTableInMarker,
                            JoinTableInMarker(aTableName, aFieldName, GetFilterMarker, aTableAlias, aOnClause));
  result := true;
}

destructor Done;
{
  donemarker(_emptyMarker,'');
}

procedure IQueryText.CreateJoin   (var sqlString: longint; params: IParams = nullref);
{
  inherited::CreateJoin(sqlString, params);
  _joinTblInMarker.Marker := GetFilterMarker;
  _joinTblInMarker.CreateJoin(sqlString, params);
}

procedure IQueryText.CreateWhere  (var sqlString: longint; params: IParams = nullref);
{
  inherited::CreateWhere(sqlString, params);
  _joinTblInMarker.Marker := GetFilterMarker;
  _joinTblInMarker.CreateWhere(sqlString, params);
}

end.
