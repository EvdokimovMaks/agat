#include oiJSWork.vih
#include jsLibIncludeFile.vih

#component "m_scripts"

Interface jsLibIncludeFile '' (,hcNoContext,) EscClose, Cyan;

var JavaScript: oiJSWork;
var fBody     :  oSteckCommonString;
var fEventList:  oSteckCommonString;
var _filePath :  string;

file _file;

#JSWorkLink(JavaScript)

property FilePath: string absolute _filePath read;

function LoadFileToSteckCommonString(aFileName: string; var s: oSteckCommonString): boolean;
var
  fstr: string;
{
  result := true;
  _try
  {
    _file.OpenFile(aFileName, stOpenRead);
    while not _file.EoF do
    {
      _file.readln(fstr);
      s.Push(fstr);
    }
  }
  _except
    on ExFileNotFound: { s.Push('//Файл '+aFileName+' не найден'); result := false; }
    else { s.Push('//Ошибка чтения файла '+aFileName); result := false; }
  _finally
  {
    _file.Close;
  }
}

function SFInitInter (wflag: word; var pt :TRecAcc): Boolean;
{
  SFInitInter := true;
}

function SFGetFuncName: String;
{
  SFGetFuncName := 'Инклюд файла ' + FilePath;
}

function SFGetBody: oSteckCommonString;
{
  if NOT (NullVipRef(fBody)) then
  {
    fBody.Init;
    LoadFileToSteckCommonString(translatepath(FilePath), fBody);
  }
  SFGetBody:= fBody;
}

function SFGetEventList: oSteckCommonString;// возвращает список событий
{
  if NOT (NullVipRef(fEventList)) then
  {
    fEventList.Init;
  }
  SFGetEventList:= fEventList;
}

function SFEvent(aEName: String): Boolean; // обработчик событий
{
  var bResult : boolean;
  SFEvent := true
}

function SFGetMemo (st:oSteckCommonString) : Boolean;// возвращает
{
  if NOT (NullVipRef(st)) then
  {
    st.Push('Инклюд файла '+FilePath+':');
    LoadFileToSteckCommonString(TranslatePath(FilePath), st);
    SFGetMemo := True;
  }
}

function SFGetName: String;
{
  SFGetName := 'jsLibIncludeFile';
}

function SFGetPrior: word;
{
  SFGetPrior := word(0);
}

procedure SFDoneInter;
{

}

HandleEvent // interface
cmOnVipLoad:
{
  LoadVipRef(fBody, 'M_MNPLAN::SteckString');
  LoadVipRef(fEventList, 'M_MNPLAN::SteckString');
  if NOT(NullVipRef(fBody)) then fBody.Init;
  if NOT(NullVipRef(fEventList)) then fEventList.Init;
}
cmOnVipUnload:
{
  if NOT(NullVipRef(fBody)) then FreeVipInterFace(fBody);
  if NOT(NullVipRef(fEventList)) then FreeVipInterFace(fEventList);
}
end; //HandleEven
End. //'interface
