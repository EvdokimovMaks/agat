#include Query.vih
#include JSQuery.vih
#include HashTable.vih

#component ""

interface JSQueryManager;

var
  _queries: IHashTable(HashTable) new;
  _namedQueries: IHashTable(HashTable) new;
  _lastKey: longint;

constructor Init;
{
  _lastKey := 0;
  result := true;
}

function CreateNewJSQuery(var key: variant): IJSQuery;
{
  var q: IJSQuery;
  if loadvipref(q, 'JSQuery')
  {
    key := _lastKey++;
    _queries.SetKeyValue(key, q);
    result := q;
  }
  else
  {
    key := -1;
    result := nullref;
  }
}

function GetJSQueryByName(name: string; var key: variant): IJSQuery;
{
  var q: IJSQuery; q := nullref;
  if _namedQueries.GetValue(name, q)
  {
    _queries.GetKey(q, key);
    result := q;
  }
  else
  {
    result := nullref;
    key := -1;
  }
}

function CreateJSQuery(sqlStr: variant; name: string = ''): variant;
{
  var q: IJSQuery;
  var key: variant; key := '';

  if name != ''
    q := GetJSQueryByName(name, key);
  else
    q := nullref;

  if q = nullref
  {
    q := CreateNewJSQuery(key);
    q.Init(sqlStr);
  }

  result := key;

}

function GetJSQuery(key: variant): IJSQuery;
{
  var q: IJSQuery; q := nullref;
  if _queries.GetValue(key, q)
    result := q
  else
    result := nullref;
}

function RemoveJSQuery(key: variant): boolean;
{
  var q: IJSQuery; q := nullref;
  if _queries.GetValue(key, q)
  {
    _namedQueries.removeValue(q);
    result := _queries.RemoveKey(key);
  }
  else
    result := false;
}

end.
