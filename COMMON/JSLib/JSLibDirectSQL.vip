#component "m_scripts"
#include oiJSWork.vih
#include Query.vih
#include JSQuery.vih

VipInterface js_sql implements oGalScriptStdF licensed(free);
Interface js_sql '' (,hcNoContext,) EscClose, Cyan;

var JavaScript:  oiJSWork;
var fBody     :  oSteckCommonString;
var fEventList:  oSteckCommonString;

var _jsQueryManager: IJSQueryManager(JSQueryManager);

#JSWorkLink(JavaScript)

function SFInitInter (wflag: word; var pt :TRecAcc): Boolean;
{ #__UNUSED__(wflag, pt)
  SFInitInter := true;
}

function SFGetFuncName: String;
{
  SFGetFuncName := 'Функции для работы с прямым SQL';
}

function SFGetBody: oSteckCommonString;
{
  if NOT (NullVipRef(fBody)) then
  {
    fBody.Init;
    fBody.push('function CreateTmpTable(str)                                       ');
    fBody.push('{                                                                  ');
    fBody.push('  VIP.CallMethod("js_sql", "SqlCreateTmpTable", str)               ');
    fBody.push('  return VIP.ArgValue(3)                                           ');
    fBody.push('}                                                                  ');
    fBody.push('function DropTmpTable(tableName)                                   ');
    fBody.push('{                                                                  ');
    fBody.push('  VIP.CallMethod("js_sql", "SqlDropTmpTable", tableName)           ');
    fBody.push('  return VIP.ArgValue(3)                                           ');
    fBody.push('}                                                                  ');
    fBody.push('function SqlStr(str)                                               ');
    fBody.push('{                                                                  ');
    fBody.push('  VIP.CallMethod("js_sql", "SqlStrCreate", str)                    ');
    fBody.push('  this.Id = VIP.ArgValue(3)                                        ');
    fBody.push('  this.Add = function (s)                                          ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "SqlStrAdd", this.Id, s)              ');
    fBody.push('    this.Id = VIP.ArgValue(4)                                      ');
    fBody.push('  }                                                                ');
    fBody.push('}                                                                  ');
    fBody.push('                                                                   ');
    fBody.push('function Query(str, key)                                           ');
    fBody.push('{                                                                  ');
    fBody.push('  this.Key = key                                                   ');
    fBody.push('  VIP.CallMethod("js_sql", "QueryCreate", str.Id, key)             ');
    fBody.push('  this.Id = VIP.ArgValue(3)                                        ');
    fBody.push('  this.Execute = function()                                        ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "QueryExecute", this.Id)              ');
    fBody.push('  }                                                                ');
    fBody.push('  this.Select = function()                                         ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "QuerySelect", this.Id)               ');
    fBody.push('    var r = new ResultSet(this.Id)                                 ');
    fBody.push('    return r                                                       ');
    fBody.push('  }                                                                ');
    fBody.push('  this.SetParam = function(_name, _value)                          ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "QuerySetParam", this.Id, _name, _value)');
    fBody.push('  }                                                                ');
    fBody.push('  this.SetStringParam = function(_name, _value)                    ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "QuerySetStringParam", this.Id, _name, _value)');
    fBody.push('  }                                                                ');
    fBody.push('  this.SetWordParam = function(_name, _value)                    ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "QuerySetWordParam", this.Id, _name, _value)');
    fBody.push('  }                                                                ');
    fBody.push('  this.SetBoolParam = function(_name, _value)                    ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "QuerySetBoolParam", this.Id, _name, _value)');
    fBody.push('  }                                                                ');
    fBody.push('  this.SetDoubleParam = function(_name, _value)                    ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "QuerySetDoubleParam", this.Id, _name, _value)');
    fBody.push('  }                                                                ');
    fBody.push('  this.SetDateParam = function(_name, _value)                    ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "QuerySetDateParam", this.Id, _name, _value)');
    fBody.push('  }                                                                ');
    fBody.push('  this.SetCompParam = function(_name, _value)                          ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "QuerySetCompParam", this.Id, _name, _value)');
    fBody.push('  }                                                                ');
    fBody.push('}                                                                  ');
    fBody.push('                                                                   ');
    fBody.push('function ResultSet(_id)                                            ');
    fBody.push('{                                                                  ');
    fBody.push('  this.Id = _id                                                    ');
    fBody.push('  this.GetFirst = function()                                       ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "ResultSetGetFirst", this.Id)         ');
    fBody.push('    return VIP.ArgValue(3)                                         ');
    fBody.push('  }                                                                ');
    fBody.push('  this.GetNext = function()                                        ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "ResultSetGetNext", this.Id)          ');
    fBody.push('    return VIP.ArgValue(3)                                         ');
    fBody.push('  }                                                                ');
    fBody.push('  this.GetLast = function()                                        ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "ResultSetGetLast", this.Id)          ');
    fBody.push('    return VIP.ArgValue(3)                                         ');
    fBody.push('  }                                                                ');
    fBody.push('  this.GetPrev = function()                                        ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "ResultSetGetPrev", this.Id)          ');
    fBody.push('    return VIP.ArgValue(3)                                         ');
    fBody.push('  }                                                                ');
    fBody.push('  this.Count = function()                                          ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "ResultSetCount", this.Id)            ');
    fBody.push('    return VIP.ArgValue(3)                                         ');
    fBody.push('  }                                                                ');
    fBody.push('  this.Val = function(_name)                                       ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "ResultSetVal", this.Id, _name)       ');
    fBody.push('    return VIP.ArgValue(4)                                         ');
    fBody.push('  }                                                                ');
    fBody.push('  this.ValAt = function(_num)                                      ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "ResultSetValAt", this.Id, _num)      ');
    fBody.push('    return VIP.ArgValue(4)                                         ');
    fBody.push('  }                                                                ');
    fBody.push('  this.FieldCount = function()                                     ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "ResultSetFieldCount", this.Id)       ');
    fBody.push('    return VIP.ArgValue(3)                                         ');
    fBody.push('  }                                                                ');
    fBody.push('  this.FieldName = function(_num)                                  ');
    fBody.push('  {                                                                ');
    fBody.push('    VIP.CallMethod("js_sql", "ResultSetFieldName", this.Id, _num)  ');
    fBody.push('    return VIP.ArgValue(4)                                         ');
    fBody.push('  }                                                                ');
    fBody.push('  this.FieldNames = function()                                     ');
    fBody.push('  {                                                                ');
    fBody.push('    var rslt = []                                                  ');
    fBody.push('    var cnt = this.FieldCount()                                    ');
    fBody.push('    for(var i = 1; i <= cnt; ++i)                                  ');
    fBody.push('    {                                                              ');
    fBody.push('      rslt[rslt.length] = this.FieldName(i)                        ');
    fBody.push('    }                                                              ');
    fBody.push('    return rslt                                                    ');
    fBody.push('  }                                                                ');
    fBody.push('}                                                                  ');
    fBody.push('function ResultTable()                                             ');
    fBody.push('{                                                                  ');
    fBody.push('  this.Fields=[]                                                   ');
    fBody.push('  this.Rows=[]                                                     ');
    fBody.push('  this.Print = function() {                                        ');
    fBody.push('    for(var i = 0; i < this.Rows.length; ++i) {                    ');
    fBody.push('      var s = ""                                                   ');
    fBody.push('      for(var j = 0; j < this.Fields.length; ++j) {                ');
    fBody.push('        s += (s==""?"":", ") + this.Fields[j] + ":" + this.Rows[i][this.Fields[j]]');
    fBody.push('      }                                                            ');
    fBody.push('      Debug.print(s)                                               ');
    fBody.push('    }                                                              ');
    fBody.push('  }                                                                ');
    fBody.push('}                                                                  ');
    fBody.push('function ResultSetToResultTable(rs)                                ');
    fBody.push('{                                                                  ');
    fBody.push('  var tbl = new ResultTable()                                      ');
    fBody.push('  if (rs==null) return tbl                                         ');
    fBody.push('  var rowIndex = 0                                                 ');
    fBody.push('  if (rs.GetFirst() == 0) {                                        ');
    fBody.push('    tbl.Fields = rs.FieldNames()                                   ');
    fBody.push('    var i = 0                                                      ');
    fBody.push('    var l = tbl.Fields.length                                      ');
    fBody.push('    do {                                                           ');
    fBody.push('      tbl.Rows[rowIndex] = { }                                     ');
    fBody.push('      for(i=0; i<l; ++i) {                                         ');
    fBody.push('        tbl.Rows[rowIndex][tbl.Fields[i]] = rs.Val(tbl.Fields[i])  ');
    fBody.push('      }                                                            ');
    fBody.push('      rowIndex++                                                   ');
    fBody.push('    } while (rs.GetNext() == 0)                                    ');
    fBody.push('  }                                                                ');
    fBody.push('  return tbl                                                       ');
    fBody.push('}                                                                  ');
  }
  SFGetBody:= fBody;
}

function SFGetEventList: oSteckCommonString;// возвращает список событий
{
  if NOT (NullVipRef(fEventList)) then
  {
    fEventList.Init;
    fEventList.push('SqlStrCreate');
    fEventList.push('SqlStrAdd');
    fEventList.push('QueryCreate');
    fEventList.push('QueryExecute');
    fEventList.push('QuerySelect');
    fEventList.push('ResultSetGetFirst');
    fEventList.push('ResultSetGetNext');
    fEventList.push('ResultSetGetLast');
    fEventList.push('ResultSetGetPrev');
    fEventList.push('ResultSetCount');
    fEventList.push('ResultSetVal');
    fEventList.push('ResultSetValAt');
    fEventList.push('QuerySetParam');
    fEventList.push('QuerySetCompParam');
    fEventList.push('QuerySetStringParam');
    fEventList.push('QuerySetWordParam');
    fEventList.push('QuerySetDoubleParam');
    fEventList.push('QuerySetDateParam');
    fEventList.push('QuerySetBoolParam');
    fEventList.push('SqlCreateTmpTable');
    fEventList.push('SqlDropTmpTable');
    fEventList.push('ResultSetFieldCount');
    fEventList.push('ResultSetGetFieldName');
  }
  SFGetEventList:= fEventList;
}

function GetResultSetByJSQueryKey(key: variant): IResultSet;
{
  var q: IJSQuery;
  q := _jsQueryManager.GetJSQuery(key);
  if q != nullref
    result := q.ResultSet;
  else
    result := nullref;
}

function SFEvent(aEName: String): Boolean; // обработчик событий
{
  var bResult : boolean;
  SFEvent := true;
  case aEName of
    'SqlCreateTmpTable':
    {
      var l: longint;
      l := GetArgInteger(2);
      SetArgInteger(3, sqlCreateTmpTable(l, ctmNormal));
    }
    'SqlDropTmpTable':
    {
      var s: string;
      s := GetArgString(2);
      SetArgInteger(3, sqlDropTmpTable(s));
    }
    'SqlStrCreate':
    {
      var l: longint;
      l := 0;
      sqlAddStr(l, GetArgString(2));
      SetArgInteger(3, l);
    }
    'SqlStrAdd':
    {
      var l: longint;
      l := GetArgInteger(2);
      sqlAddStr(l, GetArgString(3));
      SetArgInteger(4, l);
    }
    'QueryCreate':
    {
      var queryKey: string;
      queryKey := GetArgString(3);

      var queryStr: longint;
      queryStr := GetArgInteger(2);

      SetArgInteger(3, _jsQueryManager.CreateJSQuery(queryStr, queryKey));
    }
    'QueryExecute':
    {
      _jsQueryManager.GetJSQuery(GetArgInteger(2)).Query.Execute;
    }
    'QuerySelect':
    {
      var rs: IResultSet;
      _jsQueryManager.GetJSQuery(GetArgInteger(2)).GetResultSet
    }
    'QuerySetParam':
    {
      _jsQueryManager.GetJSQuery(GetArgInteger(2)).SetParam(GetArgString(3),GetArgString(4))
    }
    'QuerySetCompParam':
    {
      _jsQueryManager.GetJSQuery(GetArgInteger(2)).SetParam(GetArgString(3),GetArgComp(4))
    }
    'QuerySetStringParam':
    {
      _jsQueryManager.GetJSQuery(GetArgInteger(2)).SetParam(GetArgString(3),GetArgString(4))
    }
    'QuerySetWordParam':
    {
      _jsQueryManager.GetJSQuery(GetArgInteger(2)).SetParam(GetArgString(3),GetArgWord(4))
    }
    'QuerySetDoubleParam':
    {
      _jsQueryManager.GetJSQuery(GetArgInteger(2)).SetParam(GetArgString(3),GetArgDouble(4))
    }
    'QuerySetDateParam':
    {
      _jsQueryManager.GetJSQuery(GetArgInteger(2)).SetParam(GetArgString(3),GetArgDate(4))
    }
    'QuerySetBoolParam':
    {
      _jsQueryManager.GetJSQuery(GetArgInteger(2)).SetParam(GetArgString(3),GetArgBoolean(4))
    }
    'ResultSetGetFirst':
    {
      var rs: IResultSet;
      rs := GetResultSetByJSQueryKey(GetArgInteger(2));
      if (rs != nullref)
        SetArgInteger(3, rs.getFirst);
      else
        SetArgInteger(3, -1);
    }
    'ResultSetGetNext':
    {
      var rs: IResultSet;
      rs := GetResultSetByJSQueryKey(GetArgInteger(2));
      if (rs != nullref)
        SetArgInteger(3, rs.getNext);
      else
        SetArgInteger(3, -1);
    }
    'ResultSetGetLast':
    {
      var rs: IResultSet;
      rs := GetResultSetByJSQueryKey(GetArgInteger(2));
      if (rs != nullref)
        SetArgInteger(3, rs.getLast);
      else
        SetArgInteger(3, -1);
    }
    'ResultSetGetPrev':
    {
      var rs: IResultSet;
      rs := GetResultSetByJSQueryKey(GetArgInteger(2));
      if (rs != nullref)
        SetArgInteger(3, rs.getPrev);
      else
        SetArgInteger(3, -1);
    }
    'ResultSetCount':
    {
      var rs: IResultSet;
      rs := GetResultSetByJSQueryKey(GetArgInteger(2));
      if (rs != nullref)
        SetArgInteger(3, rs.Count);
      else
        SetArgInteger(3, 0);
    }
    'ResultSetVal':
    {
      var rs: IResultSet;
      rs := GetResultSetByJSQueryKey(GetArgInteger(2));
      if (rs != nullref)
        SetArgVariant(4, rs.Row.Val(GetArgString(3)));
      else
        SetArgString(4, '');
    }
    'ResultSetValAt':
    {
      var rs: IResultSet;
      rs := GetResultSetByJSQueryKey(GetArgInteger(2));
      if (rs != nullref)
        SetArgVariant(4, rs.Row.ValAt(GetArgInteger(3)));
      else
        SetArgString(4, '');
    }
    'ResultSetFieldCount':
    {
      var rs: IResultSet;
      rs := GetResultSetByJSQueryKey(GetArgInteger(2));
      if (rs != nullref)
        SetArgInteger(3, rs.Row.count);
      else
        SetArgInteger(3, 0);
    }
    'ResultSetFieldName':
    {
      var fName: string;
      fName := '';
      var rs: IResultSet;
      rs := GetResultSetByJSQueryKey(GetArgInteger(2));
      if (rs != nullref)
      {
        var col: IResultCol;
        col := rs.Row.colAt(GetArgInteger(3));
        if col != nullref
          fName := col.name
      }
      SetArgString(4, fName);
    }
  end;
}

function SFGetMemo (st:oSteckCommonString) : Boolean;// возвращает
{
  if NOT (NullVipRef(st)) then
  {
    st.push('');
    st.push('Объекты для формирования sql запросов:');
    st.push('');
    st.push('SqlStr(str) - Текст SQL запроса.');
    st.push('Строки в многострочный запрос добавляются с помощью метода Add(str)');
    st.push('');
    st.push('Query(str, name) - Запрос, где str - объект SqlStr');
    st.push('    name - имя именованного запроса. При создании именованного запроса');
    st.Push('    сам запрос не создается, если он был инициализирован ранее, а');
    st.Push('    возвращается ссылка на него');
    st.push('  Методы:');
    st.push('  SetParam(ParamName, ParamValue) - Установить параметр запроса');
    st.push('    ParamName - имя параметра, ParamValue - значение параметра');
    st.push('  SetCompParam(ParamName, ParamValue) - Установить параметр запроса типа comp');
    st.push('    ParamName - имя параметра, ParamValue - значение параметра');
    st.push('  Аналогичные методы установки параметров по типам: SetWordParam,');
    st.push('  SetStringParam, SetDoubleParam, SetDateParam, SetBoolParam');
    st.push('  Execute() - Выполнить запрос без возвращения результата');
    st.push('    (такой как UPDATE, DELETE)');
    st.push('  Select() - Выполнить запрос, выгрузить результат выборки в ResultSet');
    st.push('');
    st.push('ResultSet - выборка, создается только с помощью Query.Select()');
    st.push('  Методы:');
    st.push('  GetFirst(), GetLast(), GetNext(), GetPrev() - выбрать первую, последнюю,');
    st.push('    следующую, предыдущую строку выборки');
    st.push('  Count() - количество строк в выборке');
    st.push('  Val(_name) - возвращает значение в колонке с именем _name');
    st.push('  ValAt(_num) - возвращает значение в колонке с номером _num');
    st.push('  FieldCount() - количество полей в строке результата запроса');
    st.push('  FieldName(_num) - имя поля с номером _num в строке результата запроса');
    st.push('  FieldNames() - массив имен полей в строке результата запроса');
    st.push('');
    st.push('ResultTable - альтернативное представление выборки (ResultSet а)');
    st.push('    Отличие в том, что весь результат запроса хранится в структуре JavaScript');
    st.push('  Методы:');
    st.push('    Print() - вывод результата запроса в консоль отладки');
    st.push('  Поля:');
    st.push('    Fields - массив наименований полей результата запроса');
    st.push('    Rows - массив строк результата запроса. Чтобы получить значение поля строки запроса');
    st.push('    нужно обратиться к соответствующему полю элемента Rows: Rows[i].Nrec');
    st.push('    или Rows[i][''Nrec'']');
    st.push('');
    st.push('ResultSetToResultTable - функция возвращает ResultTable по переданному ей ResultSet');
    st.push('');
    st.push('Функции для работы с временными таблицами:');
    st.push('  CreateTmpTable(str) создание временной таблицы');
    st.push('    str - объект SqlStr');
    st.push('  DropTmpTable(tableName) удаление временной таблицы');
    st.push('    tableName - строка имя таблицы');
    st.push('');
    st.push('Пример использования:');
    st.push('');
    st.push('var s1 = new SqlStr("select xf$name")');
    st.push('s1.Add("from x$files where xf$name like :nam")');
    st.push('var q1 = new Query(s1)');
    st.push('q1.SetParam("nam", "Z%")');
    st.push('var sel1 = q1.Select()');
    st.push('do');
    st.push('{');
    st.push('  Debug.print(sel1.ValAt(1)+" "+sel1.Val("xf$name"))');
    st.push('} while (sel1.GetNext() == 0)');
    SFGetMemo := True;
  }
}

function SFGetName: String;
{
  SFGetName := 'js_sql';
}

function SFGetPrior: word;
{
  SFGetPrior := word(0);
}

procedure SFDoneInter;
{

}

HandleEvent // interface
cmOnVipLoad:
{
  LoadVipRef(fBody, 'M_MNPLAN::SteckString');
  LoadVipRef(fEventList, 'M_MNPLAN::SteckString');
  if NOT(NullVipRef(fBody)) then fBody.Init;
  if NOT(NullVipRef(fEventList)) then fEventList.Init;
}
cmOnVipUnload:
{
  if NOT(NullVipRef(fBody)) then FreeVipInterFace(fBody);
  if NOT(NullVipRef(fEventList)) then FreeVipInterFace(fEventList);
}
end; //HandleEven
End. //'interface
