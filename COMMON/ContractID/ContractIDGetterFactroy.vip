#include ContractID.vih

#component "AGAT"

interface ContractIDGetterFactory;

table struct tGetters (
  wKey: word,
  ifcName: string,
  ind: longint
) with index (
  i01 = wKey (unique)
);

var
  _wKey: word;
  _getterInterfaces: array[0..0] of IContractIDGetter;
  _getterInterfacesCount: longint;

create view
as select
  tGetters.wKey
from tGetters
where ((
  _wKey == tGetters.wKey
));

Constructor Init;
{
  epRegisterContractIDGetter(self);
  _getterInterfacesCount := 0;
  result := true;
}

procedure RegisterGetterIfc(key: word; interfaceName: string);
{
  _wKey := key;
  if getfirst fastfirstrow tGetters = tsOk
  {
    if interfaceName != tGetters.ifcName
    {
      tGetters.ifcName := interfaceName;
      tGetters.ind := -1;
      update current tGetters;
    }
  }
  else
  {
    tGetters.wKey := key;
    tGetters.ifcName := interfaceName;
    tGetters.ind := -1;
    insert current tGetters;
  }
}

function GetterByKey(key: word; var interfaceName: string; var interfaceIndex: longint): boolean; cacheable;
{
  _wKey := key;
  if getfirst fastfirstrow tGetters = tsOk
  {
    interfaceName := tGetters.ifcName;
    interfaceIndex := tGetters.ind;
    result := true;
  }
  else
  {
    interfaceName := '';
    interfaceIndex := -1;
    result := false;
  }
}

function Get(key: word): IContractIDGetter;
{
  var interfaceName: string;
  var interfaceIndex: longint;
  if GetterByKey(key, interfaceName, interfaceIndex)
  {
    if interfaceIndex != -1
      result := _getterInterfaces[interfaceIndex];
    else
    {
      var ifc: IContractIDGetter;
      if getvipref(ifc, tGetters.ifcName)
      {
        update current tGetters set tGetters.ind := _getterInterfacesCount;
        _getterInterfaces[_getterInterfacesCount++] := ifc;
        result := ifc;
      }
      else
        result := nullref;
    }
  }
  else
    result := nullref;
}

end.
