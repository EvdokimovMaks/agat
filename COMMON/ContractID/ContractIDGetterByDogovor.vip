#include ContractID.vih
#include  Query.vih
#component "AGAT"

vipinterface ContractIDGetterByDogovor implements IContractIDGetter;

handler with replace RegContractIDGetterByDogovor
on extensionpoint epRegisterContractIDGetter(factory: ContractIDGetterFactory) [1]
action
{
  factory.RegisterGetterIfc(coDogovor, 'AGAT::ContractIDGetterByDogovor');
  result := true;
}

interface ContractIDGetterByDogovor;

sql query query1 =
select trim(avIK.vstring) as IK
from attrval avZakaz
join attrnam anIK on anIK.wtable = :coKatStroy and anIK.name = :eaNameIK
join attrval avIK on avIK.wtable = :coKatStroy and avIK.crec = avZakaz.vcomp and avIK.cattrnam = anIK.nrec and trim(avIK.vstring) <> ''
where avZakaz.wtable = :coDogovor and avZakaz.crec = :cRec and avZakaz.cattrnam = #comp(00010000000000ABh) and avZakaz.vcomp <> #comp(0)
union
select trim(avIK.vstring)
from dogovor d
join spdocs spd on d.tidk = spd.tidk and d.nrec = spd.cdoc
join specmtr spm on spm.csaldtune=#comp(0001000000000001h) and spm.cotable=:coSpDocs and spm.cspec=spd.nrec and spm.cobj<>#comp(0)
join attrnam anIK on anIK.wtable = :coKatStroy and anIK.name = :eaNameIK
join attrval avIK on avIK.wtable = :coKatStroy and avIK.crec = spm.cobj and avIK.cattrnam = anIK.nrec and trim(avIK.vstring) <> ''
where d.nrec = :cRec ;

var
  q: IQuery;
  dogovorNrec: comp;

function GetContractID(cRec: comp): string;
{
  var IK: string; IK := '';

  if (q = nullref)
  {
    q := queryManager.createQuery(query1)
                     .setParam('eaNameIK',   EXTATTRNAME_CONTRACTID)
                     .setParam('cRec',       dogovorNrec)
                     .setParam('coKatStroy', coKatStroy)
                     .setParam('coDogovor',  coDogovor)
                     .setParam('coSpDocs',   coSpDocs);
  }

  dogovorNrec := cRec;

  if q.Execute.errorCode = tsOk
  {
    while q.fetch.errorCode = tsOk
    {
      IK := IK + if(IK='', '', ', ') + q.row.valat(1);
    }
    result := IK;
  }
  else
    result := 'Ошибка выполнения запроса '+q.errorCode;
}
end.
