#include ContractID.vih
#include  Query.vih
#component "AGAT"

vipinterface ContractIDGetterByStepdoc implements IContractIDGetter;

handler with replace RegContractIDGetterByStepdoc on extensionpoint epRegisterContractIDGetter(factory: ContractIDGetterFactory) [1]
action
{
  factory.RegisterGetterIfc(coStepDoc, 'AGAT::ContractIDGetterByStepdoc');
  result := true;
}

interface ContractIDGetterByStepdoc;

sql query query1 =
select distinct trim(avIK.vstring) as IK
from spstep sps
join specmtr spm on spm.csaldtune=#comp(0001000000000001h) and spm.cotable=:coSpStep and spm.cspec=sps.nrec and spm.cobj<>#comp(0)
join attrnam anIK on anIK.wtable = :coKatStroy and anIK.name = :eaNameIK
join attrval avIK on avIK.wtable = :coKatStroy and avIK.crec = spm.cobj and avIK.cattrnam = anIK.nrec and trim(avIK.vstring) <> ''
where sps.cstepdoc = :crec
;

var
  q: IQuery;
  plporNrec: comp;

function GetContractID(cRec: comp): string;
{
  var IK: string; IK := '';

  if (q = nullref)
  {
    q := queryManager.createQuery(query1)
                     .setParam('eaNameIK'  , EXTATTRNAME_CONTRACTID)
                     .setParam('cRec'      , plporNrec)
                     .setParam('coKatStroy', coKatStroy)
                     .setParam('coSpStep'  , coSpStep);
  }

  plporNrec := cRec;

  if q.Execute.errorCode = tsOk
  {
    while q.fetch.errorCode = tsOk
    {
      IK := IK + if(IK='', '', ', ') + q.row.valat(1);
    }
    result := IK;
  }
  else
    result := 'Ошибка выполнения запроса '+q.errorCode;
}
end.
