#include HashTable.vih

#component ""

interface HashTable;

var
  _values: array[0..0] of ObjRef;
  _keys: array[0..0] of variant;

constructor Init;
{
  setLimit(_values,0);
  setLimit(_keys,0);
  result := true;
}

procedure SetKeyValue(key: variant; value: ObjRef);
{
  var keyIndex: longint;
  keyIndex := FindItem(_keys, key);

  if keyIndex = -1
  {
    keyIndex := count(_keys);
    _keys[keyIndex] := key;
  }

  _values[keyIndex] := value;
}

function  GetValue(key: variant; var value: ObjRef): boolean;
{
  var keyIndex: longint;
  keyIndex := FindItem(_keys, key);
  value := if(keyIndex = -1, nullref, _values[keyIndex]);
  result := keyIndex != -1;
}

function  GetKey(value: ObjRef; var key: variant): boolean;
{
  var valueIndex: longint;
  valueIndex := FindItem(_values, value);
  key := if(valueIndex=-1, '', _keys[valueIndex]);
  result := valueIndex != -1;
}

function RemoveKey(key: variant): boolean;
{
  var keyIndex: longint;
  keyIndex := FindItem(_keys, key);
  result := keyIndex != -1;
  ArrAtDelete(_keys, keyIndex);
  ArrAtDelete(_values, keyIndex);
}

function RemoveValue(value: ObjRef): boolean;
{
  var valueIndex: longint;
  valueIndex := FindItem(_values, value);
  result := valueIndex != -1;
  ArrAtDelete(_keys, valueIndex);
  ArrAtDelete(_values, valueIndex);
}

end.
