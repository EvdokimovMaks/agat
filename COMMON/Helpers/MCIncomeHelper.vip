#include MCIncome.vih
#include Query.vih

#component "AGAT"

interface MCIncomeHelper;

var
  _query: IQuery;

sql query qGetLastKatsopr =
select sps.nrec  as Nrec,
       ks.corg   as KontrAgent,
       sps.price as Price
from (select max(sp.nrec) as MaxNrec
      from (select doprttn, nrec, max(doprttn) over () as maxdoprttn
            from spsopr
            where prmc = 1 and cmcusl = :mcNrec and vidsopr = 101 and doprttn between 1 and :maxDate
           ) sp
      where sp.doprttn = sp.maxdoprttn
     ) selsp
join spsopr sps on sps.nrec = selsp.MaxNrec
join katsopr ks on ks.nrec = sps.csopr
;

function IMCIncomeHelper.GetMCIncomeInfoCollection(aMRKR: longint; aMaxDate: date = 0): ICollection;
{
  var _col: ICollection;
  _col := ICollection(new(Collection));

  var i: longint;
  var cmc: comp;

  var incomeInfo: IMCIncomeInfo;

  for(i := 0; GetMarker(aMRKR, i, cmc); i++)
    _col.Add(GetMCIncomeInfo(cmc, aMaxDate));

  result := _col;
}

function IMCIncomeHelper.GetMCIncomeInfo(aKatmcNrec: comp; aMaxDate: date = 0): IMCIncomeInfo;
{
  if aMaxDate = 0
    aMaxDate := cur_date;

  var katsoprNrec: comp = 0;
  var katorgNrec: comp = 0;
  var price: double = 0;

  var rs: IResultSet;
  rs := _query.setparam('mcNrec', aKatmcNrec).setparam('maxDate', aMaxDate).getresultset;

  if rs != nullref
    if rs.GetFirst = tsOk
    {
      katsoprNrec := rs.row.val('Nrec');
      katorgNrec := rs.row.val('KontrAgent');
      price := rs.row.val('Price');
    }

  result := IMCIncomeInfo(
    new(MCIncomeInfo, Loader(aKatmcNrec, katsoprNrec, katorgNrec, price))
  );
}

constructor Init;
{
  _query := queryManager.createQuery(qGetLastKatsopr);
  result := _query != nullref;
}

end.
