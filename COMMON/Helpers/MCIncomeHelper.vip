#include System.vih
#include MCIncome.vih
#include McUslHelper.vih
#include Query.vih
#include DeflatorResolver.vih

#component "AGAT"

interface MCIncomeHelper;

var
  _query: IQuery;
  _mcUslHelper: McUslHelper;

create view
as select *
from katsopr;

sql query qGetLastMcIncome =
select ks.nrec     as Nrec,
       ks.corg     as KontrAgent,
       spo.srprice as Price,
       coalesce(spdn.nalog, 0) as PercentNds
from (select max(spo.nrec) as MaxNrec
      from (select spo.dord, spo.nrec, max(spo.dord) over () as maxdord
            from sporder spo
            join spsopr sps on sps.nrec = spo.cspsopr and sps.vidsopr = 101
            where spo.sp = 0 and spo.vidorder = 0 and spo.cmc = :mcNrec and spo.dord between 1 and :maxDate
           ) spo
      where spo.dord = spo.maxdord
     ) selspo
join sporder spo on spo.nrec = selspo.maxNrec
join spsopr sps on sps.nrec = spo.cspsopr
left join spdocnal spdn on spdn.cspdoc = sps.nrec and spdn.tipdoc = sps.vidsopr
join katsopr ks on ks.nrec = sps.csopr
;

function IMCIncomeHelper.GetMCIncomeInfoCollection(aMRKR: longint; aMaxDate: date = 0): ICollection;
{
  var _col: ICollection;
  _col := ICollection(new(Collection));

  var i: longint;
  var cmc: comp;

  var incomeInfo: IMCIncomeInfo;

  for(i := 0; GetMarker(aMRKR, i, cmc); i++)
    _col.Add(GetMCIncomeInfo(cmc, aMaxDate));

  result := _col;
}

function IMCIncomeHelper.GetMCIncomeInfo(aKatmcNrec: comp; aMaxDate: date = 0): IMCIncomeInfo;
{
  if aMaxDate = 0
    aMaxDate := cur_date;

  var katsoprNrec: comp = 0;
  var katorgNrec: comp = 0;
  var price: double = 0;
  var percentNds: double = 0;

  var rs: IResultSet;
  rs := _query.setparam('mcNrec', aKatmcNrec).setparam('maxDate', aMaxDate).getresultset;

  if rs != nullref
    if rs.GetFirst = tsOk
    {
      katsoprNrec := rs.row.val('Nrec');
      katorgNrec  := rs.row.val('KontrAgent');
      price       := rs.row.val('Price');
      percentNds  := rs.row.val('PercentNds');
    }

  result := IMCIncomeInfo(
    new(MCIncomeInfo, Loader(aKatmcNrec, katsoprNrec, katorgNrec, price, percentNds))
  );
}

function GetDefaultDeflatorResolver: oDeflatorResolver;
{
  var dm: DeflatorResolverManager;
  result := dm.GetLastDeflatorResolver;
}

function IMCIncomeHelper.GetDeflatorCollection(aMcIncomeInfoCollection: ICollection;
                                               aDate: date = 0;
                                               aDeflatorResolver: oDeflatorResolver = nullref): ICollection;
{
  if aDeflatorResolver = nullref
    aDeflatorResolver := GetDefaultDeflatorResolver;

  if aDate = 0
    aDate := cur_date;

  var c: ICollection;
  c := ICollection(new(Collection));

  var enum: IEnumerator;
  enum := aMcIncomeInfoCollection.GetEnumerator;

  while enum.MoveNext
  {
    var info: IMcIncomeInfo;
    info :=  IMcIncomeInfo(enum.current);

    c.Add(GetDeflator(info, aDate, aDeflatorResolver));
  }

  result := c;
}

function IMCIncomeHelper.GetDeflator(aMcIncomeInfo: IMcIncomeInfo;
                                     aDate: date = 0;
                                     aDeflatorResolver: oDeflatorResolver = nullref): IMcIncomeInfoDeflator;
{
  if aDeflatorResolver = nullref
    aDeflatorResolver := GetDefaultDeflatorResolver;

  if aDate = 0
    aDate := cur_date;

  var d: IMcIncomeInfoDeflator;
  d := IMcIncomeInfoDeflator(new(McIncomeInfoDeflator, Create(aMcIncomeInfo, 1)));

  if getfirst katsopr where (( aMcIncomeInfo.KatsoprNrec == katsopr.nrec )) = tsOk
  {
    d.IndexDeflator := aDeflatorResolver.GetDeflator(_mcUslHelper.GetMcDeflatorGroupNrec(aMcIncomeInfo.KatmcNrec),
                                                     year(katsopr.dsopr), year(aDate));
  }

  result := d;
}

constructor Init;
{
  _query := queryManager.createQuery(qGetLastMcIncome);
  result := _query != nullref;
}

end.
