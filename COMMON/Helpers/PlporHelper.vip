#include PlPorHelper.vih
#include BasedocHelper.vih
#include ContractId.vih
#include RSHelper.vih
#include Query.vih

#component "AGAT"

interface PlPorHelper;

sql query qSelectLinkedBasedoc =
  select distinct basedoc.nrec
  from basefin
  join basedoc on basedoc.nrec = basefin.cbasedoc or basedoc.nrec = basefin.cpredopldo
  where basefin.cPlPor=:PlPorNrec
;

var
  _basedocHelper: IBasedocHelper;
  _qLinkedBasedoc: IQuery;
  _contractIdHelper: ContractIDHelper;
  _rsHelper: RSHelper;
  _plporNrec: comp;

create view
as select
  PlPor.Nrec
from
  PlPor
 ,KatBank KatBankPol
where ((
      _plporNrec     == PlPor.Nrec
  and PlPor.cBankPol == KatBankPol.Nrec
));

procedure IPlPorHelper.RecalcLinkedBasedocStatuses(aPlPorNrec: comp; aExcludeBasefin: TCompArray);
{
  var rs: IResultSet;
  rs := _qLinkedBasedoc.setParam('PlPorNrec', aPlPorNrec).getResultSet;
  if _qLinkedBasedoc.errorCode = tsOk and rs != nullref
  {

    if rs.getFirst = tsOk do
    {
      _basedocHelper.RecalcBasedocStatus(rs.row.ValAt(1), aExcludeBasefin);
    } while rs.getNext = tsOk;

  }
}

type ttaxArray = array[1..10] of string;

function GetTaxArray(taxString: string): ttaxArray;
{
  var a: ttaxArray;
  var i, p: integer;
  for(i := 1; i<=count(a); i++)
  {
    p := pos(';', taxString+';');
    if p > 0
    {
      a[i] := substr(taxString, 1, p-1);
      taxString := substr(taxString,p+1,255);
    }
    else
      a[i] := '';
  }
  result := a;
}

function GetTaxString(a: ttaxArray): string;
{
  var s: string = '';
  var i: integer;
  for(i := 1; i<=count(a); i++)
    s += a[i] + ';';
  result := s;
}

procedure IPlPorHelper.SetPlPorUIN(aPlPorNrec: comp);
{
  _plporNrec := aPlPorNrec;
  if getfirst PlPor = tsOk
  {
    var cid: string;
    cid := _contractIdHelper.GetContractID(GetContractIDKey_ByPlPor, aPlPorNrec);
    var a: ttaxArray;
    a := GetTaxArray(PlPor.tax);
    if a[9] != cid
    {
      a[9] := cid;
      PlPor.tax := GetTaxString(a);
      update current PlPor;
    }
  }
}

sql query qGetBasedocNrec =
  select top 1 bd.nrec
  from PlPor
  join PlPor plp on plp.tidk = PlPor.tidk and plp.cplat = PlPor.cplat and plp.NamePl1 like '%проценты за период%'
  join soprhoz sh on sh.tipdoc = plp.tidk and sh.csoprdoc = plp.nrec
  join stepdoc sd on sd.nrec = sh.cstepdoc
  join basedoc bd on bd.nrec = sd.cbasedoc
  where PlPor.nrec = :PlPorNrec
  order by plp.datvip desc
;

function IPlPorHelper.DefineIncomePlPorBasedocNrec(incomePlPorNrec: comp): comp;
{
  result := comp(0);

  _plporNrec := incomePlPorNrec;
  if getfirst PlPor != tsOk exit;

  if pos('проценты за период', PlPor.NamePl1) > 0 and PlPor.TiDkGal = 2
  {

    if getfirst KatBankPol = tsOk
      if substr(KatBankPol.Mfo1, 1, 5) = '40702'
      {
        result := comp(0001000000009841h); //ДО №01689008 от 12/01/2012
        exit;
      }

    var rs: IResultSet;
    rs := queryManager.createQuery(qGetBasedocNrec).setParam('PlPorNrec', incomePlPorNrec).getResultSet;

    if rs.getFirst = tsOk
      result := comp(rs.row.valAt(1));
  }
}

sql query qLastPlPorNumber =
  select max(nodok) as nodok
  from PlPor
  where TiDkGal = :TiDkGal and datvip between :dbeg and :dend
;

sql query qPlPorsCountWithNumber =
  select count(nrec)
  from PlPor
  where TiDkGal = 1 and and datvip between :dbeg and :dend and nodok = :nodok
;

function IPlPorHelper.GetNewPlPorNumber(aTiDkGal: word; aYear: word): string;
{
  var periodDate1: date;
  periodDate1 := date(1,1,aYear);

  var periodDate2: date;
  periodDate2 := date(31,12,aYear);

  var rs: IResultSet;
  rs := queryManager.createQuery(qLastPlPorNumber)
                    .setParam('TiDkGal', aTiDkGal)
                    .setParam('dbeg', periodDate1)
                    .setParam('dend', periodDate2)
                    .getResultSet;

  var newPlPorNumber: string;
  if rs.getFirst = tsOk
    newPlPorNumber := NextNumStr(rs.row.valat(1));
  else
    newPlPorNumber := '000001';

  var q: IQuery;
  q := queryManager.createQuery(qPlPorsCountWithNumber);

  var triesCount: integer = 0;
  while integer(q.setParam('TiDkGal', aTiDkGal)
                 .setParam('dbeg', periodDate1)
                 .setParam('dend', periodDate2)
                 .setParam('nodok', newPlPorNumber)
                 .getResultValue) > 0 and triesCount < 100
  {
    triesCount++;
    newPlPorNumber := NextNumStr(newPlPorNumber);
  }

  result := newPlPorNumber;

}



constructor Init;
{
  result := getvipref(_basedocHelper, 'AGAT::BasedocHelper');
  _qLinkedBasedoc := queryManager.createQuery(qSelectLinkedBasedoc);
}

property BasedocHelper: IBasedocHelper absolute _basedocHelper;

end.
