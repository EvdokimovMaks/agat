#include BasedocHelper.vih
#include Query.vih
#include AtlProtocol.vih
#include PD_ChangeStatusTxo.vih
#include ExtAttr.vih

#component "AGAT"


interface BasedocHelper;

const
  BASEDOC_CNOTE_FULLPAID = 0001000000000077h;
  BASEDOC_CNOTE_ISPOLN = 400056A46A9AD669h;
end;

sql query qSelectSumOplNoExcludes =
  select sum(basefin.summa)
  from basefin
  join plpor on plpor.nrec = basefin.cplpor and plpor.datob > 0
  where ( basefin.cbasedoc=:BasedocNrec or basefin.cpredopldo=:BasedocNrec )
;

var
  _qSumOplNoExcludes: IQuery;
  _sGroupSch: string;
  _changeStatusTxo: PD_ChangeStatusTxo;
  #include ExtAttr.var

create view
as select BaseDoc.nrec
from BaseDoc, Dogovor, StepDoc, KatSopr, KatNotes, StatLog, GroupSch, IerGrSch, SpGrSch;

constructor Init;
{
  _qSumOplNoExcludes := queryManager.createQuery(qSelectSumOplNoExcludes);
  result := true;
}

function RecalcBasedocStatusPrepareQuery(aExcludeBasefin: TCompArray): IQuery;
{
  var cnt: longint; cnt := count(aExcludeBasefin);
  if cnt = 0
    result := _qSumOplNoExcludes;
  else
  {
    var s: longint; s := 0;
    sqlAddStr(s, qSelectSumOplNoExcludes);
    if cnt = 1
      sqlAddStr(s, 'and basefin.nrec <> #comp('+string(aExcludeBasefin[0],0,0)+')');
    else
    {
      var i: longint; i := 0;
      sqlAddStr(s, 'and basefin.nrec not in (');
      for(i := 0; i < cnt; i++)
        sqlAddStr(s, if(i>0,',','') + '#comp(' + string(aExcludeBasefin[i],0,0) + ')');
      sqlAddStr(s, ')');
    }
    result := queryManager.createQuery(s);
  }
}

procedure IBasedocHelper.RecalcBasedocStatus(aBasedocNrec: comp; aExcludeBasefin: TCompArray);
{
  if getfirst fastfirstrow basedoc where ((aBasedocNrec == basedoc.nrec)) = tsOk
  {
    var q: IQuery;
    q := RecalcBasedocStatusPrepareQuery(aExcludeBasefin);
    q.setParam('BasedocNrec', aBasedocNrec);
    var sumOpl: double;
    sumOpl := q.getResultValue;
    var fullPaid: boolean;
    fullPaid := (sumOpl-basedoc.total) > -1;
    if fullPaid and basedoc.cnote != BASEDOC_CNOTE_FULLPAID
    {
      _changeStatusTxo.process(40, basedoc.nrec, basedoc.cnote, BASEDOC_CNOTE_FULLPAID);
      basedoc.cnote := BASEDOC_CNOTE_FULLPAID;
      update current basedoc;
    }
    else if (not fullPaid) and basedoc.cnote = BASEDOC_CNOTE_FULLPAID
    {
      if getlast StatLog where ((40 == StatLog.DocType and basedoc.nrec == StatLog.cDoc)) = tsOk
      {
        _changeStatusTxo.process(40, basedoc.nrec, basedoc.cnote, StatLog.cNewNote);
        basedoc.cnote := StatLog.cNewNote;
      }
      else
      {
        _changeStatusTxo.process(40, basedoc.nrec, basedoc.cnote, BASEDOC_CNOTE_ISPOLN);
        basedoc.cnote := BASEDOC_CNOTE_ISPOLN;
      }
      update current basedoc;
    }
  }
}

function IBasedocHelper.GetBasedocViza(aBasedocNrec: comp; aBasedocVizaAttrnamNrec: comp): IBasedocViza;
{
  result := IBasedocViza(new(BasedocVizaBase, BasedocVizaBase(aBasedocNrec, aBasedocVizaAttrnamNrec)));
}

function IBasedocHelper.GetBasedocVizas(aBasedocNrec: comp): IBasedocVizas;
{
  result := IBasedocVizas(new(BasedocVizasBase, BasedocVizasBase(aBasedocNrec)));
}

function IBasedocHelper.GetDeferredDaysCount(aBasedocNrec: comp): word;
{
  result := 0;

  if getfirst fastfirstrow basedoc where ((aBasedocNrec == basedoc.nrec)) = tsOk
  {
    if  basedoc.cnote != 000100000000007Eh //когда статус ДО не "включен в реестр"
    and basedoc.cnote != 0001000000000077h //и не "оплачено"
    {
      var vizas: IBasedocVizas;
      vizas := GetBasedocVizas(aBasedocNrec);
      if vizas.Soglasovany
      {
        var d: date; d := 0;

        //if (d < vizas.BUH.LastDate) d := vizas.BUH.LastDate;
        //if (d < vizas.KAZ.LastDate) d := vizas.KAZ.LastDate;
        //if (d < vizas.PEU.LastDate) d := vizas.PEU.LastDate;
        //if (d < vizas.DIR.LastDate) d := vizas.DIR.LastDate;

        d := vizas.PEU.LastDate;

        if d > 0
          result := calcdaysbetweendates(d, cur_date, true);
      }
    }
  }

}

function IBasedocHelper.SetStatus(aBasedocNrec: comp; aKatnotesNrec: comp; aCreateHistory: boolean = false; aComment: string = ''): boolean;
{

  result := false;

  if getfirst basedoc where ((aBasedocNrec == basedoc.nrec)) = tsOk
  {

    var wNewStatus: word = 0;
    if getfirst katnotes where ((aKatnotesNrec == katnotes.nrec)) = tsOk
      wNewStatus := katnotes.status;
    else
      wNewStatus := 0;

    var oldKatnotesNrec: comp;
    oldKatnotesNrec := basedoc.cnote;

    var wOldStatus: word;
    wOldStatus := basedoc.status;

    var rslt: integer = 0;
    basedoc.cnote := aKatnotesNrec;
    basedoc.status := wNewStatus;
    rslt := update current basedoc;

    if rslt = tsOk and aCreateHistory
    {
      clearbuffer(#statlog);
      statlog.cdoc      := basedoc.nrec;
      statlog.cnewnote  := aKatnotesNrec;
      statlog.coldnote  := oldKatnotesNrec;
      statlog.comment   := aComment;
      statlog.descr     := sGetTune('USER.DESCR');
      statlog.desgr     := sGetTune('USER.DESGR');
      statlog.doctype   := 40;
      statlog.doper     := cur_date;
      statlog.newstatus := wNewStatus;
      statlog.oldstatus := wOldStatus;
      statlog.timeoper  := cur_time;
      insert current statlog;
    }

    if rslt = tsOk
      _changeStatusTxo.process(40, basedoc.nrec, oldKatnotesNrec, aKatnotesNrec);

    result := rslt = tsOk;

  }

}

function IBasedocHelper.SetStatusValidate(aBasedocBuffer: type$basedoc; aKatnotesNrec: comp; protocol: IAtlProtocol = nullref): boolean;
{

  result := true;

  //Если пользователь - админ - ничего не проверяем
  if pr_CurUserAdmin exit;

  //инициализируем протокол, если он не передан в качестве параметра
  if protocol = nullref
    protocol := IAtlProtocol(new(AtlProtocol));

  //Проверяем корректность ссылки на статус
  if (getfirst katnotes where ((aKatnotesNrec == katnotes.nrec)) != tsOk) and aKatnotesNrec != 0
  {
    result := false;
    protocol.LogLine(APE_ERROR, 'Установка несуществующего статуса');
  }

  case aKatnotesNrec of

    KATNOTES_NREC_BASEDOC_REESTR:
    {

      var vizas: IBasedocVizas;
      vizas := GetBasedocVizas(aBasedocBuffer.nrec);

      if not (vizas.BUH.Soglasovana and vizas.DIR.Soglasovana and vizas.KAZ.Soglasovana)
        result := false;

      if not vizas.BUH.Soglasovana
        protocol.LogLine(APE_ERROR, 'Запрещено включать в реестр счет без визы бухгалтерии');

      if not vizas.DIR.Soglasovana
        protocol.LogLine(APE_ERROR, 'Запрещено включать в реестр счет без визы дирекции');

      if not vizas.KAZ.Soglasovana
        protocol.LogLine(APE_ERROR, 'Запрещено включать в реестр счет без визы казначейства');

    }

  end;

}

function IBasedocHelper.GetBuffer(aNrec: comp): type$basedoc;
{

  var buf: type$basedoc;

  if getfirst basedoc where ((aNrec == basedoc.nrec)) = tsOk
    buf := type$basedoc(basedoc.buffer);
  else
    clearadvrecord(buf);

  result := buf;

}

procedure IBasedocHelper.SetNaznPl(aBasedocNrec: comp);
{
  if getfirst BaseDoc where ((aBasedocNrec == BaseDoc.nrec)) != tsOk
    exit;

  var s1,s2,s3: string = '';

  var cDDS: comp = oExtAttr.coGetAttrID(coBaseDoc, basedoc.nrec, ATTRNAM_NREC_BASEDOC_DDS);
  var DDS: string = trim(if(getanykau(cgAkSimple, KODGRKAU_DDS, cDDS), givenanname(cgAnStrKod), ''));

  var cIsp: comp = oExtAttr.coGetAttrID(coBaseDoc, basedoc.nrec, ATTRNAM_NREC_BASEDOC_ISPOLNITEL_DOGOVORA);
  var Isp: string = trim(if(getanykau(cgAkSimple, cgKau_KatPodr, cIsp), givenanname(cgAnAbbr), ''));

  var cAvans: comp = oExtAttr.coGetAttrID(coBaseDoc, basedoc.nrec, ATTRNAM_NREC_BASEDOC_AVANS);
  var Avans: boolean = upcase(trim(if(getanykau(cgAkSimple, KODGRKAU_PRINADLEJNOST_AVANSU, cAvans), givenanname(cgAnStrKod),''))) = 'А';

  var Predopl: boolean = BaseDoc.VidDoc = 111;

  var Prim: string = Trim(BaseDoc.Name);
  //преобразуем "Примечание" в "примечание"
  Prim := LoCase(Prim[1]) + SubStr(Prim, 2, 255);

  var Dog: string = if(getfirst Dogovor where ((BaseDoc.cDogovor == Dogovor.Nrec)) = tsOk,
                       'договор ' + Dogovor.NoDoc + ' от ' + DateToStr(Dogovor.DDoc, 'DD/MM/YY'),
                       '');

  var Schet: string = 'По счету №' + Basedoc.Nodoc + ' от ' + DateToStr(Basedoc.DDoc,'DD/MM/YY');

  var Etap: string = '';

  var Akt: string = '';
  if getfirst StepDoc where ((aBasedocNrec == StepDoc.cBaseDoc)) = tsOk
    _loop KatSopr where ((StepDoc.Nrec == KatSopr.cStepDoc))
      Akt += if(Akt = '', '', ', ') +
             if(KatSopr.VidSopr = 101, 'накладная', 'акт') +
             ' №' + KatSopr.NSopr +
             ' от ' + DateToStr(KatSopr.DSopr,'DD/MM/YY');

  case Isp of
  '44201':
  {
    case DDS of
      '204001','204002','204003','204004','204005','204006','204007','204008','204009','210301', '210303', '210800', '403002':
      {
        s1 := Schet;
        s2 := Prim;
        s3 := if(Avans and Predopl, 'аванс', '');
      }
    end;
  }
  '44202':
  {
    case DDS of
      '204001':
      {
        s1 := Schet + if(Dog <> '', ' ' + Dog, '');
        s2 := Prim;
        s3 := if(Avans, 'аванс', '');
      }
      '206006':
      {
        s1 := Schet;
        s2 := Prim;
        s3 := if(Avans and Predopl, 'аванс', '');
      }
    end;
  }
  '100', '300', '480', '490', '900':
  {
    case DDS of
      '205000':
      {
        s1 := Schet;
        s2 := Prim;
        s3 := Dog + if(Etap<>'', ' ' + Etap, '') + if(Avans, ' аванс', '') + if(Akt<>'', ' ' + Akt, '');
      }
    end;
  }
  '090':
  {
    case DDS of
      '205000':
      {
        s1 := Schet;
        s2 := Prim;
        s3 := Dog + if(Etap<>'', ' ' + Etap, '') + if(Avans, ' аванс', '') + if(Akt<>'', ' ' + Akt, '');
      }
      '210407', '210701', '210702':
      {
        s1 := Schet;
        s2 := Prim;
        s3 := if(Avans and Predopl, 'аванс', '');
      }
      '206002':
      {
        s1 := Schet;
        s2 := Prim;
        s3 := Dog + if(Avans, ' аванс', '') + if(Akt<>'', ' ' + Akt, '');
      }
    end;
  }
  '777':
  {
    case DDS of
      '210305', '210306':
      {
        s1 := Schet;
        s2 := Prim;
      }
      '210404', '210407':
      {
        s1 := Schet;
        s2 := Prim;
        s3 := Dog + if(Avans, ' аванс', '') + if(Akt<>'', ' ' + Akt, '');
      }
    end;
  }
  '77706':
  {
    case DDS of
      '209001', '209002', '209004':
      {
        s1 := Schet;
        s2 := Prim;
      }
    end;
  }
  '77703':
  {
    case DDS of
      '210602':
      {
        s1 := Schet + if(Dog<>'', ' '+Dog, '');
        s2 := Prim;
        s3 := if(Avans, 'аванс', '') + if(Akt<>'', ' ' + Akt, '');
      }
    end;
  }
  '762':
  {
    case DDS of
      '207101', '207102', '207103', '208002':
      {
        s1 := Schet;
        s2 := Prim;
        s3 := Dog;
      }
    end;
  }
  '640':
  {
    case DDS of
      '401201', '401202', '401400':
      {
        s1 := Schet + if(Dog<>'', ' '+Dog, '');
        s2 := Prim;
        s3 := if(Avans, 'аванс', '');
      }
      '401101', '401102', '401301', '401302', '403001', '403003', '404000':
      {
        s1 := Schet + if(Dog<>'', ' '+Dog, '');
        s2 := Prim;
        s3 := if(Avans, 'аванс', '') + if(Akt<>'', ' ' + Akt, '');
      }
    end;
  }
  end;

  if s1='' and s2='' and s3=''
  {
    s1 := Schet;
    s2 := Prim;
  }

  if (BaseDoc.Nds > 0)
    s3 += if(s3<>'',' ','') + 'НДС ' + doubletostr(round(basedoc.nds,2),'[|-]3666 666 666 666.88')
  else
    s3 += if(s3<>'',' ','') + 'НДС не облагается';

  oExtAttr.sSetAttrID(coBaseDoc, aBasedocNrec, ATTRNAM_NREC_BASEDOC_NAZNPL,
                      s1+if(s2<>'', ' '+s2,'')+if(s3<>'',' '+s3,''));
}


//--------------------------------------------------------------
window wAddToGroup 'Включение ДО в группу' escClose doAccept;
show(,,50,5);

screen scAddToGroup;
fields
  _sGroupSch: noprotect, pickbutton;
buttons
  cmOk, default;
  cmCancel;
<<

`Наименование группы` .@@@@@@@@@@@@@@@@@@@@@@@@@@

                          <.Включить.> <.Отмена.>
>>
end;

handleevent
  cmOk: PutCommand(cmDefault);
  cmPick:
  {
    if curfield = #_sGroupSch
    {
      var c: comp = 0;
      if RunInterface(L_GRSCH::GETGROUPSCH, 3, 3, 3, false, c, false, false, 0) = cmDefault
        if getfirst GroupSch where ((c == GroupSch.Nrec)) = tsOk
          _sGroupSch := GroupSch.Name;
      rereadrecord;
    }
  }
end;

end;

procedure AddBasedocToGroupUI(sGroupSch: string; basedocMarker: TPtr);
{ #__UNUSED__(sGroupSch)
  if RunWindowModal(wAddToGroup) = cmDefault
  {
    if getfirst GroupSch where ((_sGroupSch == GroupSch.Name)) != tsOk
    {
      ClearBuffer(#GroupSch);
      GroupSch.Name := _sGroupSch;
      GroupSch.cNode := GROUPSCH_NREC_USERSETS;
      insert current GroupSch;
      ClearBuffer(#IerGrSch);
      IerGrSch.cUpRec := GroupSch.Nrec;
      IerGrSch.cRec := GroupSch.Nrec;
      IerGrSch.IsLeaf := 1;
      insert current IerGrSch;
      ClearBuffer(#IerGrSch);
      IerGrSch.cUpRec := GROUPSCH_NREC_USERSETS;
      IerGrSch.cRec := GroupSch.Nrec;
      IerGrSch.IsLeaf := 1;
      insert current IerGrSch;
    }

    var i: longint = 0;
    var c: comp = 0;
    for(i := 0; GetMarker(basedocMarker, i, c); i++)
    {
      if getfirst SpGrSch where ((GroupSch.Nrec == SpGrSch.cGroupSch and
                                  0             == SpGrSch.wList and
                                  c             == SpGrSch.cBaseDoc)) != tsOk
      {
        ClearBuffer(#SpGrSch);
        SpGrSch.cGroupSch := GroupSch.Nrec;
        SpGrSch.cBaseDoc := c;
        insert current SpGrSch;
      }
    }
    message('Установка группы завершена');
  }
}

end.
