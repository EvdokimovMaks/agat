#include KatstroyHelper.vih
#include Query.vih

#component "AGAT"

extensionpoint epappinit;

handler with replace RegisterGlobKatstroyHelper on extensionPoint epAppInit
action
{

  RegisterGlobalIfc('KatstroyHelper');
  result := true;
}


interface KatstroyHelper;

create view vks
var _katstroyNrec: comp;
as select *
from katstroy
where (( _katstroyNrec == katstroy.nrec ));

function posEndOfDate(s: string; posStartOfDate: byte): byte;
{
  var symb: string; symb := '0123456789./\';
  var k: byte; k := posStartOfDate;
  while (pos(s[k], symb) > 0 and k <= length(s)) k++;
  result := k-1;
}

function GetKatstroyCloseDate(katstroyNrec: comp): date;
{
  vks._katstroyNrec := katstroyNrec;
  if vks.getfirst katstroy = tsOk
  {
    var s: string;
    s := replace(locase(vks.katstroy.name),' ','');

    var k: byte;
    k := pos('закрыт',s);

    if k > 0
    {
      k := k + 6;
      var s1: string;
      s1 := substr(s, k, posEndOfDate(s, k) - k + 1);
      s1 := replace(s1, '/', '.');
      s1 := replace(s1, '\', '.');
      case length(s1) of
        8: result := strtodate(s1, 'DD.MM.YY');
        10: result := strtodate(s1, 'DD.MM.YYYY');
      else
        result := 0;
      end;
    }
    else
      result := 0;
  }
  else
    result := 0;
}

function IsKatstroyClosed(katstroyNrec: comp): boolean;
{
  vks._katstroyNrec := katstroyNrec;
  if vks.getfirst katstroy = tsOk
  {
    result := pos('закрыт', replace(locase(vks.katstroy.name),' ','')) > 0;
  }
  else
    result := false;
}

sql query qDogovors =
  select distinct d.nrec
  from attrval avZakaz  //вн. атр. Номер заказа к договору
  join dogovor d on d.nrec = avZakaz.cRec
  where avZakaz.cAttrNam = #comp(00010000000000ABh) and avZakaz.vComp = :katstroyNrec
;

procedure FillDogovorsMarker(katstroyNrec: comp; m: longint);
{

  var rs: IResultSet;
  rs := queryManager.createQuery(qDogovors).setParam('katstroyNrec', katstroyNrec).getResultSet;

  if rs.getFirst = tsOk do {

    insertMarker(m, comp(rs.row.valat(1)));

  } while rs.getNext = tsOk;

}

sql query qIncomeDogovorByScheme =
  select tdog.nrec
  from (
         select distinct coalesce(appdog.nrec, dogovor.nrec) as nrec, coalesce(appdog.status, dogovor.status) as status
         from docschem
         join spschem on spschem.cschem = docschem.nrec and spschem.tidk = 401
         join dogovor on dogovor.nrec = spschem.cdoc and dogovor.direct = 1
         left join dogovor appdog on appdog.nrec = dogovor.cdogovor
         where docschem.cdoc = :katstroyNrec and docschem.tidkgal = 454
       ) tdog
  where tdog.status <> 3
  order by tdog.status
;

sql query qIncomeDogovorByAttrval =
  select dogovor.nrec
  from katstroy
  join attrval avZakaz on avZakaz.cattrnam = #comp(00010000000000ABh) and avZakaz.vcomp = case when katstroy.cstroy = #comp(0) then katstroy.nrec else katstroy.cstroy end
  join dogovor on dogovor.nrec = avZakaz.crec and dogovor.direct = 1 and dogovor.tidk = 400
  where katstroy.nrec = :katstroyNrec
  order by dogovor.status
;

function  GetIncomeDogovor(katstroyNrec: comp): comp;
{

  var c: comp = 0;

  var rs: IResultSet;
  rs := queryManager.createQuery(qIncomeDogovorByScheme).setParam('katstroyNrec', katstroyNrec).getResultSet;

  if rs.getFirst = tsOk
    c := rs.row.valat(1);

  if c = 0
  {
    rs := queryManager.createQuery(qIncomeDogovorByAttrval).setParam('katstroyNrec', katstroyNrec).getResultSet;
    if rs.getFirst = tsOk
      c := rs.row.valat(1);
  }

  result := c;

}

end.
