#include extattr.vih
#include query.vih
#include marker.vih

#component "F_MBP"

alter interface inv_mbp;

//overload
//  procedure CntOnDocDate;
//end;

//#region tables

//таблица для хранения текущих остатков по приходам МБП
table struct tSaldoMbpin (
  MbpinNrec: comp,
  PlaceNrec: comp,
  PlaceName: string,
  dIn      : date,
  cKatMBP  : comp,
  Name     : string,
  Kod      : string[40],
  Price    : double,
  InExpl   : word,
  Perc     : double,
  InvNom   : string[80],
  pasNom   : string[80],
  cntKol   : double,
  fctKol   : double
) with index (
  i01 = MbpinNrec,
  i02 = Name + dIn
);

//#endregion

//#region Queries
sql query querySaldoMbpin =
  select mbpin.nrec as MbpinNrec,
         coalesce(spkPlace.nrec, #comp(0)) as PlaceNrec,
         coalesce(spkPlace.name, '') as PlaceName,
         mbpin.din as dIn,
         katmbp.nrec as cKatMbp,
         katmbp.name as name,
         katmbp.nnumber as kod,
         mbpin.price as price,
         mbpin.inekspl as InExpl,
         mbpin.tpercent as Perc,
         avInvNom.vString as InvNom,
         mbpin.kolfact as cntKol
  from mbpin
  join katmbp on katmbp.nrec = mbpin.cmbp
  left join attrval avPlace on avPlace.wtable = 2001 and avPlace.crec = mbpin.nrec and avPlace.cattrnam = #comp(0001000000000069h) //Место хранения
  left join spkau spkPlace on spkPlace.nrec = avPlace.vcomp
  left join attrval avInvNom on avInvNom.wtable = 2001 and avInvNom.crec = mbpin.nrec and avInvNom.cattrnam = #comp(0001000000000068h) //Инвентарный номер
  where mbpin.status = 1
    and mbpin.cpodr  = :katpodrNrec
    and mbpin.cmol   = :katmolNrec
    and mbpin.kolfact > 0
;
//#endregion

var _extattr: iextattr;
  _qMbpinSaldo: IQuery;    //запрос для расчета сальдо по поступлениям МБП
  _saldoMbpinMarker: IMarker(Marker) new;  //маркер для пометки поступлений в окне выбора остатков МЬП

//#region Функции для отображения дополнительных полей

function GetMBPInName: string; forward;

function GetPlaceState: string; forward;

function GetBarcode: string;
{
  result := _extattr.sGetAttr(2001, MBPInvs.cRecs[1], ATTRNAME_MBP_BARCODE);
}

function GetStorePlace(aStorePlaceNrec: comp): string;
{
  result := if(getanykau(1, KODGRKAU_PLACE, aStorePlaceNrec), givenanname(1), '');
}

function GetStorePlacePlan: string;
{
  result := GetStorePlace(MBPInvs.cRecs[2]);
}

function GetStorePlaceFact: string;
{
  result := GetStorePlace(MBPInvs.cRecs[3]);
}

//#endregion

create view
as select GetMBPInName()(fieldname=MBPInName),
          GetBarcode()(fieldname=Barcode),
          GetStorePlacePlan()(fieldname=StorePlacePlan),
          GetStorePlaceFact()(fieldname=StorePlaceFact),
          GetPlaceState()(fieldname=PlaceState)
from mbpin InvMBPIn, katpodr InvMBPInPodr, mbpIn pickMBPIn,
     tSaldoMbpin, tSaldoMbpin brSaldoMbpin
where ((
  MBPInvs.cRecs[1] == InvMBPIn.nrec and
  InvMBPIn.cPodr   == InvMBPInPodr.nrec and
  MBPInvs.cKatMBP  == pickMBPIn.cMBP
));

function GetMBPInName: string;
{
  result := '';
  if getfirst InvMBPIn = tsOk
  {
    result := 'От ' + InvMBPIn.din +
              ', цена: ' + InvMBPIn.Price +
              ', подр.: ' + if (getfirst InvMBPInPodr = tsOk, InvMBPInPodr.Kod, '') +
              ', МОЛ: ' + if (getanykau(1, 60, InvMBPIn.cMOL), givenanname(1), '');
  }
}

function GetPlaceState: string;
{
  case MBPInvs.sums[3] of
    0: result := 'Оставить без изменений';
    1: result := 'Изменить';
    2: result := 'Изменено';
  end;
}

procedure FillSaldoMbpin(aKatpodrNrec: comp; aKatmolNrec: comp);
{
  if _qMbpinSaldo = nullref
    _qMbpinSaldo := queryManager.createQuery(querySaldoMbpin);

  var rs: IResultSet;
  rs := _qMbpinSaldo.setParam('katpodrNrec', aKatpodrNrec)
                    .setParam('katmolNrec', aKatmolNrec)
                    .getResultSet;
  sqlCopyInto(rs, #tSaldoMbpin, true);
}

//#region Окно для выбора текущих остатков по приходам МБП
window wPickSaldoMbpin 'Выбор остатков спецоснастки' doaccept, escclose;
browse browseBrSaldoMbpin;
table brSaldoMbpin;
recmarker = _saldoMbpinMarker { brSaldoMbpin.MbpinNrec };
fields
  brSaldoMbpin.Name    #3'Наименование' ('Наименование предметов') : [14],  Protect;
  brSaldoMbpin.Kod     #3'Номенкл. №'   ('Номенклатурный номер')   : [12],  Protect, NoAutoSize;
  brSaldoMbpin.InvNom  #3'Инвентарный №'('Инвентарный номер')      : [10],  Protect, NoAutoSize;
  brSaldoMbpin.dIn     #3'Дата поступл' ('Дата поступления')       : [10],  Protect, NoAutoSize;
  brSaldoMbpin.Price   #3'Цена'         ('Цена предметов')         : [12.2],Protect, NoAutoSize;
  brSaldoMbpin.PlaceName #3'Место хранения' ('Место хранения')     : [10],  Protect;
  if (brSaldoMbpin.InExpl = Word(0), 'c', 'э')
                       #3'C'    ('Состояние предметов - на складе или в эксплуатации')           : [2], Protect, NoAutoSize;
  brSaldoMbpin.cntKol  #3'Учет' ('Наличие предметов по данным учета на дату выявления остатков') : [8.3], Protect, NoAutoSize;
  brSaldoMbpin.fctKol  #3'Факт' ('Фактическое наличие предметов на дату выявления остатков')     : [8.3], Protect, NoAutoSize;
end;  //browse
handleevent // window wPickSaldoMbpin
cmInit:
{
  delete all tSaldoMbpin;
  FillSaldoMbpin(mbpmove.cPodrF, mbpmove.cMolF);
  rereadrecord(#brSaldoMbpin);
}
cmDefault:
{
  //заполняем спецификацию инвентаризации помеченными позициями остатков мбп
  var l: longint; //маркер с помеченными позициями
  l := initmarker('', 8, 10, 100, false);

  _saldoMbpinMarker.ExportTo(l); //заполняем его из объектного маркера

  pushpos(#brSaldoMbpin);
  _loop brSaldoMbpin where foundmarker(l, brSaldoMbpin.MbpinNrec)    //проходим в цикле по помеченным позициям остатков
  {
    //добавляем строку в спецификацию инвентаризации
    ClearBuffer( #MBPInv);
    MBPInv.dInv     := cur_date;
    MBPInv.cMove    := mbpmove.nrec;
    MBPInv.cKatMBP  := brSaldoMbpin.cKatMBP;
    MBPInv.Name     := brSaldoMbpin.Name;
    MBPInv.Kod      := brSaldoMbpin.Kod;
    MBPInv.Price    := brSaldoMbpin.Price;
    MBPInv.InExpl   := brSaldoMbpin.InExpl;
    MBPInv.Perc     := brSaldoMbpin.Perc;
    MBPInv.InvNom   := brSaldoMbpin.InvNom;
    MBPInv.pasNom   := brSaldoMbpin.pasNom;
    MBPInv.cntKol   := brSaldoMbpin.cntKol;
    MBPInv.fctKol   := 0;
    MBPInv.cRecs[1] := brSaldoMbpin.MbpinNrec;
    MBPInv.cRecs[2] := brSaldoMbpin.PlaceNrec;
    Insert Current MBPInv;
  }
  poppos(#brSaldoMbpin);

}
end; //handleevent
end;  // window  wPickSaldoMbpin
//#endregion

//Процедура добавления колонки в брауз
procedure AddBrowseColumn(browseName: string; fldName: string; fldTitle: string; fldIndex: integer; isPickButton: boolean);
{
  var l: longint;
  cfsCreateObject('Column', browseName, fldName, false, l);
  cfsSetProp(l, 'Title', fldTitle);
  cfsSetProp(l, 'FieldName', fldName);
  cfsSetProp(l, 'DefaultWidth', word(12));
  cfsSetProp(l, 'Size_X', 100);
  cfsSetProp(l, 'Index', fldIndex);
  cfsSetProp(l, 'Protect', true);
  if isPickButton
    cfsSetProp(l, 'ButtonType', inPickButton);
}

window wPickMBPIn 'Выбор поступления' doaccept, escclose;
browse brMBPIns;
table pickMBPIn;
fields
  pickMBPIn.din 'Дата': [11], protect;
  if(getanykau(1, 2, pickMBPIn.cPodr), givenanname(1), '') 'Подразделение': [15], protect;
  if(getanykau(1, 60, pickMBPIn.cMOL), givenanname(1), '') 'МОЛ': [15], protect;
  pickMBPIn.KolFact 'Количество': [11], protect;
  pickMBPIn.Price 'Цена': [15], protect;
  pickMBPIn.TPercent 'Износ': [7], protect;
end;
end;

//Перекрыта инициализация окна редактирования инвентаризации:
//добавлены колонки для отображения, добавлен обработкик Pick поступления
window EditActOfInv;

handleevent
cminit:
{
  inherited::handleevent(cminit);
  cfsSetCurrentContainer('EditActOfInv');
  AddBrowseColumn('BRINVMBP', 'MBPInName', 'Поступление', 2, true);
  AddBrowseColumn('BRINVMBP', 'Barcode', 'Штрихкод', 2, false);
  AddBrowseColumn('BRINVMBP', 'StorePlacePlan', 'Место хранения - учетное', 2, false);
  AddBrowseColumn('BRINVMBP', 'StorePlaceFact', 'Место хранения - фактическое', 2, false);
  AddBrowseColumn('BRINVMBP', 'PlaceState', 'Статус', 2, true);
}
cmpick:
{
  case curfield of
    #MBPInName:
    {
      if MBPInvs.cKatMBP = 0
      {
        message('Укажите карточку спецоснастки');
        exit;
      }
      if (runwindowmodal(wPickMBPIn) = cmDefault)
      {
        if getfirst mbpinv where ((MBPInvs.cMove == mbpinv.cmove and MBPInvs.cKatMBP == MBPInv.cKatMBP and (pickMBPIn.Nrec = MBPInv.cRecs[1]) )) = tsOk
        {
          message('В инвентаризации уже присутствует позиция с выбранным поступлением');
          exit;
        }
        MBPInvs.Price    := pickMBPIn.Price;
        MBPInvs.InExpl   := pickMBPIn.InEkspl;
        MBPInvs.Perc     := pickMBPIn.tpercent;
        MBPInvs.cntKol   := pickMBPIn.kolfact;
        MBPInvs.fctKol   := 0;
        MBPInvs.cRecs[1] := pickMBPIn.Nrec;
        MBPInvs.cRecs[2] := _extattr.coGetAttr(2001, MBPInvs.cRecs[1], ATTRNAME_MBP_PLACE);
        setmodified(true);
        rescanpanel(#MBPInvs);
      }
    }
    #PlaceState:
    {
      case MBPInvs.Sums[3] of
        0: if (MBPInvs.cRecs[3] != 0 and MBPInvs.cRecs[2] != MBPInvs.cRecs[3]) { MBPInvs.Sums[3] := 1; setmodified(true); }
        1: { MBPInvs.Sums[3] := 0; setmodified(true); }
      end;
      rescanpanel(#MBPInvs);
    }
  else
    inherited::handleevent(cmpick);
  end;
}
end; //handleevent window EditActOfInv

tableevent table mbpmove;
cmCheckField:
{
  case curfield of
    #dEndDate:
    {
      pushpos(#mbpinvs);
      _loop mbpinvs
      {
        if mbpmove.cvalold != 0
        {
          if MBPInvs.sums[3] = 1
          {
            _extattr.coSetAttr(2001, MBPInvs.cRecs[1], ATTRNAME_MBP_PLACE, MBPInvs.cRecs[3], GetStorePlaceFact);
            update current MBPInvs set MBPInvs.sums[3] := 2;
          }
        }
        else
        {
          if MBPInvs.sums[3] = 2
          {
            _extattr.coSetAttr(2001, MBPInvs.cRecs[1], ATTRNAME_MBP_PLACE, MBPInvs.cRecs[2], GetStorePlacePlan);
            update current MBPInvs set MBPInvs.sums[3] := 1;
          }
        }
      }
      poppos(#mbpinvs);
    }
  else
    inherited::handleevent(cmCheckRecord);
  end;
}
end; //tableevent table mbpmove

end; //window EditActOfInv

Panel pnlMBPInv;
  Table MBPInvS;

HandleEvent
cmCheckRecord: {}
end;
end; //panel pnlMBPInv

//перекрыто событие заполнения инвентаризации остатками
handleevent
cmValue1:
{
  if (not CanExecute)
    Exit;

  // Нет прав доступа к документу
  if (iPermission.GetProtected(MBPMove.DesGr, MBPMove.Descr, ZeroDate, Comp(0), MBPMove.cRecs[5]) <> cgProt_None)
  {
    Message(iPermission.GetStrMesProtected, Warning);
    Exit;
  }

  if (isValid(#RefDocs))
    if (Message('По данному документу формировались'#13+
                'Акты об излишке и/или недостаче. Информация из них'#13+
                'будет влиять на расчет наличия по данным учета.'#13+
                'Будете продолжать ?', Warning + YesNo) <> cmYes)
      Exit;

  if (RunWindowModal(wPickSaldoMbpin) = cmDefault)
    Message('Дополнение успешно выполнено.', Information);

  ReReadRecord(#MBPInvS);
}
end;

end.
