#include Cleverence.vih
#include Logger.vih
#include Extattr.vih
#include Query.vih
#include Userreport.vih
#include getkau.vih

#component "AGAT"

interface SyncCleverence 'Обмен данными с ТСД', escclose;
show (,,48,11);
#include SyncCleverenceQueries.inc

table struct tCats (
  kind: word,
  nrec: comp,
  name: string,
  barcode: string[50],
  mol: string,
  podr: string,
  datek: date,
  place: string,
  innum: string[50]
) with index (
  i01 = kind + nrec (unique)
);

table struct tdocs (
  Year     : word,
  Month    : word,
  PodrNrec : comp,
  MOLNrec  : comp
) with index (
  i01 = Year + Month + PodrNrec + MOLNrec
);

table struct tSpDocs (
  Year     : word,
  Month    : word,
  PodrNrec : comp,
  MOLNrec  : comp,
  Kind     : word,
  cRec     : comp,
  placePlan: string,
  placeFact: string,
  kolPlan  : double,
  kolFact  : double
) with index (
  i01 = Year + Month + PodrNrec + MOLNrec + Kind
);

table struct tcells (
  barcode: string[50],
  name: string
) with index (
  i01 = barcode (unique)
);

const
  KIND_OS = 1;
  KIND_MBP = 2;
  DOCTYPE_INV = 'Инвентаризация';
end;

type tspkau = record as table spkau;

var
  _logger   : UTILS::Logger new;
  _curLogger: UTILS::Logger noauto;
  _extAttr  : IExtAttr;
  _writer   : Cleverence::IWriter;
  _reader   : Cleverence::IReader;
  _docReader: Cleverence::DocumentReader new;
  _getkau   : GetKAU;
  _syncYear, _syncMonth: word;
  _lPodr, _lMOL: longint;
  _syncFlags: word;

create view
as select *
from spkau spkCells, tCats, tdocs, tSpDocs, tcells, spkau, invtab, spinvtab, mbpmove, mbpinv,
     mbpin, kaureff, katpodr, katmbp
where ((
  KODGRKAU_PLACE == spkCells.kodgrkau
));

create view vExp
var
  dateFrom: date;
as select *
from invtab, spinvtab
where ((
  15          == invtab.tipdoc and (invtab.dinv >= vExp.dateFrom) and
  invtab.nrec == spinvtab.cinvtab
));

window wLog 'Лог обмена данными с ТСД', escclose;
embedded scLog interface _logger.wLog;
end;
end;

//#region Screen Main Handlers

function GetMarkerFilterName(l: longint; kodgrkau: word): string;
{
  var cnt: longint;
  cnt := getmarkercount(l);
  if cnt = 0
  {
    result := 'Все'
  }
  else if cnt = 1
  {
    var c: comp;
    if getmarker(l, 0, c)
    {
      result := if(getanykau(1,kodgrkau,c), givenanname(1), '??? Nrec='+c);
    }
    else
      result := 'Ошибка. Выберите еще раз';
  }
  else
    result := 'Выбрано элементов: '+cnt;
}

function GetPodrFilterName: string;
{
  result := GetMarkerFilterName(_lPodr, 2);
}

function GetMOLFilterName: string;
{
  result := GetMarkerFilterName(_lMOL, 60);
}

function PickMarkerFilter(var l: longint; kodgrkau: word): boolean;
{
  result := false;
  var c: comp;
  if _getkau.GetCodeKau(2, kodgrkau, c) > 0
  {
    if (l != 0) DoneMarker(l,'');
    l := initMarker(_getkau.GetMarkerName(kodgrkau), 8, 10, 10, false);
    result := true;
  }
}

procedure PickPodrFilter;
{
  if PickMarkerFilter(_lPodr, 2) rereadrecord;
}

procedure PickMOLFilter;
{
  if PickMarkerFilter(_lMOL, 60) rereadrecord;
}

procedure ShowLogWindow;
{
  runwindow(wLog);
}

screen scMain;
fields
  _syncMonth: [list 1 'Январь', 2 'Февраль', 3 'Март', 4 'Апрель', 5 'Май', 6 'Июнь',
                    7 'Июль', 8 'Август', 9 'Сентябрь', 10 'Октябрь', 11 'Ноябрь', 12 'Декабрь'];
  _syncYear: noprotect, spinbutton [1, 1900, 2100];
  [PodrFilterName] GetPodrFilterName: protect, pickbutton;
  [MOLFilterName] GetMOLFilterName: protect, pickbutton;
  _syncFlags: noprotect;
buttons
  cmDoSync, default;
  cmShowLog;
<<

 `Месяц` .@@@@@@@@@@@@@@@ `Год`  .@@@@@@

 `Подразделение` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `МОЛ`           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  [.] Выгружать справочники ОС и МБП`
  [.] Выгружать места хранения`

 <. Синхронизация .> <. Показать лог обмена .>
>>
end;

handleevent
  cmPick:
  {
    case curfield of
      #PodrFilterName: PickPodrFilter;
      #MOLFilterName : PickMOLFilter;
    end;
  }
  cmDelOnProtect:
  {
    case curfield of
      #PodrFilterName: { clearmarker(_lPodr); rereadrecord; }
      #MOLFilterName : { clearmarker(_lMOL);  rereadrecord; }
    end;
  }
  cmShowLog:
  {
    ShowLogWindow;
  }
end;

//#endregion

//#region Logger

procedure SetCurLogger(aLogger: UTILS::Logger);
{
  _curLogger := aLogger;
}
procedure RefreshLog;
{
  rescanpanel(scLog);
}
procedure LogError  (indent: byte; s: string);
{
  _curLogger.LogError(indent, s);
  RefreshLog;
  SetVisualHeader(s);
}
procedure LogWarning(indent: byte; s: string);
{
  _curLogger.LogWarning(indent, s);
  RefreshLog;
  SetVisualHeader(s);
}
procedure LogSuccess(indent: byte; s: string);
{
  _curLogger.LogSuccess(indent, s);
  RefreshLog;
  SetVisualHeader(s);
}
procedure LogInfo   (indent: byte; s: string);
{
  _curLogger.LogInfo(indent, s);
  RefreshLog;
  SetVisualHeader(s);
}
//#endregion

//#region SyncCatalogs

function ExportCatalogs: boolean;
{
  result := false;

  LogInfo(0, 'Экспорт справочников ОС и МБП');

  var q: IQuery;
  q := queryManager.CreateQuery(qOSMBP);
  q.setParam('anMBPBarcode', ATTRNAME_MBP_BARCODE);
  q.setParam('anMBPPlace', ATTRNAME_MBP_PLACE);

  var rs: IResultSet;
  rs := q.getResultSet;

  if (rs = nullref)
  {
    LogError(1, 'Ошибка выполнения запроса. Код ошибки:' + q.errorCode);
    exit;
  }
  delete all tCats;
  sqlCopyInto(rs, #tCats, false);

  var fname: string;
  fname := translatepath(sgettune('AGAT.BARCODE.EXPORTPATH')+'Номенклатура.csv');
  if not _writer.Open(fname)
  {
    LogError(1, 'Ошибка формирования файла '+fname);
    LogError(1, 'Проверьте доступ на запись');
    exit;
  }

  _writer.ClearBuffer;
  _writer.SetValue(0, 'Идентификатор');
  _writer.SetValue(1, 'Штрихкод');
  _writer.SetValue(2, 'Наименование');
  _writer.SetValue(3, 'МОЛ');
  _writer.SetValue(4, 'Подразделение');
  _writer.SetValue(5, 'ДатаВводаВЭксплуатацию');
  _writer.SetValue(6, 'АдресМестонахождения');
  _writer.SetValue(7, 'ИнвентарныйНомер');
  _writer.WriteBuffer;

  if (rs.getFirst = tsOk) do
  {
    _writer.SetValue(0, string(rs.row.Val('kind'))+string(rs.row.Val('nrec'),0,0));
    _writer.SetValue(1, rs.row.Val('barcode'));
    _writer.SetValue(2, rs.row.Val('name'));
    _writer.SetValue(3, rs.row.Val('MOL'));
    _writer.SetValue(4, rs.row.Val('Podr'));
    _writer.SetValue(5, datetostr(rs.row.Val('datek'),'DD.MM.YYYY'));
    _writer.SetValue(6, rs.row.Val('place'));
    _writer.SetValue(7, rs.row.Val('innum'));
    _writer.WriteBuffer;
  } while (rs.getNext = tsOk);

  _writer.close;

  LogSuccess(1, 'Экспорт справочников ОС и МБП завершен успешно');
  result := true;
}

//#endregion

//#region SyncCells

function ExportCells: boolean;
{
  result := false;
  LogInfo(0, 'Экспорт мест хранения');

  var fname: string;
  fname := translatepath(sgettune('AGAT.BARCODE.EXPORTPATH')+'Места хранения.csv');
  if not _writer.Open(fname)
  {
    LogError(1, 'Ошибка формирования файла '+fname);
    LogError(1, 'Проверьте доступ на запись');
    exit;
  }

  _writer.ClearBuffer;
  _writer.SetValue(0, 'Штрихкод');
  _writer.SetValue(1, 'Наименование');
  _writer.WriteBuffer;

  delete all tCells;

  _loop spkCells
  {
    if getfirst tCells where ((spkCells.Code == tCells.barcode)) != tsOk
    {
      _writer.SetValue(0, spkCells.Code);
      _writer.SetValue(1, spkCells.Name);
      _writer.WriteBuffer;
      insert tCells set tCells.barcode := spkCells.Code, tCells.name := spkCells.Name;
    }
  }

  _writer.close;

  LogSuccess(1, 'Экспорт мест хранения завершен успешно');
  result := true;
}

//#endregion

//#region SyncDocs

function AllDocsFinished(docYear: word; docMonth: word; docPodrNrec: comp; docMOLNrec: comp): boolean;
{
  result := false;

  var d1,d2: date;
  d1 := date(1,docMonth, docYear);
  d2 := date(last_day(d1), docMonth, docYear);

  var q: IQuery;
  q := queryManager.createQuery(qDocs);
  q.setParam('podrNrec',docPodrNrec);
  q.setParam('MOLNrec',docMOLNrec);
  q.setParam('startdate',d1);
  q.setParam('enddate',d2);

  var rs: IResultSet;
  rs := q.getResultSet;

  if rs != nullref
  {
    result := true;
    if (rs.getfirst = tsOk) do
    {
      var d: longint;
      d := rs.row.val('docEndDate');
      if d = 0
      {
        result := false;
        break;
      }
    } while rs.getnext = tsOk;
  }
  else
    message('AllDocsFinished. Ошибка выполнения запроса qDocs');
}

function ExportDocs: boolean;
var
  q : IQuery;
  rs: IResultSet;
{
  result := true;

  LogInfo(0, 'Экспорт документов инвентаризаций');

  //период
  var d1, d2: date;
  d1 := date(1,_syncMonth,_syncYear);
  d2 := date(last_day(d1),_syncMonth,_syncYear);

  //заполняем временную таблицу спецификаций документов
  q := queryManager.createQuery(qSpDocs);
  q.setParam('startdate', d1);
  q.setParam('enddate', d2);
  q.setParam('anPlacePlan', ATTRNAME_INVOS_PLACE_PLAN);
  q.setParam('anPlaceFact', ATTRNAME_INVOS_PLACE_FACT);

  rs := q.getResultSet;
  if (rs = nullref)
  {
    LogError(1, 'Ошибка выполнения запроса'+q.errorCode);
    result := false;
    exit;
  }
  delete all tspdocs;
  sqlCopyInto(rs, #tspdocs, true);

  var allPodr: boolean;
  allPodr := getmarkercount(_lPodr) = 0;

  var allMOL: boolean;
  allMOL := getmarkercount(_lMOL) = 0;

  //заполняем временную таблицу документов
  delete all tdocs;
  _loop tspdocs
  {
    if not ( allPodr or foundmarker(_lPodr, tspdocs.PodrNrec) ) continue;
    if not ( allMOL  or foundmarker(_lMOL , tspdocs.MOLNrec ) ) continue;

    if getfirst tdocs where ((tspdocs.Year == tdocs.Year and tspdocs.Month == tdocs.Month and tspdocs.PodrNrec == tdocs.PodrNrec and tspdocs.MOLNrec == tdocs.MOLNrec)) != tsOk
    {
      clearbuffer(#tdocs);
      tdocs.Year     := tspdocs.Year;
      tdocs.Month    := tspdocs.Month;
      tdocs.PodrNrec := tspdocs.PodrNrec;
      tdocs.MOLNrec  := tspdocs.MOLNrec;
      insert current tdocs;
    }
  }

  var fname: string;

  //формируем файлы документов
  _loop tdocs
  {
    fname := translatepath(sgettune('AGAT.BARCODE.EXPORTPATH')+'Инвентаризация №');
    fname += tdocs.Year+tdocs.Month+string(tdocs.PodrNrec,0,0)+string(tdocs.MOLNrec,0,0)+'.csv';
    if not _writer.Open(fname)
    {
      LogError(1, 'Ошибка формирования файла '+fname);
      result := false;
      continue;
    }
    _writer.ClearBuffer;
    _writer.SetValue(0, '#{Document}');
    _writer.WriteBuffer;

    _writer.ClearBuffer;
    _writer.SetValue(0, 'Name');
    _writer.SetValue(1, 'Year');
    _writer.SetValue(2, 'Month');
    _writer.SetValue(3, 'PodrNrec');
    _writer.SetValue(4, 'MOLNrec');
    _writer.SetValue(5, 'Finished');
    _writer.WriteBuffer;

    _writer.ClearBuffer;
    _writer.SetValue(0, tdocs.Month+'.'+tdocs.year+' '+
                        if(getanykau(1,60, tdocs.MOLNrec),givenanname(1),'') + ' ' +
                        if(getfirst katpodr where ((tdocs.PodrNrec == katpodr.nrec)) = tsOk, katpodr.kod, ''));
    _writer.SetValue(1, tdocs.year);
    _writer.SetValue(2, tdocs.Month);
    _writer.SetValue(3, string(tdocs.PodrNrec,0,0));
    _writer.SetValue(4, string(tdocs.MOLNrec,0,0));
    _writer.SetValue(5, if(AllDocsFinished(tdocs.year, tdocs.Month, tdocs.PodrNrec, tdocs.MOLNrec), 'True', 'False'));
    _writer.WriteBuffer;

    _writer.ClearBuffer;
    _writer.SetValue(0, '#{Document.DeclaredItems}');
    _writer.WriteBuffer;

    _writer.ClearBuffer;
    _writer.SetValue(0, 'Штрихкод');
    _writer.SetValue(1, 'План');
    _writer.SetValue(2, 'Факт');
    _writer.SetValue(3, 'Место хранения');
    _writer.WriteBuffer;

    _loop tspdocs where ((tdocs.Year == tspdocs.Year and tdocs.Month == tspdocs.Month and tdocs.PodrNrec == tspdocs.PodrNrec and tdocs.MOLNrec == tspdocs.MOLNrec))
    {
      if getfirst tCats where ((tspdocs.kind == tCats.kind and tspdocs.cRec == tCats.nrec)) != tsOk continue;
      if (tspdocs.KolPlan > 0 and tspdocs.placePlan <> '')
      {
        _writer.SetValue(0, tcats.barcode);
        _writer.SetValue(1, doubletostr(tspdocs.kolPlan, '[|-]3666,88'));
        if (tspdocs.placePlan = tspdocs.placeFact)
          _writer.SetValue(2, doubletostr(tspdocs.kolFact, '[|-]3666,88'));
        else
          _writer.SetValue(2, '0');
        _writer.SetValue(3, tspdocs.placePlan);
        _writer.WriteBuffer;
      }
      if (tspdocs.KolFact > 0 and tspdocs.placeFact <> '' and tspdocs.placePlan <> tspdocs.placeFact)
      {
        _writer.SetValue(0, tcats.barcode);
        _writer.SetValue(1, '0');
        _writer.SetValue(2, doubletostr(tspdocs.kolFact, '[|-]3666,88'));
        _writer.SetValue(3, tspdocs.placeFact);
        _writer.WriteBuffer;
      }
    }
    _writer.close;
  }

  if result
    LogSuccess(1, 'Экспорт документов инвентаризаций завершен успешно');
  else
    LogError(1, 'Экспорт документов инвентаризаций завершен с ошибками');
}

function GetPlaceByCode(placeCode: string): tspkau;
{
  var rslt: tspkau;
  if getfirst spkau where ((KODGRKAU_PLACE == spkau.kodgrkau and placeCode == spkau.code)) = tsOk
    rslt := tspkau(spkau.buffer)
  else
    clearadvrecord(rslt);
  result := rslt;
}

procedure SetOSInvItem(invtabNrec: comp; item:CLEVERENCE::IDocumentItem);
{
  var katosNrec: comp;
  katosNrec := comp(substr(item.ProductId,2,255));

  var place: tspkau;
  place := GetPlaceByCode(item.Place);

  if getfirst spinvtab where ((invtabNrec == spinvtab.cinvtab and katosNrec == spinvtab.cmc)) != tsOk
  {
    clearbuffer(#spinvtab);
    spinvtab.cinvtab := invtabNrec;
    spinvtab.cmc     := katosNrec;
    insert current spinvtab;
    if getfirst kaureff where (( 3000           == kaureff.cotable and
                                 spinvtab.cmc   == kaureff.crec and
                                 KODGRKAU_PLACE == kaureff.wkau )) = tsOk
    {
      _extattr.coSetAttr(1124, spinvtab.nrec, ATTRNAME_INVOS_PLACE_PLAN, kaureff.ckau, if(getanykau(1,KODGRKAU_PLACE, kaureff.ckau), givenanname(1), '' ));
    }
  }
  update current spinvtab set spinvtab.kol := item.FactQty;
  _extattr.coSetAttr(1124, spinvtab.nrec, ATTRNAME_INVOS_PLACE_FACT, place.nrec, place.name);
}

procedure SetMBPInvItem(mbpmoveNrec: comp; item:CLEVERENCE::IDocumentItem);
{

  var mbpinNrec: comp;
  mbpinNrec := comp(substr(item.ProductId,2,255));

  var place: tspkau;
  place := GetPlaceByCode(item.Place);

  if getfirst mbpinv where ((mbpmoveNrec == mbpinv.cmove and (mbpinv.crecs[1] = mbpinNrec) )) != tsOk
  {
    clearbuffer(#mbpinv);
    mbpinv.cmove := mbpmoveNrec;
    mbpinv.crecs[1] := mbpinNrec;
    mbpinv.crecs[2] := _extattr.coGetAttr(2001, mbpinNrec, ATTRNAME_MBP_PLACE);
    if getfirst mbpin where (( mbpinNrec == mbpin.nrec )) = tsOk
    {
      mbpinv.ckatmbp := mbpin.cmbp;
      mbpinv.price := mbpin.price;
      mbpinv.dinv := mbpin.din;
      if getfirst katmbp where ((mbpin.cmbp == katmbp.nrec)) = tsOk
      {
        mbpinv.kod  := katmbp.name;
        mbpinv.name := katmbp.nnumber;
      }
    }
    insert current mbpinv;
  }
  update current mbpinv set mbpinv.crecs[3] := place.nrec, mbpinv.fctkol := item.FactQty;
}

function ImportDoc(d: CLEVERENCE::IDocument): boolean;
{
  result := false;

  LogInfo(1, 'Импорт документа '+d.name);

  var d1, d2: date;
  d1 := date(1, d.Month, d.Year);
  d2 := date(last_day(d1), d.Month, d.Year);

  //определяем нрек инвентаризации ОС с подразделением и молом из документа
  var invtabNrec: comp;
  var invtabEditable: boolean;
  if getfirst invtab where ((15           == invtab.tipdoc and
                             d.PodrNrec   == invtab.cSklad and
                             d1          <<= invtab.dinv and
                             (invtab.dinv <= d2 and invtab.cMol = d.MOLNrec) )) = tsOk
  {
    invtabNrec := invtab.nrec;
    invtabEditable := invtab.dinvend = 0;
  }
  else
  {
    invtabNrec := 0;
    invtabEditable := false;
  }

  //определяем нрек инвентаризации спецоснастки с подразделением и молом из документа
  var mbpmoveNrec: comp;
  var mbpmoveEditable: boolean;
  if getfirst mbpmove where (( 11         == mbpmove.status and
                               d.PodrNrec == mbpmove.cpodrf and
                               d1        <<= mbpmove.dmove and
                               (d.MOLNrec = mbpmove.cmolf and d2 >= mbpmove.dmove) )) = tsOk
  {
    mbpmoveNrec := mbpmove.nrec;
    mbpmoveEditable := mbpmove.cvalold = 0;
  }
  else
  {
    mbpmoveNrec := 0;
    mbpmoveEditable := false;
  }

  var i, productKind: word;
  var productNrec: comp;
  var item: CLEVERENCE::IDocumentItem;
  for(i:=0; i < d.ItemCount; ++i)
  {
    item := d.GetItem(i);
    if item = nullref continue;
    if item.FactQty = 0 continue;
    productKind := substr(item.ProductId,1,1);
    case productKind of
      KIND_OS : if (invtabEditable)  SetOSInvItem(invtabNrec, item);
      KIND_MBP: if (mbpmoveEditable) SetMBPInvItem(mbpmoveNrec, item);
    end;
  }

  result := true;
}

function ImportDocs: boolean;
{
  result := true;

  LogInfo(0, 'Импорт документов инвентаризаций');

  var docsDateFrom: date;
  docsDateFrom := dGetTune('AGAT.BARCODE.DOCSTARTDATE');

  var d: CLEVERENCE::IDocument;

  var fname: string;
  fname := GetFirstFile(sGetTune('AGAT.BARCODE.IMPORTPATH'), 'Инвентаризация №*.csv');
  while (fname != strDataIsEmpty )
  {
    d := _docReader.Load(fname);
    if (d != nullref)
    {
      ImportDoc(d);
      FreeVipInterface(d);
    }
    DeleteFile(fname);
    fname := GetNextFile;
  }
  LogSuccess(1, 'Импорт документов инвентаризаций завершен успешно');
}

//#endregion

//#region SyncUtil

function RunSyncUtilExport: boolean;
{
  LogInfo(0, 'Выгрузка данных на ТСД');

  var appPath: string;
  appPath := sGetTune('AGAT.BARCODE.SYNCCONPATH');

  var rslt: integer;
  ExecProgram(appPath, 'upload close closeerr tray', 'Выгрузка данных на ТСД', pfSilent, rslt);

  if rslt = 0
  {
    LogSuccess(1, 'Выгрузка данных на ТСД завершена успешно');
    result := true;
  }
  else
  {
    LogError(1, 'Выгрузка данных на ТСД завершена с ошибкой: '+rslt);
    result := false;
  }
}

function RunSyncUtilImport: boolean;
{
  LogInfo(0, 'Загрузка данных из ТСД');

  var appPath: string;
  appPath := sGetTune('AGAT.BARCODE.SYNCCONPATH');

  var rslt: integer;
  ExecProgram(appPath, 'download close closeerr tray', 'Загрузка данных из ТСД', pfSilent, rslt);

  if rslt = 0
  {
    LogSuccess(1, 'Загрузка данных из ТСД завершена успешно');
    result := true;
  }
  else
  {
    LogError(1, 'Загрузка данных из ТСД завершена с ошибкой: '+rslt);
    result := false;
  }
}

//#endregion


handleevent

cmDoSync:
{
  startnewvisual(vtRotateVisual, vfTimer, '', 0);

  var isSuccess: boolean;

  var doExportCatalogs: boolean;
  doExportCatalogs := (_syncFlags and 1) > 0;

  var doExportCells: boolean;
  doExportCells := (_syncFlags and 2) > 0;

  RunSyncUtilImport;
  ImportDocs;

  isSuccess := true;

  if doExportCatalogs
  {
    isSuccess := ExportCatalogs;
    if not isSuccess message('Ошибка экспорта справочников МБП и ОС', error);
  }

  if doExportCells and isSuccess
  {
    isSuccess := ExportCells;
    if not isSuccess message('Ошибка экспорта мест хранения', error)
  }

  if isSuccess
  {
    isSuccess := ExportDocs;
    if not isSuccess message('Ошибка экспорта документов', error);
  }

  if isSuccess
  {
    isSuccess := RunSyncUtilExport;
  }

  RunSyncUtilImport;
  ImportDocs;

  if isSuccess
  {
    message('Обмен с ТСД завершен успешно');
  }
  else
  {
    ShowLogWindow;
  }

  stopvisual('',0)
}

cmInit:
{
  if not getvipref(_writer, 'CLEVERENCE::CSVFileWriter')
  {
    message('Ошибка инициализации', error);
    abort;
    exit;
  }
  if not getvipref(_reader, 'CLEVERENCE::CSVFileReader')
  {
    message('Ошибка инициализации', error);
    abort;
    exit;
  }
  _docReader.IReaderSet(_reader);

  SetCurLogger(_logger);

  if not readmydsk(_syncYear, 'SyncCleverence_syncYear', false) _syncYear := year(cur_date);
  if not readmydsk(_syncMonth, 'SyncCleverence_syncMonth', false) _syncMonth := month(cur_date);
  _lPodr := initmarker('SyncCleverence_lPodr', 8, 10, 10, false);
  _lMOL := initmarker('SyncCleverence_lMOL', 8, 10, 10, false);
  _syncFlags := 11111111b;
}

cmDone:
{
  savemydsk(_syncYear, 'SyncCleverence_syncYear');
  savemydsk(_syncMonth, 'SyncCleverence_syncMonth');
  donemarker(_lPodr, 'SyncCleverence_lPodr');
  donemarker(_lMOL, 'SyncCleverence_lMOL');
}

end;

end.

VipInterface UserReport_SyncCleverence Implements IUserReport licensed(free);
Interface UserReport_SyncCleverence;
  create view dummy;
  procedure Run;
  begin
    runinterfacenomodal(AGAT::SyncCleverence);
  end;

  function GetReportName: String;
  begin
    GetReportName := '0100 Обмен данными с ТСД (2015)';
  end;

  function GetGroupName (Level : Word) : String;
  begin
    if (Level = 1)
      GetGroupName := 'Штрих-код'
    else
      GetGroupName := '';
  end;

  function GetPriority : Integer;
  begin
    GetPriority := 0;
  end;

  function VisibleInModule(Ind : Byte) : String;
  begin
    VisibleInModule := '';
    case Ind of
      1 : VisibleInModule := 'B_OSN';
      2 : VisibleInModule := 'MBP';
    end;
  end;
end.
