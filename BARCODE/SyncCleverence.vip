#include Cleverence.Warehouse.vih
#include Logger.vih
#include Extattr.vih
#include Query.vih

#component "AGAT"

interface SyncCleverence;

#include SyncCleverenceQueries.inc

var
  _connector: CLEVERENCE::oStorageConnector;
  _logger: UTILS::Logger new;
  _curLogger: UTILS::Logger noauto;
  _extAttr: IExtAttr;

create view
as select *
from spkau spkCells
where ((
  KODGRKAU_PLACE == spkCells.kodgrkau
));

embedded scLog interface _logger.wLog;
show(,18,,) fixed_y;
end;

screen scMain;
show (,,,17);
buttons
  cmDoSync, default;
<<
 <. Синхронизация .>
>>
end;

//#region Logger

procedure SetCurLogger(aLogger: UTILS::Logger);
{
  _curLogger := aLogger;
}
procedure RefreshLog;
{
  rescanpanel(scLog);
}
procedure LogError  (indent: byte; s: string);
{
  _curLogger.LogError(indent, s); RefreshLog;
}
procedure LogWarning(indent: byte; s: string);
{
  _curLogger.LogWarning(indent, s); RefreshLog;
}
procedure LogSuccess(indent: byte; s: string);
{
  _curLogger.LogSuccess(indent, s); RefreshLog;
}
procedure LogInfo   (indent: byte; s: string);
{
  _curLogger.LogInfo(indent, s); RefreshLog;
}
//#endregion

function Connect: boolean;
{
  var connString: string;
  connString := sGetTune('AGAT.BARCODE.CONNECTIONSTRING');
  LogInfo(0, 'Подключение к серверу "'+connString+'"');
  if _connector.InitializeServerConnection(connString)
  {
    LogSuccess(1, 'Подключение успешно');
    result := true;
  }
  else
  {
    LogError(1, 'Ошибка подключения');
    result := false;
  }
}

//#region SyncCatalogs

function NewProductCollection(var pc: CLEVERENCE::oCollection): boolean;
{
  pc := _connector.CreateProductCollection;
  if pc = nullref
  {
    LogError(1,'Cleverence. Ошибка создания коллекции Products');
    result := false;
  }
  else
    result := true;
}

function SetProductPacking(aProduct: CLEVERENCE::oProduct): boolean;
{
  result := false;
  var packing: CLEVERENCE::oPacking;
  packing := _connector.CreatePacking;
  if (packing = nullref)
  {
    LogError(1,'Cleverence. Ошибка создания Packing');
    exit;
  }
  packing.Id := 1;
  packing.name := 'шт';
  packing.barcode := aProduct.Barcode;
  aProduct.packings.Add(packing);
  aProduct.BasePackingId := packing.Id;
  FreeVipInterface(packing);
  result := true;
}

function SetProductField(aProduct: CLEVERENCE::oProduct; aFieldName: string; aFieldValue: string): boolean;
{
  result := false;
  var fieldValue: CLEVERENCE::oFieldValue;
  fieldValue := _connector.CreateFieldValue;
  if (fieldValue = nullref)
  {
    LogError(1,'Cleverence. Ошибка создания fieldValue');
    exit;
  }
  fieldValue.FieldName := aFieldName;
  fieldValue.Value := aFieldValue;
  aProduct.Fields.Add(fieldValue);
  FreeVipInterface(fieldValue);
  result := true;
}

function NewProduct(var aProduct: CLEVERENCE::oProduct; aId: string; aBarcode: string; aName: string): boolean;
{
  result := false;
  aProduct := _connector.CreateProduct;
  if aProduct = nullref
  {
    LogError(1, 'Cleverence. Ошибка создания Product');
    exit;
  }
  aProduct.Id := aId;
  aProduct.Name := aName;
  aProduct.Barcode := aBarcode;
  aProduct.UnitConvertionRate := 1;
  result := true;
}

function SyncCatalogs: boolean;
{
  result := false;

  LogInfo(0, 'Экспорт справочников ОС и МБП');
  LogInfo(1, 'Выбор элементов справочников, измененных с даты последней успешной синхронизации');

  var q: IQuery;
  q := queryManager.CreateQuery(qOSMBP);
  var syncDate: date; syncDate := dGetTune('AGAT.BARCODE.LASTCATSYNCDATE');
  var syncTime: time; syncTime := tGetTune('AGAT.BARCODE.LASTCATSYNCTIME');
  q.setParam('date', syncDate);
  q.setParam('time', syncTime);
  q.setParam('anMBPBarcode', ATTRNAME_MBP_BARCODE);
  q.setParam('anMBPPlace', ATTRNAME_MBP_PLACE);

  var rs: IResultSet;
  rs := q.getResultSet;

  if (rs = nullref)
  {
    LogError(1, 'Ошибка выполнения запроса. Код ошибки:' + q.errorCode);
    exit;
  }

  var products: CLEVERENCE::oCollection;
  var product: CLEVERENCE::oProduct;

  var i, cnt: longint;
  var isUserBreak: boolean;

  if not NewProductCollection(products) exit;

  i := 0; cnt := 0;
  isUserBreak := false;

  StartNewVisual(vtIndicatorVisual, vfTimer+vfBreak+vfThread, '', rs.count);

  if (rs.getFirst = tsOk) do
  {
    if not NewProduct(product, rs.row.Val('kind')+string(rs.row.Val('nrec'),0,0), rs.row.Val('barcode'), rs.row.Val('name')) exit;

    if not SetProductPacking(product) exit;

    if not SetProductField(product, 'МОЛ', rs.row.Val('mol')) exit;
    if not SetProductField(product, 'Подразделение', rs.row.Val('podr')) exit;
    if not SetProductField(product, 'ДатаВводаВЭксплуатацию', rs.row.Val('datek')) exit;
    if not SetProductField(product, 'АдресМестонахождения', rs.row.Val('place')) exit;
    if not SetProductField(product, 'ИнвентарныйНомер', rs.row.Val('innum')) exit;

    products.Add(product);

    FreeVipInterface(product);

    i++;
    cnt++;

    if (i = 1000) then
    {
      LogInfo(1, 'Экспортировано позиций '+cnt+' из '+rs.count);
      _connector.SetProducts(products);
      FreeVipInterface(products);
      i := 0;
      if not NewProductCollection(products) exit;
    }

    if not nextvisual
    {
      isUserBreak := true;
      break;
    }

  } while (rs.getNext = tsOk);

  StopVisual('',0);

  if isUserBreak
  {
    LogWarning(1, 'Прерван пользователем. Обработано позиций '+cnt+' из '+rs.count);
  }
  else
  {
    LogSuccess(1, 'Завершен успешно. Обработано позиций '+cnt+' из '+rs.count);
    dSetTune('AGAT.BARCODE.LASTCATSYNCDATE', cur_date);
    tSetTune('AGAT.BARCODE.LASTCATSYNCTIME', cur_time);
    _connector.SetProducts(products);
  }

  FreeVipInterface(products);
  result := true;
}

//#endregion

//#region SyncCells

function NewEnvironment(var aEnvironment: CLEVERENCE::oEnvironment): boolean;
{
  aEnvironment := _connector.GetEnvironment;
  if aEnvironment = nullref
  {
    LogError(1, 'Cleverence. Ошибка получения Environment');
    result := false;
  }
  else
    result := true;
}

function GetWarehouse(aEnvironment: CLEVERENCE::oEnvironment; var aWarehouse: CLEVERENCE::oWarehouse; aWarehouseIndex: integer): boolean;
{
  result := false;

  if aEnvironment.warehouses = nullref
  {
    LogError(1, 'Cleverence. Ошибка получения коллекции складов');
    exit;
  }

  if aEnvironment.warehouses.count <= aWarehouseIndex
  {
    LogError(1, 'Cleverence. Ошибка получения склада ' + aWarehouseIndex + '. Количество складов: '+ aEnvironment.warehouses.count);
    exit;
  }

  aWarehouse := oWarehouse(aEnvironment.warehouses.Item(aWarehouseIndex));
  if aWarehouse = nullref
  {
    LogError(1, 'Cleverence. Ошибка получения склада '+aWarehouseIndex);
    exit;
  }

  result := true;
}

function SyncCells: boolean;
{
  result := false;
  LogInfo(0, 'Экспорт мест хранения');

  var environment: CLEVERENCE::oEnvironment;
  if not NewEnvironment(environment) exit;

  var warehouse: CLEVERENCE::oWarehouse;
  if not GetWarehouse(environment, warehouse, 0) exit;

  var wc: CLEVERENCE::oCollection
  wc := _connector.CreateWarehouseCollection;
  if wc = nullref
  {
    LogError(1, 'Cleverence. Ошибка создания коллекции складов');
    exit;
  }

  var place: CLEVERENCE::oCell;
  var cnt: longint; cnt := 0;
  var isUserBreak: boolean; isUserBreak := false;

  StartNewVisual(vtRotateVisual, vfTimer+vfBreak, '', 0);

  _loop spkCells
  {
    cnt++;

    place := CLEVERENCE::oCell(warehouse.cells.FindBy('barcode', spkCells.code));
    if place != nullref
    {
      place.barcode := spkCells.code;
      place.name := spkCells.name;
    }
    else
    {
      place := _connector.CreateCell;
      if place = nullref
      {
        LogError(1, 'Cleverence. Ошибка создания ячейки');
        exit;
      }
      place.barcode := spkCells.code;
      place.name := spkCells.name;

      warehouse.cells.add(place);
    }

    FreeVipInterface(place);

    if not nextvisual
    {
      isUserBreak := true;
      LogWarning(1, 'Прерван пользователем. Обработано позиций: ' + cnt);
      break;
    }

  }

  StopVisual('',0);

  wc.add(warehouse);                        // Добавляем склад в коллекцию складов
  _connector.SetWarehouses(wc);             // Записываем коллекцию складов
  FreeVipInterface(warehouse);
  FreeVipInterface(wc);

  if not isUserBreak
    LogSuccess(1, 'Завершен успешно. Обработано позиций: ' + cnt);

  result := true;
}

//#endregion

handleevent

cmDoSync:
{
  if not connect
    message('Ошибка подключения к серверу', error)
  else if not SyncCatalogs
    message('Ошибка синхронизации справочников', error)
  else if not SyncCells
    message('Ошибка синхронизации мест хранения', error)
  ;
}

cmInit:
{
  if not (getvipref(_connector, 'CLEVERENCE::iStorageConnector'))
  {
    message('Ошибка инициализации коннектора', error);
    abort;
    exit;
  }

  SetCurLogger(_logger);
}

end;

end.
