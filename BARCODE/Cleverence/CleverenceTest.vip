#include Cleverence.Warehouse.vih

#component "AGAT"

interface CleverenceTest;
var
  _connector: CLEVERENCE::oStorageConnector;

screen sc1;
buttons
  cmAddProduct;
  cmAddDocument;
<<

<. Добавить товар .>  <. Добавить документ .>

>>
end;

function Connect: boolean;
{
  result := _connector.InitializeServerConnection('http://127.0.0.1:8000/datastorage.asmx');
}

function CreateProductField(aProduct: CLEVERENCE::oProduct; aFieldName: string; aFieldValue: string): CLEVERENCE::oFieldValue;
{
  var fieldValue: CLEVERENCE::oFieldValue;
  fieldValue := _connector.CreateFieldValue;
  fieldValue.FieldName := aFieldName;
  fieldValue.Value := aFieldValue;
  aProduct.Fields.Add(fieldValue);
  result := fieldValue;
}

handleevent
  cmAddDocument:
  {
    var environment: CLEVERENCE::oEnvironment;
    environment := _connector.GetEnvironment;
    if environment = nullref exit;
    if environment.warehouses = nullref exit;
    if environment.warehouses.count = 0 exit;

    var warehouse: oWarehouse;
    warehouse := oWarehouse(environment.warehouses.Item(0));
    if warehouse = nullref exit;


    var documents: CLEVERENCE::oCollection;
    documents := _connector.CreateDocumentCollection; //GetDocuments('Инвентаризация', false);
    if documents = nullref exit;

    var document: CLEVERENCE::oDocument;
    document := _connector.CreateDocument;
    if document = nullref exit;

    document.Id := 'DocumentId1';
    document.Name := 'DocumentName1';
    document.DocumentTypeName := 'Инвентаризация';
    document.CreateDate := '22.07.2015';
    document.WarehouseId := warehouse.Id;

    var documentItem: CLEVERENCE::oDocumentItem;

    var i, cnt: longint;
    cnt := 50;
    for (i := 1; i<=cnt; i++)
    {
      documentItem := _connector.CreateDocumentItem;
      if documentItem = nullref exit;

      documentItem.ProductId := 'ProductId'+i;
      documentItem.PackingId := 'PackingId'+i;
      documentItem.FirstStorageBarcode := 'PackingBarcode'+i;
      documentItem.DeclaredQuantity := i;
      document.DeclaredItems.Add(documentItem);
      FreeVipInterface(documentItem);
    }

    documents.Add(document);

    FreeVipInterface(document);

    _connector.SetDocuments(documents);

    FreeVipInterface(documents);
  }

  cmAddProduct:
  {
    var product: CLEVERENCE::oProduct;
    var packing: CLEVERENCE::oPacking;
    var mol, podr, dexpl, addr, invnum: CLEVERENCE::oFieldValue;

    var i, cnt: longint;

    cnt := 1000;

    StartNewVisual(vtIndicatorVisual, vfTimer+vfBreak, '', cnt);

    product := _connector.CreateProduct;

    packing := _connector.CreatePacking;
    packing.Id := 'PackingId';
    packing.name := 'PackingName';
    packing.barcode := 'PackingBarcode';
    product.packings.Add(packing);

    mol    := CreateProductField(product, 'МОЛ', 'МОЛ');
    podr   := CreateProductField(product, 'Подразделение', 'Подразделение');
    dexpl  := CreateProductField(product, 'ДатаВводаВЭксплуатацию', 'ДатаВводаВЭксплуатацию');
    addr   := CreateProductField(product, 'АдресМестонахождения', 'АдресМестонахождения');
    invnum := CreateProductField(product, 'ИнвентарныйНомер', 'ИнвентарныйНомер');

    for (i := 1; i <= cnt; i++)
    {
      packing.Id := 'PackingId'+i;
      packing.name := 'PackingName'+i;
      packing.barcode := 'PackingBarcode'+i;

      product.Id := 'ProductId'+i;
      product.Name := 'ProductName'+i;
      product.Barcode := 'ProductBarcode'+i;
      product.BasePackingId := packing.Id;
      product.UnitConvertionRate := 1;

      mol.Value    := 'МОЛ'+i;
      podr.Value   := 'Подразделение'+i;
      dexpl.Value  := 'ДатаВводаВЭксплуатацию'+i;
      addr.Value   := 'АдресМестонахождения'+i;
      invnum.Value := 'ИнвентарныйНомер'+i;

      _connector.SetProduct(product);
      if not nextvisual break;
    }
    StopVisual('',0);
    FreeVipInterface(product);
    FreeVipInterface(packing);
    FreeVipInterface(mol);
    FreeVipInterface(podr);
    FreeVipInterface(dexpl);
    FreeVipInterface(addr);
    FreeVipInterface(invnum);
  }
  cmInit:
  {
    if not (getvipref(_connector, 'CLEVERENCE::iStorageConnector'))
    {
      message('Ошибка инициализации коннектора', error);
      abort;
      exit;
    }

    if not connect
    {
      message('Ошибка подключения к серверу', error);
      abort;
      exit;
    }
  }
end;
end.
