#include Cleverence.vih

#component "Cleverence"

interface Tunes;

var
  _p: pointer;
  _cleverenceRegPath: string;

function InitWScriptShell(var errMsg: string): boolean;
{
  result := true;
  _try
  {
    _p := OleCreate('WScript.Shell');
  }
  _except
    on ExOleCantCreateObject:
    {
      errMsg := 'Cleverence::Tunes.InitWScriptShell'#13'Ошибка создания OLE-объекта WScript.Shell'#13''+ExploreException;
      result := false;
    }
    else
    {
      errMsg := 'Cleverence::Tunes.InitWScriptShell'#13'Неизвестное исключение:'#13''+ExploreException;
      result := false;
    }
}

function RegRead(regPath: string; var value: variant; var errMsg: string): boolean;
{
  var s: string;
  _try
  {
    _p := OleCreate('WScript.Shell');
    result := OleCall2(_p, ocFunc, 'regread', regPath, s);
    value := s;
  }
  _except
    on ExOleBadCall:
    {
      errMsg := 'Cleverence::Tunes.RegRead'#13'Ошибка вызова WScript.Shell.RegRead('+regPath+')'#13''+ExploreException;
      result := false;
    }
    else
    {
      errMsg := 'Cleverence::Tunes.RegRead'#13'Неизвестное исключение:'#13''+ExploreException;
      result := false;
    }
}

function RegReadString(regPath: string): string;
{
  var errMsg: string;
  var value: variant;
  if RegRead(regPath, value, errMsg)
    result := string(value)
  else
    result := '';
}

constructor Init;
{
  result := false;
  var errMsg: string;
  var value: variant;
  if not InitWScriptShell(errMsg) exit;
  if RegRead('HKLM\Software\Cleverence Soft\SyncUtil\', value, errMsg)
  {
    _cleverenceRegPath := 'HKCU\Software\Cleverence Soft\SyncUtil\';
  }
  else if RegRead('HKLM\Software\Cleverence Soft\SyncUtil\Name', value, errMsg)
  {
    _cleverenceRegPath := 'HKLM\Software\Cleverence Soft\SyncUtil\';
  }
  else exit;
  result := true;
}

function GetAppPath: string;
{
  result := regReadString(_cleverenceRegPath+'AppPath');
}

function GetDataPath: string;
{
  result := regReadString(_cleverenceRegPath+'DataPath');
}

function GetName: string;
{
  result := regReadString(_cleverenceRegPath+'Name');
}

function GetVersion: string;
{
  result := regReadString(_cleverenceRegPath+'Version');
}

property AppPath : string read GetAppPath;
property DataPath: string read GetDataPath;
property Name    : string read GetName;
property Version : string read GetVersion;

end.
