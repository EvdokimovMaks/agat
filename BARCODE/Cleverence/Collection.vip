#include Cleverence.Warehouse.vih
#include olehelper.vih

#component "CLEVERENCE"

interface iCollection;

var
  _collectionItemVipInterfaceName: string;

function Add(aItem: oOleObject): longint;
{
  result := 0;

  if aItem = nullref exit;

  var ind: variant;

  var p: pointer;
  p := aItem.ObjectPointer;
  if longint(p) = 0 exit;

  _try
  {
    OleCall2(_objectPointer, ocFunc, 'Add', p, ind);
  }
  _except
  on exOleBadCall:
  {
    message('iCollection.Add: Исключение exOleBadCall'#13'при добавлении записи в коллекцию'#13''+ExploreException, error);
    exit;
  }
  else
  {
    message('iCollection.Add: Неизвестное исключение'#13'при добавлении записи в коллекцию'#13''+ExploreException, error);
    exit;
  }

  result := ind;
}

function Item(ind: longint): oOleObject;
var newObj: oOleObject;
{
  result := nullref;

  var p: pointer;
  _try
  {
    OleCall2(_objectPointer, ocGet, 'Item', ind, p);
  }
  _except
  on exOleBadCall:
  {
    message('iCollection.Item: Исключение exOleBadCall'#13'при получении элемента коллекции'#13''+ExploreException, error);
    exit;
  }
  else
  {
    message('iCollection.Item: Неизвестное исключение'#13'при получении элемента коллекции'#13''+ExploreException, error);
    exit;
  }

  if not loadvipref(newObj, _collectionItemVipInterfaceName)
  {
    message('iCollection.Item: Ошибка инициализации '+_collectionItemVipInterfaceName, error);
    exit;
  }

  if not newObj.SetObjectPointer(p)
  {
    message('iCollection.Item: Ошибка при выполнении '+_collectionItemVipInterfaceName+'.SetObjectPointer', error);
    exit;
  }

  result := newObj;
}

function Count: longint;
{
  result := 0;

  var cnt: variant;
  _try
  {
    OleCall1(_objectPointer, ocGet, 'Count', cnt);
  }
  _except
  on exOleBadCall:
  {
    message('iCollection.Count: Исключение exOleBadCall'#13'при получении количества записей коллекции'#13''+ExploreException, error);
    exit;
  }
  else
  {
    message('iCollection.Count: Неизвестное исключение'#13'при получении количества записей коллекции'#13''+ExploreException, error);
    exit;
  }

  result := cnt;
}

procedure Clear;
{
  _try
  {
    OleCall0(_objectPointer, ocProc, 'Clear');
  }
  _except
  on exOleBadCall:
  {
    message('iCollection.Clear: Исключение exOleBadCall'#13'при очистке коллекции'#13''+ExploreException, error);
    exit;
  }
  else
  {
    message('iCollection.Clear: Неизвестное исключение'#13'при очистке коллекции'#13''+ExploreException, error);
    exit;
  }
}

function FindBy(findByFieldName: string; findValue: variant): oOleObject;
var newObj: oOleObject;
{
  result := nullref;

  var p: pointer;
  _try
  {
    OleCall2(_objectPointer, ocFunc, 'FindBy'+findByFieldName, findValue, p);
  }
  _except
  on exOleBadCall: exit;
  else exit;

  if not loadvipref(newObj, _collectionItemVipInterfaceName)
  {
    message('iCollection.FindBy'+findByFieldName+': Ошибка инициализации '+_collectionItemVipInterfaceName, error);
    exit;
  }

  if not newObj.SetObjectPointer(p)
  {
    message('iCollection.FindBy'+findByFieldName+': Ошибка при выполнении '+_collectionItemVipInterfaceName+'.SetObjectPointer', error);
    exit;
  }

  result := newObj;

}

function Contains(aObject: oOleObject): boolean;
{
  result := false;

  if aObject = nullref exit;

  var p: pointer;
  p := aObject.ObjectPointer;

  if longint(p) = 0 exit;

  var rslt: boolean;

  _try
  {
    OleCall2(_objectPointer, ocFunc, 'Contains', p, rslt);
  }
  _except
  on exOleBadCall:
  {
    message('iCollection.Contains:'#13''+ExploreException, error);
    exit;
  }
  else
  {
    message('iCollection.Contains:'#13''+ExploreException, error);
    exit;
  };

  result := rslt;
}

property CollectionItemVipInterfaceName: string absolute _collectionItemVipInterfaceName;

end.
