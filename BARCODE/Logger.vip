#include Logger.vih

#component "UTILS"

interface Logger;

const
  EMPTY_STRING = '                                                                                                                                                                                                                                            ';
  INDENT_GAP = 5;
end;

table struct tLog (
  nrec: comp,
  kind: byte,
  timestamp: datetime,
  s: string
) with index (
  i01 = nrec (unique, surrogate)
);

create view
as select *
from tLog;

function GetLogColor(kind: byte): word;
{
  case kind of
    LOG_KIND_INFO    : result := 0;
    LOG_KIND_WARNING : result := 4;
    LOG_KIND_SUCCESS : result := 3;
    LOG_KIND_ERROR   : result := 2;
  else
    result := 0;
  end;
}

window wLog 'Лог' escclose;
browse brlog;
  table tLog;
  fields
    {font={color=GetLogColor(tLog.kind);}};
    tLog.timestamp 'Дата - время': [25,'DD.MM.YYYY HH:MM:SS'], protect, noautosize;
    tLog.s 'Лог': [100], protect;
end;
end;

procedure Log(msgKind: byte; msgText: string);
{
  clearbuffer(#tLog);
  tLog.kind := msgKind;
  tLog.s := msgText;
  tLog.timestamp := _CurDateTime;
  insert current tLog;
  if getlast tLog = tsOk
    rescanpanel(#tLog);
}

procedure ShowLog;
{

}

procedure LogWithIndent(kind: byte; indent: byte; s: string);
{
  log(kind, substr(EMPTY_STRING, 1, indent * INDENT_GAP) + s);
}

procedure LogError  (indent: byte; s: string);
{
  LogWithIndent(LOG_KIND_ERROR, indent, s);
}

procedure LogWarning(indent: byte; s: string);
{
  LogWithIndent(LOG_KIND_WARNING, indent, s);
}

procedure LogSuccess(indent: byte; s: string);
{
  LogWithIndent(LOG_KIND_SUCCESS, indent, s);
}

procedure LogInfo   (indent: byte; s: string);
{
  LogWithIndent(LOG_KIND_INFO, indent, s);
}
end.
