#ifndef __CLEVERENCE__
#define __CLEVERENCE__

#component "CLEVERENCE"

objinterface oCollection; forward;

#doc
<brief>Базовый класс для OLE-объекта</brief>
#end
objinterface oOleObject;
  function SetObjectPointer(aObjectPointer: pointer): boolean;
  property ObjectPointer: pointer read;
end;
vipinterface iOleObjectBase implements oOleObject sourceFile="OleObjectBase.vip";
  public:
    constructor Init;
    destructor Done;
    function GetCollection(aPropertyName: string; var aCollection: oCollection; aCollectionItemVipInterfaceName: string=''): oCollection;
    function CreateObject(aOleFunctionName: string; aObjectVipInterfaceName: string): oOleObject;
    procedure SetObject(aOleProcedureName: string; aObject: oOleObject);
end;

#doc
<brief>Коллекция объектов Cleverence</brief>
#end
objinterface oCollection(oOleObject);
  function Add(aItem: oOleObject): longint;
  function Item(ind: longint): oOleObject;
  function FindBy(findByFieldName: string; findValue: variant): oOleObject;
  function Contains(aObject: oOleObject): boolean;
  function Count: longint;
  procedure Clear;
  property CollectionItemVipInterfaceName: string;
end;
vipinterface iCollection(iOleObjectBase) implements oCollection;


#doc
<brief>Ячейка склада</brief>
#end
objinterface oCell(oOleObject);
  property Barcode: string;
  property Name: string;
  property Description: string;
end;
vipinterface iCell(iOleObjectBase) implements oCell;

#doc
<brief>Склад</brief>
#end
objinterface oWarehouse(oOleObject);
  property Id: string;
  property Name: string;
  property Cells: oCollection read;
end;
vipinterface iWarehouse(iOleObjectBase) implements oWarehouse;
  public: function oWarehouse.SetObjectPointer(aObjectPointer: pointer): boolean;
end;

#doc
<brief>Конфигурация системы. Предназначена хранения данных о текущих настройках системы</brief>
#end
objinterface oEnvironment(oOleObject);
  property Name: string;
  property Warehouses: oCollection read;
end;
vipinterface iEnvironment(iOleObjectBase) implements oEnvironment;
  public: function oEnvironment.SetObjectPointer(aObjectPointer: pointer): boolean;
end;

#doc
<brief>Позиция в документе. Позиция описывает с каким товаром, и в каком объеме должна производиться операция пользователя</brief>
#end
objinterface oDocumentItem(oOleObject);
  property CurrentQuantity: double;
  property DeclaredQuantity: double;
  property FirstStorageBarcode: string;
  property PackingId: string;
  property ProductId: string;
end;
vipinterface iDocumentItem(iOleObjectBase) implements oDocumentItem;

#doc
<brief>Документ. Основная единица взаимодействия между учетной системой и пользователем.
Содержит описание задания, назначенного к выполнению, и, собственно результат выполнения задания.</brief>
#end
objinterface oDocument(oOleObject);
  property Id              : string;
  property Barcode         : string;
  property Name            : string;
  property DocumentTypeName: string;
  property CreateDate      : string;
  property WarehouseId     : string;
  property CurrentItems    : oCollection read;
  property DeclaredItems   : oCollection read;
end;
vipinterface iDocument(iOleObjectBase) implements oDocument;
  public: function oDocument.SetObjectPointer(aObjectPointer: pointer): boolean;
end;

#doc
<brief>Значение дополнительного поля</brief>
#end
objinterface oFieldValue (oOleObject);
  property FieldName: string;
  property Value: string;
end;
vipinterface iFieldValue(iOleObjectBase) implements oFieldValue;

#doc
<brief>Тип упаковки товара</brief>
#end
objinterface oPacking(oOleObject);
  property Id: string;
  property Name: string;
  property Barcode: string;
end;
vipinterface iPacking(iOleObjectBase) implements oPacking;

#doc
<brief>Позиция номенклатуры (товар)</brief>
#end
objinterface oProduct(oOleObject);
  property Barcode: string;
  property BasePackingId: string;
  property Id: string;
  property Name: string;
  property UnitId: string;
  property UnitConvertionRate: double;
  property Packings: oCollection read;
  property Fields: oCollection read;
end;
vipinterface iProduct(iOleObjectBase) implements oProduct;
  public: function oProduct.SetObjectPointer(aObjectPointer: pointer): boolean;
end;

#doc
<brief>Справочник номенклатуры</brief>
#end
objinterface oProductsBook(oOleObject);
  property Products: oCollection read;
end;
vipinterface iProductsBook(iOleObjectBase) implements oProductsBook;

#doc
<brief>Класс, объекты которого служат для доступа к серверу системы</brief>
После создания объекта требуется провести его инициализацию с помощью функции InitializeServerConnection,
после чего будет доступна возможность сохранять и загружать с сервера документы и различные справочники.
#end
objinterface oStorageConnector(oOleObject);
  function InitializeServerConnection(connectionString: string): boolean;
  function GetProducts: oProductsBook;
  function GetDocuments(docType: string; checkForFinish: boolean): oCollection;
  function GetEnvironment: oEnvironment;
  function CreateProduct: oProduct;
  function CreatePacking: oPacking;
  function CreateFieldValue: oFieldValue;
  function CreateDocumentCollection: oCollection;
  function CreateProductCollection: oCollection;
  function CreateDocument: oDocument;
  function CreateDocumentItem: oDocumentItem;
  function CreateWarehouseCollection: oCollection;
  function CreateWarehouse: oWarehouse;
  function CreateCellCollection: oCollection;
  function CreateCell: oCell;
  procedure SetProduct(aProduct: oProduct);
  procedure SetDocuments(aDocumentCollection: oCollection);
  procedure SetWarehouses(aWarehouseCollection: oCollection);
  procedure SetProducts(aProductCollection: oCollection);
end;
vipinterface iStorageConnector(iOleObjectBase) implements oStorageConnector;
  public:
    constructor Init;
    function oStorageConnector.SetObjectPointer(aObjectPointer: pointer): boolean;
end;

#end
