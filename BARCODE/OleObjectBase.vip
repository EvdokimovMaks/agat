#include Cleverence.Warehouse.vih
#include OleHelper.vih

#component "CLEVERENCE"

interface iOleObjectBase;
var
  _objectPointer: pointer;
  _oleHelper: UTILS::oOleHelper;

constructor Init;
{
  result := true;
  if not GetVipRef(_oleHelper, 'UTILS::iOleHelper')
  {
    message(VipName(self)+'.Init: Ошибка инициализации UTILS::iOleHelper', error);
    result := false;
  }
}

destructor Done;
{
  if longint(_objectPointer) != 0 OleDestroy(_objectPointer);
}

function SetObjectPointer(aObjectPointer: pointer): boolean;
{
  result := _oleHelper.SetOleObjectPointer(aObjectPointer, _objectPointer);
}

function GetCollection(aPropertyName: string; var aCollection: oCollection; aCollectionItemVipInterfaceName: string = ''): oCollection;
{
  result := nullref;

  if aCollection = nullref
  {

    var p: pointer;
    _try
    {
      OleCall1(_objectPointer, ocGet, aPropertyName, p);
    }
    _except
    on exOleBadCall:
    {
      message(vipname(self)+'.'+aPropertyName+':'#13''+ExploreException, error);
      exit;
    }
    else
    {
      message(vipname(self)+'.'+aPropertyName+':'#13''+ExploreException, error);
      exit;
    }

    if not loadvipref(aCollection, 'CLEVERENCE::iCollection')
    {
      message(vipname(self)+': Ошибка инициализации iCollection', error);
      exit;
    }

    if not aCollection.SetObjectPointer(p)
    {
      message(vipname(self)+': Ошибка при вызове метода iCollection.SetObjectPointer', error);
      exit;
    }

    aCollection.CollectionItemVipInterfaceName := aCollectionItemVipInterfaceName;

  }

  result := aCollection;
}

function CreateObject(aOleFunctionName: string; aObjectVipInterfaceName: string): oOleObject;
{
  result := nullref;

  var p: pointer;
  _try
  {
    OleCall1(_objectPointer, ocFunc, aOleFunctionName, p);
  }
  _except
  on exOleBadCall:
  {
    message('iStorageConnector.'+aOleFunctionName+':'#13''+ExploreException, error);
    exit;
  }
  else
  {
    message('iStorageConnector.'+aOleFunctionName+':'#13''+ExploreException, error);
    exit;
  }

  var newObj: oOleObject;
  if not loadvipref(newObj, aObjectVipInterfaceName)
  {
    message('iStorageConnector: Ошибка инициализации '+aObjectVipInterfaceName, error);
    exit;
  }

  if not newObj.SetObjectPointer(p)
  {
    message('iStorageConnector: Ошибка при выполнении '+aObjectVipInterfaceName+'.SetObjectPointer', error);
    exit;
  }

  result := newObj;
}

procedure SetObject(aOleProcedureName: string; aObject: oOleObject);
{
  if aObject = nullref exit;

  var p: pointer;
  p := aObject.ObjectPointer;
  if longint(p) = 0 exit;

  _try
  {
    OleCall1(_objectPointer, ocProc, aOleProcedureName, p);
  }
  _except
  on exOleBadCall:
  {
    message('iStorageConnector.'+aOleProcedureName+':'#13''+ExploreException, error);
    exit;
  }
  else
  {
    message('iStorageConnector.'+aOleProcedureName+':'#13''+ExploreException, error);
    exit;
  }
}

property ObjectPointer: pointer read _objectPointer;
end.
