#include PickPrikaz.vih
#include QueryText.vih
#include QueryTextWithUserFilter.vih

#component "AGAT"

vipinterface PickPrikazQueryTextBase(QueryText);
public:
  procedure IQueryText.CreateSelect (var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateFrom   (var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateJoin   (var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateWhere  (var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateGroupBy(var sqlString: longint; params: IParams = nullref);
  procedure IQueryText.CreateOrderBy(var sqlString: longint; params: IParams = nullref);
end;

interface PickPrikazQueryTextBase;
  sql query qSelect =
    select distinct
           Prikaz.nrec as nrec,
           Prikaz.NoDoc as nodoc,
           Prikaz.dDoc as ddoc,
           coalesce(KatNotes.sName, '') as katnotesName,
           Prikaz.Mesto as mesto,
           Prikaz.Name as name;

  sql query qFrom =
    from prikaz;

  sql query qJoin =
    left join katnotes on katnotes.nrec = prikaz.cstatus
    left join spprikaz on spprikaz.cprikaz = prikaz.nrec;

  sql query qWhere = where 1=1;

  sql query qGroupBy = ;

  sql query qOrderBy =
    order by Prikaz.dDoc, prikaz.nodoc;

  procedure IQueryText.CreateSelect (var sqlString: longint; params: IParams = nullref);
  {
    sqlAddStr(sqlString, qSelect); params := params;
  }
  procedure IQueryText.CreateFrom   (var sqlString: longint; params: IParams = nullref);
  {
    sqlAddStr(sqlString, qFrom); params := params;
  }
  procedure IQueryText.CreateJoin   (var sqlString: longint; params: IParams = nullref);
  {
    sqlAddStr(sqlString, qJoin); params := params;
  }
  procedure IQueryText.CreateWhere  (var sqlString: longint; params: IParams = nullref);
  {
    sqlAddStr(sqlString, qWhere); params := params;
  }
  procedure IQueryText.CreateGroupBy(var sqlString: longint; params: IParams = nullref);
  {
    sqlAddStr(sqlString, qGroupBy); params := params;
  }
  procedure IQueryText.CreateOrderBy(var sqlString: longint; params: IParams = nullref);
  {
    sqlAddStr(sqlString, qOrderBy); params := params;
  }
end.

interface PickPrikazQueryText;

var
  _filters: PickPrikazFilters noauto;
  _queryText: IQueryText;

constructor PickPrikazQueryText(filters: PickPrikazFilters);
{
  _filters := filters;
  _queryText := IQueryText(new(PickPrikazQueryTextBase));
  _queryText := _queryText
                //по сотрудникам
                .Decorate(IQueryTextDecorator(
                  new(WhereFieldWithMarkerFilter,
                      WhereFieldWithMarkerFilter(_filters.PersonsFilter, 'spprikaz.cpersons'))
                ));
  result := true;
}

procedure ISqlString.Create(var sqlString: longint; params: IParams = nullref);
{
  _queryText.Create(sqlString, params);
}
end.
