#include BusinessTripLinks.vih
#include Params.vih
#include PickPrikaz.vih
#include BusinessTripLinks.vih
#include Query.vih
#include GetKau.vih
#include AtlProtocol.vih

#component "AGAT"

interface BusinessTripLinker;

//#region Queries

sql query queryGetBasedocPersons =
  select persons.nrec as nrec
  from stepdoc
  join spstep on spstep.cstepdoc = stepdoc.nrec
  join specmtr sm on sm.csaldtune = :saldtuneNrec and sm.cotable = :cotable and sm.cspec = spstep.nrec
  join persons on persons.nrec = sm.ckau[3]
  where stepdoc.cbasedoc = :basedocNrec
;

sql query queryLinks =
select rashdoc.nrec as RashdocNrec
from spstep
join specmtr sm on sm.csaldtune = :saldtuneNrec and sm.cotable = :cotable and sm.cspec = spstep.nrec
join persons pers on pers.nrec = sm.ckau[3]
join oborcfg on oborcfg.vrep = :vrep and oborcfg.inrec[0] = spstep.cmcusl
join spprikaz on spprikaz.cprikaz = :prikazNrec and spprikaz.cpersons = pers.nrec
join rashdoc on rashdoc.tipdoc = 2 and rashdoc.csoprdoc = spprikaz.nrec and rashdoc.name like trim(oborcfg.srep[0] + oborcfg.srep[1] + oborcfg.srep[2] + oborcfg.srep[3])
where spstep.nrec = :spstepNrec
;

//#endregion

var
  _basedocNrec: comp;
  _prikazNrec: comp;
  _spstepFilterMode: byte;
  _rashdocFilterMode: byte;
  _matches: IKatuslRashdocMatch(KatuslRashdocMatch) new;
  _paramsFactory: ParamsFactory;
  _pickPrikaz: PickPrikaz;
  _getKau: getkau;
  _linkManager: IBusinessTripLinkManager(BusinessTripLinkManager);

function GetPrikazFld: string; forward;
function GetBasedocFld: string; forward;

create view
as select GetPrikazFld() (fieldname=PrikazFld),
          GetBasedocFld() (fieldname=BasedocFld),
          if(getanykau(1, cgKau_KatUsl, _matches.KatuslNrec), givenanname(1), '') (fieldname=KatuslFld)
from prikaz, basedoc, stepdoc, spstep, _matches
where ((
  _prikazNrec  == prikaz.nrec and
  _basedocNrec == basedoc.nrec and
  _basedocNrec == stepdoc.cbasedoc and
  stepdoc.nrec == spstep.cstepdoc
));

//#region Вспомогательные ф-ции и процедуры

function GetPrikazFld: string;
{
  if isvalid(#prikaz)
    result := '№' + prikaz.nodoc + ' от ' + prikaz.ddoc;
  else
    result := 'Укажите приказ на командировку';
}

function GetBasedocFld: string;
{
  if isvalid(#basedoc)
    result := '№' + basedoc.nodoc + ' от ' + basedoc.ddoc;
  else
    result := '';
}

procedure SetBasedocNrec(value: comp);
{
  _basedocNrec := value;
  rereadrecord(#basedoc);
}

procedure SetPrikazNrec(value: comp);
{
  _prikazNrec := value;
  rereadrecord(#prikaz);
}

procedure PickPrikaz;
{
  var m: longint;
  m := _pickPrikaz.Filters.PersonsFilter.Marker;

  clearmarker(m);

  var q: IQuery;
  q := queryManager.createQuery(queryGetBasedocPersons)
                   .setParam('saldtuneNrec', SALDTUNE_NREC_DEFAULT)
                   .setParam('coTable', coSpstep)
                   .setParam('basedocNrec', _basedocNrec);

  if q.execute.errorCode = tsOk
    while q.fetch.errorCode = tsOk do
    {
      insertmarker(m, comp(q.row.valAt(1)));
    }

  _pickPrikaz.Filters.PersonsFilter.IsSet := true;

  if _pickPrikaz.ShowUI = cmDefault
  {
    PrikazNrec := _pickPrikaz.SelectedPrikazNrec;
    rereadrecord;
  }
}

procedure PickUsl;
{
  var c: comp;
  c := _matches.KatuslNrec;
  if _getKau.GetCodeKau(cgiPick, cgKau_KatUsl, c) > 0
  {
    _matches.KatuslNrec := c;
    setModified(true);
    rescanpanel(#_matches);
  }
}

//#endregion

window wUI 'Установка связи ДО с приказом на командировку' doaccept, escclose;
  show(,,65, 18);
  screen sc1;
  show(,,, 9) fixed_y;
  fields
    BasedocFld        : skip;
    PrikazFld         : protect, pickbutton;
    _spstepFilterMode : noprotect;
    _rashdocFilterMode: noprotect;
<<

`Документ основание `   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Приказ на командировку`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Обработка строк ДО`             `Привязка к строкам приказа`
 (.) Все строки`                 (.) К любым строкам`
 (.) Только строки без привязки` (.) Только к строкам без привязки`

 Соответствия услуг ДО и наименований расходов в приказах на командировку
>>
  end;
  browse br1 'Соответствия услуг ДО и наименований расходов в приказе на командировку' (,,sci178Esc);
  show(,10,,14);
  table _matches;
  fields
    KatuslFld 'Услуга ДО': [20], protect, pickbutton;
    _matches.RashdocNamePattern 'Наименование расхода в приказе на командировку': [20], noprotect;
  end;
  screen sc2;
  show(,15,,);
  buttons
    cmDoOk, default;
    cmCancel;
<<

                                   <. Продолжить .> <. Отмена .>
>>
  end;
  handleevent
    cmDoOk: putcommand(cmDefault);
  end;
end;

tableevent table _matches;
  cmUpdateRecord: update current _matches;
  cmDeleteRecord: delete current _matches;
  cmInsertRecord: insert current _matches;
end;

handleevent
  cmPick:
  {
    case curfield of
      #PrikazFld: pickPrikaz;
      #KatuslFld: pickUsl;
    end;
  }
end;

//#region IBusinessTripLinker

procedure IBusinessTripLinker.LinkBasedocWithPrikaz(aLogger: IAtlProtocol = nullref);
{

  var logger: IAtlProtocol;
  if aLogger = nullref
    logger := IAtlProtocol(new(AtlProtocol));
  else
    logger := aLogger;

  logger.LogMessage(
    APE_INFO,
    'Установка связи ДО №' + basedoc.nodoc + ' от ' + basedoc.ddoc
    + ' и приказа на командировку №' + prikaz.nodoc + ' от ' + prikaz.ddoc
  );

  var linksCount: integer = 0;

  if getfirst stepdoc = tsOk
    _loop spstep
    {

      if _spstepFilterMode = LINKER_SPSTEP_FILTER_MODE_UNLINKED
        if _linkManager.GetLinkedRashdocNrec(spstep.nrec) != 0
        {
          logger.LogLine(
            APE_INFO,
            'Строка ДО №' + spstep.npp + ' "' + if(getanykau(1, cgKau_KatUsl, spstep.cmcusl), givenanname(1), '')
            + '" пропущена, т.к. уже привязана к приказу на командировку     ' + _linkManager.GetLinkedRashdocPresentation(spstep.nrec)
          );
          continue;
        }

      var q: IQuery;
      q := queryManager.createQuery(queryLinks)
                       .setParam('saldtuneNrec', SALDTUNE_NREC_DEFAULT)
                       .setParam('cotable', coSpStep)
                       .setParam('vrep', OBORCFG_VREP_KATUSL_RASHDOC_MATCH)
                       .setParam('prikazNrec', _prikazNrec)
                       .setParam('spstepNrec', spstep.nrec);

      var rs: IResultSet;
      rs := q.getResultSet;

      var linkCreated: boolean;
      linkCreated := false;

      if rs.getFirst = tsOk do
      {

        var rashdocNrec: comp;
        rashdocNrec := rs.row.valAt(1);

        if _rashdocFilterMode = LINKER_RASHDOC_FILTER_MODE_UNLINKED
          if _linkManager.GetLinkedBasedocNrec(rashdocNrec) != 0
            continue;

        _linkManager.LinkSpstepWithRashdoc(spstep.nrec, rashdocNrec);

        linksCount++;
        linkCreated := true;

        logger.LogLine(
          APE_INFO,
          'Установлена связь строки ДО №' + spstep.npp + ' "' + if(getanykau(1, cgKau_KatUsl, spstep.cmcusl), givenanname(1), '')
          + '" с приказом на командировку     ' + _linkManager.GetRashdocPresentation(rashdocNrec)
        );

      } while rs.getNext = tsOk and not linkCreated;

      if not linkCreated
        logger.LogLine(
          APE_INFO,
          'Для строки ДО №' + spstep.npp + ' "' + if(getanykau(1, cgKau_KatUsl, spstep.cmcusl), givenanname(1), '')
          + '" не найдено соответствие в приказе на командировку. Строка пропущена'
        );

    } //loop spstep

    logger.LogCommit;

    logger.LogLine(APE_INFO, 'Установлено соответствий: ' + linksCount);
}

function IBusinessTripLinker.ShowUI: word;
{
  result := runwindowmodal(wUI);
}

property IBusinessTripLinker.BasedocNrec      : comp read _basedocNrec write SetBasedocNrec(result);
property IBusinessTripLinker.PrikazNrec       : comp read _prikazNrec write SetPrikazNrec(result);
property IBusinessTripLinker.SpstepFilterMode : byte absolute _spstepFilterMode;
property IBusinessTripLinker.RashdocFilterMode: byte absolute _rashdocFilterMode;
property IBusinessTripLinker.Matches          : IKatuslRashdocMatch read _matches;

//#endregion

//#region

constructor Init;
{
  if not readmydsk(_rashdocFilterMode, 'BusinessTripLinker_rashdocFilterMode', false)
    _rashdocFilterMode := LINKER_RASHDOC_FILTER_MODE_ALL;

  if not readmydsk(_spstepFilterMode, 'BusinessTripLinker_spstepFilterMode', false)
    _spstepFilterMode := LINKER_SPSTEP_FILTER_MODE_UNLINKED;

  result := true;
}

destructor Done;
{
  savemydsk(_rashdocFilterMode, 'BusinessTripLinker_rashdocFilterMode');
  savemydsk(_spstepFilterMode, 'BusinessTripLinker_spstepFilterMode');
}

//#endregion
end.
