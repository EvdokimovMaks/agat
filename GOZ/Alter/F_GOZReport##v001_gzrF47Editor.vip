#include Query.vih
#include ExtAttr.vih
#include AG_gzrTablGKDogView.vih

#component "F_GOZReport"

alter interface v001_gzrF47Editor;

const
  lc_AutoPATFltName_KatStroy: string = 'агат_Заказы';
  lc_AutoPATFltName_Dogovor_Cur: string = 'агат_Договор';
  lc_AutoPATFltName_IGK: string = 'агат_ИГК';
end;

overload
  constructor Init;
  function myAddAutoPATFiltersToListForCurQuickIGK: boolean;
end;

#include ExtAttr.var

constructor Init;
{
  otQuickIGKDog := IgzrTablGKDogView(new(AG_gzrTablGKDogView));
  result := inherited::Init;
}

sql query qKatStroy =
select t.Nrec
from (select distinct KatStroy.Nrec
      from Dogovor
      join SpDocs on SpDocs.TiDk = Dogovor.TiDk and SpDocs.cDoc = Dogovor.Nrec
      join SpecMtr on SpecMtr.coTable = 1723 and SpecMtr.cSpec = SpDocs.Nrec
      join KatStroy on KatStroy.Nrec = SpecMtr.cObj
      where Dogovor.Nrec = :cDogovor
      union
      select distinct KatStroy.Nrec
      from Dogovor
      join CalPlan on CalPlan.cDogovor = Dogovor.Nrec and CalPlan.DirectMc = Dogovor.Direct and CalPlan.Status <> 3
      join SpDocs on SpDocs.TiDk = 403 and SpDocs.cDoc = CalPlan.Nrec
      join SpecMtr on SpecMtr.coTable = 1723 and SpecMtr.cSpec = SpDocs.Nrec
      join KatStroy on KatStroy.Nrec = SpecMtr.cObj
      where Dogovor.Nrec = :cDogovor
      union
      select distinct KatStroy.Nrec
      from Dogovor
      join SpDocs on SpDocs.TiDk = Dogovor.TiDk and SpDocs.cDoc = Dogovor.Nrec
      join SpecMtr on SpecMtr.coTable = 1723 and SpecMtr.cSpec = SpDocs.Nrec
      join KatStroy on KatStroy.Nrec = SpecMtr.cObj
      where Dogovor.cDogovor = :cDogovor and Dogovor.Status <> 3
      union
      select distinct KatStroy.Nrec
      from Dogovor
      join CalPlan on CalPlan.cDogovor = Dogovor.Nrec and CalPlan.DirectMc = Dogovor.Direct and CalPlan.Status <> 3
      join SpDocs on SpDocs.TiDk = 403 and SpDocs.cDoc = CalPlan.Nrec
      join SpecMtr on SpecMtr.coTable = 1723 and SpecMtr.cSpec = SpDocs.Nrec
      join KatStroy on KatStroy.Nrec = SpecMtr.cObj
      where Dogovor.cDogovor = :cDogovor and Dogovor.Status <> 3
      union
      select KatStroy.Nrec
      from AttrVal
      join KatStroy on KatStroy.Nrec = AttrVal.vComp or (KatStroy.cStroy = AttrVal.vComp and AttrVal.vComp <> #comp(0))
      where AttrVal.wTable = 1707 and AttrVal.cRec = :cDogovor and AttrVal.cAttrNam = :cAttrNam
      union
      select KatStroy.Nrec
      from Dogovor
      join AttrVal on AttrVal.wTable = 1707 and AttrVal.cRec = Dogovor.Nrec and AttrVal.cAttrNam = :cAttrNam
      join KatStroy on KatStroy.Nrec = AttrVal.vComp or (KatStroy.cStroy = AttrVal.vComp and AttrVal.vComp <> #comp(0))
      where Dogovor.cDogovor = :cDogovor and Dogovor.Status <> 3
     ) t
;

function myAddAutoPATFiltersToListForCurQuickIGK: boolean;
{
  result := inherited::myAddAutoPATFiltersToListForCurQuickIGK;
  if not result exit;
  var isAllOk : boolean = True;
  do
  {
    //#region фильтр: "Текущий договор"
    do
    {
      if not myAddAutoTblPatFlt(lc_AutoPATFltName_Dogovor_Cur   // наименование фильтра
                              , cgKau_Dogovor                   // код аналитики
                              , False)                          // признак: "исключая номера"
      {
        FpLog(#(__InterfaceName__)+'.myLoadPATFilterListFromFile:'+ sLastError);
        isAllOk := False;
        Break;
      }
      if not myAddAutoTblSpPatFlt(otQuickIGKDog.cDogovor)
      {
        FpLog(#(__InterfaceName__)+'.myLoadPATFilterListFromFile:'+ sLastError);
        isAllOk := False;
        Break;
      }
      myAddMessage(2, '', 'Пат-фильтр "' + lc_AutoPATFltName_Dogovor_Cur + '": ' + ShowKau(cgKau_Dogovor, otQuickIGKDog.cDogovor));
    }
    while False;
    if not isAllOk Break;
    //#endregion фильтр: "Текущий договор"

    //#region фильтр: "Заказы по текущему договору"
    do
    {
      if not myAddAutoTblPatFlt(lc_AutoPATFltName_KatStroy, cgKau_ObjBuild, False)
      {
        FpLog(#(__InterfaceName__)+'.myLoadPATFilterListFromFile:'+ sLastError);
        isAllOk := False;
        Break;
      }
      var q: IQuery = queryManager.createQuery(qKatStroy)
                                  .setParam('cDogovor', otQuickIGKDog.cDogovor)
                                  .setParam('cAttrNam', ATTRNAM_NREC_DOGOVOR_ZAKAZ);
      var rs: IResultSet = q.getResultSet;
      if q.errorCode != tsOk
      {
        FpLog(#(__InterfaceName__)+'.SqlQueryError: qKatStroy '+ q.errorCode);
        isAllOk := False;
        Break;
      }
      if rs.getFirst = tsOk do
      {
        if not myAddAutoTblSpPatFlt(rs.row.valAt(1))
        {
          FpLog(#(__InterfaceName__)+'.myLoadPATFilterListFromFile:'+ sLastError);
          isAllOk := False;
          Break;
        }
        myAddMessage(2, '', 'Пат-фильтр "' + lc_AutoPATFltName_KatStroy + '": ' + ShowKau(cgKau_ObjBuild, rs.row.valAt(1)));
      }
      while rs.getNext = tsOk;
    }
    while False;
    if not isAllOk Break;
    //#endregion фильтр: "Заказы по текущему договору"

    //#region фильтр: "ИГК по заказам текущего договора"
    do
    {
      if not myAddAutoTblPatFlt(lc_AutoPATFltName_IGK, KODGRKAU_IGK, False)
      {
        FpLog(#(__InterfaceName__)+'.myLoadPATFilterListFromFile:'+ sLastError);
        isAllOk := False;
        Break;
      }
      var q: IQuery = queryManager.createQuery(qKatStroy)
                                  .setParam('cDogovor', otQuickIGKDog.cDogovor)
                                  .setParam('cAttrNam', ATTRNAM_NREC_DOGOVOR_ZAKAZ);
      if q.execute.errorCode != tsOk
      {
        FpLog(#(__InterfaceName__)+'.SqlQueryError: qKatStroy '+ q.errorCode);
        isAllOk := False;
        Break;
      }
      var mIGK: TPtr = InitMarker('', 8, 10, 10, true);
      while q.fetch.errorCode = tsOk
      {
        var cIGK: comp = oExtAttr.coGetAttrId(coKatStroy, q.row.valAt(1), ATTRNAM_NREC_KATSTROY_IGK);
        if cIGK = 0 continue;
        if foundMarker(mIGK, cIGK) continue;
        InsertMarker(mIGK, cIGK);
        if not myAddAutoTblSpPatFlt(cIGK)
        {
          FpLog(#(__InterfaceName__)+'.myLoadPATFilterListFromFile:'+ sLastError);
          isAllOk := False;
          Break;
        }
        myAddMessage(2, '', 'Пат-фильтр "' + lc_AutoPATFltName_IGK + '": ' + ShowKau(KODGRKAU_IGK, cIGK));
      }
      DoneMarker(mIGK, '');
    }
    while False;
    if not isAllOk Break;
    //#endregion фильтр: "ИГК по заказам текущего договора"
  }
  while False;

  result := isAllOk;
}

end.
