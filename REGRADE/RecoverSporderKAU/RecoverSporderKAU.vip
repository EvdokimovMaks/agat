#include RecoverSporderKAU.vih;
#include Query.vih

#component "AGAT"

interface RecoverSporderKAU;

sql query qSelectSporders =
select spo.nrec as SporderNrec,
       coalesce(spm.nrec,#comp(0)) as SpecmtrNrec,
       spo.dord as dorder,
       spo.vidorder,
       spo.ccpodr as KatpodrNrec,
       spo.ccmol as KatmolNrec,
       coalesce(spm.cobj,#comp(0)) as KatstroyNrec,
       coalesce(spm.ckau[1],#comp(0)) as ckau1,
       coalesce(spm.ckau[2],#comp(0)) as ckau2,
       coalesce(spm.ckau[3],#comp(0)) as ckau3,
       coalesce(spm.ckau[4],#comp(0)) as ckau4,
       coalesce(spm.ckau[5],#comp(0)) as ckau5,
       coalesce(spm.ckau[6],#comp(0)) as ckau6,
       coalesce(spm.ckau[7],#comp(0)) as ckau7,
       coalesce(spm.ckau[8],#comp(0)) as ckau8,
       coalesce(spm.ckau[9],#comp(0)) as ckau9,
       spo.kol as qty
from sporder spo
left join specmtr spm on spm.cotable=1112 and spm.csaldtune=#comp(0001000000000001h) and spm.cspec=spo.nrec
where spo.sp = :Sp and spo.cmc = :cMC
;

table struct tspo (
  SporderNrec : comp,
  SpecmtrNrec : comp,
  Dorder      : date,
  Vidorder    : word,
  KatpodrNrec : comp,
  KatmolNrec  : comp,
  KatstroyNrec: comp,
  cKau        : array[1..9] of comp,
  Qty         : double
) with index (
  i01 = Dorder + Vidorder + KatpodrNrec + KatmolNrec + KatstroyNrec + cKau[1] + cKau[2] + cKau[3] + cKau[4] + cKau[5] + cKau[6] + cKau[7] + cKau[8] + cKau[9]
);

table struct tsald (
  KatpodrNrec : comp,
  KatmolNrec  : comp,
  KatstroyNrec: comp,
  cKau        : array[1..9] of comp,
  Qty         : double
) with index (
  i01 = KatpodrNrec + KatmolNrec + KatstroyNrec + cKau[1] + cKau[2] + cKau[3] + cKau[4] + cKau[5] + cKau[6] + cKau[7] + cKau[8] + cKau[9] (unique)
);

type ttspo = record as table tspo;
type ttsald = record as table tsald;

create view
as select *
from tspo, specmtr;

var vs_buf: ttsald;

create view vs
as select *
from tsald
where ((
  vs_buf.KatpodrNrec  == tsald.KatpodrNrec and
  vs_buf.KatmolNrec   == tsald.KatmolNrec and
  vs_buf.KatstroyNrec == tsald.KatstroyNrec and
  vs_buf.cKau[1]      == tsald.cKau[1] and
  vs_buf.cKau[2]      == tsald.cKau[2] and
  vs_buf.cKau[3]      == tsald.cKau[3] and
  vs_buf.cKau[4]      == tsald.cKau[4] and
  vs_buf.cKau[5]      == tsald.cKau[5] and
  vs_buf.cKau[6]      == tsald.cKau[6] and
  vs_buf.cKau[7]      == tsald.cKau[7] and
  vs_buf.cKau[8]      == tsald.cKau[8] and
  vs_buf.cKau[9]      == tsald.cKau[9]
));

var vs1_buf: ttsald;

create view vs1
as select *
from tsald tsald1, tsald tsald2
where ((
  vs1_buf.KatpodrNrec  == tsald1.KatpodrNrec and
  vs1_buf.KatmolNrec   == tsald1.KatmolNrec and
  vs1_buf.KatstroyNrec == tsald1.KatstroyNrec and
  vs1_buf.cKau[1]      == tsald1.cKau[1] and
  vs1_buf.cKau[2]      == tsald1.cKau[2] and
  vs1_buf.cKau[3]      == tsald1.cKau[3] and
  vs1_buf.cKau[4]      == tsald1.cKau[4] and
  vs1_buf.cKau[5]      == tsald1.cKau[5] and
  vs1_buf.cKau[6]      == tsald1.cKau[6] and
  vs1_buf.cKau[7]      == tsald1.cKau[7] and
  vs1_buf.cKau[8]      == tsald1.cKau[8] and
  vs1_buf.cKau[9]      == tsald1.cKau[9] and (vs1_buf.Qty <= tsald1.Qty) and

  vs1_buf.KatpodrNrec  == tsald2.KatpodrNrec and
  vs1_buf.KatmolNrec   == tsald2.KatmolNrec and
  vs1_buf.KatstroyNrec == tsald2.KatstroyNrec and (vs1_buf.Qty <= tsald2.Qty)

));

procedure TspoToTsald(tspoBuf: ttspo; var tsaldBuf: ttsald);
{
  tsaldBuf.KatpodrNrec  := tspoBuf.KatpodrNrec;
  tsaldBuf.KatmolNrec   := tspoBuf.KatmolNrec;
  tsaldBuf.KatstroyNrec := tspoBuf.KatstroyNrec;
  tsaldBuf.cKau[1]      := tspoBuf.cKau[1];
  tsaldBuf.cKau[2]      := tspoBuf.cKau[2];
  tsaldBuf.cKau[3]      := tspoBuf.cKau[3];
  tsaldBuf.cKau[4]      := tspoBuf.cKau[4];
  tsaldBuf.cKau[5]      := tspoBuf.cKau[5];
  tsaldBuf.cKau[6]      := tspoBuf.cKau[6];
  tsaldBuf.cKau[7]      := tspoBuf.cKau[7];
  tsaldBuf.cKau[8]      := tspoBuf.cKau[8];
  tsaldBuf.cKau[9]      := tspoBuf.cKau[9];
  tsaldBuf.Qty          := tspoBuf.Qty;
}

procedure addSald(buf: ttsald);
{
  vs_buf := buf;
  if vs.getfirst tsald = tsOk
  {
    vs.tsald.Qty += buf.Qty;
    vs.update current tsald;
  }
  else
  {
    vs.ClearBuffer(#vs.tsald);
    vs.Qty := buf.Qty;
    vs.insert current tsald;
  }
}

procedure ProcessTspo;
{
  var tsaldBuf: ttsald;
  _loop tspo
  {
    TspoToTsald(ttspo(tspo.buffer), tsaldBuf);
    if tspo.Vidorder = 0
      addSald(tsaldBuf);
    else
    {
      vs1_buf := tsaldBuf;
      if vs1.getfirst tsald1 = tsOk
      {
        vs1.tsald1.Qty -= tspo.Qty;
        vs1.update current tsald1;
      }
      else if vs1.getfirst tsald2 = tsOk
      {
        if getfirst specmtr where ((tspo.SpecmtrNrec == specmtr.nrec)) != tsOk
        {
          clearbuffer(#specmtr);
          specmtr.cotable := 1112;
          specmtr.csaldtune := 0001000000000001h;
          specmtr.cspec := tspo.SporderNrec;
          specmtr.cobj := tspo.KatstroyNrec;
          insert current specmtr;
        }
        specmtr.cKau[1] := vs1.tsald2.cKau[1];
        specmtr.cKau[2] := vs1.tsald2.cKau[2];
        specmtr.cKau[3] := vs1.tsald2.cKau[3];
        specmtr.cKau[4] := vs1.tsald2.cKau[4];
        specmtr.cKau[5] := vs1.tsald2.cKau[5];
        specmtr.cKau[6] := vs1.tsald2.cKau[6];
        specmtr.cKau[7] := vs1.tsald2.cKau[7];
        specmtr.cKau[8] := vs1.tsald2.cKau[8];
        specmtr.cKau[9] := vs1.tsald2.cKau[9];
        update current specmtr;
        vs1.tsald2.Qty -= tspo.Qty;
        vs1.update current tsald2;
      }
      else
        addSald(tsaldBuf);
    }
  }
}

procedure RecoverMC(aKatmcNrec: comp; aSporderSp: word = 0);
{
  var q: IQuery;
  q := queryManager.createQuery(qSelectSporders);
  q.setParam('Sp', aSporderSp);
  q.setParam('cMC', aKatmcNrec);

  var rs: IResultSet;
  rs := q.getResultSet;

  if rs=nullref or q.errorCode != tsOk
  {
    message('Ошибка выполнения запроса qSelectSporders: '+q.errorCode, error);
    exit;
  }

  delete all tspo;
  sqlCopyInto(rs, #tspo, false);

  ProcessTspo;
}
end.
