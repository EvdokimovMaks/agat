#include DistrMatByStock.vih
#include Stock.vih
#include Query.vih

#component "AGAT"

interface DistrMatByStock;

table struct tForDistr (
  Nrec          : comp,
  KatpodrNrec   : comp,
  KatmolNrec    : comp,
  KatstroyNrec  : comp,
  KatmcNrec     : comp,
  KatmcObozn    : string[150],
  QtyForDistr   : double,
  QtyDistributed: double
) with index (
  i00 = Nrec (unique, surrogate),
  i01 = KatpodrNrec + KatmolNrec + KatstroyNrec + KatmcNrec (unique)
);

table struct tStock (
  Nrec          : comp,
  KatpodrNrec   : comp,
  KatmolNrec    : comp,
  KatstroyNrec  : comp,
  KatmcNrec     : comp,
  KatmcObozn    : string[150],
  Qty           : double,
  QtyDistributed: double
) with index (
  i00 = Nrec (unique, surrogate),
  i01 = KatmcNrec + KatstroyNrec + KatpodrNrec + KatmolNrec
);

table struct tLink (
  ForDistrNrec  : comp,
  StockNrec     : comp,
  Priority      : word,
  QtyDistribute : double
) with index (
  i01 = ForDistrNrec + Priority
);

var
  _paramsFactory: AGAT::StockParamsFactory;
  _params       : AGAT::IStockParams;
  _stock        : AGAT::Stock;
  _stockSet     : AGAT::IStockSet;

create view
as select *
from _stockSet, tForDistr, tStock, tLink, katmc, katstroy,
     tForDistr brForDistr, tLink brLink, tStock brStock
where ((
  brForDistr.Nrec  == brLink.ForDistrNrec and
  brLink.StockNrec == brStock.Nrec
));

window wStock;
browse br1;
show(,,,5);
table brForDistr;
fields
  if( getanykau(1, 2 , brForDistr.KatpodrNrec), givenanname(1), '') 'Подразделение': [20], protect;
  if( getanykau(1, 60, brForDistr.KatmolNrec), givenanname(1), '') 'МОЛ': [20], protect;
  if( getanykau(1, 40, brForDistr.KatstroyNrec), givenanname(1), '') 'Заказ': [20], protect;
  if( getanykau(1, 4 , brForDistr.KatmcNrec), givenanname(1), '') 'МЦ': [20], protect;
  brForDistr.KatmcObozn 'Обозначение': [20], protect;
  brForDistr.QtyForDistr 'Для распр-я': [10,3], protect;
  brForDistr.QtyDistributed 'Распределено': [10,3], protect;
end;
browse br2;
show(,6,,);
table brLink;
fields
  brLink.Priority 'Приоритет': [3], protect;
  if( getanykau(1, 2 , brStock.KatpodrNrec) , givenanname(1), '') 'Подразделение': [20], protect;
  if( getanykau(1, 60, brStock.KatmolNrec)  , givenanname(1), '') 'МОЛ': [20], protect;
  if( getanykau(1, 40, brStock.KatstroyNrec), givenanname(1), '') 'Заказ': [20], protect;
  if( getanykau(1, 4 , brStock.KatmcNrec)   , givenanname(1), '') 'МЦ': [20], protect;
  brStock.Qty 'Кол-во':[10,3], protect;
  brStock.QtyDistributed 'Распределено': [10,3], protect;
  (brStock.Qty - brStock.QtyDistributed) 'Осталось для распр-я': [10,3], protect;
  tLink.QtyDistribute 'Распределить': [10,3], noprotect;
end;
end;

tableevent table brLink;
  cmUpdateRecord:
  {
    update current brLink;
  }
  cmExprFieldChanged:
  {
    message(curfield);
  }
end; //tableevent brLink;


function GetPriority(KatstroyNrec: comp; KatstroyName: string; KatstroyCode: string): word;
{
  if pos('закрыт',locase(KatstroyName)) > 0
    result := 1
  else if KatstroyCode = '000028'
    result := 2
  else if KatstroyNrec = 0
    result := 3
  else if KatstroyCode = '000029'
    result := 4
  else
    result := 5;
}

function DistributeOnDate(aDate: date): boolean;
{
  result := false;

  _params := _paramsFactory.Get(StockParamsType_NoInit);

  _params.OnDate := aDate;

  _params.SetGroupByFlag(WarehouseSectionFlag_Katpodr)
        .SetGroupByFlag(WarehouseSectionFlag_Katmol)
        .SetGroupByFlag(WarehouseSectionFlag_Katstroy);

  _params.SetFilterFlag(WarehouseSectionFlag_Katmc);

  _loop tForDistr
  {
    _params.AddNrecToFilter(WarehouseSectionFlag_Katmc, tForDistr.KatmcNrec);
    if tForDistr.KatmcObozn != ''
      _loop katmc where (( tForDistr.KatmcObozn == katmc.obozn and (katmc.nrec <> tForDistr.KatmcNrec) ))
        _params.AddNrecToFilter(WarehouseSectionFlag_Katmc, katmc.Nrec);
  }

  var ss: IStockSet;
  ss := _stock.GetStock(_params);

  if ss != nullref
  {
    _stockSet := ss;

    delete all tStock;

    _loop _stockSet
    {
      clearbuffer(#tStock);
      tStock.KatpodrNrec    := _stockSet.KatpodrNrec;
      tStock.KatmolNrec     := _stockSet.KatmolNrec;
      tStock.KatstroyNrec   := _stockSet.KatstroyNrec;
      tStock.KatmcNrec      := _stockSet.KatmcNrec;
      if getfirst katmc where (( tStock.KatmcNrec == katmc.nrec )) = tsOk
        tStock.KatmcObozn   := katmc.obozn;
      tStock.Qty            := _stockSet.Qty;
      insert current tStock;
    }

    delete all tLink;

    _loop tStock
    {
      _loop tForDistr where ( tStock.KatmcNrec = tForDistr.KatmcNrec or
                              (tStock.KatmcObozn = tForDistr.KatmcObozn and tStock.KatmcObozn <> '') )
      {
        clearbuffer(#tLink);
        if getfirst katstroy where ((tStock.KatstroyNrec == katstroy.nrec)) = tsOk
          tLink.Priority   := GetPriority(katstroy.nrec, katstroy.name, katstroy.code);
        tLink.ForDistrNrec := tForDistr.Nrec;
        tLink.StockNrec    := tStock.Nrec;
        insert current tLink;
      }
    }

    runwindowmodal(wStock);
    result := true;
  }
  else
    result := false;
}

procedure AddWarehousePartForDistr(aKatpodrNrec, aKatmolNrec, aKatstroyNrec, aKatmcNrec: comp; aQty: double);
{
  clearbuffer(#tForDistr);
  tForDistr.KatpodrNrec  := aKatpodrNrec;
  tForDistr.KatmolNrec   := aKatmolNrec;
  tForDistr.KatstroyNrec := aKatstroyNrec;
  tForDistr.KatmcNrec    := aKatmcNrec;
  tForDistr.KatmcObozn   := if(getfirst katmc where ((aKatmcNrec == katmc.nrec)) = tsOk, katmc.obozn, '');
  tForDistr.QtyForDistr  := aQty ;
  insert current tForDistr;
}

procedure ClearWarehousePartsForDistr;
{
  delete all tForDistr;
}

end.
